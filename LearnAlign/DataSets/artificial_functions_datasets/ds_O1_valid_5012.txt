mov %ecx,%r9d
sub %edi,%r9d
mov %edi,%eax
sub %ecx,%eax
cmp %edi,%ecx
jle 19 <func1+0x19>
mov %edi,%eax
imul %edx,%eax
imul %ecx,%eax
add %r8d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a5 - a5 + a4 - a1;
    if (a1 < a4)
    {
        v7 = a5 + a1 * a3 * a4;
    }
    else
    {
        v7 = a1 - a4;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 11
4 11
5 5
6 5
7 7
8 7
9 7
10 7
11 13
12 13
13 13
14 13
15 13
16 13
17 14
<<<sep_out_sample>>>
lea -0x1(%rdx),%eax
imul %r8d,%eax
add %edi,%eax
mov %ecx,%r9d
imul %ecx,%r9d
mov %r9d,%r11d
imul %esi,%r11d
sub %ecx,%r11d
cmp %eax,%edi
jle 2e <func1+0x2e>
mov %edx,%r10d
imul %esi,%r10d
imul %edi,%r10d
sub %edx,%r10d
jmp 35 <func1+0x35>
mov %edi,%r10d
imul %ecx,%r10d
add %edx,%edi
add %edi,%esi
add %r8d,%esi
add %ecx,%esi
add %esi,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%r8d
imul %r8d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = (a5 * a3 - a5) + a1;
    v7 = a4 * a4 * a2 - a4;
    if (v6 < a1)
    {
        v8 = a1 * (a3 * a2) - a3;
    }
    else
    {
        v8 = a1 * a4;
    }
    v9 = a4 * (a5 + a4 * a4);
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 5
5 5
6 5
7 5
8 5
9 6
10 6
11 8
12 8
13 8
14 8
15 8
16 12
17 12
18 15
19 15
20 15
21 15
22 15
23 15
24 15
25 14
26 14
27 15
28 16
<<<sep_out_sample>>>
cmp %esi,%edi
jge c <func1+0xc>
mov %edx,%eax
neg %eax
sub %esi,%eax
jmp 16 <func1+0x16>
mov %edi,%eax
imul %edx,%eax
imul %esi,%eax
add %edx,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %r8d,%esi
add %esi,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a1 < a2)
    {
        v6 = ((a3 - a3) - a3) - a2;
    }
    else
    {
        v6 = a3 + a1 * a3 * a2;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += a4 - a2 + a1;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        v9 += a3 + a2 * a5;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 10
11 22
12 22
13 22
14 22
15 22
16 23
<<<sep_out_sample>>>
lea (%rdi,%rdx,2),%eax
add %esi,%eax
lea 0x1(%rcx,%rax,1),%eax
lea (%rax,%rdi,2),%eax
imul %esi,%r8d
imul %r8d,%edi
sub %edi,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a5 - a4 + a2;
    }
    v8 = a3 + (a1 + a1 - a3);
    v9 = a4 - a5 * a2 * a1;
    v10 = a3 - a5;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 12
2 12
3 12
4 12
5 10
6 10
7 10
8 12
9 13
<<<sep_out_sample>>>
mov %ecx,%eax
imul %esi,%eax
imul %eax,%eax
lea (%rdx,%rsi,1),%r9d
cmp %edi,%esi
jl 19 <func1+0x19>
lea 0x1(%rdi,%rsi,1),%r9d
imul %edi,%r9d
add %edx,%edi
add %edi,%esi
add %r8d,%esi
add %esi,%ecx
add %ecx,%eax
lea 0x1(%r9,%rax,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = (a4 * a4) * a2 * a2;
    if (a2 < a1)
    {
        v7 = a3 + a2;
    }
    else
    {
        v7 = a1 * (a1 + a2) + a1;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += a2 * a4 - a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 7
5 5
6 5
7 11
8 11
9 18
10 18
11 18
12 18
13 18
14 18
15 19
<<<sep_out_sample>>>
lea (%rcx,%rdx,1),%eax
cmp $0x1,%edx
jg 16 <func1+0x16>
mov %esi,%eax
sub %edx,%eax
mov %edx,%r9d
imul %r8d,%r9d
sub %r9d,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a1 + a2 + a2;
    }
    if (v7 < a3)
    {
        v8 = a4 + a3;
    }
    else
    {
        v8 = a2 - a3 - a3 * a5;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        v9 += a1 * a3;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 9
3 9
4 15
5 15
6 15
7 15
8 15
9 22
10 22
11 22
12 22
13 22
14 23
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %r8d,%edx
lea 0x1(%rcx,%rdx,1),%eax
sub %esi,%r8d
imul %ecx,%edi
imul %edi,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a2 - a5;
    }
    v8 = (a5 - a2) * (a1 * a4);
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 9
6 9
7 9
8 10
9 11
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%r9d
add %esi,%r9d
add %r8d,%r9d
add %ecx,%r9d
lea (%rdi,%r8,1),%eax
mov %edx,%r10d
sub %eax,%r10d
mov %r10d,%eax
sub %r8d,%eax
add %r9d,%eax
imul %edx,%edi
sub %edi,%ecx
add %ecx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = (a3 - (a1 + a5)) - a5;
    if (a1 < a1)
    {
        v7 = a1 + a4 - a2 - a2;
    }
    else
    {
        v7 = (a4 - a1 * a3) + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 13
2 13
3 13
4 13
5 4
6 4
7 4
8 4
9 4
10 13
11 11
12 11
13 11
14 13
15 14
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %ecx,%eax
cmp %ecx,%edx
jl 19 <func1+0x19>
mov %esi,%eax
imul %edx,%eax
mov %edi,%r9d
sub %eax,%r9d
mov %r9d,%eax
sub %esi,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %r8d,%esi
add %esi,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a3 < a4)
    {
        v6 = a1 + a3 + a4;
    }
    else
    {
        v6 = a1 - a2 * a3 - a2;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        if (v8 < a4)
        {
            v7 += a5 - (a1 + a4);
        }
        else
        {
            v7 += a4 + a1;
        }
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        if (v8 < a1)
        {
            v9 += a2 + a3 - a2;
        }
        else
        {
            v9 += (a4 * a3) + a3;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 6
3 4
4 4
5 10
6 10
7 10
8 10
9 10
10 10
11 36
12 36
13 36
14 36
15 36
16 37
<<<sep_out_sample>>>
mov %ecx,%eax
sub %r8d,%eax
mov %edx,%r9d
imul %esi,%r9d
cmp %r8d,%edx
cmovl %r9d,%eax
lea (%rdi,%rdx,1),%r9d
add %r9d,%esi
add %r8d,%esi
add %esi,%ecx
add %eax,%ecx
imul %r8d,%r8d
imul %r8d,%edx
sub %edi,%edx
lea (%rcx,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a3 < a5)
    {
        v6 = a3 * a2;
    }
    else
    {
        v6 = a2 + ((a4 - a2) - a5);
    }
    if (a2 < a2)
    {
        v7 = a4 - a1;
    }
    else
    {
        v7 = a5 * a5 * a3 - a1;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 10
2 10
3 6
4 6
5 6
6 6
7 20
8 20
9 20
10 20
11 20
12 18
13 18
14 18
15 20
16 21
<<<sep_out_sample>>>
cmp %ecx,%esi
jge 20 <func1+0x20>
mov %r8d,%r11d
imul %edx,%r11d
sub %esi,%r11d
sub %edi,%r11d
mov %r8d,%r10d
imul %ecx,%r10d
add %edi,%r10d
sub %edx,%r10d
jmp 36 <func1+0x36>
mov %esi,%r11d
imul %esi,%r11d
mov %edx,%eax
imul %r8d,%eax
mov %edi,%r10d
sub %eax,%r10d
add %ecx,%r10d
mov %edi,%r9d
sub %r8d,%r9d
cmp %edi,%edx
jl 47 <func1+0x47>
mov %edx,%r9d
imul %ecx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a2 < a4)
    {
        v6 = ((a5 * a3) - a2) - a1;
    }
    else
    {
        v6 = a2 * a2;
    }
    if (a2 < a4)
    {
        v7 = a1 + (a5 * a4) - a3;
    }
    else
    {
        v7 = (a1 - (a3 * a5)) + a4;
    }
    if (a3 < a1)
    {
        v8 = ((a1 - a3) - a5) + a3;
    }
    else
    {
        v8 = a3 * a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 14
8 14
9 14
10 14
11 14
12 10
13 10
14 18
15 18
16 18
17 18
18 18
19 22
20 22
21 20
22 20
23 26
24 26
25 28
26 28
27 28
28 28
29 28
30 28
31 28
32 29
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
mov %edi,%eax
imul %esi,%eax
imul %eax,%edi
add %r8d,%edi
sub %edx,%esi
lea 0x1(%rdi,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = (a1 * (a1 * a2)) - a4;
    v7 = a2 - a5 - a3 + a5;
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += (a3 + a1) - a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 4
5 4
6 4
7 11
8 5
9 11
10 12
<<<sep_out_sample>>>
add %edx,%edi
add %esi,%edi
add %edi,%r8d
lea 0x1(%rcx,%r8,1),%eax
sub %edx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a5 + a5 + a1;
    }
    v8 = ((a2 + a5) - a5) - a3;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 9
6 10
7 11
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a2 * a5 * a5;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        if (a5 < a4)
        {
            v8 += a4 * a2;
        }
        else
        {
            v8 += a5 * a5;
        }
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a3)
    {
        if (a1 < a3)
        {
            v10 += a4 * a1;
        }
        else
        {
            v10 += a2 * (a1 + a3);
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 33
2 33
3 33
4 33
5 34
<<<sep_out_sample>>>
test %esi,%esi
jle d <func1+0xd>
lea (%r8,%r8,1),%r9d
sub %edx,%r9d
jmp 14 <func1+0x14>
lea (%r8,%rcx,1),%r9d
neg %r9d
mov %ecx,%eax
sub %esi,%eax
mov %ecx,%r10d
imul %ecx,%r10d
cmp %edi,%r8d
cmovl %r10d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (v6 < a2)
    {
        v6 = (a5 + a5) - a3;
    }
    else
    {
        v6 = a2 - (a2 + (a5 + a4));
    }
    if (a5 < a1)
    {
        v7 = (a4 + a4 - a4) * a4;
    }
    else
    {
        v7 = a4 - a2;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 18
9 18
10 14
11 14
12 14
13 14
14 20
15 20
16 20
17 20
18 20
19 20
20 21
<<<sep_out_sample>>>
mov %r8d,%r10d
sub %ecx,%r10d
imul %esi,%r10d
add %edi,%r10d
cmp %edx,%esi
jle 1a <func1+0x1a>
mov %r8d,%r9d
imul %r8d,%r9d
jmp 27 <func1+0x27>
mov %edi,%r9d
sub %r8d,%r9d
imul %ecx,%r9d
add %edi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a1 - ((a4 - a5) * a2);
    if (a3 < a2)
    {
        v7 = a5 * a5;
    }
    else
    {
        v7 = a1 + (a1 - a5) * a4;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 5
6 5
7 7
8 7
9 7
10 11
11 11
12 11
13 11
14 13
15 13
16 13
17 13
18 13
19 13
20 14
<<<sep_out_sample>>>
cmp $0x1,%esi
jle c <func1+0xc>
mov %ecx,%eax
imul %ecx,%eax
jmp 15 <func1+0x15>
mov %esi,%eax
sub %ecx,%eax
imul %esi,%eax
sub %ecx,%eax
add %edx,%edi
add %edi,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a3 * a1;
    }
    if (v7 < a2)
    {
        v8 = a4 * a4;
    }
    else
    {
        v8 = (a2 * (a2 - a4)) - a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 15
7 15
8 15
9 15
10 17
11 17
12 17
13 17
14 17
15 18
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%r10d
test %edx,%edx
jg 12 <func1+0x12>
mov %edx,%r10d
imul %edx,%r10d
neg %r10d
cmp %r8d,%ecx
jge 20 <func1+0x20>
mov %esi,%r9d
imul %edi,%r9d
jmp 2f <func1+0x2f>
mov %esi,%r9d
imul %esi,%r9d
imul %esi,%r9d
imul %edx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (v6 < a3)
    {
        v6 = a1 + a3;
    }
    else
    {
        v6 = a5 - a5 - (a3 * a3);
    }
    if (a4 < a5)
    {
        v7 = a2 * a1;
    }
    else
    {
        v7 = (a2 * a2 * a2) * a3;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 4
3 4
4 10
5 10
6 10
7 12
8 12
9 14
10 14
11 14
12 18
13 18
14 18
15 18
16 20
17 20
18 20
19 20
20 20
21 20
22 21
<<<sep_out_sample>>>
lea 0x1(%rdx),%eax
imul %r8d,%eax
lea (%rdi,%rdx,2),%edx
lea 0x1(%rdx,%rax,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (a1 < a5)
        {
            v6 += (a5 - a1) + a5;
        }
        else
        {
            v6 += (a3 + a3) - a2;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += a2 * a5 * a2;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a1)
    {
        v10 += a4 - a4 + a3;
    }
    v12 = a3 * a5 + a5 + a3;
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 26
2 26
3 27
4 27
5 27
6 27
7 27
8 28
<<<sep_out_sample>>>
mov %edx,%eax
sub %r8d,%eax
test %edi,%edi
jg 11 <func1+0x11>
lea (%rcx,%r8,1),%eax
sub %edx,%eax
add %ecx,%eax
add %edi,%edx
add %esi,%edx
add %edx,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
mov %ecx,%edx
sub %esi,%edx
sub %edi,%edx
add %edx,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (v6 < a5)
        {
            v6 += (a5 * a4) - a5;
        }
        else
        {
            v6 += (a4 * a3) + a3;
        }
    }
    if (v8 < a1)
    {
        v8 = a3 - a5;
    }
    else
    {
        v8 = a4 + (a4 + a5 - a3);
    }
    if (a3 < a3)
    {
        v9 = a3 * a2 - (a2 + a1);
    }
    else
    {
        v9 = a4 - a2 - a1 + a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 16
4 16
5 22
6 22
7 22
8 32
9 32
10 32
11 32
12 32
13 30
14 30
15 30
16 30
17 32
18 33
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
add %ecx,%esi
mov %ecx,%eax
imul %edi,%eax
add %edx,%eax
imul %r8d,%eax
add %esi,%eax
imul %edi,%edi
imul %ecx,%edi
sub %edi,%edx
add %eax,%edx
imul %r8d,%ecx
mov $0x1,%eax
sub %ecx,%eax
imul %eax,%r8d
lea (%rdx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a4 < a4)
    {
        v6 = a3 - a1 - a3 * a1;
    }
    else
    {
        v6 = a5 * (a4 * a1 + a3);
    }
    v7 = a3 - a1 * a1 * a4;
    v8 = a5 - (a5 * (a5 * a4));
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 14
2 14
3 14
4 14
5 10
6 10
7 10
8 10
9 14
10 12
11 12
12 12
13 14
14 13
15 13
16 13
17 13
18 14
19 15
<<<sep_out_sample>>>
push %rbp
push %rbx
mov %edx,%ebx
imul %esi,%ebx
imul %ecx,%ebx
imul %esi,%ebx
test %edx,%edx
jle 1e <func1+0x1e>
mov %edi,%r11d
imul %ecx,%r11d
imul %r8d,%r11d
jmp 2b <func1+0x2b>
lea (%rsi,%r8,1),%eax
mov %edi,%r11d
sub %eax,%r11d
add %edi,%r11d
cmp %r8d,%ecx
jge 36 <func1+0x36>
lea (%rdx,%rdx,1),%r10d
jmp 3d <func1+0x3d>
mov %edx,%r10d
imul %r8d,%r10d
cmp %edi,%esi
jle 52 <func1+0x52>
mov %edi,%r9d
imul %edx,%r9d
mov %esi,%ebp
imul %ecx,%ebp
sub %ebp,%r9d
jmp 5a <func1+0x5a>
lea (%rsi,%rdi,1),%r9d
imul %ecx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %ebx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
pop %rbx
pop %rbp
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a4 < a4)
    {
        v6 = a4 + a2 - a5;
    }
    else
    {
        v6 = (a3 * a2 * a4) * a2;
    }
    if (v7 < a3)
    {
        v7 = a5 * (a1 * a4);
    }
    else
    {
        v7 = (a1 - (a2 + a5)) + a1;
    }
    if (a4 < a5)
    {
        v8 = a3 + a3;
    }
    else
    {
        v8 = a3 * a5;
    }
    if (a1 < a2)
    {
        v9 = a1 * a3 - a2 * a4;
    }
    else
    {
        v9 = a2 * a4 + a1 * a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 2
3 10
4 10
5 10
6 10
7 12
8 12
9 14
10 14
11 14
12 14
13 18
14 18
15 18
16 18
17 20
18 20
19 22
20 22
21 26
22 26
23 28
24 28
25 30
26 30
27 30
28 30
29 30
30 30
31 34
32 34
33 36
34 36
35 36
36 36
37 36
38 36
39 36
40 36
41 37
42 37
43 37
<<<sep_out_sample>>>
mov %edx,%r10d
sub %esi,%r10d
imul %r8d,%r10d
cmp %edi,%edx
jle 1c <func1+0x1c>
lea (%rdi,%rdx,1),%eax
mov %esi,%r9d
sub %eax,%r9d
add %esi,%r9d
jmp 24 <func1+0x24>
lea 0x1(%r8),%r9d
imul %esi,%r9d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (a4 < a4)
        {
            v6 += (a4 * a4) - a5;
        }
        else
        {
            v6 += a4 * a4 + a2;
        }
    }
    v8 = (a3 * a5) - (a5 * a2);
    if (a1 < a3)
    {
        v9 = a2 - (a1 + a3) + a2;
    }
    else
    {
        v9 = a2 * a5 + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 16
4 17
5 17
6 19
7 19
8 19
9 19
10 19
11 23
12 23
13 25
14 25
15 25
16 25
17 25
18 25
19 26
<<<sep_out_sample>>>
cmp $0x1,%esi
jle e <func1+0xe>
mov %r8d,%eax
sub %edi,%eax
add %eax,%eax
jmp 13 <func1+0x13>
mov %edx,%eax
imul %esi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a1 + (a2 - a5);
    }
    if (v7 < a2)
    {
        v8 = a5 - ((a1 + a1) - a5);
    }
    else
    {
        v8 = a3 * a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 15
8 15
9 17
10 17
11 17
12 17
13 17
14 18
<<<sep_out_sample>>>
mov %esi,%r10d
imul %edx,%r10d
imul %r8d,%r10d
add %esi,%r10d
mov %esi,%eax
imul %edi,%eax
mov %r8d,%r9d
imul %r8d,%r9d
sub %eax,%r9d
test %esi,%esi
jle 2f <func1+0x2f>
mov %esi,%eax
imul %r8d,%eax
imul %esi,%eax
imul %edx,%eax
jmp 33 <func1+0x33>
add %esi,%eax
add %ecx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r10d,%ecx
add %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = (a2 * a3) * a5 + a2;
    v7 = (a5 * a5) - a2 * a1;
    if (v8 < a2)
    {
        v8 = a3 * (a2 * a5 * a2);
    }
    else
    {
        v8 = (a2 * a1) + a2 + a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 5
6 5
7 5
8 5
9 5
10 6
11 6
12 8
13 8
14 8
15 8
16 8
17 12
18 12
19 14
20 14
21 14
22 14
23 14
24 14
25 14
26 15
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %r8d,%edx
add %ecx,%edx
mov %edi,%eax
sub %esi,%eax
add %eax,%edi
imul %edi,%ecx
lea 0x1(%rdx,%rcx,1),%edx
lea (%r8,%r8,2),%eax
sub %esi,%eax
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = (a1 - a2 + a1) * a4;
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        if (a4 < a3)
        {
            v7 += a3 - (a1 * a1);
        }
        else
        {
            v7 += a5 * a1;
        }
    }
    v9 = (a5 + a5) + a5 - a2;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 18
5 4
6 4
7 4
8 4
9 18
10 17
11 17
12 18
13 19
<<<sep_out_sample>>>
cmp %esi,%edx
jge f <func1+0xf>
lea (%rsi,%rcx,1),%eax
imul %r8d,%eax
add %ecx,%eax
jmp 18 <func1+0x18>
lea 0x1(%rdi),%eax
imul %r8d,%eax
add %ecx,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a3 < a2)
    {
        v6 = (a2 + a4) * a5 + a4;
    }
    else
    {
        v6 = (a5 * a1) + a5 + a4;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        if (a1 < a4)
        {
            v7 += a5 - a2;
        }
        else
        {
            v7 += (a5 - a5) + a5;
        }
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        if (a2 < a5)
        {
            v9 += (a3 * a2) - a4;
        }
        else
        {
            v9 += a2 + a2;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 36
11 36
12 36
13 36
14 36
15 37
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
mov $0x1,%esi
sub %edi,%esi
imul %esi,%ecx
imul %ecx,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (a5 < a3)
        {
            v6 += a4 + a1 * a1;
        }
        else
        {
            v6 += a5 * a4 * a2;
        }
    }
    v8 = (a4 - a1 * a4) * a3;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 16
6 16
7 16
8 16
9 17
10 18
<<<sep_out_sample>>>
cmp %edi,%esi
jge d <func1+0xd>
lea (%r8,%rsi,2),%r10d
add %esi,%r10d
jmp 1c <func1+0x1c>
mov %esi,%r10d
imul %edx,%r10d
add $0x1,%r10d
imul %ecx,%r10d
mov %edi,%r9d
imul %edx,%r9d
lea (%r8,%rcx,1),%eax
cmp %r9d,%r8d
jle 32 <func1+0x32>
mov %edi,%eax
sub %edx,%eax
add %eax,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r10d,%ecx
add %ecx,%r9d
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a2 < a1)
    {
        v6 = (a2 + (a2 + a5)) + a2;
    }
    else
    {
        v6 = a4 + a2 * a3 * a4;
    }
    v7 = (a3 + a3 * a1) - a3;
    if (v7 < a5)
    {
        v8 = (a1 - (a3 + a3)) + a1;
    }
    else
    {
        v8 = a5 + a4 - (a1 - a1);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 10
10 12
11 12
12 19
13 13
14 13
15 15
16 15
17 15
18 21
19 21
20 21
21 21
22 21
23 21
24 21
25 22
<<<sep_out_sample>>>
cmp %r8d,%edi
jge 11 <func1+0x11>
mov %r8d,%r9d
sub %edi,%r9d
imul %esi,%r9d
jmp 1b <func1+0x1b>
mov %esi,%r9d
imul %edi,%r9d
neg %r9d
mov $0x0,%eax
cmp %edx,%ecx
jl 2a <func1+0x2a>
lea 0x1(%rsi),%eax
imul %edx,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %r9d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a4 - a2;
    }
    if (a1 < a5)
    {
        v8 = a2 * a5 - (a2 * a1);
    }
    else
    {
        v8 = (a5 - (a2 * a1)) - a5;
    }
    if (a4 < a3)
    {
        v9 = a4 - a4;
    }
    else
    {
        v9 = a3 + (a3 * a2);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 15
8 15
9 15
10 19
11 17
12 17
13 23
14 23
15 25
16 25
17 25
18 25
19 25
20 25
21 26
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea (%r8,%rcx,1),%esi
lea 0x1(%rsi,%rcx,2),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = (a4 + a4 - a3) + a3;
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        if (a4 < a4)
        {
            v7 += a3 + a4;
        }
        else
        {
            v7 += a4 + a2;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 17
6 18
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a5 - a1 - a4;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += a4 + a5;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a2)
    {
        v10 += a5 * (a2 + a5);
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 19
2 19
3 19
4 19
5 20
<<<sep_out_sample>>>
mov %edx,%r9d
sub %edi,%r9d
add %esi,%r9d
imul %esi,%r9d
cmp %r9d,%esi
jle 23 <func1+0x23>
mov %esi,%r10d
imul %esi,%r10d
imul %esi,%r10d
imul %ecx,%r10d
jmp 30 <func1+0x30>
mov %edi,%r10d
imul %r8d,%r10d
sub %ecx,%r10d
add %r8d,%r10d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
lea (%r9,%r10,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = ((a3 - a1) + a2) * a2;
    if (v6 < a2)
    {
        v7 = (a2 * a2 * a2) * a4;
    }
    else
    {
        v7 = a1 * a5 - a4 + a5;
    }
    v8 = a3 - a3;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 5
6 5
7 7
8 7
9 7
10 7
11 7
12 11
13 11
14 11
15 11
16 14
17 14
18 14
19 14
20 14
21 14
22 15
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea (%r8,%rcx,1),%esi
sub $0x1,%ecx
imul %ecx,%edi
add %edi,%edx
lea 0x1(%rsi,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a1 * a4 - a1 + a3;
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += a3 - a5 * a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 4
6 4
7 4
8 10
9 11
<<<sep_out_sample>>>
mov %edi,%r9d
neg %r9d
sub %edi,%r9d
lea (%r8,%rdx,1),%eax
cmp %r9d,%edx
jle 20 <func1+0x20>
mov %esi,%r10d
sub %ecx,%r10d
mov %edx,%eax
imul %ecx,%eax
add %r10d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%r9d
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (v7 < a2)
        {
            v6 += a3 * a1;
        }
        else
        {
            v6 += a4 * a2 + a3;
        }
    }
    v8 = (a5 - (a1 + a5)) - a1;
    if (v8 < a3)
    {
        v9 = (a2 - a4) + (a3 * a4);
    }
    else
    {
        v9 = a5 + a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 16
4 23
5 17
6 17
7 19
8 19
9 19
10 19
11 19
12 25
13 25
14 25
15 25
16 25
17 25
18 26
<<<sep_out_sample>>>
cmp %edi,%edx
jge 10 <func1+0x10>
lea (%rcx,%r8,1),%eax
mov %edx,%r10d
sub %eax,%r10d
jmp 1e <func1+0x1e>
mov %r8d,%r10d
imul %edx,%r10d
sub %ecx,%r10d
imul %esi,%r10d
test %edx,%edx
jle 33 <func1+0x33>
mov %edx,%r9d
sub %esi,%r9d
mov %r8d,%eax
imul %edx,%eax
add %eax,%r9d
jmp 44 <func1+0x44>
mov %ecx,%r9d
imul %r8d,%r9d
mov %edi,%r11d
imul %edx,%r11d
sub %r11d,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
mov %ecx,%edx
imul %ecx,%edx
lea (%rdx,%rsi,2),%edx
add %edx,%eax
add %esi,%ecx
imul %ecx,%esi
sub %esi,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a3 < a1)
    {
        v6 = a3 - (a4 + a5);
    }
    else
    {
        v6 = a2 * (a5 * a3 - a4);
    }
    if (v7 < a3)
    {
        v7 = a3 - a2 + a5 * a3;
    }
    else
    {
        v7 = a4 * a5 - a1 * a3;
    }
    v8 = (a2 + a2) + a4 * a4;
    v9 = a5 - (a2 + a4) * a2;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 10
11 12
12 12
13 14
14 14
15 14
16 14
17 14
18 14
19 18
20 18
21 18
22 18
23 18
24 22
25 22
26 22
27 22
28 22
29 22
30 20
31 20
32 20
33 22
34 21
35 21
36 21
37 22
38 23
<<<sep_out_sample>>>
cmp %esi,%r8d
jge 10 <func1+0x10>
lea (%rdx,%rsi,1),%eax
imul %r8d,%eax
sub %esi,%eax
jmp 15 <func1+0x15>
mov %edi,%eax
imul %edi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a5 < a2)
    {
        v6 = a5 * (a3 + a2) - a2;
    }
    else
    {
        v6 = a1 * a1;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += a4 * a4 - a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 17
10 17
11 17
12 17
13 17
14 18
<<<sep_out_sample>>>
mov $0x1,%r9d
sub %esi,%r9d
imul %edi,%r9d
add %edx,%r9d
cmp %ecx,%edi
jge 1f <func1+0x1f>
mov %edi,%eax
imul %edi,%eax
imul %r8d,%eax
jmp 29 <func1+0x29>
mov %edi,%eax
imul %edi,%eax
imul %ecx,%eax
add %edx,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a1 - a2 * a1 + a3;
    if (a1 < a4)
    {
        v7 = (a1 * a1) * a5;
    }
    else
    {
        v7 = a1 * a1 * a4 + a3;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += a2 + a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 5
6 5
7 7
8 7
9 7
10 7
11 11
12 11
13 11
14 11
15 18
16 18
17 18
18 18
19 18
20 18
21 19
<<<sep_out_sample>>>
mov %esi,%eax
imul %ecx,%eax
mov %edi,%r9d
sub %eax,%r9d
imul %edx,%r9d
mov %edi,%eax
sub %esi,%eax
imul %edi,%eax
sub %ecx,%eax
cmp %r8d,%ecx
jge 2e <func1+0x2e>
mov %edi,%r10d
imul %esi,%r10d
imul %r8d,%r10d
imul %esi,%r10d
jmp 35 <func1+0x35>
lea (%rcx,%rdx,2),%r10d
add %esi,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = (a1 - (a2 * a4)) * a3;
    if (a4 < a4)
    {
        v7 = a1 - a2 + a3 + a4;
    }
    else
    {
        v7 = a1 * (a1 - a2) - a4;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += a4 - a5 + a3;
    }
    if (a4 < a5)
    {
        v10 = a2 * (a1 * a2 * a5);
    }
    else
    {
        v10 = (a3 + (a4 + a3)) + a2;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 4
6 11
7 11
8 11
9 11
10 18
11 18
12 20
13 20
14 20
15 20
16 20
17 24
18 24
19 26
20 26
21 26
22 26
23 26
24 26
25 26
26 27
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%r9d
lea (%rsi,%r9,1),%eax
add %r8d,%eax
add %ecx,%eax
imul %esi,%edi
imul %edi,%edx
imul %edx,%r8d
add %r8d,%eax
add %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a1 * a2 * a3 * a5;
    v7 = a1 + a3 + a4;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 5
2 6
3 6
4 6
5 4
6 4
7 4
8 6
9 5
10 6
11 7
<<<sep_out_sample>>>
add %edx,%edi
add %esi,%edi
add %r8d,%edi
lea 0x1(%rcx,%rdi,1),%edi
mov %r8d,%eax
imul %ecx,%eax
imul %eax,%ecx
sub %r8d,%ecx
lea (%rdi,%rcx,1),%eax
sub %edx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (v6 < a3)
        {
            v6 += a5 - a5;
        }
        else
        {
            v6 += (a3 - a3) + a1;
        }
    }
    if (a1 < a1)
    {
        v8 = (a5 + a4) * a1;
    }
    else
    {
        v8 = a5 * a4 * a4 - a5;
    }
    v9 = a2 - a3;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 25
2 25
3 25
4 25
5 22
6 22
7 22
8 22
9 25
10 24
11 25
12 26
<<<sep_out_sample>>>
lea (%rcx,%r8,1),%r9d
cmp %ecx,%esi
jge 15 <func1+0x15>
lea (%rcx,%rdi,1),%r9d
mov %r8d,%eax
imul %esi,%eax
add %eax,%r9d
cmp %r8d,%edi
jge 2a <func1+0x2a>
mov %ecx,%eax
imul %edx,%eax
mov %edi,%r10d
sub %eax,%r10d
mov %r10d,%eax
jmp 32 <func1+0x32>
lea 0x1(%r8),%eax
imul %r8d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a2 < a4)
    {
        v6 = a4 + a1 + a5 * a2;
    }
    else
    {
        v6 = (a4 + (a5 + a1)) - a1;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += a2 + a1 * a1;
    }
    if (a1 < a5)
    {
        v9 = a1 - a4 * a3;
    }
    else
    {
        v9 = a5 * a5 + a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 6
7 6
8 17
9 17
10 19
11 19
12 19
13 19
14 19
15 19
16 23
17 23
18 25
19 25
20 25
21 25
22 25
23 25
24 26
<<<sep_out_sample>>>
lea (%rdx,%rcx,1),%r9d
cmp $0x1,%edx
jle 11 <func1+0x11>
mov %esi,%eax
sub %ecx,%eax
sub %edx,%eax
jmp 1b <func1+0x1b>
mov %edi,%eax
imul %ecx,%eax
sub %r8d,%eax
add %edi,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a3 + a4;
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        if (v8 < a3)
        {
            v7 += a2 - a5;
        }
        else
        {
            v7 += a5 * a2 - a4;
        }
    }
    if (v8 < a3)
    {
        v9 = a2 - a4 - a3;
    }
    else
    {
        v9 = a1 * a4 - a5 + a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 17
3 17
4 19
5 19
6 19
7 19
8 23
9 23
10 23
11 23
12 25
13 25
14 25
15 25
16 25
17 25
18 26
<<<sep_out_sample>>>
lea (%r8,%rdx,1),%r10d
mov %ecx,%r9d
neg %r9d
cmp %edi,%r8d
jg 1a <func1+0x1a>
lea (%rdx,%rdi,1),%r9d
add %r8d,%r9d
imul %esi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a5 + a3;
    if (a1 < a5)
    {
        v7 = ((a4 - a4) * a4) - a4;
    }
    else
    {
        v7 = ((a3 + a1) + a5) * a2;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 7
3 7
4 5
5 5
6 11
7 11
8 11
9 13
10 13
11 13
12 13
13 13
14 13
15 14
<<<sep_out_sample>>>
mov $0x0,%eax
cmp %edi,%r8d
jge 18 <func1+0x18>
mov %r8d,%r9d
imul %r8d,%r9d
mov %edx,%eax
sub %edi,%eax
add %r9d,%eax
lea (%rdi,%rdx,1),%r9d
add %esi,%r9d
add %r8d,%r9d
add %ecx,%r9d
add %r9d,%eax
imul %r8d,%esi
sub %esi,%eax
mov %r8d,%esi
sub %ecx,%esi
imul %esi,%edi
add %edi,%eax
mov %edx,%esi
sub %r8d,%esi
imul %esi,%edx
imul %edx,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a5 < a1)
    {
        v6 = a5 * a5 + (a3 - a1);
    }
    else
    {
        v6 = a3 + a3 - (a3 + a3);
    }
    v7 = (a3 - a3) - (a5 * a2);
    v8 = a5 * a1 - a4 * a1;
    if (a1 < a1)
    {
        v9 = a3 - a1;
    }
    else
    {
        v9 = ((a3 - a5) * a3) * a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 6
7 6
8 6
9 22
10 22
11 22
12 22
13 22
14 12
15 22
16 13
17 13
18 13
19 22
20 20
21 20
22 20
23 20
24 22
25 23
<<<sep_out_sample>>>
mov %edi,%r9d
sub %esi,%r9d
mov %r8d,%eax
sub %ecx,%eax
cmp %r9d,%esi
jle 19 <func1+0x19>
mov %esi,%eax
sub %ecx,%eax
sub %edi,%eax
add %r8d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a1 + a2 - a2 - a2;
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        if (v8 < a2)
        {
            v7 += a3 - a2 - a5;
        }
        else
        {
            v7 += a2 * a3 * a4;
        }
    }
    if (v6 < a2)
    {
        v9 = a5 + (a2 - a4 - a1);
    }
    else
    {
        v9 = (a5 - a4) + a5 - a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 23
4 23
5 17
6 17
7 19
8 19
9 19
10 19
11 25
12 25
13 25
14 25
15 25
16 25
17 26
<<<sep_out_sample>>>
lea (%rdx,%rdx,1),%eax
mov %r8d,%r9d
imul %r8d,%r9d
sub %r9d,%eax
lea (%rdx,%rsi,1),%r9d
cmp %esi,%eax
jl 22 <func1+0x22>
mov %ecx,%r9d
sub %esi,%r9d
add %edi,%r9d
imul %edx,%r9d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%eax
lea 0x1(%r9,%rax,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a3 + a3 - a5 * a5;
    if (v6 < a2)
    {
        v7 = (a3 + a2 + a3) - a3;
    }
    else
    {
        v7 = (a4 - a2 + a1) * a3;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += a1 + a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 7
6 5
7 5
8 11
9 11
10 11
11 11
12 18
13 18
14 18
15 18
16 18
17 18
18 19
<<<sep_out_sample>>>
mov %ecx,%r10d
imul %edi,%r10d
sub $0x1,%r10d
imul %r8d,%r10d
mov %ecx,%r9d
sub %edx,%r9d
imul %edi,%r9d
add %ecx,%r9d
lea (%rcx,%rdi,1),%eax
cmp %r9d,%edx
jle 2d <func1+0x2d>
lea (%rcx,%rdx,1),%eax
imul %edi,%eax
sub %r8d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r10d,%ecx
add %ecx,%r9d
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = ((a4 * a1) * a5) - a5;
    v7 = a4 + (a4 - a3) * a1;
    if (v7 < a3)
    {
        v8 = ((a4 + a3) * a1) - a5;
    }
    else
    {
        v8 = a4 + a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 5
6 5
7 5
8 5
9 12
10 6
11 6
12 8
13 8
14 8
15 14
16 14
17 14
18 14
19 14
20 14
21 14
22 15
<<<sep_out_sample>>>
mov %edi,%r9d
imul %edi,%r9d
sub %edx,%r9d
imul %r8d,%r9d
lea (%rdi,%r8,1),%eax
cmp %esi,%ecx
jl 20 <func1+0x20>
mov %edi,%eax
imul %esi,%eax
imul %edx,%eax
add %esi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a5 * ((a1 * a1) - a3);
    if (a4 < a2)
    {
        v7 = ((a5 + a4) - a4) + a1;
    }
    else
    {
        v7 = a1 * a2 * a3 + a2;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += a5 + a4 * a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 7
6 5
7 5
8 11
9 11
10 11
11 11
12 18
13 18
14 18
15 18
16 18
17 18
18 19
<<<sep_out_sample>>>
mov %r8d,%eax
sub %esi,%eax
test %edx,%edx
jle 10 <func1+0x10>
mov %edi,%eax
sub %r8d,%eax
sub %ecx,%eax
mov %esi,%r9d
imul %r8d,%r9d
lea 0x1(%rdi,%r9,1),%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a4 - a1 * a1;
    }
    if (v6 < a3)
    {
        v8 = (a1 - a5) - a4;
    }
    else
    {
        v8 = a5 - a2;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        if (v8 < a2)
        {
            v9 += (a3 - a1) - a2;
        }
        else
        {
            v9 += (a4 * a2) - a1;
        }
    }
    v11 = a2 * a5;
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 15
2 15
3 9
4 9
5 11
6 11
7 11
8 29
9 29
10 30
11 30
12 30
13 30
14 30
15 30
16 31
<<<sep_out_sample>>>
cmp %edi,%edx
jge f <func1+0xf>
mov %ecx,%r9d
sub %edi,%r9d
add %ecx,%r9d
jmp 17 <func1+0x17>
lea 0x2(%r8),%r9d
imul %r8d,%r9d
test %ecx,%ecx
jle 23 <func1+0x23>
mov %edi,%eax
sub %edx,%eax
add %eax,%eax
jmp 2a <func1+0x2a>
mov %r8d,%eax
neg %eax
sub %ecx,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a3 < a1)
    {
        v6 = a4 - a1 + a4;
    }
    else
    {
        v6 = (a5 * a5 + a5) + a5;
    }
    if (v7 < a4)
    {
        v7 = (a1 - a3) - a3 + a1;
    }
    else
    {
        v7 = (a1 - a5) - a1 - a4;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 12
10 12
11 14
12 14
13 14
14 14
15 18
16 18
17 18
18 20
19 20
20 20
21 20
22 20
23 20
24 21
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (a4 < a5)
        {
            v6 += a4 - a1 * a1;
        }
        else
        {
            v6 += (a4 + a1) * a3;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += a2 * a5 - a5;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a4)
    {
        v10 += a2 * a1 * a2;
    }
    v12 = a3 - a3;
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 27
2 27
3 27
4 27
5 28
<<<sep_out_sample>>>
test %edx,%edx
jle a <func1+0xa>
lea (%rsi,%rsi,1),%r9d
jmp 19 <func1+0x19>
mov %edi,%r9d
sub %esi,%r9d
mov %edx,%eax
imul %r8d,%eax
add %eax,%r9d
cmp %r8d,%r9d
jge 24 <func1+0x24>
mov %ecx,%eax
sub %esi,%eax
jmp 31 <func1+0x31>
mov $0x1,%eax
sub %edx,%eax
imul %r8d,%eax
add %edi,%eax
cmp %ecx,%edx
jle 44 <func1+0x44>
mov %edx,%r10d
imul %edx,%r10d
add %esi,%r10d
add %ecx,%r10d
jmp 50 <func1+0x50>
mov %ecx,%r10d
sub %edx,%r10d
add %r8d,%r10d
sub %edx,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (v6 < a3)
    {
        v6 = a2 + (a2 - (a4 - a4));
    }
    else
    {
        v6 = a1 - a2 + (a3 * a5);
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += a1 * a4;
    }
    if (v6 < a5)
    {
        v9 = a4 - a2;
    }
    else
    {
        v9 = a5 - a5 * a3 + a1;
    }
    if (a4 < a3)
    {
        v10 = a2 + (a3 * a3) + a4;
    }
    else
    {
        v10 = (a4 - a3 + a5) - a3;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 10
6 10
7 10
8 10
9 10
10 17
11 17
12 19
13 19
14 19
15 23
16 23
17 23
18 23
19 25
20 25
21 27
22 27
23 27
24 27
25 27
26 31
27 31
28 31
29 31
30 33
31 33
32 33
33 33
34 33
35 33
36 33
37 34
<<<sep_out_sample>>>
mov %edi,%r9d
imul %edx,%r9d
lea (%rdi,%r8,1),%eax
imul %eax,%r9d
lea (%rcx,%rdi,1),%eax
neg %eax
cmp %edx,%edi
jg 21 <func1+0x21>
lea (%rdx,%rdx,1),%eax
imul %ecx,%eax
imul %edx,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = a1 * a3 * (a1 + a5);
    if (a3 < a1)
    {
        v7 = a4 - (a4 + a1 + a4);
    }
    else
    {
        v7 = ((a3 + a3) * a4) * a3;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += a5 + a5 - a3;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a2)
    {
        v10 += a3 * a2 + a3;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 7
6 7
7 5
8 5
9 11
10 11
11 11
12 23
13 23
14 23
15 23
16 23
17 23
18 24
<<<sep_out_sample>>>
cmp %esi,%edx
jge 12 <func1+0x12>
lea (%rcx,%rsi,1),%r9d
mov %edx,%eax
imul %edx,%eax
sub %eax,%r9d
jmp 21 <func1+0x21>
mov %esi,%r9d
imul %edi,%r9d
add $0x1,%r9d
imul %r8d,%r9d
cmp %edi,%edx
jge 2b <func1+0x2b>
lea (%r8,%r8,1),%eax
jmp 35 <func1+0x35>
mov %ecx,%eax
sub %edx,%eax
sub %r8d,%eax
sub %r8d,%eax
lea (%rdi,%r8,2),%edx
lea (%rdx,%rsi,1),%edx
add %edx,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a3 < a2)
    {
        v6 = a4 + a2 - a3 * a3;
    }
    else
    {
        v6 = a5 + a2 * a1 * a5;
    }
    if (a3 < a1)
    {
        v7 = a5 + a5;
    }
    else
    {
        v7 = (a4 - a3) - a5 - a5;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        if (v9 < a1)
        {
            v8 += (a5 - a5) * a1;
        }
        else
        {
            v8 += a1 + a2;
        }
    }
    v10 = a5 - a3;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 12
13 12
14 14
15 14
16 18
17 18
18 18
19 18
20 33
21 33
22 33
23 33
24 33
25 34
<<<sep_out_sample>>>
cmp $0x1,%edi
jle d <func1+0xd>
mov %ecx,%eax
imul %r8d,%eax
jmp 14 <func1+0x14>
mov %edx,%eax
sub %r8d,%eax
add %ecx,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (a2 < a1)
        {
            v6 += (a1 * a4) - a3;
        }
        else
        {
            v6 += a5 + a2 - a5;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        if (v9 < a3)
        {
            v8 += a1 * a5 - a1;
        }
        else
        {
            v8 += a2 * a1 - a2;
        }
    }
    if (v7 < a1)
    {
        v10 = a4 * a5;
    }
    else
    {
        v10 = a4 + (a3 - a5);
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 28
2 28
3 30
4 30
5 30
6 34
7 34
8 34
9 36
10 36
11 36
12 36
13 36
14 37
<<<sep_out_sample>>>
lea (%rdx,%rcx,1),%eax
cmp %edi,%edx
jl 11 <func1+0x11>
mov $0x1,%eax
sub %edi,%eax
imul %edi,%eax
lea (%rdi,%rdx,1),%r9d
add %esi,%r9d
add %r9d,%r8d
add %ecx,%r8d
add %eax,%r8d
imul %ecx,%edx
add %edx,%esi
sub %edi,%esi
lea 0x1(%r8,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a3 < a1)
    {
        v6 = a5 - (a5 - a3 - a4);
    }
    else
    {
        v6 = a1 - a1 * a1;
    }
    v7 = (a3 * a4) + a2 - a1;
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += a4 + a5 - a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 4
3 4
4 10
5 10
6 10
7 18
8 18
9 18
10 18
11 18
12 12
13 12
14 12
15 18
16 19
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
lea 0x1(%rcx,%r8,1),%eax
add $0x1,%esi
imul %esi,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a5 + (a5 + a4);
    }
    v8 = a1 + a2 * a1;
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        v9 += a5 * a5 + a3;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 15
2 15
3 15
4 15
5 9
6 9
7 15
8 16
<<<sep_out_sample>>>
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea (%rdi,%rcx,2),%eax
lea 0x1(%r8,%rax,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a1 + a4;
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += a5 + (a1 + a3);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 4
5 10
6 11
<<<sep_out_sample>>>
lea 0x1(%rdi,%rcx,1),%eax
add %eax,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a1 - a2;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += (a5 * a2) + a2;
    }
    v10 = (a4 + a2) - a2;
    v11 = 0;
    for (v12 = 0; v12++; v12<a1)
    {
        if (v6 < a4)
        {
            v11 += a3 + a4 - a1;
        }
        else
        {
            v11 += (a2 * a4) * a3;
        }
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 27
2 27
3 27
4 27
5 27
6 28
<<<sep_out_sample>>>
mov %r8d,%r9d
sub %ecx,%r9d
mov %edx,%eax
imul %ecx,%eax
sub %eax,%r9d
mov %edx,%eax
neg %eax
mov %edi,%r10d
imul %edi,%r10d
cmp %r9d,%edx
cmovg %r10d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a5 - a4 - a3 * a4;
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += (a2 - a4) * a5;
    }
    if (v6 < a3)
    {
        v9 = a1 * a1;
    }
    else
    {
        v9 = a5 - a5 - a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 4
6 16
7 16
8 12
9 12
10 12
11 12
12 18
13 18
14 18
15 18
16 18
17 18
18 19
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
imul %r8d,%ecx
sub $0x1,%ecx
imul %edx,%ecx
add %ecx,%eax
imul %edi,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a3 < a3)
    {
        v6 = a5 - a3;
    }
    else
    {
        v6 = a4 * a5 * a3 - a3;
    }
    v7 = a3 * a1;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 13
2 13
3 13
4 13
5 10
6 10
7 10
8 13
9 12
10 13
11 14
<<<sep_out_sample>>>
test %ecx,%ecx
jle c <func1+0xc>
mov %edx,%r9d
sub %edi,%r9d
jmp 13 <func1+0x13>
lea (%rdx,%rdi,2),%r9d
sub %ecx,%r9d
mov %edi,%eax
sub %esi,%eax
lea (%r8,%rdx,1),%r10d
cmp %esi,%ecx
cmovle %r10d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %r9d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a3 - a4 * a4;
    }
    if (v6 < a4)
    {
        v8 = a3 + (a4 - a4) - a1;
    }
    else
    {
        v8 = a1 + a1 + a3 - a4;
    }
    if (a2 < a4)
    {
        v9 = a1 + a4 - (a4 + a2);
    }
    else
    {
        v9 = a5 + a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 15
7 15
8 19
9 19
10 19
11 19
12 19
13 25
14 25
15 25
16 25
17 25
18 25
19 26
<<<sep_out_sample>>>
lea (%rdx,%rdi,1),%r9d
cmp %ecx,%edi
jge 10 <func1+0x10>
mov %edi,%eax
imul %r8d,%eax
jmp 17 <func1+0x17>
mov %edx,%eax
sub %esi,%eax
imul %esi,%eax
mov %edi,%r10d
imul %edi,%r10d
sub %esi,%r10d
add %ecx,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a2 + (a3 + a1 - a2);
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        if (a1 < a2)
        {
            v7 += a3 * a5 * a5;
        }
        else
        {
            v7 += a4 - (a3 * a5);
        }
    }
    if (a1 < a4)
    {
        v9 = a1 * a5;
    }
    else
    {
        v9 = a3 * a2 - a2 * a2;
    }
    v10 = ((a1 * a1) - a2) + a4;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 17
3 17
4 19
5 19
6 19
7 23
8 23
9 23
10 25
11 25
12 25
13 25
14 26
15 26
16 26
17 26
18 26
19 26
20 26
21 27
<<<sep_out_sample>>>
lea (%rcx,%r8,1),%eax
lea (%rdi,%rcx,1),%r10d
cmp %r8d,%edx
jge 18 <func1+0x18>
imul %edi,%eax
mov %edx,%r9d
sub %eax,%r9d
jmp 20 <func1+0x20>
lea -0x1(%rdi),%r9d
imul %esi,%r9d
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a3 * a1 + a3;
    }
    v8 = ((a4 + a5) + a1) - a5;
    if (a3 < a5)
    {
        v9 = a3 - (a1 * (a4 + a5));
    }
    else
    {
        v9 = a2 * a1 - a2;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a4)
    {
        if (v6 < a2)
        {
            v10 += a4 * a5;
        }
        else
        {
            v10 += a2 + a4 + a2;
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 10
4 10
5 12
6 12
7 12
8 12
9 16
10 16
11 30
12 30
13 30
14 30
15 30
16 30
17 31
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (a4 < a4)
        {
            v6 += (a5 + a5) + a5;
        }
        else
        {
            v6 += (a3 * a5) + a2;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += a2 + a2 + a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 21
5 22
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a2 + a5 - a1;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        if (a3 < a5)
        {
            v8 += a2 + a2;
        }
        else
        {
            v8 += a1 - (a2 + a1);
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 21
5 22
<<<sep_out_sample>>>
cmp %ecx,%esi
jge 10 <func1+0x10>
mov %edi,%r9d
imul %ecx,%r9d
neg %r9d
jmp 1f <func1+0x1f>
mov %ecx,%r9d
imul %r8d,%r9d
imul %esi,%r9d
imul %r8d,%r9d
mov %edi,%eax
sub %esi,%eax
cmp %edx,%ecx
jge 30 <func1+0x30>
mov %r8d,%eax
sub %esi,%eax
sub %edx,%eax
sub %esi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a2 < a4)
    {
        v6 = a2 - (a1 * a4 + a2);
    }
    else
    {
        v6 = a5 * (a4 * a5 * a2);
    }
    if (a4 < a3)
    {
        v7 = a5 - a2 - a3 - a2;
    }
    else
    {
        v7 = a3 + a1 - (a2 + a3);
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 10
11 18
12 18
13 12
14 12
15 14
16 14
17 14
18 14
19 20
20 20
21 20
22 20
23 20
24 20
25 21
<<<sep_out_sample>>>
cmp %edi,%r8d
jge 10 <func1+0x10>
mov %edx,%r9d
neg %r9d
sub %r8d,%r9d
jmp 18 <func1+0x18>
lea 0x1(%rcx),%r9d
imul %edi,%r9d
mov %ecx,%eax
sub %esi,%eax
cmp %ecx,%edx
jl 28 <func1+0x28>
lea 0x1(%r8,%r8,1),%eax
imul %edx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a5 < a1)
    {
        v6 = (a2 - a2) - a3 - a5;
    }
    else
    {
        v6 = a1 + a4 * a1;
    }
    if (a3 < a4)
    {
        v7 = a4 - a2;
    }
    else
    {
        v7 = (a5 + a5) * a3 + a3;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += a4 * a1 - a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 14
10 14
11 12
12 12
13 18
14 18
15 25
16 25
17 25
18 25
19 25
20 25
21 26
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a5 + a1 + a1;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += a4 * a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 14
2 14
3 14
4 14
5 15
<<<sep_out_sample>>>
lea (%rdi,%r8,1),%eax
lea (%rdx,%r8,1),%r9d
cmp %ecx,%r8d
cmovge %r9d,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a5 < a4)
    {
        v6 = a1 + a4 + (a5 - a4);
    }
    else
    {
        v6 = (a5 - a1) + (a3 + a1);
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a3 - a1 + a2;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        if (a1 < a5)
        {
            v9 += a1 * a3 - a2;
        }
        else
        {
            v9 += a4 + a5 + a3;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 29
6 29
7 29
8 29
9 29
10 30
<<<sep_out_sample>>>
push %rbx
mov %ecx,%r9d
imul %edx,%r9d
mov %ecx,%eax
imul %ecx,%eax
mov %r8d,%ebx
sub %eax,%ebx
imul %edi,%ebx
mov %ecx,%r11d
sub %esi,%r11d
mov %edx,%eax
imul %r8d,%eax
add %eax,%r11d
lea (%r9,%r8,1),%r10d
add %edi,%r10d
cmp %esi,%ecx
jl 3d <func1+0x3d>
mov %esi,%eax
imul %ecx,%eax
imul %edi,%eax
mov %r8d,%r10d
sub %eax,%r10d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
add %ebx,%eax
add %r11d,%eax
add %r10d,%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a4 * a3;
    v7 = (a5 - a4 * a4) * a1;
    v8 = (a4 - a2) + a3 * a5;
    if (a4 < a2)
    {
        v9 = a4 * a3 + a5 + a1;
    }
    else
    {
        v9 = a5 - a2 * a4 * a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 4
3 4
4 5
5 5
6 5
7 5
8 5
9 6
10 6
11 6
12 6
13 6
14 9
15 9
16 7
17 7
18 13
19 13
20 13
21 13
22 13
23 15
24 15
25 15
26 15
27 15
28 15
29 15
30 15
31 16
32 16
<<<sep_out_sample>>>
lea (%r8,%rsi,2),%r9d
add %esi,%r9d
mov %edi,%r10d
sub %ecx,%r10d
mov %edx,%eax
imul %ecx,%eax
add %r10d,%eax
add %r9d,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (a5 < a1)
        {
            v6 += (a4 - a2) + a1;
        }
        else
        {
            v6 += (a2 + a5) - a2;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        if (a3 < a5)
        {
            v8 += a2 + a3 + a5;
        }
        else
        {
            v8 += (a5 * a4) + a4;
        }
    }
    v10 = a5 + (a2 + a2) + a2;
    v11 = a1 - a4 + a3 * a4;
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 28
2 28
3 29
4 29
5 29
6 29
7 29
8 30
9 30
10 30
11 30
12 30
13 30
14 31
<<<sep_out_sample>>>
cmp %edi,%edx
jge 11 <func1+0x11>
mov %esi,%eax
imul %esi,%eax
imul %r8d,%eax
add %edx,%eax
jmp 1a <func1+0x1a>
lea 0x1(%rcx),%eax
imul %edi,%eax
imul %edx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a3 < a1)
    {
        v6 = a3 + (a2 * a2 * a5);
    }
    else
    {
        v6 = (a1 * a4 + a1) * a3;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += a5 - a5 - a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 17
12 17
13 17
14 17
15 17
16 18
<<<sep_out_sample>>>
add %edx,%edi
add %esi,%edi
add %r8d,%edi
add %ecx,%edi
mov %edx,%r9d
sub %esi,%r9d
add %r9d,%edi
imul %r8d,%edx
sub %ecx,%edx
sub %esi,%edx
lea (%rdi,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a3 - a2;
    v7 = (a5 * a3 - a4) - a2;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 4
7 6
8 5
9 5
10 5
11 6
12 7
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%eax
mov %r8d,%esi
sub %edx,%esi
imul %edi,%esi
imul %esi,%edx
add %edx,%eax
imul %ecx,%edi
imul %edi,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (v6 < a1)
        {
            v6 += a4 + a3 * a1;
        }
        else
        {
            v6 += (a5 + a5) * a1;
        }
    }
    if (a5 < a5)
    {
        v8 = a3 * a5 - a4;
    }
    else
    {
        v8 = ((a5 - a3) * a1) * a3;
    }
    if (a3 < a3)
    {
        v9 = a3 * (a3 + a5 * a3);
    }
    else
    {
        v9 = a5 * (a1 * a4);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 32
2 32
3 32
4 32
5 22
6 22
7 22
8 22
9 32
10 30
11 30
12 32
13 33
<<<sep_out_sample>>>
cmp $0x1,%edx
jle f <func1+0xf>
mov %edx,%eax
imul %edi,%eax
imul %edi,%eax
jmp 1f <func1+0x1f>
mov %esi,%eax
imul %edx,%eax
mov %edi,%r9d
sub %eax,%r9d
mov %r9d,%eax
add %ecx,%eax
add %edi,%edx
add %edx,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a5 * a1 * a1;
    }
    if (v7 < a3)
    {
        v8 = a1 * (a3 * a1);
    }
    else
    {
        v8 = a1 - a2 * a3 + a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 15
8 15
9 15
10 15
11 15
12 15
13 17
14 17
15 17
16 17
17 17
18 18
<<<sep_out_sample>>>
mov $0x0,%r9d
cmp %edx,%r8d
jge 12 <func1+0x12>
lea (%rdx,%rdx,2),%r9d
add %ecx,%r9d
mov %esi,%eax
neg %eax
mov %edx,%r10d
imul %ecx,%r10d
cmp %edi,%edx
cmovl %r10d,%eax
add %edx,%edi
add %esi,%edi
add %r8d,%edi
add %ecx,%edi
add %edi,%r9d
add %r9d,%eax
sub %edx,%ecx
add %ecx,%r8d
add %r8d,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a5 < a3)
    {
        v6 = a4 + ((a3 + a3) + a3);
    }
    else
    {
        v6 = a4 - a4;
    }
    if (a3 < a1)
    {
        v7 = a4 + a4 * a3 - a4;
    }
    else
    {
        v7 = a1 - (a1 + a2);
    }
    v8 = a5 - (a3 - a4) + a2;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 18
7 18
8 14
9 14
10 14
11 14
12 21
13 21
14 21
15 21
16 21
17 21
18 20
19 20
20 20
21 21
22 22
<<<sep_out_sample>>>
mov %ecx,%r9d
imul %edx,%r9d
imul %r8d,%r9d
add %edx,%r9d
cmp %esi,%r8d
jle 1b <func1+0x1b>
mov %edi,%eax
sub %ecx,%eax
sub %edx,%eax
jmp 21 <func1+0x21>
lea (%rcx,%rdx,2),%eax
sub %r8d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = (a4 * a3 * a5) + a3;
    if (a2 < a5)
    {
        v7 = a1 - a4 - a3;
    }
    else
    {
        v7 = a4 - (a5 - a3 - a3);
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 5
6 5
7 7
8 7
9 7
10 7
11 11
12 11
13 13
14 13
15 13
16 13
17 13
18 13
19 14
<<<sep_out_sample>>>
lea (%rdx,%rdx,1),%eax
cmp %r8d,%edi
jge 13 <func1+0x13>
mov %r8d,%eax
sub %edi,%eax
sub %ecx,%eax
imul %r8d,%eax
lea 0x1(%rdi,%rdx,1),%edi
add %esi,%edi
add %r8d,%edi
add %ecx,%edi
add %edi,%eax
add %ecx,%edx
imul %ecx,%edx
add %r8d,%edx
add %edx,%eax
add %esi,%r8d
add %r8d,%ecx
imul %ecx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a1 < a5)
    {
        v6 = (a5 - a1 - a4) * a5;
    }
    else
    {
        v6 = a3 + a3;
    }
    v7 = a5 + (a4 + a3) * a4;
    v8 = (a2 + a5 + a4) * a2;
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        v9 += (a3 * a1) - a2;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 6
7 6
8 19
9 19
10 19
11 19
12 19
13 12
14 12
15 12
16 19
17 13
18 13
19 13
20 19
21 20
<<<sep_out_sample>>>
test %edi,%edi
jle d <func1+0xd>
mov %esi,%r9d
imul %ecx,%r9d
jmp 16 <func1+0x16>
lea (%rdx,%rdi,1),%eax
mov %ecx,%r9d
sub %eax,%r9d
add %edx,%edi
add %edi,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (a2 < a4)
        {
            v6 += a4 * a3 - a2;
        }
        else
        {
            v6 += (a1 * a5) + a1;
        }
    }
    if (v8 < a1)
    {
        v8 = a2 * a4;
    }
    else
    {
        v8 = a4 - (a3 + a1);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 22
7 22
8 22
9 24
10 24
11 24
12 24
13 24
14 25
<<<sep_out_sample>>>
cmp %edx,%ecx
jge 11 <func1+0x11>
lea 0x1(%rsi),%r9d
imul %esi,%r9d
sub %edi,%r9d
jmp 1e <func1+0x1e>
mov %edi,%eax
imul %edx,%eax
add %esi,%eax
mov %r8d,%r9d
sub %eax,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
imul %esi,%edx
imul %edx,%r8d
add %r8d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a4 < a3)
    {
        v6 = (a2 + a2 * a2) - a1;
    }
    else
    {
        v6 = a5 - (a1 * a3 + a2);
    }
    if (a1 < a1)
    {
        v7 = a2 * a2;
    }
    else
    {
        v7 = (a3 * a2 * a5) + a4;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 10
11 10
12 20
13 20
14 20
15 20
16 20
17 18
18 18
19 18
20 20
21 21
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (a3 < a3)
        {
            v6 += a3 + (a3 - a5);
        }
        else
        {
            v6 += (a1 * a5) - a1;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += a2 * a2 - a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 21
5 22
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
imul %r8d,%edx
imul %edx,%esi
add %edi,%esi
add %esi,%eax
sub %ecx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a1 + a3 * a5 * a2;
    v7 = a1 - a4;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 4
7 4
8 6
9 5
10 6
11 7
<<<sep_out_sample>>>
lea (%rcx,%rdx,1),%eax
test %r8d,%r8d
jg 15 <func1+0x15>
lea (%rsi,%rcx,1),%eax
mov %edi,%r9d
imul %r8d,%r9d
sub %r9d,%eax
cmp %esi,%ecx
jge 26 <func1+0x26>
lea 0x1(%rdx),%r9d
imul %edx,%r9d
add %edi,%r9d
jmp 2d <func1+0x2d>
mov %esi,%r9d
imul %esi,%r9d
mov %r8d,%r10d
imul %ecx,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (a4 < a4)
        {
            v6 += a4 - a4;
        }
        else
        {
            v6 += a4 * a5 * a4;
        }
    }
    if (v6 < a5)
    {
        v8 = a4 + a3;
    }
    else
    {
        v8 = a2 + a4 - a1 * a5;
    }
    if (a4 < a2)
    {
        v9 = a3 + a3 * a3 + a1;
    }
    else
    {
        v9 = a2 * a2;
    }
    v10 = a5 * a4;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 16
3 16
4 22
5 22
6 22
7 22
8 24
9 24
10 26
11 26
12 26
13 26
14 30
15 30
16 32
17 32
18 33
19 33
20 33
21 33
22 33
23 33
24 33
25 34
<<<sep_out_sample>>>
cmp %edx,%esi
jge e <func1+0xe>
mov %ecx,%eax
sub %edi,%eax
add %esi,%eax
sub %edi,%eax
jmp 16 <func1+0x16>
lea 0x1(%r8),%eax
imul %r8d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %ecx,%r8d
add %eax,%r8d
lea (%rcx,%rcx,2),%eax
imul %eax,%ecx
lea 0x1(%r8,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a2 < a3)
    {
        v6 = ((a4 - a1) + a2) - a1;
    }
    else
    {
        v6 = a5 + a5 * a5;
    }
    v7 = ((a4 + a4) + a4) * a4;
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += a3 + a5 + a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 18
11 18
12 18
13 18
14 18
15 12
16 12
17 18
18 19
<<<sep_out_sample>>>
mov %esi,%eax
sub %ecx,%eax
mov %esi,%r9d
imul %ecx,%r9d
sub %r9d,%eax
cmp %edx,%esi
jle 1f <func1+0x1f>
mov %edi,%r9d
imul %esi,%r9d
imul %ecx,%r9d
jmp 2d <func1+0x2d>
lea (%rdx,%rsi,1),%r10d
mov %ecx,%r9d
imul %edx,%r9d
add %r10d,%r9d
add %edi,%edx
add %edx,%esi
add %r8d,%esi
add %esi,%ecx
add %ecx,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a3 < a3)
    {
        v6 = (a2 * (a4 + a2)) + a3;
    }
    else
    {
        v6 = (a2 - a4) - (a2 * a4);
    }
    if (a3 < a2)
    {
        v7 = a4 * (a1 * a2);
    }
    else
    {
        v7 = a3 + a2 + a4 * a3;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 10
6 12
7 12
8 14
9 14
10 14
11 14
12 18
13 18
14 18
15 18
16 20
17 20
18 20
19 20
20 20
21 20
22 21
<<<sep_out_sample>>>
lea (%r8,%rdi,1),%eax
cmp %edi,%edx
jge 14 <func1+0x14>
mov %esi,%eax
imul %r8d,%eax
imul %r8d,%eax
add %edx,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a4 - a2;
    }
    if (a3 < a1)
    {
        v8 = a3 + a2 * a5 * a5;
    }
    else
    {
        v8 = a5 + a1;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        v9 += a2 * a5 + a1;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 15
2 9
3 9
4 11
5 11
6 11
7 11
8 22
9 22
10 22
11 22
12 22
13 23
<<<sep_out_sample>>>
lea (%rcx,%rdi,1),%eax
cmp %edi,%esi
jl e <func1+0xe>
lea (%rdi,%rdi,1),%eax
sub %esi,%eax
add %edx,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %r8d,%esi
add %esi,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a2 < a1)
    {
        v6 = a4 + a1;
    }
    else
    {
        v6 = (a1 + a1) - a2 + a3;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += a1 * a2;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        v9 += a4 + a2;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 4
3 4
4 10
5 10
6 10
7 22
8 22
9 22
10 22
11 22
12 23
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %r8d,%edx
lea (%rsi,%r8,2),%eax
lea (%rdx,%rcx,2),%edx
lea 0x1(%rdx,%rax,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (a2 < a1)
        {
            v6 += (a2 - a1) + a4;
        }
        else
        {
            v6 += (a2 - a4) - a2;
        }
    }
    v8 = a4 + (a5 + a2) + a5;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 16
5 16
6 17
7 18
<<<sep_out_sample>>>
cmp %edx,%esi
jge 10 <func1+0x10>
mov %r8d,%eax
sub %edx,%eax
imul %ecx,%eax
add %edx,%eax
jmp 1a <func1+0x1a>
lea 0x1(%rcx),%eax
imul %esi,%eax
imul %r8d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a2 < a3)
    {
        v6 = a3 - a4 * (a3 - a5);
    }
    else
    {
        v6 = a5 * (a2 + a4 * a2);
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        if (a1 < a4)
        {
            v7 += a4 - a1;
        }
        else
        {
            v7 += a2 - a2;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 24
12 24
13 24
14 24
15 24
16 25
<<<sep_out_sample>>>
lea (%rdx,%r8,1),%eax
test %edx,%edx
jle f <func1+0xf>
mov %esi,%eax
imul %esi,%eax
add %edi,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a2 - a3 * a2;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += (a5 - a1) * a1;
    }
    if (v10 < a3)
    {
        v10 = a1 + a2 * a2;
    }
    else
    {
        v10 = (a3 + a5 - a2) + a2;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 20
2 14
3 14
4 16
5 16
6 16
7 22
8 22
9 22
10 22
11 22
12 23
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (a3 < a2)
        {
            v6 += a1 * a4 + a1;
        }
        else
        {
            v6 += (a4 - a1) - a4;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        if (v8 < a1)
        {
            v8 += a2 * a1 + a4;
        }
        else
        {
            v8 += a3 - (a3 * a5);
        }
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a1)
    {
        v10 += (a1 - a1) - a4;
    }
    v12 = a5 - a5;
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 34
2 34
3 34
4 34
5 35
<<<sep_out_sample>>>
mov %esi,%eax
imul %ecx,%eax
imul %ecx,%eax
add %r8d,%eax
add %edi,%eax
add %edx,%eax
add %eax,%esi
add %r8d,%esi
add %esi,%ecx
sub %edi,%edx
lea 0x1(%rcx,%rdx,1),%eax
lea -0x1(%r8),%edx
imul %edx,%edi
add %edi,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a3 - a1;
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += a5 * a1;
    }
    v9 = a5 - (a1 - a1 * a5);
    v10 = (a2 * a4 * a4) + a5;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 11
5 12
6 12
7 12
8 12
9 12
10 4
11 12
12 10
13 10
14 10
15 12
16 13
<<<sep_out_sample>>>
lea 0x2(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12, v13 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (a4 < a5)
        {
            v6 += a4 + a5;
        }
        else
        {
            v6 += a2 - a1 * a5;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += (a2 + a5) - a3;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a1)
    {
        v10 += a2 - (a1 - a5);
    }
    v12 = 0;
    for (v13 = 0; v13++; v13<a4)
    {
        v12 += a4 - a5;
    }
    return v12+v13+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 31
2 31
3 31
4 31
5 32
<<<sep_out_sample>>>
mov %esi,%eax
neg %eax
sub %esi,%eax
cmp %esi,%r8d
jle 14 <func1+0x14>
mov %ecx,%eax
sub %esi,%eax
sub %edx,%eax
imul %ecx,%eax
add %edi,%eax
add %eax,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a5 * (a4 * a4);
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        if (a3 < a3)
        {
            v8 += a5 + a4;
        }
        else
        {
            v8 += a4 - a5;
        }
    }
    if (a2 < a5)
    {
        v10 = a4 * (a4 - a2 - a3);
    }
    else
    {
        v10 = a3 - (a2 + a3) - a2;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 27
2 27
3 27
4 21
5 21
6 23
7 23
8 23
9 23
10 29
11 29
12 29
13 29
14 29
15 30
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %r8d,%edx
add %edx,%ecx
mov %edi,%r9d
sub %esi,%r9d
add %r9d,%ecx
imul %edi,%esi
sub %r8d,%esi
add %esi,%edi
lea (%rcx,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a1 - a2;
    v7 = a1 * a2 - a5 + a1;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 4
7 6
8 5
9 5
10 5
11 6
12 7
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (v6 < a1)
        {
            v6 += a3 * (a2 - a3);
        }
        else
        {
            v6 += a4 - a2 * a3;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += a2 * a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 21
5 22
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %eax,%ecx
sub %r8d,%esi
lea 0x1(%rcx,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a2 - a5;
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        if (v8 < a1)
        {
            v7 += (a1 * a2) - a4;
        }
        else
        {
            v7 += a3 - a4 - a1;
        }
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a1)
    {
        v9 += (a3 - a2) * a1;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 22
4 22
5 4
6 22
7 23
<<<sep_out_sample>>>
mov %esi,%r9d
sub %edi,%r9d
cmp %ecx,%r8d
jl 18 <func1+0x18>
mov %r8d,%r9d
sub %esi,%r9d
imul %ecx,%r9d
add %r8d,%r9d
add %edx,%edi
add %esi,%edi
add %r8d,%edi
add %ecx,%edi
add %r9d,%edi
sub %r8d,%ecx
imul %ecx,%esi
sub %edx,%esi
lea (%rdi,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a5 < a4)
    {
        v6 = a2 - a1;
    }
    else
    {
        v6 = (a4 * (a5 - a2)) + a5;
    }
    v7 = a2 * (a4 - a5) - a3;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 4
4 4
5 10
6 10
7 10
8 10
9 13
10 13
11 13
12 13
13 13
14 12
15 12
16 12
17 13
18 14
<<<sep_out_sample>>>
mov %esi,%r9d
sub %ecx,%r9d
cmp %edx,%esi
jge 17 <func1+0x17>
mov %esi,%eax
sub %r8d,%eax
imul %ecx,%eax
add %r8d,%eax
jmp 21 <func1+0x21>
lea (%rdi,%r8,1),%eax
imul %esi,%eax
imul %ecx,%eax
mov %edi,%r10d
imul %edi,%r10d
imul %ecx,%r10d
imul %esi,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a2 - a4;
    if (a2 < a3)
    {
        v7 = a5 + (a4 * (a2 - a5));
    }
    else
    {
        v7 = (a1 + a5) * a2 * a4;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += a5 - a4 - a4;
    }
    v10 = (a1 * a1) * a4 * a2;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 5
4 5
5 7
6 7
7 7
8 7
9 7
10 11
11 11
12 11
13 18
14 18
15 18
16 18
17 19
18 19
19 19
20 19
21 19
22 19
23 19
24 20
<<<sep_out_sample>>>
cmp $0x1,%r8d
jle 12 <func1+0x12>
mov %esi,%eax
sub %ecx,%eax
imul %r8d,%eax
add %edx,%eax
jmp 1c <func1+0x1c>
lea (%rsi,%r8,1),%eax
imul %edx,%eax
imul %ecx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%ecx
add %ecx,%eax
add %edx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a3 + a1 * a5;
    }
    if (v7 < a5)
    {
        v8 = ((a2 - a4) * a5) + a3;
    }
    else
    {
        v8 = ((a2 + a5) * a3) * a4;
    }
    v9 = (a3 + a1) + a1;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 11
8 15
9 15
10 15
11 17
12 18
13 18
14 18
15 18
16 17
17 18
18 19
<<<sep_out_sample>>>
push %rbx
test %ecx,%ecx
jle d <func1+0xd>
mov %r8d,%r11d
sub %ecx,%r11d
jmp 14 <func1+0x14>
mov %esi,%r11d
imul %edi,%r11d
mov %edi,%eax
sub %edx,%eax
mov %esi,%r10d
imul %r8d,%r10d
sub %r10d,%eax
mov %esi,%r9d
sub %edx,%r9d
lea (%r9,%rsi,2),%r10d
mov $0x0,%r9d
cmp %edx,%ecx
jle 48 <func1+0x48>
mov %edx,%r9d
imul %edx,%r9d
mov %ecx,%ebx
sub %r9d,%ebx
mov %ebx,%r9d
add %edi,%r9d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r11d,%ecx
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (v6 < a4)
    {
        v6 = a5 - a4;
    }
    else
    {
        v6 = a2 * a1;
    }
    if (a3 < a3)
    {
        v7 = a4 - a2;
    }
    else
    {
        v7 = a1 - a3 - a2 * a5;
    }
    v8 = (a2 - (a3 - a2)) + a2;
    if (a3 < a4)
    {
        v9 = a4 - a3 * a3 + a1;
    }
    else
    {
        v9 = a2 - ((a2 + a3) - a3);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 4
3 4
4 6
5 6
6 6
7 10
8 10
9 18
10 18
11 18
12 18
13 18
14 20
15 20
16 20
17 27
18 21
19 21
20 23
21 23
22 23
23 23
24 23
25 23
26 29
27 29
28 29
29 29
30 29
31 29
32 29
33 29
34 30
35 30
<<<sep_out_sample>>>
lea (%rdx,%rcx,1),%eax
cmp %edx,%r8d
jl 10 <func1+0x10>
mov %r8d,%eax
sub %ecx,%eax
imul %edx,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (v7 < a5)
        {
            v6 += a2 * a3 * a1;
        }
        else
        {
            v6 += a3 - a4;
        }
    }
    if (a5 < a3)
    {
        v8 = a4 - ((a1 - a3) - a1);
    }
    else
    {
        v8 = a3 * a5 - (a4 * a3);
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        v9 += a3 * a5;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 16
3 16
4 22
5 22
6 22
7 29
8 29
9 29
10 29
11 29
12 30
<<<sep_out_sample>>>
mov $0x0,%eax
test %esi,%esi
jg f <func1+0xf>
lea (%rsi,%rdx,2),%eax
sub %r8d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (v6 < a2)
    {
        v6 = a4 - a4;
    }
    else
    {
        v6 = a3 + (a3 + a2) - a5;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        if (a1 < a1)
        {
            v7 += a3 * a5 - a3;
        }
        else
        {
            v7 += (a5 - a3) * a5;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 6
2 4
3 4
4 10
5 10
6 24
7 24
8 24
9 24
10 24
11 25
<<<sep_out_sample>>>
mov %esi,%eax
imul %esi,%eax
lea (%rdx,%rdi,1),%r9d
mov %ecx,%r10d
sub %edx,%r10d
cmp %r8d,%ecx
cmovg %r9d,%r10d
mov %r8d,%r9d
imul %edi,%r9d
add %edi,%edx
add %esi,%edx
add %edx,%r8d
add %r8d,%eax
add %r10d,%eax
add %ecx,%edi
lea (%rdi,%rsi,2),%edx
add %edx,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a2 * a2 - a4;
    if (a5 < a4)
    {
        v7 = a3 + a1;
    }
    else
    {
        v7 = a4 - a3;
    }
    v8 = a1 + a4 + a2 + a2;
    v9 = (a5 * a1 - a2) + a2;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 7
4 7
5 7
6 7
7 7
8 14
9 14
10 15
11 15
12 15
13 15
14 15
15 13
16 13
17 15
18 15
19 16
<<<sep_out_sample>>>
mov %ecx,%eax
neg %eax
mov %r8d,%r9d
sub %edx,%r9d
cmp $0x2,%edx
cmovl %r9d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (a2 < a5)
        {
            v6 += a5 + a1 * a1;
        }
        else
        {
            v6 += (a5 * a2) - a4;
        }
    }
    if (v7 < a3)
    {
        v8 = a1 - a1 - a4;
    }
    else
    {
        v8 = a5 - (a3 + a5) + a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 18
5 18
6 18
7 24
8 24
9 24
10 24
11 24
12 25
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%eax
mov $0x1,%esi
sub %ecx,%esi
imul %esi,%r8d
add %r8d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (a1 < a4)
        {
            v6 += a3 + a2 * a1;
        }
        else
        {
            v6 += a3 - (a4 - a4);
        }
    }
    v8 = (a5 - a4 * a5) + a3;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 16
6 16
7 16
8 16
9 17
10 18
<<<sep_out_sample>>>
test %edx,%edx
jle c <func1+0xc>
mov %r8d,%r10d
sub %edx,%r10d
jmp 14 <func1+0x14>
lea (%rcx,%rcx,1),%r10d
imul %edx,%r10d
mov $0x0,%r9d
test %edx,%edx
jle 25 <func1+0x25>
lea (%rsi,%rdx,2),%eax
lea (%rax,%rcx,1),%r9d
mov %ecx,%eax
imul %esi,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r10d,%ecx
add %ecx,%r9d
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (v6 < a3)
    {
        v6 = a5 - a3;
    }
    else
    {
        v6 = a3 * a4 + a4 * a3;
    }
    if (v7 < a3)
    {
        v7 = (a4 + a3) + a2 + a3;
    }
    else
    {
        v7 = a2 - a2;
    }
    v8 = a3 - a3;
    v9 = a4 * a2;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 18
9 12
10 12
11 14
12 14
13 21
14 21
15 22
16 22
17 22
18 22
19 22
20 22
21 22
22 23
<<<sep_out_sample>>>
cmp %r8d,%edi
jge f <func1+0xf>
mov %ecx,%eax
imul %edx,%eax
lea (%rax,%rcx,2),%eax
jmp 15 <func1+0x15>
lea (%r8,%rdx,2),%eax
add %edi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += (a1 * a2) - a3;
    }
    if (a1 < a5)
    {
        v8 = a4 + a4 + a4 * a3;
    }
    else
    {
        v8 = a3 + a3 + a5 + a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 15
8 15
9 17
10 17
11 17
12 17
13 17
14 18
<<<sep_out_sample>>>
cmp %edx,%esi
jle 14 <func1+0x14>
mov %edx,%r9d
imul %edx,%r9d
sub %r8d,%r9d
imul %ecx,%r9d
jmp 1f <func1+0x1f>
mov %ecx,%eax
imul %esi,%eax
mov %r8d,%r9d
sub %eax,%r9d
lea (%rcx,%rdx,1),%eax
mov %ecx,%r10d
imul %esi,%r10d
sub %r10d,%eax
add %r9d,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (v6 < a2)
        {
            v6 += a2 - a2 + a2;
        }
        else
        {
            v6 += a3 * a4;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        if (a2 < a5)
        {
            v8 += a4 * a1 - a1;
        }
        else
        {
            v8 += (a5 * a2) * a1;
        }
    }
    if (a3 < a2)
    {
        v10 = (a3 * a3 - a5) * a4;
    }
    else
    {
        v10 = a5 - a4 * a2;
    }
    v11 = (a4 + a3) - a4 * a2;
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 28
2 28
3 30
4 30
5 30
6 30
7 30
8 34
9 34
10 34
11 34
12 36
13 36
14 36
15 36
16 37
17 37
18 37
19 37
20 37
21 37
22 38
<<<sep_out_sample>>>
test %edi,%edi
jle c <func1+0xc>
lea (%rdi,%rcx,2),%eax
imul %edi,%eax
jmp 11 <func1+0x11>
mov %edi,%eax
imul %edx,%eax
add %edx,%edi
add %edi,%esi
add %r8d,%esi
add %ecx,%esi
lea 0x1(%rax,%rsi,1),%eax
imul %r8d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (v6 < a1)
    {
        v6 = a1 * ((a1 + a4) + a4);
    }
    else
    {
        v6 = a1 * a3;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        if (v7 < a1)
        {
            v7 += a3 * a3 + a5;
        }
        else
        {
            v7 += a5 + (a5 - a4);
        }
    }
    v9 = a4 * a5;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 25
9 25
10 25
11 25
12 25
13 24
14 25
15 26
<<<sep_out_sample>>>
test %edx,%edx
jle 15 <func1+0x15>
mov %edi,%r11d
imul %edi,%r11d
mov %edx,%eax
imul %ecx,%eax
add %eax,%r11d
jmp 23 <func1+0x23>
mov %edi,%r11d
imul %ecx,%r11d
imul %ecx,%r11d
sub %edx,%r11d
cmp %edi,%edx
jle 2f <func1+0x2f>
mov %edx,%r10d
sub %esi,%r10d
jmp 3c <func1+0x3c>
mov %ecx,%r10d
imul %esi,%r10d
add %edi,%r10d
add %ecx,%r10d
cmp %esi,%edx
jge 49 <func1+0x49>
mov %edx,%r9d
imul %r8d,%r9d
jmp 50 <func1+0x50>
mov %r8d,%r9d
imul %edi,%r9d
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (v6 < a3)
    {
        v6 = a1 * a1 + a3 * a4;
    }
    else
    {
        v6 = (a1 * a4 * a4) - a3;
    }
    if (a1 < a3)
    {
        v7 = a3 - a2;
    }
    else
    {
        v7 = a1 + a4 * a2 + a4;
    }
    if (a3 < a2)
    {
        v8 = a3 * a5;
    }
    else
    {
        v8 = a5 * a1;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a1)
    {
        v9 += (a5 - a2) * a5;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 6
9 10
10 10
11 10
12 10
13 12
14 12
15 14
16 14
17 14
18 18
19 18
20 18
21 18
22 20
23 20
24 22
25 22
26 22
27 26
28 26
29 33
30 33
31 33
32 33
33 33
34 33
35 33
36 34
<<<sep_out_sample>>>
mov %edi,%eax
sub %esi,%eax
cmp %r8d,%ecx
jle 13 <func1+0x13>
mov %ecx,%eax
imul %edx,%eax
add %esi,%eax
sub %r8d,%eax
lea 0x2(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a3 - a4 + a5;
    }
    if (a5 < a4)
    {
        v8 = a2 + (a4 * a3) - a5;
    }
    else
    {
        v8 = (a1 + (a1 - a2)) - a1;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        if (v6 < a2)
        {
            v9 += a3 * a5;
        }
        else
        {
            v9 += (a1 - a3) + a2;
        }
    }
    v11 = 0;
    for (v12 = 0; v12++; v12<a1)
    {
        v11 += (a1 - a2) - a5;
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 15
2 15
3 9
4 9
5 11
6 11
7 11
8 11
9 34
10 34
11 34
12 34
13 34
14 35
<<<sep_out_sample>>>
lea (%rcx,%rdi,2),%eax
sub %esi,%eax
cmp %r8d,%ecx
jle 13 <func1+0x13>
mov %edi,%r9d
imul %esi,%r9d
jmp 22 <func1+0x22>
mov %ecx,%r9d
imul %ecx,%r9d
add $0x1,%r9d
imul %ecx,%r9d
lea 0x1(%rdi,%rdx,1),%edx
add %esi,%edx
add %edx,%r8d
add %ecx,%r8d
add %r8d,%eax
add %r9d,%eax
imul %esi,%esi
add %esi,%edi
add %edi,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = ((a4 + a1) + a1) - a2;
    if (a5 < a4)
    {
        v7 = a1 * a2;
    }
    else
    {
        v7 = a4 + (a4 * a4 * a4);
    }
    v8 = (a1 + (a2 * a2)) + a4;
    v9 = 0;
    for (v10 = 0; v10++; v10<a1)
    {
        v9 += a5 - (a3 - a3);
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 5
4 5
5 7
6 7
7 7
8 11
9 11
10 11
11 11
12 19
13 19
14 19
15 19
16 19
17 19
18 13
19 13
20 13
21 19
22 20
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%r9d
add %esi,%r9d
add %r8d,%r9d
add %ecx,%r9d
mov %edx,%eax
sub %r8d,%eax
imul %edi,%r8d
sub %r8d,%eax
add %r9d,%eax
mov %ecx,%edi
sub %edx,%edi
add %edi,%eax
add %esi,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = (a3 - a5) - a5 * a1;
    v7 = a4 - a3;
    if (a2 < a2)
    {
        v8 = a3 * a2;
    }
    else
    {
        v8 = a4 + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 14
2 14
3 14
4 14
5 4
6 4
7 4
8 4
9 14
10 5
11 5
12 14
13 12
14 14
15 15
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %edx,%r8d
lea 0x1(%rcx,%r8,1),%eax
sub %edi,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a1 + a4 + a1;
    }
    v8 = a2 - a1;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 9
6 10
7 11
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
mov %esi,%edx
sub %r8d,%edx
add %edx,%eax
sub %esi,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = a2 - a5;
    v7 = a4 - a2;
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += a2 + a1;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a1)
    {
        v10 += a3 + a4 - a2;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 16
4 16
5 4
6 4
7 16
8 5
9 16
10 17
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %edx,%r8d
lea (%r8,%rcx,1),%edx
imul %esi,%edi
lea (%rdi,%rcx,2),%eax
lea 0x1(%rdx,%rax,1),%eax
add %ecx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a1 * a2 + a4 + a4;
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += a5 - a2 * a2;
    }
    v9 = a2 - (a3 - a3 - a4);
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 11
5 4
6 4
7 11
8 10
9 11
10 12
<<<sep_out_sample>>>
cmp %ecx,%edi
jge b <func1+0xb>
mov %ecx,%eax
imul %ecx,%eax
jmp 13 <func1+0x13>
lea -0x1(%rdi),%eax
imul %esi,%eax
sub %edi,%eax
lea 0x2(%rdi,%rdx,1),%edx
add %edx,%esi
add %r8d,%esi
add %esi,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    if (a1 < a4)
    {
        v6 = a4 * a4;
    }
    else
    {
        v6 = a1 * a2 - a2 - a1;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        if (v7 < a1)
        {
            v7 += a3 + a5;
        }
        else
        {
            v7 += a1 + a1 + a5;
        }
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        if (v9 < a4)
        {
            v9 += a1 - a1 - a5;
        }
        else
        {
            v9 += a1 + a1 - a3;
        }
    }
    v11 = 0;
    for (v12 = 0; v12++; v12<a4)
    {
        v11 += a4 + (a5 * a1);
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 41
10 41
11 41
12 41
13 41
14 42
<<<sep_out_sample>>>
lea (%rcx,%rdx,1),%eax
mov %esi,%r9d
imul %r8d,%r9d
mov %eax,%r11d
sub %r9d,%r11d
cmp %r8d,%edx
jge 21 <func1+0x21>
mov %edi,%r10d
sub %ecx,%r10d
lea (%rsi,%rdx,1),%r9d
jmp 37 <func1+0x37>
add $0x1,%eax
imul %esi,%eax
mov %eax,%r10d
mov %r8d,%r9d
imul %edx,%r9d
add %esi,%r9d
add %edx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = (a4 + a3) - a2 * a5;
    if (a3 < a5)
    {
        v7 = a1 - a4;
    }
    else
    {
        v7 = (a2 * (a4 + a3)) + a2;
    }
    if (a3 < a5)
    {
        v8 = a2 + a3;
    }
    else
    {
        v8 = a5 * a3 + a2 + a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 4
6 5
7 5
8 7
9 7
10 15
11 15
12 11
13 11
14 11
15 19
16 19
17 19
18 19
19 21
20 21
21 21
22 21
23 21
24 21
25 21
26 22
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
sub %r8d,%ecx
add %edx,%ecx
add %ecx,%eax
sub %edx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a1 < a1)
    {
        v6 = a5 - (a2 - a5);
    }
    else
    {
        v6 = a4 - a5 + a3;
    }
    v7 = ((a1 + a2) - a3) - a1;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 13
2 13
3 13
4 13
5 10
6 10
7 13
8 12
9 13
10 14
<<<sep_out_sample>>>
test %ecx,%ecx
jle 10 <func1+0x10>
mov %edx,%eax
imul %esi,%eax
imul %esi,%eax
add %edx,%eax
jmp 1b <func1+0x1b>
mov %edx,%eax
sub %r8d,%eax
imul %edx,%eax
imul %ecx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (v6 < a4)
    {
        v6 = a3 + a3 * a2 * a2;
    }
    else
    {
        v6 = (a3 - a5) * a3 * a4;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += (a2 * a5) + a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 17
13 17
14 17
15 17
16 17
17 18
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
sub %edi,%r8d
lea 0x1(%rax,%r8,1),%eax
imul %esi,%edi
imul %edi,%esi
sub %esi,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    if (a2 < a2)
    {
        v6 = a1 * a4 + a1 + a4;
    }
    else
    {
        v6 = a5 - (a1 - a2) - a2;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += a4 - a2 - a1;
    }
    v9 = a4 - a2 * (a1 * a2);
    v10 = 0;
    for (v11 = 0; v11++; v11<a2)
    {
        v10 += (a4 * a4) - a4;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 23
2 23
3 23
4 23
5 10
6 23
7 17
8 17
9 17
10 23
11 24
<<<sep_out_sample>>>
mov %esi,%r9d
sub %ecx,%r9d
cmp %edx,%esi
jge 17 <func1+0x17>
mov %r8d,%r9d
imul %ecx,%r9d
sub %edi,%r9d
add %edx,%r9d
lea (%rsi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
lea (%rax,%rdx,2),%eax
lea 0x1(%r9,%rax,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a2 < a3)
    {
        v6 = (a5 * a4 - a1) + a3;
    }
    else
    {
        v6 = a2 - a4;
    }
    if (a1 < a1)
    {
        v7 = ((a5 + a3) - a4) + a1;
    }
    else
    {
        v7 = (a2 + a3) + a3 + a3;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += a2 - a2 - a5;
    }
    v10 = a2 + ((a1 - a1) - a1);
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 4
4 4
5 6
6 6
7 6
8 6
9 18
10 26
11 26
12 26
13 26
14 18
15 26
16 27
<<<sep_out_sample>>>
lea (%rsi,%rdx,2),%r9d
cmp %r8d,%esi
jg 16 <func1+0x16>
mov %r8d,%r9d
sub %ecx,%r9d
add %edx,%r9d
imul %edx,%r9d
lea (%rcx,%rcx,1),%eax
cmp $0x1,%esi
jle 27 <func1+0x27>
lea (%r8,%rcx,1),%eax
add %edi,%eax
imul %esi,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %r9d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += (a2 * a3) - a1;
    }
    if (a5 < a2)
    {
        v8 = a3 + a3 + a2;
    }
    else
    {
        v8 = (a5 - a4 + a3) * a3;
    }
    if (v7 < a2)
    {
        v9 = (a1 + (a5 + a4)) * a2;
    }
    else
    {
        v9 = a4 - (a4 - a4) + a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 9
3 9
4 15
5 15
6 15
7 15
8 23
9 17
10 17
11 19
12 19
13 19
14 25
15 25
16 25
17 25
18 25
19 25
20 26
<<<sep_out_sample>>>
test %edi,%edi
jle 12 <func1+0x12>
lea (%rsi,%rdi,1),%r11d
imul %ecx,%r11d
imul %esi,%r11d
jmp 1e <func1+0x1e>
mov %edx,%eax
imul %r8d,%eax
mov %ecx,%r11d
sub %eax,%r11d
mov %edx,%r9d
sub %edi,%r9d
test %edi,%edi
jle 34 <func1+0x34>
mov %esi,%r9d
sub %ecx,%r9d
sub %r8d,%r9d
add %edx,%r9d
mov %edx,%r10d
sub %r8d,%r10d
cmp %r8d,%ecx
jl 4f <func1+0x4f>
mov %edi,%r10d
imul %edx,%r10d
mov %esi,%eax
imul %r8d,%eax
add %eax,%r10d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r11d,%ecx
add %ecx,%r9d
lea (%r9,%r10,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (v6 < a1)
    {
        v6 = a4 * (a2 + a1) * a2;
    }
    else
    {
        v6 = a4 - (a3 * a5);
    }
    if (v7 < a1)
    {
        v7 = a2 - a4 - a5 + a3;
    }
    else
    {
        v7 = a3 - a1;
    }
    if (a4 < a5)
    {
        v8 = a3 - a5;
    }
    else
    {
        v8 = (a1 * a3) + a2 * a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 10
11 18
12 18
13 12
14 12
15 14
16 14
17 14
18 14
19 22
20 22
21 20
22 20
23 26
24 26
25 26
26 26
27 26
28 28
29 28
30 28
31 28
32 28
33 28
34 28
35 29
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
mov %esi,%r9d
sub %edi,%r9d
sub %ecx,%r9d
imul %r9d,%r8d
add %r8d,%eax
imul %esi,%edx
add %ecx,%edi
imul %edi,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = (a2 - a1 - a4) * a5;
    if (a5 < a5)
    {
        v7 = a1 * a2;
    }
    else
    {
        v7 = (a3 * a2) * (a1 + a4);
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 13
2 13
3 13
4 13
5 4
6 4
7 4
8 4
9 13
10 11
11 11
12 11
13 13
14 14
<<<sep_out_sample>>>
lea (%r8,%r8,1),%r11d
mov %edi,%r9d
imul %edi,%r9d
sub %r9d,%r11d
cmp %edx,%ecx
jge 18 <func1+0x18>
lea (%r8,%r8,1),%r10d
jmp 1f <func1+0x1f>
lea (%rdx,%rcx,2),%r10d
sub %r8d,%r10d
lea (%r8,%rcx,1),%r9d
cmp %ecx,%edi
jg 35 <func1+0x35>
mov %edx,%r9d
imul %esi,%r9d
sub %r8d,%r9d
imul %edx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a5 + a5 - a1 * a1;
    if (a4 < a3)
    {
        v7 = a5 - a4 + a5 + a4;
    }
    else
    {
        v7 = (a4 + a4) + a3 - a5;
    }
    if (a4 < a1)
    {
        v8 = a5 + a4;
    }
    else
    {
        v8 = a3 * ((a3 * a2) - a5);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 5
6 5
7 7
8 7
9 11
10 11
11 15
12 13
13 13
14 19
15 19
16 19
17 19
18 21
19 21
20 21
21 21
22 21
23 21
24 21
25 22
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%r9d
add %esi,%r9d
add %r8d,%r9d
add %ecx,%r9d
imul %edi,%edi
lea (%rdi,%rcx,2),%eax
lea (%r9,%rax,1),%ecx
mov %r8d,%eax
sub %edx,%eax
imul %esi,%r8d
sub %r8d,%eax
lea 0x1(%rcx,%rax,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a1 < a1)
    {
        v6 = a3 * a2;
    }
    else
    {
        v6 = (a4 + a4) + a1 * a1;
    }
    v7 = (a5 - a3) - a2 * a5;
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        if (a3 < a1)
        {
            v8 += a1 - a4 * a2;
        }
        else
        {
            v8 += a1 - a4 - a1;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 25
2 25
3 25
4 25
5 10
6 10
7 25
8 12
9 12
10 12
11 12
12 25
13 26
<<<sep_out_sample>>>
push %rbx
test %r8d,%r8d
jle 10 <func1+0x10>
lea (%rdx,%rsi,1),%r9d
imul %r8d,%r9d
jmp 1d <func1+0x1d>
mov %esi,%r9d
imul %r8d,%r9d
sub %edi,%r9d
add %edx,%r9d
mov %r8d,%ebx
imul %edx,%ebx
cmp %edi,%r9d
jge 31 <func1+0x31>
lea (%rcx,%rdx,2),%r11d
add %r8d,%r11d
jmp 3c <func1+0x3c>
mov %edi,%r11d
imul %edi,%r11d
imul %edx,%r11d
mov %r8d,%r10d
sub %esi,%r10d
cmp %esi,%edx
jg 54 <func1+0x54>
mov %edx,%r10d
sub %edi,%r10d
mov %esi,%eax
imul %edi,%eax
add %eax,%r10d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
add %ebx,%eax
add %r11d,%eax
add %r10d,%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (v6 < a5)
    {
        v6 = (a3 * a5) + a2 * a5;
    }
    else
    {
        v6 = a3 + ((a2 * a5) - a1);
    }
    v7 = a5 * a3;
    if (v6 < a1)
    {
        v8 = ((a4 + a3) + a3) + a5;
    }
    else
    {
        v8 = a3 * (a1 * a1);
    }
    if (a2 < a3)
    {
        v9 = a5 - a2;
    }
    else
    {
        v9 = a3 - a1 + a2 * a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 4
3 4
4 6
5 6
6 6
7 10
8 10
9 10
10 10
11 12
12 12
13 13
14 13
15 15
16 15
17 15
18 19
19 19
20 19
21 23
22 23
23 21
24 21
25 27
26 27
27 27
28 27
29 27
30 29
31 29
32 29
33 29
34 29
35 29
36 29
37 29
38 30
39 30
<<<sep_out_sample>>>
mov %edx,%r10d
imul %ecx,%r10d
mov %edx,%eax
neg %eax
lea (%rsi,%r8,1),%r9d
cmp %edx,%esi
cmovg %eax,%r9d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a4 - a2 + a3;
    }
    if (a5 < a5)
    {
        v8 = (a4 - a3) + a2 + a3;
    }
    else
    {
        v8 = a3 * a4;
    }
    if (a3 < a2)
    {
        v9 = (a5 - a5) - a3;
    }
    else
    {
        v9 = a2 + a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 15
2 15
3 19
4 19
5 19
6 19
7 19
8 25
9 25
10 25
11 25
12 25
13 25
14 26
<<<sep_out_sample>>>
test %edx,%edx
jle 13 <func1+0x13>
mov %esi,%r9d
sub %edx,%r9d
imul %r8d,%r9d
sub %esi,%r9d
jmp 1a <func1+0x1a>
lea (%rcx,%rdx,2),%eax
lea (%rax,%r8,1),%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
imul %r8d,%edx
mov %edi,%r10d
sub %edx,%r10d
add %r10d,%eax
add %edi,%edi
imul %edi,%ecx
add %ecx,%r8d
add %r8d,%eax
sub %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (v6 < a3)
    {
        v6 = a5 * (a2 - a3) - a2;
    }
    else
    {
        v6 = a5 + a3 + a4 + a3;
    }
    v7 = a1 - (a5 * a3);
    v8 = a4 * (a1 + a1) + a5;
    if (a2 < a2)
    {
        v9 = a1 - a1;
    }
    else
    {
        v9 = a4 - (a2 + a4);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 22
11 22
12 22
13 22
14 22
15 12
16 12
17 12
18 22
19 13
20 13
21 13
22 22
23 22
24 23
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
lea 0x1(%rcx,%rax,1),%edx
mov %edi,%eax
sub %r8d,%eax
add %edx,%eax
add %ecx,%esi
imul %esi,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (a1 < a1)
        {
            v6 += a4 * (a2 * a2);
        }
        else
        {
            v6 += a4 - (a1 - a3);
        }
    }
    v8 = a1 + a4 - a5 - a4;
    if (a4 < a4)
    {
        v9 = a2 + a1;
    }
    else
    {
        v9 = a1 * a2 + (a4 * a1);
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a1)
    {
        v10 += a3 + a5;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 30
2 30
3 30
4 30
5 16
6 16
7 30
8 23
9 23
10 30
11 31
<<<sep_out_sample>>>
mov %r8d,%eax
imul %r8d,%eax
cmp $0x1,%ecx
jle 1a <func1+0x1a>
mov %r8d,%r9d
sub %esi,%r9d
sub %edi,%r9d
sub %ecx,%r9d
jmp 1d <func1+0x1d>
mov %r8d,%r9d
lea 0x1(%r9,%rdi,1),%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a3 - (a1 - a3);
    }
    v8 = a5 * a5;
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        v9 += (a1 + a5) - a1;
    }
    if (v7 < a4)
    {
        v11 = a5 - a2 - a1 - a4;
    }
    else
    {
        v11 = (a5 + a3) - a3;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 15
4 15
5 17
6 17
7 17
8 17
9 17
10 21
11 23
12 23
13 23
14 23
15 23
16 23
17 24
<<<sep_out_sample>>>
mov %esi,%eax
imul %edi,%eax
imul %esi,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a5 - a3;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        if (v6 < a1)
        {
            v8 += a4 - a1;
        }
        else
        {
            v8 += a1 * a1;
        }
    }
    v10 = a2 * a1 * a2;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 22
5 22
6 22
7 22
8 22
9 23
<<<sep_out_sample>>>
mov %r8d,%eax
sub %ecx,%eax
cmp %esi,%r8d
jge 13 <func1+0x13>
lea (%rsi,%rdi,1),%eax
add %edx,%eax
imul %r8d,%eax
lea (%rdi,%rdx,1),%r9d
add %r9d,%esi
add %r8d,%esi
add %esi,%ecx
add %ecx,%eax
not %edx
imul %edx,%edi
add %edi,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a5 < a2)
    {
        v6 = a5 * ((a2 + a1) + a3);
    }
    else
    {
        v6 = (a3 - (a4 + a3)) + a5;
    }
    v7 = a5 - (a1 + a3 * a1);
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 10
2 10
3 4
4 4
5 6
6 6
7 6
8 13
9 13
10 13
11 13
12 13
13 12
14 12
15 12
16 13
17 14
<<<sep_out_sample>>>
lea (%r8,%rcx,1),%r9d
cmp %r8d,%edx
jg 17 <func1+0x17>
mov %r8d,%eax
imul %edi,%eax
add %ecx,%eax
mov %edi,%r9d
sub %eax,%r9d
test %edx,%edx
jle 22 <func1+0x22>
mov %r8d,%eax
sub %esi,%eax
jmp 32 <func1+0x32>
mov %ecx,%eax
imul %esi,%eax
mov %edx,%r10d
sub %eax,%r10d
mov %r10d,%eax
sub %ecx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %r9d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a3 * a4 + a4;
    }
    if (a5 < a3)
    {
        v8 = a5 + a4;
    }
    else
    {
        v8 = a1 - (a4 + (a5 * a1));
    }
    if (v9 < a3)
    {
        v9 = a5 - a2;
    }
    else
    {
        v9 = (a3 - (a4 * a2)) - a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 9
3 9
4 15
5 15
6 15
7 15
8 15
9 17
10 17
11 19
12 19
13 19
14 23
15 23
16 23
17 23
18 23
19 23
20 25
21 25
22 25
23 25
24 25
25 25
26 26
<<<sep_out_sample>>>
lea (%rcx,%rcx,1),%eax
test %edi,%edi
jle 10 <func1+0x10>
mov %esi,%eax
imul %edx,%eax
add %edi,%eax
sub %edx,%eax
lea 0x1(%rdi,%rdx,1),%edi
add %esi,%edi
add %edi,%r8d
add %ecx,%r8d
lea 0x1(%rax,%r8,1),%edi
imul %esi,%edx
sub %edx,%ecx
sub %esi,%ecx
lea (%rdi,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    if (v6 < a1)
    {
        v6 = (a2 * a3 + a1) - a3;
    }
    else
    {
        v6 = (a4 - a2 + a2) + a4;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += (a1 * a3) + a3;
    }
    v9 = (a4 - a2 * a3) - a2;
    v10 = 0;
    for (v11 = 0; v11++; v11<a2)
    {
        v10 += a1 - (a3 - a2);
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 6
7 6
8 23
9 23
10 23
11 23
12 23
13 17
14 17
15 17
16 23
17 24
<<<sep_out_sample>>>
test %ecx,%ecx
jle 13 <func1+0x13>
mov %ecx,%r9d
imul %esi,%r9d
add %r8d,%r9d
add %edi,%r9d
jmp 1f <func1+0x1f>
lea (%r8,%rdx,1),%r9d
imul %esi,%r9d
imul %r8d,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
sub %ecx,%edx
sub %esi,%edx
imul %edx,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (v6 < a4)
    {
        v6 = a4 * a2 + a5 + a1;
    }
    else
    {
        v6 = (a5 + a3) * a2 * a5;
    }
    v7 = (a3 - a4 - a2) * a4;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 13
12 13
13 13
14 13
15 13
16 12
17 12
18 12
19 13
20 14
<<<sep_out_sample>>>
mov %ecx,%r9d
sub %edx,%r9d
mov %r9d,%r10d
sub %r8d,%r10d
imul %ecx,%r10d
lea (%rcx,%rdx,1),%eax
mov %esi,%r11d
sub %edx,%r11d
cmp %esi,%ecx
cmovle %r11d,%eax
lea (%r9,%rcx,2),%r9d
test %edx,%edx
jg 2e <func1+0x2e>
mov %esi,%r9d
imul %esi,%r9d
add %r9d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r10,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = (a4 - a3 - a5) * a4;
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += a5 + a1 - a2;
    }
    if (a2 < a4)
    {
        v9 = a4 + a3;
    }
    else
    {
        v9 = a2 - a3 + a2 - a2;
    }
    if (v7 < a3)
    {
        v10 = a4 - (a3 - a4) + a4;
    }
    else
    {
        v10 = a2 * a2;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 4
6 12
7 12
8 12
9 12
10 12
11 20
12 18
13 18
14 24
15 24
16 26
17 26
18 26
19 26
20 26
21 26
22 26
23 27
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%r9d
lea (%r9,%rdi,1),%r10d
neg %edi
test %edx,%edx
jle 16 <func1+0x16>
imul %esi,%edx
mov %r9d,%edi
sub %edx,%edi
lea (%r9,%rsi,1),%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a1 + a3 + a1;
    if (v7 < a3)
    {
        v7 = a1 + a3 - a2 * a3;
    }
    else
    {
        v7 = a5 - a5 - a1;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 11
4 5
5 5
6 7
7 7
8 7
9 13
10 13
11 13
12 13
13 13
14 14
<<<sep_out_sample>>>
cmp %edx,%edi
jge 13 <func1+0x13>
mov %ecx,%r9d
sub %esi,%r9d
sub %edx,%r9d
imul %ecx,%r9d
jmp 20 <func1+0x20>
mov %ecx,%r9d
imul %esi,%r9d
add %r8d,%r9d
add %esi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
add %ecx,%r8d
add %r9d,%r8d
lea (%rcx,%rdx,1),%eax
imul %ecx,%edx
sub %edx,%eax
add %r8d,%eax
sub %edi,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a1 < a3)
    {
        v6 = a4 * ((a4 - a2) - a3);
    }
    else
    {
        v6 = a5 + (a4 * a2) + a2;
    }
    v7 = a4 + a3 - a3 * a4;
    v8 = a2 - a1;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 14
13 14
14 14
15 14
16 14
17 12
18 12
19 12
20 14
21 13
22 14
23 15
<<<sep_out_sample>>>
cmp %edx,%edi
jle 10 <func1+0x10>
lea (%rcx,%r8,1),%eax
imul %edx,%eax
add %r8d,%eax
jmp 1a <func1+0x1a>
mov %esi,%eax
sub %edx,%eax
imul %edx,%eax
imul %ecx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += (a5 * a5) - a1;
    }
    if (a3 < a1)
    {
        v8 = ((a4 + a5) * a3) + a5;
    }
    else
    {
        v8 = a3 * (a2 - a3) * a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 15
8 15
9 15
10 15
11 17
12 17
13 17
14 17
15 17
16 18
<<<sep_out_sample>>>
lea (%rdx,%rsi,1),%r9d
cmp %ecx,%edi
jge 10 <func1+0x10>
mov %esi,%eax
sub %ecx,%eax
lea (%rax,%rdx,2),%r9d
mov %edx,%eax
cmp %r8d,%edi
jl 20 <func1+0x20>
lea (%rdx,%rdx,1),%eax
imul %edi,%eax
imul %ecx,%eax
add %edx,%edi
add %edi,%esi
add %r8d,%esi
add %ecx,%esi
add %esi,%r9d
add %r9d,%eax
add %ecx,%edx
imul %edx,%r8d
imul %r8d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a1 < a4)
    {
        v6 = a2 - a4 + a3 + a3;
    }
    else
    {
        v6 = a3 + a2;
    }
    if (a1 < a5)
    {
        v7 = (a5 - a5) + a3;
    }
    else
    {
        v7 = a4 * ((a3 + a3) * a1);
    }
    v8 = a5 * (a4 + a3) * a4;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 6
7 14
8 12
9 12
10 18
11 18
12 18
13 21
14 21
15 21
16 21
17 21
18 21
19 20
20 20
21 20
22 21
23 22
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
lea 0x1(%r8,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a5 - a2;
    }
    v8 = a4 - a4 - a4;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 11
<<<sep_out_sample>>>
mov %ecx,%eax
sub %edx,%eax
cmp %r8d,%ecx
jge 1c <func1+0x1c>
mov %edi,%eax
imul %r8d,%eax
imul %r8d,%eax
mov %esi,%r9d
sub %eax,%r9d
mov %r9d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a4 < a5)
    {
        v6 = a2 - (a1 * a5) * a5;
    }
    else
    {
        v6 = a4 - a3;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += (a1 - a3) + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 4
4 4
5 6
6 6
7 6
8 6
9 6
10 6
11 17
12 17
13 17
14 17
15 17
16 18
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
mov %r8d,%edx
sub %esi,%edx
add %edx,%eax
add %edi,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a5 - a2;
    v7 = a5 + a1;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 4
7 6
8 5
9 6
10 7
<<<sep_out_sample>>>
cmp %edi,%esi
jge 14 <func1+0x14>
lea (%r8,%rsi,1),%r9d
mov %ecx,%r10d
imul %ecx,%r10d
sub %r10d,%r9d
jmp 1b <func1+0x1b>
mov %edx,%r9d
imul %esi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
mov %edx,%r8d
imul %edx,%r8d
mov %esi,%edi
sub %edx,%edi
imul %r8d,%edi
add %edi,%eax
mov %ecx,%edi
imul %ecx,%edi
imul %ecx,%edi
add %edx,%edi
add %edi,%eax
add %esi,%ecx
add %ecx,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a2 < a1)
    {
        v6 = (a5 + a2) - a4 * a4;
    }
    else
    {
        v6 = a4 - (a4 - (a3 * a2));
    }
    v7 = (a3 * a3) * (a2 - a3);
    v8 = a4 * a4 * a4 + a3;
    if (a3 < a3)
    {
        v9 = a3 - a3;
    }
    else
    {
        v9 = a4 + a2 + a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 22
11 22
12 22
13 22
14 22
15 12
16 12
17 12
18 12
19 12
20 22
21 13
22 13
23 13
24 13
25 22
26 20
27 20
28 22
29 23
<<<sep_out_sample>>>
lea (%rdi,%rsi,1),%eax
cmp %ecx,%r8d
jl 12 <func1+0x12>
mov %edi,%eax
imul %esi,%eax
add %edx,%eax
sub %r8d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a5 < a4)
    {
        v6 = a1 + a2;
    }
    else
    {
        v6 = (a1 * a2 + a3) - a5;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += (a5 + a4) - a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 6
2 4
3 4
4 10
5 10
6 10
7 10
8 17
9 17
10 17
11 17
12 17
13 18
<<<sep_out_sample>>>
lea (%rdx,%rsi,1),%eax
sub %r8d,%eax
add %ecx,%eax
add %edi,%eax
add %edx,%eax
add %esi,%eax
add %r8d,%eax
add %eax,%ecx
add %edi,%r8d
lea 0x1(%rcx,%r8,1),%eax
sub %edx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a5 + a1;
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += a4 * a2 * a5;
    }
    v9 = a2 - a3;
    v10 = a4 - (a5 - (a3 + a2));
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 12
5 12
6 12
7 12
8 12
9 4
10 12
11 10
12 12
13 13
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (v7 < a5)
        {
            v6 += a3 * a5;
        }
        else
        {
            v6 += a5 * a4 * a3;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += (a3 - a4) - a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 21
5 22
<<<sep_out_sample>>>
test %edi,%edi
jle c <func1+0xc>
mov %edx,%r10d
sub %edi,%r10d
jmp 18 <func1+0x18>
lea (%rsi,%rdx,1),%r10d
imul %r8d,%r10d
imul %esi,%r10d
mov %ecx,%r9d
imul %edi,%r9d
imul %esi,%r9d
imul %edx,%r9d
cmp %edx,%edi
jle 33 <func1+0x33>
lea (%r8,%rdi,2),%eax
sub %edx,%eax
jmp 39 <func1+0x39>
lea (%rdi,%rcx,2),%eax
imul %edx,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (v7 < a2)
        {
            v6 += (a5 - a4) + a4;
        }
        else
        {
            v6 += a4 * a5 + a5;
        }
    }
    if (v6 < a1)
    {
        v8 = a3 - a1;
    }
    else
    {
        v8 = (a2 + a3) * a5 * a2;
    }
    v9 = a2 * (a4 * a1) * a3;
    if (a3 < a1)
    {
        v10 = a1 + a5 + a1 - a3;
    }
    else
    {
        v10 = (a1 + a4 + a4) * a3;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 22
7 22
8 22
9 24
10 24
11 24
12 24
13 25
14 25
15 27
16 27
17 27
18 31
19 31
20 33
21 33
22 33
23 33
24 33
25 33
26 33
27 34
<<<sep_out_sample>>>
mov %esi,%r9d
imul %edi,%r9d
add %ecx,%r9d
sub %esi,%r9d
cmp %ecx,%esi
jge 22 <func1+0x22>
lea (%rdx,%r8,1),%eax
mov %edi,%r10d
sub %eax,%r10d
mov %r10d,%eax
sub %esi,%eax
jmp 2c <func1+0x2c>
mov %ecx,%eax
imul %esi,%eax
sub %edi,%eax
add %r8d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a4 < a4)
    {
        v6 = a4 * a3;
    }
    else
    {
        v6 = (a2 * a1 + a4) - a2;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        if (v6 < a4)
        {
            v7 += a2 - a2;
        }
        else
        {
            v7 += a5 - a1;
        }
    }
    if (a2 < a4)
    {
        v9 = a1 - (a3 + a5) - a2;
    }
    else
    {
        v9 = (a4 * a2 - a1) + a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 24
6 24
7 26
8 26
9 26
10 26
11 26
12 26
13 30
14 30
15 30
16 30
17 32
18 32
19 32
20 32
21 32
22 32
23 33
<<<sep_out_sample>>>
mov %esi,%r9d
imul %edi,%r9d
lea (%rsi,%rdx,1),%eax
sub %eax,%r9d
lea (%rcx,%rsi,1),%r11d
add %r8d,%r11d
lea (%r8,%rsi,2),%r10d
cmp %r9d,%edi
jg 2c <func1+0x2c>
mov %edx,%r10d
imul %esi,%r10d
imul %edi,%r10d
imul %edi,%r10d
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
add %r11d,%eax
add %r10d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = (a2 * a1) - (a2 + a3);
    v7 = a4 + a2 + a5;
    if (v6 < a1)
    {
        v8 = a5 + a2 + a2;
    }
    else
    {
        v8 = a3 * a2 * a1 * a1;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        v9 += (a4 + a3) * a3;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 5
6 5
7 8
8 6
9 6
10 12
11 12
12 12
13 12
14 19
15 19
16 19
17 19
18 19
19 19
20 19
21 20
<<<sep_out_sample>>>
mov %edi,%r9d
imul %ecx,%r9d
lea 0x1(%r9),%r10d
imul %edx,%r10d
add %edi,%edx
test %ecx,%ecx
jle 22 <func1+0x22>
mov $0x1,%eax
sub %r9d,%eax
imul %edi,%eax
jmp 2a <func1+0x2a>
mov %edi,%eax
imul %esi,%eax
imul %ecx,%eax
add %edx,%esi
add %r8d,%esi
add %esi,%ecx
add %r10d,%ecx
add %ecx,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a3 + a1 * a4 * a3;
    v7 = a3 + a1;
    if (v8 < a4)
    {
        v8 = a1 - (a1 * a4) * a1;
    }
    else
    {
        v8 = (a2 * a1) * a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 5
6 6
7 6
8 8
9 8
10 8
11 8
12 12
13 12
14 12
15 14
16 14
17 14
18 14
19 14
20 14
21 15
<<<sep_out_sample>>>
lea -0x1(%rcx),%r9d
imul %esi,%r9d
sub %r8d,%r9d
lea (%rcx,%rsi,1),%r11d
cmp %edx,%r9d
jl 21 <func1+0x21>
mov $0x1,%r11d
sub %edx,%r11d
imul %edi,%r11d
cmp %r8d,%esi
jge 35 <func1+0x35>
mov %edx,%eax
imul %edi,%eax
add %esi,%eax
mov %edx,%r10d
sub %eax,%r10d
jmp 3f <func1+0x3f>
lea (%rdx,%rdi,1),%r10d
sub %esi,%r10d
add %r8d,%r10d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
add %r11d,%eax
add %r10d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = (a2 * a4) - a2 - a5;
    if (v6 < a3)
    {
        v7 = a4 + a2;
    }
    else
    {
        v7 = a1 - (a1 * a3);
    }
    if (a2 < a5)
    {
        v8 = a3 - (a3 * a1 + a2);
    }
    else
    {
        v8 = a3 + a1 - a2 + a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 7
5 5
6 5
7 11
8 11
9 11
10 13
11 13
12 15
13 15
14 15
15 15
16 15
17 15
18 19
19 19
20 19
21 21
22 21
23 21
24 21
25 21
26 21
27 21
28 22
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
imul %edi,%edx
add %edx,%r8d
add %r8d,%esi
lea 0x1(%rax,%rsi,1),%eax
sub %edi,%ecx
imul %edi,%ecx
imul %ecx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = (a3 * a1 + a5) + a2;
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        if (a5 < a3)
        {
            v7 += a2 + (a3 - a4);
        }
        else
        {
            v7 += a2 + (a4 * a3);
        }
    }
    v9 = a1 * (a4 - a1) * a1;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 18
5 4
6 4
7 4
8 18
9 17
10 17
11 17
12 18
13 19
<<<sep_out_sample>>>
mov %edx,%eax
sub %ecx,%eax
cmp %esi,%ecx
jge 11 <func1+0x11>
sub %esi,%edx
sub %ecx,%edx
mov %edx,%eax
imul %esi,%eax
lea (%rcx,%rdi,2),%edx
add %esi,%edx
add %ecx,%edx
add %edx,%eax
add %esi,%esi
imul %esi,%ecx
sub %ecx,%r8d
lea 0x1(%rax,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a4 < a2)
    {
        v6 = (a3 - a2 - a4) * a2;
    }
    else
    {
        v6 = a3 - a4;
    }
    v7 = a5 - (a2 + a2) * a4;
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += a5 - a1;
    }
    v10 = a1 - a5 + a4 - a3;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 4
4 4
5 6
6 6
7 6
8 6
9 18
10 19
11 19
12 19
13 12
14 12
15 12
16 19
17 20
<<<sep_out_sample>>>
cmp %edi,%esi
jge e <func1+0xe>
lea 0x1(%rdx),%eax
imul %edx,%eax
add %ecx,%eax
jmp 1a <func1+0x1a>
mov %r8d,%eax
imul %esi,%eax
imul %edx,%eax
add %r8d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a2 < a1)
    {
        v6 = a3 + a3 * a3 + a4;
    }
    else
    {
        v6 = a5 + ((a5 * a2) * a3);
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += a2 - a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 10
11 17
12 17
13 17
14 17
15 17
16 18
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%r9d
mov %r8d,%r11d
imul %ecx,%r11d
mov %r9d,%r10d
cmp %r8d,%edx
jle 20 <func1+0x20>
mov %edx,%r10d
sub %edi,%r10d
imul %edi,%r10d
add %r8d,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %eax,%r9d
lea (%r9,%r11,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (a3 < a4)
        {
            v6 += a5 * a4;
        }
        else
        {
            v6 += (a5 - a1) - a4;
        }
    }
    v8 = a1 + a3;
    v9 = a5 * a4;
    if (a5 < a3)
    {
        v10 = ((a3 - a1) * a1) + a5;
    }
    else
    {
        v10 = a1 + a3;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 17
3 17
4 24
5 18
6 18
7 20
8 20
9 20
10 20
11 26
12 26
13 26
14 26
15 26
16 26
17 26
18 27
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
lea (%r8,%rcx,1),%eax
mov %edx,%r8d
imul %edx,%r8d
imul %r8d,%esi
imul %edx,%esi
add %esi,%eax
lea (%rax,%rdx,2),%eax
sub %edi,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a3 < a3)
    {
        v6 = (a4 * a5) * (a3 * a3);
    }
    else
    {
        v6 = (a3 * a3) * a2 * a3;
    }
    v7 = a3 + a3;
    v8 = a4 - a1;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 14
2 14
3 14
4 14
5 10
6 10
7 10
8 10
9 14
10 14
11 13
12 14
13 15
<<<sep_out_sample>>>
cmp %edi,%esi
jge d <func1+0xd>
mov %edi,%r9d
imul %esi,%r9d
jmp 18 <func1+0x18>
lea 0x1(%rdx),%r9d
imul %edi,%r9d
sub %r8d,%r9d
cmp %edi,%r9d
jge 2d <func1+0x2d>
lea (%rdx,%rdi,1),%r10d
mov %edi,%r11d
imul %esi,%r11d
sub %r11d,%r10d
jmp 3c <func1+0x3c>
mov %edx,%r10d
imul %edx,%r10d
sub $0x1,%r10d
imul %ecx,%r10d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
lea (%r9,%r10,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a2 < a1)
    {
        v6 = a1 * a2;
    }
    else
    {
        v6 = a1 + (a1 * a3) - a5;
    }
    if (v6 < a1)
    {
        v7 = a3 + a1 - a1 * a2;
    }
    else
    {
        v7 = (a3 * a3) * a4 - a4;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 12
10 12
11 14
12 14
13 14
14 14
15 14
16 18
17 18
18 18
19 18
20 20
21 20
22 20
23 20
24 20
25 20
26 21
<<<sep_out_sample>>>
mov %edx,%eax
imul %ecx,%eax
mov %esi,%r9d
sub %eax,%r9d
sub %r8d,%r9d
test %ecx,%ecx
jle 1c <func1+0x1c>
lea (%rdx,%rsi,1),%eax
sub %ecx,%eax
imul %edx,%eax
jmp 23 <func1+0x23>
mov %edx,%eax
sub %ecx,%eax
imul %esi,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a2 - (a3 * a4) - a5;
    if (v7 < a4)
    {
        v7 = a3 * (a3 + a2 - a4);
    }
    else
    {
        v7 = a3 * a2 - a2 * a4;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 4
6 5
7 5
8 7
9 7
10 7
11 7
12 11
13 11
14 11
15 13
16 13
17 13
18 13
19 13
20 13
21 14
<<<sep_out_sample>>>
test %esi,%esi
jle d <func1+0xd>
mov %edi,%r9d
imul %edi,%r9d
jmp 1b <func1+0x1b>
mov %edi,%r9d
imul %ecx,%r9d
add %r8d,%r9d
imul %esi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
mov %edx,%esi
imul %edx,%esi
imul %esi,%edx
imul %edx,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (v6 < a2)
    {
        v6 = a1 * a1;
    }
    else
    {
        v6 = ((a1 * a4) + a5) * a2;
    }
    v7 = (a3 * a3) * a3 * a4;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 10
10 13
11 13
12 13
13 13
14 13
15 12
16 12
17 12
18 12
19 13
20 14
<<<sep_out_sample>>>
mov %esi,%eax
imul %esi,%eax
mov %r8d,%r9d
sub %eax,%r9d
cmp %edi,%esi
jge 16 <func1+0x16>
lea (%rdx,%rsi,2),%eax
add %ecx,%eax
jmp 1f <func1+0x1f>
mov %edx,%eax
sub %ecx,%eax
add %esi,%eax
imul %esi,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = a5 - (a2 * a2);
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += a1 - a2 + a1;
    }
    if (a2 < a1)
    {
        v9 = a2 + (a2 + a3) + a4;
    }
    else
    {
        v9 = ((a3 - a4) + a2) * a2;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a3)
    {
        v10 += a4 * (a2 + a4);
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 10
6 10
7 12
8 12
9 12
10 16
11 16
12 16
13 16
14 23
15 23
16 23
17 23
18 23
19 23
20 24
<<<sep_out_sample>>>
mov %edi,%eax
neg %eax
test %r8d,%r8d
cmovg %ecx,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a1 + a5;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += a4 * a2 * a3;
    }
    if (v6 < a5)
    {
        v10 = (a2 - a2) * a3 + a4;
    }
    else
    {
        v10 = a2 - a1 - a2;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 20
2 20
3 20
4 20
5 22
6 22
7 22
8 22
9 22
10 23
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a4 - a5 + a1;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += a4 + a1 - a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 14
2 14
3 14
4 14
5 15
<<<sep_out_sample>>>
cmp %ecx,%edx
jge e <func1+0xe>
mov %ecx,%eax
imul %edx,%eax
imul %edi,%eax
jmp 19 <func1+0x19>
mov %edi,%eax
sub %r8d,%eax
imul %edi,%eax
imul %edi,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (a3 < a5)
        {
            v6 += a2 * a1 + a4;
        }
        else
        {
            v6 += a5 - (a4 * a3);
        }
    }
    if (a3 < a4)
    {
        v8 = a4 * a3 * a1;
    }
    else
    {
        v8 = a1 * ((a1 - a5) * a1);
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        if (a1 < a4)
        {
            v9 += (a5 + a3) * a1;
        }
        else
        {
            v9 += a2 - a4;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 18
7 22
8 22
9 22
10 22
11 36
12 36
13 36
14 36
15 36
16 37
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
mov %edi,%ecx
imul %edx,%ecx
add %ecx,%eax
add %esi,%edi
imul %r8d,%edx
add %edi,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a1 * a3 - a4;
    v7 = (a1 + a2) + a5 * a3;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 4
5 4
6 6
7 5
8 5
9 5
10 6
11 7
<<<sep_out_sample>>>
lea (%rdi,%rdi,1),%eax
cmp $0x1,%ecx
jle 12 <func1+0x12>
mov %ecx,%eax
imul %esi,%eax
imul %edx,%eax
add %edi,%eax
test %edi,%edi
jle 22 <func1+0x22>
lea (%rdx,%rdx,1),%r9d
sub %ecx,%r9d
sub %r8d,%r9d
jmp 29 <func1+0x29>
mov %r8d,%r9d
imul %esi,%r9d
lea 0x1(%r9,%rdi,1),%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (a3 < a3)
        {
            v6 += a4 - a3 + a2;
        }
        else
        {
            v6 += a2 + a1 - a3;
        }
    }
    if (v7 < a4)
    {
        v8 = (a4 * a2 * a3) + a1;
    }
    else
    {
        v8 = a1 + a1;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        v9 += a4 - a3;
    }
    if (v11 < a1)
    {
        v11 = a3 + a3 - a4 - a5;
    }
    else
    {
        v11 = a5 * a2;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 16
3 16
4 18
5 18
6 18
7 18
8 29
9 29
10 31
11 31
12 31
13 31
14 35
15 35
16 37
17 37
18 37
19 37
20 37
21 37
22 38
<<<sep_out_sample>>>
cmp %ecx,%r8d
jge c <func1+0xc>
lea (%rdx,%rsi,2),%eax
sub %edi,%eax
jmp 12 <func1+0x12>
lea (%rdi,%r8,2),%eax
sub %esi,%eax
add %edi,%edx
add %esi,%edx
add %r8d,%edx
add %edx,%ecx
add %eax,%ecx
sub %r8d,%esi
sub %edi,%esi
lea (%rcx,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a5 < a4)
    {
        v6 = ((a2 + a2) + a3) - a1;
    }
    else
    {
        v6 = (a5 + a5) - a2 + a1;
    }
    v7 = a2 - a5 - a1;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 13
9 13
10 13
11 13
12 13
13 12
14 12
15 13
16 14
<<<sep_out_sample>>>
mov %edx,%eax
sub %ecx,%eax
add $0x1,%eax
imul %ecx,%eax
lea 0x1(%rdi,%rax,1),%eax
add %edx,%eax
add %esi,%eax
add %r8d,%eax
add %eax,%ecx
imul %esi,%r8d
sub %r8d,%edx
add %edx,%esi
lea 0x1(%rcx,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = a3 - a5 * a2 + a2;
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += a2 * a4 * a4;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a1)
    {
        v9 += a2 - (a5 - a1);
    }
    v11 = a4 + (a3 - a4) * a4;
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 15
2 15
3 15
4 15
5 16
6 16
7 16
8 16
9 16
10 4
11 4
12 4
13 16
14 17
<<<sep_out_sample>>>
mov %edx,%r10d
imul %r8d,%r10d
lea 0x2(%rsi),%r9d
imul %esi,%r9d
test %edi,%edi
jle 1f <func1+0x1f>
mov %r8d,%r11d
neg %r11d
imul %ecx,%r11d
jmp 26 <func1+0x26>
mov %ecx,%r11d
imul %r8d,%r11d
add %edx,%edi
add %edi,%esi
lea (%rcx,%r8,2),%edx
lea (%rdx,%rsi,1),%eax
add %r10d,%eax
add %r9d,%eax
add %r11d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a5 - (a5 - a5);
    v7 = a3 * a5;
    v8 = (a2 * a2 + a2) + a2;
    if (v9 < a1)
    {
        v9 = ((a3 - a5) - a3) * a4;
    }
    else
    {
        v9 = a4 * a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 5
2 5
3 6
4 6
5 7
6 7
7 9
8 9
9 9
10 9
11 13
12 13
13 15
14 15
15 15
16 15
17 15
18 15
19 15
20 16
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %r8d,%edx
lea 0x1(%rcx,%rdx,1),%eax
lea (%r8,%rsi,1),%edx
add %edi,%edx
imul %edx,%r8d
add %eax,%r8d
mov %esi,%eax
sub %ecx,%eax
imul %eax,%esi
sub %edi,%esi
lea (%r8,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (a2 < a4)
        {
            v6 += a1 + a2 * a4;
        }
        else
        {
            v6 += (a4 - a3) * a5;
        }
    }
    v8 = ((a5 + a2) + a1) * a5;
    v9 = (a2 - a4) * a2 - a1;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 18
5 16
6 16
7 16
8 18
9 17
10 17
11 17
12 17
13 18
14 19
<<<sep_out_sample>>>
cmp %esi,%edx
jge c <func1+0xc>
mov %edx,%r9d
sub %esi,%r9d
jmp 13 <func1+0x13>
mov %ecx,%r9d
imul %edi,%r9d
mov %r8d,%r10d
sub %esi,%r10d
cmp %edi,%r9d
jl 2c <func1+0x2c>
mov %edx,%r10d
sub %ecx,%r10d
mov %esi,%eax
imul %ecx,%eax
add %eax,%r10d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
lea (%r9,%r10,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a3 < a2)
    {
        v6 = a3 + a1 - (a1 + a2);
    }
    else
    {
        v6 = a4 * a1;
    }
    if (v6 < a1)
    {
        v7 = (a5 - a2) + a4 - a4;
    }
    else
    {
        v7 = a3 - a4 + a2 * a4;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 14
9 14
10 12
11 12
12 18
13 18
14 18
15 18
16 18
17 20
18 20
19 20
20 20
21 20
22 20
23 21
<<<sep_out_sample>>>
lea (%r8,%rdx,1),%eax
mov %edi,%r9d
imul %edx,%r9d
cmp %r8d,%ecx
cmovl %r9d,%eax
mov %ecx,%r9d
imul %ecx,%r9d
add %r9d,%edi
add %edx,%edi
add %edi,%esi
add %r8d,%esi
add %esi,%ecx
lea 0x1(%rax,%rcx,1),%eax
add %r8d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a4 < a5)
    {
        v6 = a1 * a3;
    }
    else
    {
        v6 = a5 + a3;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a5 - a3 - a2;
    }
    v9 = a5 + a3;
    v10 = a4 * a4;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 6
3 6
4 6
5 6
6 18
7 18
8 19
9 19
10 19
11 19
12 19
13 19
14 17
15 19
16 20
<<<sep_out_sample>>>
lea (%rdx,%rcx,1),%r9d
test %edx,%edx
jle 12 <func1+0x12>
mov %r8d,%eax
imul %ecx,%eax
add %edx,%eax
jmp 1b <func1+0x1b>
lea -0x1(%rdi),%eax
imul %esi,%eax
sub %r8d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a2 + a3 + a4 - a2;
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += a3 - a3;
    }
    if (v7 < a3)
    {
        v9 = a5 * a4 + a3;
    }
    else
    {
        v9 = ((a1 * a2) - a2) - a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 10
3 10
4 12
5 12
6 12
7 12
8 16
9 16
10 16
11 18
12 18
13 18
14 18
15 18
16 18
17 19
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%r9d
add %esi,%r9d
add %r8d,%r9d
add %ecx,%r9d
mov %edi,%eax
sub %esi,%eax
sub %esi,%eax
sub %edx,%eax
add %r9d,%eax
mov %ecx,%edx
sub %r8d,%edx
add %edx,%eax
add %ecx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = ((a1 - a2) - a2) - a3;
    v7 = (a3 + a4) - a3 - a5;
    v8 = a1 + a4;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 7
2 7
3 7
4 7
5 4
6 4
7 4
8 4
9 7
10 5
11 5
12 7
13 6
14 7
15 8
<<<sep_out_sample>>>
test %ecx,%ecx
jle c <func1+0xc>
mov %edi,%eax
imul %r8d,%eax
jmp 18 <func1+0x18>
mov %r8d,%eax
imul %edx,%eax
imul %edx,%eax
imul %edx,%eax
add %edx,%edi
add %esi,%edi
add %r8d,%edi
add %edi,%ecx
add %eax,%ecx
mov %r8d,%eax
sub %edx,%eax
imul %eax,%r8d
sub %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (v6 < a4)
    {
        v6 = a1 * a5;
    }
    else
    {
        v6 = (a5 * a3) * a3 * a3;
    }
    v7 = (a5 * (a5 - a3)) - a2;
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        if (v7 < a3)
        {
            v8 += a2 - a5;
        }
        else
        {
            v8 += (a5 - a5) * a4;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 10
10 25
11 25
12 25
13 25
14 25
15 12
16 12
17 12
18 12
19 25
20 26
<<<sep_out_sample>>>
lea 0x1(%rsi,%rdi,2),%eax
add %eax,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += (a4 - a5) - a3;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += a2 + a4 - a3;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a1)
    {
        if (v10 < a2)
        {
            v10 += a3 * a4 - a1;
        }
        else
        {
            v10 += (a2 - a2) - a4;
        }
    }
    v12 = a2 + a1;
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 27
2 27
3 27
4 27
5 27
6 28
<<<sep_out_sample>>>
test %esi,%esi
jle 11 <func1+0x11>
lea (%rsi,%r8,1),%r9d
imul %edi,%r9d
add %esi,%r9d
jmp 1f <func1+0x1f>
mov %edi,%r9d
imul %edx,%r9d
imul %edx,%r9d
add %ecx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
add %ecx,%r8d
add %r9d,%r8d
mov %edx,%eax
imul %ecx,%eax
sub %esi,%eax
sub %edi,%eax
add %r8d,%eax
sub %ecx,%eax
sub %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (v6 < a2)
    {
        v6 = (a2 + a5) * a1 + a2;
    }
    else
    {
        v6 = (a1 * a3 * a3) + a4;
    }
    v7 = a4 * a3 - a2 - a1;
    v8 = ((a4 - a1) - a4) - a4;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 10
11 14
12 14
13 14
14 14
15 14
16 12
17 12
18 12
19 12
20 14
21 13
22 14
23 15
<<<sep_out_sample>>>
mov %ecx,%eax
sub %edi,%eax
test %esi,%esi
jle d <func1+0xd>
lea (%rdx,%rcx,2),%eax
add %esi,%eax
add %edx,%edi
add %edi,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (a4 < a1)
        {
            v6 += (a1 - a1) + a5;
        }
        else
        {
            v6 += (a4 * a1) * a5;
        }
    }
    if (v8 < a2)
    {
        v8 = a2 + (a3 + a4 + a4);
    }
    else
    {
        v8 = a4 - a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 22
2 22
3 16
4 16
5 18
6 18
7 24
8 24
9 24
10 24
11 24
12 25
<<<sep_out_sample>>>
mov %ecx,%eax
imul %edx,%eax
mov %r8d,%r10d
sub %eax,%r10d
mov %r10d,%eax
sub %ecx,%eax
cmp %esi,%r8d
jge 25 <func1+0x25>
mov %edx,%r9d
sub %esi,%r9d
imul %r8d,%r9d
imul %r8d,%r9d
jmp 38 <func1+0x38>
mov %ecx,%r9d
imul %edi,%r9d
add %r8d,%r9d
mov %edi,%r11d
sub %r9d,%r11d
mov %r11d,%r9d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a5 - a4 * a3 - a4;
    if (a5 < a2)
    {
        v7 = ((a3 - a2) * a5) * a5;
    }
    else
    {
        v7 = a1 - (a4 * a1 + a5);
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 4
6 4
7 5
8 5
9 7
10 7
11 7
12 7
13 7
14 11
15 11
16 11
17 11
18 11
19 11
20 13
21 13
22 13
23 13
24 13
25 13
26 14
<<<sep_out_sample>>>
mov %edx,%r9d
sub %edi,%r9d
add %r8d,%r9d
mov %esi,%eax
imul %ecx,%eax
sub %edx,%eax
add %edi,%eax
cmp %eax,%edi
jle 23 <func1+0x23>
mov %edi,%r10d
imul %ecx,%r10d
imul %edi,%r10d
jmp 33 <func1+0x33>
mov %edi,%r11d
sub %esi,%r11d
mov %edi,%r10d
imul %esi,%r10d
add %r11d,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %r9d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a3 * a1 + a3;
    }
    v8 = a5 - (a1 - a3);
    v9 = a1 + (a2 * a4 - a3);
    if (v9 < a1)
    {
        v10 = a1 * a4 * a1;
    }
    else
    {
        v10 = (a1 - a2) + a1 * a2;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 9
4 10
5 10
6 10
7 10
8 11
9 11
10 13
11 13
12 13
13 13
14 17
15 17
16 17
17 17
18 17
19 19
20 19
21 19
22 19
23 19
24 19
25 19
26 20
<<<sep_out_sample>>>
lea (%r8,%rdx,1),%eax
cmp %ecx,%r8d
jge 17 <func1+0x17>
mov %r8d,%r9d
imul %ecx,%r9d
mov %ecx,%eax
sub %edx,%eax
add %r9d,%eax
add %edx,%edi
add %esi,%edi
add %r8d,%edi
add %ecx,%edi
lea 0x1(%rax,%rdi,1),%eax
add %edx,%ecx
sub %r8d,%ecx
add %ecx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a5 < a4)
    {
        v6 = a5 * a4 + (a4 - a3);
    }
    else
    {
        v6 = (a3 - a2 + a2) + a5;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        if (a4 < a5)
        {
            v7 += a2 + a4;
        }
        else
        {
            v7 += a3 * a1;
        }
    }
    v9 = ((a3 + a4) - a5) + a2;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 6
7 6
8 6
9 25
10 25
11 25
12 25
13 25
14 24
15 24
16 24
17 25
18 26
<<<sep_out_sample>>>
lea 0x2(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12, v13 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a4 * a4;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += (a1 * a3) * a5;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a4)
    {
        if (a5 < a2)
        {
            v10 += a5 * a4;
        }
        else
        {
            v10 += a2 * a5;
        }
    }
    v12 = 0;
    for (v13 = 0; v13++; v13<a1)
    {
        v12 += (a5 * a5) * a1;
    }
    return v12+v13+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 31
2 31
3 31
4 31
5 32
<<<sep_out_sample>>>
mov %esi,%r9d
sub %ecx,%r9d
mov %edx,%eax
imul %edi,%eax
add %eax,%r9d
mov %ecx,%eax
sub %edi,%eax
sub %edi,%eax
cmp %r9d,%ecx
jle 21 <func1+0x21>
lea (%r8,%r8,1),%eax
sub %edi,%eax
add %esi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a2 - a4 + (a3 * a1);
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += (a1 - a4) - a4;
    }
    if (v6 < a4)
    {
        v9 = a2 + (a5 + a5 - a1);
    }
    else
    {
        v9 = a4 - a1 - a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 4
6 16
7 16
8 16
9 10
10 10
11 12
12 12
13 12
14 18
15 18
16 18
17 18
18 18
19 18
20 19
<<<sep_out_sample>>>
mov %edi,%eax
neg %eax
mov %esi,%r10d
sub %edx,%r10d
cmp %ecx,%esi
cmovl %eax,%r10d
mov %edi,%eax
sub %edx,%eax
mov %edx,%r9d
sub %esi,%r9d
cmp %r8d,%esi
cmovg %eax,%r9d
mov %edx,%eax
sub %edi,%eax
test %ecx,%ecx
jle 33 <func1+0x33>
mov %edi,%eax
imul %edi,%eax
imul %edi,%eax
add %ecx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r10d,%ecx
add %ecx,%r9d
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a2 < a4)
    {
        v6 = a3 - a3 - a1;
    }
    else
    {
        v6 = a2 - a3 + a5 - a5;
    }
    if (a5 < a2)
    {
        v7 = a5 - a3 + a1 - a5;
    }
    else
    {
        v7 = a3 - a2;
    }
    if (v8 < a4)
    {
        v8 = a4 + (a1 * a1 * a1);
    }
    else
    {
        v8 = a3 - a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 6
6 6
7 14
8 14
9 14
10 14
11 14
12 14
13 26
14 26
15 20
16 20
17 22
18 22
19 22
20 22
21 28
22 28
23 28
24 28
25 28
26 28
27 28
28 29
<<<sep_out_sample>>>
lea (%r8,%rcx,1),%r9d
mov %esi,%eax
imul %ecx,%eax
add %eax,%r9d
lea 0x0(,%rcx,4),%eax
cmp %edx,%r8d
jle 1e <func1+0x1e>
lea (%r8,%rdx,1),%eax
add %esi,%eax
mov %ecx,%r10d
sub %r8d,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a5 + a4 + a2 * a4;
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += a1 * a2;
    }
    if (a3 < a5)
    {
        v9 = (a5 + a3) + a2;
    }
    else
    {
        v9 = a4 + (a4 + a4) + a4;
    }
    v10 = a4 - a5;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 16
6 10
7 10
8 12
9 12
10 18
11 18
12 19
13 19
14 19
15 19
16 19
17 19
18 19
19 20
<<<sep_out_sample>>>
mov %edx,%r9d
sub %r8d,%r9d
imul %edi,%r9d
imul %r8d,%r9d
cmp %ecx,%edi
jge 21 <func1+0x21>
lea (%rcx,%rdx,1),%r10d
mov %edx,%eax
imul %r8d,%eax
add %r10d,%eax
jmp 28 <func1+0x28>
mov %esi,%eax
sub %ecx,%eax
imul %esi,%eax
mov $0x1,%r10d
sub %esi,%r10d
imul %r8d,%r10d
lea (%rdi,%rdx,2),%edx
lea (%rdx,%r10,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = ((a3 - a5) * a1) * a5;
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += a2 - a4 + a1;
    }
    if (a1 < a4)
    {
        v9 = (a4 + a3) + a3 * a5;
    }
    else
    {
        v9 = (a2 - a4) * a2;
    }
    v10 = a5 - (a2 * a5) + a3;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 10
6 10
7 12
8 12
9 12
10 12
11 12
12 16
13 16
14 16
15 18
16 18
17 18
18 19
19 19
20 19
21 19
22 19
23 19
24 19
25 20
<<<sep_out_sample>>>
mov %edi,%r9d
imul %ecx,%r9d
cmp %edx,%ecx
jge 1a <func1+0x1a>
lea (%rdx,%rcx,1),%eax
mov %r8d,%r10d
imul %ecx,%r10d
sub %r10d,%eax
jmp 21 <func1+0x21>
lea 0x1(%r8),%eax
imul %edx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a1 * a4;
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += a3 * (a5 * a4);
    }
    if (a4 < a3)
    {
        v9 = (a3 + a4) - a5 * a4;
    }
    else
    {
        v9 = a3 * a5 + a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 10
4 10
5 12
6 12
7 12
8 12
9 12
10 16
11 16
12 18
13 18
14 18
15 18
16 18
17 18
18 19
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (a2 < a2)
        {
            v6 += a3 - a3;
        }
        else
        {
            v6 += a2 + a2 + a1;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += (a4 + a5) - a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 21
5 22
<<<sep_out_sample>>>
mov %ecx,%eax
imul %r8d,%eax
lea 0x1(%rdi,%rax,1),%eax
add %eax,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a3 - a1;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += (a5 - a2) + a3;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a3)
    {
        if (a4 < a3)
        {
            v10 += (a2 * a1) * a3;
        }
        else
        {
            v10 += a1 - (a5 + a3);
        }
    }
    if (a3 < a3)
    {
        v12 = a5 - (a1 - a5 + a5);
    }
    else
    {
        v12 = (a4 + (a4 - a4)) * a5;
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 32
2 32
3 34
4 34
5 34
6 34
7 34
8 35
<<<sep_out_sample>>>
mov %esi,%r11d
sub %edi,%r11d
imul %edx,%r11d
add %esi,%r11d
mov %r8d,%r9d
sub %edx,%r9d
cmp %ecx,%edx
jge 1f <func1+0x1f>
lea (%r8,%rdi,1),%r9d
imul %edi,%r9d
cmp %r8d,%esi
jle 2a <func1+0x2a>
lea (%r8,%r8,1),%r10d
jmp 35 <func1+0x35>
lea 0x1(%rdx),%r10d
imul %edx,%r10d
sub %r8d,%r10d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r11d,%ecx
add %ecx,%r9d
lea (%r9,%r10,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = ((a2 - a1) * a3) + a2;
    if (a3 < a4)
    {
        v7 = (a5 + a1) * a1;
    }
    else
    {
        v7 = (a5 + a2) - (a2 + a3);
    }
    if (a5 < a2)
    {
        v8 = a5 + a5;
    }
    else
    {
        v8 = a3 + a3 * a3 - a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 11
6 11
7 5
8 5
9 7
10 7
11 13
12 13
13 15
14 15
15 19
16 19
17 19
18 21
19 21
20 21
21 21
22 21
23 21
24 21
25 22
<<<sep_out_sample>>>
mov %esi,%eax
imul %ecx,%eax
imul %esi,%eax
sub %ecx,%eax
cmp %ecx,%esi
jge 17 <func1+0x17>
lea (%rsi,%rdi,2),%r9d
add %edx,%r9d
jmp 24 <func1+0x24>
mov %edi,%r9d
sub %r8d,%r9d
sub %edx,%r9d
imul %r8d,%r9d
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a3 + a3;
    }
    v8 = (a2 * a4 * a2) - a4;
    if (a2 < a4)
    {
        v9 = ((a1 + a2) + a1) + a3;
    }
    else
    {
        v9 = ((a1 - a5) - a3) * a5;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a5)
    {
        v10 += a4 * (a4 + a5);
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 9
4 9
5 10
6 10
7 12
8 12
9 12
10 16
11 16
12 16
13 16
14 23
15 23
16 23
17 23
18 23
19 23
20 24
<<<sep_out_sample>>>
cmp %esi,%ecx
jle 10 <func1+0x10>
mov %edi,%r9d
imul %edi,%r9d
neg %r9d
jmp 1c <func1+0x1c>
mov %r8d,%r9d
sub %edi,%r9d
add %esi,%r9d
sub %edx,%r9d
mov %esi,%eax
sub %edi,%eax
cmp %esi,%r9d
jge 2d <func1+0x2d>
mov %r8d,%eax
sub %ecx,%eax
lea (%rax,%rdx,2),%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%r9d
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a5 + a4 * a5;
    }
    if (a2 < a4)
    {
        v8 = (a3 - (a1 * a1)) - a3;
    }
    else
    {
        v8 = a2 - (a1 - a5) - a3;
    }
    if (v8 < a2)
    {
        v9 = a3 - (a4 - a5 - a3);
    }
    else
    {
        v9 = a2 - a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 15
8 15
9 15
10 15
11 23
12 23
13 17
14 17
15 19
16 19
17 19
18 25
19 25
20 25
21 25
22 25
23 25
24 26
<<<sep_out_sample>>>
cmp $0x1,%esi
jle c <func1+0xc>
mov %r8d,%eax
sub %esi,%eax
jmp 14 <func1+0x14>
mov %r8d,%eax
imul %esi,%eax
sub %ecx,%eax
mov %r8d,%r9d
imul %edx,%r9d
mov %ecx,%r11d
sub %r9d,%r11d
mov %r11d,%r9d
test %r8d,%r8d
jle 34 <func1+0x34>
mov %ecx,%r10d
sub %edi,%r10d
add %edx,%r10d
jmp 44 <func1+0x44>
mov %edx,%r10d
imul %edi,%r10d
mov %r8d,%r11d
sub %r10d,%r11d
mov %r11d,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (v7 < a3)
        {
            v6 += a3 - a3 - a4;
        }
        else
        {
            v6 += a2 - a5 + a3;
        }
    }
    if (v7 < a2)
    {
        v8 = a5 - a2;
    }
    else
    {
        v8 = a5 * a2 - a4;
    }
    v9 = a4 - a5 * a3;
    if (v6 < a5)
    {
        v10 = a4 - a1 + a3;
    }
    else
    {
        v10 = a5 - a3 * a1;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 22
7 22
8 22
9 24
10 24
11 24
12 24
13 24
14 25
15 25
16 27
17 27
18 27
19 27
20 31
21 31
22 31
23 31
24 31
25 33
26 33
27 33
28 33
29 33
30 33
31 33
32 34
<<<sep_out_sample>>>
lea (%rsi,%r8,1),%r9d
imul %esi,%r9d
add %ecx,%r9d
lea (%rsi,%rdi,1),%eax
test %r8d,%r8d
jle 1e <func1+0x1e>
mov %esi,%eax
sub %ecx,%eax
add $0x1,%eax
imul %r8d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %r9d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a2 + a2;
    }
    v8 = (a2 + a5) * a2 + a4;
    if (v6 < a5)
    {
        v9 = a5 - (a4 - a2) * a5;
    }
    else
    {
        v9 = a2 + a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 9
4 16
5 10
6 10
7 12
8 12
9 12
10 12
11 18
12 18
13 18
14 18
15 18
16 18
17 19
<<<sep_out_sample>>>
lea 0x1(%rsi),%r10d
mov %r10d,%r9d
imul %edi,%r9d
sub %r8d,%r9d
cmp %r9d,%edi
jle 24 <func1+0x24>
mov %ecx,%r10d
imul %esi,%r10d
mov %esi,%eax
sub %edx,%eax
imul %eax,%r10d
jmp 28 <func1+0x28>
imul %r8d,%r10d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
lea (%r9,%r10,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a2 < a2)
    {
        v6 = a4 * ((a5 * a3) - a2);
    }
    else
    {
        v6 = a1 + a2 * a1 - a5;
    }
    if (v6 < a1)
    {
        v7 = a4 * a2 * (a2 - a3);
    }
    else
    {
        v7 = a5 + a5 * a2;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 12
6 12
7 14
8 14
9 14
10 14
11 14
12 14
13 18
14 20
15 20
16 20
17 20
18 20
19 20
20 21
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
imul %edx,%esi
add %esi,%eax
mov %r8d,%r9d
imul %edi,%r9d
add %r9d,%eax
sub %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a2 * a3;
    v7 = a5 * a1;
    v8 = (a5 - a5 - a1) * a5;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 7
2 7
3 7
4 7
5 4
6 7
7 5
8 5
9 7
10 7
11 8
<<<sep_out_sample>>>
mov %edx,%r11d
sub %esi,%r11d
mov %ecx,%r9d
imul %esi,%r9d
sub %r8d,%r9d
sub %edx,%r9d
cmp %edi,%r9d
jge 26 <func1+0x26>
mov %esi,%r10d
sub %r8d,%r10d
sub %r8d,%r10d
add %ecx,%r10d
jmp 2d <func1+0x2d>
lea (%rcx,%rdi,2),%r10d
add %r8d,%r10d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r11d,%ecx
add %ecx,%r9d
lea (%r9,%r10,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a1 < a1)
    {
        v6 = (a4 - a1 - a3) + a5;
    }
    else
    {
        v6 = a3 - a2;
    }
    v7 = (a4 * a2) - a5 - a3;
    if (v7 < a1)
    {
        v8 = a2 - a5 - a5 + a4;
    }
    else
    {
        v8 = a5 + (a1 + (a1 + a4));
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 12
4 12
5 12
6 12
7 13
8 13
9 15
10 15
11 15
12 15
13 15
14 19
15 19
16 21
17 21
18 21
19 21
20 21
21 21
22 21
23 22
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add $0x1,%ecx
imul %ecx,%edi
add %esi,%edi
lea 0x1(%rax,%rdi,1),%eax
add $0x1,%r8d
imul %r8d,%edx
imul %edx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = a2 + (a1 * a4 + a1);
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        if (v8 < a2)
        {
            v7 += a2 - a4 - a4;
        }
        else
        {
            v7 += a2 + a5 + a3;
        }
    }
    v9 = (a3 * a5 + a3) * a2;
    v10 = 0;
    for (v11 = 0; v11++; v11<a1)
    {
        if (a1 < a2)
        {
            v10 += a2 * a2;
        }
        else
        {
            v10 += a1 - a3 * a3;
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 30
2 30
3 30
4 30
5 4
6 4
7 4
8 30
9 17
10 17
11 17
12 30
13 31
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%r9d
add %esi,%r9d
add %r8d,%r9d
add %ecx,%r9d
mov %esi,%eax
imul %r8d,%eax
imul %esi,%eax
add %eax,%r9d
mov %esi,%eax
imul %edi,%eax
imul %eax,%esi
sub %r8d,%esi
add %r9d,%esi
mov %r8d,%eax
sub %edi,%eax
add %eax,%ecx
sub %edx,%ecx
lea (%rsi,%rcx,1),%eax
imul %r8d,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a2 * a5 * a2;
    if (a5 < a5)
    {
        v7 = (a5 - a2 * a2) - a3;
    }
    else
    {
        v7 = a2 * a1 * a2 - a5;
    }
    v8 = ((a5 - a1) + a4) - a3;
    if (a3 < a3)
    {
        v9 = a3 - a5;
    }
    else
    {
        v9 = a5 * a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 22
4 22
5 4
6 4
7 4
8 22
9 11
10 11
11 11
12 11
13 22
14 13
15 13
16 13
17 13
18 22
19 20
20 22
21 23
<<<sep_out_sample>>>
cmp %ecx,%edx
jge 16 <func1+0x16>
mov %r8d,%eax
imul %edi,%eax
mov %esi,%r9d
sub %eax,%r9d
imul %ecx,%r9d
jmp 21 <func1+0x21>
lea 0x1(%rcx),%r9d
imul %edx,%r9d
add %r8d,%r9d
mov $0x0,%eax
cmp %edi,%ecx
jle 34 <func1+0x34>
mov %edx,%eax
sub %edi,%eax
imul %r8d,%eax
add %esi,%eax
lea (%rcx,%r8,1),%r10d
add %edx,%r10d
cmp %r8d,%ecx
jg 4a <func1+0x4a>
mov %edx,%r10d
sub %ecx,%r10d
imul %ecx,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a3 < a4)
    {
        v6 = (a2 - a5 * a1) * a4;
    }
    else
    {
        v6 = a3 * a4 + a3 + a5;
    }
    if (a1 < a4)
    {
        v7 = (a3 - a1) * a5 + a2;
    }
    else
    {
        v7 = a3 - a3;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += a1 * (a2 * a4);
    }
    if (a5 < a4)
    {
        v10 = a4 + a5 + a3;
    }
    else
    {
        v10 = a4 * (a3 - a4);
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 6
9 10
10 10
11 10
12 18
13 12
14 12
15 14
16 14
17 14
18 14
19 27
20 27
21 25
22 25
23 31
24 31
25 31
26 33
27 33
28 33
29 33
30 33
31 33
32 33
33 34
<<<sep_out_sample>>>
mov %ecx,%eax
sub %esi,%eax
cmp %edx,%esi
jl d <func1+0xd>
mov %edi,%eax
imul %ecx,%eax
add %edi,%edx
add %edx,%esi
add %r8d,%esi
add %esi,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a2 < a3)
    {
        v6 = a4 - a2;
    }
    else
    {
        v6 = a1 * a4;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += a1 - a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 6
2 6
3 4
4 4
5 10
6 10
7 17
8 17
9 17
10 17
11 17
12 18
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
mov %ecx,%esi
sub %r8d,%esi
add %esi,%eax
sub %edx,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a4 - a5;
    v7 = a4 - a3;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 4
7 6
8 5
9 6
10 7
<<<sep_out_sample>>>
lea (%rdx,%rdx,1),%r10d
lea (%rdx,%r8,1),%r9d
cmp %edi,%r8d
jl 14 <func1+0x14>
mov %edx,%r9d
imul %edx,%r9d
lea (%rsi,%rcx,1),%eax
cmp %edi,%r8d
jle 28 <func1+0x28>
mov %r8d,%eax
imul %esi,%eax
imul %r8d,%eax
sub %esi,%eax
add %edi,%edx
add %esi,%edx
add %edx,%r8d
add %r8d,%ecx
add %r10d,%ecx
add %r9d,%ecx
add %ecx,%eax
imul %esi,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = (a1 - a1 + a3) + a3;
    if (a5 < a1)
    {
        v7 = a1 - a1 + a3 + a5;
    }
    else
    {
        v7 = a3 * a3;
    }
    if (a1 < a5)
    {
        v8 = (a5 * (a5 * a2)) - a2;
    }
    else
    {
        v8 = a2 + a4;
    }
    v9 = a2 * a2;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 7
3 5
4 5
5 11
6 11
7 19
8 13
9 13
10 15
11 15
12 15
13 15
14 22
15 22
16 22
17 22
18 22
19 22
20 22
21 21
22 22
23 23
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea (%r8,%rcx,1),%eax
lea (%rdi,%rcx,2),%esi
add %esi,%edi
add %edi,%eax
imul %ecx,%ecx
imul %edx,%edx
add %ecx,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = ((a1 + a4) + a4) + a1;
    v7 = a4 * a4 + a3 * a3;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 4
7 6
8 5
9 5
10 5
11 6
12 7
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %r8d,%esi
add %ecx,%esi
mov %r8d,%eax
sub %edx,%eax
mov %edx,%edi
imul %ecx,%edi
sub %edi,%eax
lea 0x1(%rsi,%rax,1),%esi
imul %edx,%edx
imul %r8d,%ecx
sub %ecx,%edx
lea (%rsi,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a5 - a3 - a3 * a4;
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        if (v7 < a4)
        {
            v7 += a4 * a2 * a5;
        }
        else
        {
            v7 += (a5 - a2) + a1;
        }
    }
    v9 = a3 * a3 - a5 * a4;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 18
5 4
6 4
7 4
8 4
9 4
10 18
11 17
12 17
13 17
14 18
15 19
<<<sep_out_sample>>>
lea (%rcx,%rdx,1),%eax
mov %r8d,%r9d
sub %esi,%r9d
cmp %ecx,%edi
cmovge %r9d,%eax
lea (%rdi,%rdx,1),%r9d
add %r9d,%esi
add %r8d,%esi
add %ecx,%esi
add %eax,%esi
sub %r8d,%edx
add %edx,%edi
sub %ecx,%edi
lea 0x1(%rsi,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a1 < a4)
    {
        v6 = a4 + a3;
    }
    else
    {
        v6 = (a5 - a2 + a4) - a4;
    }
    v7 = a3 - a5 + a1 - a4;
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += a3 - (a1 * a3);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 6
6 18
7 18
8 18
9 18
10 18
11 12
12 12
13 12
14 18
15 19
<<<sep_out_sample>>>
lea (%rdi,%rsi,1),%eax
imul %edi,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (a4 < a2)
        {
            v6 += a2 * a1 - a1;
        }
        else
        {
            v6 += a1 - a5 * a3;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        if (a5 < a4)
        {
            v8 += a1 - a4 * a2;
        }
        else
        {
            v8 += (a5 - a3) + a1;
        }
    }
    v10 = a2 * a1;
    v11 = a1 * a1;
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 29
2 30
3 30
4 30
5 30
6 30
7 30
8 31
<<<sep_out_sample>>>
cmp %ecx,%r8d
jge e <func1+0xe>
mov %edi,%r9d
imul %ecx,%r9d
jmp 15 <func1+0x15>
mov %r8d,%r9d
imul %ecx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
imul %ecx,%edi
imul %esi,%edi
mov %ecx,%r10d
sub %edi,%r10d
add %r10d,%eax
mov %edx,%edi
sub %esi,%edi
mov %edi,%esi
add %ecx,%esi
add %esi,%edx
add %edx,%eax
imul %r8d,%ecx
add $0x1,%ecx
imul %ecx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a5 < a4)
    {
        v6 = a1 * a4;
    }
    else
    {
        v6 = a5 * a4;
    }
    v7 = a4 - a1 * a4 * a2;
    v8 = a4 + (a3 - a2) + a3;
    v9 = (a4 * a5 * a5) + a5;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 15
9 15
10 15
11 15
12 15
13 12
14 12
15 12
16 12
17 15
18 13
19 13
20 13
21 13
22 13
23 15
24 14
25 14
26 14
27 15
28 16
<<<sep_out_sample>>>
mov %ecx,%r9d
sub %edi,%r9d
cmp %edi,%ecx
jl 15 <func1+0x15>
lea (%r8,%rdx,1),%r9d
sub %edi,%r9d
imul %r8d,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
sub %edx,%esi
imul %edx,%esi
add %esi,%eax
sub %edi,%r8d
sub %edx,%r8d
add %r8d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a4 < a1)
    {
        v6 = (a1 - a1 - a1) + a4;
    }
    else
    {
        v6 = (a5 + a3 - a1) * a5;
    }
    v7 = a3 * (a2 - a3);
    v8 = a5 - a1 - a3 + a4;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 6
2 6
3 4
4 4
5 10
6 10
7 10
8 14
9 14
10 14
11 14
12 14
13 12
14 12
15 14
16 13
17 13
18 13
19 14
20 15
<<<sep_out_sample>>>
mov %r8d,%eax
sub %esi,%eax
lea (%rcx,%rcx,1),%r9d
cmp %edi,%ecx
cmovge %r9d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a4 < a1)
    {
        v6 = a5 - a2;
    }
    else
    {
        v6 = a4 + a4;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        if (v6 < a4)
        {
            v7 += a2 - a1 - a5;
        }
        else
        {
            v7 += a4 - a2;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 6
6 24
7 24
8 24
9 24
10 24
11 25
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
imul %edx,%edx
imul %edx,%edx
lea 0x1(%rcx,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a3 * a3 * a3 * a3;
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += (a2 + a4) * a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 4
6 4
7 10
8 11
<<<sep_out_sample>>>
lea 0x2(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12, v13 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a3 + a4 - a3;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        if (v6 < a5)
        {
            v8 += a3 + a3 * a2;
        }
        else
        {
            v8 += (a3 + a5) + a3;
        }
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a4)
    {
        v10 += a5 * a2;
    }
    v12 = 0;
    for (v13 = 0; v13++; v13<a3)
    {
        v12 += a3 * (a1 - a1);
    }
    return v12+v13+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 31
2 31
3 31
4 31
5 32
<<<sep_out_sample>>>
mov %ecx,%r9d
imul %r8d,%r9d
cmp %esi,%edx
jle 16 <func1+0x16>
mov %ecx,%eax
sub %esi,%eax
sub %edx,%eax
add %r8d,%eax
jmp 21 <func1+0x21>
lea (%rdx,%rsi,1),%r10d
lea (%r8,%rdi,1),%eax
add %r10d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a5 * (a4 - a3 + a3);
    if (a2 < a3)
    {
        v7 = ((a4 - a2) - a3) + a5;
    }
    else
    {
        v7 = a3 + a2 + (a5 + a1);
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += (a3 + a4) + a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 5
4 5
5 7
6 7
7 7
8 7
9 7
10 11
11 11
12 11
13 18
14 18
15 18
16 18
17 18
18 18
19 19
<<<sep_out_sample>>>
test %ecx,%ecx
jle 10 <func1+0x10>
mov %edx,%eax
sub %ecx,%eax
imul %ecx,%eax
sub %r8d,%eax
jmp 18 <func1+0x18>
lea (%r8,%rsi,1),%eax
sub %edx,%eax
add %esi,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a1 * a5 + a1;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += (a5 - a2) * a1;
    }
    if (v6 < a4)
    {
        v10 = (a3 - a4) * a4 - a5;
    }
    else
    {
        v10 = ((a5 + a2) - a3) + a2;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 14
2 14
3 16
4 16
5 16
6 16
7 16
8 20
9 20
10 20
11 22
12 22
13 22
14 22
15 22
16 23
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%r9d
add %esi,%r9d
add %r8d,%r9d
add %ecx,%r9d
mov %ecx,%eax
imul %edi,%eax
add %r8d,%eax
add %esi,%eax
add %r9d,%eax
add %r8d,%ecx
imul %ecx,%esi
add %esi,%edx
add %edx,%eax
add %edi,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a4 * a1 + a5 + a2;
    v7 = ((a5 + a4) * a2) + a3;
    v8 = a5 + a1;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 7
2 7
3 7
4 7
5 4
6 4
7 4
8 4
9 7
10 5
11 5
12 5
13 7
14 6
15 7
16 8
<<<sep_out_sample>>>
mov %r8d,%eax
sub %ecx,%eax
lea (%rsi,%r8,1),%r9d
test %r8d,%r8d
jle 1b <func1+0x1b>
mov %r8d,%r10d
imul %ecx,%r10d
imul %r8d,%r10d
jmp 2e <func1+0x2e>
mov %r8d,%r10d
imul %edi,%r10d
mov %esi,%r11d
sub %r10d,%r11d
mov %r11d,%r10d
sub %r8d,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (a2 < a3)
        {
            v6 += (a3 * a1) * a1;
        }
        else
        {
            v6 += a3 * a3;
        }
    }
    v8 = a5 - a4;
    v9 = a2 - (a3 - a3 - a5);
    if (v6 < a5)
    {
        v10 = a5 * a4 * a5;
    }
    else
    {
        v10 = (a2 - a5 * a1) - a5;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 17
4 18
5 18
6 20
7 20
8 20
9 20
10 24
11 24
12 24
13 24
14 24
15 24
16 26
17 26
18 26
19 26
20 26
21 26
22 26
23 27
<<<sep_out_sample>>>
lea (%rdx,%r8,1),%r9d
add %esi,%r9d
imul %edi,%r9d
cmp %ecx,%r9d
jge 1f <func1+0x1f>
lea (%rsi,%rsi,1),%eax
mov %edi,%r10d
sub %eax,%r10d
imul %esi,%r10d
jmp 2d <func1+0x2d>
mov %esi,%eax
imul %ecx,%eax
imul %edx,%eax
mov %edi,%r10d
sub %eax,%r10d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %eax,%r9d
lea (%r9,%r10,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a5 - a2 + a3;
    }
    v8 = ((a3 + a5) + a2) * a1;
    if (v8 < a4)
    {
        v9 = (a1 - (a2 + a2)) * a2;
    }
    else
    {
        v9 = a1 - ((a2 * a4) * a3);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 9
4 10
5 10
6 12
7 12
8 12
9 12
10 12
11 16
12 16
13 16
14 16
15 16
16 18
17 18
18 18
19 18
20 18
21 18
22 19
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
lea 0x1(%rcx,%rax,1),%eax
imul %edi,%esi
sub %ecx,%esi
add %edx,%esi
add %esi,%eax
sub %ecx,%edx
add %edx,%edi
add %edi,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (a1 < a3)
        {
            v6 += a2 * a5 + a2;
        }
        else
        {
            v6 += (a1 * a2) * a4;
        }
    }
    v8 = (a1 * a2) - a4 + a3;
    v9 = a3 - a4 + a1 + a5;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 18
5 16
6 16
7 16
8 18
9 17
10 17
11 17
12 18
13 19
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (a2 < a3)
        {
            v6 += a3 * a4 + a4;
        }
        else
        {
            v6 += a5 * a3 * a5;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        if (v8 < a3)
        {
            v8 += a3 + a4;
        }
        else
        {
            v8 += a4 - (a2 - a2);
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 28
2 28
3 28
4 28
5 29
<<<sep_out_sample>>>
cmp %esi,%edi
jge 10 <func1+0x10>
mov %ecx,%r10d
imul %edx,%r10d
sub %r8d,%r10d
jmp 17 <func1+0x17>
mov %edi,%r10d
imul %edx,%r10d
lea (%rcx,%r8,1),%r9d
cmp %r8d,%esi
jg 27 <func1+0x27>
mov %r8d,%r9d
imul %ecx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a1 < a2)
    {
        v6 = (a4 * a3) - a5;
    }
    else
    {
        v6 = a1 * a3;
    }
    if (a5 < a2)
    {
        v7 = (a4 + a4 + a5) - a4;
    }
    else
    {
        v7 = a5 * a4;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 14
10 12
11 12
12 18
13 18
14 20
15 20
16 20
17 20
18 20
19 20
20 21
<<<sep_out_sample>>>
lea (%rsi,%rdi,1),%eax
cmp %esi,%ecx
jge 13 <func1+0x13>
mov %r8d,%eax
imul %esi,%eax
imul %esi,%eax
add %r8d,%eax
add %edi,%edx
add %edx,%esi
add %r8d,%esi
add %esi,%ecx
add %ecx,%eax
add %edi,%r8d
imul %r8d,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a4 < a2)
    {
        v6 = a5 + (a5 * a2) * a2;
    }
    else
    {
        v6 = a2 + a1 + a4 - a4;
    }
    v7 = a1 * a1 + a5 * a1;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 6
7 6
8 13
9 13
10 13
11 13
12 13
13 12
14 12
15 13
16 14
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (a5 < a5)
        {
            v6 += a3 + a2 - a1;
        }
        else
        {
            v6 += (a1 + a4) - a5;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += a5 - a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 21
5 22
<<<sep_out_sample>>>
add %edi,%edx
lea (%rsi,%rdx,1),%eax
add %r8d,%eax
add %ecx,%eax
imul %esi,%r8d
add %eax,%r8d
add %r8d,%edx
imul %ecx,%esi
imul %esi,%ecx
lea (%rdx,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a2 * a5;
    v7 = a1 + a3;
    v8 = (a2 * a4) * a4;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 5
2 7
3 7
4 7
5 4
6 7
7 7
8 6
9 6
10 7
11 8
<<<sep_out_sample>>>
mov %ecx,%eax
sub %esi,%eax
mov %ecx,%r9d
cmp %eax,%edi
jg 1f <func1+0x1f>
mov %edx,%r9d
imul %esi,%r9d
imul %edi,%r9d
mov %esi,%r10d
sub %r9d,%r10d
mov %r10d,%r9d
add %r9d,%edi
add %edi,%edx
add %edx,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a3 - a3;
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += a1 * a3 * a4;
    }
    v9 = a4 - a2;
    if (v9 < a1)
    {
        v10 = (a3 - a3) + a4;
    }
    else
    {
        v10 = a2 - a3 * a2 * a1;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 13
4 11
5 11
6 17
7 17
8 17
9 17
10 17
11 17
12 19
13 19
14 19
15 19
16 19
17 19
18 20
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %r8d,%edx
lea 0x1(%rdx,%rcx,2),%eax
add %esi,%esi
mov %r8d,%edx
sub %esi,%edx
imul %edx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a4 - ((a5 - a5) * a5);
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        if (v7 < a2)
        {
            v7 += (a1 * a1) * a5;
        }
        else
        {
            v7 += a4 * a3;
        }
    }
    v9 = (a5 - (a2 + a2)) * a5;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 18
5 17
6 17
7 17
8 17
9 18
10 19
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a5 + a1 - a3;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        if (a4 < a5)
        {
            v8 += (a2 + a4) - a5;
        }
        else
        {
            v8 += a3 * a5 * a1;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 21
5 22
<<<sep_out_sample>>>
mov %edi,%eax
sub %ecx,%eax
lea 0x1(%rdi,%rax,1),%eax
add %eax,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (a5 < a2)
        {
            v6 += a4 + a1 * a1;
        }
        else
        {
            v6 += a2 * (a2 * a4);
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += a3 + a1 + a5;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a2)
    {
        v10 += a2 * a2;
    }
    v12 = a1 - a4;
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 26
2 26
3 27
4 27
5 27
6 27
7 27
8 28
<<<sep_out_sample>>>
test %r8d,%r8d
jle c <func1+0xc>
mov %edi,%eax
imul %edx,%eax
jmp 14 <func1+0x14>
lea (%r8,%rsi,1),%eax
imul %r8d,%eax
cmp %r8d,%eax
jge 1f <func1+0x1f>
lea (%rsi,%rsi,1),%r9d
jmp 29 <func1+0x29>
lea (%r8,%rdi,1),%r9d
sub %edx,%r9d
add %esi,%r9d
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %r8d,%esi
add %ecx,%esi
add %esi,%eax
add %r9d,%eax
mov %ecx,%edx
sub %edi,%edx
imul %edx,%r8d
add %r8d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (v6 < a5)
    {
        v6 = (a2 + a1 * a3) - a2;
    }
    else
    {
        v6 = (a5 * a5) + a5 * a2;
    }
    if (v6 < a5)
    {
        v7 = a2 + (a2 + (a5 - a5));
    }
    else
    {
        v7 = a5 + a1 - a3 + a2;
    }
    v8 = a4 + ((a4 - a1) * a5);
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        v9 += a3 - a2;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 12
9 12
10 14
11 14
12 18
13 18
14 18
15 26
16 26
17 26
18 26
19 26
20 26
21 20
22 20
23 20
24 20
25 26
26 27
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a2 - a5;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += a2 - a4 - a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 14
2 14
3 14
4 14
5 15
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%eax
add %r8d,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (a4 < a3)
        {
            v6 += a2 - a5 + a5;
        }
        else
        {
            v6 += a4 * a4 * a1;
        }
    }
    v8 = a5 + a1;
    v9 = 0;
    for (v10 = 0; v10++; v10<a1)
    {
        if (a3 < a5)
        {
            v9 += a4 - a2;
        }
        else
        {
            v9 += a1 - a2;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 29
2 29
3 29
4 29
5 16
6 29
7 30
<<<sep_out_sample>>>
lea (%r8,%rdx,1),%eax
lea (%rdx,%rcx,1),%r9d
cmp %r8d,%edx
cmovge %r9d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a3 < a5)
    {
        v6 = (a5 + a3) + a5 - a5;
    }
    else
    {
        v6 = a4 - a2 + a2 + a3;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += a1 * a4 + a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 17
6 17
7 17
8 17
9 17
10 18
<<<sep_out_sample>>>
lea (%rcx,%rdx,1),%r9d
sub %r8d,%r9d
mov %esi,%eax
sub %ecx,%eax
cmp %edi,%ecx
jle 15 <func1+0x15>
lea (%rsi,%rdi,2),%eax
add %r8d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a4 + a3 - a5;
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        if (a1 < a3)
        {
            v7 += a4 * a4 - a2;
        }
        else
        {
            v7 += a2 * a4 + a1;
        }
    }
    if (a1 < a4)
    {
        v9 = a1 + (a2 + a1) + a5;
    }
    else
    {
        v9 = a2 + a3 - a3 - a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 23
4 23
5 17
6 17
7 19
8 19
9 25
10 25
11 25
12 25
13 25
14 25
15 26
<<<sep_out_sample>>>
mov %edx,%eax
sub %edi,%eax
add %ecx,%eax
sub %edi,%eax
cmp %eax,%ecx
jle 15 <func1+0x15>
mov %r8d,%r9d
imul %esi,%r9d
jmp 1c <func1+0x1c>
mov %edi,%r9d
imul %edx,%r9d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%eax
lea 0x1(%r9,%rax,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a3 - a1 + a4 - a1;
    if (v6 < a4)
    {
        v7 = a5 * a2;
    }
    else
    {
        v7 = a1 * a3;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        if (a2 < a1)
        {
            v8 += a3 * (a4 - a5);
        }
        else
        {
            v8 += a2 - a2;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 5
6 5
7 7
8 7
9 7
10 11
11 11
12 25
13 25
14 25
15 25
16 25
17 25
18 26
<<<sep_out_sample>>>
cmp %edi,%ecx
jge c <func1+0xc>
mov %r8d,%r9d
sub %edx,%r9d
jmp 17 <func1+0x17>
lea -0x1(%rdi),%r9d
imul %edx,%r9d
sub %edi,%r9d
mov %esi,%eax
sub %ecx,%eax
cmp %r8d,%r9d
jge 29 <func1+0x29>
mov %edi,%eax
sub %esi,%eax
add %r8d,%eax
sub %edx,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a4 < a1)
    {
        v6 = a5 - (a1 - a1) - a3;
    }
    else
    {
        v6 = (a1 * a3 - a3) - a1;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        if (a5 < a5)
        {
            v7 += a5 - (a5 - a3);
        }
        else
        {
            v7 += a5 + a1;
        }
    }
    if (v6 < a5)
    {
        v9 = (a1 - a2 + a5) - a3;
    }
    else
    {
        v9 = a2 - a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 30
10 30
11 24
12 24
13 26
14 26
15 26
16 26
17 32
18 32
19 32
20 32
21 32
22 32
23 33
<<<sep_out_sample>>>
lea (%rcx,%rsi,1),%r9d
cmp %edi,%esi
jl 1c <func1+0x1c>
mov %edx,%r10d
imul %edi,%r10d
mov $0x1,%r9d
sub %r10d,%r9d
imul %r8d,%r9d
lea (%rsi,%rdi,2),%eax
test %edx,%edx
jg 2e <func1+0x2e>
mov %r8d,%eax
imul %edx,%eax
imul %esi,%eax
add %ecx,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a2 < a1)
    {
        v6 = a4 + a2;
    }
    else
    {
        v6 = a5 - a3 * a1 * a5;
    }
    if (v7 < a3)
    {
        v7 = (a1 + a1) + a2;
    }
    else
    {
        v7 = a2 * (a5 * a3) + a4;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 4
3 4
4 10
5 10
6 10
7 10
8 10
9 14
10 12
11 12
12 18
13 18
14 18
15 18
16 20
17 20
18 20
19 20
20 20
21 20
22 21
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
lea 0x1(%rcx,%rax,1),%edx
mov %r8d,%eax
sub %esi,%eax
add %eax,%r8d
sub %edi,%r8d
lea (%rdx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (a5 < a1)
        {
            v6 += a4 + a5;
        }
        else
        {
            v6 += (a5 * a1) + a1;
        }
    }
    v8 = a5 - a2 + a5 - a1;
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        v9 += a2 - a4 * a3;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 22
4 22
5 16
6 16
7 16
8 16
9 22
10 23
<<<sep_out_sample>>>
lea 0x1(%r8),%r10d
imul %ecx,%r10d
imul %r8d,%r10d
mov %ecx,%r9d
sub %esi,%r9d
cmp %edi,%ecx
jl 1d <func1+0x1d>
lea (%rsi,%rdi,2),%r9d
add %esi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = (a4 + a4 * a5) * a5;
    if (a4 < a1)
    {
        v7 = a4 - a2;
    }
    else
    {
        v7 = a2 + (a1 + a1 + a2);
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 7
5 7
6 5
7 5
8 11
9 11
10 13
11 13
12 13
13 13
14 13
15 13
16 14
<<<sep_out_sample>>>
mov %edi,%r10d
sub %edx,%r10d
sub %ecx,%r10d
add %edi,%r10d
mov %edi,%eax
sub %r8d,%eax
lea (%rdi,%rdi,1),%r9d
test %edi,%edi
cmovg %eax,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a1 + (a1 - a3 - a4);
    if (v7 < a1)
    {
        v7 = a1 - (a4 - a4 + a5);
    }
    else
    {
        v7 = a1 + a1;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 7
6 7
7 7
8 7
9 7
10 13
11 13
12 13
13 13
14 13
15 13
16 14
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a4 - a3;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        if (a2 < a4)
        {
            v8 += a2 * a2 * a4;
        }
        else
        {
            v8 += (a3 * a4) + a2;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 21
5 22
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %r8d,%edx
lea 0x1(%rcx,%rdx,1),%edx
imul %esi,%edi
imul %edi,%esi
sub %r8d,%esi
lea (%rdx,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (a1 < a2)
        {
            v6 += a1 - a5 + a1;
        }
        else
        {
            v6 += a3 * (a3 + a3);
        }
    }
    v8 = (a1 * a2 * a2) - a5;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 16
6 16
7 16
8 17
9 18
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
mov $0x1,%r9d
sub %esi,%r9d
imul %r9d,%ecx
add %ecx,%edx
add %eax,%edx
sub %edi,%esi
imul %r8d,%edi
sub %edi,%esi
lea 0x1(%rdx,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a4 - a2 * a4 + a3;
    v7 = a2 - a1 - a1 * a5;
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        if (a1 < a1)
        {
            v8 += a2 * a5;
        }
        else
        {
            v8 += a1 - a1 - a4;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 18
5 4
6 4
7 4
8 4
9 18
10 5
11 5
12 5
13 18
14 19
<<<sep_out_sample>>>
mov %esi,%r10d
imul %ecx,%r10d
sub %r8d,%r10d
add %esi,%r10d
cmp %r8d,%ecx
jge 1f <func1+0x1f>
lea 0x1(%rsi),%r9d
imul %r8d,%r9d
sub %edx,%r9d
jmp 2b <func1+0x2b>
lea (%rdx,%rsi,1),%eax
mov %ecx,%r9d
sub %eax,%r9d
add %r8d,%r9d
cmp %ecx,%r9d
jge 40 <func1+0x40>
mov %esi,%eax
sub %edx,%eax
mov %edx,%r11d
imul %r8d,%r11d
sub %r11d,%eax
jmp 4b <func1+0x4b>
mov %edi,%eax
imul %r8d,%eax
imul %edi,%eax
sub %esi,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r10d,%ecx
add %ecx,%r9d
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = (a2 * a4) - a5 + a2;
    if (a4 < a5)
    {
        v7 = (a2 * a5 + a5) - a3;
    }
    else
    {
        v7 = a5 + (a4 - (a3 + a2));
    }
    if (v7 < a4)
    {
        v8 = (a2 - a3) - a3 * a5;
    }
    else
    {
        v8 = a1 * a5 * a1 - a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 5
6 5
7 7
8 7
9 7
10 7
11 11
12 11
13 11
14 11
15 13
16 13
17 15
18 15
19 15
20 15
21 15
22 15
23 19
24 19
25 19
26 19
27 21
28 21
29 21
30 21
31 21
32 21
33 21
34 22
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %edx,%r8d
lea (%r8,%rcx,1),%edx
mov %edi,%eax
sub %esi,%eax
lea 0x1(%rdx,%rax,1),%eax
add %ecx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a1 - a2;
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        if (v8 < a4)
        {
            v7 += (a1 * a5) + a2;
        }
        else
        {
            v7 += (a4 + a5) + a3;
        }
    }
    v9 = a1 + a4;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 18
5 4
6 4
7 18
8 17
9 18
10 19
<<<sep_out_sample>>>
mov %edi,%eax
sub %r8d,%eax
cmp %r8d,%esi
jge 14 <func1+0x14>
mov %esi,%eax
sub %edx,%eax
add $0x1,%eax
imul %edi,%eax
lea 0x1(%rdi,%rdx,1),%r9d
add %r9d,%esi
add %esi,%r8d
add %ecx,%r8d
add %r8d,%eax
mov %edi,%r9d
imul %ecx,%r9d
add $0x1,%r9d
imul %edi,%r9d
add %r9d,%eax
imul %edx,%edi
add %edi,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a2 < a5)
    {
        v6 = a1 - (a1 * (a3 - a2));
    }
    else
    {
        v6 = a1 - a5;
    }
    v7 = a1 + (a1 * a4 * a1);
    v8 = a4 + a1 * a3;
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        if (a1 < a4)
        {
            v9 += (a4 - a1) + a4;
        }
        else
        {
            v9 += a4 + a5 * a1;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 4
4 4
5 6
6 6
7 6
8 6
9 26
10 26
11 26
12 26
13 26
14 12
15 12
16 12
17 12
18 26
19 13
20 13
21 26
22 27
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (a3 < a1)
        {
            v6 += a1 - a4 - a2;
        }
        else
        {
            v6 += a2 + a2 + a1;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        if (a2 < a4)
        {
            v8 += a1 + a1 * a4;
        }
        else
        {
            v8 += (a5 + a4) + a1;
        }
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a1)
    {
        if (v7 < a5)
        {
            v10 += a2 * (a5 * a1);
        }
        else
        {
            v10 += a3 * a5;
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 40
2 40
3 40
4 40
5 41
<<<sep_out_sample>>>
mov %esi,%eax
sub %edx,%eax
test %ecx,%ecx
jle 10 <func1+0x10>
lea (%rdi,%r8,1),%eax
sub %esi,%eax
sub %edx,%eax
add %edi,%edx
add %edx,%esi
add %r8d,%esi
add %esi,%ecx
add %ecx,%eax
imul %r8d,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (v6 < a4)
    {
        v6 = (a1 + a5 - a2) - a3;
    }
    else
    {
        v6 = a2 - a3;
    }
    v7 = a5 * a5;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 10
2 10
3 4
4 4
5 6
6 6
7 6
8 13
9 13
10 13
11 13
12 13
13 12
14 13
15 14
<<<sep_out_sample>>>
mov %ecx,%r9d
imul %ecx,%r9d
add %esi,%r9d
add %edi,%r9d
lea (%r8,%rsi,1),%eax
mov %esi,%r10d
imul %r8d,%r10d
cmp %r8d,%edx
cmovl %r10d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %r9d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += (a1 - a1) * a3;
    }
    v8 = a1 + (a4 * a4 + a2);
    if (a3 < a5)
    {
        v9 = a2 * a5;
    }
    else
    {
        v9 = a5 + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 9
4 9
5 16
6 12
7 12
8 12
9 12
10 18
11 18
12 18
13 18
14 18
15 18
16 19
<<<sep_out_sample>>>
lea (%rdi,%rdi,1),%eax
test %edi,%edi
jle 10 <func1+0x10>
imul %edi,%ecx
sub %r8d,%ecx
lea (%rcx,%rsi,1),%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%eax
sub %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (v6 < a1)
    {
        v6 = a2 + (a4 * a1 - a5);
    }
    else
    {
        v6 = a1 + a1;
    }
    v7 = a3 - a3 - a1 - a4;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 6
7 13
8 13
9 13
10 12
11 13
12 14
<<<sep_out_sample>>>
mov %edx,%r9d
sub %r8d,%r9d
cmp $0x1,%esi
jle 18 <func1+0x18>
mov %ecx,%eax
sub %edx,%eax
imul %ecx,%eax
imul %r8d,%eax
jmp 1d <func1+0x1d>
lea (%rcx,%rsi,1),%eax
add %edi,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a1 < a1)
    {
        v6 = a2 + a5;
    }
    else
    {
        v6 = a3 - a5;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        if (a3 < a5)
        {
            v7 += (a2 - a1) + a5;
        }
        else
        {
            v7 += a2 - a3 + a5;
        }
    }
    if (v8 < a2)
    {
        v9 = a4 * (a4 - a3) * a5;
    }
    else
    {
        v9 = a4 + a2 + a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 24
4 24
5 26
6 26
7 26
8 26
9 26
10 30
11 30
12 32
13 32
14 32
15 32
16 32
17 32
18 33
<<<sep_out_sample>>>
lea (%rdx,%rdi,1),%eax
cmp %esi,%r8d
jge 16 <func1+0x16>
mov %edx,%eax
sub %edi,%eax
mov %edi,%r9d
imul %edi,%r9d
sub %r9d,%eax
add %edx,%edi
add %esi,%edi
add %edi,%r8d
add %r8d,%ecx
add %ecx,%eax
sub %esi,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a5 < a2)
    {
        v6 = (a3 - a1) - a1 * a1;
    }
    else
    {
        v6 = a1 - a2 + a2 + a3;
    }
    v7 = a3 - a3 - a2 + a3;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 6
7 6
8 6
9 13
10 13
11 13
12 13
13 13
14 12
15 13
16 14
<<<sep_out_sample>>>
cmp %edx,%edi
jge d <func1+0xd>
mov %r8d,%eax
sub %ecx,%eax
sub %esi,%eax
jmp 1e <func1+0x1e>
mov %edx,%r9d
imul %edi,%r9d
mov %r8d,%eax
imul %r8d,%eax
add %r9d,%eax
add %edi,%edx
add %esi,%edx
add %edx,%r8d
add %r8d,%ecx
add %eax,%ecx
sub %edi,%esi
lea 0x1(%rcx,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a1 < a3)
    {
        v6 = (a5 - a4) - a2;
    }
    else
    {
        v6 = a3 * a1 + a5 * a5;
    }
    v7 = a2 - a1;
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += a5 - (a4 * a1);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 10
11 10
12 18
13 18
14 18
15 18
16 18
17 12
18 18
19 19
<<<sep_out_sample>>>
mov %r8d,%eax
sub %ecx,%eax
mov %r8d,%r9d
imul %esi,%r9d
cmp %edx,%edi
cmovl %r9d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a1 < a3)
    {
        v6 = a5 * a2;
    }
    else
    {
        v6 = a5 - a4;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        if (v7 < a3)
        {
            v7 += a1 * (a3 + a3);
        }
        else
        {
            v7 += a5 * (a5 + a5);
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 6
4 6
5 6
6 6
7 24
8 24
9 24
10 24
11 24
12 25
<<<sep_out_sample>>>
cmp %esi,%ecx
jge 18 <func1+0x18>
mov %edi,%r9d
imul %esi,%r9d
mov $0x1,%eax
sub %r9d,%eax
imul %ecx,%eax
jmp 21 <func1+0x21>
mov %edi,%eax
imul %ecx,%eax
add %edx,%eax
add %edi,%eax
add %edx,%edi
add %edi,%esi
add %r8d,%esi
add %esi,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a4 < a2)
    {
        v6 = a4 - a1 * a2 * a4;
    }
    else
    {
        v6 = (a1 * a4) + a3 + a1;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += (a1 - a2) * a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 6
9 10
10 10
11 10
12 10
13 17
14 17
15 17
16 17
17 17
18 18
<<<sep_out_sample>>>
cmp %edx,%ecx
jge 11 <func1+0x11>
lea (%r8,%r8,1),%r9d
sub %edi,%r9d
imul %edx,%r9d
jmp 20 <func1+0x20>
mov %edi,%r9d
imul %edx,%r9d
add $0x1,%r9d
imul %edx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
sub %edi,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a4 < a3)
    {
        v6 = a3 * ((a5 + a5) - a1);
    }
    else
    {
        v6 = a3 + (a1 * a3) * a3;
    }
    if (a2 < a2)
    {
        v7 = a1 - a1;
    }
    else
    {
        v7 = a5 - a1;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 10
11 20
12 20
13 20
14 20
15 20
16 18
17 20
18 21
<<<sep_out_sample>>>
cmp %edi,%esi
jge c <func1+0xc>
mov %edi,%eax
neg %eax
sub %edi,%eax
jmp 13 <func1+0x13>
lea (%rdx,%rsi,1),%eax
lea (%rax,%r8,2),%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a2 < a1)
    {
        v6 = a3 - a1 - (a3 + a1);
    }
    else
    {
        v6 = (a3 + a2 + a5) + a5;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        if (a2 < a4)
        {
            v7 += a2 * (a1 - a5);
        }
        else
        {
            v7 += a3 - a3 - a2;
        }
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        v9 += a2 * a3;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 29
10 29
11 29
12 29
13 29
14 30
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
add %r8d,%ecx
lea 0x1(%rcx,%rsi,2),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a4 < a4)
    {
        v6 = (a3 * a2 + a3) * a5;
    }
    else
    {
        v6 = (a1 + a2 - a1) + a2;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += a3 - a5 - a2;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        if (v9 < a1)
        {
            v9 += a5 - a3 * a4;
        }
        else
        {
            v9 += a3 + (a4 + a1);
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 29
2 29
3 29
4 29
5 29
6 30
<<<sep_out_sample>>>
mov %edx,%eax
neg %eax
lea (%rdi,%rdi,1),%r9d
cmp %edi,%r8d
cmovl %eax,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
mov %ecx,%edi
sub %esi,%edi
add %edi,%eax
imul %edx,%esi
add %esi,%r8d
sub %r8d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a5 < a1)
    {
        v6 = a5 - a5 - a3;
    }
    else
    {
        v6 = a1 + a1;
    }
    if (a4 < a4)
    {
        v7 = a4 + a1;
    }
    else
    {
        v7 = a4 - a2;
    }
    v8 = a4 - (a3 * a2 + a5);
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 6
6 21
7 21
8 21
9 21
10 21
11 18
12 18
13 21
14 20
15 20
16 20
17 21
18 22
<<<sep_out_sample>>>
test %edx,%edx
jle 13 <func1+0x13>
mov %edx,%r10d
imul %edx,%r10d
add %edi,%r10d
sub %esi,%r10d
jmp 1f <func1+0x1f>
lea (%rdx,%rdi,1),%eax
mov %ecx,%r10d
sub %eax,%r10d
add %r8d,%r10d
cmp %ecx,%esi
jle 33 <func1+0x33>
mov %edi,%r9d
imul %ecx,%r9d
imul %r8d,%r9d
add %ecx,%r9d
jmp 3d <func1+0x3d>
mov %esi,%r9d
imul %edi,%r9d
add %r8d,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (v6 < a3)
    {
        v6 = (a3 * a3) + a1 - a2;
    }
    else
    {
        v6 = a4 - (a3 + a1) + a5;
    }
    if (a4 < a2)
    {
        v7 = a4 + (a1 * a4) * a5;
    }
    else
    {
        v7 = a5 + (a2 * a1);
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 12
13 12
14 14
15 14
16 14
17 14
18 14
19 18
20 18
21 18
22 20
23 20
24 20
25 20
26 20
27 20
28 21
<<<sep_out_sample>>>
cmp %r8d,%edx
jge d <func1+0xd>
lea (%rsi,%rdi,2),%eax
sub %r8d,%eax
jmp 17 <func1+0x17>
lea (%rdi,%r8,1),%eax
imul %edx,%eax
imul %esi,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (a2 < a3)
        {
            v6 += a4 - a4 * a1;
        }
        else
        {
            v6 += (a5 * a4) - a2;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += a3 * a5;
    }
    if (a3 < a5)
    {
        v10 = ((a1 - a5) + a1) + a2;
    }
    else
    {
        v10 = (a3 * (a1 + a5)) * a2;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 23
4 23
5 23
6 27
7 27
8 27
9 29
10 29
11 29
12 29
13 29
14 30
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %r8d,%esi
add %ecx,%esi
lea 0x1(%rcx),%eax
imul %edx,%eax
imul %edx,%eax
add %eax,%esi
sub %r8d,%edx
sub %ecx,%edx
lea 0x1(%rsi,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a3 < a3)
    {
        v6 = a2 + a2;
    }
    else
    {
        v6 = (a3 + a4 * a3) * a3;
    }
    v7 = (a3 - a5) - a4;
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += (a3 * a1) * a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 18
5 10
6 10
7 10
8 18
9 12
10 12
11 18
12 19
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (a5 < a3)
        {
            v6 += a3 * a5 * a3;
        }
        else
        {
            v6 += a2 * a2;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        if (v7 < a4)
        {
            v8 += a4 - a3 + a1;
        }
        else
        {
            v8 += a1 * a1 * a1;
        }
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a5)
    {
        v10 += a2 * a4 * a4;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 33
2 33
3 33
4 33
5 34
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %eax,%ecx
sub %edi,%r8d
lea (%r8,%rsi,2),%eax
lea 0x1(%rcx,%rax,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = (a5 - a1) + a2 + a2;
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += a5 + a5 * a2;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a1)
    {
        v9 += (a5 - a5) * a2;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 15
2 15
3 15
4 15
5 4
6 4
7 15
8 16
<<<sep_out_sample>>>
cmp $0x1,%edi
jle 10 <func1+0x10>
lea (%rdx,%rcx,1),%eax
imul %ecx,%eax
imul %edi,%eax
jmp 1b <func1+0x1b>
mov %r8d,%eax
sub %edi,%eax
imul %ecx,%eax
imul %edi,%eax
add %edx,%edi
add %esi,%edi
add %r8d,%edi
lea 0x1(%rcx,%rdi,1),%edi
lea (%rdi,%rax,1),%ecx
imul %esi,%r8d
sub %edx,%r8d
lea (%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (v6 < a5)
        {
            v6 += a2 + a1 + a5;
        }
        else
        {
            v6 += (a1 * a4) - a3;
        }
    }
    if (v7 < a1)
    {
        v8 = ((a3 + a4) * a4) * a1;
    }
    else
    {
        v8 = ((a5 - a1) * a4) * a1;
    }
    v9 = a5 * a2 - a3;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 18
7 22
8 22
9 22
10 22
11 25
12 25
13 25
14 25
15 25
16 24
17 24
18 25
19 26
<<<sep_out_sample>>>
test %edx,%edx
jle 15 <func1+0x15>
mov %edx,%r10d
imul %edx,%r10d
imul %ecx,%r10d
imul %r8d,%r10d
jmp 23 <func1+0x23>
mov %ecx,%r10d
imul %esi,%r10d
lea (%rdi,%rsi,1),%r9d
sub %r9d,%r10d
cmp %esi,%r8d
jle 35 <func1+0x35>
lea (%rdx,%r8,1),%r9d
imul %esi,%r9d
sub %ecx,%r9d
jmp 40 <func1+0x40>
lea (%r8,%r8,1),%r9d
imul %edx,%r9d
sub %esi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (v6 < a3)
    {
        v6 = a4 * (a3 * a3) * a5;
    }
    else
    {
        v6 = a4 * a2 - (a1 + a2);
    }
    if (a2 < a5)
    {
        v7 = ((a3 + a5) * a2) - a4;
    }
    else
    {
        v7 = ((a5 + a5) * a3) - a2;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 12
13 12
14 14
15 14
16 14
17 14
18 18
19 18
20 18
21 20
22 20
23 20
24 20
25 20
26 20
27 21
<<<sep_out_sample>>>
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea (%r8,%rcx,1),%esi
lea 0x1(%rsi,%rdi,2),%eax
imul %ecx,%edi
sub %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a1 + a1;
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        if (a5 < a4)
        {
            v7 += a3 - a5;
        }
        else
        {
            v7 += a4 - a1 * a1;
        }
    }
    v9 = (a1 - a1) - (a1 * a4);
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 18
5 18
6 17
7 18
8 19
<<<sep_out_sample>>>
lea (%rcx,%rdi,2),%r9d
cmp %edi,%edx
jl f <func1+0xf>
mov %edx,%r9d
imul %r8d,%r9d
mov %edi,%eax
sub %ecx,%eax
test %ecx,%ecx
jle 23 <func1+0x23>
mov %edx,%eax
sub %r8d,%eax
lea (%rdi,%rcx,1),%r10d
sub %r10d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a3 < a1)
    {
        v6 = (a1 + a4) + a1;
    }
    else
    {
        v6 = a3 * a5;
    }
    if (v7 < a4)
    {
        v7 = a3 - a5 - (a1 + a4);
    }
    else
    {
        v7 = a1 - a4;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        if (a5 < a2)
        {
            v8 += (a4 * a3) - a4;
        }
        else
        {
            v8 += a5 - a2;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 4
3 4
4 10
5 10
6 18
7 18
8 12
9 12
10 14
11 14
12 14
13 14
14 32
15 32
16 32
17 32
18 32
19 32
20 33
<<<sep_out_sample>>>
mov $0x0,%r9d
test %ecx,%ecx
jg 18 <func1+0x18>
mov %esi,%eax
imul %edx,%eax
mov %edi,%r9d
sub %eax,%r9d
add %ecx,%r9d
cmp %edi,%esi
jge 28 <func1+0x28>
mov %ecx,%r10d
sub %esi,%r10d
imul %edx,%r10d
jmp 37 <func1+0x37>
mov %ecx,%eax
imul %edx,%eax
mov %edi,%r10d
sub %eax,%r10d
imul %ecx,%r10d
add %edx,%edi
add %edi,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%eax
add %eax,%r9d
lea (%r9,%r10,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a2 * a3 * a3;
    }
    if (v8 < a4)
    {
        v8 = a3 - a3;
    }
    else
    {
        v8 = a1 - a2 * a3 + a4;
    }
    if (a2 < a1)
    {
        v9 = a3 * (a4 - a2);
    }
    else
    {
        v9 = (a1 - (a4 * a3)) * a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 9
3 9
4 15
5 15
6 15
7 15
8 15
9 17
10 17
11 19
12 19
13 19
14 19
15 23
16 23
17 23
18 23
19 23
20 25
21 25
22 25
23 25
24 25
25 25
26 26
<<<sep_out_sample>>>
cmp $0x1,%ecx
jle e <func1+0xe>
lea (%r8,%rcx,1),%eax
lea (%rax,%rsi,2),%eax
jmp 1a <func1+0x1a>
mov %ecx,%eax
imul %r8d,%eax
add %edi,%eax
imul %r8d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (a2 < a2)
        {
            v6 += a4 - a5;
        }
        else
        {
            v6 += a3 * a2;
        }
    }
    if (v7 < a4)
    {
        v8 = a5 + a4 + a2 + a2;
    }
    else
    {
        v8 = ((a4 * a5) + a1) * a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 22
7 22
8 22
9 22
10 24
11 24
12 24
13 24
14 24
15 25
<<<sep_out_sample>>>
test %r8d,%r8d
jle 14 <func1+0x14>
mov %edi,%r9d
sub %esi,%r9d
sub %r8d,%r9d
imul %edi,%r9d
jmp 24 <func1+0x24>
mov $0x1,%r9d
sub %edi,%r9d
imul %r8d,%r9d
add %edx,%r9d
lea (%r8,%r8,1),%eax
cmp %ecx,%esi
jge 34 <func1+0x34>
mov %esi,%eax
sub %edx,%eax
lea (%rax,%r8,2),%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (v6 < a5)
    {
        v6 = (a1 - a2 - a5) * a1;
    }
    else
    {
        v6 = a3 - (a5 * a1 - a5);
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        if (a3 < a3)
        {
            v7 += a3 - a1;
        }
        else
        {
            v7 += a4 + a3 + a4;
        }
    }
    if (a2 < a4)
    {
        v9 = a2 - a3 + a5 + a5;
    }
    else
    {
        v9 = a5 + a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 30
13 24
14 24
15 26
16 26
17 26
18 32
19 32
20 32
21 32
22 32
23 32
24 33
<<<sep_out_sample>>>
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
lea (%rcx,%rdi,1),%eax
imul %ecx,%edi
sub %edi,%eax
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += (a1 + a1) * a5;
    }
    v8 = a4 + a1 - a4 * a1;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 9
6 9
7 9
8 10
9 11
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %r8d,%edx
add %edx,%ecx
imul %edi,%edi
sub %esi,%edi
add %edi,%r8d
lea 0x1(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a1 * a1 - a2 + a5;
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += a5 - a2 * a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 4
6 4
7 4
8 10
9 11
<<<sep_out_sample>>>
lea (%rdi,%rdi,1),%r9d
cmp $0x1,%edx
jle 14 <func1+0x14>
mov %ecx,%eax
sub %edx,%eax
add %r8d,%eax
sub %edx,%eax
jmp 1a <func1+0x1a>
mov %edx,%eax
imul %r8d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %r9d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += (a4 + a1) + a2;
    }
    v8 = a1 + a1;
    if (v7 < a3)
    {
        v9 = ((a4 - a3) + a5) - a3;
    }
    else
    {
        v9 = a3 * a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 10
3 10
4 12
5 12
6 12
7 12
8 12
9 16
10 16
11 18
12 18
13 18
14 18
15 18
16 18
17 19
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
lea (%rdi,%rsi,1),%r9d
sub %r9d,%eax
sub %esi,%ecx
imul %ecx,%edi
add %edi,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a3 - ((a1 + a2) + a3);
    v7 = a5 + (a1 * (a4 - a2));
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 6
7 5
8 5
9 5
10 6
11 7
<<<sep_out_sample>>>
mov %edx,%r9d
imul %edx,%r9d
add %esi,%r9d
sub %ecx,%r9d
cmp %edi,%edx
jge 18 <func1+0x18>
mov %ecx,%eax
imul %edx,%eax
jmp 22 <func1+0x22>
mov %ecx,%eax
sub %r8d,%eax
imul %esi,%eax
add %edi,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a2 + a3 * a3 - a4;
    if (a3 < a1)
    {
        v7 = a4 * a3;
    }
    else
    {
        v7 = (a2 * (a4 - a5)) + a1;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += (a2 * a2) + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 5
6 5
7 7
8 7
9 7
10 11
11 11
12 11
13 11
14 18
15 18
16 18
17 18
18 18
19 18
20 19
<<<sep_out_sample>>>
cmp %ecx,%r8d
jge 17 <func1+0x17>
mov %edi,%eax
imul %ecx,%eax
mov %r8d,%r10d
sub %eax,%r10d
mov %r10d,%eax
add %edx,%eax
jmp 26 <func1+0x26>
mov %edi,%eax
imul %r8d,%eax
mov %edx,%r9d
sub %eax,%r9d
mov %r9d,%eax
lea 0x1(%rax,%rdi,1),%eax
add %eax,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a3 * a5 - a2;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += a4 - a3 + a4;
    }
    if (a5 < a4)
    {
        v10 = a3 - ((a1 * a4) - a5);
    }
    else
    {
        v10 = a3 - (a1 * a5);
    }
    v11 = 0;
    for (v12 = 0; v12++; v12<a5)
    {
        if (v7 < a1)
        {
            v11 += (a4 * a5) * a2;
        }
        else
        {
            v11 += (a1 - a1) - a2;
        }
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 14
2 14
3 16
4 16
5 16
6 16
7 16
8 16
9 16
10 20
11 20
12 20
13 20
14 20
15 34
16 34
17 34
18 34
19 34
20 35
<<<sep_out_sample>>>
cmp %edi,%edx
jle 16 <func1+0x16>
mov %edi,%r10d
sub %esi,%r10d
mov %edx,%r9d
imul %edi,%r9d
sub %r9d,%r10d
jmp 26 <func1+0x26>
mov $0x1,%r10d
sub %r8d,%r10d
imul %edi,%r10d
add %esi,%r10d
cmp %ecx,%edi
jle 3d <func1+0x3d>
lea (%rdx,%rdx,1),%r11d
mov $0x1,%r9d
sub %r11d,%r9d
imul %esi,%r9d
jmp 48 <func1+0x48>
lea 0x1(%rdi),%r9d
imul %ecx,%r9d
sub %edx,%r9d
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += (a5 - a5) + a3;
    }
    if (a1 < a3)
    {
        v8 = (a1 - a2) - a3 * a1;
    }
    else
    {
        v8 = a1 - a5 * a1 + a2;
    }
    if (a4 < a1)
    {
        v9 = a2 - a2 * (a3 + a3);
    }
    else
    {
        v9 = a4 + a1 * a4 - a3;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a2)
    {
        if (a2 < a4)
        {
            v10 += a4 * a3 - a4;
        }
        else
        {
            v10 += a4 * a2 + a2;
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 11
8 11
9 15
10 15
11 15
12 15
13 17
14 17
15 19
16 19
17 19
18 19
19 19
20 23
21 23
22 23
23 37
24 37
25 37
26 37
27 37
28 37
29 38
<<<sep_out_sample>>>
cmp %ecx,%edi
jge 13 <func1+0x13>
mov %edi,%r11d
imul %edi,%r11d
lea (%rdi,%rsi,1),%eax
add %eax,%r11d
jmp 24 <func1+0x24>
mov $0x1,%r11d
sub %esi,%r11d
imul %edx,%r11d
imul %edx,%r11d
lea (%rcx,%rsi,1),%r10d
mov %r8d,%r9d
sub %ecx,%r9d
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a1 < a4)
    {
        v6 = a1 * a1 + (a1 + a2);
    }
    else
    {
        v6 = a3 * (a3 - a2 * a3);
    }
    v7 = a4 + (a5 + a2 - a5);
    if (a3 < a5)
    {
        v8 = a5 - a4;
    }
    else
    {
        v8 = (a5 - a4) + a3 - a3;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        if (a5 < a1)
        {
            v9 += a2 * a3 - a2;
        }
        else
        {
            v9 += (a3 * a4) - a2;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 12
13 19
14 19
15 33
16 33
17 33
18 33
19 33
20 33
21 33
22 34
<<<sep_out_sample>>>
cmp %esi,%edi
jge 11 <func1+0x11>
lea (%rcx,%rcx,1),%r9d
imul %esi,%r9d
add %edi,%r9d
jmp 20 <func1+0x20>
mov %edi,%eax
imul %r8d,%eax
imul %ecx,%eax
mov %esi,%r9d
sub %eax,%r9d
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
add %edi,%ecx
imul %ecx,%edi
add %edi,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a1 < a2)
    {
        v6 = a1 + (a4 + a4) * a2;
    }
    else
    {
        v6 = a2 - a1 * a5 * a4;
    }
    v7 = a2 + (a4 + a1) * a1;
    v8 = a1 * a3 * (a1 - a1);
    v9 = 0;
    for (v10 = 0; v10++; v10<a1)
    {
        v9 += a4 * a5 - a1;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 10
11 10
12 19
13 19
14 19
15 19
16 19
17 12
18 12
19 12
20 19
21 20
<<<sep_out_sample>>>
mov %esi,%r10d
imul %ecx,%r10d
mov %ecx,%r9d
sub %esi,%r9d
cmp $0x1,%edx
jle 1a <func1+0x1a>
lea (%r8,%rdx,1),%r9d
imul %edi,%r9d
lea 0x1(%r9,%rdi,1),%eax
add %eax,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %r10d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += (a1 - a5) + a1;
    }
    v8 = a1 + a2 * a4 - a1;
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        v9 += a2 + (a2 + a4);
    }
    if (v7 < a3)
    {
        v11 = a5 * a1 + a3 * a1;
    }
    else
    {
        v11 = (a5 - a2 + a4) - a5;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 21
4 21
5 15
6 15
7 17
8 17
9 23
10 23
11 23
12 23
13 23
14 23
15 24
<<<sep_out_sample>>>
cmp %edx,%edi
jge c <func1+0xc>
mov %edi,%eax
sub %edx,%eax
add %edi,%eax
jmp 14 <func1+0x14>
lea (%r8,%rdx,2),%eax
imul %r8d,%eax
lea (%rdi,%rdx,1),%r9d
add %esi,%r9d
add %r9d,%r8d
add %r8d,%ecx
add %eax,%ecx
imul %edi,%edx
lea (%rdx,%rsi,2),%eax
lea 0x1(%rcx,%rax,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a1 < a3)
    {
        v6 = (a1 - a3) + a1;
    }
    else
    {
        v6 = a5 * ((a3 + a5) + a3);
    }
    v7 = a1 * a3 + a2 + a2;
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        if (v7 < a5)
        {
            v8 += a3 + a3 - a5;
        }
        else
        {
            v8 += a4 * a4 * a2;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 25
10 25
11 25
12 25
13 25
14 12
15 12
16 25
17 26
<<<sep_out_sample>>>
add %edx,%edi
add %esi,%edi
add %r8d,%edi
lea 0x1(%rcx,%rdi,1),%eax
imul %esi,%esi
imul %esi,%r8d
imul %r8d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (v7 < a3)
        {
            v6 += a1 + a5 + a1;
        }
        else
        {
            v6 += a1 * a2 - a2;
        }
    }
    v8 = a2 * a2 * a5 * a3;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 16
6 16
7 16
8 17
9 18
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
lea 0x1(%r8,%rax,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = (a3 - a3 - a2) - a4;
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        if (a3 < a2)
        {
            v7 += a4 + a2;
        }
        else
        {
            v7 += a5 - a1;
        }
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        v9 += a5 - (a4 - a5);
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 23
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x1(%rdi,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a3 * (a1 + a1);
    }
    v8 = a1 - a4;
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        if (a1 < a3)
        {
            v9 += a4 - a2 - a4;
        }
        else
        {
            v9 += (a1 * a4) + a1;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 22
4 22
5 23
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %eax,%ecx
mov $0x1,%eax
sub %edx,%eax
imul %eax,%r8d
lea 0x1(%rcx,%r8,1),%eax
imul %esi,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    if (a2 < a2)
    {
        v6 = (a3 - a3) * a4;
    }
    else
    {
        v6 = a5 - (a5 * a3);
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        if (a5 < a4)
        {
            v7 += a5 * a1;
        }
        else
        {
            v7 += a3 - a2;
        }
    }
    v9 = ((a2 + a3) - a3) * a3;
    v10 = 0;
    for (v11 = 0; v11++; v11<a5)
    {
        if (a3 < a4)
        {
            v10 += a2 * (a1 - a3);
        }
        else
        {
            v10 += (a2 + a4) + a5;
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 37
2 37
3 37
4 37
5 10
6 10
7 10
8 37
9 24
10 37
11 38
<<<sep_out_sample>>>
mov %ecx,%eax
imul %edi,%eax
sub %esi,%eax
add %edx,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a4 - a4;
    v7 = a4 * a1 - a2 + a3;
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        if (a1 < a2)
        {
            v8 += (a1 + a2) * a5;
        }
        else
        {
            v8 += a1 - a3 * a4;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 5
2 5
3 5
4 5
5 18
6 18
7 18
8 18
9 18
10 19
<<<sep_out_sample>>>
mov %ecx,%eax
sub %edi,%eax
sub %edx,%eax
add %ecx,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a2 + a3;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        if (a5 < a4)
        {
            v8 += a1 + a4 * a1;
        }
        else
        {
            v8 += (a4 + a4) * a4;
        }
    }
    v10 = a4 + (a4 - a1 - a3);
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 21
5 22
6 22
7 22
8 22
9 22
10 23
<<<sep_out_sample>>>
test %edi,%edi
jle b <func1+0xb>
lea (%rsi,%rcx,2),%eax
add %edi,%eax
jmp 14 <func1+0x14>
lea (%rcx,%rcx,1),%eax
imul %r8d,%eax
sub %ecx,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += (a1 + a3) + a1;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += a1 * a1 + a3;
    }
    if (v6 < a1)
    {
        v10 = (a4 + a2) + a4 + a1;
    }
    else
    {
        v10 = (a4 + a4) * a5 - a4;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 14
2 14
3 16
4 16
5 16
6 20
7 20
8 20
9 22
10 22
11 22
12 22
13 22
14 23
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
sub %ecx,%r8d
sub %edx,%r8d
lea (%rsi,%r8,1),%eax
imul %edi,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = ((a5 - a4) - a3) - a4;
    if (a4 < a4)
    {
        v7 = a3 + a5;
    }
    else
    {
        v7 = a1 * a3;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 13
2 13
3 13
4 4
5 4
6 13
7 11
8 13
9 14
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (a2 < a1)
        {
            v6 += a5 * a4;
        }
        else
        {
            v6 += a1 * a3;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += a1 + (a5 * a1);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 21
5 22
<<<sep_out_sample>>>
lea (%rdx,%rdi,1),%eax
add %eax,%esi
add %r8d,%esi
add %ecx,%esi
add %ecx,%eax
sub %edi,%eax
add %esi,%eax
imul %r8d,%ecx
add $0x1,%ecx
imul %ecx,%edx
lea 0x1(%rax,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a4 < a4)
    {
        v6 = a4 + a2;
    }
    else
    {
        v6 = a3 + a1 + a4 - a1;
    }
    v7 = (a5 * a4 * a3) + a3;
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        if (v6 < a3)
        {
            v8 += a2 - a2 * a5;
        }
        else
        {
            v8 += a5 * a5 - a3;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 25
3 25
4 25
5 10
6 10
7 25
8 12
9 12
10 12
11 25
12 26
<<<sep_out_sample>>>
lea 0x2(%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
lea 0x1(%rcx,%r8,1),%eax
imul %esi,%esi
imul %esi,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a5 + a1;
    }
    v8 = a2 * a2 * a1;
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        v9 += a2 - a3 - a4;
    }
    v11 = 0;
    for (v12 = 0; v12++; v12<a3)
    {
        v11 += (a2 * a1) + a3;
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 20
2 20
3 20
4 20
5 9
6 9
7 20
8 21
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%r9d
add %esi,%r9d
add %r8d,%r9d
add %ecx,%r9d
mov %ecx,%eax
sub %esi,%eax
imul %r8d,%eax
imul %edx,%eax
lea 0x1(%r9,%rax,1),%esi
imul %r8d,%edx
add %edx,%ecx
sub %edi,%ecx
lea (%rsi,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a5 * (a4 - a2) * a3;
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += a3 + a1;
    }
    v9 = a4 + a3 * a5 - a1;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 11
5 4
6 4
7 4
8 4
9 11
10 10
11 10
12 10
13 11
14 12
<<<sep_out_sample>>>
mov %edi,%r9d
neg %r9d
cmp %ecx,%esi
mov $0x0,%eax
cmovge %r9d,%eax
add %edx,%edi
add %edi,%esi
add %r8d,%esi
add %ecx,%esi
lea 0x1(%rax,%rsi,1),%esi
imul %edx,%ecx
add %ecx,%r8d
sub %edx,%r8d
lea (%rsi,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a2 < a4)
    {
        v6 = a4 - a4;
    }
    else
    {
        v6 = a4 - a4 - a1;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a4 + a3;
    }
    v9 = a3 * a4 + a5 - a3;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 10
6 18
7 18
8 18
9 18
10 18
11 17
12 17
13 17
14 18
15 19
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
test %edx,%edx
jle d <func1+0xd>
lea (%r8,%rdi,1),%eax
sub %esi,%eax
add %edx,%edi
add %edi,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%ecx
add %ecx,%eax
imul %r8d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (a2 < a5)
        {
            v6 += a5 + (a3 - a3);
        }
        else
        {
            v6 += a3 - (a4 * a4);
        }
    }
    if (v8 < a3)
    {
        v8 = (a5 + a1) - a2;
    }
    else
    {
        v8 = a1 + a3;
    }
    v9 = a5 * a3;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 16
3 16
4 18
5 18
6 25
7 25
8 25
9 25
10 25
11 24
12 25
13 26
<<<sep_out_sample>>>
cmp %esi,%edi
jge e <func1+0xe>
lea -0x1(%rdi),%eax
imul %esi,%eax
add %edi,%eax
jmp 1a <func1+0x1a>
mov $0x1,%eax
sub %esi,%eax
imul %edx,%eax
add %ecx,%eax
lea (%rdi,%rdx,1),%r9d
add %r9d,%esi
add %r8d,%esi
add %esi,%ecx
lea 0x1(%rax,%rcx,1),%ecx
mov %r8d,%eax
sub %edx,%eax
imul %r8d,%edi
sub %edi,%eax
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a1 < a2)
    {
        v6 = (a1 * a2 - a2) + a1;
    }
    else
    {
        v6 = a4 + (a3 - (a2 * a3));
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += a5 * a2 - a5;
    }
    v9 = (a5 - a3) - a5 * a1;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 10
11 18
12 18
13 18
14 18
15 18
16 17
17 17
18 17
19 17
20 18
21 19
<<<sep_out_sample>>>
mov %r8d,%r9d
sub %ecx,%r9d
lea (%rsi,%rdi,1),%eax
add %eax,%r9d
test %ecx,%ecx
jle 1e <func1+0x1e>
mov %r8d,%eax
imul %edi,%eax
imul %r8d,%eax
sub %ecx,%eax
jmp 27 <func1+0x27>
mov %esi,%eax
imul %edx,%eax
sub %edi,%eax
add %ecx,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = (a5 - a4) + (a2 + a1);
    if (v7 < a4)
    {
        v7 = (a5 * (a5 * a1)) - a4;
    }
    else
    {
        v7 = (a2 * a3 - a1) + a4;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 5
6 5
7 7
8 7
9 7
10 7
11 7
12 11
13 11
14 11
15 11
16 13
17 13
18 13
19 13
20 13
21 13
22 14
<<<sep_out_sample>>>
mov %edi,%eax
imul %ecx,%eax
imul %ecx,%eax
mov %edx,%r11d
sub %eax,%r11d
lea (%rsi,%rcx,1),%r10d
imul %r8d,%r10d
imul %esi,%r10d
lea (%rdi,%r8,1),%r9d
cmp %r8d,%edx
jg 2f <func1+0x2f>
mov %esi,%r9d
sub %r8d,%r9d
add %ecx,%r9d
sub %r8d,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a3 - (a1 * a4) * a4;
    v7 = (a2 + a4) * a5 * a2;
    if (a5 < a3)
    {
        v8 = a1 + a5;
    }
    else
    {
        v8 = (a4 - (a5 - a2)) - a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 4
6 5
7 5
8 5
9 8
10 6
11 6
12 12
13 12
14 12
15 12
16 14
17 14
18 14
19 14
20 14
21 14
22 14
23 15
<<<sep_out_sample>>>
push %rbx
cmp %edi,%edx
jge 13 <func1+0x13>
mov %edi,%r11d
sub %ecx,%r11d
sub %ecx,%r11d
add %esi,%r11d
jmp 22 <func1+0x22>
mov %edx,%r11d
imul %ecx,%r11d
imul %edi,%r11d
imul %edi,%r11d
mov %edi,%eax
imul %r8d,%eax
imul %edi,%eax
sub %ecx,%eax
mov %edx,%r10d
imul %ecx,%r10d
mov %r8d,%r9d
cmp %edi,%edx
jle 47 <func1+0x47>
imul %edx,%r9d
mov %esi,%ebx
sub %r9d,%ebx
mov %ebx,%r9d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r11d,%ecx
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a3 < a1)
    {
        v6 = a2 + ((a1 - a4) - a4);
    }
    else
    {
        v6 = ((a3 * a4) * a1) * a1;
    }
    v7 = (a1 * a5 * a1) - a4;
    v8 = a3 * a4;
    if (a1 < a3)
    {
        v9 = a2 - (a5 * a3);
    }
    else
    {
        v9 = a5 + a3 - a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 4
3 4
4 6
5 6
6 6
7 6
8 6
9 10
10 10
11 10
12 10
13 12
14 12
15 12
16 12
17 13
18 13
19 20
20 14
21 14
22 16
23 16
24 16
25 16
26 22
27 22
28 22
29 22
30 22
31 22
32 22
33 22
34 23
35 23
<<<sep_out_sample>>>
lea 0x2(%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%esi
imul %r8d,%edx
add %ecx,%r8d
sub %r8d,%edx
lea (%rsi,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (a3 < a5)
        {
            v6 += (a5 * a4) - a5;
        }
        else
        {
            v6 += a3 - a4 + a4;
        }
    }
    v8 = a3 * a5 - (a5 + a4);
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        v9 += (a4 - a1) * a1;
    }
    v11 = 0;
    for (v12 = 0; v12++; v12<a5)
    {
        if (v11 < a2)
        {
            v11 += a4 * a5 * a2;
        }
        else
        {
            v11 += a5 - a4 * a3;
        }
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 34
2 34
3 34
4 34
5 16
6 16
7 16
8 34
9 35
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
add %r8d,%ecx
sub %edx,%edi
lea 0x1(%rcx,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a1 - a3;
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += a3 * (a4 * a1);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 4
6 10
7 11
<<<sep_out_sample>>>
mov %edx,%r9d
imul %edx,%r9d
imul %edx,%r9d
imul %esi,%r9d
lea (%rsi,%rcx,1),%r10d
cmp %ecx,%r9d
jl 22 <func1+0x22>
mov %edx,%r10d
imul %esi,%r10d
add %r8d,%r10d
mov $0x0,%eax
cmp %r8d,%ecx
jge 32 <func1+0x32>
lea (%rdx,%rdx,1),%eax
imul %esi,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
add %r10d,%r9d
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a1 < a1)
    {
        v6 = a2 - a1;
    }
    else
    {
        v6 = (a3 * a3 * a3) * a2;
    }
    if (v6 < a4)
    {
        v7 = a2 + a5 + a4 - a5;
    }
    else
    {
        v7 = a3 * a2 + a5;
    }
    if (a4 < a5)
    {
        v8 = a2 * a3 + a3 * a2;
    }
    else
    {
        v8 = a2 - (a2 + (a2 - a2));
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 14
6 12
7 12
8 18
9 18
10 18
11 26
12 20
13 20
14 22
15 22
16 28
17 28
18 28
19 28
20 28
21 28
22 28
23 29
<<<sep_out_sample>>>
mov %edx,%eax
sub %esi,%eax
cmp %edx,%esi
jge 11 <func1+0x11>
mov %ecx,%eax
sub %edi,%eax
imul %edi,%eax
add %ecx,%eax
add %edi,%edx
add %esi,%edx
add %r8d,%edx
add %edx,%ecx
add %ecx,%eax
add %r8d,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a2 < a3)
    {
        v6 = ((a4 - a1) * a1) + a4;
    }
    else
    {
        v6 = a3 - a2 - a5 + a5;
    }
    if (a1 < a1)
    {
        v7 = a3 - a2 - a2;
    }
    else
    {
        v7 = a5 + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 10
2 10
3 4
4 4
5 6
6 6
7 6
8 6
9 20
10 20
11 20
12 20
13 20
14 18
15 20
16 21
<<<sep_out_sample>>>
lea (%rdi,%rcx,2),%eax
mov %edi,%r9d
sub %r8d,%r9d
cmp $0x2,%edi
cmovl %r9d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a3 * a1;
    }
    if (v7 < a1)
    {
        v8 = a4 + a4 + a1;
    }
    else
    {
        v8 = a1 - a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 11
5 11
6 17
7 17
8 17
9 17
10 17
11 18
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%ecx
mov %r8d,%eax
sub %edx,%eax
add %ecx,%eax
sub %r8d,%edi
add $0x1,%edi
imul %edi,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a4 + a1 + a2;
    }
    v8 = a5 - a3;
    v9 = a5 - a5 * (a5 - a1);
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 11
5 9
6 9
7 11
8 10
9 10
10 10
11 11
12 12
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
lea 0x1(%rcx,%rax,1),%eax
add %r8d,%esi
imul %esi,%edi
sub %edi,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (a4 < a3)
        {
            v6 += a5 - a1 * a3;
        }
        else
        {
            v6 += (a1 + a1) + a2;
        }
    }
    v8 = a3 - (a2 + a5) * a1;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 16
6 16
7 16
8 17
9 18
<<<sep_out_sample>>>
mov %esi,%r9d
sub %edx,%r9d
cmp %edi,%r8d
jge 18 <func1+0x18>
mov %esi,%r9d
imul %edi,%r9d
add %r8d,%r9d
add %edi,%r9d
mov $0x1,%r11d
sub %edx,%r11d
imul %esi,%r11d
add %r8d,%r11d
cmp %edx,%r8d
jge 3c <func1+0x3c>
mov %esi,%r10d
imul %ecx,%r10d
add %r8d,%r10d
sub %edi,%r10d
jmp 44 <func1+0x44>
lea (%rcx,%rsi,1),%r10d
imul %esi,%r10d
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
add %r11d,%eax
add %r10d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a5 < a1)
    {
        v6 = a5 + (a2 * a1) + a1;
    }
    else
    {
        v6 = a2 - a3;
    }
    v7 = (a2 - (a2 * a3)) + a5;
    if (a5 < a3)
    {
        v8 = a5 + a2 * a4 - a1;
    }
    else
    {
        v8 = (a4 * a2) + a2 * a2;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        if (v10 < a2)
        {
            v9 += a2 + a5 + a4;
        }
        else
        {
            v9 += a1 - a2 - a1;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 4
4 4
5 6
6 6
7 6
8 6
9 12
10 12
11 12
12 12
13 13
14 13
15 15
16 15
17 15
18 15
19 15
20 19
21 19
22 33
23 33
24 33
25 33
26 33
27 33
28 33
29 34
<<<sep_out_sample>>>
mov %esi,%r9d
sub %edx,%r9d
test %edi,%edi
jg 17 <func1+0x17>
mov %r8d,%r9d
imul %esi,%r9d
add %edx,%r9d
add %esi,%r9d
add %edi,%edx
lea (%rsi,%rdx,1),%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
imul %edi,%edx
add %edx,%eax
lea 0x1(%rcx,%r8,1),%edx
imul %edx,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (v6 < a1)
    {
        v6 = a4 - a4 - a3 + a2;
    }
    else
    {
        v6 = (a5 * a2 + a3) + a2;
    }
    v7 = a3 * a1 + a1 * a1;
    v8 = a4 + a4 * (a4 + a5);
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 6
2 6
3 4
4 4
5 10
6 10
7 10
8 10
9 12
10 14
11 14
12 14
13 14
14 12
15 14
16 13
17 13
18 14
19 15
<<<sep_out_sample>>>
add %edx,%edi
add %esi,%edi
lea 0x1(%r8,%rdi,1),%eax
lea (%rax,%rsi,2),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a5 - a5 - a4;
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        if (a1 < a2)
        {
            v7 += a2 + a4 * a3;
        }
        else
        {
            v7 += a3 + a1;
        }
    }
    v9 = (a2 + a2) - a4 + a4;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 18
5 19
<<<sep_out_sample>>>
test %edi,%edi
jle 14 <func1+0x14>
mov %ecx,%r9d
imul %esi,%r9d
add %r8d,%r9d
imul %r8d,%r9d
jmp 1b <func1+0x1b>
mov %esi,%r9d
imul %r8d,%r9d
test %ecx,%ecx
jle 25 <func1+0x25>
lea (%r8,%r8,1),%eax
jmp 2b <func1+0x2b>
lea 0x1(%rsi),%eax
imul %edi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (v6 < a1)
    {
        v6 = (a5 + a4 * a2) * a5;
    }
    else
    {
        v6 = a2 * a5;
    }
    if (v7 < a4)
    {
        v7 = a5 + a5;
    }
    else
    {
        v7 = a1 + (a1 * a2);
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 12
11 12
12 14
13 14
14 18
15 18
16 20
17 20
18 20
19 20
20 20
21 20
22 21
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%eax
add $0x1,%edx
imul %edx,%r8d
imul %r8d,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a3 + a5;
    }
    v8 = (a3 * a5 + a5) * a1;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 9
6 9
7 9
8 10
9 11
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
mov %ecx,%edx
sub %esi,%edx
add %edx,%eax
sub %ecx,%r8d
lea 0x1(%rax,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a4 - a2;
    v7 = (a5 + a1 - a1) - a4;
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += a2 + (a5 + a3);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 11
5 4
6 4
7 11
8 5
9 11
10 12
<<<sep_out_sample>>>
mov $0x0,%eax
cmp %ecx,%edi
jle 12 <func1+0x12>
lea 0x1(%rcx),%eax
imul %edx,%eax
add %r8d,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
lea (%rax,%rdi,2),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a5 + a2 - a1;
    }
    if (a4 < a1)
    {
        v8 = a4 * a3 + a3 + a5;
    }
    else
    {
        v8 = ((a4 - a4) * a1) * a3;
    }
    v9 = a1 + a1;
    v10 = 0;
    for (v11 = 0; v11++; v11<a5)
    {
        v10 += a3 + a1;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 15
2 9
3 9
4 11
5 11
6 11
7 23
8 23
9 23
10 23
11 23
12 23
13 24
<<<sep_out_sample>>>
cmp %ecx,%r8d
jge 16 <func1+0x16>
mov %edi,%r9d
imul %r8d,%r9d
imul %r8d,%r9d
imul %ecx,%r9d
jmp 24 <func1+0x24>
mov %r8d,%r9d
imul %esi,%r9d
imul %edx,%r9d
add %edi,%r9d
mov %edx,%eax
sub %ecx,%eax
cmp %ecx,%edi
jle 34 <func1+0x34>
lea 0x1(%rsi,%r8,1),%eax
imul %edx,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %r9d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a4 - (a5 * a1);
    }
    if (a5 < a4)
    {
        v8 = (a5 * (a1 * a5)) * a4;
    }
    else
    {
        v8 = a1 + (a5 * a2) * a3;
    }
    if (a4 < a1)
    {
        v9 = ((a2 + a5) * a3) + a3;
    }
    else
    {
        v9 = (a3 + a1 - a4) - a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 11
8 15
9 15
10 15
11 15
12 23
13 23
14 17
15 17
16 19
17 19
18 25
19 25
20 25
21 25
22 25
23 25
24 26
<<<sep_out_sample>>>
lea (%r8,%rdx,1),%r10d
cmp %edx,%r8d
jle 12 <func1+0x12>
lea (%rcx,%rdi,2),%r9d
sub %r8d,%r9d
jmp 1c <func1+0x1c>
lea (%r8,%rsi,1),%r9d
sub %edi,%r9d
add %r8d,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a5 + a3;
    if (a3 < a5)
    {
        v7 = (a1 - a5) + (a4 + a1);
    }
    else
    {
        v7 = (a5 + a2 - a1) + a5;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 5
3 5
4 7
5 7
6 7
7 11
8 11
9 11
10 13
11 13
12 13
13 13
14 13
15 13
16 14
<<<sep_out_sample>>>
lea (%rdx,%r8,1),%eax
test %ecx,%ecx
jg 16 <func1+0x16>
mov %edx,%r9d
sub %esi,%r9d
mov %esi,%eax
imul %edx,%eax
add %r9d,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (v6 < a4)
    {
        v6 = a3 + a5;
    }
    else
    {
        v6 = a3 - a2 + a2 * a3;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += a1 - a1 - a5;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        v9 += a2 - a3 - a4;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 4
3 4
4 10
5 10
6 10
7 10
8 10
9 22
10 22
11 22
12 22
13 22
14 23
<<<sep_out_sample>>>
lea (%rsi,%rcx,1),%eax
mov %ecx,%r9d
sub %edi,%r9d
cmp %esi,%ecx
cmovge %r9d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a4 < a2)
    {
        v6 = a2 + a4;
    }
    else
    {
        v6 = a4 - a1;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        if (v8 < a2)
        {
            v7 += (a4 * a3) + a3;
        }
        else
        {
            v7 += a5 * (a1 + a5);
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 6
6 24
7 24
8 24
9 24
10 24
11 25
<<<sep_out_sample>>>
lea (%r8,%rdx,1),%eax
test %edi,%edi
jg 12 <func1+0x12>
mov %r8d,%eax
imul %edx,%eax
add %ecx,%eax
add %esi,%eax
lea 0x2(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    if (v6 < a1)
    {
        v6 = a5 + a3;
    }
    else
    {
        v6 = a5 * a3 + a4 + a2;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += a3 + a3 * a1;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        v9 += a5 + (a4 - a3);
    }
    v11 = 0;
    for (v12 = 0; v12++; v12<a5)
    {
        if (v8 < a4)
        {
            v11 += a1 + a3 * a2;
        }
        else
        {
            v11 += a2 + a1;
        }
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 4
3 4
4 10
5 10
6 10
7 10
8 34
9 34
10 34
11 34
12 34
13 35
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
cmp %edi,%esi
jl 18 <func1+0x18>
mov %ecx,%eax
imul %edi,%eax
add %r8d,%eax
mov %esi,%r10d
sub %eax,%r10d
mov %r10d,%eax
test %esi,%esi
jle 29 <func1+0x29>
lea 0x1(%rdx),%r9d
imul %ecx,%r9d
add %edi,%r9d
jmp 33 <func1+0x33>
mov %ecx,%r9d
imul %edx,%r9d
sub %edi,%r9d
lea 0x1(%r9,%rdi,1),%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a5 + a5 + a2;
    }
    if (a2 < a1)
    {
        v8 = a1 + a3;
    }
    else
    {
        v8 = a2 - (a4 * a1 + a5);
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        v9 += a3 + a3 + a1;
    }
    if (v9 < a2)
    {
        v11 = a1 + (a4 + a4 * a3);
    }
    else
    {
        v11 = (a4 * a3) - a1;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 9
3 9
4 15
5 15
6 15
7 15
8 15
9 15
10 22
11 22
12 24
13 24
14 24
15 24
16 28
17 28
18 28
19 30
20 30
21 30
22 30
23 30
24 30
25 31
<<<sep_out_sample>>>
mov %r8d,%eax
sub %esi,%eax
lea (%rcx,%rcx,1),%r9d
cmp %ecx,%r8d
cmovge %r9d,%eax
lea (%rdi,%rdx,1),%r9d
add %r9d,%esi
add %esi,%r8d
add %r8d,%ecx
add %eax,%ecx
sub %edi,%edx
lea 0x1(%rcx,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a5 < a4)
    {
        v6 = a5 - a2;
    }
    else
    {
        v6 = a4 + a4;
    }
    v7 = a3 - a1;
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += a3 + a1 + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 6
6 18
7 18
8 18
9 18
10 18
11 12
12 18
13 19
<<<sep_out_sample>>>
lea (%r8,%rdi,1),%r11d
cmp %edx,%ecx
jl 10 <func1+0x10>
lea -0x2(%rdi),%r11d
imul %r8d,%r11d
cmp %esi,%ecx
jge 1d <func1+0x1d>
mov %edx,%r10d
imul %edi,%r10d
jmp 2b <func1+0x2b>
mov %esi,%r10d
imul %edi,%r10d
add %r8d,%r10d
imul %edx,%r10d
cmp %esi,%r8d
jge 40 <func1+0x40>
mov %ecx,%r9d
imul %edi,%r9d
imul %r8d,%r9d
sub %esi,%r9d
jmp 48 <func1+0x48>
mov %ecx,%eax
sub %esi,%eax
lea (%rax,%rcx,2),%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a4 < a3)
    {
        v6 = a5 + a1;
    }
    else
    {
        v6 = (a1 * a5) - a5 - a5;
    }
    if (a4 < a2)
    {
        v7 = (a5 - a5 + a3) * a1;
    }
    else
    {
        v7 = (a5 + (a2 * a1)) * a3;
    }
    if (a5 < a2)
    {
        v8 = a4 * a1 * a5 - a2;
    }
    else
    {
        v8 = (a4 + (a4 - a2)) + a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 6
2 4
3 4
4 10
5 10
6 12
7 12
8 14
9 14
10 14
11 18
12 18
13 18
14 18
15 20
16 20
17 22
18 22
19 22
20 22
21 22
22 26
23 26
24 26
25 28
26 28
27 28
28 28
29 28
30 28
31 28
32 29
<<<sep_out_sample>>>
lea (%rcx,%rdi,1),%r11d
cmp %esi,%r8d
jl 17 <func1+0x17>
mov %esi,%r11d
sub %edi,%r11d
mov %ecx,%eax
imul %edi,%eax
add %eax,%r11d
lea (%rcx,%r8,1),%r10d
cmp %edx,%esi
jg 26 <func1+0x26>
mov %edi,%r10d
imul %edx,%r10d
mov %edx,%r9d
sub %ecx,%r9d
add %esi,%r9d
cmp %edx,%r8d
jge 41 <func1+0x41>
mov %edi,%r9d
not %r9d
imul %r8d,%r9d
add %ecx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a5 < a2)
    {
        v6 = a4 + a1;
    }
    else
    {
        v6 = a2 - a1 + a4 * a1;
    }
    if (a3 < a2)
    {
        v7 = a4 + a5;
    }
    else
    {
        v7 = a1 * a3 + a3 - a3;
    }
    if (a5 < a3)
    {
        v8 = a4 - ((a1 * a5) + a5);
    }
    else
    {
        v8 = a3 - a4 + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 6
2 4
3 4
4 10
5 10
6 10
7 10
8 10
9 14
10 12
11 12
12 18
13 18
14 26
15 26
16 26
17 20
18 20
19 22
20 22
21 22
22 22
23 28
24 28
25 28
26 28
27 28
28 28
29 28
30 29
<<<sep_out_sample>>>
cmp %r8d,%ecx
jle 18 <func1+0x18>
lea 0x1(%rdx),%r10d
imul %esi,%r10d
mov %esi,%r9d
neg %r9d
sub %edi,%r9d
jmp 27 <func1+0x27>
mov %esi,%r10d
sub %edx,%r10d
mov %edi,%r9d
sub %r8d,%r9d
add %edi,%r9d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (v7 < a1)
        {
            v6 += a3 - a4 * a2;
        }
        else
        {
            v6 += a3 - a3 - a3;
        }
    }
    if (a5 < a4)
    {
        v8 = (a3 * a2) + a2;
    }
    else
    {
        v8 = a4 - (a4 + a3 - a2);
    }
    if (a5 < a4)
    {
        v9 = a3 - a2 - a3 - a1;
    }
    else
    {
        v9 = (a1 - a5) + a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 26
6 26
7 26
8 26
9 22
10 22
11 30
12 30
13 30
14 32
15 32
16 32
17 32
18 32
19 32
20 33
<<<sep_out_sample>>>
mov %esi,%eax
sub %edi,%eax
cmp %r8d,%esi
jl 15 <func1+0x15>
mov %r8d,%eax
imul %ecx,%eax
imul %ecx,%eax
imul %esi,%eax
add %edi,%edx
add %esi,%edx
add %edx,%r8d
add %ecx,%r8d
add %eax,%r8d
imul %edi,%esi
lea (%r8,%rcx,2),%eax
sub %esi,%eax
add $0x1,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a2 < a5)
    {
        v6 = a2 - a1;
    }
    else
    {
        v6 = (a5 * a4 * a4) * a2;
    }
    v7 = a4 - (a2 * a1 - a4);
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        if (v9 < a5)
        {
            v8 += a2 + a5;
        }
        else
        {
            v8 += a2 + (a1 - a2);
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 6
3 4
4 4
5 10
6 10
7 10
8 10
9 25
10 25
11 25
12 25
13 25
14 12
15 12
16 25
17 25
18 26
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
mov %ecx,%r9d
imul %edx,%r9d
sub %r9d,%r8d
lea (%rax,%rcx,2),%eax
lea (%rax,%r8,1),%eax
add %eax,%edi
sub %esi,%edx
lea (%rdx,%rcx,2),%edx
lea (%rdi,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = (a5 - a4 * a3) + a4;
    v7 = a3 + a1 - a3;
    v8 = a4 - (a2 - a3 - a4);
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 7
2 7
3 7
4 4
5 4
6 4
7 4
8 7
9 7
10 6
11 6
12 7
13 8
<<<sep_out_sample>>>
cmp %r8d,%edi
jge 16 <func1+0x16>
mov %ecx,%r9d
imul %edi,%r9d
mov %edi,%eax
sub %edx,%eax
imul %r9d,%eax
jmp 25 <func1+0x25>
mov %r8d,%eax
sub %edx,%eax
mov %esi,%r9d
imul %esi,%r9d
sub %r9d,%eax
add %edi,%edx
add %esi,%edx
add %r8d,%edx
add %edx,%ecx
add %ecx,%eax
imul %r8d,%edi
imul %edi,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a1 < a5)
    {
        v6 = a4 * a1 * (a1 - a3);
    }
    else
    {
        v6 = (a5 - a3) - a2 * a2;
    }
    v7 = a5 * a1 * a2;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 6
9 10
10 10
11 10
12 10
13 10
14 13
15 13
16 13
17 13
18 13
19 12
20 12
21 13
22 14
<<<sep_out_sample>>>
cmp %edi,%edx
jge 17 <func1+0x17>
mov %ecx,%eax
imul %r8d,%eax
mov %edi,%r10d
sub %eax,%r10d
mov %r10d,%eax
sub %esi,%eax
jmp 20 <func1+0x20>
lea (%rcx,%rdi,1),%eax
add %r8d,%eax
imul %edi,%eax
mov %r8d,%r9d
sub %esi,%r9d
cmp %edx,%eax
jge 35 <func1+0x35>
lea 0x1(%r8),%r9d
imul %edi,%r9d
add %r8d,%r9d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %ecx,%r8d
add %r8d,%eax
add %r9d,%eax
sub %edx,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a3 < a1)
    {
        v6 = a1 - a4 * a5 - a2;
    }
    else
    {
        v6 = (a4 + a1 + a5) * a1;
    }
    if (v6 < a3)
    {
        v7 = a1 + a1 * a5 + a5;
    }
    else
    {
        v7 = a5 - a2;
    }
    v8 = (a3 - a3) + (a4 - a3);
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 6
9 6
10 10
11 10
12 10
13 18
14 18
15 12
16 12
17 14
18 14
19 14
20 21
21 21
22 21
23 21
24 21
25 21
26 20
27 21
28 22
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
add %esi,%ecx
add %r8d,%r8d
sub %r8d,%edi
add %edi,%edx
lea 0x1(%rcx,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a3 - ((a5 + a5) - a1);
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += a4 * a3 - a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 4
6 4
7 4
8 10
9 11
<<<sep_out_sample>>>
mov %r8d,%eax
sub %edi,%eax
test %edi,%edi
jg 15 <func1+0x15>
mov %esi,%eax
imul %ecx,%eax
imul %r8d,%eax
imul %edi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (v6 < a1)
    {
        v6 = a5 - a1;
    }
    else
    {
        v6 = a5 * (a2 * a4) * a1;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += a4 + (a1 - a2);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 6
2 6
3 4
4 4
5 10
6 10
7 10
8 10
9 17
10 17
11 17
12 17
13 17
14 18
<<<sep_out_sample>>>
mov %esi,%r11d
imul %r8d,%r11d
mov %edi,%r10d
neg %r10d
sub %esi,%r10d
cmp %edi,%esi
jge 23 <func1+0x23>
mov %edx,%r9d
imul %r8d,%r9d
add %ecx,%r9d
sub %edx,%r9d
jmp 34 <func1+0x34>
mov $0x1,%r9d
sub %esi,%r9d
imul %edx,%r9d
imul %edi,%r9d
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a2 * a5;
    v7 = a5 - a5 - a1 - a2;
    if (a2 < a1)
    {
        v8 = a3 * a5 + a4 - a3;
    }
    else
    {
        v8 = (a3 - a2 * a3) * a1;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        v9 += a5 * a5;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 5
4 5
5 5
6 6
7 6
8 8
9 8
10 8
11 8
12 8
13 12
14 12
15 12
16 12
17 19
18 19
19 19
20 19
21 19
22 19
23 19
24 20
<<<sep_out_sample>>>
cmp %r8d,%esi
jge 13 <func1+0x13>
lea (%rdx,%rcx,1),%r9d
mov %edi,%eax
imul %edi,%eax
add %r9d,%eax
jmp 18 <func1+0x18>
mov %ecx,%eax
imul %ecx,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (a5 < a5)
        {
            v6 += (a3 * a1) - a4;
        }
        else
        {
            v6 += a1 + a1;
        }
    }
    if (a2 < a5)
    {
        v8 = a3 + a4 + (a1 * a1);
    }
    else
    {
        v8 = ((a4 - a4) + a4) * a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 18
7 18
8 22
9 22
10 24
11 24
12 24
13 24
14 24
15 25
<<<sep_out_sample>>>
lea 0x1(%rcx),%r10d
imul %edx,%r10d
add %r8d,%r10d
mov %edi,%r9d
imul %ecx,%r9d
sub $0x1,%r9d
imul %esi,%r9d
test %ecx,%ecx
jle 26 <func1+0x26>
mov %ecx,%r11d
sub %esi,%r11d
jmp 2e <func1+0x2e>
lea (%rsi,%r8,1),%r11d
imul %edi,%r11d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea (%rcx,%r10,1),%eax
add %r9d,%eax
add %r11d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = (a3 + a4 * a3) + a5;
    if (a2 < a2)
    {
        v7 = a5 - a4 - a1 - a2;
    }
    else
    {
        v7 = (a1 * a4) * a2 - a2;
    }
    if (v8 < a4)
    {
        v8 = (a4 + a1 - a2) - a1;
    }
    else
    {
        v8 = (a2 + a5) * a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 11
5 11
6 11
7 11
8 13
9 13
10 15
11 15
12 15
13 19
14 19
15 21
16 21
17 21
18 21
19 21
20 21
21 21
22 22
<<<sep_out_sample>>>
cmp %r8d,%edx
jge 15 <func1+0x15>
mov %esi,%r9d
imul %ecx,%r9d
lea (%rdx,%rdx,1),%eax
imul %r9d,%eax
jmp 1d <func1+0x1d>
lea 0x1(%rsi),%eax
imul %ecx,%eax
add %edx,%eax
lea (%r8,%rdx,1),%r9d
add %r9d,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a4 * a2 - a4;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        if (v8 < a4)
        {
            v8 += a1 + a1 + a1;
        }
        else
        {
            v8 += (a3 + a1) + a1;
        }
    }
    if (a3 < a5)
    {
        v10 = a2 * a4 * (a3 + a3);
    }
    else
    {
        v10 = ((a4 * a2) + a4) + a3;
    }
    v11 = a5 + a3;
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 23
4 23
5 23
6 23
7 23
8 27
9 27
10 27
11 29
12 30
13 30
14 30
15 30
16 30
17 30
18 31
<<<sep_out_sample>>>
cmp %ecx,%r8d
jge 15 <func1+0x15>
mov %r8d,%r9d
sub %edx,%r9d
imul %r8d,%r9d
imul %edx,%r9d
jmp 1c <func1+0x1c>
mov %edx,%r9d
imul %esi,%r9d
cmp %esi,%ecx
jge 28 <func1+0x28>
mov %edi,%eax
neg %eax
sub %edi,%eax
jmp 3a <func1+0x3a>
mov %r8d,%r10d
imul %esi,%r10d
mov $0x1,%eax
sub %r10d,%eax
imul %edx,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    if (a5 < a4)
    {
        v6 = ((a5 - a3) * a5) * a3;
    }
    else
    {
        v6 = a3 * a2;
    }
    if (a4 < a2)
    {
        v7 = (a1 - (a1 + a1)) - a1;
    }
    else
    {
        v7 = a3 - a3 * (a5 * a2);
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        if (a5 < a2)
        {
            v8 += a3 + a5 - a1;
        }
        else
        {
            v8 += a5 * a1 * a1;
        }
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a5)
    {
        if (a5 < a4)
        {
            v10 += a2 + a4;
        }
        else
        {
            v10 += a5 + a1;
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 12
11 12
12 14
13 14
14 14
15 14
16 18
17 18
18 18
19 18
20 18
21 44
22 44
23 44
24 44
25 44
26 44
27 45
<<<sep_out_sample>>>
lea (%rcx,%rdi,1),%r10d
mov %r8d,%eax
imul %edi,%eax
add %eax,%r10d
test %edi,%edi
jle 20 <func1+0x20>
mov %r8d,%r9d
sub %ecx,%r9d
imul %edi,%r9d
add %ecx,%r9d
jmp 2d <func1+0x2d>
mov %r8d,%r9d
imul %esi,%r9d
sub %edx,%r9d
sub %edx,%r9d
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
add %ecx,%r8d
add %r10d,%r8d
add %r9d,%r8d
imul %ecx,%ecx
imul %ecx,%edx
sub %edi,%edx
lea (%r8,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = (a4 + a1) + a5 * a1;
    if (v7 < a1)
    {
        v7 = a4 - (a1 * (a4 - a5));
    }
    else
    {
        v7 = (a5 * a2 - a3) - a3;
    }
    v8 = (a4 * a4 * a3) - a1;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 5
6 5
7 7
8 7
9 7
10 7
11 7
12 11
13 11
14 11
15 11
16 14
17 14
18 14
19 14
20 14
21 14
22 13
23 13
24 13
25 14
26 15
<<<sep_out_sample>>>
mov %ecx,%eax
sub %esi,%eax
imul %edx,%eax
imul %edi,%eax
add %edi,%edx
add %esi,%edx
add %r8d,%edx
add %ecx,%edx
add %eax,%edx
add %ecx,%r8d
imul %r8d,%esi
sub %ecx,%esi
lea (%rdx,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a4 < a4)
    {
        v6 = (a5 * a5) + a1 + a3;
    }
    else
    {
        v6 = a1 - a1;
    }
    v7 = (a4 - a2) * a3 * a1;
    v8 = (a2 * (a5 + a4)) - a4;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 12
2 12
3 12
4 12
5 14
6 14
7 14
8 14
9 14
10 13
11 13
12 13
13 14
14 15
<<<sep_out_sample>>>
lea (%rcx,%rdi,1),%eax
test %edx,%edx
jle e <func1+0xe>
mov %r8d,%eax
neg %eax
sub %esi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a4 - a4;
    if (v6 < a3)
    {
        v7 = a4 - a5 - a2 - a4;
    }
    else
    {
        v7 = a4 + a1;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 11
2 5
3 5
4 7
5 7
6 7
7 13
8 13
9 13
10 13
11 13
12 14
<<<sep_out_sample>>>
lea (%rsi,%rcx,1),%eax
lea (%rax,%rdx,1),%r10d
sub %r8d,%r10d
lea (%r8,%rcx,1),%r9d
sub %edx,%eax
test %r8d,%r8d
jg 1b <func1+0x1b>
mov %r8d,%eax
imul %edx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r10d,%ecx
add %r9d,%ecx
sub %edi,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = ((a2 + a4) + a3) - a5;
    v7 = a5 + a4;
    v8 = (a4 - a4) * a5 - a1;
    if (v9 < a5)
    {
        v9 = a4 + a2 - a3;
    }
    else
    {
        v9 = a5 * a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 5
5 9
6 7
7 7
8 13
9 13
10 15
11 15
12 15
13 15
14 15
15 15
16 15
17 15
18 16
<<<sep_out_sample>>>
mov %ecx,%r10d
imul %esi,%r10d
imul %ecx,%r10d
imul %r8d,%r10d
cmp %edx,%ecx
jle 1e <func1+0x1e>
mov %ecx,%r9d
sub %r8d,%r9d
add %ecx,%r9d
jmp 25 <func1+0x25>
mov %edx,%r9d
imul %ecx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a2 < a2)
    {
        v6 = a5 - a5;
    }
    else
    {
        v6 = (a4 * a2) * a4 * a5;
    }
    if (a3 < a4)
    {
        v7 = (a4 - a5) + a4;
    }
    else
    {
        v7 = a3 * a4 - a4 + a4;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 12
6 12
7 14
8 14
9 14
10 14
11 18
12 18
13 20
14 20
15 20
16 20
17 20
18 20
19 21
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %eax,%ecx
add %esi,%r8d
add %r8d,%ecx
imul %edx,%esi
sub %edi,%esi
imul %esi,%edi
lea (%rcx,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a5 + a2;
    v7 = (a3 * a2 - a1) * a1;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 6
7 5
8 5
9 5
10 6
11 7
<<<sep_out_sample>>>
lea (%rdx,%rdx,1),%eax
mov %esi,%r9d
sub %r8d,%r9d
cmp %esi,%edi
cmovl %eax,%r9d
add %edx,%edi
lea (%rsi,%rdi,1),%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
sub %r8d,%edi
add %edi,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a1 < a2)
    {
        v6 = a3 + a3;
    }
    else
    {
        v6 = a2 - a5;
    }
    if (a2 < a2)
    {
        v7 = a3 - a1 - a2;
    }
    else
    {
        v7 = a1 + a3 - a5 + a4;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 6
6 18
7 20
8 20
9 20
10 20
11 18
12 18
13 20
14 21
<<<sep_out_sample>>>
mov %ecx,%r9d
sub %edx,%r9d
add %esi,%r9d
cmp %r9d,%ecx
jle 20 <func1+0x20>
mov %r8d,%r10d
sub %edi,%r10d
mov %edi,%r11d
imul %ecx,%r11d
sub %r11d,%r10d
jmp 2e <func1+0x2e>
mov %edx,%r10d
imul %esi,%r10d
imul %edi,%r10d
add %edx,%r10d
lea (%rdi,%r8,1),%eax
sub %ecx,%eax
cmp %edi,%esi
jge 41 <func1+0x41>
lea 0x1(%r8),%eax
imul %edx,%eax
sub %edi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
add %r10d,%r9d
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = (a4 - a3) + a2;
    if (v6 < a4)
    {
        v7 = a5 - a1 - a1 * a4;
    }
    else
    {
        v7 = a3 * a2 * a1 + a3;
    }
    if (a2 < a1)
    {
        v8 = a5 * a3 + a3 - a1;
    }
    else
    {
        v8 = a1 + a5 - a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 5
5 5
6 7
7 7
8 7
9 7
10 7
11 7
12 11
13 11
14 11
15 11
16 19
17 19
18 13
19 13
20 15
21 15
22 15
23 21
24 21
25 21
26 21
27 21
28 21
29 21
30 22
<<<sep_out_sample>>>
cmp $0x1,%esi
jle 10 <func1+0x10>
mov %edx,%eax
sub %esi,%eax
sub %esi,%eax
imul %edx,%eax
jmp 1a <func1+0x1a>
mov %esi,%eax
imul %edi,%eax
imul %edi,%eax
add %esi,%eax
add %edi,%edx
add %edx,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (a2 < a3)
        {
            v6 += a2 + a5 - a5;
        }
        else
        {
            v6 += a2 + (a2 + a1);
        }
    }
    if (v7 < a2)
    {
        v8 = ((a3 - a2) - a2) * a3;
    }
    else
    {
        v8 = (a2 * a1 * a1) + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 18
7 18
8 22
9 22
10 22
11 22
12 24
13 24
14 24
15 24
16 24
17 25
<<<sep_out_sample>>>
cmp %ecx,%esi
jle f <func1+0xf>
mov %r8d,%eax
sub %esi,%eax
add %edx,%eax
sub %esi,%eax
jmp 1e <func1+0x1e>
lea (%rdi,%rsi,1),%eax
mov %ecx,%r9d
sub %eax,%r9d
mov %r9d,%eax
imul %esi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a2 * a3;
    }
    if (a4 < a2)
    {
        v8 = (a5 - a2) + a3 - a2;
    }
    else
    {
        v8 = (a4 - (a1 + a2)) * a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 11
8 15
9 15
10 15
11 15
12 15
13 17
14 17
15 17
16 17
17 17
18 18
<<<sep_out_sample>>>
mov %edi,%eax
sub %r8d,%eax
cmp %esi,%edi
jle f <func1+0xf>
mov %ecx,%eax
sub %edx,%eax
sub %edi,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a3 - a3;
    if (a4 < a4)
    {
        v7 = a1 * a1 - a2 + a1;
    }
    else
    {
        v7 = a1 - ((a5 - a5) * a1);
    }
    if (a2 < a1)
    {
        v8 = a4 - a3 - a1;
    }
    else
    {
        v8 = a1 - a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 19
2 19
3 13
4 13
5 15
6 15
7 15
8 21
9 21
10 21
11 21
12 21
13 21
14 22
<<<sep_out_sample>>>
test %edx,%edx
jle f <func1+0xf>
mov %ecx,%eax
sub %esi,%eax
add %edx,%eax
sub %r8d,%eax
jmp 17 <func1+0x17>
lea (%rcx,%rsi,1),%eax
sub %edi,%eax
add %r8d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (v6 < a3)
    {
        v6 = (a3 - (a2 - a4)) - a5;
    }
    else
    {
        v6 = a4 + a2 - a1 + a5;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a4 * a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 17
12 17
13 17
14 17
15 17
16 18
<<<sep_out_sample>>>
test %ecx,%ecx
jle a <func1+0xa>
mov %edx,%eax
sub %edi,%eax
jmp 15 <func1+0x15>
mov %r8d,%eax
imul %edx,%eax
imul %ecx,%eax
add %esi,%eax
mov %esi,%r9d
imul %esi,%r9d
add %r9d,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a1 * a2;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += (a4 - a4) - a1;
    }
    if (v8 < a4)
    {
        v10 = a3 - a1;
    }
    else
    {
        v10 = (a5 * a3) * a4 + a2;
    }
    v11 = a2 * a2;
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 14
2 14
3 16
4 16
5 16
6 20
7 20
8 20
9 20
10 22
11 22
12 23
13 23
14 23
15 23
16 23
17 23
18 24
<<<sep_out_sample>>>
lea (%r8,%rdi,1),%r10d
test %edx,%edx
jle 10 <func1+0x10>
lea -0x1(%rsi),%r10d
imul %edx,%r10d
mov $0x0,%eax
cmp %ecx,%edx
jl 26 <func1+0x26>
lea (%rcx,%rsi,1),%r9d
mov %r8d,%eax
imul %esi,%eax
add %r9d,%eax
mov $0x0,%r9d
cmp %edi,%r8d
jl 3d <func1+0x3d>
lea -0x1(%rdx),%r9d
imul %edx,%r9d
imul %edi,%r9d
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r10d
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (v6 < a3)
    {
        v6 = (a3 * a2) - a3;
    }
    else
    {
        v6 = a5 + a1;
    }
    if (a3 < a4)
    {
        v7 = a2 - a2;
    }
    else
    {
        v7 = a4 + a2 + a5 * a2;
    }
    if (a5 < a1)
    {
        v8 = a4 - a4;
    }
    else
    {
        v8 = (a3 * a3 - a3) * a1;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        if (a5 < a3)
        {
            v9 += a4 + a2;
        }
        else
        {
            v9 += a2 * a3;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 14
7 12
8 12
9 18
10 18
11 18
12 18
13 22
14 20
15 20
16 26
17 26
18 26
19 40
20 40
21 40
22 40
23 40
24 40
25 40
26 41
<<<sep_out_sample>>>
mov %edi,%eax
imul %edx,%eax
imul %edx,%eax
lea 0x1(%rsi,%rax,1),%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a5 * a5;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        if (a1 < a2)
        {
            v8 += a4 - a3;
        }
        else
        {
            v8 += a4 + a4;
        }
    }
    v10 = a2 + (a3 * (a1 * a3));
    v11 = 0;
    for (v12 = 0; v12++; v12<a4)
    {
        v11 += a5 + (a2 - a1);
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 27
5 27
6 27
7 27
8 27
9 27
10 28
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
sub %edi,%ecx
add %ecx,%edx
add %eax,%edx
add %r8d,%esi
lea 0x1(%rdx,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a3 + (a4 - a1);
    v7 = a5 + a2;
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += a1 * a2 - a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 11
5 4
6 4
7 11
8 5
9 11
10 12
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
lea (%r8,%rcx,1),%eax
sub %esi,%edi
sub %ecx,%edi
sub %esi,%edi
lea 0x1(%rax,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = (a1 - a2) - a4 - a2;
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += a5 + a4 * a1;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        if (v9 < a4)
        {
            v9 += a1 + a5 + a3;
        }
        else
        {
            v9 += a1 * a3 + a2;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 22
4 22
5 4
6 4
7 4
8 22
9 23
<<<sep_out_sample>>>
test %esi,%esi
jle c <func1+0xc>
mov %edi,%eax
imul %r8d,%eax
jmp 1d <func1+0x1d>
mov %edx,%eax
imul %edi,%eax
imul %edx,%eax
mov %esi,%r9d
sub %eax,%r9d
mov %r9d,%eax
lea 0x1(%rax,%rdi,1),%eax
add %eax,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (a3 < a4)
        {
            v6 += a3 + (a5 + a5);
        }
        else
        {
            v6 += a3 - a1 - a4;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        if (v7 < a3)
        {
            v8 += a1 * a5 * a1;
        }
        else
        {
            v8 += a4 + a1;
        }
    }
    if (v6 < a2)
    {
        v10 = a1 * a5;
    }
    else
    {
        v10 = a2 - a3 * a1 * a3;
    }
    v11 = 0;
    for (v12 = 0; v12++; v12<a4)
    {
        if (v11 < a4)
        {
            v11 += a1 - a1;
        }
        else
        {
            v11 += a3 + a4;
        }
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 28
2 28
3 30
4 30
5 30
6 34
7 34
8 34
9 34
10 34
11 34
12 48
13 48
14 48
15 48
16 48
17 49
<<<sep_out_sample>>>
mov %esi,%eax
imul %ecx,%eax
add %edi,%eax
add %edx,%eax
add %esi,%eax
add %r8d,%eax
add %eax,%ecx
lea (%rdx,%rdi,2),%eax
sub %r8d,%eax
lea 0x1(%rcx,%rax,1),%ecx
add %esi,%edx
imul %r8d,%esi
sub %esi,%edx
lea (%rcx,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a4 < a4)
    {
        v6 = (a2 + a3) + a3 * a3;
    }
    else
    {
        v6 = a3 + a1 - a5 + a1;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        if (a2 < a4)
        {
            v7 += a5 + a3 - a5;
        }
        else
        {
            v7 += a3 + a2 - a4;
        }
    }
    v9 = (a2 + a3) - a2 * a5;
    v10 = a2 - a2 + a2 * a4;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 25
2 25
3 26
4 26
5 26
6 26
7 26
8 10
9 10
10 26
11 24
12 24
13 24
14 26
15 27
<<<sep_out_sample>>>
lea (%rdx,%rdi,1),%eax
test %ecx,%ecx
jg 15 <func1+0x15>
mov %r8d,%eax
imul %r8d,%eax
imul %r8d,%eax
imul %ecx,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (a2 < a1)
        {
            v6 += a2 * a1;
        }
        else
        {
            v6 += (a5 * a3) + a3;
        }
    }
    if (v8 < a4)
    {
        v8 = a3 + a1;
    }
    else
    {
        v8 = a5 * a5 * a5 * a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 18
2 16
3 16
4 22
5 22
6 22
7 22
8 24
9 24
10 24
11 24
12 24
13 25
<<<sep_out_sample>>>
cmp %edx,%r8d
jge 12 <func1+0x12>
lea (%rcx,%r8,1),%r9d
imul %edi,%r9d
add %r8d,%r9d
jmp 1f <func1+0x1f>
mov %edx,%r9d
imul %ecx,%r9d
add %r8d,%r9d
add %ecx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
sub %ecx,%esi
add %esi,%r8d
imul %r8d,%edi
lea 0x1(%rax,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a5 < a3)
    {
        v6 = (a1 * (a4 + a5)) + a5;
    }
    else
    {
        v6 = (a5 + a3 * a4) + a4;
    }
    v7 = (a2 - a4 + a5) * a1;
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        if (a2 < a5)
        {
            v8 += (a3 - a1) * a4;
        }
        else
        {
            v8 += a4 + a4 - a2;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 10
11 25
12 25
13 25
14 25
15 25
16 12
17 12
18 12
19 25
20 26
<<<sep_out_sample>>>
cmp %esi,%edi
jge e <func1+0xe>
mov %edx,%eax
imul %ecx,%eax
lea (%rax,%rsi,2),%eax
jmp 1b <func1+0x1b>
mov %edx,%r9d
sub %esi,%r9d
mov %ecx,%eax
sub %esi,%eax
add %r9d,%eax
mov %edx,%r9d
imul %r8d,%r9d
add %edi,%r9d
add %r9d,%edx
add %esi,%edx
add %edx,%r8d
add %r8d,%ecx
add %eax,%ecx
add %edi,%esi
imul %esi,%edi
lea 0x1(%rcx,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a1 < a2)
    {
        v6 = (a3 * a4) + a2 + a2;
    }
    else
    {
        v6 = a3 - a2 - (a2 - a4);
    }
    v7 = (a2 + a1) * a1;
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += a1 - a2;
    }
    if (a3 < a3)
    {
        v10 = (a3 * a5) * (a4 - a5);
    }
    else
    {
        v10 = a3 * a5;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 10
11 10
12 24
13 24
14 26
15 26
16 26
17 26
18 26
19 26
20 12
21 12
22 26
23 27
<<<sep_out_sample>>>
lea (%r8,%rdi,1),%eax
mov %edx,%r9d
sub %r8d,%r9d
cmp %edx,%esi
cmovge %r9d,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a2 < a3)
    {
        v6 = a5 + a1;
    }
    else
    {
        v6 = a3 - a5;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        if (a5 < a3)
        {
            v7 += a1 - a3;
        }
        else
        {
            v7 += a2 + a2 + a2;
        }
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        v9 += a2 - a3 + a3;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 6
6 29
7 29
8 29
9 29
10 29
11 30
<<<sep_out_sample>>>
add %edx,%edi
add %esi,%edi
add %r8d,%edi
add %ecx,%edi
add %r8d,%edx
lea 0x1(%rdi,%rdx,1),%eax
sub $0x1,%r8d
imul %r8d,%ecx
add %ecx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a5 + a3;
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += (a4 - a3) - a1;
    }
    if (a2 < a2)
    {
        v9 = a5 + a4;
    }
    else
    {
        v9 = a5 * a4 - a4 + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 18
5 4
6 18
7 16
8 16
9 16
10 18
11 19
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea (%r8,%rcx,1),%esi
imul %ecx,%edx
lea 0x1(%rsi,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a4 * a3;
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        if (v8 < a4)
        {
            v7 += (a2 - a5) * a2;
        }
        else
        {
            v7 += a5 + a5 - a4;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 4
6 17
7 18
<<<sep_out_sample>>>
cmp %ecx,%esi
jge c <func1+0xc>
mov %edi,%r11d
sub %r8d,%r11d
jmp 18 <func1+0x18>
mov %edi,%r11d
sub %r8d,%r11d
add %esi,%r11d
add %edx,%r11d
lea (%rdx,%rdi,1),%r9d
cmp %edx,%edi
jge 2c <func1+0x2c>
lea 0x1(%rcx),%r9d
imul %r8d,%r9d
imul %edx,%r9d
lea (%rdi,%r8,1),%eax
lea (%rsi,%rdx,1),%r10d
cmp %r8d,%esi
cmovl %eax,%r10d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r11d,%ecx
add %ecx,%r9d
lea (%r9,%r10,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a2 < a4)
    {
        v6 = a1 + a3 - a5 - a3;
    }
    else
    {
        v6 = a3 + (a1 - a5 + a2);
    }
    if (a1 < a3)
    {
        v7 = (a5 + (a4 * a5)) * a3;
    }
    else
    {
        v7 = a3 + a1;
    }
    if (a2 < a5)
    {
        v8 = a1 + a5;
    }
    else
    {
        v8 = a2 + a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 10
10 18
11 12
12 12
13 14
14 14
15 14
16 22
17 22
18 22
19 22
20 28
21 28
22 28
23 28
24 28
25 28
26 28
27 29
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a3 - a1;
    }
    v8 = a3 - a3;
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        v9 += a3 + (a4 + a1);
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 15
2 15
3 15
4 15
5 16
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %eax,%ecx
mov %edi,%eax
sub %esi,%eax
sub %edx,%eax
imul %edi,%eax
add %ecx,%eax
add %r8d,%edx
add %edx,%edi
add %edi,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = ((a1 - a2) - a3) * a1;
    v7 = a1 + (a5 + a3) + a2;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 4
7 4
8 4
9 6
10 5
11 5
12 5
13 6
14 7
<<<sep_out_sample>>>
lea 0x2(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (a4 < a5)
        {
            v6 += a3 - (a5 - a5);
        }
        else
        {
            v6 += a3 * a4 + a1;
        }
    }
    v8 = a4 - (a4 - a3);
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        v9 += a5 * a2;
    }
    v11 = 0;
    for (v12 = 0; v12++; v12<a4)
    {
        if (a2 < a4)
        {
            v11 += a2 + a4 + a3;
        }
        else
        {
            v11 += a3 + a3 * a4;
        }
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 34
2 34
3 34
4 34
5 34
6 35
<<<sep_out_sample>>>
mov %ecx,%r9d
imul %edx,%r9d
mov %edx,%eax
imul %r8d,%eax
lea (%r8,%rcx,1),%r10d
test %esi,%esi
jg 20 <func1+0x20>
mov %esi,%r10d
imul %ecx,%r10d
lea (%r10,%rdx,2),%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a4 * a3;
    v7 = a3 * a5;
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        if (a3 < a4)
        {
            v8 += a2 - a2 * a3;
        }
        else
        {
            v8 += (a4 + a1) + a3;
        }
    }
    if (v8 < a2)
    {
        v10 = (a5 + a4) + a4 - a4;
    }
    else
    {
        v10 = a3 + a2 * a4 + a3;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 5
4 5
5 20
6 18
7 18
8 24
9 24
10 24
11 26
12 26
13 26
14 26
15 26
16 26
17 26
18 27
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea (%r8,%rcx,1),%esi
lea (%rsi,%rcx,2),%esi
lea -0x1(%rdi,%rdi,1),%eax
imul %edx,%eax
add %esi,%eax
sub %ecx,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a4 + a4;
    v7 = a3 * (a1 + a1) - a3;
    if (a1 < a1)
    {
        v8 = a2 + a4;
    }
    else
    {
        v8 = a3 - a4;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        if (a1 < a2)
        {
            v9 += a4 * a4;
        }
        else
        {
            v9 += a4 * a5 * a2;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 26
2 26
3 26
4 26
5 26
6 5
7 5
8 26
9 12
10 26
11 27
<<<sep_out_sample>>>
lea (%rdi,%rdi,1),%r10d
lea (%rsi,%rcx,1),%r9d
lea (%rdi,%rcx,1),%eax
cmp %edx,%edi
jge 1b <func1+0x1b>
mov %r8d,%eax
imul %r8d,%eax
add %ecx,%eax
add %r8d,%eax
add %edi,%edx
add %esi,%edx
add %r8d,%edx
add %ecx,%edx
add %r10d,%edx
add %r9d,%edx
add %edx,%eax
lea (%rsi,%rcx,2),%edx
lea (%rdx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a1 + a1;
    v7 = a2 - a3 + (a3 + a4);
    if (a1 < a3)
    {
        v8 = a5 * a5 + a4 + a5;
    }
    else
    {
        v8 = a1 + a4;
    }
    v9 = a4 + (a2 + a4 + a5);
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 5
3 12
4 6
5 6
6 8
7 8
8 8
9 8
10 15
11 15
12 15
13 15
14 15
15 15
16 15
17 14
18 14
19 15
20 16
<<<sep_out_sample>>>
cmp %edi,%edx
jge d <func1+0xd>
mov %edi,%r9d
imul %esi,%r9d
jmp 19 <func1+0x19>
mov %edx,%r9d
sub %r8d,%r9d
add %edi,%r9d
add %ecx,%r9d
mov $0x1,%eax
sub %r8d,%eax
imul %r8d,%eax
sub %edx,%eax
test %edi,%edi
jle 3c <func1+0x3c>
mov %r8d,%r10d
imul %r8d,%r10d
imul %edx,%r10d
imul %esi,%r10d
jmp 47 <func1+0x47>
lea 0x1(%rcx),%r10d
imul %edi,%r10d
sub %esi,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a3 < a1)
    {
        v6 = a1 * a2;
    }
    else
    {
        v6 = (a3 - a5) + a1 + a4;
    }
    v7 = a5 - a5 * a5 - a3;
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += (a3 * a1) + a1;
    }
    if (v8 < a1)
    {
        v10 = a5 * a5 * a3 * a2;
    }
    else
    {
        v10 = (a1 * a4 + a1) - a2;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 10
10 12
11 12
12 12
13 12
14 18
15 18
16 20
17 20
18 20
19 20
20 20
21 24
22 24
23 24
24 26
25 26
26 26
27 26
28 26
29 26
30 26
31 27
<<<sep_out_sample>>>
mov %r8d,%eax
sub %ecx,%eax
cmp %edx,%esi
jl e <func1+0xe>
lea (%rdi,%rcx,2),%eax
add %ecx,%eax
lea (%rdi,%r8,2),%edi
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %ecx,%r8d
lea 0x1(%rax,%r8,1),%eax
lea (%rcx,%rdx,2),%edx
add %edx,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a2 < a3)
    {
        v6 = a5 - a4;
    }
    else
    {
        v6 = a1 + (a4 + a4) + a4;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        if (v7 < a1)
        {
            v7 += (a5 * a2) * a4;
        }
        else
        {
            v7 += a1 * a5;
        }
    }
    v9 = a4 + (a3 + a3) + a4;
    v10 = a2 + a5 + a5 - a2;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 6
3 4
4 4
5 10
6 10
7 26
8 26
9 26
10 26
11 26
12 26
13 24
14 24
15 26
16 27
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
add %esi,%ecx
imul %r8d,%edx
lea 0x1(%rcx,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a3 * a5;
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a2 - a5;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        v9 += a5 + a3;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 15
2 15
3 15
4 15
5 4
6 15
7 16
<<<sep_out_sample>>>
lea (%rcx,%rsi,1),%r10d
cmp %edi,%ecx
jge 13 <func1+0x13>
lea 0x1(%rdi),%r10d
imul %r8d,%r10d
add %ecx,%r10d
mov %edx,%r9d
sub %r8d,%r9d
cmp %edx,%ecx
jle 2a <func1+0x2a>
mov %edx,%r9d
imul %r8d,%r9d
add %ecx,%r9d
add %r8d,%r9d
cmp %edx,%r8d
jle 3a <func1+0x3a>
mov %esi,%eax
imul %edx,%eax
add %ecx,%eax
sub %edx,%eax
jmp 43 <func1+0x43>
mov %edi,%eax
imul %edi,%eax
add %esi,%eax
sub %ecx,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r10d
add %r10d,%r9d
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a4 < a1)
    {
        v6 = (a1 * a5 + a5) + a4;
    }
    else
    {
        v6 = a4 + a2;
    }
    if (a3 < a4)
    {
        v7 = (a3 * a5) + a4 + a5;
    }
    else
    {
        v7 = a3 - a5;
    }
    if (a3 < a5)
    {
        v8 = (a2 * a3) + a4 - a3;
    }
    else
    {
        v8 = (a2 + a1 * a1) - a4;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        if (a1 < a1)
        {
            v9 += a5 * (a2 + a4);
        }
        else
        {
            v9 += (a2 + a5) - a4;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 6
7 18
8 18
9 12
10 12
11 14
12 14
13 14
14 14
15 20
16 20
17 22
18 22
19 22
20 22
21 22
22 26
23 26
24 26
25 26
26 40
27 40
28 40
29 40
30 40
31 40
32 40
33 41
<<<sep_out_sample>>>
mov %edx,%r11d
sub %edi,%r11d
mov %edx,%eax
imul %r8d,%eax
add %eax,%r11d
cmp %edi,%edx
jge 21 <func1+0x21>
mov %esi,%r10d
sub %edx,%r10d
sub %r8d,%r10d
add %ecx,%r10d
jmp 29 <func1+0x29>
lea (%rdi,%rcx,1),%r10d
imul %r8d,%r10d
cmp %ecx,%edi
jge 36 <func1+0x36>
lea (%rsi,%rsi,1),%r9d
neg %r9d
jmp 40 <func1+0x40>
mov %esi,%r9d
imul %esi,%r9d
add %edx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = (a3 - a1) + (a3 * a5);
    if (a3 < a1)
    {
        v7 = (a2 - a3 - a5) + a4;
    }
    else
    {
        v7 = a1 * a5 + a4 * a5;
    }
    if (a1 < a4)
    {
        v8 = a5 - ((a2 + a2) + a5);
    }
    else
    {
        v8 = a3 + a2 * a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 4
6 5
7 5
8 7
9 7
10 7
11 7
12 7
13 11
14 11
15 13
16 13
17 15
18 15
19 15
20 19
21 19
22 19
23 21
24 21
25 21
26 21
27 21
28 21
29 21
30 22
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
mov %esi,%r9d
sub %ecx,%r9d
add %r9d,%edx
imul %esi,%edx
add %edx,%eax
imul %r8d,%esi
lea (%rsi,%rdi,2),%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a2 * ((a2 - a4) + a3);
    if (a2 < a2)
    {
        v7 = a1 - a1;
    }
    else
    {
        v7 = a5 * a2 + a1 + a1;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 13
2 13
3 13
4 13
5 4
6 4
7 4
8 4
9 13
10 11
11 11
12 13
13 14
<<<sep_out_sample>>>
test %ecx,%ecx
jle 12 <func1+0x12>
lea (%rdx,%rsi,1),%eax
imul %edi,%eax
mov %edx,%r9d
sub %eax,%r9d
jmp 1c <func1+0x1c>
lea (%r8,%rcx,1),%r9d
sub %edi,%r9d
sub %edi,%r9d
mov %esi,%eax
sub %edi,%eax
cmp $0x1,%edx
jle 2b <func1+0x2b>
lea 0x1(%rdx),%eax
imul %esi,%eax
cmp %r8d,%edi
jge 43 <func1+0x43>
mov %r8d,%r11d
sub %edx,%r11d
mov %esi,%r10d
imul %r8d,%r10d
imul %r11d,%r10d
jmp 52 <func1+0x52>
mov %ecx,%r10d
imul %edx,%r10d
imul %edx,%r10d
imul %edi,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %r9d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a4 - a4 + a3;
    }
    if (v6 < a4)
    {
        v8 = a3 - (a3 + a2) * a1;
    }
    else
    {
        v8 = a5 + a4 - a1 - a1;
    }
    if (v7 < a3)
    {
        v9 = a2 * a3 + a2;
    }
    else
    {
        v9 = a2 - a1;
    }
    if (a1 < a5)
    {
        v10 = (a5 - a3) * (a2 * a5);
    }
    else
    {
        v10 = ((a4 * a3) * a3) * a1;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 11
8 15
9 15
10 15
11 23
12 23
13 17
14 17
15 19
16 19
17 25
18 25
19 27
20 27
21 27
22 27
23 27
24 27
25 31
26 31
27 31
28 31
29 33
30 33
31 33
32 33
33 33
34 33
35 33
36 34
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (a4 < a1)
        {
            v6 += (a1 - a5) * a3;
        }
        else
        {
            v6 += (a2 * a4) * a5;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += a3 * a3 * a4;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a2)
    {
        v10 += a3 * a3;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 26
2 26
3 26
4 26
5 27
<<<sep_out_sample>>>
mov %edx,%eax
sub %esi,%eax
lea 0x1(%rdi,%rax,1),%eax
add %eax,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a3 - a2 - a4;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        if (a4 < a1)
        {
            v8 += a1 + a4 - a4;
        }
        else
        {
            v8 += (a2 + a2) - a2;
        }
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a4)
    {
        if (v8 < a5)
        {
            v10 += (a3 - a1) - a1;
        }
        else
        {
            v10 += a3 - a4 - a3;
        }
    }
    v12 = a3 - a2;
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 33
2 33
3 34
4 34
5 34
6 34
7 34
8 35
<<<sep_out_sample>>>
lea (%r8,%rsi,1),%r9d
test %edi,%edi
jg 19 <func1+0x19>
mov $0x1,%r9d
sub %esi,%r9d
imul %esi,%r9d
imul %edx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
imul %edx,%ecx
imul %ecx,%edx
add %edx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (v6 < a1)
    {
        v6 = a5 + a2;
    }
    else
    {
        v6 = (a2 - (a2 * a2)) * a3;
    }
    v7 = ((a3 * a4) * a3) + a1;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 4
3 4
4 10
5 10
6 10
7 10
8 13
9 13
10 13
11 13
12 13
13 12
14 12
15 12
16 13
17 14
<<<sep_out_sample>>>
test %ecx,%ecx
jle 13 <func1+0x13>
mov %r8d,%r9d
imul %edi,%r9d
add %ecx,%r9d
sub %esi,%r9d
jmp 20 <func1+0x20>
mov %edx,%r9d
imul %ecx,%r9d
add %r8d,%r9d
add %edx,%r9d
mov %r8d,%eax
sub %edi,%eax
mov %edi,%r10d
imul %ecx,%r10d
cmp $0x2,%edi
cmovge %r10d,%eax
lea (%rdx,%r8,2),%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %r9d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a2 + a1 * a4;
    }
    if (v8 < a4)
    {
        v8 = (a5 * a1 + a4) - a2;
    }
    else
    {
        v8 = a5 + (a3 * a4) + a3;
    }
    if (v7 < a1)
    {
        v9 = a1 * a4;
    }
    else
    {
        v9 = a5 - a1;
    }
    v10 = a3 + (a5 + a5);
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 11
8 15
9 15
10 15
11 15
12 23
13 23
14 19
15 19
16 19
17 19
18 25
19 26
20 26
21 26
22 26
23 26
24 26
25 26
26 27
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
add %r8d,%ecx
imul %edx,%edx
sub %edx,%ecx
mov %edi,%eax
imul %edi,%eax
imul %eax,%edi
sub %edi,%esi
lea 0x1(%rcx,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a4 - (a4 + (a3 * a3));
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        if (a5 < a5)
        {
            v7 += (a2 - a2) * a5;
        }
        else
        {
            v7 += a5 * a2 + a1;
        }
    }
    v9 = a2 - a1 * a1 * a1;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 18
5 4
6 18
7 17
8 17
9 17
10 17
11 18
12 19
<<<sep_out_sample>>>
push %rbx
mov $0x0,%r10d
test %edx,%edx
jg 18 <func1+0x18>
mov %esi,%r10d
imul %ecx,%r10d
sub %r8d,%r10d
sub %edi,%r10d
mov %esi,%r9d
imul %r8d,%r9d
mov %ecx,%ebx
sub %edx,%ebx
imul %r8d,%ebx
add %ecx,%ebx
mov %r9d,%eax
neg %eax
cmp %eax,%esi
jle 3b <func1+0x3b>
lea (%rcx,%rdx,2),%eax
lea (%rax,%r8,1),%r11d
jmp 47 <func1+0x47>
mov %esi,%r11d
sub %edx,%r11d
sub %r8d,%r11d
sub %edx,%r11d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r10d
sub %r9d,%r10d
lea (%r10,%rbx,1),%eax
add %r11d,%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (v6 < a3)
    {
        v6 = (a1 - (a4 - a4)) - a1;
    }
    else
    {
        v6 = (a2 * a4) - a5 - a1;
    }
    v7 = (a4 - a2 * a5) - a4;
    v8 = a4 + (a4 - a3) * a5;
    if (v7 < a2)
    {
        v9 = a3 + a5 + a4 + a3;
    }
    else
    {
        v9 = (a2 - a3) - a5 - a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 6
3 4
4 4
5 10
6 10
7 10
8 10
9 12
10 12
11 13
12 13
13 13
14 13
15 12
16 12
17 14
18 14
19 16
20 16
21 16
22 20
23 20
24 20
25 20
26 22
27 22
28 22
29 22
30 22
31 22
32 22
33 22
34 23
35 23
<<<sep_out_sample>>>
cmp %edi,%r8d
jge 15 <func1+0x15>
lea (%rsi,%rdi,1),%eax
mov %edx,%r9d
sub %eax,%r9d
mov %r9d,%eax
add %ecx,%eax
jmp 1b <func1+0x1b>
lea (%rcx,%r8,2),%eax
add %ecx,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a5 < a1)
    {
        v6 = a4 + (a3 - (a2 + a1));
    }
    else
    {
        v6 = a5 + (a5 + a4) + a4;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        if (v8 < a2)
        {
            v7 += a3 - a2;
        }
        else
        {
            v7 += a4 * a5 + a4;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 6
9 10
10 10
11 24
12 24
13 24
14 24
15 24
16 25
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a1 - a2 + a5;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        if (a5 < a3)
        {
            v8 += a1 - a2 - a2;
        }
        else
        {
            v8 += a3 * a5;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 21
5 22
<<<sep_out_sample>>>
mov %edi,%eax
sub %edx,%eax
cmp %eax,%edi
jle 15 <func1+0x15>
mov %edx,%r10d
imul %r8d,%r10d
imul %edi,%r10d
jmp 23 <func1+0x23>
mov %ecx,%r10d
imul %edi,%r10d
sub %r8d,%r10d
imul %r8d,%r10d
mov %ecx,%r9d
sub %esi,%r9d
cmp %ecx,%edx
jge 38 <func1+0x38>
lea 0x1(%r8),%r9d
imul %esi,%r9d
sub %edx,%r9d
add %r9d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%eax
lea 0x1(%r10,%rax,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a1 + a5 - a5 - a3;
    if (v6 < a1)
    {
        v7 = a1 * (a3 * a5);
    }
    else
    {
        v7 = (a4 * a1 - a5) * a5;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        if (a1 < a5)
        {
            v8 += a2 * a2 + a3;
        }
        else
        {
            v8 += (a2 + a1) * a1;
        }
    }
    if (a3 < a4)
    {
        v10 = a2 + (a5 * a2) - a3;
    }
    else
    {
        v10 = a4 + a4 - a2 - a4;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 5
4 5
5 7
6 7
7 7
8 7
9 11
10 11
11 11
12 11
13 31
14 31
15 25
16 25
17 27
18 27
19 27
20 33
21 33
22 33
23 33
24 33
25 33
26 33
27 34
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %r8d,%edx
add %edx,%ecx
mov %edi,%eax
sub %r8d,%eax
lea 0x1(%rcx,%rax,1),%edx
lea (%rdi,%r8,2),%eax
sub %esi,%eax
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = (a4 - a4) - (a5 - a1);
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a2 + a3 + a3;
    }
    v9 = a1 + (a5 + a5) - a2;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 11
5 4
6 4
7 11
8 10
9 10
10 11
11 12
<<<sep_out_sample>>>
cmp %edx,%edi
jge b <func1+0xb>
mov %edx,%eax
imul %edi,%eax
jmp 1a <func1+0x1a>
mov %r8d,%r9d
imul %esi,%r9d
mov %ecx,%eax
sub %esi,%eax
imul %r9d,%eax
lea 0x2(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    if (a1 < a3)
    {
        v6 = a3 * a1;
    }
    else
    {
        v6 = a5 * a2 * (a4 - a2);
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += (a4 * a1) - a4;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        if (v6 < a1)
        {
            v9 += a5 + a2;
        }
        else
        {
            v9 += a5 * a4 + a5;
        }
    }
    v11 = 0;
    for (v12 = 0; v12++; v12<a2)
    {
        v11 += a2 * a2 + a4;
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 10
10 10
11 34
12 34
13 34
14 34
15 34
16 35
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
lea 0x1(%rcx,%rax,1),%eax
mov %ecx,%r9d
imul %edx,%r9d
add %r9d,%r8d
imul %esi,%r8d
add %eax,%r8d
sub %ecx,%esi
imul %edi,%edx
sub %edx,%esi
lea (%r8,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (a5 < a5)
        {
            v6 += a3 - a1 + a5;
        }
        else
        {
            v6 += (a3 - a5) - a4;
        }
    }
    v8 = a2 * (a4 * a3 + a5);
    v9 = (a2 - a4) - a3 * a1;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 18
5 16
6 16
7 16
8 16
9 18
10 17
11 17
12 17
13 18
14 19
<<<sep_out_sample>>>
mov %edx,%r9d
sub %edi,%r9d
cmp %esi,%ecx
jle 15 <func1+0x15>
lea 0x1(%rdx),%r9d
imul %edi,%r9d
add %esi,%r9d
test %edx,%edx
jle 26 <func1+0x26>
mov %edi,%r10d
imul %r8d,%r10d
imul %edx,%r10d
jmp 33 <func1+0x33>
mov %r8d,%r10d
imul %esi,%r10d
add %edx,%r10d
add %edi,%r10d
mov %edx,%eax
sub %esi,%eax
mov %edx,%r11d
sub %r8d,%r11d
test %esi,%esi
cmovle %r11d,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %eax,%r9d
lea (%r9,%r10,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a5 + a4;
    }
    if (a2 < a4)
    {
        v8 = a3 * a1 + a1 + a2;
    }
    else
    {
        v8 = a3 - a1;
    }
    if (v9 < a3)
    {
        v9 = a3 * (a1 * a5);
    }
    else
    {
        v9 = a5 * a2 + a3 + a1;
    }
    if (v10 < a2)
    {
        v10 = a3 - a2;
    }
    else
    {
        v10 = a3 - a5;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 15
2 15
3 9
4 9
5 11
6 11
7 11
8 17
9 17
10 19
11 19
12 19
13 19
14 23
15 23
16 23
17 23
18 27
19 27
20 27
21 27
22 27
23 27
24 33
25 33
26 33
27 33
28 33
29 33
30 33
31 34
<<<sep_out_sample>>>
test %edx,%edx
jle b <func1+0xb>
mov %edi,%eax
imul %esi,%eax
jmp 15 <func1+0x15>
mov %r8d,%eax
imul %edx,%eax
add %edi,%eax
sub %esi,%eax
lea (%rdi,%rdx,1),%r9d
add %esi,%r9d
add %r8d,%r9d
add %ecx,%r9d
add %r9d,%eax
mov %ecx,%r9d
imul %esi,%r9d
imul %r8d,%r9d
imul %edi,%r9d
add %r9d,%eax
mov %esi,%r10d
sub %edx,%r10d
mov %r10d,%edx
imul %edi,%edx
add %esi,%edx
add %edx,%eax
sub %r8d,%edi
add %edi,%ecx
imul %ecx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (v6 < a3)
    {
        v6 = a1 * a2;
    }
    else
    {
        v6 = (a5 * a3 + a1) - a2;
    }
    v7 = a4 * a2 * a5 * a1;
    if (a5 < a5)
    {
        v8 = (a4 * a5) - a4 - a3;
    }
    else
    {
        v8 = a1 * (a2 - a3) + a2;
    }
    if (a4 < a4)
    {
        v9 = a3 * a1;
    }
    else
    {
        v9 = (a1 - a5 + a4) * a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 10
10 29
11 29
12 29
13 29
14 29
15 12
16 12
17 12
18 12
19 29
20 19
21 19
22 19
23 19
24 19
25 29
26 27
27 27
28 27
29 29
30 30
<<<sep_out_sample>>>
cmp %edx,%edi
jge b <func1+0xb>
mov %ecx,%eax
imul %edi,%eax
jmp 1b <func1+0x1b>
mov %ecx,%eax
imul %edi,%eax
mov %edx,%r9d
sub %eax,%r9d
mov %r9d,%eax
add %esi,%eax
add %edx,%edi
add %edi,%esi
add %r8d,%esi
add %ecx,%esi
lea 0x1(%rax,%rsi,1),%eax
add %edx,%ecx
imul %ecx,%edx
imul %edx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a1 < a3)
    {
        v6 = a4 * a1;
    }
    else
    {
        v6 = a3 - a4 * a1 + a2;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += a5 + a2;
    }
    v9 = a3 * (a3 + a4) * a5;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 10
10 10
11 10
12 18
13 18
14 18
15 18
16 18
17 17
18 17
19 17
20 18
21 19
<<<sep_out_sample>>>
mov %esi,%r9d
imul %ecx,%r9d
lea (%r8,%rcx,1),%eax
add %r9d,%eax
add %edi,%eax
add %edx,%eax
add %eax,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%eax
imul %r8d,%r8d
add %r8d,%eax
add %edx,%edi
imul %edi,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a2 * (a2 * a1);
    }
    v8 = a5 * a5;
    v9 = (a4 * a1) + (a4 * a3);
    v10 = a2 * a4 + (a5 + a4);
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 11
5 12
6 12
7 12
8 12
9 12
10 9
11 12
12 10
13 10
14 12
15 13
<<<sep_out_sample>>>
push %rbx
test %edi,%edi
jle b <func1+0xb>
lea (%r8,%r8,1),%r9d
jmp 15 <func1+0x15>
mov %ecx,%r9d
imul %ecx,%r9d
add %edi,%r9d
cmp %edx,%r9d
jge 2a <func1+0x2a>
lea (%r8,%rsi,1),%ebx
mov %r8d,%r11d
imul %ecx,%r11d
sub %r11d,%ebx
jmp 34 <func1+0x34>
mov %r8d,%ebx
imul %ecx,%ebx
add %edx,%ebx
add %ecx,%ebx
cmp %edi,%r9d
jge 4a <func1+0x4a>
mov %r8d,%r11d
imul %edx,%r11d
imul %edx,%r11d
imul %esi,%r11d
jmp 52 <func1+0x52>
mov %esi,%eax
sub %edx,%eax
lea (%rax,%rdi,2),%r11d
mov %r8d,%r10d
sub %ecx,%r10d
cmp %edx,%edi
jge 6c <func1+0x6c>
mov $0x1,%r10d
sub %esi,%r10d
imul %ecx,%r10d
add %r8d,%r10d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
add %ebx,%eax
add %r11d,%eax
add %r10d,%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (v6 < a1)
    {
        v6 = a5 + a5 - a4 + a4;
    }
    else
    {
        v6 = a1 + (a4 * a4);
    }
    if (v6 < a3)
    {
        v7 = a5 + a2 - a5 * a4;
    }
    else
    {
        v7 = (a3 + a5 * a4) + a4;
    }
    if (v6 < a1)
    {
        v8 = (a5 * a3) * a3 * a2;
    }
    else
    {
        v8 = (a2 - a3) + a1 + a1;
    }
    if (a1 < a3)
    {
        v9 = a5 - (a2 * a4 - a4);
    }
    else
    {
        v9 = a5 - a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 4
3 4
4 6
5 6
6 10
7 10
8 10
9 12
10 12
11 14
12 14
13 14
14 14
15 14
16 18
17 18
18 18
19 18
20 20
21 20
22 22
23 22
24 22
25 22
26 22
27 26
28 26
29 26
30 34
31 34
32 28
33 28
34 30
35 30
36 30
37 30
38 36
39 36
40 36
41 36
42 36
43 36
44 36
45 36
46 37
47 37
<<<sep_out_sample>>>
cmp %r8d,%edx
jge 10 <func1+0x10>
lea -0x1(%rdi),%eax
imul %esi,%eax
imul %edi,%eax
jmp 17 <func1+0x17>
lea (%r8,%rsi,1),%eax
imul %esi,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (a2 < a2)
        {
            v6 += a4 + a5;
        }
        else
        {
            v6 += a5 - (a3 - a2);
        }
    }
    if (a3 < a5)
    {
        v8 = (a1 * a2 - a2) * a1;
    }
    else
    {
        v8 = a5 * a2 + a2 * a2;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        v9 += a3 * (a1 - a4);
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 18
7 22
8 22
9 29
10 29
11 29
12 29
13 29
14 30
<<<sep_out_sample>>>
cmp %edi,%edx
jge f <func1+0xf>
mov %esi,%eax
sub %edi,%eax
imul %edx,%eax
sub %ecx,%eax
jmp 19 <func1+0x19>
mov %edi,%eax
imul %ecx,%eax
imul %ecx,%eax
add %edi,%eax
cmp %edi,%ecx
jle 33 <func1+0x33>
mov %edi,%r9d
imul %edi,%r9d
imul %esi,%r9d
mov %r8d,%r11d
sub %r9d,%r11d
mov %r11d,%r9d
jmp 46 <func1+0x46>
mov %esi,%r9d
imul %ecx,%r9d
mov %edi,%r10d
sub %r9d,%r10d
mov %r10d,%r9d
add %edi,%r9d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (a4 < a5)
        {
            v6 += a2 - a2;
        }
        else
        {
            v6 += (a3 * a3) * a3;
        }
    }
    if (a3 < a1)
    {
        v8 = ((a2 - a1) * a3) - a4;
    }
    else
    {
        v8 = a1 + a1 * a4 * a4;
    }
    if (a1 < a4)
    {
        v9 = a5 - (a2 * (a1 * a1));
    }
    else
    {
        v9 = a1 - (a2 * a4 - a1);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 18
7 18
8 22
9 22
10 22
11 22
12 24
13 24
14 26
15 26
16 26
17 26
18 26
19 26
20 26
21 30
22 30
23 30
24 30
25 30
26 30
27 32
28 32
29 32
30 32
31 32
32 32
33 33
<<<sep_out_sample>>>
cmp %edi,%r8d
jge 12 <func1+0x12>
mov %edx,%eax
imul %ecx,%eax
imul %edx,%eax
imul %edi,%eax
jmp 1a <func1+0x1a>
mov %esi,%eax
imul %esi,%eax
imul %ecx,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %r8d,%esi
add %esi,%ecx
add %eax,%ecx
mov %r8d,%eax
imul %r8d,%eax
sub %eax,%ecx
lea (%rcx,%r8,2),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a5 < a1)
    {
        v6 = a3 * a4 * a3 * a1;
    }
    else
    {
        v6 = a2 * a2 * a4;
    }
    v7 = a3 - a3 - a5 * a5;
    v8 = a5 - a3 + a5 + a3;
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        if (a4 < a4)
        {
            v9 += (a5 - a4) * a1;
        }
        else
        {
            v9 += (a4 + a2) + a3;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 26
12 26
13 26
14 26
15 26
16 12
17 12
18 26
19 26
20 27
<<<sep_out_sample>>>
lea (%r8,%rsi,1),%r9d
cmp %edi,%edx
jl f <func1+0xf>
mov %edx,%r9d
imul %edx,%r9d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea (%rcx,%r9,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a3 < a1)
    {
        v6 = a5 + a2;
    }
    else
    {
        v6 = a3 * a3;
    }
    v7 = a4 - a4;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 4
3 4
4 10
5 10
6 13
7 13
8 13
9 13
10 13
11 14
<<<sep_out_sample>>>
add %esi,%edx
add %edx,%esi
add %esi,%r8d
lea (%r8,%rcx,1),%esi
lea 0x1(%rdx,%rsi,1),%eax
mov %ecx,%edx
sub %edi,%edx
sub $0x1,%edx
imul %edx,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = (a1 + a3) - a1 + a2;
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += (a3 - a2) * a1;
    }
    v9 = (a4 - a1) * a4 - a4;
    v10 = a1 - a1 - a1 + a2;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 12
3 12
4 12
5 12
6 10
7 10
8 10
9 10
10 12
11 13
<<<sep_out_sample>>>
cmp %edi,%ecx
jle e <func1+0xe>
lea (%r8,%rdx,2),%eax
imul %r8d,%eax
jmp 16 <func1+0x16>
mov %edi,%eax
imul %edx,%eax
imul %ecx,%eax
cmp $0x1,%ecx
jle 24 <func1+0x24>
mov %edx,%r9d
imul %esi,%r9d
jmp 2b <func1+0x2b>
lea (%rdx,%rdi,2),%r9d
sub %r8d,%r9d
lea 0x1(%r9,%rdi,1),%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (a5 < a3)
        {
            v6 += a5 + (a4 + a4);
        }
        else
        {
            v6 += (a4 * a5) * a4;
        }
    }
    if (a1 < a4)
    {
        v8 = (a3 + a5 + a3) * a5;
    }
    else
    {
        v8 = a4 * (a1 * a3);
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        v9 += a5 * a4 * a3;
    }
    if (v7 < a4)
    {
        v11 = a3 * a2;
    }
    else
    {
        v11 = a3 + a1 + a1 - a5;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 22
7 22
8 22
9 29
10 29
11 31
12 31
13 31
14 35
15 35
16 37
17 37
18 37
19 37
20 37
21 37
22 38
<<<sep_out_sample>>>
mov %edx,%eax
sub %ecx,%eax
cmp %r8d,%ecx
jl 11 <func1+0x11>
lea (%rdi,%rcx,1),%eax
add %r8d,%eax
add %edx,%eax
lea 0x2(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    if (a4 < a5)
    {
        v6 = a4 - (a4 - a3 + a4);
    }
    else
    {
        v6 = (a5 + (a1 + a4)) + a3;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += a2 * a5;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        v9 += a5 - a1;
    }
    v11 = 0;
    for (v12 = 0; v12++; v12<a5)
    {
        v11 += a1 * a5 + a2;
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 6
3 4
4 4
5 10
6 10
7 10
8 27
9 27
10 27
11 27
12 27
13 28
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
lea (%rdi,%r8,1),%esi
sub %ecx,%esi
sub %edx,%esi
add %eax,%esi
add %ecx,%edi
lea (%rsi,%rdi,1),%ecx
sub %r8d,%edx
lea (%rcx,%rdx,2),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = (a1 + a5) - a4 - a3;
    if (a5 < a5)
    {
        v7 = (a5 + a5 * a2) + a4;
    }
    else
    {
        v7 = a4 + (a5 + (a1 - a5));
    }
    v8 = a3 - a5 - a5 + a3;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 14
2 14
3 14
4 14
5 4
6 4
7 4
8 14
9 11
10 14
11 13
12 14
13 15
<<<sep_out_sample>>>
lea (%r8,%rdx,1),%eax
cmp %r8d,%ecx
jg 16 <func1+0x16>
mov $0x1,%eax
sub %ecx,%eax
imul %r8d,%eax
sub %esi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%esi
add %esi,%eax
add %edx,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (v7 < a4)
        {
            v6 += a4 * a2 - a2;
        }
        else
        {
            v6 += a1 - a4;
        }
    }
    if (a5 < a4)
    {
        v8 = a5 - (a1 - a1) + a3;
    }
    else
    {
        v8 = (a5 - a4 * a5) - a2;
    }
    v9 = a3 + a4;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 16
3 16
4 22
5 22
6 22
7 22
8 25
9 25
10 25
11 25
12 25
13 24
14 25
15 26
<<<sep_out_sample>>>
test %r8d,%r8d
jle 10 <func1+0x10>
mov %edi,%eax
sub %esi,%eax
imul %edi,%eax
sub %edx,%eax
jmp 1a <func1+0x1a>
mov %ecx,%eax
sub %edx,%eax
imul %edx,%eax
sub %r8d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (a4 < a1)
        {
            v6 += a2 + a1 * a4;
        }
        else
        {
            v6 += a3 - a4;
        }
    }
    if (v8 < a5)
    {
        v8 = (a1 - a2) * a1 - a3;
    }
    else
    {
        v8 = a3 * (a4 - a3) - a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 18
7 18
8 22
9 22
10 22
11 22
12 24
13 24
14 24
15 24
16 24
17 25
<<<sep_out_sample>>>
cmp %r8d,%edx
jge e <func1+0xe>
lea (%rdi,%r8,2),%r10d
sub %edx,%r10d
jmp 1b <func1+0x1b>
mov %r8d,%r10d
imul %edx,%r10d
add %edi,%r10d
add %esi,%r10d
cmp %esi,%r8d
jge 29 <func1+0x29>
mov %edx,%r9d
imul %esi,%r9d
jmp 36 <func1+0x36>
mov %r8d,%r9d
sub %ecx,%r9d
sub %edx,%r9d
imul %edi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a3 < a5)
    {
        v6 = (a5 + a5 - a3) + a1;
    }
    else
    {
        v6 = a5 * a3 + a1 + a2;
    }
    if (a5 < a2)
    {
        v7 = ((a3 * a2) + a2) - a2;
    }
    else
    {
        v7 = (a5 - a4 - a3) * a1;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 10
10 12
11 12
12 14
13 14
14 14
15 18
16 18
17 18
18 18
19 20
20 20
21 20
22 20
23 20
24 20
25 21
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea (%r8,%rcx,1),%esi
imul %ecx,%edi
lea (%rsi,%rdx,2),%eax
sub %edi,%eax
add $0x1,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a3 + a3 - a1 * a4;
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += a5 - (a5 + a1);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 4
6 4
7 10
8 10
9 11
<<<sep_out_sample>>>
mov %ecx,%r11d
imul %edx,%r11d
sub %edi,%r11d
add %r8d,%r11d
lea (%rcx,%rsi,1),%r10d
lea (%rsi,%rdi,1),%r9d
test %edx,%edx
jle 26 <func1+0x26>
mov %r8d,%r9d
imul %ecx,%r9d
add %edi,%r9d
sub %ecx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = (a4 * a3) - a1 + a5;
    if (a4 < a4)
    {
        v7 = a1 + a2 * a1 - a1;
    }
    else
    {
        v7 = a4 + a2;
    }
    if (v8 < a3)
    {
        v8 = ((a5 * a4) + a1) - a4;
    }
    else
    {
        v8 = a2 + a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 11
6 19
7 13
8 13
9 15
10 15
11 15
12 15
13 21
14 21
15 21
16 21
17 21
18 21
19 21
20 22
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%eax
add $0x1,%r8d
imul %r8d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (v6 < a3)
        {
            v6 += a2 + a2 + a1;
        }
        else
        {
            v6 += (a5 + a5) - a1;
        }
    }
    v8 = a4 + a5 * a4;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 16
6 16
7 17
8 18
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
lea 0x1(%rcx,%r8,1),%eax
mov %edx,%ecx
sub %edi,%ecx
imul %ecx,%edx
add %edx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += (a1 * a1) + a5;
    }
    v8 = ((a3 - a1) * a3) + a2;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 9
6 9
7 9
8 9
9 10
10 11
<<<sep_out_sample>>>
mov %edi,%r10d
sub %esi,%r10d
mov %r8d,%eax
imul %edx,%eax
add %eax,%r10d
lea (%rcx,%r8,1),%eax
lea (%rdx,%r8,1),%r9d
cmp %ecx,%r8d
cmovg %eax,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a1 < a1)
    {
        v6 = a1 * a5 - a1;
    }
    else
    {
        v6 = (a1 - a2) + a5 * a3;
    }
    if (a4 < a5)
    {
        v7 = a4 + a5;
    }
    else
    {
        v7 = a2 + (a3 + a5 - a2);
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 10
6 14
7 14
8 14
9 14
10 20
11 20
12 20
13 20
14 20
15 20
16 21
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %r8d,%edx
lea 0x1(%rcx,%rdx,1),%eax
add %r8d,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (v6 < a5)
        {
            v6 += a4 * a2;
        }
        else
        {
            v6 += a5 - a4;
        }
    }
    v8 = a2 + ((a2 + a5) - a2);
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 16
6 17
7 18
<<<sep_out_sample>>>
lea (%rcx,%rdi,1),%r9d
cmp %ecx,%r8d
jl 13 <func1+0x13>
lea (%rdx,%r8,1),%r9d
add %esi,%r9d
add %edi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
imul %ecx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a5 < a4)
    {
        v6 = a4 + a1;
    }
    else
    {
        v6 = ((a3 + a5) + a2) + a1;
    }
    v7 = a4 * a5;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 4
3 4
4 10
5 10
6 10
7 13
8 13
9 13
10 13
11 13
12 12
13 13
14 14
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %r8d,%esi
add %ecx,%esi
imul %ecx,%ecx
sub %ecx,%r8d
sub %edx,%r8d
lea 0x1(%rsi,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a5 - a4 * a4 - a3;
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += (a4 * a2) - a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 4
6 4
7 4
8 10
9 11
<<<sep_out_sample>>>
lea (%rdx,%rsi,2),%r9d
add %ecx,%r9d
cmp %r9d,%r8d
jle 16 <func1+0x16>
mov %edx,%eax
sub %edi,%eax
lea (%rax,%r8,2),%r10d
jmp 26 <func1+0x26>
mov %r8d,%eax
imul %edx,%eax
imul %r8d,%eax
mov %edi,%r10d
sub %eax,%r10d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %eax,%r9d
lea (%r9,%r10,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a5 * (a4 + a1);
    }
    v8 = (a2 + (a3 + a2)) + a4;
    if (v8 < a5)
    {
        v9 = a5 + (a3 - a1 + a5);
    }
    else
    {
        v9 = a1 - (a5 * a3) * a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 10
4 10
5 12
6 12
7 12
8 12
9 16
10 16
11 16
12 16
13 16
14 18
15 18
16 18
17 18
18 18
19 18
20 19
<<<sep_out_sample>>>
lea (%rdx,%rdi,1),%r9d
cmp %esi,%edi
mov $0x0,%eax
cmovl %r9d,%eax
add %r9d,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a1 < a2)
    {
        v6 = a3 + a1 - a5 + a5;
    }
    else
    {
        v6 = a5 - a5;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += (a3 + a3) * a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 17
6 17
7 17
8 17
9 18
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
mov %edx,%r9d
sub %edi,%r9d
add %r9d,%r8d
lea 0x1(%rax,%r8,1),%eax
sub %ecx,%esi
imul %edx,%edi
add %edi,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a5 - (a1 - a3);
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += a4 - a2;
    }
    v9 = a2 - a4 + a1 * a3;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 11
5 4
6 4
7 4
8 11
9 10
10 10
11 10
12 11
13 12
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += (a5 - a3) + a4;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += a5 + a2 - a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 14
2 14
3 14
4 14
5 15
<<<sep_out_sample>>>
cmp %r8d,%esi
jge d <func1+0xd>
mov %edx,%r9d
sub %esi,%r9d
jmp 1b <func1+0x1b>
mov %ecx,%r9d
imul %edx,%r9d
sub %edi,%r9d
imul %esi,%r9d
lea (%rsi,%r8,1),%r10d
mov %edi,%eax
imul %esi,%eax
add %r10d,%eax
cmp %edx,%esi
jge 37 <func1+0x37>
mov %ecx,%r10d
sub %edx,%r10d
lea (%r10,%rdi,2),%r10d
jmp 42 <func1+0x42>
lea (%rcx,%rdx,1),%r10d
imul %edi,%r10d
add %esi,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a2 < a5)
    {
        v6 = a5 + (a3 - a5 - a2);
    }
    else
    {
        v6 = (a4 * a3 - a1) * a2;
    }
    if (a1 < a1)
    {
        v7 = (a2 * a3) + a2 + a2;
    }
    else
    {
        v7 = a2 + a5 + a1 * a2;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        if (a5 < a4)
        {
            v8 += a5 - a1;
        }
        else
        {
            v8 += a5 - (a4 * a4);
        }
    }
    if (a2 < a3)
    {
        v10 = a1 + ((a4 - a3) + a1);
    }
    else
    {
        v10 = ((a4 + a3) * a1) + a2;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 10
10 18
11 18
12 18
13 18
14 32
15 32
16 34
17 34
18 34
19 34
20 38
21 38
22 38
23 40
24 40
25 40
26 40
27 40
28 40
29 40
30 41
<<<sep_out_sample>>>
cmp %edx,%r8d
jge c <func1+0xc>
mov %edx,%eax
imul %edi,%eax
jmp 15 <func1+0x15>
mov %ecx,%eax
sub %edx,%eax
add %r8d,%eax
sub %edx,%eax
lea (%rdi,%rdx,1),%r9d
add %r9d,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%eax
sub %edx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a5 < a3)
    {
        v6 = a3 * a1;
    }
    else
    {
        v6 = (a5 - (a3 - a4)) - a3;
    }
    v7 = a1 - a3;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 10
10 13
11 13
12 13
13 13
14 13
15 12
16 13
17 14
<<<sep_out_sample>>>
lea -0x1(%rcx),%r10d
imul %esi,%r10d
imul %ecx,%r10d
lea 0x1(%r8),%r9d
imul %ecx,%r9d
imul %ecx,%r9d
lea (%rdi,%r8,1),%r11d
test %edx,%edx
jg 2e <func1+0x2e>
mov %ecx,%r11d
imul %ecx,%r11d
add %r8d,%r11d
imul %edx,%r11d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea (%rcx,%r10,1),%eax
add %r9d,%eax
add %r11d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a4 * (a4 * a2 - a2);
    v7 = (a4 * a5 + a4) * a4;
    if (v8 < a3)
    {
        v8 = a1 + a5;
    }
    else
    {
        v8 = (a5 + a4 * a4) * a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 5
5 5
6 5
7 8
8 6
9 6
10 12
11 12
12 12
13 12
14 14
15 14
16 14
17 14
18 14
19 14
20 14
21 15
<<<sep_out_sample>>>
lea (%rsi,%rsi,1),%eax
cmp $0x1,%ecx
jle e <func1+0xe>
lea (%rdx,%rsi,1),%eax
imul %edi,%eax
add %edx,%edi
add %edi,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a5 * a5 + a3;
    }
    if (v7 < a4)
    {
        v8 = (a3 * a1) + a1 * a2;
    }
    else
    {
        v8 = a2 + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 15
2 9
3 9
4 11
5 11
6 17
7 17
8 17
9 17
10 17
11 18
<<<sep_out_sample>>>
lea (%rdx,%rsi,1),%r9d
test %ecx,%ecx
jle 13 <func1+0x13>
lea (%rdx,%rdi,1),%eax
imul %r8d,%eax
add %edi,%eax
jmp 1e <func1+0x1e>
mov %edi,%eax
imul %edi,%eax
imul %r8d,%eax
sub %ecx,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a3 + a2;
    if (v7 < a4)
    {
        v7 = a5 * (a3 + a1) + a1;
    }
    else
    {
        v7 = a1 * a1 * a5 - a4;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        if (a4 < a2)
        {
            v8 += a1 + (a3 + a2);
        }
        else
        {
            v8 += a5 * a5;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 5
3 5
4 7
5 7
6 7
7 7
8 11
9 11
10 11
11 11
12 25
13 25
14 25
15 25
16 25
17 25
18 26
<<<sep_out_sample>>>
mov %edx,%r9d
imul %r8d,%r9d
lea (%rdi,%rdx,2),%eax
lea (%r9,%rsi,2),%edx
lea 0x1(%rdx,%rax,1),%eax
add %eax,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (a1 < a5)
        {
            v6 += a4 + a2 + a1;
        }
        else
        {
            v6 += a1 * a3 + a2;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += (a2 - a5) + a2;
    }
    v10 = a3 + (a2 + a3 * a5);
    v11 = 0;
    for (v12 = 0; v12++; v12<a4)
    {
        if (a1 < a4)
        {
            v11 += (a4 * a1) * a2;
        }
        else
        {
            v11 += a4 + a3 * a3;
        }
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 34
4 34
5 34
6 34
7 34
8 35
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
add %ecx,%esi
add %r8d,%edx
add %esi,%edx
imul %r8d,%edi
add %ecx,%edi
imul %edi,%ecx
lea 0x1(%rdx,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a2 + a3 - (a2 - a5);
    v7 = (a4 + a5 * a1) * a4;
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        if (v7 < a2)
        {
            v8 += a4 * a1 + a3;
        }
        else
        {
            v8 += (a4 * a2) - a4;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 18
5 4
6 18
7 5
8 5
9 5
10 18
11 19
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a2 + a1;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        if (v9 < a1)
        {
            v8 += a4 * a1 + a1;
        }
        else
        {
            v8 += a2 - a4 * a1;
        }
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a3)
    {
        if (a5 < a5)
        {
            v10 += a3 * a2 - a2;
        }
        else
        {
            v10 += a1 + (a2 + a4);
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 33
2 33
3 33
4 33
5 34
<<<sep_out_sample>>>
add %edx,%edi
add %esi,%edi
add %r8d,%edi
lea 0x1(%rcx,%rdi,1),%eax
imul %edx,%ecx
add %ecx,%eax
imul %r8d,%edx
imul %esi,%edx
imul %edx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (a4 < a1)
        {
            v6 += a5 * a1 + a3;
        }
        else
        {
            v6 += a1 - (a2 + a4);
        }
    }
    v8 = a4 * a3;
    v9 = a2 * (a3 * a5 * a2);
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 18
5 16
6 18
7 17
8 17
9 17
10 18
11 19
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (a5 < a3)
        {
            v6 += a5 - a3 * a5;
        }
        else
        {
            v6 += a5 - a5 * a2;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        if (v8 < a1)
        {
            v8 += a4 - a4 - a4;
        }
        else
        {
            v8 += a5 - a3;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 28
2 28
3 28
4 28
5 29
<<<sep_out_sample>>>
test %edi,%edi
jle 14 <func1+0x14>
mov %edi,%r9d
sub %ecx,%r9d
sub $0x1,%r9d
imul %r8d,%r9d
jmp 24 <func1+0x24>
mov %r8d,%r9d
sub %edx,%r9d
mov %ecx,%r10d
imul %edi,%r10d
sub %r10d,%r9d
test %r8d,%r8d
jle 32 <func1+0x32>
mov %esi,%eax
imul %esi,%eax
add %ecx,%eax
jmp 39 <func1+0x39>
lea (%rdi,%rcx,1),%eax
add %esi,%eax
sub %edx,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %r9d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (a5 < a1)
        {
            v6 += (a4 - a4) - a3;
        }
        else
        {
            v6 += (a3 * a4) + a2;
        }
    }
    if (v8 < a1)
    {
        v8 = (a1 - a4) * a5 - a5;
    }
    else
    {
        v8 = (a5 - a3) - a4 * a1;
    }
    if (v9 < a5)
    {
        v9 = (a2 * a2) + a4;
    }
    else
    {
        v9 = a1 + a4 + a2 - a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 18
7 18
8 22
9 22
10 22
11 22
12 22
13 24
14 24
15 26
16 26
17 26
18 26
19 30
20 30
21 30
22 32
23 32
24 32
25 32
26 32
27 32
28 33
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a2 * a1 + a2;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        if (a5 < a4)
        {
            v8 += a3 - a4;
        }
        else
        {
            v8 += a5 * a3 - a1;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 21
5 22
<<<sep_out_sample>>>
lea (%r8,%rcx,1),%r9d
mov %esi,%eax
imul %r8d,%eax
add %eax,%r9d
lea (%rcx,%rdi,1),%eax
cmp %edx,%esi
jg 26 <func1+0x26>
mov %r8d,%eax
imul %ecx,%eax
imul %esi,%eax
mov %edi,%r11d
sub %eax,%r11d
mov %r11d,%eax
mov %esi,%r10d
imul %edx,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a5 + a4 + a2 * a5;
    if (a3 < a2)
    {
        v7 = a4 + a1;
    }
    else
    {
        v7 = a1 - a5 * a4 * a2;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        if (a4 < a5)
        {
            v8 += a3 + a3 + a4;
        }
        else
        {
            v8 += a2 - (a2 + a4);
        }
    }
    v10 = a2 * a3;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 7
6 5
7 5
8 11
9 11
10 11
11 11
12 11
13 11
14 25
15 25
16 26
17 26
18 26
19 26
20 26
21 26
22 26
23 27
<<<sep_out_sample>>>
mov %r8d,%eax
cmp %ecx,%esi
jl f <func1+0xf>
mov %edx,%eax
imul %edx,%eax
add %r8d,%eax
mov %esi,%r9d
sub %r8d,%r9d
cmp %edi,%eax
jl 20 <func1+0x20>
lea (%rdi,%r8,2),%r9d
add %ecx,%r9d
mov %ecx,%r10d
sub %esi,%r10d
imul %edi,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%eax
lea 0x1(%r9,%rax,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a2 < a4)
    {
        v6 = a5 + (a4 - a4) * a1;
    }
    else
    {
        v6 = a5 + (a3 * a3);
    }
    if (v6 < a1)
    {
        v7 = a2 - a5;
    }
    else
    {
        v7 = (a5 + a5) + a1 + a4;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        if (v7 < a5)
        {
            v8 += a2 + a5;
        }
        else
        {
            v8 += (a5 - a3) + a3;
        }
    }
    v10 = a4 * a1 - (a1 * a2);
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 4
3 4
4 10
5 10
6 10
7 14
8 14
9 12
10 12
11 18
12 18
13 32
14 32
15 32
16 33
17 33
18 33
19 33
20 33
21 33
22 33
23 34
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %r8d,%edx
add %ecx,%edx
imul %edi,%esi
sub %r8d,%esi
imul %ecx,%esi
add %edx,%esi
add %ecx,%edi
lea 0x1(%rsi,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = ((a1 * a2) - a5) * a4;
    v7 = a1 + a4;
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += a4 - (a1 - a2);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 11
5 4
6 4
7 4
8 11
9 5
10 11
11 12
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%r10d
add %esi,%r10d
add %r8d,%r10d
mov %r8d,%r9d
sub %edi,%r9d
sub %edi,%r9d
add %r10d,%r9d
mov %edi,%eax
sub %esi,%eax
imul %eax,%ecx
sub %edi,%ecx
add %r9d,%ecx
add %r8d,%edi
sub %edx,%edi
lea (%rcx,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = ((a5 - a1) - a1) - a4;
    v7 = a4 * (a1 - a2) - a1;
    v8 = a5 + a1 - a3;
    v9 = 0;
    for (v10 = 0; v10++; v10<a1)
    {
        v9 += (a2 + a1) - a1;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 12
2 12
3 12
4 4
5 4
6 4
7 12
8 5
9 5
10 5
11 5
12 12
13 6
14 6
15 12
16 13
<<<sep_out_sample>>>
mov %r8d,%r9d
imul %r8d,%r9d
mov %ecx,%eax
imul %esi,%eax
add %eax,%r9d
test %esi,%esi
jle 20 <func1+0x20>
mov %esi,%eax
imul %edi,%eax
imul %edx,%eax
add %r8d,%eax
jmp 28 <func1+0x28>
mov %edx,%eax
imul %edi,%eax
imul %eax,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a5 * a5 + (a4 * a2);
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += a5 - a4 + a3;
    }
    if (v9 < a2)
    {
        v9 = a2 * a1 * a3 + a5;
    }
    else
    {
        v9 = (a3 * a1 * a1) * a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 4
6 10
7 10
8 12
9 12
10 12
11 12
12 12
13 16
14 16
15 16
16 18
17 18
18 18
19 18
20 18
21 18
22 19
<<<sep_out_sample>>>
lea (%rsi,%rsi,1),%eax
sub %ecx,%eax
sub %r8d,%eax
cmp %edi,%r8d
jle 16 <func1+0x16>
mov %edx,%r9d
imul %edx,%r9d
jmp 21 <func1+0x21>
lea (%rcx,%rdx,1),%r9d
add %esi,%r9d
imul %esi,%r9d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = (a2 + a2) - a4 - a5;
    if (a1 < a5)
    {
        v7 = a3 * a3;
    }
    else
    {
        v7 = (a4 + a3 + a2) * a2;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 5
5 5
6 7
7 7
8 7
9 11
10 11
11 11
12 13
13 13
14 13
15 13
16 13
17 13
18 14
<<<sep_out_sample>>>
lea (%r8,%rcx,1),%r9d
cmp %esi,%r8d
jl 14 <func1+0x14>
lea (%rdx,%rsi,1),%r9d
imul %r8d,%r9d
add %esi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
add %r8d,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a5 < a2)
    {
        v6 = a5 + a4 + a1 - a1;
    }
    else
    {
        v6 = (a3 + a2) * a5 + a2;
    }
    v7 = a5 + a2;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 4
3 4
4 10
5 10
6 10
7 13
8 13
9 13
10 13
11 13
12 12
13 13
14 14
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
imul %edx,%ecx
add %eax,%ecx
imul %edx,%r8d
add %ecx,%r8d
mov %esi,%eax
imul %esi,%eax
add %eax,%edx
sub %esi,%edx
lea (%r8,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a1 - a1 + a3 * a4;
    v7 = a3 * a5;
    v8 = a2 * a2 + a3 - a2;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 7
2 7
3 7
4 7
5 4
6 7
7 5
8 7
9 6
10 6
11 6
12 6
13 7
14 8
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%r9d
cmp %r8d,%ecx
jge 17 <func1+0x17>
mov %r8d,%eax
imul %edx,%eax
imul %r8d,%eax
add %ecx,%eax
jmp 23 <func1+0x23>
mov %edi,%eax
imul %r8d,%eax
imul %edx,%eax
imul %esi,%eax
cmp %r8d,%ecx
jle 33 <func1+0x33>
mov %r8d,%r10d
sub %ecx,%r10d
add %esi,%r10d
jmp 3e <func1+0x3e>
lea (%rdi,%rdi,1),%r10d
imul %r8d,%r10d
add %ecx,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = (a3 - a4) + a1 + a4;
    if (a4 < a5)
    {
        v7 = a4 + a5 * a3 * a5;
    }
    else
    {
        v7 = a3 * (a1 * a5) * a2;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        if (v6 < a3)
        {
            v8 += a5 * a2;
        }
        else
        {
            v8 += a2 + a4 * a4;
        }
    }
    if (a5 < a4)
    {
        v10 = (a5 - a4) + a2;
    }
    else
    {
        v10 = a5 * (a1 + a1) + a4;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 5
3 5
4 7
5 7
6 7
7 7
8 7
9 11
10 11
11 11
12 11
13 25
14 25
15 27
16 27
17 27
18 27
19 31
20 31
21 31
22 33
23 33
24 33
25 33
26 33
27 33
28 33
29 34
<<<sep_out_sample>>>
lea (%rdx,%r8,1),%r9d
lea (%rdx,%rcx,1),%r10d
cmp %edi,%esi
jl 13 <func1+0x13>
mov %edi,%r10d
imul %ecx,%r10d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
add %r10d,%eax
imul %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a3 + a5;
    if (a2 < a1)
    {
        v7 = a3 + a4 - a1 + a1;
    }
    else
    {
        v7 = a1 * a4;
    }
    v8 = a4 * (a5 + a3);
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 7
3 5
4 5
5 11
6 11
7 14
8 14
9 14
10 14
11 14
12 14
13 13
14 14
15 15
<<<sep_out_sample>>>
mov %esi,%eax
imul %ecx,%eax
add %edi,%eax
imul %r8d,%eax
lea 0x1(%rdi,%rax,1),%eax
add %eax,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (v7 < a1)
        {
            v6 += a5 - a1 * a4;
        }
        else
        {
            v6 += (a3 * a2) * a5;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += a4 + a4;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a5)
    {
        v10 += a3 + a5 + a3;
    }
    v12 = (a1 + a2 * a4) * a5;
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 26
2 26
3 26
4 26
5 27
6 27
7 27
8 27
9 27
10 28
<<<sep_out_sample>>>
mov %edi,%r10d
imul %ecx,%r10d
mov %r8d,%eax
imul %edx,%eax
add %eax,%r10d
lea (%rcx,%r8,2),%r9d
sub %edi,%r9d
lea (%rdi,%rdi,1),%eax
cmp %r9d,%ecx
jle 27 <func1+0x27>
lea 0x1(%rcx),%eax
imul %edx,%eax
sub %edi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r10d,%ecx
add %ecx,%r9d
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a5 < a5)
    {
        v6 = a1 - a4;
    }
    else
    {
        v6 = a1 * a4 + a5 * a3;
    }
    if (a1 < a1)
    {
        v7 = a2 - a4 - a5;
    }
    else
    {
        v7 = a5 + a4 + a5 - a1;
    }
    if (v7 < a4)
    {
        v8 = (a3 * a4) + a3 - a1;
    }
    else
    {
        v8 = a1 + a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 10
6 18
7 18
8 26
9 20
10 20
11 22
12 22
13 22
14 28
15 28
16 28
17 28
18 28
19 28
20 28
21 29
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a2 + a3 + a5;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        if (a1 < a1)
        {
            v8 += (a3 - a5) + a5;
        }
        else
        {
            v8 += a4 + a1 + a5;
        }
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a3)
    {
        if (a4 < a5)
        {
            v10 += a2 + a1;
        }
        else
        {
            v10 += a4 + a1 + a3;
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 33
2 33
3 33
4 33
5 34
<<<sep_out_sample>>>
cmp %esi,%r8d
jge e <func1+0xe>
mov %esi,%r9d
imul %edi,%r9d
jmp 15 <func1+0x15>
mov %esi,%r9d
imul %esi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
imul %ecx,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a5 < a2)
    {
        v6 = a2 * a1;
    }
    else
    {
        v6 = a2 * a2 - a1 + a1;
    }
    v7 = a3 * a4;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 13
9 13
10 13
11 13
12 13
13 12
14 13
15 14
<<<sep_out_sample>>>
push %rbx
mov %r8d,%r9d
sub %esi,%r9d
lea (%r9,%rcx,1),%ebx
sub %edi,%ebx
mov %r8d,%r11d
sub %edi,%r11d
sub %ecx,%r11d
mov %edx,%r10d
sub %esi,%r10d
cmp %ecx,%esi
jl 2f <func1+0x2f>
mov %r8d,%eax
imul %ecx,%eax
imul %edi,%eax
mov %ecx,%r10d
sub %eax,%r10d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %ebx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = ((a5 - a2) + a4) - a1;
    v7 = a5 - a1 - a4;
    if (a2 < a4)
    {
        v8 = (a1 - a2) + a3 - a1;
    }
    else
    {
        v8 = a4 - (a5 * a4) * a1;
    }
    v9 = a5 - a2;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 4
3 4
4 4
5 4
6 5
7 5
8 5
9 8
10 8
11 6
12 6
13 12
14 12
15 12
16 12
17 12
18 15
19 15
20 15
21 15
22 15
23 15
24 15
25 15
26 16
27 16
<<<sep_out_sample>>>
cmp $0x1,%r8d
jle f <func1+0xf>
mov %r8d,%r9d
imul %edx,%r9d
jmp 16 <func1+0x16>
mov %esi,%r9d
imul %r8d,%r9d
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (a5 < a5)
        {
            v6 += (a3 * a3) * a4;
        }
        else
        {
            v6 += a3 + a4 * a2;
        }
    }
    if (v7 < a5)
    {
        v8 = a5 * a3;
    }
    else
    {
        v8 = a2 * a5;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        if (a4 < a1)
        {
            v9 += (a2 - a1) * a3;
        }
        else
        {
            v9 += a5 - a3 - a4;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 22
7 22
8 36
9 36
10 36
11 36
12 36
13 37
<<<sep_out_sample>>>
mov %r8d,%eax
sub %edi,%eax
lea (%rsi,%rcx,1),%r11d
cmp %esi,%edx
cmovl %eax,%r11d
test %edx,%edx
jle 1e <func1+0x1e>
mov %edx,%r10d
sub %r8d,%r10d
add %esi,%r10d
jmp 25 <func1+0x25>
mov %esi,%r10d
imul %edx,%r10d
test %edx,%edx
jle 36 <func1+0x36>
lea 0x1(%r8),%r9d
imul %esi,%r9d
sub %ecx,%r9d
jmp 43 <func1+0x43>
mov %ecx,%r9d
sub %esi,%r9d
imul %edx,%r9d
sub %edi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a3 < a2)
    {
        v6 = a5 - a1;
    }
    else
    {
        v6 = a2 + a4;
    }
    if (v7 < a3)
    {
        v7 = a3 - a5 + a2;
    }
    else
    {
        v7 = a2 * a3 + a5 - a5;
    }
    if (v8 < a3)
    {
        v8 = ((a5 * a2) + a2) - a4;
    }
    else
    {
        v8 = ((a4 - a2) * a3) - a1;
    }
    if (a2 < a2)
    {
        v9 = ((a3 - a5) - a3) * a4;
    }
    else
    {
        v9 = a5 * ((a4 - a4) * a1);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 6
6 12
7 12
8 14
9 14
10 14
11 14
12 18
13 18
14 20
15 20
16 22
17 22
18 22
19 22
20 26
21 26
22 26
23 26
24 36
25 36
26 36
27 36
28 36
29 36
30 36
31 37
<<<sep_out_sample>>>
cmp %edx,%edi
jge d <func1+0xd>
mov %ecx,%r9d
imul %esi,%r9d
jmp 1a <func1+0x1a>
mov %ecx,%r9d
sub %edx,%r9d
imul %edx,%r9d
add %r8d,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
mov %esi,%r8d
imul %esi,%r8d
sub %edx,%r8d
mov %r8d,%edx
add %edi,%edx
add %edx,%eax
mov %ecx,%edx
sub %edi,%edx
imul %edx,%ecx
add %ecx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a1 < a3)
    {
        v6 = a4 * a2;
    }
    else
    {
        v6 = (a4 - a3) * a3 + a5;
    }
    v7 = (a2 * a2) - a3 + a1;
    v8 = ((a4 - a1) * a4) + a2;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 10
10 14
11 14
12 14
13 14
14 14
15 12
16 12
17 12
18 12
19 12
20 14
21 13
22 13
23 13
24 13
25 14
26 15
<<<sep_out_sample>>>
lea 0x1(%r8),%eax
imul %edx,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (v6 < a4)
        {
            v6 += (a5 + a3) - a2;
        }
        else
        {
            v6 += a5 * a2;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += a4 * a2;
    }
    v10 = a5 * a3 + a3;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 22
4 22
5 22
6 22
7 22
8 23
<<<sep_out_sample>>>
mov %ecx,%r9d
imul %edi,%r9d
add $0x1,%r9d
imul %edi,%r9d
mov %esi,%eax
sub %edi,%eax
lea (%rax,%r8,1),%r10d
add %edi,%r10d
cmp %r8d,%edi
jg 33 <func1+0x33>
mov %r8d,%r10d
imul %esi,%r10d
imul %r8d,%r10d
mov %edi,%r11d
sub %r10d,%r11d
mov %r11d,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a1 * (a4 * a1) + a1;
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        if (a3 < a3)
        {
            v7 += a2 - (a5 * a5);
        }
        else
        {
            v7 += a4 * a1 + a1;
        }
    }
    if (a3 < a3)
    {
        v9 = a5 - (a4 + a3 - a4);
    }
    else
    {
        v9 = a2 - a1;
    }
    if (a5 < a1)
    {
        v10 = (a5 - (a1 - a2)) + a1;
    }
    else
    {
        v10 = a1 - a5 * a2 * a5;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 23
6 23
7 27
8 27
9 25
10 25
11 31
12 31
13 31
14 31
15 31
16 31
17 33
18 33
19 33
20 33
21 33
22 33
23 33
24 34
<<<sep_out_sample>>>
mov %edx,%eax
sub %ecx,%eax
cmp %r8d,%ecx
jge 15 <func1+0x15>
mov %edi,%eax
imul %r8d,%eax
imul %edx,%eax
sub %r8d,%eax
add %edi,%edx
add %esi,%edx
add %r8d,%edx
add %ecx,%edx
add %edx,%eax
add %edi,%esi
imul %r8d,%esi
imul %ecx,%esi
add %esi,%eax
sub %edi,%ecx
sub %edi,%ecx
add %ecx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a4 < a5)
    {
        v6 = a3 * (a1 * a5) - a5;
    }
    else
    {
        v6 = (a1 - a1 + a3) - a4;
    }
    v7 = (a1 + a2) * a5 * a4;
    if (a4 < a4)
    {
        v8 = (a4 + a1) + (a5 - a1);
    }
    else
    {
        v8 = a5 + ((a4 - a1) - a1);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 4
4 4
5 6
6 6
7 6
8 6
9 21
10 21
11 21
12 21
13 21
14 12
15 12
16 12
17 21
18 19
19 19
20 19
21 21
22 22
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
imul %ecx,%r8d
add %esi,%edi
mov %r8d,%esi
imul %edi,%esi
add %esi,%eax
imul %edx,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a4 * a5 * (a1 + a2);
    v7 = a3 * a4;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 4
7 4
8 4
9 6
10 5
11 6
12 7
<<<sep_out_sample>>>
mov %r8d,%eax
imul %ecx,%eax
imul %edx,%eax
sub %ecx,%eax
cmp %esi,%edi
jge 1b <func1+0x1b>
mov %ecx,%r9d
imul %esi,%r9d
add %edi,%r9d
jmp 2c <func1+0x2c>
mov $0x1,%r9d
sub %edi,%r9d
imul %esi,%r9d
imul %edi,%r9d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = (a5 * a4 * a3) - a4;
    if (a1 < a2)
    {
        v7 = a1 + a4 * a2;
    }
    else
    {
        v7 = (a2 - a1 * a2) * a1;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 5
6 5
7 7
8 7
9 7
10 7
11 11
12 11
13 11
14 11
15 13
16 13
17 13
18 13
19 13
20 13
21 14
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
cmp $0x1,%edx
jle d <func1+0xd>
lea (%rcx,%rdi,1),%eax
add %edx,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %r8d,%esi
lea 0x2(%rcx,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a1 - a3;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += a1 - (a1 + a5);
    }
    if (v7 < a3)
    {
        v10 = a3 + (a4 + a1);
    }
    else
    {
        v10 = a1 + a3;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 20
2 14
3 14
4 16
5 16
6 22
7 22
8 22
9 22
10 22
11 23
<<<sep_out_sample>>>
cmp %edx,%edi
jge 13 <func1+0x13>
mov %edx,%r9d
imul %esi,%r9d
sub %edi,%r9d
sub %edx,%r9d
jmp 20 <func1+0x20>
mov %ecx,%r9d
sub %esi,%r9d
add %ecx,%r9d
imul %esi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
imul %edi,%esi
add %esi,%eax
add %r8d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a1 < a3)
    {
        v6 = ((a3 * a2) - a1) - a3;
    }
    else
    {
        v6 = (a4 - a2 + a4) * a2;
    }
    v7 = a1 * a2;
    v8 = a5 + a3;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 14
13 14
14 14
15 14
16 14
17 12
18 14
19 13
20 14
21 15
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%r10d
cmp %esi,%r8d
jge 12 <func1+0x12>
lea (%r8,%r8,2),%r9d
add %edi,%r9d
jmp 1f <func1+0x1f>
mov %ecx,%r9d
sub %r8d,%r9d
add %ecx,%r9d
imul %ecx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a4 + a3 - (a4 - a1);
    if (a5 < a2)
    {
        v7 = a1 + ((a5 + a5) + a5);
    }
    else
    {
        v7 = a4 * (a4 - a5 + a4);
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 5
3 5
4 7
5 7
6 7
7 11
8 11
9 11
10 11
11 13
12 13
13 13
14 13
15 13
16 13
17 14
<<<sep_out_sample>>>
cmp %ecx,%r8d
jge 11 <func1+0x11>
mov %edi,%r10d
neg %r10d
imul %esi,%r10d
jmp 1b <func1+0x1b>
mov %edi,%r10d
sub %esi,%r10d
imul %edx,%r10d
mov %edx,%r9d
imul %edi,%r9d
add %esi,%r9d
add %r8d,%r9d
lea (%rsi,%rdi,1),%eax
test %edi,%edi
jg 35 <func1+0x35>
mov %r8d,%eax
imul %edx,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += (a3 * a2) * a1;
    }
    if (a5 < a4)
    {
        v8 = (a2 - a1 - a2) * a2;
    }
    else
    {
        v8 = a1 * a3 - a3 * a2;
    }
    v9 = (a3 * a1 + a2) + a5;
    if (v6 < a1)
    {
        v10 = a2 + a1;
    }
    else
    {
        v10 = a5 * a3;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 15
8 15
9 15
10 17
11 17
12 17
13 17
14 20
15 18
16 18
17 24
18 24
19 26
20 26
21 26
22 26
23 26
24 26
25 26
26 27
<<<sep_out_sample>>>
cmp %r8d,%esi
jge c <func1+0xc>
mov %edi,%eax
sub %r8d,%eax
jmp 13 <func1+0x13>
mov %esi,%eax
imul %ecx,%eax
sub %edi,%eax
mov $0x0,%r9d
cmp %esi,%eax
jge 2c <func1+0x2c>
mov %edx,%r9d
imul %r8d,%r9d
imul %ecx,%r9d
imul %r8d,%r9d
add %edx,%edi
add %edi,%esi
add %r8d,%esi
add %ecx,%esi
add %esi,%eax
add %r9d,%eax
imul %edx,%ecx
sub %ecx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a2 < a5)
    {
        v6 = a1 - a5;
    }
    else
    {
        v6 = a2 * a4 - a1;
    }
    if (v6 < a2)
    {
        v7 = a3 * a5 * a4 * a5;
    }
    else
    {
        v7 = (a5 - a1) - a5 + a1;
    }
    v8 = a5 - (a3 * a4);
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 18
10 12
11 12
12 14
13 14
14 14
15 14
16 21
17 21
18 21
19 21
20 21
21 21
22 20
23 20
24 21
25 22
<<<sep_out_sample>>>
lea (%rsi,%rcx,1),%r10d
cmp %edi,%ecx
jge 11 <func1+0x11>
mov %esi,%r9d
imul %esi,%r9d
jmp 18 <func1+0x18>
mov %edi,%r9d
imul %edi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
sub %ecx,%edx
add %eax,%edx
sub %esi,%edi
add %edi,%r8d
sub %esi,%r8d
lea (%rdx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a2 + a4;
    if (a4 < a1)
    {
        v7 = ((a2 - a1) + a1) * a2;
    }
    else
    {
        v7 = a1 * a1;
    }
    v8 = a3 - a4;
    v9 = (a1 - a2 + a5) - a2;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 5
3 5
4 7
5 7
6 7
7 11
8 11
9 15
10 15
11 15
12 15
13 15
14 15
15 13
16 15
17 14
18 14
19 14
20 15
21 16
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%r9d
add %esi,%r9d
add %r8d,%r9d
add %ecx,%r9d
lea (%rdi,%rsi,1),%eax
add %r8d,%eax
sub %edx,%eax
add %r9d,%eax
add %edx,%esi
imul %esi,%r8d
sub %ecx,%r8d
add %eax,%r8d
lea (%r8,%rdi,2),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a2 < a2)
    {
        v6 = (a2 * a4) + a3 - a1;
    }
    else
    {
        v6 = (a1 + a2 + a5) - a3;
    }
    v7 = a5 * (a3 + a2) - a4;
    v8 = a1 + (a4 - a4 + a1);
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        v9 += a1 - (a5 * a4);
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 19
2 19
3 19
4 19
5 10
6 10
7 10
8 19
9 12
10 12
11 12
12 19
13 19
14 20
<<<sep_out_sample>>>
cmp %r8d,%ecx
jge 12 <func1+0x12>
mov %r8d,%r9d
imul %esi,%r9d
imul %edi,%r9d
jmp 20 <func1+0x20>
mov %ecx,%r9d
sub %edi,%r9d
imul %edi,%r9d
imul %edx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
imul %edx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a4 < a5)
    {
        v6 = (a5 * a2) * a1;
    }
    else
    {
        v6 = ((a4 - a1) * a1) * a3;
    }
    v7 = (a3 * a5) - (a2 - a2);
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 10
11 13
12 13
13 13
14 13
15 13
16 12
17 13
18 14
<<<sep_out_sample>>>
mov %r8d,%r9d
sub %esi,%r9d
mov %edi,%eax
sub %edx,%eax
lea (%rdx,%rdx,1),%r10d
cmp %edx,%r9d
cmovl %eax,%r10d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
lea (%r9,%r10,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a5 - a2;
    if (v6 < a3)
    {
        v7 = a3 - (a3 + (a3 - a1));
    }
    else
    {
        v7 = a3 + a3;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 7
4 7
5 7
6 7
7 7
8 13
9 13
10 13
11 13
12 13
13 13
14 14
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += (a3 * a5) + a3;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += a5 - a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 14
2 14
3 14
4 14
5 15
<<<sep_out_sample>>>
mov $0x0,%r9d
mov %edi,%eax
imul %esi,%eax
cmp %ecx,%edi
cmovl %eax,%r9d
mov %edi,%eax
sub %ecx,%eax
mov %edi,%r10d
sub %edx,%r10d
test %edi,%edi
cmovle %r10d,%eax
add %edx,%edi
add %edi,%esi
add %r8d,%esi
add %esi,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a1 < a4)
    {
        v6 = a1 * a2;
    }
    else
    {
        v6 = a5 - ((a4 + a5) - a4);
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += a1 * (a5 + a4);
    }
    if (v7 < a1)
    {
        v9 = a1 - a2 + (a2 - a4);
    }
    else
    {
        v9 = a1 - a3 - a3 + a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 6
3 6
4 6
5 6
6 19
7 19
8 19
9 19
10 19
11 19
12 25
13 25
14 25
15 25
16 25
17 25
18 26
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
lea 0x1(%rcx,%rax,1),%eax
imul %edi,%ecx
add %ecx,%edx
add %edi,%edx
add %edx,%eax
sub %edi,%r8d
imul %r8d,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a2 + a1 + a1;
    }
    v8 = (a3 + (a1 * a4)) + a1;
    v9 = (a5 - a1) * a2;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 11
5 9
6 9
7 9
8 11
9 10
10 10
11 11
12 12
<<<sep_out_sample>>>
mov %ecx,%r9d
imul %esi,%r9d
sub %r8d,%r9d
mov %ecx,%eax
cmp %r8d,%esi
jge 18 <func1+0x18>
lea (%rdx,%rdi,1),%eax
sub %esi,%eax
add %edi,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = a4 * a2 - a5;
    if (a2 < a5)
    {
        v7 = (a3 + a1 - a2) + a1;
    }
    else
    {
        v7 = a4 - a5 + a5;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        if (a2 < a1)
        {
            v8 += a4 + a4 + a3;
        }
        else
        {
            v8 += a4 * a5 + a3;
        }
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a5)
    {
        v10 += a5 * a1 + a1;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 11
5 5
6 5
7 7
8 7
9 7
10 30
11 30
12 30
13 30
14 30
15 30
16 31
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %r8d,%edx
add %ecx,%edx
mov %esi,%eax
not %eax
imul %ecx,%eax
add %esi,%eax
add %edx,%eax
add %r8d,%esi
imul %esi,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a2 - (a4 + (a2 * a4));
    v7 = (a5 + a2) * a4;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 4
7 4
8 4
9 6
10 5
11 5
12 6
13 7
<<<sep_out_sample>>>
mov %edx,%eax
sub %edi,%eax
cmp %edx,%ecx
jge f <func1+0xf>
lea -0x1(%r8),%eax
imul %esi,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a4 < a3)
    {
        v6 = (a5 * a2) - a2;
    }
    else
    {
        v6 = a3 - a1;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += a3 - a2 * a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 4
4 4
5 6
6 6
7 17
8 17
9 17
10 17
11 17
12 18
<<<sep_out_sample>>>
add %edi,%edx
add %edx,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%edx
add %r8d,%edi
imul %ecx,%r8d
sub %r8d,%edi
lea (%rdx,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a1 + a4 + a2;
    }
    v8 = a1 + a5 - a4 * a5;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 9
6 9
7 9
8 10
9 11
<<<sep_out_sample>>>
push %rbp
push %rbx
lea (%rcx,%rdx,1),%r9d
cmp %ecx,%esi
jge 14 <func1+0x14>
mov %edi,%r9d
imul %edi,%r9d
neg %r9d
mov %edx,%ebx
imul %edi,%ebx
imul %esi,%ebx
imul %edx,%ebx
cmp %edx,%r9d
jge 33 <func1+0x33>
mov %esi,%r11d
imul %ecx,%r11d
add %edi,%r11d
sub %r8d,%r11d
jmp 42 <func1+0x42>
mov %r8d,%r11d
imul %ecx,%r11d
imul %ecx,%r11d
imul %ecx,%r11d
cmp %r8d,%edi
jge 53 <func1+0x53>
mov %r8d,%r10d
sub %ecx,%r10d
imul %r8d,%r10d
jmp 62 <func1+0x62>
mov %ecx,%r10d
imul %ecx,%r10d
mov %esi,%ebp
imul %esi,%ebp
sub %ebp,%r10d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
add %ebx,%eax
add %r11d,%eax
add %r10d,%eax
pop %rbx
pop %rbp
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a2 < a4)
    {
        v6 = a3 - a3 - a1 * a1;
    }
    else
    {
        v6 = a4 + a3;
    }
    if (a4 < a4)
    {
        v7 = (a3 - (a2 * a2)) + a3;
    }
    else
    {
        v7 = ((a3 * a1) * a2) * a3;
    }
    if (v6 < a3)
    {
        v8 = a2 * a4 + a1 - a5;
    }
    else
    {
        v8 = a4 * (a5 * a4) * a4;
    }
    if (a1 < a5)
    {
        v9 = a5 * a5 - (a4 * a5);
    }
    else
    {
        v9 = a4 * a4 - a2 * a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 2
3 10
4 4
5 4
6 6
7 6
8 6
9 18
10 18
11 18
12 18
13 20
14 20
15 22
16 22
17 22
18 22
19 22
20 26
21 26
22 26
23 26
24 28
25 28
26 30
27 30
28 30
29 30
30 34
31 34
32 34
33 34
34 34
35 36
36 36
37 36
38 36
39 36
40 36
41 36
42 36
43 37
44 37
45 37
<<<sep_out_sample>>>
add %edi,%edx
add %edx,%esi
add %r8d,%esi
lea (%rdi,%rcx,2),%eax
lea 0x1(%rsi,%rax,1),%eax
imul %r8d,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a5 + a4 + a1 - a5;
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a4 - a3 - a2;
    }
    v9 = a5 * a5;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 4
5 11
6 10
7 11
8 12
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
lea 0x1(%rcx,%r8,1),%r8d
mov %esi,%eax
imul %edi,%eax
imul %ecx,%eax
imul %ecx,%eax
add %r8d,%eax
imul %ecx,%edx
imul %edi,%edx
imul %edx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (a4 < a3)
        {
            v6 += (a2 + a4) - a5;
        }
        else
        {
            v6 += a1 * a5 * a3;
        }
    }
    v8 = ((a2 * a1) * a4) * a4;
    v9 = (a4 * a3) * a1 * a1;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 18
5 16
6 16
7 16
8 16
9 18
10 17
11 17
12 17
13 18
14 19
<<<sep_out_sample>>>
test %edx,%edx
jle d <func1+0xd>
mov %esi,%r9d
imul %edx,%r9d
jmp 14 <func1+0x14>
lea (%rdi,%r8,1),%r9d
add %esi,%r9d
cmp %r8d,%edi
jge 25 <func1+0x25>
mov %r8d,%eax
imul %ecx,%eax
sub %esi,%eax
add %ecx,%eax
jmp 30 <func1+0x30>
mov %r8d,%eax
sub %edx,%eax
add $0x1,%eax
imul %edx,%eax
mov %edi,%r10d
imul %edx,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (v6 < a3)
    {
        v6 = a2 * a3;
    }
    else
    {
        v6 = a2 + (a1 + a5);
    }
    if (a1 < a5)
    {
        v7 = (a5 * a4 - a2) + a4;
    }
    else
    {
        v7 = a3 - a3 * (a3 - a5);
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        if (v9 < a5)
        {
            v8 += (a2 * a5) * a5;
        }
        else
        {
            v8 += a5 * a2 * a5;
        }
    }
    v10 = a1 * a3;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 12
9 12
10 14
11 14
12 14
13 14
14 14
15 18
16 18
17 18
18 18
19 32
20 32
21 33
22 33
23 33
24 33
25 33
26 33
27 33
28 34
<<<sep_out_sample>>>
cmp %esi,%ecx
jge f <func1+0xf>
lea 0x1(%rdx),%eax
imul %edi,%eax
imul %ecx,%eax
jmp 22 <func1+0x22>
mov %edi,%r9d
imul %r8d,%r9d
mov $0x1,%eax
sub %r9d,%eax
imul %r8d,%eax
add %edx,%edi
add %edi,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%ecx
add %ecx,%eax
sub %r8d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a1 * a5;
    }
    if (a4 < a2)
    {
        v8 = (a1 + (a3 * a1)) * a4;
    }
    else
    {
        v8 = a5 - (a1 * a5 * a5);
    }
    if (a1 < a1)
    {
        v9 = a5 * a2 + a3 - a4;
    }
    else
    {
        v9 = a3 - a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 15
8 15
9 15
10 15
11 15
12 25
13 25
14 25
15 25
16 25
17 23
18 25
19 26
<<<sep_out_sample>>>
lea 0x2(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
lea 0x1(%rcx,%rax,1),%eax
add %r8d,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += (a1 - a1) + a1;
    }
    v8 = a2 + a5;
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        v9 += (a2 - a3) * a4;
    }
    v11 = 0;
    for (v12 = 0; v12++; v12<a2)
    {
        if (v10 < a1)
        {
            v11 += a3 - a5 + a4;
        }
        else
        {
            v11 += a2 + a3 * a4;
        }
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 27
2 27
3 27
4 27
5 9
6 27
7 28
<<<sep_out_sample>>>
mov %ecx,%r9d
sub %edx,%r9d
mov %esi,%eax
imul %esi,%eax
sub %eax,%r9d
cmp %r8d,%ecx
jle 1e <func1+0x1e>
mov %esi,%r11d
sub %edi,%r11d
add %r8d,%r11d
jmp 25 <func1+0x25>
mov %edx,%r11d
imul %ecx,%r11d
mov %r8d,%r10d
sub %ecx,%r10d
cmp %edi,%r9d
jl 3a <func1+0x3a>
mov %ecx,%r10d
sub %esi,%r10d
imul %edx,%r10d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
add %r11d,%eax
add %r10d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a4 - a3 - a2 * a2;
    if (a5 < a4)
    {
        v7 = a5 + (a2 - a1);
    }
    else
    {
        v7 = a3 * a4;
    }
    if (v6 < a1)
    {
        v8 = a5 - a4;
    }
    else
    {
        v8 = (a4 - a2) * a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 4
6 5
7 5
8 7
9 7
10 7
11 7
12 11
13 11
14 15
15 15
16 13
17 13
18 19
19 19
20 19
21 21
22 21
23 21
24 21
25 21
26 21
27 21
28 22
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %edx,%r8d
add %r8d,%ecx
add %esi,%edi
mov $0x1,%eax
sub %edi,%eax
imul %eax,%esi
lea 0x1(%rcx,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a2 - (a2 * (a1 + a2));
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a4 + a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 4
6 4
7 4
8 4
9 10
10 11
<<<sep_out_sample>>>
mov %esi,%r9d
imul %edx,%r9d
imul %edi,%r9d
mov $0x0,%eax
cmp %edx,%esi
jle 1d <func1+0x1d>
mov %edi,%eax
sub %ecx,%eax
sub %ecx,%eax
sub %r8d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a1 * (a2 * a3);
    if (a3 < a2)
    {
        v7 = (a1 - a4) - a4 - a5;
    }
    else
    {
        v7 = a5 - a5;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += a4 + a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 11
5 5
6 5
7 7
8 7
9 7
10 7
11 18
12 18
13 18
14 18
15 18
16 18
17 19
<<<sep_out_sample>>>
cmp %edi,%ecx
jge 10 <func1+0x10>
lea -0x1(%rsi),%eax
imul %r8d,%eax
imul %edx,%eax
jmp 1c <func1+0x1c>
mov %edx,%eax
imul %r8d,%eax
add %esi,%eax
imul %r8d,%eax
add %edi,%edx
add %esi,%edx
add %r8d,%edx
lea 0x1(%rcx,%rdx,1),%edx
add %edx,%eax
sub %r8d,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (a5 < a2)
        {
            v6 += a4 * a4 - a1;
        }
        else
        {
            v6 += a2 * (a2 - a5);
        }
    }
    if (a4 < a1)
    {
        v8 = ((a5 * a2) - a5) * a3;
    }
    else
    {
        v8 = (a3 * a5 + a2) * a5;
    }
    v9 = (a2 - a1 - a5) + a1;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 18
7 22
8 22
9 22
10 22
11 25
12 25
13 25
14 25
15 25
16 24
17 25
18 26
<<<sep_out_sample>>>
push %rbx
mov $0x0,%r9d
cmp %ecx,%edx
jl 1a <func1+0x1a>
mov %esi,%eax
imul %edi,%eax
mov $0x1,%r9b
sub %eax,%r9d
imul %r8d,%r9d
cmp %esi,%edx
jle 28 <func1+0x28>
mov %ecx,%ebx
neg %ebx
imul %r8d,%ebx
jmp 30 <func1+0x30>
mov %r8d,%ebx
imul %edi,%ebx
add %ecx,%ebx
lea (%r8,%rdi,1),%r11d
cmp %edi,%r9d
mov $0x0,%eax
cmovge %eax,%r11d
cmp %ecx,%edx
jle 4d <func1+0x4d>
mov %ecx,%r10d
imul %edi,%r10d
jmp 57 <func1+0x57>
lea (%r8,%rsi,1),%r10d
lea (%rdx,%rdi,1),%eax
add %eax,%r10d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
add %ebx,%eax
add %r11d,%eax
add %r10d,%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a3 < a4)
    {
        v6 = a2 - a2;
    }
    else
    {
        v6 = a5 - (a2 * a1 * a5);
    }
    if (a2 < a3)
    {
        v7 = (a5 - a4 * a5) - a5;
    }
    else
    {
        v7 = a4 + a5 * a1;
    }
    if (v6 < a1)
    {
        v8 = a5 + a1;
    }
    else
    {
        v8 = a4 - a4;
    }
    if (a4 < a3)
    {
        v9 = (a4 * a1 - a1) + a1;
    }
    else
    {
        v9 = a5 + a2 + (a3 + a1);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 6
3 4
4 4
5 10
6 10
7 10
8 10
9 10
10 12
11 12
12 14
13 14
14 14
15 14
16 18
17 18
18 18
19 22
20 22
21 22
22 22
23 28
24 28
25 30
26 30
27 30
28 34
29 34
30 34
31 36
32 36
33 36
34 36
35 36
36 36
37 36
38 36
39 37
40 37
<<<sep_out_sample>>>
lea (%rdx,%rsi,1),%r10d
test %edx,%edx
jle f <func1+0xf>
lea (%rdx,%rsi,2),%r10d
add %ecx,%r10d
lea (%rcx,%r8,1),%r9d
imul %edx,%r9d
add %edi,%r9d
lea (%rcx,%rdi,1),%r11d
cmp %r9d,%edx
jg 2a <func1+0x2a>
mov %edi,%r11d
imul %ecx,%r11d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r10d
add %r10d,%r9d
lea (%r9,%r11,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (v6 < a3)
    {
        v6 = (a2 + a2 + a3) + a4;
    }
    else
    {
        v6 = (a2 - a4 + a4) + a3;
    }
    v7 = a1 + (a3 * (a4 + a5));
    if (v7 < a3)
    {
        v8 = a4 + a1;
    }
    else
    {
        v8 = a1 * a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 12
7 12
8 12
9 15
10 13
11 13
12 19
13 19
14 21
15 21
16 21
17 21
18 21
19 21
20 21
21 22
<<<sep_out_sample>>>
mov %esi,%eax
imul %esi,%eax
lea (%r8,%rcx,1),%r10d
lea (%rdi,%rdx,1),%r9d
cmp %esi,%edx
jge 1a <func1+0x1a>
mov %edi,%r9d
sub %ecx,%r9d
add %edx,%r9d
add %r9d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
add %r10d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (a3 < a2)
        {
            v6 += a5 * a5 * a3;
        }
        else
        {
            v6 += a5 + a4;
        }
    }
    v8 = a2 * a2;
    v9 = a5 + a4;
    if (a3 < a2)
    {
        v10 = a3 - (a4 - a1);
    }
    else
    {
        v10 = a1 + a3;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 17
4 24
5 18
6 18
7 20
8 20
9 20
10 26
11 26
12 26
13 26
14 26
15 26
16 26
17 27
<<<sep_out_sample>>>
cmp %r8d,%ecx
jge 14 <func1+0x14>
lea (%rsi,%rdx,1),%r9d
mov %edx,%eax
imul %r8d,%eax
add %eax,%r9d
jmp 1f <func1+0x1f>
lea (%r8,%rdx,1),%r9d
add %edi,%r9d
imul %r8d,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
add $0x1,%edi
imul %edi,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a4 < a5)
    {
        v6 = a2 + a3 + a3 * a5;
    }
    else
    {
        v6 = (a5 + a3 + a1) * a5;
    }
    v7 = a5 + a1 * a5;
    v8 = (a5 - a5) * a2 * a1;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 14
12 14
13 14
14 14
15 14
16 12
17 12
18 14
19 15
<<<sep_out_sample>>>
cmp %r8d,%esi
jge d <func1+0xd>
mov %esi,%r10d
sub %ecx,%r10d
jmp 19 <func1+0x19>
mov %edi,%r10d
sub %esi,%r10d
sub %r8d,%r10d
add %edx,%r10d
cmp %edi,%esi
jge 2a <func1+0x2a>
lea 0x1(%rdi),%r9d
imul %edx,%r9d
sub %r8d,%r9d
jmp 35 <func1+0x35>
lea (%r8,%rdx,1),%r9d
sub %ecx,%r9d
imul %esi,%r9d
add %edi,%edx
add %esi,%edx
add %r8d,%edx
add %ecx,%edx
add %r10d,%edx
add %r9d,%edx
imul %edi,%esi
mov %r8d,%eax
sub %esi,%eax
sub %edi,%eax
add %edx,%eax
imul %ecx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a2 < a5)
    {
        v6 = a2 - a4;
    }
    else
    {
        v6 = (a1 - a2 - a5) + a3;
    }
    if (a2 < a1)
    {
        v7 = a3 * a1 + a3 - a5;
    }
    else
    {
        v7 = (a5 + a3 - a4) * a2;
    }
    v8 = a5 - a1 * a2 - a1;
    v9 = a4 * a5;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 10
10 12
11 12
12 14
13 14
14 14
15 14
16 18
17 18
18 18
19 22
20 22
21 22
22 22
23 22
24 22
25 20
26 20
27 20
28 20
29 22
30 21
31 22
32 23
<<<sep_out_sample>>>
add %edi,%edx
add %edx,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%eax
sub %r8d,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a3 - a3 * a2;
    }
    v8 = a1 - a5;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 9
6 10
7 11
<<<sep_out_sample>>>
lea (%rdx,%rsi,2),%eax
mov $0x0,%r9d
mov %ecx,%r10d
imul %esi,%r10d
cmp %ecx,%edx
cmovl %r10d,%r9d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a2 < a2)
    {
        v6 = (a2 * a1) - a2 * a5;
    }
    else
    {
        v6 = a2 + (a3 + a2);
    }
    if (a3 < a4)
    {
        v7 = a4 * a2;
    }
    else
    {
        v7 = a4 - a4;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 10
2 18
3 14
4 14
5 14
6 14
7 20
8 20
9 20
10 20
11 20
12 20
13 21
<<<sep_out_sample>>>
lea (%rsi,%rdi,1),%r9d
imul %edi,%r9d
add %ecx,%r9d
cmp %r8d,%esi
jge 19 <func1+0x19>
mov %edi,%eax
imul %edx,%eax
sub %ecx,%eax
jmp 23 <func1+0x23>
lea 0x1(%r8),%eax
imul %ecx,%eax
sub %r8d,%eax
lea (%rdi,%rdx,1),%r10d
add %esi,%r10d
add %r10d,%r8d
add %ecx,%r8d
add %r9d,%r8d
add %r8d,%eax
sub %edi,%esi
imul %edx,%ecx
add %ecx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = (a2 + a1) * a1 + a4;
    if (a2 < a5)
    {
        v7 = a1 * a3 - a4;
    }
    else
    {
        v7 = a5 * a4 + a4 - a5;
    }
    v8 = a2 - a1 + a3 * a4;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 5
5 5
6 7
7 7
8 7
9 7
10 11
11 11
12 11
13 14
14 14
15 14
16 14
17 14
18 14
19 13
20 13
21 13
22 14
23 15
<<<sep_out_sample>>>
add %edi,%edx
lea (%rdx,%rsi,1),%eax
add %r8d,%eax
add %ecx,%eax
add %edx,%eax
sub %edi,%esi
add %esi,%eax
imul %r8d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a3 + a1;
    v7 = ((a4 - a1) + a2) - a4;
    v8 = a4 * a5;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 7
3 7
4 7
5 7
6 5
7 7
8 6
9 7
10 8
<<<sep_out_sample>>>
test %esi,%esi
mov %r8d,%eax
cmovle %edi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += (a5 - a2) + a2;
    }
    if (v8 < a2)
    {
        v8 = a5 - a5 * (a5 - a5);
    }
    else
    {
        v8 = (a4 * (a1 - a1)) + a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 17
5 17
6 17
7 17
8 17
9 18
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %r8d,%edx
add %ecx,%edx
mov %r8d,%eax
imul %ecx,%eax
sub %esi,%eax
add %edx,%eax
mov %edi,%edx
imul %edi,%edx
imul %edx,%esi
add %esi,%edi
add %edi,%eax
sub %ecx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a5 * a4 - a2;
    v7 = a1 + a1 * a1 * a2;
    if (a4 < a4)
    {
        v8 = (a4 - a4) * a1 * a2;
    }
    else
    {
        v8 = a5 - a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 14
2 14
3 14
4 14
5 4
6 4
7 4
8 14
9 5
10 5
11 5
12 5
13 14
14 12
15 14
16 15
<<<sep_out_sample>>>
test %esi,%esi
jle 10 <func1+0x10>
lea 0x1(%rdx),%eax
imul %r8d,%eax
imul %esi,%eax
jmp 16 <func1+0x16>
lea (%r8,%rcx,1),%eax
neg %eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a3 + a2;
    }
    if (v8 < a2)
    {
        v8 = (a5 * a3 + a5) * a2;
    }
    else
    {
        v8 = (a2 - (a5 + a4)) - a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 15
8 15
9 17
10 17
11 17
12 17
13 17
14 18
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %eax,%ecx
imul %r8d,%edi
imul %edi,%edx
add %edx,%esi
lea 0x1(%rcx,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = ((a5 * a1) * a3) + a2;
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += a5 - a1 * a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 4
6 4
7 4
8 10
9 11
<<<sep_out_sample>>>
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
imul %edi,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a4 * a1 + a5;
    }
    v8 = a1 * a1;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 9
6 10
7 11
<<<sep_out_sample>>>
cmp %ecx,%edx
jle d <func1+0xd>
mov %edx,%r9d
imul %ecx,%r9d
jmp 1d <func1+0x1d>
mov %edx,%r9d
sub %r8d,%r9d
mov %edx,%r10d
imul %r8d,%r10d
sub %r10d,%r9d
lea (%rdi,%r8,1),%eax
test %esi,%esi
jle 2f <func1+0x2f>
mov %edx,%eax
sub %r8d,%eax
sub %r8d,%eax
add %ecx,%eax
mov %r8d,%r10d
imul %edx,%r10d
imul %ecx,%r10d
imul %esi,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %r9d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a4 - a5 * a3;
    }
    if (a4 < a3)
    {
        v8 = a3 * a4;
    }
    else
    {
        v8 = a3 - a5 - (a3 * a5);
    }
    if (v6 < a2)
    {
        v9 = (a3 - a5) - a5 + a4;
    }
    else
    {
        v9 = a1 + a5 + a5 - a5;
    }
    v10 = ((a5 * a3) * a4) * a2;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 15
7 15
8 15
9 15
10 15
11 23
12 17
13 17
14 19
15 19
16 19
17 19
18 25
19 25
20 25
21 25
22 26
23 26
24 26
25 26
26 26
27 26
28 26
29 27
<<<sep_out_sample>>>
mov %edi,%r9d
imul %esi,%r9d
mov %edx,%eax
imul %edx,%eax
add %r9d,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (a3 < a4)
        {
            v6 += a2 - a5;
        }
        else
        {
            v6 += a4 - a4;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        if (a5 < a3)
        {
            v8 += (a4 - a5) * a3;
        }
        else
        {
            v8 += a5 * a2 + a2;
        }
    }
    v10 = a1 * a2 + a3 * a3;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 28
2 28
3 28
4 28
5 28
6 29
7 29
8 29
9 29
10 29
11 30
<<<sep_out_sample>>>
cmp %edi,%edx
jge 14 <func1+0x14>
mov %esi,%r9d
imul %r8d,%r9d
imul %r8d,%r9d
sub %edi,%r9d
jmp 1c <func1+0x1c>
lea 0x1(%rsi),%r9d
imul %ecx,%r9d
mov %ecx,%r10d
imul %edx,%r10d
mov %esi,%eax
imul %edi,%eax
add %r10d,%eax
cmp %edx,%r9d
jge 3d <func1+0x3d>
lea 0x1(%rdx),%r10d
imul %edi,%r10d
add %r8d,%r10d
jmp 49 <func1+0x49>
mov %ecx,%r10d
sub %r8d,%r10d
sub %edx,%r10d
sub %edx,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a3 < a1)
    {
        v6 = a2 * a5 * a5 - a1;
    }
    else
    {
        v6 = a4 + a4 * a2;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        if (a3 < a1)
        {
            v7 += a5 * a2 * a4;
        }
        else
        {
            v7 += (a5 + a3) - a1;
        }
    }
    v9 = (a4 * a3) + a2 * a1;
    if (v6 < a3)
    {
        v10 = (a1 + a1 * a3) + a5;
    }
    else
    {
        v10 = a4 - a5 - a3 - a3;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 24
11 24
12 24
13 24
14 24
15 25
16 25
17 27
18 27
19 27
20 27
21 31
22 31
23 31
24 31
25 33
26 33
27 33
28 33
29 33
30 33
31 33
32 34
<<<sep_out_sample>>>
cmp %ecx,%edi
jge 10 <func1+0x10>
mov %ecx,%r9d
sub %edi,%r9d
imul %edx,%r9d
jmp 1d <func1+0x1d>
mov %esi,%r9d
sub %edx,%r9d
add %ecx,%r9d
imul %r8d,%r9d
cmp %esi,%ecx
jle 31 <func1+0x31>
lea (%rsi,%rdx,1),%eax
mov %r8d,%r10d
sub %eax,%r10d
mov %r10d,%eax
sub %edi,%eax
jmp 38 <func1+0x38>
lea -0x1(%rcx,%rcx,1),%eax
imul %edi,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    if (a1 < a4)
    {
        v6 = (a4 - a1) * a3;
    }
    else
    {
        v6 = (a2 - a3 + a4) * a5;
    }
    if (a2 < a4)
    {
        v7 = a5 - (a2 + a3) - a1;
    }
    else
    {
        v7 = a1 * (a4 + a4) - a1;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += (a2 - a5) - a4;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a2)
    {
        v10 += a2 - a3 - a4;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 10
11 12
12 12
13 14
14 14
15 14
16 14
17 14
18 14
19 18
20 18
21 30
22 30
23 30
24 30
25 30
26 30
27 31
<<<sep_out_sample>>>
mov %edi,%r9d
imul %edx,%r9d
imul %edx,%r9d
add %r8d,%r9d
cmp %esi,%edi
jge 1a <func1+0x1a>
mov %r8d,%eax
imul %esi,%eax
jmp 22 <func1+0x22>
mov %esi,%eax
imul %edi,%eax
imul %esi,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = a3 * (a1 * a3) + a5;
    if (a1 < a2)
    {
        v7 = (a2 * a5 + a2) - a2;
    }
    else
    {
        v7 = a2 * a1 * a2;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        if (a4 < a1)
        {
            v8 += (a2 * a3) * a5;
        }
        else
        {
            v8 += (a1 + a2) - a1;
        }
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a5)
    {
        if (v7 < a5)
        {
            v10 += a3 + a1 - a1;
        }
        else
        {
            v10 += a3 * a3;
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 5
6 5
7 7
8 7
9 7
10 11
11 11
12 11
13 37
14 37
15 37
16 37
17 37
18 37
19 38
<<<sep_out_sample>>>
mov %edi,%r9d
imul %ecx,%r9d
sub %r8d,%r9d
imul %r8d,%r9d
mov %edx,%eax
sub %edi,%eax
cmp %r8d,%edi
cmovl %ecx,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = (a1 * a4 - a5) * a5;
    if (a1 < a5)
    {
        v7 = a4 - (a3 - a3);
    }
    else
    {
        v7 = (a3 - a3 + a3) - a1;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        if (a1 < a2)
        {
            v8 += a2 * a4 * a3;
        }
        else
        {
            v8 += a2 - a3 + a1;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 11
6 11
7 11
8 11
9 25
10 25
11 25
12 25
13 25
14 25
15 26
<<<sep_out_sample>>>
add %edx,%edi
add %esi,%edi
add %r8d,%edi
add %ecx,%edi
lea 0x1(%rdx),%eax
imul %ecx,%eax
imul %ecx,%eax
add %edi,%eax
mov %esi,%edi
imul %esi,%edi
add %edx,%edi
add %ecx,%edi
add %edi,%eax
imul %r8d,%edx
imul %edx,%ecx
add %ecx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a4 * (a3 * a4 + a4);
    v7 = ((a2 * a2) + a3) + a4;
    v8 = a3 * a5 * a4 + a2;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 7
2 7
3 7
4 7
5 4
6 4
7 4
8 7
9 5
10 5
11 5
12 5
13 7
14 6
15 6
16 6
17 7
18 8
<<<sep_out_sample>>>
cmp %ecx,%edi
jge c <func1+0xc>
mov %esi,%r9d
sub %edi,%r9d
jmp 18 <func1+0x18>
mov %ecx,%r9d
sub %edi,%r9d
sub %edx,%r9d
sub %edx,%r9d
mov %ecx,%eax
sub %esi,%eax
imul %esi,%eax
add %edi,%eax
test %esi,%esi
jle 2e <func1+0x2e>
mov %esi,%r10d
imul %edx,%r10d
jmp 35 <func1+0x35>
mov %r8d,%r10d
imul %edi,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a1 < a4)
    {
        v6 = (a2 - a1 - a5) + a5;
    }
    else
    {
        v6 = ((a4 - a1) - a3) - a3;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += a1 * a2;
    }
    if (a4 < a4)
    {
        v9 = (a1 + (a1 * a1)) + a1;
    }
    else
    {
        v9 = a1 - (a2 - a4) * a2;
    }
    if (v7 < a2)
    {
        v10 = a2 * a3;
    }
    else
    {
        v10 = a5 * a1;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 10
10 23
11 23
12 23
13 23
14 25
15 25
16 27
17 27
18 27
19 31
20 31
21 33
22 33
23 33
24 33
25 33
26 33
27 33
28 34
<<<sep_out_sample>>>
test %r8d,%r8d
jle 17 <func1+0x17>
mov %esi,%eax
imul %ecx,%eax
mov %edi,%r10d
sub %eax,%r10d
mov %r10d,%eax
add %esi,%eax
jmp 25 <func1+0x25>
mov %esi,%eax
sub %ecx,%eax
mov %edx,%r9d
imul %edi,%r9d
sub %r9d,%eax
lea (%rdi,%rdx,1),%r9d
add %r9d,%esi
add %r8d,%esi
add %ecx,%esi
add %eax,%esi
mov $0x1,%eax
sub %r8d,%eax
imul %eax,%edx
sub %ecx,%edx
lea (%rsi,%rdx,1),%eax
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (v6 < a5)
    {
        v6 = a2 - (a2 * a4 - a1);
    }
    else
    {
        v6 = a2 - a4 - a3 * a1;
    }
    v7 = a3 - (a3 * a5) - a4;
    v8 = (a4 - a4) * a4 + a1;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 6
9 6
10 10
11 10
12 10
13 10
14 10
15 14
16 14
17 14
18 14
19 14
20 12
21 12
22 12
23 12
24 14
25 14
26 15
<<<sep_out_sample>>>
push %rbx
cmp %r8d,%edi
jge 29 <func1+0x29>
mov %edi,%ebx
sub %esi,%ebx
mov %edx,%eax
imul %esi,%eax
mov %r8d,%r9d
sub %eax,%r9d
sub %ecx,%r9d
mov %esi,%r11d
imul %esi,%r11d
imul %edx,%r11d
imul %edi,%r11d
jmp 44 <func1+0x44>
mov %esi,%ebx
neg %ebx
mov %edx,%eax
imul %esi,%eax
mov %r8d,%r9d
sub %eax,%r9d
sub %ecx,%r9d
mov %ecx,%r11d
neg %r11d
sub %r8d,%r11d
lea (%rdi,%rcx,1),%r10d
cmp %r9d,%edx
jg 58 <func1+0x58>
lea 0x1(%rcx),%r10d
imul %edx,%r10d
sub %ecx,%r10d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %ebx,%eax
add %r9d,%eax
add %r11d,%eax
add %r10d,%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a1 < a5)
    {
        v6 = a2 - (a2 + (a2 - a1));
    }
    else
    {
        v6 = a1 * (a3 - a3) - a2;
    }
    v7 = (a5 - a3 * a2) - a4;
    if (a1 < a5)
    {
        v8 = (a2 * a2) * a3 * a1;
    }
    else
    {
        v8 = a2 - a4 - (a2 + a5);
    }
    if (v7 < a3)
    {
        v9 = a1 + a4;
    }
    else
    {
        v9 = ((a3 * a4) + a3) - a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 4
3 4
4 6
5 6
6 12
7 12
8 12
9 12
10 12
11 15
12 15
13 15
14 15
15 15
16 10
17 10
18 12
19 12
20 12
21 12
22 12
23 19
24 19
25 19
26 23
27 21
28 21
29 27
30 27
31 27
32 29
33 29
34 29
35 29
36 29
37 29
38 29
39 29
40 30
41 30
<<<sep_out_sample>>>
push %rbx
mov %ecx,%r10d
sub %esi,%r10d
mov %r8d,%r11d
imul %r8d,%r11d
lea (%rdi,%r8,1),%eax
sub %ecx,%eax
mov %r8d,%r9d
sub %edi,%r9d
mov %ecx,%ebx
imul %ecx,%ebx
cmp %edi,%r10d
cmovl %ebx,%r9d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r10d
add %r11d,%r10d
add %r10d,%eax
add %r9d,%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a4 - a2;
    v7 = ((a5 * a5) + a3) - a3;
    v8 = a1 + a5 - a4;
    if (v6 < a1)
    {
        v9 = a4 * a4;
    }
    else
    {
        v9 = a5 - a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 4
3 4
4 5
5 5
6 6
7 6
8 13
9 13
10 9
11 9
12 9
13 9
14 15
15 15
16 15
17 15
18 15
19 15
20 15
21 15
22 16
23 16
<<<sep_out_sample>>>
cmp %edi,%ecx
jge 13 <func1+0x13>
mov %ecx,%r9d
sub %edi,%r9d
imul %edi,%r9d
add %r8d,%r9d
jmp 1d <func1+0x1d>
mov %esi,%r9d
neg %r9d
imul %edx,%r9d
test %edi,%edi
jle 29 <func1+0x29>
mov %esi,%r10d
sub %r8d,%r10d
jmp 30 <func1+0x30>
mov %r8d,%r10d
imul %esi,%r10d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%eax
add %r10d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a4 < a1)
    {
        v6 = a5 + a1 * (a4 - a1);
    }
    else
    {
        v6 = ((a3 - a2) - a3) * a3;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += a3 + (a1 + a3);
    }
    if (v9 < a1)
    {
        v9 = (a2 + a1) - a1 - a5;
    }
    else
    {
        v9 = a5 * a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 17
12 17
13 19
14 19
15 19
16 23
17 23
18 25
19 25
20 25
21 25
22 25
23 25
24 26
<<<sep_out_sample>>>
cmp %edi,%edx
jge c <func1+0xc>
mov %ecx,%r9d
sub %esi,%r9d
jmp 18 <func1+0x18>
mov %edx,%r9d
sub %esi,%r9d
sub %ecx,%r9d
add %r8d,%r9d
lea (%rsi,%r8,1),%eax
cmp %ecx,%edi
jl 2b <func1+0x2b>
mov %edi,%eax
imul %ecx,%eax
imul %r8d,%eax
add %ecx,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a3 < a1)
    {
        v6 = a4 - a2;
    }
    else
    {
        v6 = (a3 - a2) - a4 + a5;
    }
    if (a1 < a4)
    {
        v7 = a5 + a3 - a3 + a2;
    }
    else
    {
        v7 = (a1 * a4) * a5 + a4;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += a1 - (a4 * a5);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 10
10 14
11 12
12 12
13 18
14 18
15 18
16 18
17 25
18 25
19 25
20 25
21 25
22 25
23 26
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
mov %esi,%r9d
imul %edi,%r9d
imul %esi,%r9d
add %r9d,%eax
imul %edi,%edi
imul %edx,%esi
sub %esi,%edi
add %eax,%edi
lea (%rdi,%rcx,2),%eax
imul %r8d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = (a2 * a1 * a2) - a4;
    v7 = a1 * a1 - a3 * a2;
    if (a5 < a5)
    {
        v8 = ((a4 - a5) + a1) - a2;
    }
    else
    {
        v8 = a4 + a4;
    }
    v9 = a3 * a5;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 15
2 15
3 15
4 4
5 4
6 4
7 15
8 5
9 5
10 5
11 15
12 15
13 14
14 15
15 16
<<<sep_out_sample>>>
mov %edx,%eax
sub %edi,%eax
test %edi,%edi
jle 14 <func1+0x14>
lea (%rcx,%rdx,1),%eax
mov %r8d,%r9d
sub %eax,%r9d
mov %r9d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
sub %edx,%ecx
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a5 - a5 - a3;
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += a5 * a4;
    }
    if (v9 < a1)
    {
        v9 = a5 - (a4 + a3);
    }
    else
    {
        v9 = a3 - a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 10
4 10
5 12
6 12
7 12
8 12
9 18
10 18
11 18
12 18
13 18
14 18
15 19
<<<sep_out_sample>>>
lea 0x1(%r8),%eax
imul %r8d,%eax
sub %ecx,%eax
lea 0x1(%rdi,%rax,1),%eax
add %eax,%edx
add %esi,%edx
add %edx,%r8d
add %ecx,%r8d
imul %esi,%ecx
lea 0x1(%r8,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = a4 * a2;
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        if (a3 < a4)
        {
            v7 += a1 - a2;
        }
        else
        {
            v7 += a5 + (a2 - a4);
        }
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        if (a3 < a5)
        {
            v9 += a5 + a2;
        }
        else
        {
            v9 += (a2 + a5) * a4;
        }
    }
    v11 = ((a5 * a5) + a5) - a4;
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 29
2 29
3 29
4 30
5 30
6 30
7 30
8 30
9 4
10 30
11 31
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %edi,%ecx
imul %esi,%edi
sub %edi,%ecx
lea 0x1(%rax,%rcx,1),%eax
imul %r8d,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = a1 + a4 - a1 * a2;
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        if (a4 < a2)
        {
            v7 += a2 * a5;
        }
        else
        {
            v7 += a5 - (a3 - a4);
        }
    }
    v9 = a5 * a2;
    v10 = 0;
    for (v11 = 0; v11++; v11<a1)
    {
        v10 += (a2 - a3) + a5;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 23
2 23
3 23
4 23
5 4
6 4
7 4
8 23
9 17
10 23
11 24
<<<sep_out_sample>>>
mov %r8d,%r11d
imul %edi,%r11d
add %ecx,%r11d
imul %r8d,%r11d
lea (%rdx,%rcx,1),%r10d
cmp %esi,%edi
jle 1f <func1+0x1f>
mov %ecx,%r9d
imul %ecx,%r9d
jmp 2c <func1+0x2c>
mov %r8d,%r9d
imul %edx,%r9d
sub %esi,%r9d
add %edx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = (a5 * a1 + a4) * a5;
    v7 = a3 + a4;
    if (a2 < a1)
    {
        v8 = a4 * a4;
    }
    else
    {
        v8 = a5 * a3 - a2 + a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 5
6 6
7 6
8 8
9 8
10 8
11 12
12 12
13 12
14 12
15 14
16 14
17 14
18 14
19 14
20 14
21 14
22 15
<<<sep_out_sample>>>
mov %r8d,%r9d
sub %ecx,%r9d
test %edi,%edi
jle 15 <func1+0x15>
mov %edi,%eax
sub %ecx,%eax
sub %r8d,%eax
add %edi,%eax
jmp 1b <func1+0x1b>
mov %edx,%eax
neg %eax
sub %ecx,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %r9d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (a5 < a5)
        {
            v6 += a3 - a2;
        }
        else
        {
            v6 += a4 + a1 * a2;
        }
    }
    v8 = (a5 + a1 - a4) - a1;
    if (v6 < a1)
    {
        v9 = ((a1 - a4) - a5) + a1;
    }
    else
    {
        v9 = (a5 - (a3 + a5)) - a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 17
4 17
5 19
6 19
7 19
8 19
9 19
10 23
11 23
12 23
13 25
14 25
15 25
16 25
17 25
18 25
19 26
<<<sep_out_sample>>>
lea (%rcx,%rcx,1),%eax
mov %ecx,%r9d
sub %esi,%r9d
add %edi,%eax
cmp %edi,%ecx
cmovl %r9d,%eax
mov %ecx,%r9d
imul %ecx,%r9d
imul %r8d,%r9d
imul %edx,%r9d
lea 0x1(%rdi,%r9,1),%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (a4 < a2)
        {
            v6 += a3 * a2 + a4;
        }
        else
        {
            v6 += a2 - a4 - a4;
        }
    }
    if (a4 < a1)
    {
        v8 = a4 - a2;
    }
    else
    {
        v8 = a4 + a4 + a1;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        if (v8 < a1)
        {
            v9 += a2 + (a3 + a2);
        }
        else
        {
            v9 += a3 - a4;
        }
    }
    v11 = (a4 * a4) * a5 * a3;
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 18
3 18
4 18
5 18
6 18
7 36
8 36
9 36
10 36
11 37
12 37
13 37
14 37
15 37
16 37
17 38
<<<sep_out_sample>>>
lea (%rcx,%rdi,1),%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
imul %r9d,%r8d
imul %r8d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a4 + a1;
    v7 = a5 * (a1 + a4) * a3;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 6
3 6
4 6
5 6
6 6
7 5
8 5
9 6
10 7
<<<sep_out_sample>>>
cmp %edx,%r8d
jge 12 <func1+0x12>
lea -0x1(%rsi),%r9d
imul %r8d,%r9d
add %edx,%r9d
jmp 1d <func1+0x1d>
mov %edx,%eax
imul %edx,%eax
mov %ecx,%r9d
sub %eax,%r9d
cmp %r8d,%r9d
jge 2a <func1+0x2a>
mov %edi,%r11d
sub %ecx,%r11d
jmp 3a <func1+0x3a>
mov $0x1,%r11d
sub %edi,%r11d
imul %esi,%r11d
add %ecx,%r11d
cmp %esi,%r8d
jle 4f <func1+0x4f>
mov %r8d,%r10d
imul %edi,%r10d
imul %edi,%r10d
add %edx,%r10d
jmp 5f <func1+0x5f>
mov $0x1,%r10d
sub %r8d,%r10d
imul %esi,%r10d
sub %edi,%r10d
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
add %r11d,%eax
add %r10d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a5 < a3)
    {
        v6 = (a2 * a5 - a5) + a3;
    }
    else
    {
        v6 = a4 - a3 * a3;
    }
    if (v6 < a5)
    {
        v7 = ((a5 - a5) + a1) - a4;
    }
    else
    {
        v7 = a2 - a1 * a2 + a4;
    }
    if (a2 < a5)
    {
        v8 = a5 * a1 * a1 + a3;
    }
    else
    {
        v8 = a2 - a2 * a5 - a1;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        v9 += a5 * a2 + a5;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 10
11 12
12 12
13 14
14 14
15 14
16 18
17 18
18 18
19 18
20 20
21 20
22 22
23 22
24 22
25 22
26 22
27 26
28 26
29 26
30 26
31 33
32 33
33 33
34 33
35 33
36 33
37 33
38 34
<<<sep_out_sample>>>
mov %edx,%r10d
imul %r8d,%r10d
mov %r10d,%r11d
imul %r8d,%r11d
sub %edx,%r11d
lea (%rdi,%rcx,1),%r9d
test %r8d,%r8d
jle 25 <func1+0x25>
mov %r10d,%r9d
imul %edx,%r9d
imul %esi,%r9d
lea (%rcx,%rdx,1),%eax
cmp %ecx,%edi
jge 37 <func1+0x37>
mov %r8d,%eax
sub %esi,%eax
imul %r8d,%eax
sub %edi,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r11d,%ecx
add %ecx,%r9d
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a3 * a5 * a5 - a3;
    if (v7 < a5)
    {
        v7 = a3 * (a3 * a5) * a2;
    }
    else
    {
        v7 = a1 + a4;
    }
    if (a1 < a4)
    {
        v8 = a5 * (a5 - a2) - a1;
    }
    else
    {
        v8 = a4 + a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 4
6 11
7 5
8 5
9 7
10 7
11 7
12 19
13 13
14 13
15 15
16 15
17 15
18 15
19 21
20 21
21 21
22 21
23 21
24 21
25 21
26 22
<<<sep_out_sample>>>
lea (%rcx,%rsi,1),%r10d
cmp %edi,%esi
jge 1a <func1+0x1a>
mov %ecx,%r9d
sub %esi,%r9d
mov %edi,%r11d
imul %edx,%r11d
sub %r11d,%r9d
jmp 27 <func1+0x27>
mov %r8d,%r9d
imul %esi,%r9d
sub %edi,%r9d
add %edx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a4 + a2;
    if (a2 < a1)
    {
        v7 = a4 - a2 - a1 * a3;
    }
    else
    {
        v7 = a3 - (a1 - a5 * a2);
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 5
3 5
4 7
5 7
6 7
7 7
8 7
9 7
10 11
11 11
12 11
13 11
14 13
15 13
16 13
17 13
18 13
19 13
20 14
<<<sep_out_sample>>>
cmp %ecx,%edx
jge 10 <func1+0x10>
lea (%rcx,%rdx,1),%eax
imul %r8d,%eax
imul %esi,%eax
jmp 16 <func1+0x16>
mov %r8d,%eax
imul %edi,%eax
add %edx,%edi
add %edi,%esi
add %r8d,%esi
add %esi,%ecx
add %eax,%ecx
sub %edx,%r8d
lea 0x1(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a3 < a4)
    {
        v6 = (a4 + a3) * a5 * a2;
    }
    else
    {
        v6 = a5 * a1;
    }
    if (a1 < a1)
    {
        v7 = a3 * a3 + a5 * a4;
    }
    else
    {
        v7 = a5 - a3;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        if (a5 < a1)
        {
            v8 += (a1 * a4) + a4;
        }
        else
        {
            v8 += a4 * (a4 - a3);
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 32
10 32
11 32
12 32
13 32
14 18
15 32
16 33
<<<sep_out_sample>>>
lea 0x1(%rdi,%rcx,2),%eax
add %eax,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (a4 < a3)
        {
            v6 += a4 + a5 * a3;
        }
        else
        {
            v6 += a4 - (a3 * a2);
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        if (v8 < a4)
        {
            v8 += a4 - a1;
        }
        else
        {
            v8 += a2 * a3 * a4;
        }
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a5)
    {
        v10 += (a1 + a5) + a5;
    }
    v12 = a4 + a4;
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 34
2 34
3 34
4 34
5 34
6 35
<<<sep_out_sample>>>
cmp %edx,%edi
jge e <func1+0xe>
lea (%r8,%rsi,1),%r9d
imul %edi,%r9d
jmp 1c <func1+0x1c>
mov %r8d,%r9d
sub %edx,%r9d
imul %esi,%r9d
imul %ecx,%r9d
lea -0x1(%rdi),%r11d
imul %esi,%r11d
imul %esi,%r11d
cmp %edx,%r9d
jge 39 <func1+0x39>
lea (%rsi,%rcx,1),%r10d
add %edi,%r10d
sub %edx,%r10d
jmp 45 <func1+0x45>
lea (%rcx,%rdi,1),%r10d
imul %edx,%r10d
imul %edi,%r10d
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
add %r11d,%eax
add %r10d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a1 < a3)
    {
        v6 = a1 * a5 + a2 * a1;
    }
    else
    {
        v6 = (a5 - a3) * a2 * a4;
    }
    v7 = a2 * (a1 * a2 - a2);
    if (v6 < a3)
    {
        v8 = a2 + a4 + a1 - a3;
    }
    else
    {
        v8 = a3 * (a4 + a1) * a1;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        v9 += a5 - (a3 + a5);
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 10
10 12
11 12
12 12
13 13
14 13
15 15
16 15
17 15
18 15
19 19
20 19
21 19
22 26
23 26
24 26
25 26
26 26
27 26
28 26
29 27
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
lea (%r8,%rcx,1),%eax
imul %esi,%edi
add %edi,%ecx
imul %ecx,%edx
lea 0x1(%rax,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = (a1 * a2 + a4) * a3;
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        if (v7 < a1)
        {
            v7 += a2 * (a4 * a3);
        }
        else
        {
            v7 += a2 * a4 - a4;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 4
6 4
7 4
8 17
9 18
<<<sep_out_sample>>>
push %rbx
lea (%rsi,%r8,1),%ebx
mov %edi,%r9d
imul %r8d,%r9d
sub %r9d,%ebx
mov %esi,%eax
imul %esi,%eax
mov %r8d,%r11d
sub %eax,%r11d
sub %ecx,%r11d
lea (%r8,%rdx,2),%r10d
sub %edi,%r10d
cmp %edx,%edi
jge 31 <func1+0x31>
mov %esi,%r9d
imul %edi,%r9d
jmp 39 <func1+0x39>
lea (%rdi,%rcx,2),%r9d
imul %ecx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %ebx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a2 + a5 - a1 * a5;
    v7 = a5 - a2 * a2 - a4;
    if (a1 < a1)
    {
        v8 = a5 * a4;
    }
    else
    {
        v8 = a5 + a3 + a3 - a1;
    }
    if (a1 < a3)
    {
        v9 = a2 * a1;
    }
    else
    {
        v9 = a4 * (a4 + a4 + a1);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 4
3 4
4 4
5 4
6 5
7 5
8 5
9 5
10 5
11 12
12 12
13 14
14 14
15 16
16 16
17 16
18 20
19 20
20 22
21 22
22 22
23 22
24 22
25 22
26 22
27 22
28 23
29 23
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %edx,%r8d
lea 0x1(%rcx,%r8,1),%eax
imul %esi,%esi
imul %esi,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a4 - a2;
    }
    v8 = a2 * a2 * a4;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 9
6 9
7 10
8 11
<<<sep_out_sample>>>
lea (%rcx,%rdx,1),%r10d
sub %r8d,%r10d
add %edi,%r10d
lea (%rdx,%rdx,1),%r9d
test %ecx,%ecx
jle 1f <func1+0x1f>
mov %ecx,%eax
imul %edi,%eax
imul %edx,%eax
sub %r8d,%eax
jmp 24 <func1+0x24>
mov %edi,%eax
imul %esi,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r10d,%ecx
add %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a5 < a5)
    {
        v6 = a2 * a3;
    }
    else
    {
        v6 = a4 + a3 - a5 + a1;
    }
    v7 = a3 + a3;
    if (v8 < a4)
    {
        v8 = a3 * (a4 * a1) - a5;
    }
    else
    {
        v8 = a1 * a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 12
5 13
6 13
7 15
8 15
9 15
10 15
11 15
12 19
13 19
14 21
15 21
16 21
17 21
18 21
19 21
20 21
21 22
<<<sep_out_sample>>>
add %edx,%edi
add %esi,%edi
add %edi,%r8d
add %r8d,%ecx
lea (%rdx,%rsi,2),%eax
add %eax,%edx
lea 0x1(%rcx,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = (a2 + a3 + a2) + a3;
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += a3 - a3 - a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 4
6 4
7 10
8 11
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a5 + a4 - a4;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        if (a2 < a3)
        {
            v8 += a1 - (a1 - a3);
        }
        else
        {
            v8 += a2 + a5 - a4;
        }
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a1)
    {
        if (a2 < a4)
        {
            v10 += a2 - a3 * a2;
        }
        else
        {
            v10 += a1 + (a3 - a2);
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 33
2 33
3 33
4 33
5 34
<<<sep_out_sample>>>
cmp %ecx,%esi
jge c <func1+0xc>
mov %r8d,%eax
imul %edx,%eax
jmp 13 <func1+0x13>
mov %r8d,%eax
imul %r8d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a2 < a4)
    {
        v6 = a5 * a3;
    }
    else
    {
        v6 = a5 * a5;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += (a5 * a1) * a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 17
9 17
10 17
11 17
12 17
13 18
<<<sep_out_sample>>>
mov %esi,%eax
sub %r8d,%eax
cmp %edi,%ecx
jl 10 <func1+0x10>
mov %ecx,%eax
neg %eax
imul %edx,%eax
lea (%rdi,%rdx,2),%edi
add %edi,%edx
add %edx,%esi
add %r8d,%esi
add %esi,%ecx
lea 0x1(%rax,%rcx,1),%eax
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a4 < a1)
    {
        v6 = a2 - a5;
    }
    else
    {
        v6 = a3 * (a3 - a3 - a4);
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        if (v8 < a2)
        {
            v7 += a3 - a3 + a3;
        }
        else
        {
            v7 += a3 * a1;
        }
    }
    v9 = (a5 + a5) - a5;
    if (a2 < a2)
    {
        v10 = a5 - (a4 * a4 - a3);
    }
    else
    {
        v10 = ((a3 - a1) + a3) + a1;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 6
3 4
4 4
5 10
6 10
7 10
8 33
9 33
10 33
11 33
12 33
13 33
14 33
15 34
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %r8d,%edx
imul %ecx,%esi
imul %edi,%esi
lea (%rdx,%rcx,2),%eax
lea 0x1(%rsi,%rax,1),%eax
mov %r8d,%edx
sub %edi,%edx
add %edx,%r8d
imul %r8d,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a4 + a2 * a4 * a1;
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        if (a3 < a2)
        {
            v7 += a2 + (a3 - a1);
        }
        else
        {
            v7 += a4 - a1 + a1;
        }
    }
    v9 = a1 * (a5 - a1 + a5);
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 4
5 4
6 4
7 18
8 17
9 17
10 17
11 17
12 18
13 19
<<<sep_out_sample>>>
mov %ecx,%eax
sub %edx,%eax
cmp %edi,%esi
jl e <func1+0xe>
lea (%rsi,%rdi,2),%eax
sub %r8d,%eax
add %edx,%edi
add %edi,%esi
add %r8d,%esi
add %esi,%ecx
add %ecx,%eax
add %edx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a2 < a1)
    {
        v6 = a4 - a3;
    }
    else
    {
        v6 = a2 + (a1 - a5) + a1;
    }
    v7 = a3 + a5;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 4
4 4
5 10
6 10
7 13
8 13
9 13
10 13
11 13
12 12
13 13
14 14
<<<sep_out_sample>>>
cmp %ecx,%r8d
jle f <func1+0xf>
mov %r8d,%eax
sub %ecx,%eax
lea (%rax,%rsi,2),%eax
jmp 14 <func1+0x14>
mov %edx,%eax
imul %esi,%eax
lea (%rsi,%rdi,2),%edi
lea (%rdi,%r8,1),%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (a3 < a3)
        {
            v6 += a2 + (a1 * a1);
        }
        else
        {
            v6 += a5 + a1 + a5;
        }
    }
    if (a4 < a5)
    {
        v8 = a2 + (a5 - a4) + a2;
    }
    else
    {
        v8 = a3 * a2;
    }
    v9 = (a1 - a1) * a4;
    v10 = a2 + (a5 + a1);
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 18
7 22
8 22
9 25
10 26
11 26
12 26
13 26
14 26
15 26
16 27
<<<sep_out_sample>>>
cmp %r8d,%edi
jge 11 <func1+0x11>
mov %ecx,%eax
imul %ecx,%eax
sub %r8d,%eax
add %edx,%eax
jmp 19 <func1+0x19>
lea 0x1(%rdx),%eax
imul %esi,%eax
sub %edi,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a1 < a5)
    {
        v6 = a4 * a4 - a5 + a3;
    }
    else
    {
        v6 = ((a3 * a2) + a2) - a1;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a4 - a4 + a3;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        v9 += (a4 * a3) * a2;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 22
12 22
13 22
14 22
15 22
16 23
<<<sep_out_sample>>>
lea (%rcx,%rcx,1),%eax
lea (%rdi,%rdx,1),%r9d
cmp %r8d,%ecx
cmovge %r9d,%eax
mov %r9d,%edx
add %esi,%edx
add %r8d,%edx
add %ecx,%edx
lea 0x1(%rax,%rdx,1),%eax
imul %r8d,%ecx
imul %ecx,%r8d
sub %r8d,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a4 < a5)
    {
        v6 = a4 + a4;
    }
    else
    {
        v6 = a1 + a3;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        if (v8 < a4)
        {
            v7 += a5 - a2 - a5;
        }
        else
        {
            v7 += a5 - a5;
        }
    }
    v9 = a2 - (a4 * a5) * a5;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 25
6 25
7 25
8 25
9 25
10 24
11 24
12 24
13 25
14 26
<<<sep_out_sample>>>
mov %r8d,%r9d
imul %edi,%r9d
lea (%rcx,%rsi,1),%eax
cmp %edx,%edi
jle 14 <func1+0x14>
mov %edi,%eax
sub %edx,%eax
sub %esi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a5 * a1;
    if (a3 < a1)
    {
        v7 = a1 - a3 - a2;
    }
    else
    {
        v7 = a4 + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 11
4 5
5 5
6 7
7 7
8 7
9 13
10 13
11 13
12 13
13 13
14 13
15 14
<<<sep_out_sample>>>
cmp $0x1,%ecx
jle 17 <func1+0x17>
mov %ecx,%eax
imul %edi,%eax
mov %r8d,%r9d
sub %eax,%r9d
mov %r9d,%eax
add %edi,%eax
jmp 1c <func1+0x1c>
mov %edx,%eax
imul %edx,%eax
lea 0x1(%rax,%rdi,1),%eax
add %eax,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (a5 < a1)
        {
            v6 += a3 * a2 * a4;
        }
        else
        {
            v6 += a1 - (a1 * a5);
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        if (v8 < a5)
        {
            v8 += (a2 + a1) + a1;
        }
        else
        {
            v8 += (a1 - a3) + a2;
        }
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a4)
    {
        v10 += a3 * a4 + a5;
    }
    if (v9 < a4)
    {
        v12 = a1 - (a4 * a1 - a5);
    }
    else
    {
        v12 = a3 * a3;
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 33
2 33
3 35
4 35
5 35
6 35
7 35
8 35
9 35
10 39
11 39
12 41
13 41
14 41
15 41
16 41
17 42
<<<sep_out_sample>>>
push %rbx
cmp %esi,%ecx
jge b <func1+0xb>
lea (%rdx,%rdx,1),%r11d
jmp 1a <func1+0x1a>
mov %edi,%r11d
imul %edi,%r11d
imul %r8d,%r11d
imul %edx,%r11d
cmp %r8d,%ecx
jge 2f <func1+0x2f>
mov %r8d,%r10d
imul %r8d,%r10d
imul %edi,%r10d
sub %r8d,%r10d
jmp 36 <func1+0x36>
mov %edx,%r10d
imul %esi,%r10d
cmp %edi,%r8d
jge 4a <func1+0x4a>
mov %edx,%r9d
sub %r8d,%r9d
imul %ecx,%r9d
add %r8d,%r9d
jmp 57 <func1+0x57>
mov %r8d,%r9d
imul %r8d,%r9d
lea (%rsi,%rdi,1),%ebx
sub %ebx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a4 < a2)
    {
        v6 = (a3 + a3) - a5 + a5;
    }
    else
    {
        v6 = a1 * a1 * a5 * a3;
    }
    if (a4 < a5)
    {
        v7 = a5 * a5 * a1 - a5;
    }
    else
    {
        v7 = a3 * a2;
    }
    if (a5 < a1)
    {
        v8 = a5 - a4 * (a5 - a3);
    }
    else
    {
        v8 = a5 * a5 - (a2 + a1);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 2
2 4
3 4
4 6
5 6
6 10
7 10
8 10
9 10
10 12
11 12
12 14
13 14
14 14
15 14
16 14
17 18
18 18
19 20
20 20
21 22
22 22
23 22
24 22
25 22
26 26
27 26
28 26
29 26
30 28
31 28
32 28
33 28
34 28
35 28
36 28
37 29
38 29
<<<sep_out_sample>>>
lea (%rsi,%rcx,1),%eax
cmp %ecx,%edi
jl f <func1+0xf>
lea (%rdx,%r8,1),%eax
add %ecx,%eax
add %edi,%eax
add %edx,%edi
add %edi,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%esi
add %esi,%eax
imul %edx,%ecx
sub %ecx,%r8d
add %r8d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a5 * a5 - a1;
    }
    if (a1 < a4)
    {
        v8 = (a1 + a4) + (a2 - a1);
    }
    else
    {
        v8 = (a3 + a5) + a4 + a1;
    }
    v9 = a5 - (a3 * a4) + a3;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 9
3 9
4 15
5 15
6 15
7 18
8 18
9 18
10 18
11 18
12 17
13 17
14 17
15 18
16 19
<<<sep_out_sample>>>
cmp %esi,%r8d
jge e <func1+0xe>
mov %esi,%eax
neg %eax
sub %r8d,%eax
jmp 18 <func1+0x18>
mov %esi,%eax
imul %ecx,%eax
sub %r8d,%eax
sub %edi,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a5 < a2)
    {
        v6 = ((a1 - a5) - a2) - a1;
    }
    else
    {
        v6 = (a2 * a4 - a5) - a1;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a5 + a2 - a4;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        v9 += (a4 + a2) * a3;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 10
11 22
12 22
13 22
14 22
15 22
16 23
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
add %esi,%ecx
sub %r8d,%edi
lea 0x1(%rcx,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a5 < a5)
    {
        v6 = (a1 - a3 - a3) * a5;
    }
    else
    {
        v6 = a1 - ((a3 + a5) - a3);
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        if (a3 < a2)
        {
            v7 += a3 + (a1 - a3);
        }
        else
        {
            v7 += a5 * a3 + a3;
        }
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        if (v7 < a3)
        {
            v9 += a1 - a4 * a3;
        }
        else
        {
            v9 += a3 * (a2 - a2);
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 36
2 36
3 36
4 36
5 10
6 36
7 37
<<<sep_out_sample>>>
cmp %esi,%r8d
jge 11 <func1+0x11>
mov %edx,%eax
imul %edx,%eax
sub %r8d,%eax
sub %edi,%eax
jmp 1d <func1+0x1d>
mov %ecx,%eax
imul %r8d,%eax
sub %edi,%eax
imul %r8d,%eax
mov %esi,%r9d
sub %ecx,%r9d
mov %esi,%r10d
imul %r8d,%r10d
sub %r10d,%r9d
lea 0x1(%rdi,%r9,1),%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    if (a5 < a2)
    {
        v6 = a3 * a3 - a5 - a1;
    }
    else
    {
        v6 = a5 * (a4 * a5 - a1);
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        if (v8 < a2)
        {
            v7 += a3 - a1;
        }
        else
        {
            v7 += a1 - a2;
        }
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        v9 += a1 - a2 - a2;
    }
    v11 = (a2 - a4) - a2 * a5;
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 29
13 29
14 29
15 29
16 29
17 30
18 30
19 30
20 30
21 30
22 30
23 31
<<<sep_out_sample>>>
mov %ecx,%r9d
imul %edi,%r9d
sub $0x1,%r9d
imul %ecx,%r9d
cmp %edx,%edi
jge 23 <func1+0x23>
mov %esi,%eax
imul %esi,%eax
mov %edx,%r11d
sub %eax,%r11d
mov %r11d,%eax
jmp 2c <func1+0x2c>
mov %edi,%eax
sub %esi,%eax
imul %edx,%eax
add %esi,%eax
lea (%rdi,%rdx,2),%r10d
lea (%r10,%rsi,1),%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %r8d,%esi
add %esi,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a4 * a1 * a4 - a4;
    if (a1 < a3)
    {
        v7 = a3 - (a2 * a2);
    }
    else
    {
        v7 = a3 * (a1 - a2) + a2;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += a3 * a1 + a4;
    }
    if (a3 < a3)
    {
        v10 = (a2 - a3 - a2) * a1;
    }
    else
    {
        v10 = (a2 + a3 + a1) + a3;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 5
6 5
7 7
8 7
9 7
10 7
11 7
12 7
13 11
14 11
15 11
16 11
17 24
18 24
19 26
20 26
21 26
22 26
23 26
24 26
25 26
26 27
<<<sep_out_sample>>>
test %esi,%esi
jle 12 <func1+0x12>
lea (%rdx,%rsi,1),%r9d
mov %ecx,%eax
sub %r8d,%eax
add %r9d,%eax
jmp 17 <func1+0x17>
mov %edi,%eax
imul %edi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (a4 < a2)
        {
            v6 += (a2 + a1) * a1;
        }
        else
        {
            v6 += a2 - a2;
        }
    }
    if (v6 < a2)
    {
        v8 = a3 + a2 + (a4 - a5);
    }
    else
    {
        v8 = a1 * a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 18
7 18
8 22
9 22
10 24
11 24
12 24
13 24
14 24
15 25
<<<sep_out_sample>>>
cmp %edx,%esi
jle 10 <func1+0x10>
mov %edi,%eax
sub %edx,%eax
imul %edx,%eax
imul %edx,%eax
jmp 17 <func1+0x17>
mov %ecx,%eax
imul %edi,%eax
sub %esi,%eax
add %edx,%edi
add %esi,%edi
add %r8d,%edi
lea 0x1(%rcx,%rdi,1),%ecx
add %ecx,%eax
add %esi,%edx
sub %edx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (v6 < a2)
        {
            v6 += a1 - a2;
        }
        else
        {
            v6 += a3 * (a2 * a4);
        }
    }
    if (a3 < a2)
    {
        v8 = ((a1 - a3) * a3) * a3;
    }
    else
    {
        v8 = a4 * a1 - a2;
    }
    if (a2 < a2)
    {
        v9 = a4 * a2 * a1 + a5;
    }
    else
    {
        v9 = a5 - (a3 + a2);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 18
7 18
8 22
9 22
10 22
11 32
12 32
13 32
14 32
15 32
16 30
17 30
18 32
19 33
<<<sep_out_sample>>>
cmp %r8d,%ecx
jge e <func1+0xe>
mov %esi,%r9d
imul %edx,%r9d
jmp 16 <func1+0x16>
lea (%rdi,%rsi,1),%r9d
imul %r8d,%r9d
cmp %edx,%ecx
jle 24 <func1+0x24>
lea (%rcx,%r8,1),%eax
sub %esi,%eax
sub %edx,%eax
jmp 29 <func1+0x29>
lea (%rdi,%rdi,2),%eax
sub %ecx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a4 < a5)
    {
        v6 = (a3 * a2 - a3) + a3;
    }
    else
    {
        v6 = a5 * a1 + a2 * a5;
    }
    if (a3 < a4)
    {
        v7 = ((a4 + a5) - a2) - a3;
    }
    else
    {
        v7 = a1 + (a1 + a1) - a4;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        if (v8 < a1)
        {
            v8 += a3 + a3 * a4;
        }
        else
        {
            v8 += a1 - a3;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 12
9 12
10 14
11 14
12 14
13 14
14 18
15 18
16 32
17 32
18 32
19 32
20 32
21 32
22 33
<<<sep_out_sample>>>
mov %ecx,%r9d
imul %edi,%r9d
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
add %edx,%r8d
add %edi,%r8d
add %r8d,%eax
imul %r9d,%edi
imul %edi,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a4 * a1;
    if (a1 < a1)
    {
        v7 = a1 * a2 * a3;
    }
    else
    {
        v7 = a1 + (a3 + a5);
    }
    v8 = a3 * ((a1 * a4) * a1);
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        v9 += a2 * a5 + a4;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 19
4 19
5 19
6 19
7 19
8 11
9 11
10 19
11 13
12 13
13 19
14 20
<<<sep_out_sample>>>
mov %esi,%eax
neg %eax
cmp %esi,%edx
jl 13 <func1+0x13>
mov %ecx,%eax
imul %esi,%eax
imul %edi,%eax
sub %r8d,%eax
add %edx,%edi
add %edi,%esi
add %r8d,%esi
add %esi,%ecx
add %eax,%ecx
sub %edx,%r8d
lea 0x1(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a3 < a2)
    {
        v6 = (a4 - a4) - a2;
    }
    else
    {
        v6 = a1 * (a4 * a2) - a5;
    }
    v7 = a5 - a3;
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += (a4 + a5) - a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 6
3 4
4 4
5 10
6 10
7 10
8 10
9 18
10 18
11 18
12 18
13 18
14 12
15 18
16 19
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %r8d,%esi
imul %ecx,%edx
sub %edx,%r8d
lea (%rsi,%rcx,2),%eax
lea (%rax,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a5 - a3 * a4;
    v7 = a4 + (a5 - a5) * a3;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 4
5 4
6 6
7 6
8 7
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %r8d,%edx
lea 0x1(%rcx,%rdx,1),%edx
mov $0x1,%eax
sub %esi,%eax
imul %eax,%r8d
sub %edi,%r8d
lea (%rdx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (a1 < a5)
        {
            v6 += a4 + a2 + a2;
        }
        else
        {
            v6 += a4 * (a5 + a1);
        }
    }
    v8 = a5 - (a2 * a5) - a1;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 16
6 16
7 16
8 16
9 17
10 18
<<<sep_out_sample>>>
mov %esi,%r9d
sub %edx,%r9d
lea (%r8,%rcx,1),%eax
test %r8d,%r8d
jle 19 <func1+0x19>
mov %esi,%eax
sub %r8d,%eax
imul %ecx,%eax
sub %edi,%eax
add %r9d,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a1 - a3;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += a1 + a1 * a5;
    }
    v10 = a2 - a3;
    if (v11 < a5)
    {
        v11 = ((a2 - a5) * a4) - a1;
    }
    else
    {
        v11 = a5 + a4;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 14
2 14
3 21
4 15
5 15
6 17
7 17
8 17
9 17
10 23
11 23
12 23
13 23
14 23
15 23
16 24
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%eax
sub %r8d,%ecx
add %ecx,%eax
add %edi,%r8d
add %r8d,%edx
imul %edx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a1 * a3;
    }
    v8 = a4 - a5;
    v9 = ((a5 + a1) + a3) * a1;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 11
5 9
6 11
7 10
8 10
9 10
10 11
11 12
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += (a4 - a1) - a1;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += (a3 - a3) + a1;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a2)
    {
        v10 += a1 + a1;
    }
    v12 = a4 - (a3 - a3) - a4;
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 20
2 20
3 20
4 20
5 21
<<<sep_out_sample>>>
cmp %ecx,%edx
jge 10 <func1+0x10>
mov %ecx,%r10d
imul %edi,%r10d
add %edx,%r10d
jmp 19 <func1+0x19>
mov %esi,%r10d
sub %ecx,%r10d
add %edi,%r10d
mov %ecx,%eax
imul %edx,%eax
imul %r8d,%eax
sub %edi,%eax
lea (%rcx,%rdx,1),%r9d
mov %edi,%r11d
imul %edi,%r11d
cmp %esi,%edx
cmovg %r11d,%r9d
add %r9d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r10,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a3 < a4)
    {
        v6 = a3 + a4 * a1;
    }
    else
    {
        v6 = a2 - a4 + a1;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += a3 * a1;
    }
    if (a5 < a5)
    {
        v9 = (a1 - (a4 * a1)) * a5;
    }
    else
    {
        v9 = (a4 * a3 * a5) - a1;
    }
    if (a2 < a3)
    {
        v10 = a1 * a1;
    }
    else
    {
        v10 = a4 + a3;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 23
11 23
12 23
13 23
14 31
15 27
16 27
17 27
18 27
19 33
20 33
21 33
22 33
23 33
24 33
25 33
26 34
<<<sep_out_sample>>>
mov %r8d,%eax
sub %ecx,%eax
lea (%rdx,%rcx,1),%r9d
cmp %ecx,%edx
cmovge %r9d,%eax
test %edi,%edi
jle 1c <func1+0x1c>
lea (%rsi,%rdi,2),%r9d
sub %r8d,%r9d
jmp 2a <func1+0x2a>
mov %ecx,%r9d
sub %r8d,%r9d
imul %edx,%r9d
imul %edx,%r9d
lea 0x1(%r9,%rdi,1),%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    if (a3 < a4)
    {
        v6 = a5 - a4;
    }
    else
    {
        v6 = a3 - a2 + a2 + a4;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += a5 * a5;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a1)
    {
        v9 += a4 * a2 + a4;
    }
    if (v7 < a1)
    {
        v11 = a1 + a1 + a2 - a5;
    }
    else
    {
        v11 = a3 * (a4 - a5) * a3;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 6
6 22
7 22
8 24
9 24
10 24
11 28
12 28
13 28
14 28
15 30
16 30
17 30
18 30
19 30
20 30
21 31
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
imul %ecx,%ecx
imul %edi,%ecx
add %ecx,%eax
sub %edi,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a4 < a4)
    {
        v6 = a4 + (a2 + a2);
    }
    else
    {
        v6 = (a4 * a4) * a1 - a4;
    }
    v7 = a5 - a1;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 13
2 13
3 13
4 10
5 10
6 13
7 12
8 13
9 14
<<<sep_out_sample>>>
cmp $0x1,%esi
jle e <func1+0xe>
mov %edi,%eax
imul %esi,%eax
add %edx,%eax
jmp 1d <func1+0x1d>
mov %edx,%r9d
sub %edi,%r9d
mov %ecx,%eax
imul %r8d,%eax
add %r9d,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a2 + (a2 * a3);
    }
    if (v7 < a2)
    {
        v8 = a3 + (a1 * a2);
    }
    else
    {
        v8 = (a3 - a1) + a4 * a5;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        if (v6 < a4)
        {
            v9 += (a4 * a1) - a3;
        }
        else
        {
            v9 += a2 * a4 * a2;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 15
8 15
9 15
10 15
11 15
12 29
13 29
14 29
15 29
16 29
17 30
<<<sep_out_sample>>>
mov %edi,%r10d
sub %edx,%r10d
cmp %ecx,%edi
jge 19 <func1+0x19>
mov %esi,%r9d
imul %edi,%r9d
add %ecx,%r9d
add %esi,%r9d
jmp 21 <func1+0x21>
lea 0x1(%r8),%r9d
imul %r8d,%r9d
test %edi,%edi
jle 36 <func1+0x36>
mov %edx,%r11d
imul %ecx,%r11d
imul %r8d,%r11d
imul %edi,%r11d
jmp 3d <func1+0x3d>
mov %edx,%r11d
imul %edx,%r11d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea (%rcx,%r10,1),%eax
add %r9d,%eax
add %r11d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a1 - a3;
    if (a1 < a4)
    {
        v7 = a2 * a1 + a4 + a2;
    }
    else
    {
        v7 = a5 + a5 * a5;
    }
    v8 = a1 - a1;
    if (v8 < a1)
    {
        v9 = a5 * (a3 * a4) * a1;
    }
    else
    {
        v9 = a3 * a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 5
4 5
5 7
6 7
7 7
8 7
9 7
10 11
11 11
12 14
13 14
14 16
15 16
16 16
17 16
18 16
19 20
20 20
21 22
22 22
23 22
24 22
25 22
26 22
27 22
28 23
<<<sep_out_sample>>>
lea (%r8,%rcx,1),%r9d
cmp %esi,%edx
jge 14 <func1+0x14>
lea (%rdi,%rdx,1),%r9d
mov %ecx,%eax
imul %edx,%eax
sub %eax,%r9d
mov %esi,%r10d
sub %edi,%r10d
cmp %edi,%esi
jg 2b <func1+0x2b>
lea (%rsi,%r8,1),%r10d
mov %r8d,%eax
imul %esi,%eax
add %eax,%r10d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %eax,%r9d
lea (%r9,%r10,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a3 - a5 - a2;
    }
    if (a3 < a2)
    {
        v8 = (a1 + a3) - a4 * a3;
    }
    else
    {
        v8 = a5 + a4;
    }
    if (a1 < a2)
    {
        v9 = a2 - (a3 + a1 - a3);
    }
    else
    {
        v9 = a2 + a5 + (a5 * a2);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 15
2 9
3 9
4 11
5 11
6 11
7 11
8 19
9 19
10 17
11 17
12 23
13 23
14 23
15 23
16 25
17 25
18 25
19 25
20 25
21 25
22 26
<<<sep_out_sample>>>
push %rbx
mov %edx,%eax
sub %edi,%eax
lea (%rax,%rdx,2),%r11d
mov %r8d,%r10d
imul %edi,%r10d
add %ecx,%r10d
sub %esi,%r10d
cmp %r8d,%edi
jle 28 <func1+0x28>
lea 0x1(%rsi),%r9d
imul %ecx,%r9d
sub %edx,%r9d
jmp 37 <func1+0x37>
mov %esi,%r9d
imul %edx,%r9d
imul %r8d,%r9d
imul %edx,%r9d
lea (%rdi,%rcx,1),%eax
cmp %ecx,%r9d
jge 4d <func1+0x4d>
mov %esi,%eax
imul %edi,%eax
mov %edx,%ebx
sub %eax,%ebx
mov %ebx,%eax
add %r8d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r11d,%ecx
add %r10d,%ecx
add %ecx,%r9d
add %r9d,%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a3 + a3 + (a3 - a1);
    v7 = a5 * a1 + a4 - a2;
    if (a5 < a1)
    {
        v8 = (a4 * a2 + a4) - a3;
    }
    else
    {
        v8 = a2 * a3 * a5 * a3;
    }
    if (v8 < a4)
    {
        v9 = a5 - ((a2 * a1) - a3);
    }
    else
    {
        v9 = a1 + a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 4
3 4
4 4
5 5
6 5
7 5
8 5
9 6
10 6
11 8
12 8
13 8
14 8
15 12
16 12
17 12
18 12
19 20
20 14
21 14
22 16
23 16
24 16
25 16
26 16
27 16
28 22
29 22
30 22
31 22
32 22
33 22
34 22
35 22
36 23
37 23
<<<sep_out_sample>>>
mov %ecx,%r10d
sub %edx,%r10d
mov %esi,%eax
sub %r8d,%eax
add %eax,%r10d
lea (%rcx,%rcx,1),%r9d
cmp %esi,%edi
cmovl %r8d,%r9d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a1 - a4;
    }
    v8 = (a4 - a3) + (a2 - a5);
    if (a1 < a2)
    {
        v9 = a5 - (a3 - a3);
    }
    else
    {
        v9 = a4 + a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 9
4 9
5 9
6 16
7 16
8 16
9 18
10 18
11 18
12 18
13 18
14 18
15 19
<<<sep_out_sample>>>
mov %r8d,%eax
sub %edx,%eax
cmp %esi,%edi
jge 12 <func1+0x12>
mov %esi,%eax
sub %edi,%eax
add %r8d,%eax
sub %ecx,%eax
lea 0x1(%rdi,%rdx,1),%edi
add %esi,%edi
add %r8d,%edi
add %edi,%ecx
add %ecx,%eax
sub %esi,%edx
add %edx,%eax
sub %esi,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a1 < a2)
    {
        v6 = a2 - a1 + a5 - a4;
    }
    else
    {
        v6 = a2 - a2 - a3 + a5;
    }
    v7 = a3 - a2;
    v8 = a5 - a2;
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        if (v8 < a5)
        {
            v9 += a2 - (a3 + a3);
        }
        else
        {
            v9 += a4 * a1 * a5;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 4
4 4
5 6
6 6
7 6
8 6
9 26
10 26
11 26
12 26
13 26
14 12
15 26
16 13
17 26
18 27
<<<sep_out_sample>>>
mov %edi,%eax
imul %esi,%eax
add %edi,%edx
add %edx,%esi
add %r8d,%esi
imul %eax,%edi
lea (%rsi,%rcx,2),%edx
lea (%rdx,%rdi,1),%edx
sub %eax,%r8d
sub %ecx,%r8d
lea 0x1(%rdx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a1 * (a1 * a2) + a4;
    v7 = a5 - a2 * a1 - a4;
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        if (a1 < a5)
        {
            v8 += a3 * (a4 + a5);
        }
        else
        {
            v8 += a1 * a4;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 18
4 18
5 18
6 4
7 4
8 18
9 5
10 5
11 18
12 19
<<<sep_out_sample>>>
mov %ecx,%r9d
imul %edx,%r9d
mov %r8d,%eax
imul %esi,%eax
add %r9d,%eax
mov %edi,%r9d
imul %edx,%r9d
add %esi,%r9d
imul %esi,%r9d
add %r9d,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a4 - a4;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += (a3 - a3) - a3;
    }
    v10 = a4 * a3 + a5 * a2;
    v11 = ((a1 * a3) + a2) * a2;
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 14
2 14
3 14
4 14
5 14
6 15
7 15
8 15
9 15
10 16
11 16
12 16
13 16
14 16
15 16
16 17
<<<sep_out_sample>>>
cmp %r8d,%esi
jle f <func1+0xf>
lea 0x1(%rdi),%eax
imul %ecx,%eax
sub %esi,%eax
jmp 1b <func1+0x1b>
mov %r8d,%eax
imul %edx,%eax
add $0x1,%eax
imul %edx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (a3 < a2)
        {
            v6 += a2 - a2 - a5;
        }
        else
        {
            v6 += a4 + a4;
        }
    }
    if (a5 < a2)
    {
        v8 = a4 * a1 + a4 - a2;
    }
    else
    {
        v8 = a3 + a5 * a3 * a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 18
7 22
8 22
9 22
10 22
11 24
12 24
13 24
14 24
15 24
16 25
<<<sep_out_sample>>>
mov %edi,%r10d
sub %esi,%r10d
cmp %ecx,%esi
jle 19 <func1+0x19>
mov %ecx,%r9d
imul %edx,%r9d
add %esi,%r9d
sub %edi,%r9d
jmp 27 <func1+0x27>
mov %edx,%r9d
imul %esi,%r9d
add %edi,%r9d
imul %esi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a1 - a2;
    if (a4 < a2)
    {
        v7 = (a2 + a4 * a3) - a1;
    }
    else
    {
        v7 = a2 * (a3 * a2 + a1);
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 5
4 5
5 7
6 7
7 7
8 7
9 7
10 11
11 11
12 11
13 11
14 13
15 13
16 13
17 13
18 13
19 13
20 14
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a3 * a3;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += a5 * a5 + a4;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a2)
    {
        v10 += a3 * a2 - a2;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 19
2 19
3 19
4 19
5 20
<<<sep_out_sample>>>
push %rbx
mov %r8d,%ebx
imul %edx,%ebx
mov %edx,%r11d
sub %r8d,%r11d
mov $0x0,%r9d
cmp %ecx,%edx
jle 23 <func1+0x23>
lea (%rdi,%rdx,1),%r9d
imul %ecx,%r9d
imul %edx,%r9d
cmp %ecx,%r9d
jge 38 <func1+0x38>
mov %ecx,%eax
imul %edx,%eax
mov %r8d,%r10d
sub %eax,%r10d
sub %edi,%r10d
jmp 43 <func1+0x43>
lea 0x1(%rsi),%r10d
imul %ecx,%r10d
add %edi,%r10d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %ebx,%eax
add %r11d,%eax
add %eax,%r9d
lea (%r9,%r10,1),%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a5 * a3;
    v7 = a3 - a5;
    if (a4 < a3)
    {
        v8 = (a1 + a3) * a4 * a3;
    }
    else
    {
        v8 = a5 - a5;
    }
    if (v8 < a4)
    {
        v9 = a5 - a4 * a3 - a1;
    }
    else
    {
        v9 = (a4 + a4 * a2) + a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 4
3 4
4 5
5 5
6 12
7 6
8 6
9 8
10 8
11 8
12 14
13 14
14 16
15 16
16 16
17 16
18 16
19 16
20 20
21 20
22 20
23 22
24 22
25 22
26 22
27 22
28 22
29 22
30 22
31 23
32 23
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a1 + a4 + a2;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += (a1 + a2) + a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 14
2 14
3 14
4 14
5 15
<<<sep_out_sample>>>
cmp %ecx,%esi
jge a <func1+0xa>
lea (%rdi,%rdi,1),%r10d
jmp 18 <func1+0x18>
mov %esi,%r10d
imul %edi,%r10d
add %r8d,%r10d
imul %esi,%r10d
lea (%rdi,%rcx,1),%eax
lea (%r8,%rsi,2),%r9d
cmp $0x2,%ecx
cmovge %eax,%r9d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a1 * a1 - a3;
    }
    if (a2 < a4)
    {
        v8 = a1 + a1;
    }
    else
    {
        v8 = a2 * (a2 * a1 + a5);
    }
    if (v7 < a4)
    {
        v9 = a1 + a4;
    }
    else
    {
        v9 = (a2 + a5) + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 15
6 15
7 15
8 15
9 19
10 19
11 19
12 19
13 25
14 25
15 25
16 25
17 25
18 25
19 26
<<<sep_out_sample>>>
mov %ecx,%r9d
sub %edx,%r9d
lea (%rdi,%r8,1),%eax
lea (%rdx,%rdi,1),%r10d
test %esi,%esi
cmovle %r10d,%eax
mov %esi,%r10d
imul %edi,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a4 - a3;
    if (v7 < a2)
    {
        v7 = (a1 + a3 - a3) + a5;
    }
    else
    {
        v7 = a3 + a1;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += a1 - a5;
    }
    v10 = a2 * a1;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 7
4 7
5 7
6 7
7 18
8 18
9 19
10 19
11 19
12 19
13 19
14 19
15 19
16 20
<<<sep_out_sample>>>
mov %ecx,%eax
imul %esi,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a4 + a5;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += a4 + a2 - a1;
    }
    v10 = a4 * a2;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 14
2 14
3 15
4 15
5 15
6 15
7 15
8 16
<<<sep_out_sample>>>
test %edx,%edx
jle b <func1+0xb>
mov %edi,%eax
imul %ecx,%eax
jmp 18 <func1+0x18>
mov $0x1,%eax
sub %edx,%eax
imul %ecx,%eax
sub %r8d,%eax
lea (%rcx,%rdx,1),%r9d
sub %r8d,%r9d
add %esi,%r9d
add %edi,%r9d
add %edx,%r9d
add %r9d,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%esi
add %esi,%eax
lea (%rdi,%rcx,2),%ecx
lea (%rcx,%rdx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a5 * a3;
    }
    if (v6 < a3)
    {
        v8 = a1 * a4;
    }
    else
    {
        v8 = (a4 - a4 * a3) - a5;
    }
    v9 = (a1 + a4) + a3 + a4;
    v10 = (a4 + a3) - a5 + a2;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 15
7 15
8 15
9 15
10 18
11 18
12 18
13 19
14 19
15 19
16 19
17 19
18 19
19 17
20 17
21 19
22 20
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
lea (%rcx,%r8,2),%r9d
lea (%r9,%rax,1),%eax
add %r8d,%ecx
add %ecx,%eax
add %r8d,%edi
add %esi,%edi
add %edi,%eax
lea (%rdx,%rsi,2),%edx
add %edx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a2 - a2 + a5;
    v7 = a5 + a4;
    v8 = a1 + a5 + a2;
    v9 = (a2 + (a3 + a2)) + a5;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 8
2 8
3 8
4 8
5 5
6 8
7 6
8 6
9 8
10 7
11 7
12 8
13 9
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
lea (%rcx,%r8,2),%eax
lea (%rax,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a3 - (a5 - a5 + a3);
    v7 = (a3 + a5) - a3;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 7
<<<sep_out_sample>>>
test %edx,%edx
jle c <func1+0xc>
mov %esi,%r9d
sub %edi,%r9d
jmp 13 <func1+0x13>
lea (%rdx,%rdi,2),%r9d
sub %r8d,%r9d
cmp %ecx,%edx
jle 1f <func1+0x1f>
mov %edi,%eax
neg %eax
sub %ecx,%eax
jmp 2e <func1+0x2e>
lea (%rsi,%rcx,1),%eax
imul %edi,%eax
mov %r8d,%r10d
sub %eax,%r10d
mov %r10d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (v6 < a3)
    {
        v6 = a5 - ((a5 - a2) + a1);
    }
    else
    {
        v6 = a1 + ((a3 + a1) - a5);
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        if (a1 < a2)
        {
            v7 += a2 + a2;
        }
        else
        {
            v7 += a2 - a3 + a1;
        }
    }
    if (a4 < a3)
    {
        v9 = a2 - a1 - a4 - a2;
    }
    else
    {
        v9 = a5 - (a2 + a4) * a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 24
9 24
10 26
11 26
12 26
13 26
14 30
15 30
16 30
17 30
18 30
19 32
20 32
21 32
22 32
23 32
24 32
25 33
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
lea (%r8,%rcx,1),%eax
imul %edi,%edx
imul %edx,%edi
add %edi,%esi
lea 0x1(%rax,%rsi,1),%eax
lea (%rax,%rcx,2),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = (a3 * a1 * a1) + a2;
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a1 + a1;
    }
    v9 = a4 + a4;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 11
5 4
6 4
7 4
8 11
9 11
10 12
<<<sep_out_sample>>>
mov %edx,%eax
sub %edi,%eax
mov %edi,%r9d
imul %esi,%r9d
cmp %edi,%ecx
cmovl %r9d,%eax
cmp %r8d,%esi
jle 25 <func1+0x25>
mov %esi,%r9d
sub %ecx,%r9d
imul %esi,%r9d
add %r8d,%r9d
jmp 30 <func1+0x30>
mov %esi,%r9d
imul %edx,%r9d
imul %esi,%r9d
lea 0x1(%rdi,%rdx,1),%r10d
add %r10d,%esi
add %esi,%r8d
add %ecx,%r8d
add %r8d,%eax
add %r9d,%eax
imul %edx,%edi
imul %edi,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a4 < a1)
    {
        v6 = a1 * a2;
    }
    else
    {
        v6 = a3 - a1;
    }
    if (a5 < a2)
    {
        v7 = a5 - a2 * (a4 - a2);
    }
    else
    {
        v7 = (a2 * a3) * a2;
    }
    v8 = a1 * a3 * a4;
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        if (a3 < a5)
        {
            v9 += a5 + a1 + a3;
        }
        else
        {
            v9 += a2 - (a1 * a4);
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 6
4 6
5 6
6 6
7 12
8 12
9 14
10 14
11 14
12 14
13 14
14 18
15 18
16 18
17 33
18 33
19 33
20 33
21 33
22 33
23 20
24 20
25 33
26 34
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += (a5 - a4) * a4;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += a4 - (a2 * a1);
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a2)
    {
        v10 += a3 * a3 - a5;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 19
2 19
3 19
4 19
5 20
<<<sep_out_sample>>>
cmp %ecx,%r8d
jge 13 <func1+0x13>
mov %r8d,%r10d
sub %esi,%r10d
sub %edi,%r10d
add %edx,%r10d
jmp 1e <func1+0x1e>
lea (%rdx,%r8,1),%r10d
imul %edx,%r10d
sub %r8d,%r10d
cmp %edi,%ecx
jge 31 <func1+0x31>
mov %edx,%r9d
imul %edi,%r9d
sub %ecx,%r9d
sub %r8d,%r9d
jmp 3e <func1+0x3e>
mov %esi,%r9d
imul %esi,%r9d
sub %edx,%r9d
sub %edx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a5 < a4)
    {
        v6 = a3 + (a5 - a2 - a1);
    }
    else
    {
        v6 = ((a3 + a5) * a3) - a5;
    }
    if (a4 < a1)
    {
        v7 = a3 * a1 - a4 - a5;
    }
    else
    {
        v7 = (a2 * a2) - a3 - a3;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 12
12 12
13 14
14 14
15 14
16 14
17 14
18 18
19 18
20 18
21 18
22 20
23 20
24 20
25 20
26 20
27 20
28 21
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %eax,%ecx
imul %r8d,%r8d
imul %r8d,%edi
add %esi,%edi
lea 0x1(%rcx,%rdi,1),%eax
imul %edx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a2 < a2)
    {
        v6 = (a5 + a4 - a3) * a2;
    }
    else
    {
        v6 = ((a5 * a5) * a1) + a2;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        if (a1 < a2)
        {
            v7 += a1 + a4 - a2;
        }
        else
        {
            v7 += a4 + a1;
        }
    }
    v9 = a2 * a3;
    v10 = (a3 - a3) * a3;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 26
2 26
3 26
4 26
5 10
6 10
7 10
8 26
9 24
10 26
11 27
<<<sep_out_sample>>>
push %rbx
mov %edi,%ebx
sub %r8d,%ebx
add %esi,%ebx
lea (%rsi,%rcx,1),%r11d
cmp %ecx,%edi
jle 1f <func1+0x1f>
mov %ecx,%r10d
imul %edi,%r10d
sub %esi,%r10d
add %r8d,%r10d
jmp 2d <func1+0x2d>
mov %edx,%r10d
sub %esi,%r10d
mov %r8d,%eax
sub %ecx,%eax
add %eax,%r10d
cmp %edx,%esi
jge 3c <func1+0x3c>
mov %ecx,%r9d
sub %edx,%r9d
sub %r8d,%r9d
jmp 4b <func1+0x4b>
mov %edi,%r9d
imul %edx,%r9d
imul %esi,%r9d
imul %edx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %ebx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a2 < a2)
    {
        v6 = a5 + (a4 + a4) - a2;
    }
    else
    {
        v6 = a1 - a5 + a2;
    }
    v7 = a2 + a4;
    if (a4 < a1)
    {
        v8 = a4 * a1 - a2 + a5;
    }
    else
    {
        v8 = a3 - a2 + (a5 - a4);
    }
    if (a2 < a3)
    {
        v9 = a4 - a3 - a5;
    }
    else
    {
        v9 = a1 * a3 * a2 * a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 10
3 10
4 10
5 12
6 13
7 13
8 15
9 15
10 15
11 15
12 15
13 19
14 19
15 19
16 19
17 19
18 21
19 21
20 23
21 23
22 23
23 23
24 27
25 27
26 27
27 27
28 29
29 29
30 29
31 29
32 29
33 29
34 29
35 29
36 30
37 30
<<<sep_out_sample>>>
cmp %edx,%r8d
jge 12 <func1+0x12>
lea 0x1(%rdi),%r9d
imul %edx,%r9d
add %esi,%r9d
jmp 1b <func1+0x1b>
lea 0x1(%rdi,%rsi,1),%r9d
imul %ecx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
add %ecx,%esi
sub %edi,%esi
add %esi,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a5 < a3)
    {
        v6 = a3 + a3 * a1 + a2;
    }
    else
    {
        v6 = a4 * (a2 + a1) + a4;
    }
    v7 = (a2 + a4 - a1) + a5;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 13
10 13
11 13
12 13
13 13
14 12
15 12
16 12
17 13
18 14
<<<sep_out_sample>>>
cmp %ecx,%esi
jge c <func1+0xc>
lea (%rdx,%r8,2),%eax
add %edx,%eax
jmp 1c <func1+0x1c>
lea (%r8,%r8,1),%eax
imul %edx,%eax
mov %r8d,%r9d
sub %eax,%r9d
mov %r9d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a1 - a2;
    }
    if (a2 < a4)
    {
        v8 = a3 + (a3 + (a5 + a5));
    }
    else
    {
        v8 = a5 - a3 * (a5 + a5);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 15
7 15
8 15
9 15
10 15
11 17
12 17
13 17
14 17
15 17
16 18
<<<sep_out_sample>>>
mov %r8d,%eax
sub %edx,%eax
cmp %r8d,%esi
jl 15 <func1+0x15>
mov %esi,%eax
imul %ecx,%eax
imul %edi,%eax
imul %edx,%eax
add %edi,%edx
add %esi,%edx
add %r8d,%edx
add %ecx,%edx
lea 0x1(%rax,%rdx,1),%eax
add %r8d,%esi
imul %esi,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a2 < a5)
    {
        v6 = a5 - a1 - a3 + a1;
    }
    else
    {
        v6 = a2 * a4 * a1 * a3;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        if (a3 < a2)
        {
            v7 += a1 + a2 + a3;
        }
        else
        {
            v7 += a2 - a5 + a4;
        }
    }
    if (a4 < a4)
    {
        v9 = (a1 - a5 * a4) * a5;
    }
    else
    {
        v9 = a4 * (a2 + a5);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 6
3 4
4 4
5 10
6 10
7 10
8 10
9 32
10 32
11 32
12 32
13 32
14 30
15 30
16 32
17 33
<<<sep_out_sample>>>
mov %esi,%r9d
sub %r8d,%r9d
add %edx,%r9d
imul %ecx,%r9d
test %edx,%edx
jle 1b <func1+0x1b>
lea (%rsi,%rcx,1),%eax
add %edi,%eax
imul %ecx,%eax
jmp 2c <func1+0x2c>
mov %esi,%eax
imul %ecx,%eax
imul %esi,%eax
mov %edi,%r10d
sub %eax,%r10d
mov %r10d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a4 * (a3 - (a5 - a2));
    if (v7 < a3)
    {
        v7 = ((a2 + a4) + a1) * a4;
    }
    else
    {
        v7 = a1 - a2 * a4 * a2;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 5
6 5
7 7
8 7
9 7
10 7
11 11
12 11
13 11
14 11
15 11
16 11
17 13
18 13
19 13
20 13
21 13
22 13
23 14
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %eax,%ecx
imul %edi,%esi
imul %r8d,%esi
imul %r8d,%esi
lea (%rcx,%rsi,1),%eax
add %edi,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a5 * (a2 * a1) * a5;
    v7 = a1 - a3 + a5 + a3;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 4
7 4
8 6
9 5
10 6
11 7
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
mov %ecx,%r9d
imul %edi,%r9d
add %edx,%r9d
add %r9d,%edi
add %edi,%eax
imul %ecx,%ecx
mov %edx,%edi
sub %esi,%edi
imul %edi,%ecx
add %ecx,%eax
sub %r8d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a3 + (a4 * a1) + a1;
    v7 = a4 * a4 * (a3 - a2);
    v8 = a3 - (a5 - a1 + a1);
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 7
2 7
3 7
4 7
5 4
6 4
7 4
8 4
9 7
10 5
11 5
12 5
13 5
14 7
15 6
16 7
17 8
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
lea 0x1(%rcx,%rax,1),%eax
imul %r8d,%esi
imul %esi,%edx
add %r8d,%edx
add %edx,%eax
imul %r8d,%ecx
sub %ecx,%edi
add %edi,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a4 * a5 + a3;
    }
    v8 = a5 + a5 * a2 * a3;
    v9 = a1 - (a4 * a5) + a5;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 11
5 9
6 9
7 9
8 11
9 10
10 10
11 10
12 11
13 12
<<<sep_out_sample>>>
lea (%rsi,%rdi,1),%eax
mov %r8d,%r9d
imul %ecx,%r9d
sub %r9d,%eax
lea 0x1(%rdi,%rax,1),%eax
add %eax,%edx
add %esi,%edx
add %edx,%r8d
lea 0x1(%rcx,%r8,1),%eax
lea (%rcx,%rdi,2),%edx
sub %edx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (a5 < a3)
        {
            v6 += a1 - a4;
        }
        else
        {
            v6 += a3 + a1 - a4;
        }
    }
    v8 = a2 - (a1 + a1 + a4);
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        if (v10 < a4)
        {
            v9 += a1 - a2;
        }
        else
        {
            v9 += a4 - a5 + a5;
        }
    }
    v11 = (a2 + a1) - a5 * a4;
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 29
2 29
3 29
4 29
5 30
6 30
7 30
8 30
9 30
10 16
11 16
12 30
13 31
<<<sep_out_sample>>>
mov $0x0,%r9d
mov %ecx,%eax
imul %edx,%eax
test %r8d,%r8d
cmovg %eax,%r9d
jle 22 <func1+0x22>
mov %edx,%eax
imul %r8d,%eax
imul %edi,%eax
add %r8d,%eax
jmp 24 <func1+0x24>
mov %edi,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (v6 < a5)
    {
        v6 = (a1 + a4 * a3) - a1;
    }
    else
    {
        v6 = a3 - a3;
    }
    if (v7 < a5)
    {
        v7 = a5 + a1 * (a3 * a5);
    }
    else
    {
        v7 = ((a4 - a4) * a1) + a1;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 10
2 6
3 6
4 6
5 6
6 12
7 14
8 14
9 14
10 14
11 14
12 18
13 20
14 20
15 20
16 20
17 20
18 20
19 21
<<<sep_out_sample>>>
mov %ecx,%eax
sub %edi,%eax
sub %esi,%eax
sub %esi,%eax
add %edi,%eax
add %edx,%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
imul %ecx,%ecx
mov %edx,%esi
sub %ecx,%esi
sub %r8d,%esi
add %eax,%esi
sub %edx,%r8d
imul %r8d,%edi
add %edi,%edx
lea 0x1(%rsi,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a3 - a4 * a4 - a5;
    v7 = (a5 - a3) * a1 + a3;
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        if (v7 < a1)
        {
            v8 += a5 * a3 * a5;
        }
        else
        {
            v8 += a5 * a4 + a4;
        }
    }
    if (a1 < a1)
    {
        v10 = a5 + a4 * a1 * a5;
    }
    else
    {
        v10 = (a4 - a1) - a2 - a2;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 24
2 24
3 24
4 24
5 26
6 26
7 26
8 26
9 26
10 4
11 4
12 4
13 4
14 26
15 5
16 5
17 5
18 26
19 27
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a1 - a4 + a5;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += a1 + a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 14
2 14
3 14
4 14
5 15
<<<sep_out_sample>>>
lea (%rsi,%rcx,1),%eax
test %r8d,%r8d
jle e <func1+0xe>
lea (%rdi,%rdi,1),%r10d
jmp 15 <func1+0x15>
mov %ecx,%r10d
imul %ecx,%r10d
lea (%rdx,%rsi,2),%r9d
mov %r8d,%r11d
imul %edi,%r11d
cmp %edi,%esi
cmovg %r11d,%r9d
add %r9d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
add %r10d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += (a5 * a2) - a5;
    }
    v8 = a2 + a4;
    if (v6 < a5)
    {
        v9 = a1 + a1;
    }
    else
    {
        v9 = a4 * a4;
    }
    if (a1 < a2)
    {
        v10 = a5 * a1;
    }
    else
    {
        v10 = a2 + (a2 + a3);
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 10
3 10
4 12
5 12
6 16
7 16
8 24
9 20
10 20
11 20
12 20
13 26
14 26
15 26
16 26
17 26
18 26
19 26
20 27
<<<sep_out_sample>>>
cmp %edx,%r8d
jge 14 <func1+0x14>
mov %edx,%r9d
imul %edx,%r9d
sub %edi,%r9d
add %ecx,%r9d
jmp 1e <func1+0x1e>
lea (%rsi,%rcx,1),%r9d
sub %edi,%r9d
add %esi,%r9d
mov %ecx,%eax
imul %r8d,%eax
lea (%rdx,%rdi,2),%r10d
lea (%r10,%rax,1),%eax
add %edx,%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
imul %edi,%edx
sub %edx,%eax
add $0x1,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a5 < a3)
    {
        v6 = a4 + ((a3 * a3) - a1);
    }
    else
    {
        v6 = ((a2 + a4) - a1) + a2;
    }
    v7 = (a5 - a1 - a5) * a3;
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += a1 * a1 - a1;
    }
    v10 = a1 + a4 * a5 + a3;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 18
12 18
13 18
14 19
15 19
16 19
17 19
18 19
19 19
20 12
21 19
22 19
23 20
<<<sep_out_sample>>>
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea (%r8,%rcx,1),%esi
lea (%rsi,%rdi,2),%eax
imul %ecx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a1 + a1;
    v7 = a4 * a1;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 6
6 5
7 6
8 7
<<<sep_out_sample>>>
mov %ecx,%eax
sub %edi,%eax
cmp %esi,%edx
jl 11 <func1+0x11>
mov %edx,%eax
sub %edi,%eax
add %esi,%eax
imul %edi,%eax
add %edx,%edi
add %esi,%edi
add %r8d,%edi
add %ecx,%edi
lea 0x1(%rax,%rdi,1),%eax
imul %r8d,%esi
add %esi,%edx
sub %edx,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a3 < a2)
    {
        v6 = a4 - a1;
    }
    else
    {
        v6 = ((a3 - a1) + a2) * a1;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        if (a1 < a5)
        {
            v7 += (a5 + a5) * a5;
        }
        else
        {
            v7 += a2 + (a5 - a3);
        }
    }
    v9 = a4 - (a3 + a2 * a5);
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 6
3 4
4 4
5 10
6 10
7 10
8 10
9 25
10 25
11 25
12 25
13 25
14 24
15 24
16 24
17 25
18 26
<<<sep_out_sample>>>
test %edi,%edi
jle c <func1+0xc>
mov %esi,%r10d
neg %r10d
jmp 17 <func1+0x17>
lea -0x1(%rdi),%r10d
imul %r8d,%r10d
sub %ecx,%r10d
lea (%rdx,%rcx,2),%r9d
cmp %edx,%r8d
jl 27 <func1+0x27>
lea (%rsi,%rdx,2),%eax
lea (%rax,%rcx,1),%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (v6 < a1)
    {
        v6 = ((a1 - a1) * a3) - a2;
    }
    else
    {
        v6 = a5 * a1 - a5 - a4;
    }
    if (a5 < a3)
    {
        v7 = (a3 + a4) + a4;
    }
    else
    {
        v7 = a3 + ((a3 + a4) + a2);
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 14
10 12
11 12
12 18
13 18
14 20
15 20
16 20
17 20
18 20
19 20
20 21
<<<sep_out_sample>>>
test %esi,%esi
jle c <func1+0xc>
mov %ecx,%eax
sub %esi,%eax
sub %esi,%eax
jmp 13 <func1+0x13>
mov %esi,%eax
neg %eax
imul %edx,%eax
add %edi,%edx
add %edx,%esi
add %r8d,%esi
add %esi,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (v6 < a2)
    {
        v6 = a4 - a2 - a2;
    }
    else
    {
        v6 = a3 - ((a3 * a2) + a3);
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a1 + a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 17
11 17
12 17
13 17
14 17
15 18
<<<sep_out_sample>>>
lea (%rsi,%rdx,1),%r9d
cmp $0x1,%esi
jle 11 <func1+0x11>
lea (%r8,%rdi,2),%eax
add %edx,%eax
jmp 20 <func1+0x20>
mov %edi,%r10d
sub %ecx,%r10d
mov %r8d,%eax
sub %edx,%eax
imul %r10d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a2 + a3;
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        if (v7 < a3)
        {
            v7 += a5 + a2;
        }
        else
        {
            v7 += (a3 * a2) - a5;
        }
    }
    if (v8 < a2)
    {
        v9 = (a1 + a1) + a5 + a3;
    }
    else
    {
        v9 = (a1 - a4) * (a5 - a3);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 17
3 17
4 19
5 19
6 19
7 23
8 23
9 23
10 23
11 23
12 25
13 25
14 25
15 25
16 25
17 25
18 26
<<<sep_out_sample>>>
mov %esi,%r11d
sub %edi,%r11d
add %r8d,%r11d
cmp %r8d,%edi
jge 17 <func1+0x17>
lea (%rsi,%rsi,2),%r10d
sub %edx,%r10d
jmp 1f <func1+0x1f>
lea (%r8,%rsi,2),%r10d
imul %ecx,%r10d
lea (%r8,%rsi,1),%r9d
cmp %ecx,%esi
jle 35 <func1+0x35>
mov %r8d,%r9d
sub %esi,%r9d
imul %edx,%r9d
imul %edi,%r9d
lea (%rcx,%rcx,1),%eax
cmp %ecx,%esi
jge 41 <func1+0x41>
lea (%rcx,%rdx,1),%eax
sub %esi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r11d,%ecx
add %r10d,%ecx
add %ecx,%r9d
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a2 - a1 + a5;
    if (a1 < a5)
    {
        v7 = (a2 + a2 - a3) + a2;
    }
    else
    {
        v7 = ((a2 + a5) + a2) * a4;
    }
    if (a4 < a2)
    {
        v8 = (a3 * (a5 - a2)) * a1;
    }
    else
    {
        v8 = a5 + a2;
    }
    if (a2 < a4)
    {
        v9 = a4 + a3 - a2;
    }
    else
    {
        v9 = a4 - (a2 - a4 - a2);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 5
5 5
6 7
7 7
8 7
9 11
10 11
11 19
12 13
13 13
14 15
15 15
16 15
17 15
18 27
19 21
20 21
21 23
22 23
23 29
24 29
25 29
26 29
27 29
28 29
29 29
30 29
31 30
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %eax,%ecx
add %esi,%ecx
imul %r8d,%edx
imul %edx,%esi
sub %edi,%esi
lea 0x1(%rcx,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = (a2 - a3) + a3;
    if (a3 < a3)
    {
        v7 = a1 - (a2 * a3);
    }
    else
    {
        v7 = ((a5 * a3) * a2) - a1;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += a2 * a1 + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 18
5 18
6 11
7 11
8 11
9 18
10 19
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea (%r8,%rcx,1),%eax
mov %ecx,%r9d
imul %ecx,%r9d
add %r9d,%eax
add %edx,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a4 * a4;
    v7 = a4 + a3;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 4
7 6
8 5
9 6
10 7
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
mov %esi,%r8d
sub %edx,%r8d
sub %edx,%r8d
lea 0x1(%rax,%r8,1),%eax
sub %esi,%edi
sub %esi,%edi
imul %edi,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = (a2 - a3 - a3) - a4;
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += (a3 + a4) + a1;
    }
    v9 = a4 * (a1 - a2 - a2);
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 4
5 4
6 4
7 11
8 10
9 10
10 10
11 11
12 12
<<<sep_out_sample>>>
lea (%rsi,%rdx,1),%eax
imul %edx,%eax
mov %esi,%r11d
sub %eax,%r11d
lea (%rdx,%rdi,1),%r10d
test %r8d,%r8d
jle 23 <func1+0x23>
mov %edi,%r9d
sub %edx,%r9d
add %edi,%r9d
sub %r8d,%r9d
jmp 2a <func1+0x2a>
lea (%r8,%rdi,2),%r9d
add %edi,%r9d
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a2 - ((a2 + a3) * a3);
    if (a2 < a2)
    {
        v7 = a5 + a2 * a5;
    }
    else
    {
        v7 = (a3 + (a5 - a5)) + a1;
    }
    if (v8 < a5)
    {
        v8 = a1 - (a3 - a1) - a5;
    }
    else
    {
        v8 = a5 + a1 + a1 + a1;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a1)
    {
        v9 += (a3 * a5) - a3;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 11
6 13
7 13
8 15
9 15
10 15
11 15
12 15
13 19
14 19
15 26
16 26
17 26
18 26
19 26
20 26
21 26
22 27
<<<sep_out_sample>>>
cmp %edi,%esi
jge c <func1+0xc>
lea -0x1(%rdx),%eax
imul %esi,%eax
jmp 13 <func1+0x13>
lea (%rdx,%r8,2),%eax
add %r8d,%eax
lea (%rdi,%rcx,2),%r9d
cmp %edx,%eax
jge 21 <func1+0x21>
lea (%rdx,%rdx,1),%r10d
jmp 28 <func1+0x28>
mov %ecx,%r10d
imul %esi,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%eax
lea 0x1(%r9,%rax,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a2 < a1)
    {
        v6 = a3 * a2 - a2;
    }
    else
    {
        v6 = (a5 + a5 + a3) + a5;
    }
    v7 = a4 + a4 + a1;
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += a1 - a5 + a3;
    }
    if (v6 < a3)
    {
        v10 = a3 + a3;
    }
    else
    {
        v10 = a4 * a2;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 12
9 18
10 18
11 20
12 20
13 24
14 24
15 26
16 26
17 26
18 26
19 26
20 26
21 26
22 27
<<<sep_out_sample>>>
mov %esi,%r10d
sub %edi,%r10d
cmp %esi,%ecx
jge 19 <func1+0x19>
mov %ecx,%r9d
sub %edx,%r9d
imul %r8d,%r9d
add %edi,%r9d
jmp 25 <func1+0x25>
mov %ecx,%r9d
sub %edi,%r9d
add %edx,%r9d
sub %edi,%r9d
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea (%r8,%rcx,2),%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a4 + a5 - a5;
    v7 = a2 - a1;
    if (a4 < a2)
    {
        v8 = (a4 - a3) * a5 + a1;
    }
    else
    {
        v8 = (a3 - (a1 - a4)) - a1;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        if (a5 < a3)
        {
            v9 += (a2 - a1) * a1;
        }
        else
        {
            v9 += a1 + a1 * a2;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 5
2 5
3 6
4 6
5 8
6 8
7 8
8 8
9 8
10 12
11 12
12 12
13 12
14 26
15 26
16 26
17 26
18 26
19 26
20 27
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %eax,%ecx
add %edx,%esi
imul %esi,%r8d
lea (%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a5 * a3 + a5 * a2;
    if (a2 < a2)
    {
        v7 = a5 + a1;
    }
    else
    {
        v7 = a2 - a2;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 13
2 13
3 13
4 13
5 4
6 4
7 13
8 14
<<<sep_out_sample>>>
lea (%rdx,%rcx,1),%r11d
add %r8d,%r11d
sub %esi,%r11d
lea (%rsi,%r8,1),%r9d
cmp %r8d,%ecx
jl 23 <func1+0x23>
mov %r8d,%eax
imul %r8d,%eax
imul %edx,%eax
mov %ecx,%r9d
sub %eax,%r9d
cmp %edi,%r9d
jge 35 <func1+0x35>
lea -0x1(%r8),%r10d
imul %esi,%r10d
add %ecx,%r10d
jmp 44 <func1+0x44>
mov %r8d,%eax
imul %esi,%eax
mov %edi,%r10d
sub %eax,%r10d
add %r8d,%r10d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r11d,%ecx
add %ecx,%r9d
lea (%r9,%r10,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a3 + a4 + a5 - a2;
    if (a4 < a5)
    {
        v7 = a2 + a5;
    }
    else
    {
        v7 = a4 - (a5 * a5) * a3;
    }
    if (v7 < a1)
    {
        v8 = ((a2 * a5) - a2) + a4;
    }
    else
    {
        v8 = a1 - (a5 * a2) + a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 7
5 5
6 5
7 11
8 11
9 11
10 11
11 11
12 13
13 13
14 15
15 15
16 15
17 15
18 19
19 19
20 19
21 19
22 19
23 21
24 21
25 21
26 21
27 21
28 21
29 21
30 22
<<<sep_out_sample>>>
mov %edi,%eax
sub %r8d,%eax
cmp %esi,%ecx
jge 19 <func1+0x19>
mov %edx,%eax
imul %edx,%eax
mov %ecx,%r9d
sub %eax,%r9d
mov %r9d,%eax
sub %esi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%eax
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a4 < a2)
    {
        v6 = (a4 - a3 * a3) - a2;
    }
    else
    {
        v6 = a4 + (a1 - a4) - a5;
    }
    v7 = a3 + (a5 * (a4 - a4));
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 10
2 10
3 4
4 4
5 6
6 6
7 6
8 6
9 6
10 6
11 13
12 13
13 13
14 13
15 13
16 13
17 14
<<<sep_out_sample>>>
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rcx,%rdi,2),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a1 + a1;
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        if (a1 < a5)
        {
            v7 += a2 - a2 * a3;
        }
        else
        {
            v7 += a4 + a5;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 17
6 18
<<<sep_out_sample>>>
lea (%rsi,%rsi,1),%eax
cmp %edx,%ecx
jge 16 <func1+0x16>
mov %edi,%r9d
imul %ecx,%r9d
mov %esi,%eax
sub %edi,%eax
imul %r9d,%eax
add %edi,%edx
add %edx,%esi
add %r8d,%esi
add %esi,%ecx
add %ecx,%eax
imul %r8d,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a4 < a3)
    {
        v6 = (a1 * a4) * (a2 - a1);
    }
    else
    {
        v6 = a2 + a2;
    }
    if (a3 < a3)
    {
        v7 = a3 - a1 - (a2 + a3);
    }
    else
    {
        v7 = a5 * a5;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 6
7 6
8 6
9 20
10 20
11 20
12 20
13 20
14 18
15 20
16 21
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %eax,%ecx
imul %edi,%edi
imul %edi,%edx
add %esi,%edx
add %edx,%ecx
sub %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = ((a1 * a1) * a3) + a2;
    v7 = (a5 + (a2 - a2)) - a2;
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += a3 + a3 - a2;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a1)
    {
        if (a5 < a5)
        {
            v10 += a4 * a3 * a1;
        }
        else
        {
            v10 += a3 * a1 - a4;
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 23
2 23
3 23
4 23
5 4
6 4
7 4
8 23
9 5
10 23
11 24
<<<sep_out_sample>>>
lea (%r8,%rdx,1),%eax
lea (%rdx,%rcx,1),%r9d
cmp %ecx,%edi
cmovl %eax,%r9d
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
imul %edx,%edx
sub %edi,%edx
lea (%rcx,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a1 < a4)
    {
        v6 = a5 + a3;
    }
    else
    {
        v6 = a4 + (a3 - a5) + a5;
    }
    v7 = a3 * a3 - a1;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 13
6 13
7 13
8 13
9 13
10 12
11 12
12 13
13 14
<<<sep_out_sample>>>
cmp %ecx,%r8d
jge 13 <func1+0x13>
lea (%rdi,%rsi,1),%r9d
mov %edi,%eax
imul %esi,%eax
add %eax,%r9d
jmp 1e <func1+0x1e>
lea -0x1(%r8),%r9d
imul %esi,%r9d
add %edx,%r9d
cmp %esi,%r8d
jle 2e <func1+0x2e>
lea -0x1(%rsi),%eax
imul %r8d,%eax
add %eax,%edx
jmp 35 <func1+0x35>
lea (%rdx,%r8,2),%edx
imul %edi,%edx
lea (%rdi,%r8,2),%eax
lea (%rax,%rsi,1),%eax
add %eax,%ecx
lea 0x1(%r9,%rcx,1),%eax
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a5 < a4)
    {
        v6 = (a1 + a2) + a1 * a2;
    }
    else
    {
        v6 = ((a5 * a2) - a2) + a3;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += (a4 + a5) + a5;
    }
    if (a2 < a5)
    {
        v9 = (a2 * a5) - a5 + a3;
    }
    else
    {
        v9 = a1 * (a5 + (a3 + a5));
    }
    if (a3 < a3)
    {
        v10 = a5 * a1;
    }
    else
    {
        v10 = a5 - a3;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 17
12 17
13 19
14 19
15 19
16 19
17 23
18 23
19 33
20 33
21 33
22 33
23 33
24 34
<<<sep_out_sample>>>
cmp %edi,%esi
jge f <func1+0xf>
mov %r8d,%eax
sub %edi,%eax
lea (%rax,%r8,2),%r9d
jmp 1a <func1+0x1a>
lea (%r8,%rcx,1),%r9d
sub %esi,%r9d
imul %edx,%r9d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea (%rcx,%r9,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a2 < a1)
    {
        v6 = a5 + a5 + (a5 - a1);
    }
    else
    {
        v6 = a3 * (a5 + a4 - a2);
    }
    v7 = (a1 + a2) * (a5 - a5);
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 13
11 13
12 13
13 13
14 13
15 14
<<<sep_out_sample>>>
cmp %ecx,%r8d
jge d <func1+0xd>
mov %esi,%r9d
sub %r8d,%r9d
jmp 18 <func1+0x18>
mov %esi,%r9d
imul %esi,%r9d
imul %r8d,%r9d
mov %esi,%eax
cmp %esi,%ecx
jge 27 <func1+0x27>
lea (%r8,%r8,1),%eax
sub %edi,%eax
imul %edi,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %esi,%edx
add %r8d,%edx
add %ecx,%edx
add %r9d,%edx
add %edx,%eax
sub %esi,%r8d
imul %r8d,%ecx
add %ecx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a5 < a4)
    {
        v6 = a1 - a1 - (a5 - a2);
    }
    else
    {
        v6 = a2 * a2 * a5;
    }
    if (a4 < a2)
    {
        v7 = (a5 + a5 - a1) * a1;
    }
    else
    {
        v7 = a2 - (a1 * (a5 - a5));
    }
    v8 = ((a5 - a2) * a4) + a1;
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        if (a1 < a1)
        {
            v9 += a1 * (a2 * a5);
        }
        else
        {
            v9 += a4 + a4;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 18
10 12
11 12
12 14
13 14
14 14
15 33
16 33
17 33
18 33
19 33
20 33
21 20
22 20
23 20
24 33
25 34
<<<sep_out_sample>>>
test %esi,%esi
jle f <func1+0xf>
lea (%rdx,%rdx,1),%eax
mov %ecx,%r9d
sub %eax,%r9d
jmp 18 <func1+0x18>
mov %ecx,%eax
imul %edi,%eax
lea (%rax,%r8,2),%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
add %ecx,%r8d
imul %r8d,%edi
add %edi,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (v6 < a2)
    {
        v6 = a4 - (a3 + a3);
    }
    else
    {
        v6 = a5 + a4 * a1 + a5;
    }
    v7 = a4 + ((a4 + a5) * a1);
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 13
11 13
12 13
13 13
14 13
15 12
16 12
17 12
18 13
19 14
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %edx,%r8d
lea (%r8,%rcx,1),%edx
mov %ecx,%eax
sub %edi,%eax
imul %eax,%ecx
sub %esi,%ecx
lea (%rdx,%rcx,1),%eax
sub %esi,%eax
sub %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = (a4 - a1) * a4 - a2;
    v7 = a3 - (a3 + a2) - a1;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 4
7 4
8 4
9 6
10 5
11 6
12 7
<<<sep_out_sample>>>
cmp %ecx,%r8d
jge 16 <func1+0x16>
mov %esi,%r9d
imul %esi,%r9d
imul %edx,%r9d
imul %ecx,%r9d
jmp 1e <func1+0x1e>
lea (%rdi,%r8,2),%eax
lea (%rax,%rsi,1),%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
sub %esi,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a5 < a4)
    {
        v6 = (a2 * a2) * a3 * a4;
    }
    else
    {
        v6 = ((a5 + a1) + a2) + a5;
    }
    v7 = a3 - (a2 - a1) - a1;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 13
11 13
12 13
13 13
14 13
15 12
16 13
17 14
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %edx,%r8d
lea (%rsi,%rcx,2),%eax
lea 0x1(%r8,%rax,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a4 + a2 - a4 + a4;
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += a2 * a1 * a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 4
5 10
6 11
<<<sep_out_sample>>>
add %edx,%edi
add %esi,%edi
add %r8d,%edi
add %ecx,%edi
mov %r8d,%eax
sub %edx,%eax
imul %esi,%r8d
sub %r8d,%eax
add %edi,%eax
add %edx,%ecx
add %ecx,%esi
imul %esi,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = (a5 - a3) - a2 * a5;
    v7 = a3 * ((a3 + a4) + a2);
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 4
7 4
8 4
9 6
10 5
11 5
12 5
13 6
14 7
<<<sep_out_sample>>>
cmp %r8d,%edi
jge 11 <func1+0x11>
mov %edx,%eax
sub %ecx,%eax
sub %esi,%eax
imul %r8d,%eax
jmp 22 <func1+0x22>
mov %edx,%eax
imul %ecx,%eax
mov %edi,%r9d
sub %eax,%r9d
mov %r9d,%eax
add %r8d,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a1 < a5)
    {
        v6 = (a3 - a4 - a2) * a5;
    }
    else
    {
        v6 = a1 - (a3 * a4) + a5;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += (a3 * a2) * a2;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        v9 += a4 + a4 + a3;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 10
13 10
14 22
15 22
16 22
17 22
18 22
19 23
<<<sep_out_sample>>>
cmp $0x1,%edi
jle b <func1+0xb>
mov %ecx,%eax
sub %esi,%eax
jmp 10 <func1+0x10>
mov %esi,%eax
imul %edx,%eax
lea 0x1(%rax,%rdi,1),%eax
add %eax,%edx
add %edx,%esi
add %r8d,%esi
lea 0x2(%rcx,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a4 - a1 * a4;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        if (v6 < a2)
        {
            v8 += a1 * a5 - a1;
        }
        else
        {
            v8 += a4 * a3;
        }
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a2)
    {
        v10 += a2 + a1 * a1;
    }
    if (v7 < a1)
    {
        v12 = a4 - a2;
    }
    else
    {
        v12 = a4 - a4 + a2 * a3;
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 26
2 26
3 28
4 28
5 28
6 32
7 32
8 34
9 34
10 34
11 34
12 34
13 35
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (a1 < a2)
        {
            v6 += a2 + a5 * a4;
        }
        else
        {
            v6 += (a1 * a1) - a2;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += a1 + a2 - a3;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a5)
    {
        if (a3 < a2)
        {
            v10 += a4 + (a2 * a1);
        }
        else
        {
            v10 += (a2 + a2) - a2;
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 33
2 33
3 33
4 33
5 34
<<<sep_out_sample>>>
lea 0x2(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = a5 - a5;
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        if (a2 < a5)
        {
            v7 += (a1 * a3) - a1;
        }
        else
        {
            v7 += a2 + a1 + a3;
        }
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        v9 += a5 - a2;
    }
    v11 = 0;
    for (v12 = 0; v12++; v12<a1)
    {
        if (v12 < a1)
        {
            v11 += a1 * a2;
        }
        else
        {
            v11 += (a3 + a5) - a1;
        }
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 34
2 34
3 34
4 34
5 35
<<<sep_out_sample>>>
mov %edx,%eax
sub %edi,%eax
cmp %esi,%edx
jge 13 <func1+0x13>
lea 0x1(%r8),%eax
imul %edx,%eax
imul %r8d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %ecx,%r8d
add %r8d,%eax
sub %ecx,%edx
sub %ecx,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a3 < a2)
    {
        v6 = ((a5 * a3) + a3) * a5;
    }
    else
    {
        v6 = a3 - a1;
    }
    v7 = a3 + a1 - a4 - a4;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 10
2 10
3 4
4 4
5 6
6 6
7 6
8 12
9 13
10 13
11 13
12 13
13 12
14 12
15 13
16 14
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %eax,%ecx
imul %edi,%edi
lea 0x1(%rcx,%rdi,1),%ecx
imul %r8d,%edx
lea (%rdx,%rsi,2),%eax
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = a1 * a1;
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        if (a4 < a4)
        {
            v7 += a3 * a1;
        }
        else
        {
            v7 += a4 * a4 + a1;
        }
    }
    v9 = a2 + a5 * a3 + a2;
    v10 = 0;
    for (v11 = 0; v11++; v11<a4)
    {
        if (a2 < a2)
        {
            v10 += (a3 - a4) + a4;
        }
        else
        {
            v10 += a1 + a1 + a2;
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 30
2 30
3 30
4 30
5 4
6 30
7 17
8 17
9 30
10 31
<<<sep_out_sample>>>
cmp %r8d,%ecx
jge e <func1+0xe>
mov %edx,%r10d
imul %edx,%r10d
jmp 1f <func1+0x1f>
mov $0x1,%r10d
sub %edx,%r10d
imul %ecx,%r10d
imul %edi,%r10d
lea (%rsi,%rdx,1),%r9d
cmp %esi,%ecx
jle 34 <func1+0x34>
mov %edi,%r9d
sub %r8d,%r9d
imul %edx,%r9d
add %esi,%r9d
cmp %edi,%r8d
jge 3e <func1+0x3e>
lea (%rsi,%rsi,1),%eax
jmp 49 <func1+0x49>
mov %r8d,%eax
imul %r8d,%eax
sub %ecx,%eax
sub %ecx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r10d,%ecx
add %ecx,%r9d
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a4 < a5)
    {
        v6 = a3 * a3;
    }
    else
    {
        v6 = (a4 - a3 * a4) * a1;
    }
    if (a2 < a4)
    {
        v7 = a2 + ((a1 - a5) * a3);
    }
    else
    {
        v7 = a2 + a3;
    }
    if (a5 < a1)
    {
        v8 = a3 + a2 - a3 + a2;
    }
    else
    {
        v8 = a5 * a5 - a4 - a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 10
10 18
11 12
12 12
13 14
14 14
15 14
16 14
17 20
18 20
19 22
20 22
21 26
22 26
23 26
24 26
25 28
26 28
27 28
28 28
29 28
30 28
31 28
32 29
<<<sep_out_sample>>>
lea (%r8,%rsi,1),%r10d
mov %edi,%eax
imul %esi,%eax
sub %eax,%r10d
mov %edx,%eax
sub %r8d,%eax
sub %ecx,%eax
sub %esi,%eax
cmp %r10d,%edi
jle 29 <func1+0x29>
mov %edi,%r9d
imul %edi,%r9d
sub %ecx,%r9d
sub %ecx,%r9d
jmp 33 <func1+0x33>
mov %r8d,%r9d
sub %edi,%r9d
imul %esi,%r9d
cmp %edi,%r9d
jge 41 <func1+0x41>
mov %r8d,%r11d
imul %edx,%r11d
jmp 48 <func1+0x48>
mov %edi,%r11d
imul %edx,%r11d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r10d
add %eax,%r10d
add %r10d,%r9d
lea (%r9,%r11,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = (a5 + a2) - a1 * a2;
    v7 = a3 - a5 - a4 - a2;
    if (v6 < a1)
    {
        v8 = ((a1 * a1) - a4) - a4;
    }
    else
    {
        v8 = a5 * a2 - (a2 * a1);
    }
    if (v8 < a1)
    {
        v9 = a5 * a3;
    }
    else
    {
        v9 = a1 * a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 5
6 5
7 5
8 5
9 6
10 6
11 8
12 8
13 8
14 8
15 8
16 12
17 12
18 12
19 14
20 14
21 16
22 16
23 16
24 20
25 20
26 22
27 22
28 22
29 22
30 22
31 22
32 22
33 22
34 23
<<<sep_out_sample>>>
lea 0x1(%rcx),%r9d
imul %edx,%r9d
add %esi,%r9d
lea (%r8,%rcx,1),%r10d
test %esi,%esi
jg 1d <func1+0x1d>
lea (%rdx,%r8,1),%eax
mov %esi,%r10d
sub %eax,%r10d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%eax
add %r10d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a4 * a3 + a3 + a2;
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += (a4 + a5) * a3;
    }
    if (v7 < a2)
    {
        v9 = a5 + a4;
    }
    else
    {
        v9 = a2 - (a3 + a5);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 12
5 10
6 10
7 16
8 16
9 16
10 18
11 18
12 18
13 18
14 18
15 18
16 19
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
imul %ecx,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a5 * (a2 + a2);
    }
    v8 = a4 * a3;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 9
6 10
7 11
<<<sep_out_sample>>>
cmp %r8d,%ecx
jge 10 <func1+0x10>
mov %edx,%r9d
neg %r9d
sub %esi,%r9d
jmp 21 <func1+0x21>
mov $0x1,%r9d
sub %edi,%r9d
imul %edx,%r9d
imul %ecx,%r9d
mov %edx,%eax
sub %r8d,%eax
cmp %edx,%ecx
jle 38 <func1+0x38>
mov %ecx,%eax
sub %edx,%eax
mov %ecx,%r10d
imul %edx,%r10d
sub %r10d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a4 < a5)
    {
        v6 = ((a2 - a2) - a3) - a2;
    }
    else
    {
        v6 = (a3 - a1 * a3) * a4;
    }
    if (a3 < a4)
    {
        v7 = a4 - a3 - a4 * a3;
    }
    else
    {
        v7 = (a3 - (a2 + a5)) + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 10
11 18
12 18
13 12
14 12
15 14
16 14
17 14
18 14
19 14
20 20
21 20
22 20
23 20
24 20
25 20
26 21
<<<sep_out_sample>>>
cmp %r8d,%edi
jge f <func1+0xf>
lea (%rsi,%r8,2),%eax
lea (%rax,%rdx,1),%r9d
jmp 1a <func1+0x1a>
mov %edi,%r9d
imul %ecx,%r9d
imul %ecx,%r9d
cmp %ecx,%r9d
jge 28 <func1+0x28>
mov %ecx,%r8d
imul %edi,%r8d
jmp 30 <func1+0x30>
mov %edi,%eax
imul %edi,%eax
add %eax,%r8d
lea (%rdx,%rdi,2),%eax
add %eax,%esi
lea 0x1(%rcx,%rsi,1),%eax
add %eax,%r9d
lea (%r9,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a2 * (a2 + a2);
    }
    if (a1 < a5)
    {
        v8 = a5 + (a3 + (a5 + a2));
    }
    else
    {
        v8 = a1 * a4 * a4;
    }
    if (v8 < a4)
    {
        v9 = a4 * a1;
    }
    else
    {
        v9 = a5 + a1 * a1;
    }
    if (a4 < a4)
    {
        v10 = a3 * a4;
    }
    else
    {
        v10 = (a5 + a1) - a5 - a5;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 15
7 15
8 15
9 17
10 17
11 19
12 19
13 19
14 23
15 23
16 23
17 33
18 33
19 33
20 33
21 33
22 34
<<<sep_out_sample>>>
lea (%rcx,%rdx,1),%r10d
add %edi,%r10d
mov %edx,%r9d
sub %ecx,%r9d
lea (%rsi,%rsi,1),%r11d
sub %r8d,%r9d
cmp %edx,%esi
cmovg %r11d,%r9d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a2 - a2 * a5;
    }
    v8 = a1 + (a4 + a3);
    if (a3 < a2)
    {
        v9 = a2 + a2;
    }
    else
    {
        v9 = (a3 - a4) - a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 16
4 16
5 12
6 12
7 12
8 12
9 18
10 18
11 18
12 18
13 18
14 18
15 19
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a5 + a4;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += a3 + a2 - a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 14
2 14
3 14
4 14
5 15
<<<sep_out_sample>>>
cmp %esi,%edi
jge 1c <func1+0x1c>
mov $0x1,%r10d
sub %edx,%r10d
imul %esi,%r10d
add %edx,%r10d
mov %ecx,%r9d
sub %r8d,%r9d
jmp 2c <func1+0x2c>
mov %ecx,%r10d
sub %esi,%r10d
add %ecx,%r10d
add %edx,%r10d
lea (%rcx,%r8,1),%r9d
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
imul %edx,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a1 < a2)
    {
        v6 = a3 - ((a3 * a2) - a2);
    }
    else
    {
        v6 = a4 - a2 + a4 + a3;
    }
    if (a1 < a2)
    {
        v7 = a4 - a5;
    }
    else
    {
        v7 = a4 + a5;
    }
    v8 = a4 * a3;
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        if (v9 < a2)
        {
            v9 += a5 * a1;
        }
        else
        {
            v9 += a1 + a1 - a5;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 14
8 14
9 14
10 10
11 10
12 10
13 10
14 18
15 33
16 33
17 33
18 33
19 33
20 33
21 20
22 33
23 34
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %edx,%r8d
lea 0x1(%rcx,%r8,1),%eax
imul %ecx,%esi
sub %esi,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += (a2 - a4) * a4;
    }
    v8 = a1 - (a4 * a2);
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 9
6 9
7 10
8 11
<<<sep_out_sample>>>
lea (%rdi,%rcx,1),%r9d
cmp %esi,%ecx
jle 19 <func1+0x19>
mov %ecx,%eax
sub %r8d,%eax
mov %esi,%r10d
imul %esi,%r10d
sub %r10d,%eax
jmp 1e <func1+0x1e>
mov %edx,%eax
imul %edx,%eax
mov %edi,%r10d
imul %r8d,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a1 + a4;
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        if (a5 < a4)
        {
            v7 += (a4 + a1) - a4;
        }
        else
        {
            v7 += a4 + a5 + a2;
        }
    }
    if (a2 < a4)
    {
        v9 = a4 - a5 - a2 * a2;
    }
    else
    {
        v9 = a3 * a3;
    }
    v10 = a1 * a5 + a4 - a4;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 17
3 17
4 19
5 19
6 19
7 19
8 19
9 19
10 23
11 23
12 25
13 25
14 26
15 26
16 26
17 26
18 26
19 26
20 26
21 27
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
imul %edi,%ecx
add %ecx,%eax
sub %edi,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a4 * a1;
    v7 = a5 - a1;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 6
7 5
8 6
9 7
<<<sep_out_sample>>>
test %edx,%edx
jle c <func1+0xc>
mov %edi,%eax
imul %r8d,%eax
jmp 19 <func1+0x19>
mov %esi,%r9d
sub %r8d,%r9d
lea (%rcx,%rdi,1),%eax
imul %r9d,%eax
lea (%rdi,%rdx,1),%r9d
add %esi,%r9d
add %r9d,%r8d
add %ecx,%r8d
add %eax,%r8d
add %ecx,%edx
add %edx,%edi
add %edi,%esi
lea 0x1(%r8,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (v6 < a3)
    {
        v6 = a1 * a5;
    }
    else
    {
        v6 = (a2 - a5) * (a4 + a1);
    }
    if (a3 < a3)
    {
        v7 = a1 - a2 - a3 + a2;
    }
    else
    {
        v7 = a4 + a3 + a1 + a2;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += a2 - a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 10
10 25
11 25
12 25
13 25
14 25
15 18
16 18
17 18
18 25
19 26
<<<sep_out_sample>>>
lea (%rsi,%rdi,2),%eax
lea (%rdi,%rdx,2),%edx
lea 0x1(%rdx,%rax,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a2 - (a5 * a3);
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += a5 * a4 - a3;
    }
    v10 = a3 + (a1 + (a1 + a2));
    v11 = 0;
    for (v12 = 0; v12++; v12<a2)
    {
        v11 += a1 * a4 * a1;
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 14
2 20
3 20
4 20
5 20
6 20
7 21
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
add %ecx,%esi
imul %edx,%edx
lea 0x1(%rsi,%rdx,1),%eax
mov %r8d,%edx
sub %edi,%edx
imul %edx,%ecx
add %ecx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a3 * a3;
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        if (v6 < a3)
        {
            v7 += a5 + (a2 * a5);
        }
        else
        {
            v7 += a4 * a2;
        }
    }
    v9 = a5 - a4 * (a1 - a5);
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 18
5 4
6 18
7 17
8 17
9 17
10 17
11 18
12 19
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (a2 < a5)
        {
            v6 += (a2 - a4) - a5;
        }
        else
        {
            v6 += a3 * a1 * a3;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        if (a5 < a5)
        {
            v8 += a4 + a3 - a5;
        }
        else
        {
            v8 += a5 * a3;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 28
2 28
3 28
4 28
5 29
<<<sep_out_sample>>>
cmp %ecx,%esi
jge c <func1+0xc>
mov %r8d,%eax
imul %edx,%eax
jmp 14 <func1+0x14>
lea (%rsi,%rcx,1),%eax
imul %ecx,%eax
sub %edx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a2 < a4)
    {
        v6 = a3 * a5 - a3 + a3;
    }
    else
    {
        v6 = ((a2 + a4) * a4) - a3;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += a3 - a2 * a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 17
10 17
11 17
12 17
13 17
14 18
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %edx,%r8d
lea (%r8,%rcx,1),%edx
sub $0x2,%ecx
imul %ecx,%esi
lea 0x1(%rdx,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = ((a2 * a4) - a2) - a2;
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += (a1 - a3) * a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 4
6 4
7 10
8 11
<<<sep_out_sample>>>
mov %edi,%eax
sub %r8d,%eax
lea (%rax,%rdx,2),%eax
cmp %esi,%edi
jge 1b <func1+0x1b>
mov %r8d,%r9d
imul %edi,%r9d
sub %edx,%r9d
sub %esi,%r9d
jmp 2b <func1+0x2b>
mov $0x1,%r9d
sub %esi,%r9d
imul %edi,%r9d
sub %edx,%r9d
lea 0x1(%r9,%rdi,1),%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = a3 - (a5 - a1) + a3;
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += (a3 - a1) + a4;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a1)
    {
        if (a4 < a3)
        {
            v9 += a1 + a4 - a5;
        }
        else
        {
            v9 += a4 - a1;
        }
    }
    if (a1 < a2)
    {
        v11 = (a5 * a1 - a3) - a2;
    }
    else
    {
        v11 = a1 - a2 * a1 - a3;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 22
5 22
6 24
7 24
8 24
9 24
10 24
11 28
12 28
13 28
14 28
15 30
16 30
17 30
18 30
19 30
20 30
21 31
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (a3 < a4)
        {
            v6 += a3 * a5 * a5;
        }
        else
        {
            v6 += (a1 * a3) - a4;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += a5 * a3 + a1;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a4)
    {
        if (v10 < a5)
        {
            v10 += a3 * a4 * a2;
        }
        else
        {
            v10 += (a2 * a1) - a4;
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 33
2 33
3 33
4 33
5 34
<<<sep_out_sample>>>
cmp %edi,%esi
jge 12 <func1+0x12>
mov %r8d,%eax
imul %edi,%eax
imul %ecx,%eax
sub %r8d,%eax
jmp 17 <func1+0x17>
mov %edi,%eax
imul %edx,%eax
mov %edi,%r9d
imul %r8d,%r9d
add %r9d,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (a4 < a3)
        {
            v6 += a2 - a4;
        }
        else
        {
            v6 += a1 + (a1 + a5);
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += (a5 - a5) - a5;
    }
    if (a2 < a1)
    {
        v10 = a5 * a1 * a4 - a5;
    }
    else
    {
        v10 = a1 * a3;
    }
    v11 = a1 * a5;
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 23
4 23
5 23
6 23
7 23
8 27
9 27
10 29
11 29
12 30
13 30
14 30
15 30
16 30
17 30
18 31
<<<sep_out_sample>>>
mov %edx,%eax
sub %ecx,%eax
cmp %ecx,%r8d
jge 12 <func1+0x12>
mov %esi,%eax
sub %edx,%eax
add %esi,%eax
sub %r8d,%eax
lea 0x2(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a5 - a4;
    }
    if (a5 < a4)
    {
        v8 = a2 + (a2 - a3) - a5;
    }
    else
    {
        v8 = a3 - a4;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        v9 += a3 * a5 + a2;
    }
    v11 = 0;
    for (v12 = 0; v12++; v12<a2)
    {
        if (v11 < a2)
        {
            v11 += a3 + (a5 + a2);
        }
        else
        {
            v11 += a2 - a5;
        }
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 15
2 15
3 9
4 9
5 11
6 11
7 11
8 11
9 34
10 34
11 34
12 34
13 34
14 35
<<<sep_out_sample>>>
mov %edx,%eax
imul %edx,%eax
lea (%rax,%rdx,2),%r9d
cmp %edi,%esi
jge 18 <func1+0x18>
mov %esi,%eax
imul %ecx,%eax
add %edx,%eax
sub %ecx,%eax
jmp 22 <func1+0x22>
mov %edi,%eax
sub %r8d,%eax
imul %ecx,%eax
add %edx,%eax
cmp %r8d,%ecx
jge 31 <func1+0x31>
lea (%r8,%rdx,1),%r10d
imul %r8d,%r10d
jmp 38 <func1+0x38>
mov %esi,%r10d
imul %edx,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a3 + a3 + (a3 * a3);
    if (a2 < a1)
    {
        v7 = a3 + a2 * a4 - a4;
    }
    else
    {
        v7 = ((a1 - a5) * a4) + a3;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        if (a4 < a2)
        {
            v8 += (a3 - a3) * a1;
        }
        else
        {
            v8 += a5 * a3;
        }
    }
    if (a4 < a5)
    {
        v10 = (a5 + a3) * a5;
    }
    else
    {
        v10 = a2 * a3;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 5
5 5
6 7
7 7
8 7
9 7
10 7
11 11
12 11
13 11
14 11
15 25
16 25
17 27
18 27
19 27
20 31
21 31
22 33
23 33
24 33
25 33
26 33
27 33
28 33
29 34
<<<sep_out_sample>>>
add $0x1,%edi
mov %edi,%eax
imul %edx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = a4 - a4;
    v7 = a3 * a1 + a3;
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        if (a4 < a5)
        {
            v8 += a5 + a5 - a3;
        }
        else
        {
            v8 += a2 * a1 - a3;
        }
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a2)
    {
        if (v10 < a3)
        {
            v10 += (a1 + a3) + a3;
        }
        else
        {
            v10 += (a2 * a3) * a3;
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 5
2 5
3 5
4 30
5 30
6 30
7 30
8 30
9 31
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%ecx
mov $0x1,%eax
sub %edi,%eax
imul %eax,%edi
sub %edx,%edi
lea (%rcx,%rdi,1),%eax
imul %r8d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (a4 < a2)
        {
            v6 += a4 - a2 + a1;
        }
        else
        {
            v6 += a3 + (a4 * a5);
        }
    }
    v8 = (a1 - a1 * a1) - a3;
    v9 = a3 * a5;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 18
5 16
6 16
7 16
8 16
9 18
10 17
11 18
12 19
<<<sep_out_sample>>>
cmp %ecx,%esi
jge 10 <func1+0x10>
mov %esi,%eax
imul %r8d,%eax
imul %r8d,%eax
jmp 16 <func1+0x16>
lea (%rdi,%r8,2),%eax
sub %ecx,%eax
add %edi,%edx
add %esi,%edx
add %r8d,%edx
add %edx,%ecx
add %ecx,%eax
lea (%r8,%r8,1),%edx
imul %edx,%esi
add %esi,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a2 < a4)
    {
        v6 = a2 * a5 * a5;
    }
    else
    {
        v6 = (a5 + a5 + a1) - a4;
    }
    v7 = (a2 * (a5 + a5)) + a5;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 13
10 13
11 13
12 13
13 13
14 12
15 12
16 12
17 13
18 14
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %ecx,%eax
imul %esi,%ecx
sub %r8d,%ecx
add %ecx,%edi
lea 0x1(%rax,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = ((a1 - a2) - a5) - a1;
    if (a1 < a1)
    {
        v7 = (a5 - a1 + a4) + a2;
    }
    else
    {
        v7 = a4 * a2 - a5 + a1;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        if (v8 < a5)
        {
            v8 += a3 - a2 * a2;
        }
        else
        {
            v8 += a5 + (a4 - a4);
        }
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a3)
    {
        v10 += a4 - a5 + a1;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 30
2 30
3 11
4 11
5 11
6 30
7 31
<<<sep_out_sample>>>
lea (%rcx,%rdi,1),%r9d
cmp %ecx,%edx
jl 17 <func1+0x17>
mov %esi,%r9d
imul %ecx,%r9d
add $0x1,%r9d
imul %ecx,%r9d
lea (%rdi,%rdx,1),%eax
test %r8d,%r8d
jle 26 <func1+0x26>
mov %ecx,%eax
imul %edx,%eax
add %esi,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a3 < a4)
    {
        v6 = a4 + a1;
    }
    else
    {
        v6 = a4 + a2 * a4 * a4;
    }
    if (v7 < a5)
    {
        v7 = (a4 * a3) + a2;
    }
    else
    {
        v7 = a1 + a3;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        if (v6 < a3)
        {
            v8 += a3 - a5 - a3;
        }
        else
        {
            v8 += a3 - a5;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 4
3 4
4 10
5 10
6 10
7 10
8 18
9 12
10 12
11 14
12 14
13 14
14 32
15 32
16 32
17 32
18 32
19 32
20 33
<<<sep_out_sample>>>
mov $0x0,%r9d
mov %edx,%eax
imul %r8d,%eax
cmp %esi,%edi
cmovge %eax,%r9d
cmp %r8d,%esi
jge 22 <func1+0x22>
mov %edx,%eax
sub %edi,%eax
add %r8d,%eax
sub %ecx,%eax
jmp 2f <func1+0x2f>
lea (%rdi,%r8,1),%r10d
mov %ecx,%eax
imul %r8d,%eax
add %r10d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a1 < a2)
    {
        v6 = a2 - a2;
    }
    else
    {
        v6 = a3 * a5;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a4 * a3 * a5;
    }
    if (a2 < a5)
    {
        v9 = a3 - a1 + a5 - a4;
    }
    else
    {
        v9 = a1 + a5 + (a4 * a5);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 10
3 10
4 10
5 10
6 17
7 17
8 19
9 19
10 19
11 19
12 19
13 23
14 23
15 23
16 23
17 25
18 25
19 25
20 25
21 25
22 25
23 26
<<<sep_out_sample>>>
lea (%r8,%rsi,1),%eax
cmp %esi,%r8d
jg 10 <func1+0x10>
mov %ecx,%eax
imul %esi,%eax
sub %edx,%eax
lea 0x2(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a3 + a5 * a5;
    }
    if (a2 < a5)
    {
        v8 = a5 + a2;
    }
    else
    {
        v8 = a4 * a2 - a3;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        v9 += a2 * a2 * a4;
    }
    v11 = 0;
    for (v12 = 0; v12++; v12<a1)
    {
        if (v9 < a3)
        {
            v11 += a5 - a5;
        }
        else
        {
            v11 += a2 - (a1 - a4);
        }
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 9
3 9
4 15
5 15
6 15
7 34
8 34
9 34
10 34
11 34
12 35
<<<sep_out_sample>>>
cmp %edx,%ecx
jge 11 <func1+0x11>
mov %esi,%eax
imul %r8d,%eax
add %edi,%eax
imul %edi,%eax
jmp 1c <func1+0x1c>
mov %esi,%eax
imul %edx,%eax
imul %r8d,%eax
add %esi,%eax
add %edx,%edi
add %esi,%edi
add %r8d,%edi
add %edi,%ecx
add %eax,%ecx
mov %edx,%eax
sub %esi,%eax
add %eax,%edx
add %edx,%r8d
lea 0x1(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a4 < a3)
    {
        v6 = (a1 + a2 * a5) * a1;
    }
    else
    {
        v6 = (a2 * a3 * a5) + a2;
    }
    v7 = (a3 - a2 + a3) + a5;
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += (a4 + a1) + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 18
13 18
14 18
15 18
16 18
17 12
18 12
19 12
20 12
21 18
22 19
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
lea (%r8,%rcx,1),%eax
lea (%rsi,%rdi,1),%r8d
mov $0x1,%r9d
sub %r8d,%r9d
imul %esi,%r9d
add %r9d,%eax
sub %ecx,%esi
add %esi,%edx
imul %edx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a4 < a4)
    {
        v6 = a3 + a4 - a2 * a5;
    }
    else
    {
        v6 = a2 - ((a2 + a1) * a2);
    }
    v7 = a1 * (a2 - a4 + a3);
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 13
2 13
3 13
4 13
5 10
6 10
7 10
8 10
9 13
10 12
11 12
12 12
13 13
14 14
<<<sep_out_sample>>>
push %rbx
cmp %edx,%r8d
jge e <func1+0xe>
mov %ecx,%ebx
sub %edx,%ebx
sub %edx,%ebx
jmp 14 <func1+0x14>
mov %r8d,%ebx
imul %ecx,%ebx
mov $0x1,%r11d
sub %ecx,%r11d
imul %edi,%r11d
cmp %edi,%ecx
jge 35 <func1+0x35>
mov %ecx,%r10d
imul %ecx,%r10d
add %edx,%r10d
imul %esi,%r10d
jmp 3c <func1+0x3c>
mov %edx,%r10d
imul %ecx,%r10d
cmp %esi,%r8d
jge 4e <func1+0x4e>
lea (%r8,%rdi,1),%r9d
sub %ecx,%r9d
imul %edx,%r9d
jmp 59 <func1+0x59>
lea 0x1(%rdx),%r9d
imul %r8d,%r9d
sub %edx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %ebx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a5 < a3)
    {
        v6 = a4 - a3 - a3;
    }
    else
    {
        v6 = a5 * ((a3 + a4) - a3);
    }
    v7 = a1 - a4 * a1;
    if (a4 < a1)
    {
        v8 = (a3 + a4 * a4) * a2;
    }
    else
    {
        v8 = a3 * a4;
    }
    if (a5 < a2)
    {
        v9 = ((a5 + a1) - a4) * a3;
    }
    else
    {
        v9 = a5 + a3 * a5 - a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 4
3 4
4 6
5 6
6 6
7 6
8 10
9 10
10 12
11 12
12 12
13 13
14 13
15 15
16 15
17 15
18 15
19 15
20 19
21 19
22 21
23 21
24 23
25 23
26 23
27 23
28 27
29 27
30 27
31 29
32 29
33 29
34 29
35 29
36 29
37 29
38 29
39 30
40 30
<<<sep_out_sample>>>
mov %ecx,%r9d
sub %edi,%r9d
mov %r8d,%eax
sub %esi,%eax
cmp %edi,%esi
jge 14 <func1+0x14>
lea (%rsi,%rdx,1),%eax
add %edi,%eax
cmp %edx,%eax
jge 25 <func1+0x25>
lea -0x1(%rcx),%r10d
imul %edi,%r10d
add %esi,%r10d
jmp 30 <func1+0x30>
lea (%rsi,%rdx,1),%r10d
add %ecx,%r10d
imul %esi,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %r9d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (v7 < a5)
        {
            v6 += a5 - a2;
        }
        else
        {
            v6 += a1 * (a5 + a3);
        }
    }
    v8 = (a3 - a3) + (a4 - a1);
    if (a2 < a1)
    {
        v9 = a1 + (a2 + a3);
    }
    else
    {
        v9 = a5 - a2;
    }
    if (v9 < a3)
    {
        v10 = (a1 * a4 - a1) + a2;
    }
    else
    {
        v10 = (a2 + a3 + a4) * a2;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 23
4 23
5 17
6 17
7 19
8 19
9 25
10 25
11 27
12 27
13 27
14 27
15 31
16 31
17 31
18 33
19 33
20 33
21 33
22 33
23 33
24 33
25 34
<<<sep_out_sample>>>
mov %edi,%eax
sub %edx,%eax
cmp %edx,%edi
jl d <func1+0xd>
mov %edx,%eax
imul %esi,%eax
mov %ecx,%r9d
imul %edx,%r9d
add %r9d,%edi
add %edx,%edi
add %edi,%esi
add %r8d,%esi
add %ecx,%esi
add %eax,%esi
imul %r8d,%r8d
add %r8d,%ecx
add %ecx,%edx
lea 0x1(%rsi,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a1 < a3)
    {
        v6 = (a2 - a2 + a1) - a3;
    }
    else
    {
        v6 = a3 * a2;
    }
    v7 = a3 + (a4 + (a5 * a5));
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += a4 + a4;
    }
    v10 = a3 + ((a4 * a3) - a3);
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 6
3 4
4 4
5 10
6 10
7 18
8 18
9 19
10 19
11 19
12 19
13 19
14 19
15 12
16 12
17 12
18 19
19 20
<<<sep_out_sample>>>
add %edi,%edx
add %edx,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%edx
imul %ecx,%edi
sub %r8d,%edi
lea (%rdx,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (a4 < a2)
        {
            v6 += (a5 * a1) - a5;
        }
        else
        {
            v6 += a1 - a1 * a1;
        }
    }
    v8 = a1 * a4 - a5;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 16
6 16
7 17
8 18
<<<sep_out_sample>>>
mov %edi,%eax
imul %edi,%eax
mov %edx,%r9d
sub %eax,%r9d
sub %ecx,%r9d
mov $0x0,%eax
cmp %ecx,%edi
jl 29 <func1+0x29>
mov %r8d,%eax
imul %ecx,%eax
mov %edx,%r11d
sub %eax,%r11d
mov %r11d,%eax
imul %edx,%eax
test %r8d,%r8d
jle 3a <func1+0x3a>
mov %edi,%r10d
neg %r10d
imul %r8d,%r10d
jmp 42 <func1+0x42>
lea 0x1(%rdx),%r10d
imul %edi,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = (a3 - (a1 * a1)) - a4;
    if (a1 < a4)
    {
        v7 = a5 * (a5 - a5);
    }
    else
    {
        v7 = a3 * (a3 - a5 * a4);
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        if (v9 < a1)
        {
            v8 += (a1 * a5) - a5;
        }
        else
        {
            v8 += a2 + a2;
        }
    }
    if (v8 < a5)
    {
        v10 = (a3 - (a1 + a3)) * a5;
    }
    else
    {
        v10 = a3 * a1 + a1;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 4
6 7
7 5
8 5
9 11
10 11
11 11
12 11
13 11
14 11
15 25
16 25
17 27
18 27
19 27
20 27
21 31
22 31
23 33
24 33
25 33
26 33
27 33
28 33
29 33
30 34
<<<sep_out_sample>>>
mov %esi,%r10d
imul %ecx,%r10d
imul %edi,%r10d
imul %ecx,%r10d
mov %ecx,%r9d
sub %esi,%r9d
imul %esi,%r9d
lea (%rsi,%r8,1),%eax
mov %r8d,%r11d
imul %ecx,%r11d
cmp %edx,%esi
cmovl %r11d,%eax
add %edi,%eax
add %eax,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r10d,%ecx
lea 0x1(%r9,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = (a2 * a4 * a1) * a4;
    v7 = (a4 * a2) - a2 * a2;
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += a1 * a3 * a1;
    }
    if (a2 < a3)
    {
        v10 = a5 * a4;
    }
    else
    {
        v10 = a2 - (a2 - (a2 + a5));
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 5
6 5
7 5
8 17
9 13
10 13
11 13
12 13
13 19
14 19
15 19
16 19
17 19
18 19
19 19
20 20
<<<sep_out_sample>>>
cmp %esi,%r8d
jge 14 <func1+0x14>
lea (%rdi,%r8,1),%eax
mov %esi,%r9d
sub %eax,%r9d
sub %edx,%r9d
jmp 1d <func1+0x1d>
mov %edx,%r9d
sub %r8d,%r9d
sub %ecx,%r9d
cmp %edx,%edi
jge 28 <func1+0x28>
mov %esi,%eax
imul %edx,%eax
jmp 2d <func1+0x2d>
mov %edi,%eax
imul %edi,%eax
cmp %edx,%r8d
jle 38 <func1+0x38>
lea (%rsi,%rsi,1),%r10d
jmp 3f <func1+0x3f>
mov %edx,%r10d
imul %edi,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a5 < a2)
    {
        v6 = a2 - (a1 + a5) - a3;
    }
    else
    {
        v6 = (a3 - a5) - a4;
    }
    if (a1 < a3)
    {
        v7 = a2 * a3;
    }
    else
    {
        v7 = a1 * a1;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        if (v6 < a2)
        {
            v8 += a4 + a2;
        }
        else
        {
            v8 += a4 - a2 * a3;
        }
    }
    if (a3 < a5)
    {
        v10 = a2 + a2;
    }
    else
    {
        v10 = a3 * a1;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 12
12 12
13 14
14 14
15 14
16 18
17 18
18 32
19 32
20 34
21 34
22 38
23 38
24 40
25 40
26 40
27 40
28 40
29 40
30 40
31 41
<<<sep_out_sample>>>
mov %r8d,%r10d
imul %ecx,%r10d
add %esi,%r10d
add %edx,%r10d
cmp %edx,%esi
jle 21 <func1+0x21>
mov %ecx,%eax
imul %ecx,%eax
mov %esi,%r9d
sub %eax,%r9d
add %esi,%r9d
jmp 2f <func1+0x2f>
mov %edi,%r9d
imul %esi,%r9d
add %r8d,%r9d
imul %edi,%r9d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a1 * a5 - a4;
    }
    v8 = a5 * a4 + a2 + a3;
    if (a3 < a2)
    {
        v9 = a2 - ((a4 * a4) - a2);
    }
    else
    {
        v9 = ((a1 * a2) + a5) * a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 9
4 9
5 10
6 10
7 12
8 12
9 12
10 12
11 12
12 12
13 16
14 16
15 16
16 16
17 18
18 18
19 18
20 18
21 18
22 18
23 19
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
add %r8d,%ecx
mov $0x1,%eax
sub %edi,%eax
imul %eax,%edx
sub %esi,%edx
lea 0x1(%rcx,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a3 - a1 * a3 - a2;
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += a2 - a5 - a1;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        if (v8 < a4)
        {
            v9 += (a5 * a3) * a2;
        }
        else
        {
            v9 += (a2 - a3) * a5;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 22
4 22
5 4
6 4
7 4
8 4
9 22
10 23
<<<sep_out_sample>>>
test %edi,%edi
jle 17 <func1+0x17>
mov %edx,%eax
imul %edi,%eax
imul %edi,%eax
mov %esi,%r9d
sub %eax,%r9d
mov %r9d,%eax
jmp 1d <func1+0x1d>
lea (%rcx,%rsi,2),%eax
sub %r8d,%eax
add %edx,%edi
add %edi,%esi
add %r8d,%esi
add %ecx,%esi
add %eax,%esi
imul %ecx,%ecx
imul %ecx,%edx
sub %r8d,%edx
lea (%rsi,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (v6 < a1)
    {
        v6 = a2 - (a1 * (a3 * a1));
    }
    else
    {
        v6 = (a2 - (a5 - a2)) + a4;
    }
    v7 = (a4 * a4) * a3 - a5;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 6
9 6
10 10
11 10
12 13
13 13
14 13
15 13
16 13
17 12
18 12
19 12
20 13
21 14
<<<sep_out_sample>>>
cmp %esi,%edx
jle b <func1+0xb>
mov %edi,%eax
imul %ecx,%eax
jmp 12 <func1+0x12>
lea (%rcx,%rdx,1),%eax
add %edi,%eax
add %esi,%eax
add %edi,%edx
add %edx,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (a3 < a4)
        {
            v6 += a3 + a1;
        }
        else
        {
            v6 += a1 + a1;
        }
    }
    if (a2 < a3)
    {
        v8 = a1 * a4;
    }
    else
    {
        v8 = ((a4 + a3) + a1) + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 22
7 22
8 22
9 24
10 24
11 24
12 24
13 24
14 25
<<<sep_out_sample>>>
cmp %edx,%r8d
jle f <func1+0xf>
mov %esi,%eax
imul %edx,%eax
lea (%rax,%rdi,2),%eax
jmp 14 <func1+0x14>
mov %edi,%eax
imul %ecx,%eax
lea 0x1(%rdi,%rdx,1),%r9d
add %esi,%r9d
add %r8d,%r9d
lea 0x1(%rcx,%r9,1),%ecx
add %ecx,%eax
add %r8d,%edx
imul %edx,%edi
imul %edi,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += (a5 * a5) - a1;
    }
    if (a3 < a5)
    {
        v8 = a1 + a2 * a3 + a1;
    }
    else
    {
        v8 = a1 * a4;
    }
    v9 = ((a3 + a5) * a1) * a2;
    v10 = 0;
    for (v11 = 0; v11++; v11<a1)
    {
        if (v10 < a4)
        {
            v10 += a5 + a3 + a2;
        }
        else
        {
            v10 += a5 + a1;
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 15
8 15
9 30
10 30
11 30
12 30
13 30
14 17
15 17
16 17
17 30
18 31
<<<sep_out_sample>>>
lea (%rdx,%rdi,2),%eax
add %eax,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (a5 < a4)
        {
            v6 += (a5 + a4) - a3;
        }
        else
        {
            v6 += a2 + a1 + a2;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        if (a5 < a2)
        {
            v8 += (a2 + a1) - a5;
        }
        else
        {
            v8 += (a2 - a1) * a4;
        }
    }
    v10 = (a3 - a4 + a1) + a4;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 29
2 29
3 29
4 29
5 29
6 30
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a3 - a1 * a5;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        if (a2 < a4)
        {
            v8 += (a3 + a4) - a2;
        }
        else
        {
            v8 += a1 * a1 - a3;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 21
5 22
<<<sep_out_sample>>>
mov %ecx,%eax
sub %edx,%eax
mov %r8d,%r9d
sub %ecx,%r9d
cmp %ecx,%edx
cmovge %r9d,%eax
lea (%rcx,%rdi,2),%edi
add %edx,%edi
add %esi,%edi
add %r8d,%edi
add %edi,%ecx
lea 0x1(%rax,%rcx,1),%eax
add %r8d,%edx
imul %edx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a3 < a4)
    {
        v6 = a4 - a3;
    }
    else
    {
        v6 = a5 - a4;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += a4 * a5 - a1;
    }
    v9 = a2 * (a3 + a5);
    v10 = (a1 + a4 - a5) + a5;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 6
6 6
7 19
8 19
9 19
10 19
11 19
12 19
13 17
14 17
15 19
16 20
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %edx,%esi
add %esi,%edi
imul %edi,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a4 * (a5 * a2);
    }
    v8 = ((a2 + a3) + a1) * a3;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 9
6 9
7 9
8 10
9 11
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
add %r8d,%ecx
sub %esi,%edi
add %edi,%edx
lea 0x1(%rcx,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a3 + (a1 - a2);
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += a3 - a1 - a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 4
6 4
7 10
8 11
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %edx,%r8d
add %r8d,%ecx
sub %esi,%edi
lea 0x1(%rcx,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a1 < a1)
    {
        v6 = a1 * (a4 * a3);
    }
    else
    {
        v6 = a1 - a2;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        if (a3 < a1)
        {
            v7 += a5 - a4;
        }
        else
        {
            v7 += a2 - (a1 - a5);
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 24
2 24
3 24
4 24
5 10
6 24
7 25
<<<sep_out_sample>>>
lea (%rsi,%rsi,1),%eax
mov %ecx,%r9d
sub %edx,%r9d
cmp %esi,%edi
cmovl %eax,%r9d
test %edx,%edx
jle 1e <func1+0x1e>
lea 0x1(%r8),%eax
imul %edi,%eax
sub %esi,%eax
jmp 2e <func1+0x2e>
mov %edi,%r10d
sub %edx,%r10d
mov %edi,%eax
imul %r8d,%eax
imul %r10d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a1 < a2)
    {
        v6 = a2 + a2;
    }
    else
    {
        v6 = a4 - a3;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += a2 * a2 - a3;
    }
    if (v9 < a3)
    {
        v9 = (a1 + (a1 * a5)) - a2;
    }
    else
    {
        v9 = (a1 - a3) * (a1 * a5);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 6
6 17
7 17
8 19
9 19
10 19
11 19
12 23
13 23
14 23
15 23
16 23
17 25
18 25
19 25
20 25
21 25
22 25
23 26
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%eax
imul %r8d,%edi
add %edi,%edx
imul %edx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a1 + a4;
    }
    v8 = (a1 * a5 + a3) * a5;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 9
6 9
7 9
8 10
9 11
<<<sep_out_sample>>>
cmp $0x1,%edi
jle e <func1+0xe>
mov %r8d,%eax
sub %edi,%eax
add %esi,%eax
jmp 13 <func1+0x13>
lea (%rdx,%rdi,1),%eax
sub %esi,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a1 + a5;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += a1 - (a5 * a2);
    }
    if (v9 < a1)
    {
        v10 = (a5 - a1) + a2;
    }
    else
    {
        v10 = (a3 + a1) - a2;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 14
2 14
3 16
4 16
5 16
6 16
7 20
8 20
9 22
10 22
11 22
12 22
13 22
14 23
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %r8d,%edx
lea (%rsi,%rcx,2),%eax
lea 0x1(%rdx,%rax,1),%eax
add %r8d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a4 + a2;
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        if (a1 < a3)
        {
            v7 += a5 - a3 - a4;
        }
        else
        {
            v7 += a3 + a1 + a2;
        }
    }
    v9 = a4 + a5;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 4
5 18
6 17
7 18
8 19
<<<sep_out_sample>>>
cmp %esi,%edi
jge 13 <func1+0x13>
mov %edi,%r9d
imul %edi,%r9d
sub %esi,%r9d
add %r8d,%r9d
jmp 1c <func1+0x1c>
mov %edx,%r9d
sub %edi,%r9d
add %edx,%r9d
mov $0x0,%eax
cmp %ecx,%esi
jl 2e <func1+0x2e>
lea -0x1(%rcx),%eax
imul %r8d,%eax
sub %edi,%eax
lea (%rdi,%r8,2),%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %r9d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a5 * a3;
    }
    if (a1 < a2)
    {
        v8 = (a1 * a1) - a2 + a5;
    }
    else
    {
        v8 = a3 + (a3 - a1);
    }
    if (a2 < a4)
    {
        v9 = a1 - a1;
    }
    else
    {
        v9 = a4 * a5 - a5 - a1;
    }
    v10 = a5 + a5 - a3 + a3;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 11
8 15
9 15
10 15
11 19
12 17
13 17
14 23
15 23
16 23
17 26
18 26
19 26
20 26
21 26
22 26
23 26
24 27
<<<sep_out_sample>>>
lea (%rcx,%rdx,1),%eax
cmp $0x1,%esi
jg f <func1+0xf>
mov %edx,%eax
imul %edx,%eax
neg %eax
add %edi,%edx
add %edx,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a3 + a3;
    }
    if (v7 < a2)
    {
        v8 = (a4 + a3 + a3) - a3;
    }
    else
    {
        v8 = a2 - ((a3 * a3) + a2);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 11
2 9
3 9
4 15
5 15
6 15
7 17
8 17
9 17
10 17
11 17
12 18
<<<sep_out_sample>>>
mov %esi,%eax
imul %edx,%eax
imul %r8d,%eax
imul %ecx,%eax
lea 0x1(%rdi,%rax,1),%eax
add %eax,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (a2 < a1)
        {
            v6 += (a3 * a2) + a3;
        }
        else
        {
            v6 += a4 - a5;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        if (v7 < a5)
        {
            v8 += a5 * a2 * a3;
        }
        else
        {
            v8 += (a3 - a5) * a3;
        }
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a1)
    {
        v10 += (a4 - a3) * a5;
    }
    v12 = a4 * (a2 * a3 * a5);
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 33
2 33
3 33
4 33
5 34
6 34
7 34
8 34
9 34
10 35
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
add %ecx,%esi
imul %edi,%edi
imul %edi,%ecx
add %ecx,%r8d
lea 0x1(%rsi,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a1 * a1 * a4 + a5;
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += (a2 + a3) + a2;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a1)
    {
        if (a4 < a5)
        {
            v9 += a1 - a1;
        }
        else
        {
            v9 += a2 * a5 - a5;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 22
4 22
5 4
6 4
7 4
8 22
9 23
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
lea (%rcx,%rdi,1),%r9d
add %r9d,%r8d
add %esi,%r8d
add %eax,%r8d
mov %edx,%eax
imul %edx,%eax
imul %ecx,%eax
sub %esi,%eax
add %r8d,%eax
imul %edi,%edx
add %ecx,%ecx
imul %ecx,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = ((a4 + a1) + a5) + a2;
    v7 = (a3 * a3 * a4) - a2;
    v8 = a3 * a1 * (a4 + a4);
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 7
2 7
3 7
4 7
5 4
6 4
7 4
8 7
9 5
10 5
11 5
12 5
13 7
14 6
15 6
16 6
17 7
18 8
<<<sep_out_sample>>>
cmp %edi,%esi
jge c <func1+0xc>
mov %esi,%r9d
sub %r8d,%r9d
jmp 17 <func1+0x17>
lea 0x1(%rcx),%r9d
imul %r8d,%r9d
add %edi,%r9d
lea (%rdi,%rsi,1),%eax
add %edx,%eax
imul %esi,%eax
mov %ecx,%r10d
sub %esi,%r10d
lea (%r8,%r8,1),%r11d
sub %esi,%r10d
cmp %eax,%edi
cmovg %r11d,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a2 < a1)
    {
        v6 = a1 + a2 - a5 - a1;
    }
    else
    {
        v6 = a4 * a5 + a5 + a1;
    }
    v7 = ((a1 + a2) + a3) * a2;
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += a1 + a5;
    }
    if (v7 < a1)
    {
        v10 = a5 + a5;
    }
    else
    {
        v10 = a4 - a2 - a2;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 12
10 12
11 12
12 24
13 24
14 20
15 20
16 20
17 20
18 26
19 26
20 26
21 26
22 26
23 26
24 26
25 27
<<<sep_out_sample>>>
cmp %r8d,%edi
jge 17 <func1+0x17>
mov %r8d,%eax
imul %ecx,%eax
mov %edx,%r11d
sub %eax,%r11d
imul %r8d,%r11d
jmp 24 <func1+0x24>
mov %r8d,%r11d
sub %edi,%r11d
sub %edx,%r11d
imul %r8d,%r11d
mov %edx,%r10d
imul %r8d,%r10d
imul %esi,%r10d
cmp %r8d,%edi
jle 43 <func1+0x43>
mov %ecx,%r9d
imul %r8d,%r9d
add %edx,%r9d
sub %r8d,%r9d
jmp 51 <func1+0x51>
mov %edx,%r9d
imul %esi,%r9d
imul %edx,%r9d
sub %r8d,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a1 < a5)
    {
        v6 = (a3 - a5 * a4) * a5;
    }
    else
    {
        v6 = (a5 - a1 - a3) * a5;
    }
    v7 = (a3 * a5) * a2;
    if (a5 < a1)
    {
        v8 = (a4 * a5) + a3 - a5;
    }
    else
    {
        v8 = a3 * a2 * a3 - a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 6
9 10
10 10
11 10
12 10
13 12
14 12
15 12
16 13
17 13
18 15
19 15
20 15
21 15
22 15
23 19
24 19
25 19
26 19
27 21
28 21
29 21
30 21
31 21
32 21
33 21
34 22
<<<sep_out_sample>>>
mov %ecx,%r9d
imul %esi,%r9d
sub %edx,%r9d
sub %edi,%r9d
lea (%rcx,%rcx,1),%eax
test %ecx,%ecx
jle 1e <func1+0x1e>
mov %esi,%eax
sub %edi,%eax
imul %r8d,%eax
add %esi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a4 * a2 - a3 - a1;
    if (v7 < a4)
    {
        v7 = a2 - (a5 * (a1 - a2));
    }
    else
    {
        v7 = a2 + (a4 + a4) - a2;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 11
6 5
7 5
8 7
9 7
10 7
11 7
12 13
13 13
14 13
15 13
16 13
17 13
18 14
<<<sep_out_sample>>>
lea (%rcx,%rdx,1),%eax
cmp %edi,%r8d
jl 10 <func1+0x10>
mov %r8d,%eax
neg %eax
imul %edx,%eax
add %edx,%edi
add %esi,%edi
add %r8d,%edi
add %edi,%ecx
lea 0x1(%rax,%rcx,1),%ecx
sub %esi,%r8d
sub %edx,%r8d
lea (%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a5 < a1)
    {
        v6 = a4 + a3;
    }
    else
    {
        v6 = a3 - (a3 * a5) - a3;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += a5 - (a2 * a2);
    }
    v9 = a5 - a2 - a3;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 4
3 4
4 10
5 10
6 10
7 18
8 18
9 18
10 18
11 18
12 17
13 17
14 18
15 19
<<<sep_out_sample>>>
push %rbp
push %rbx
mov %edx,%eax
sub %edi,%eax
mov %ecx,%ebp
sub %esi,%ebp
cmp %ecx,%esi
cmovl %eax,%ebp
lea (%rcx,%rdi,1),%r10d
mov %r10d,%ebx
sub %r8d,%ebx
sub %r8d,%ebx
test %r8d,%r8d
jle 31 <func1+0x31>
mov %ecx,%eax
imul %edi,%eax
mov %esi,%r11d
sub %eax,%r11d
sub %edx,%r11d
jmp 3b <func1+0x3b>
lea (%rcx,%r8,2),%eax
mov %r8d,%r11d
sub %eax,%r11d
mov %ecx,%r9d
sub %esi,%r9d
cmp %r8d,%esi
jge 4f <func1+0x4f>
sub %esi,%r10d
mov %r10d,%r9d
sub %edi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %ebp,%eax
add %ebx,%eax
add %r11d,%eax
add %r9d,%eax
pop %rbx
pop %rbp
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a2 < a4)
    {
        v6 = a3 - a1;
    }
    else
    {
        v6 = (a3 + a4) - a2 - a3;
    }
    v7 = a4 + a1 - a5 - a5;
    if (v8 < a5)
    {
        v8 = a2 - a4 * a1 - a3;
    }
    else
    {
        v8 = a5 - (a5 + a5 + a4);
    }
    if (a2 < a5)
    {
        v9 = (a1 + a4) - a2 - a1;
    }
    else
    {
        v9 = a4 - a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 2
3 6
4 6
5 6
6 6
7 6
8 6
9 12
10 12
11 12
12 12
13 13
14 13
15 15
16 15
17 15
18 15
19 15
20 15
21 19
22 19
23 19
24 27
25 27
26 21
27 21
28 23
29 23
30 23
31 29
32 29
33 29
34 29
35 29
36 29
37 29
38 29
39 30
40 30
41 30
<<<sep_out_sample>>>
cmp %edx,%edi
jge e <func1+0xe>
mov %edx,%eax
imul %edx,%eax
add %r8d,%eax
jmp 18 <func1+0x18>
mov %edx,%eax
imul %edx,%eax
add %edi,%eax
imul %ecx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a1 < a3)
    {
        v6 = a5 + a3 * a3;
    }
    else
    {
        v6 = (a3 * a3 + a1) * a4;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a2 - a2 * a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 10
11 17
12 17
13 17
14 17
15 17
16 18
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += (a2 - a2) + a4;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += a5 + (a2 + a1);
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a1)
    {
        if (v7 < a2)
        {
            v10 += a3 + a5 * a3;
        }
        else
        {
            v10 += a1 - a5 - a1;
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 26
2 26
3 26
4 26
5 27
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
lea (%r8,%rcx,1),%eax
imul %ecx,%ecx
add %ecx,%edi
add %eax,%edi
add %edx,%esi
lea 0x1(%rdi,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a1 + a4 * a4;
    v7 = a2 + a3;
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        if (v6 < a1)
        {
            v8 += a4 + (a1 * a2);
        }
        else
        {
            v8 += a3 * a2;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 18
5 4
6 4
7 18
8 5
9 18
10 19
<<<sep_out_sample>>>
test %edi,%edi
jle f <func1+0xf>
mov %esi,%eax
sub %r8d,%eax
add %edx,%eax
sub %ecx,%eax
jmp 16 <func1+0x16>
mov %esi,%eax
sub %edi,%eax
lea (%rax,%rsi,2),%eax
lea (%rcx,%rcx,1),%r9d
cmp $0x1,%esi
jle 28 <func1+0x28>
mov %ecx,%r10d
imul %edx,%r10d
jmp 34 <func1+0x34>
mov %r8d,%r10d
sub %esi,%r10d
sub %edx,%r10d
add %ecx,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a1 + (a4 + a3);
    }
    if (v8 < a1)
    {
        v8 = a2 - a5 + a3 - a4;
    }
    else
    {
        v8 = (a2 - a1 + a2) + a2;
    }
    v9 = a4 + a4;
    if (v7 < a2)
    {
        v10 = ((a3 + a4) - a3) * a3;
    }
    else
    {
        v10 = a5 - a2 - a3 + a4;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 11
8 15
9 15
10 15
11 17
12 18
13 18
14 20
15 20
16 20
17 24
18 24
19 24
20 24
21 26
22 26
23 26
24 26
25 26
26 26
27 26
28 27
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %edx,%r8d
lea (%r8,%rcx,1),%edx
lea (%rcx,%rsi,1),%eax
sub %edi,%eax
imul %eax,%esi
lea (%rdx,%rsi,1),%eax
add %ecx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = (a4 + a2 - a1) * a2;
    v7 = a1 + a4;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 4
7 4
8 6
9 5
10 6
11 7
<<<sep_out_sample>>>
mov %r8d,%eax
sub %edi,%eax
sub %esi,%eax
add %edx,%eax
mov %ecx,%r9d
sub %edx,%r9d
cmp %eax,%edi
jle 21 <func1+0x21>
mov %ecx,%r9d
imul %edx,%r9d
imul %ecx,%r9d
add %r8d,%r9d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%eax
lea 0x1(%r9,%rax,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a3 - ((a1 - a5) + a2);
    if (v6 < a1)
    {
        v7 = a5 + (a4 * a3 * a4);
    }
    else
    {
        v7 = a2 - a2 + a4 - a3;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        if (v7 < a2)
        {
            v8 += a3 * a2;
        }
        else
        {
            v8 += a1 * a4;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 11
6 11
7 5
8 5
9 7
10 7
11 7
12 7
13 25
14 25
15 25
16 25
17 25
18 25
19 26
<<<sep_out_sample>>>
test %esi,%esi
jle 14 <func1+0x14>
mov %esi,%r9d
imul %r8d,%r9d
imul %r8d,%r9d
add %ecx,%r9d
jmp 1b <func1+0x1b>
mov %r8d,%r9d
imul %r8d,%r9d
lea (%rcx,%rdx,1),%eax
cmp %edx,%r8d
jl 29 <func1+0x29>
mov %edi,%eax
imul %r8d,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    if (v6 < a2)
    {
        v6 = a4 + a2 * a5 * a5;
    }
    else
    {
        v6 = a4 - a4 + a5 * a5;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += a2 * a2 - a4;
    }
    if (a5 < a3)
    {
        v9 = a4 + a3;
    }
    else
    {
        v9 = a1 * a5;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a3)
    {
        v10 += a2 * a4;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 19
11 17
12 17
13 23
14 23
15 30
16 30
17 30
18 30
19 30
20 30
21 31
<<<sep_out_sample>>>
cmp %esi,%r8d
jge 16 <func1+0x16>
mov %esi,%r9d
imul %edx,%r9d
imul %r8d,%r9d
imul %edi,%r9d
jmp 24 <func1+0x24>
mov %r8d,%r9d
imul %esi,%r9d
add %edi,%r9d
imul %r8d,%r9d
cmp %edi,%esi
jle 32 <func1+0x32>
mov %esi,%eax
imul %esi,%eax
imul %edi,%eax
jmp 3b <func1+0x3b>
lea 0x1(%rsi),%eax
imul %edx,%eax
add %r8d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a5 < a2)
    {
        v6 = a1 * (a2 * a3 * a5);
    }
    else
    {
        v6 = (a5 * a2 + a1) * a5;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        if (a1 < a1)
        {
            v7 += a1 + a2 * a2;
        }
        else
        {
            v7 += a3 * a4;
        }
    }
    if (a1 < a2)
    {
        v9 = a2 * a2 * a1;
    }
    else
    {
        v9 = a3 + (a2 * a3) + a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 24
13 24
14 26
15 26
16 26
17 26
18 30
19 30
20 30
21 32
22 32
23 32
24 32
25 32
26 32
27 33
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea (%r8,%rcx,1),%esi
sub %edx,%ecx
lea 0x1(%rsi,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = (a1 - a1) - (a3 - a4);
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += a4 - (a4 - a3);
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        v9 += (a1 * a2) - a5;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 15
2 15
3 15
4 15
5 4
6 15
7 16
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = (a3 - a3 - a1) + a1;
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += a4 - a1;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        if (a1 < a1)
        {
            v9 += a1 - (a3 * a2);
        }
        else
        {
            v9 += (a4 - a4) + a4;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 22
4 22
5 23
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
lea (%rdi,%rsi,1),%r9d
add %r9d,%eax
imul %r8d,%ecx
imul %esi,%ecx
add %ecx,%eax
imul %edi,%esi
imul %edx,%esi
imul %esi,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a1 + a2;
    v7 = a2 * (a5 * a4);
    v8 = (a2 * a1) * a3 * a3;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 7
2 7
3 7
4 7
5 4
6 7
7 5
8 5
9 7
10 6
11 6
12 6
13 7
14 8
<<<sep_out_sample>>>
mov %ecx,%r10d
neg %r10d
sub %edi,%r10d
lea (%rdx,%rcx,1),%r9d
sub %r8d,%r9d
mov %edx,%eax
sub %edi,%eax
test %edx,%edx
jle 20 <func1+0x20>
mov %ecx,%eax
imul %r8d,%eax
sub %esi,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r10d,%ecx
lea 0x1(%r9,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = (a2 - a2) - a4 - a1;
    v7 = a3 + a4 - a5;
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        if (v8 < a1)
        {
            v8 += a5 * a5;
        }
        else
        {
            v8 += a2 * (a4 * a3);
        }
    }
    if (v10 < a3)
    {
        v10 = a4 * a5 - a2;
    }
    else
    {
        v10 = a3 - a1;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 5
5 5
6 24
7 24
8 18
9 18
10 20
11 20
12 20
13 26
14 26
15 26
16 26
17 26
18 26
19 26
20 27
<<<sep_out_sample>>>
test %edi,%edi
jle f <func1+0xf>
lea 0x1(%rdx),%eax
imul %r8d,%eax
add %ecx,%eax
jmp 1c <func1+0x1c>
lea (%rsi,%rdi,1),%eax
mov %r8d,%r9d
imul %r8d,%r9d
sub %r9d,%eax
add %edi,%edx
add %esi,%edx
add %edx,%r8d
add %ecx,%r8d
add %r8d,%eax
sub $0x1,%ecx
imul %ecx,%edi
add %edi,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (v6 < a1)
    {
        v6 = a5 * a3 + a5 + a4;
    }
    else
    {
        v6 = a2 + a1 - a5 * a5;
    }
    v7 = a1 * a4 - a1 + a2;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 10
11 13
12 13
13 13
14 13
15 13
16 12
17 12
18 12
19 13
20 14
<<<sep_out_sample>>>
test %ecx,%ecx
jle d <func1+0xd>
lea (%rdi,%rcx,1),%r10d
add %r8d,%r10d
jmp 14 <func1+0x14>
mov %edi,%r10d
imul %ecx,%r10d
cmp %r8d,%edi
jle 29 <func1+0x29>
mov %edi,%eax
imul %esi,%eax
mov %edx,%r9d
sub %eax,%r9d
sub %esi,%r9d
jmp 38 <func1+0x38>
mov %ecx,%r9d
imul %edi,%r9d
sub $0x1,%r9d
imul %ecx,%r9d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += (a3 * a1) - a5;
    }
    if (v8 < a4)
    {
        v8 = a1 + a4 + a5;
    }
    else
    {
        v8 = a1 * a4;
    }
    if (a5 < a1)
    {
        v9 = a3 - a1 * a2 - a2;
    }
    else
    {
        v9 = ((a4 * a1) * a4) - a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 15
7 15
8 17
9 17
10 19
11 19
12 19
13 19
14 19
15 19
16 23
17 23
18 23
19 23
20 25
21 25
22 25
23 25
24 25
25 25
26 26
<<<sep_out_sample>>>
lea (%rcx,%rsi,1),%r10d
cmp %edi,%r8d
jge 18 <func1+0x18>
mov %ecx,%r9d
imul %ecx,%r9d
add %edi,%r9d
sub %ecx,%r9d
jmp 23 <func1+0x23>
mov %esi,%eax
imul %ecx,%eax
mov %edi,%r9d
sub %eax,%r9d
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
sub %esi,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a4 + a2;
    if (a5 < a1)
    {
        v7 = a1 + a4 * a4 - a4;
    }
    else
    {
        v7 = a1 - a2 * a4;
    }
    v8 = a1 - a2;
    v9 = 0;
    for (v10 = 0; v10++; v10<a1)
    {
        if (v7 < a4)
        {
            v9 += a3 - a4 * a5;
        }
        else
        {
            v9 += a4 * (a2 * a4);
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 5
3 5
4 7
5 7
6 7
7 7
8 7
9 11
10 11
11 11
12 11
13 26
14 26
15 26
16 26
17 26
18 26
19 13
20 26
21 27
<<<sep_out_sample>>>
mov %esi,%r9d
cmp %edi,%edx
jl 16 <func1+0x16>
mov %r8d,%eax
imul %esi,%eax
mov %edi,%r9d
sub %eax,%r9d
add %ecx,%r9d
mov %r8d,%eax
imul %ecx,%eax
mov %edx,%r11d
sub %eax,%r11d
mov %r11d,%eax
add %edx,%eax
lea (%rdi,%rsi,1),%r10d
cmp %r8d,%r9d
jl 40 <func1+0x40>
lea (%r8,%rdx,1),%r10d
mov %edi,%r11d
sub %r10d,%r11d
mov %r11d,%r10d
add %esi,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a3 < a1)
    {
        v6 = a2 + a2 - a2;
    }
    else
    {
        v6 = a1 - a5 * a2 + a4;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        if (v6 < a2)
        {
            v7 += a2 + a5 - a1;
        }
        else
        {
            v7 += a4 * a4 - a5;
        }
    }
    v9 = a3 - (a5 * a4 - a3);
    if (v6 < a5)
    {
        v10 = a2 + (a1 - a5) + a5;
    }
    else
    {
        v10 = a2 + (a1 - (a5 + a3));
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 4
3 4
4 10
5 10
6 10
7 10
8 10
9 24
10 24
11 24
12 24
13 24
14 24
15 27
16 25
17 25
18 31
19 31
20 31
21 31
22 31
23 33
24 33
25 33
26 33
27 33
28 33
29 33
30 34
<<<sep_out_sample>>>
mov %edi,%r11d
sub %r8d,%r11d
lea (%rsi,%rdi,1),%r10d
cmp %r8d,%edi
jl 17 <func1+0x17>
lea (%rdx,%rdx,1),%r10d
imul %r8d,%r10d
mov %r8d,%r9d
sub %edi,%r9d
cmp %r8d,%edx
jge 31 <func1+0x31>
mov %esi,%r9d
imul %esi,%r9d
mov %ecx,%eax
imul %edi,%eax
sub %eax,%r9d
add %r9d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %r11d,%eax
add %r10d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (a1 < a3)
        {
            v6 += a3 + (a1 * a3);
        }
        else
        {
            v6 += a3 + a2 + a1;
        }
    }
    v8 = a1 - a5;
    if (a1 < a5)
    {
        v9 = a2 + a1;
    }
    else
    {
        v9 = (a5 * a3) + a3 * a5;
    }
    if (a3 < a5)
    {
        v10 = a2 * a2 - a4 * a1;
    }
    else
    {
        v10 = a5 - (a2 - a2) - a1;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 19
4 17
5 17
6 23
7 23
8 31
9 31
10 25
11 25
12 27
13 27
14 27
15 27
16 27
17 33
18 33
19 33
20 33
21 33
22 33
23 33
24 34
<<<sep_out_sample>>>
lea (%rcx,%rsi,1),%r9d
test %r8d,%r8d
jle 11 <func1+0x11>
lea 0x2(%r8),%r9d
imul %edx,%r9d
cmp %esi,%ecx
jle 1d <func1+0x1d>
mov %esi,%eax
neg %eax
sub %edi,%eax
jmp 28 <func1+0x28>
mov %r8d,%eax
imul %ecx,%eax
imul %esi,%eax
add %edx,%eax
test %edi,%edi
jle 35 <func1+0x35>
mov %edx,%r10d
imul %esi,%r10d
jmp 45 <func1+0x45>
mov %r8d,%r10d
sub %edx,%r10d
mov %edx,%r11d
imul %esi,%r11d
sub %r11d,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%r9d
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (v7 < a1)
        {
            v6 += (a5 - a4) - a4;
        }
        else
        {
            v6 += a5 * a4;
        }
    }
    if (v6 < a5)
    {
        v8 = (a5 * a3 + a3) + a3;
    }
    else
    {
        v8 = a2 - (a1 - a4 - a1);
    }
    if (a2 < a4)
    {
        v9 = a3 - (a2 + a3) - a1;
    }
    else
    {
        v9 = a3 + a5 * a4 * a2;
    }
    if (v10 < a1)
    {
        v10 = a3 * a2;
    }
    else
    {
        v10 = a5 - a3 - a3 * a2;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 16
3 16
4 18
5 18
6 24
7 24
8 26
9 26
10 26
11 26
12 30
13 30
14 30
15 30
16 32
17 32
18 34
19 34
20 34
21 38
22 38
23 38
24 38
25 38
26 40
27 40
28 40
29 40
30 40
31 40
32 40
33 41
<<<sep_out_sample>>>
lea (%rsi,%r8,1),%eax
neg %eax
cmp %r8d,%esi
jge 15 <func1+0x15>
mov %edx,%eax
imul %edi,%eax
add %r8d,%eax
sub %edi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a2 < a5)
    {
        v6 = (a3 * a1 + a5) - a1;
    }
    else
    {
        v6 = a4 - ((a2 + a5) + a4);
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        if (a1 < a2)
        {
            v7 += a3 - a1 + a5;
        }
        else
        {
            v7 += a2 * (a3 * a4);
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 4
4 4
5 6
6 6
7 6
8 6
9 24
10 24
11 24
12 24
13 24
14 25
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea (%r8,%rcx,1),%esi
lea (%rdx,%rcx,2),%eax
lea (%rsi,%rdx,2),%edx
lea (%rdx,%rax,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a3 + (a4 + a4 + a3);
    v7 = a3 - a4 + a4;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 6
7 6
8 7
<<<sep_out_sample>>>
mov %r8d,%r9d
imul %r8d,%r9d
add %ecx,%r9d
add %r8d,%r9d
lea (%rdx,%rsi,1),%eax
cmp %esi,%edx
jge 1f <func1+0x1f>
mov %edi,%eax
imul %r8d,%eax
sub %ecx,%eax
add %r8d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a4 + (a5 * a5) + a5;
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += a3 + a4 * a5;
    }
    if (a3 < a2)
    {
        v9 = a1 * a5 - a4 + a5;
    }
    else
    {
        v9 = a3 + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 16
6 10
7 10
8 12
9 12
10 12
11 12
12 18
13 18
14 18
15 18
16 18
17 18
18 19
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
add %ecx,%esi
sub %edx,%ecx
sub %edi,%ecx
add %esi,%ecx
imul %edx,%edi
sub %r8d,%edi
imul %edi,%r8d
lea 0x1(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = (a4 - a3) - a1;
    v7 = ((a3 * a1) - a5) * a5;
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        if (v8 < a2)
        {
            v8 += (a5 - a1) - a2;
        }
        else
        {
            v8 += a1 + a5;
        }
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a1)
    {
        v10 += a1 * a1 * a3;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 23
2 23
3 23
4 23
5 4
6 4
7 23
8 5
9 5
10 5
11 23
12 24
<<<sep_out_sample>>>
mov %ecx,%eax
sub %edx,%eax
cmp %edx,%r8d
jl 13 <func1+0x13>
mov %esi,%eax
imul %ecx,%eax
imul %edx,%eax
sub %esi,%eax
lea 0x2(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    if (a5 < a3)
    {
        v6 = a4 - a3;
    }
    else
    {
        v6 = (a3 * (a2 * a4)) - a2;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += a1 * a5 - a5;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        if (v7 < a3)
        {
            v9 += a2 - (a3 - a1);
        }
        else
        {
            v9 += a4 + a4;
        }
    }
    v11 = 0;
    for (v12 = 0; v12++; v12<a2)
    {
        v11 += a5 - a2 + a4;
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 6
3 4
4 4
5 10
6 10
7 10
8 10
9 34
10 34
11 34
12 34
13 34
14 35
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a2 * a2 * a1;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += a3 * a1;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a3)
    {
        v10 += (a4 + a4) * a4;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 19
2 19
3 19
4 19
5 20
<<<sep_out_sample>>>
test %edx,%edx
jle d <func1+0xd>
mov %ecx,%r10d
imul %r8d,%r10d
jmp 14 <func1+0x14>
lea (%rsi,%rdx,2),%r10d
sub %ecx,%r10d
cmp %r8d,%edi
jge 22 <func1+0x22>
mov %edi,%r9d
imul %r8d,%r9d
jmp 2d <func1+0x2d>
lea 0x1(%rdx),%r9d
imul %r8d,%r9d
sub %edi,%r9d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a1 - a1 + a1;
    }
    if (v6 < a3)
    {
        v8 = a4 * a5;
    }
    else
    {
        v8 = a3 - (a4 - a3 - a2);
    }
    if (a1 < a5)
    {
        v9 = a1 * a5;
    }
    else
    {
        v9 = (a3 * a5 + a5) - a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 15
7 15
8 17
9 17
10 19
11 19
12 19
13 23
14 23
15 23
16 25
17 25
18 25
19 25
20 25
21 25
22 26
<<<sep_out_sample>>>
mov %edx,%r10d
sub %edi,%r10d
cmp %edi,%edx
jge 18 <func1+0x18>
lea (%rsi,%rdx,1),%eax
mov %ecx,%r9d
sub %eax,%r9d
add %r8d,%r9d
jmp 22 <func1+0x22>
mov %esi,%r9d
sub %r8d,%r9d
imul %r8d,%r9d
mov %esi,%eax
imul %r8d,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a5 - a5;
    }
    v8 = a3 - a1;
    if (a3 < a1)
    {
        v9 = a5 - ((a2 + a3) - a4);
    }
    else
    {
        v9 = (a2 * a5) - a5 * a5;
    }
    v10 = ((a1 + a5) - a1) * a2;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 10
4 10
5 12
6 12
7 12
8 12
9 12
10 16
11 16
12 16
13 18
14 18
15 19
16 19
17 19
18 19
19 19
20 19
21 19
22 20
<<<sep_out_sample>>>
test %esi,%esi
jle d <func1+0xd>
lea (%rdx,%rdi,2),%r9d
sub %r8d,%r9d
jmp 1a <func1+0x1a>
mov %edx,%r9d
imul %edx,%r9d
sub %r8d,%r9d
add %edx,%r9d
test %ecx,%ecx
jle 28 <func1+0x28>
mov %ecx,%eax
imul %ecx,%eax
sub %r8d,%eax
jmp 32 <func1+0x32>
mov %edi,%eax
imul %edi,%eax
imul %edi,%eax
add %esi,%eax
mov %r8d,%r10d
sub %esi,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %r9d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a5 * a2;
    }
    if (v8 < a2)
    {
        v8 = ((a1 + a3) - a5) + a1;
    }
    else
    {
        v8 = a3 - (a5 - a3 * a3);
    }
    if (v6 < a4)
    {
        v9 = a4 * a4 - a5;
    }
    else
    {
        v9 = a1 * a1 * a1 + a2;
    }
    v10 = a5 + (a5 - a2) - a5;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 15
7 15
8 15
9 15
10 17
11 17
12 19
13 19
14 19
15 19
16 23
17 23
18 23
19 23
20 25
21 25
22 26
23 26
24 26
25 26
26 26
27 26
28 26
29 27
<<<sep_out_sample>>>
add %edx,%edi
add %esi,%edi
add %r8d,%edi
add %edi,%ecx
lea (%rsi,%r8,1),%r9d
add %r9d,%ecx
imul %esi,%edx
add %edx,%r8d
sub %esi,%r8d
lea (%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a1 < a1)
    {
        v6 = a4 + (a2 * a3) - a3;
    }
    else
    {
        v6 = a2 + a5;
    }
    v7 = (a3 * a2 + a5) - a2;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 13
2 13
3 13
4 13
5 10
6 13
7 12
8 12
9 12
10 13
11 14
<<<sep_out_sample>>>
cmp %edx,%esi
jge c <func1+0xc>
lea (%rdx,%rdi,1),%eax
imul %edi,%eax
jmp 13 <func1+0x13>
mov %edi,%eax
sub %esi,%eax
imul %ecx,%eax
add %edx,%edi
add %edi,%esi
add %r8d,%esi
add %ecx,%esi
add %eax,%esi
sub %edx,%ecx
lea 0x1(%rsi,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a2 < a3)
    {
        v6 = a3 * a1 + a1 * a1;
    }
    else
    {
        v6 = (a1 * a4) - a4 * a2;
    }
    v7 = a4 - a3;
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        if (v7 < a3)
        {
            v8 += a5 - a3 + a5;
        }
        else
        {
            v8 += a4 + (a5 * a5);
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 25
10 25
11 25
12 25
13 25
14 12
15 25
16 26
<<<sep_out_sample>>>
mov $0x1,%r9d
sub %ecx,%r9d
imul %ecx,%r9d
sub %edx,%r9d
cmp %esi,%r9d
jge 21 <func1+0x21>
mov %edi,%eax
imul %r8d,%eax
add %edx,%eax
sub %ecx,%eax
jmp 2b <func1+0x2b>
mov %edx,%eax
imul %edi,%eax
add %ecx,%eax
add %r8d,%eax
mov %r8d,%r10d
imul %r8d,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%r9d
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += (a1 * a5) * a3;
    }
    v8 = (a4 - a4 * a4) - a3;
    if (v8 < a2)
    {
        v9 = a3 + (a1 * a5) - a4;
    }
    else
    {
        v9 = a4 + a3 * a1 + a5;
    }
    v10 = a5 * a5;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 9
4 9
5 10
6 10
7 12
8 12
9 12
10 12
11 12
12 16
13 16
14 16
15 16
16 18
17 18
18 19
19 19
20 19
21 19
22 19
23 19
24 19
25 20
<<<sep_out_sample>>>
mov %ecx,%eax
sub %r8d,%eax
cmp %r8d,%ecx
jge 10 <func1+0x10>
lea (%rdx,%rdi,1),%eax
imul %eax,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a4 < a5)
    {
        v6 = (a1 + a3) * (a3 + a1);
    }
    else
    {
        v6 = a4 - a5;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += a4 - a5 - a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 4
4 4
5 6
6 6
7 17
8 17
9 17
10 17
11 17
12 18
<<<sep_out_sample>>>
mov %edi,%r10d
imul %edx,%r10d
imul %r8d,%r10d
add %edi,%r10d
lea (%rdi,%rdi,1),%r9d
cmp %ecx,%edi
mov $0x0,%eax
cmovl %eax,%r9d
add %edx,%edi
add %esi,%edi
add %edi,%r8d
add %ecx,%r8d
add %r10d,%r8d
add %r9d,%r8d
mov %ecx,%eax
sub %esi,%eax
add %eax,%ecx
sub %edx,%ecx
lea (%r8,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a5 < a5)
    {
        v6 = (a2 - a3) + a4 + a3;
    }
    else
    {
        v6 = a1 + (a1 * a3) * a5;
    }
    if (a1 < a4)
    {
        v7 = a4 - a4;
    }
    else
    {
        v7 = a1 + ((a1 + a3) - a3);
    }
    v8 = a4 + (a4 - a2) - a3;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 18
6 18
7 18
8 18
9 21
10 21
11 21
12 21
13 21
14 21
15 20
16 20
17 20
18 20
19 21
20 22
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
lea (%r8,%rcx,1),%eax
add %edx,%esi
imul %esi,%ecx
add %ecx,%edi
lea 0x1(%rax,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a1 + a4 * (a2 + a3);
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        if (v7 < a1)
        {
            v7 += (a3 + a5) - a2;
        }
        else
        {
            v7 += a1 + a5;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 4
6 4
7 4
8 17
9 18
<<<sep_out_sample>>>
mov %edi,%eax
imul %ecx,%eax
sub %esi,%eax
sub %edi,%eax
lea (%rsi,%r8,1),%r9d
test %edx,%edx
cmovle %edx,%r9d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += (a2 - a2) - a2;
    }
    v8 = (a1 * a4 - a2) - a1;
    if (v9 < a3)
    {
        v9 = a2 + a5;
    }
    else
    {
        v9 = (a3 - a1) + a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 9
4 9
5 12
6 12
7 12
8 18
9 18
10 18
11 18
12 18
13 18
14 19
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
lea 0x1(%rcx,%rax,1),%eax
add %esi,%esi
sub %edx,%esi
add %esi,%r8d
add %r8d,%eax
sub %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a5 * a3;
    }
    v8 = a2 + a2 - a3 + a5;
    v9 = a5 * (a4 - a4) - a1;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 11
5 9
6 9
7 9
8 11
9 11
10 12
<<<sep_out_sample>>>
mov %r8d,%r9d
sub %esi,%r9d
add %edi,%edx
add %edx,%esi
add %r8d,%esi
add %esi,%ecx
add %edi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a5 + a1;
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += a3 * a5 * a4;
    }
    v9 = a4 - (a2 - a5 + a4);
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 11
4 11
5 11
6 11
7 4
8 11
9 11
10 12
<<<sep_out_sample>>>
add %edi,%edx
add %edx,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%eax
imul %r8d,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (a2 < a1)
        {
            v6 += a3 - a2;
        }
        else
        {
            v6 += a4 + a4;
        }
    }
    if (a1 < a1)
    {
        v8 = a2 * a2;
    }
    else
    {
        v8 = a1 * a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 24
2 24
3 24
4 24
5 22
6 24
7 25
<<<sep_out_sample>>>
cmp %edi,%edx
jle d <func1+0xd>
mov %ecx,%r9d
imul %edi,%r9d
jmp 15 <func1+0x15>
lea (%rdx,%r8,1),%r9d
imul %r8d,%r9d
lea (%r8,%rsi,1),%eax
cmp $0x1,%ecx
jle 28 <func1+0x28>
lea (%r8,%rdx,1),%r10d
lea (%rdi,%rcx,1),%eax
add %r10d,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = (a4 - a3) + a3 - a4;
    if (a1 < a3)
    {
        v7 = a4 * a1;
    }
    else
    {
        v7 = a3 * a5 + (a5 * a5);
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += a2 - a4 * a5;
    }
    if (v9 < a4)
    {
        v10 = (a5 + a3) + (a1 + a4);
    }
    else
    {
        v10 = ((a5 + a4) - a4) + a2;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 5
2 5
3 7
4 7
5 7
6 11
7 11
8 24
9 18
10 18
11 20
12 20
13 20
14 26
15 26
16 26
17 26
18 26
19 26
20 27
<<<sep_out_sample>>>
mov %ecx,%eax
sub %esi,%eax
cmp %edx,%ecx
jle 17 <func1+0x17>
mov %ecx,%eax
imul %edx,%eax
mov %r8d,%r9d
imul %r8d,%r9d
sub %r9d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a4 * a2;
    }
    v8 = (a2 * a3) - a3 * a2;
    if (a3 < a4)
    {
        v9 = a4 * a3 - a5 * a5;
    }
    else
    {
        v9 = (a4 + a1 - a1) - a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 10
4 10
5 12
6 12
7 12
8 12
9 12
10 18
11 18
12 18
13 18
14 18
15 19
<<<sep_out_sample>>>
cmp $0x1,%esi
jle c <func1+0xc>
mov %edx,%eax
imul %ecx,%eax
jmp 14 <func1+0x14>
lea 0x1(%rcx),%eax
imul %edi,%eax
add %edx,%eax
test %r8d,%r8d
jle 22 <func1+0x22>
mov %esi,%r9d
imul %ecx,%r9d
jmp 29 <func1+0x29>
mov %edx,%r9d
imul %edx,%r9d
test %r8d,%r8d
jle 36 <func1+0x36>
mov %esi,%r10d
sub %ecx,%r10d
jmp 3e <func1+0x3e>
lea 0x1(%rdx),%r10d
imul %esi,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (v6 < a5)
        {
            v6 += a5 - a1;
        }
        else
        {
            v6 += (a1 + a1) + a5;
        }
    }
    if (v7 < a2)
    {
        v8 = a3 * a4;
    }
    else
    {
        v8 = a1 + a1 * a4 + a3;
    }
    if (v9 < a5)
    {
        v9 = a2 * a4;
    }
    else
    {
        v9 = a3 * a3;
    }
    if (v6 < a5)
    {
        v10 = (a5 - a5 - a4) + a2;
    }
    else
    {
        v10 = a2 + a2 * a3;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 22
7 22
8 22
9 24
10 24
11 26
12 26
13 26
14 30
15 30
16 32
17 32
18 34
19 34
20 34
21 38
22 38
23 40
24 40
25 40
26 40
27 40
28 40
29 40
30 41
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (a3 < a3)
        {
            v6 += a1 + a3;
        }
        else
        {
            v6 += a3 - a4;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += (a2 * a5) + a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 21
5 22
<<<sep_out_sample>>>
lea (%rcx,%rdx,1),%eax
cmp $0x1,%edx
jle 13 <func1+0x13>
mov %ecx,%eax
imul %r8d,%eax
imul %esi,%eax
sub %edx,%eax
add %edi,%eax
add %eax,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (a2 < a5)
        {
            v6 += a5 * a2 + a4;
        }
        else
        {
            v6 += a1 * (a1 + a3);
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += a1 + a5 * a2;
    }
    if (v9 < a3)
    {
        v10 = a4 * a5 * a2 - a3;
    }
    else
    {
        v10 = a4 + (a5 - (a5 - a3));
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 27
2 21
3 21
4 23
5 23
6 23
7 23
8 29
9 29
10 29
11 29
12 29
13 30
<<<sep_out_sample>>>
cmp %edx,%r8d
jge 15 <func1+0x15>
mov %esi,%r9d
sub %edi,%r9d
add $0x1,%r9d
imul %r8d,%r9d
jmp 20 <func1+0x20>
lea (%rdx,%rdi,1),%r9d
add %esi,%r9d
imul %ecx,%r9d
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
add %ecx,%esi
add %r9d,%esi
lea (%rdx,%rcx,2),%eax
sub %r8d,%eax
add %esi,%eax
imul %edi,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a5 < a3)
    {
        v6 = a5 + (a2 - a1) * a5;
    }
    else
    {
        v6 = a4 * (a3 + a1 + a2);
    }
    v7 = a3 + ((a4 - a5) + a4);
    v8 = a1 * a3;
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        if (a3 < a3)
        {
            v9 += a4 + a3 + a4;
        }
        else
        {
            v9 += (a2 - a1) - a1;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 26
12 26
13 26
14 26
15 26
16 12
17 12
18 26
19 13
20 26
21 27
<<<sep_out_sample>>>
add %edx,%edi
lea (%r8,%rsi,2),%eax
lea 0x1(%rdi,%rax,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a2 - a4;
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += a4 - a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 11
<<<sep_out_sample>>>
lea 0x1(%rsi,%rdx,2),%eax
add %eax,%r8d
lea 0x1(%rcx,%r8,1),%eax
imul %edx,%edx
lea (%rax,%rsi,2),%eax
sub %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (v7 < a3)
        {
            v6 += a4 * a4;
        }
        else
        {
            v6 += (a4 * a2) + a3;
        }
    }
    v8 = (a2 - (a3 * a3)) + a2;
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        if (a1 < a3)
        {
            v9 += a5 + a1;
        }
        else
        {
            v9 += a3 * a5;
        }
    }
    v11 = a3 - a1;
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 30
2 30
3 30
4 16
5 16
6 30
7 31
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a4 * a1 + a5;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        if (a2 < a1)
        {
            v8 += a5 + a1 + a2;
        }
        else
        {
            v8 += a5 * (a3 + a5);
        }
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a5)
    {
        if (v7 < a3)
        {
            v10 += a2 * a5 + a3;
        }
        else
        {
            v10 += a5 + a5;
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 33
2 33
3 33
4 33
5 34
<<<sep_out_sample>>>
test %edi,%edi
jle 13 <func1+0x13>
mov %r8d,%r9d
imul %r8d,%r9d
add %edx,%r9d
sub %r8d,%r9d
jmp 1f <func1+0x1f>
lea -0x1(%rcx),%r9d
imul %esi,%r9d
imul %r8d,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
mov %esi,%edi
sub %edx,%edi
add %r8d,%edi
add %edi,%esi
add %eax,%esi
imul %ecx,%edx
sub %r8d,%edx
add %edx,%ecx
lea (%rsi,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (v6 < a1)
    {
        v6 = (a5 * a5 + a3) - a5;
    }
    else
    {
        v6 = ((a4 * a2) - a2) * a5;
    }
    v7 = a2 + (a5 + (a2 - a3));
    v8 = a4 + (a3 * a4 - a5);
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 14
12 14
13 14
14 14
15 14
16 12
17 12
18 12
19 12
20 14
21 13
22 13
23 13
24 14
25 15
<<<sep_out_sample>>>
mov $0x0,%eax
cmp %edx,%edi
lea (%r8,%rdi,2),%r9d
cmovl %r9d,%eax
add %edi,%edx
add %esi,%edx
add %edx,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
sub %esi,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (a4 < a1)
        {
            v6 += a3 * a4;
        }
        else
        {
            v6 += a1 - a1 * a4;
        }
    }
    if (a1 < a3)
    {
        v8 = a1 + a1 + a5;
    }
    else
    {
        v8 = a4 - a4;
    }
    v9 = a1 - a2;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 16
3 18
4 18
5 25
6 25
7 25
8 25
9 25
10 24
11 25
12 26
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%esi
mov %ecx,%eax
sub %r8d,%eax
add %esi,%eax
mov %edx,%esi
sub %edi,%esi
imul %esi,%ecx
add %ecx,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (a4 < a1)
        {
            v6 += a5 - a3;
        }
        else
        {
            v6 += (a1 - a2) - a5;
        }
    }
    v8 = a4 - a5;
    if (a4 < a4)
    {
        v9 = a2 - a1 * a4 * a1;
    }
    else
    {
        v9 = ((a3 - a1) * a4) + a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 25
2 25
3 25
4 25
5 16
6 16
7 25
8 23
9 23
10 23
11 23
12 25
13 26
<<<sep_out_sample>>>
test %esi,%esi
jle b <func1+0xb>
mov %ecx,%eax
imul %edi,%eax
jmp 1c <func1+0x1c>
mov %edx,%eax
imul %ecx,%eax
imul %edx,%eax
mov %edi,%r9d
sub %eax,%r9d
mov %r9d,%eax
add %edi,%edx
add %edx,%esi
add %r8d,%esi
add %esi,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (v6 < a2)
    {
        v6 = a4 * a1;
    }
    else
    {
        v6 = a1 - (a3 * a4 * a3);
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += (a4 + a5) * a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 10
10 10
11 10
12 17
13 17
14 17
15 17
16 17
17 18
<<<sep_out_sample>>>
cmp %edx,%edi
jge 10 <func1+0x10>
mov %edi,%eax
imul %edi,%eax
imul %ecx,%eax
add %esi,%eax
jmp 1c <func1+0x1c>
mov %r8d,%eax
imul %r8d,%eax
sub %ecx,%eax
add %r8d,%eax
mov %esi,%r9d
imul %esi,%r9d
imul %r8d,%r9d
sub %esi,%r9d
add %r9d,%edi
add %edx,%edi
add %esi,%edi
add %edi,%r8d
add %ecx,%r8d
add %eax,%r8d
imul %ecx,%esi
sub %esi,%edx
lea 0x1(%r8,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a1 < a3)
    {
        v6 = a2 + a1 * a1 * a4;
    }
    else
    {
        v6 = a5 * a5 - a4 + a5;
    }
    if (a3 < a3)
    {
        v7 = a1 - a3;
    }
    else
    {
        v7 = a3 - a2 * a4;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        if (v9 < a4)
        {
            v8 += a1 - a2;
        }
        else
        {
            v8 += a3 * a5 + a4;
        }
    }
    v10 = a2 * a2 * a5 - a2;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 32
13 32
14 32
15 32
16 33
17 33
18 33
19 33
20 33
21 33
22 18
23 18
24 33
25 34
<<<sep_out_sample>>>
lea (%rcx,%rdi,1),%eax
add %r8d,%eax
cmp %edx,%esi
jl f <func1+0xf>
lea (%rsi,%rdi,2),%eax
add %ecx,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a2 < a3)
    {
        v6 = a4 + a1 + a5;
    }
    else
    {
        v6 = ((a2 + a1) + a1) + a4;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += a5 - a5 + a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 6
2 6
3 4
4 4
5 10
6 10
7 17
8 17
9 17
10 17
11 17
12 18
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
mov %edx,%r9d
imul %edx,%r9d
lea (%r9,%rdi,2),%r9d
add %r9d,%eax
sub %r8d,%edi
add %eax,%edi
mov %edx,%eax
sub %esi,%eax
add %eax,%edi
sub %r8d,%ecx
sub %edx,%ecx
lea (%rdi,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a1 + (a3 * a3 + a1);
    v7 = a1 - a5;
    v8 = a3 - a2;
    v9 = (a4 - a5) - a3;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 8
2 8
3 8
4 8
5 4
6 4
7 4
8 8
9 5
10 8
11 6
12 6
13 8
14 7
15 7
16 8
17 9
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %r8d,%esi
lea (%r8,%rcx,2),%eax
lea (%rax,%rsi,1),%eax
sub %ecx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a4 + a5;
    v7 = (a5 - a4) + (a1 - a1);
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 4
5 6
6 5
7 6
8 7
<<<sep_out_sample>>>
test %esi,%esi
jle f <func1+0xf>
lea 0x1(%rdi),%eax
imul %edx,%eax
add %r8d,%eax
jmp 15 <func1+0x15>
mov %edx,%eax
imul %r8d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (v6 < a2)
    {
        v6 = a1 * a3 + a3 + a5;
    }
    else
    {
        v6 = a3 * a5;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        if (v7 < a1)
        {
            v7 += a3 + a1 + a3;
        }
        else
        {
            v7 += a4 * a2 + a1;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 24
10 24
11 24
12 24
13 24
14 25
<<<sep_out_sample>>>
lea (%rsi,%rdi,1),%r9d
cmp %r8d,%ecx
jl 1a <func1+0x1a>
mov $0x1,%r9d
sub %esi,%r9d
imul %edi,%r9d
imul %esi,%r9d
cmp %esi,%ecx
jle 2a <func1+0x2a>
mov %ecx,%eax
imul %esi,%eax
imul %esi,%eax
add %ecx,%eax
jmp 32 <func1+0x32>
mov %edx,%eax
imul %edx,%eax
add %r8d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a4 < a5)
    {
        v6 = a2 + a1;
    }
    else
    {
        v6 = a2 * (a1 - a2 * a1);
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += a3 - a2 - a2;
    }
    if (a2 < a4)
    {
        v9 = ((a4 * a2) * a2) + a4;
    }
    else
    {
        v9 = a3 * a3 + a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 4
3 4
4 10
5 10
6 10
7 10
8 17
9 17
10 19
11 19
12 19
13 19
14 19
15 23
16 23
17 23
18 25
19 25
20 25
21 25
22 25
23 25
24 26
<<<sep_out_sample>>>
lea (%rdx,%r8,1),%r9d
cmp %esi,%r8d
jge 14 <func1+0x14>
lea (%rsi,%rsi,1),%r9d
imul %esi,%r9d
add %r8d,%r9d
mov %r8d,%eax
sub %edx,%eax
cmp %edi,%esi
jle 25 <func1+0x25>
mov %ecx,%eax
imul %ecx,%eax
imul %esi,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    if (a5 < a2)
    {
        v6 = ((a2 + a2) * a2) + a5;
    }
    else
    {
        v6 = a1 + a3 + a5 - a1;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += a5 + a3 + a4;
    }
    if (a1 < a2)
    {
        v9 = a4 * a4 * a2;
    }
    else
    {
        v9 = a5 - a3;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a2)
    {
        v10 += (a4 * a3) * a4;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 6
7 23
8 23
9 17
10 17
11 19
12 19
13 19
14 30
15 30
16 30
17 30
18 30
19 30
20 31
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
lea 0x1(%rsi,%r8,2),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = ((a2 - a4) + a5) - a2;
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += a5 * a5 - a1;
    }
    v9 = a3 - a3;
    v10 = 0;
    for (v11 = 0; v11++; v11<a2)
    {
        v10 += a1 * a5 * a1;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 16
4 17
<<<sep_out_sample>>>
cmp %edx,%esi
jge d <func1+0xd>
mov %edx,%r9d
imul %r8d,%r9d
jmp 14 <func1+0x14>
mov %edx,%r9d
imul %esi,%r9d
lea (%rcx,%rcx,1),%eax
cmp %edi,%r8d
jle 27 <func1+0x27>
mov %r8d,%eax
sub %edi,%eax
add $0x1,%eax
imul %edx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a2 < a3)
    {
        v6 = a3 * a5;
    }
    else
    {
        v6 = ((a3 - a3) + a3) * a2;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a2 * a1;
    }
    if (a1 < a5)
    {
        v9 = ((a5 - a1) * a3) + a3;
    }
    else
    {
        v9 = a4 + a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 23
9 17
10 17
11 19
12 19
13 19
14 19
15 25
16 25
17 25
18 25
19 25
20 25
21 26
<<<sep_out_sample>>>
cmp %esi,%edi
jge f <func1+0xf>
lea (%rsi,%rsi,1),%eax
mov %r8d,%r9d
sub %eax,%r9d
jmp 1d <func1+0x1d>
mov %edi,%eax
imul %edi,%eax
imul %edx,%eax
mov %edi,%r9d
sub %eax,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
mov %ecx,%esi
sub %edx,%esi
sub %r8d,%ecx
imul %esi,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a1 < a2)
    {
        v6 = a5 - (a2 + a2);
    }
    else
    {
        v6 = a1 - a1 * a1 * a3;
    }
    v7 = (a4 - a3) * (a4 - a5);
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 10
11 10
12 13
13 13
14 13
15 13
16 13
17 12
18 12
19 12
20 12
21 13
22 14
<<<sep_out_sample>>>
add %edi,%edx
add %edx,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%edx
imul %r8d,%ecx
sub %edi,%ecx
lea (%rdx,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (a5 < a4)
        {
            v6 += a2 * a4 * a3;
        }
        else
        {
            v6 += a1 - a3 - a2;
        }
    }
    v8 = a4 * a5 - a1;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 16
6 16
7 17
8 18
<<<sep_out_sample>>>
cmp %esi,%r8d
jge 14 <func1+0x14>
mov %ecx,%r9d
imul %r8d,%r9d
lea (%rdi,%rcx,1),%eax
add %eax,%r9d
jmp 20 <func1+0x20>
lea (%rdi,%r8,1),%r9d
imul %r8d,%r9d
imul %ecx,%r9d
lea (%rsi,%rdx,1),%eax
imul %esi,%eax
imul %edi,%eax
cmp %ecx,%esi
jge 3c <func1+0x3c>
mov %ecx,%r10d
imul %ecx,%r10d
add %edx,%r10d
add %edi,%r10d
jmp 46 <func1+0x46>
lea (%rdx,%r8,1),%r10d
sub %edi,%r10d
add %esi,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a5 < a2)
    {
        v6 = a4 * a5 + (a1 + a4);
    }
    else
    {
        v6 = (a1 + a5) * a5 * a4;
    }
    v7 = a1 * (a2 * (a2 + a3));
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += (a1 * a4) + a4;
    }
    if (a2 < a4)
    {
        v10 = (a4 * a4 + a3) + a1;
    }
    else
    {
        v10 = a2 + (a3 + a5 - a1);
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 12
12 12
13 12
14 18
15 18
16 20
17 20
18 20
19 20
20 20
21 24
22 24
23 24
24 26
25 26
26 26
27 26
28 26
29 26
30 26
31 27
<<<sep_out_sample>>>
lea (%rdx,%rdi,1),%r9d
cmp %esi,%edi
jle 15 <func1+0x15>
mov %edi,%r11d
imul %r9d,%r11d
imul %esi,%r11d
jmp 22 <func1+0x22>
mov %edx,%r11d
sub %r8d,%r11d
lea (%rdi,%rsi,1),%r10d
sub %r10d,%r11d
test %r8d,%r8d
jle 32 <func1+0x32>
imul %edx,%edi
mov %r8d,%r10d
sub %edi,%r10d
jmp 3f <func1+0x3f>
mov %r8d,%r10d
imul %edx,%r10d
sub %esi,%r10d
add %edi,%r10d
mov %edx,%eax
sub %r8d,%eax
add %esi,%eax
cmp %r9d,%edx
jle 56 <func1+0x56>
lea (%rdx,%r8,1),%eax
imul %eax,%edx
lea (%rdx,%r8,1),%eax
lea (%r9,%rsi,1),%edi
add %r8d,%edi
add %ecx,%edi
add %r9d,%edi
add %r11d,%edi
add %r10d,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a3 + a1;
    if (a2 < a1)
    {
        v7 = a2 * ((a1 + a3) * a1);
    }
    else
    {
        v7 = a3 - a5 - (a1 + a2);
    }
    if (v8 < a5)
    {
        v8 = a5 - a1 * a3;
    }
    else
    {
        v8 = a1 - (a2 - (a5 * a3));
    }
    if (v6 < a3)
    {
        v9 = ((a3 + a5) * a3) + a5;
    }
    else
    {
        v9 = a2 - (a5 - a3);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 5
3 5
4 7
5 7
6 7
7 7
8 11
9 11
10 11
11 11
12 13
13 13
14 15
15 15
16 15
17 15
18 19
19 19
20 19
21 19
22 27
23 27
24 27
25 21
26 21
27 23
28 23
29 23
30 29
31 29
32 29
33 29
34 29
35 29
36 29
37 30
<<<sep_out_sample>>>
cmp %edx,%esi
jge 12 <func1+0x12>
mov %edx,%r11d
sub %edi,%r11d
add %r8d,%r11d
sub %ecx,%r11d
jmp 1d <func1+0x1d>
lea (%rdi,%rsi,1),%r11d
sub %r8d,%r11d
imul %edi,%r11d
lea (%r8,%rdi,1),%r10d
test %ecx,%ecx
jg 2c <func1+0x2c>
lea (%rsi,%rcx,2),%r10d
sub %edx,%r10d
lea (%rsi,%rcx,1),%r9d
cmp %edx,%esi
jge 40 <func1+0x40>
lea (%rcx,%rdx,1),%r9d
imul %r8d,%r9d
imul %r8d,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a2 < a3)
    {
        v6 = a3 - a1 + a5 - a4;
    }
    else
    {
        v6 = a1 * ((a1 + a2) - a5);
    }
    if (v7 < a4)
    {
        v7 = a5 + a1;
    }
    else
    {
        v7 = (a4 + a4) - a3 + a2;
    }
    if (a2 < a3)
    {
        v8 = a5 * (a4 + a3) * a5;
    }
    else
    {
        v8 = a2 + a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 14
12 12
13 12
14 18
15 18
16 26
17 20
18 20
19 22
20 22
21 22
22 28
23 28
24 28
25 28
26 28
27 28
28 28
29 29
<<<sep_out_sample>>>
test %esi,%esi
jle 11 <func1+0x11>
mov %r8d,%eax
imul %ecx,%eax
imul %edx,%eax
sub %esi,%eax
jmp 1d <func1+0x1d>
mov %ecx,%eax
imul %r8d,%eax
imul %r8d,%eax
sub %edi,%eax
cmp %edi,%r8d
jge 30 <func1+0x30>
lea (%r8,%rdx,1),%r9d
imul %edx,%r9d
imul %edi,%r9d
jmp 38 <func1+0x38>
lea (%rdx,%rcx,1),%r9d
imul %edx,%r9d
add %r9d,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (a3 < a5)
        {
            v6 += a5 + (a3 - a3);
        }
        else
        {
            v6 += a2 + a3;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += a2 - a3;
    }
    if (v10 < a2)
    {
        v10 = ((a5 * a4) * a3) - a2;
    }
    else
    {
        v10 = (a4 * a5) * a5 - a1;
    }
    if (a5 < a1)
    {
        v11 = (a3 * (a5 + a3)) * a1;
    }
    else
    {
        v11 = a3 * (a3 + a4);
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 23
4 23
5 23
6 23
7 23
8 27
9 27
10 27
11 27
12 29
13 29
14 31
15 31
16 31
17 31
18 35
19 35
20 37
21 37
22 37
23 37
24 37
25 37
26 38
<<<sep_out_sample>>>
lea 0x2(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = a2 - a2;
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += a3 - a5 - a4;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        v9 += a5 + (a4 * a5);
    }
    v11 = 0;
    for (v12 = 0; v12++; v12<a2)
    {
        v11 += a1 - a3 - a4;
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 20
2 20
3 20
4 20
5 21
<<<sep_out_sample>>>
push %rbx
mov %edx,%ebx
imul %r8d,%ebx
cmp %r8d,%edx
jle 15 <func1+0x15>
mov %esi,%r10d
imul %esi,%r10d
jmp 22 <func1+0x22>
mov $0x2,%r10d
sub %edi,%r10d
imul %r8d,%r10d
lea (%rdi,%rcx,1),%r11d
cmp %edi,%r10d
jl 38 <func1+0x38>
mov %edi,%r11d
imul %edx,%r11d
sub %esi,%r11d
add %edx,%r11d
mov $0x0,%r9d
mov %edx,%eax
imul %ecx,%eax
cmp %ecx,%r8d
cmovle %eax,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %ebx,%eax
add %r10d,%eax
add %r11d,%eax
add %r9d,%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a3 * a5;
    if (a5 < a3)
    {
        v7 = a2 * a2;
    }
    else
    {
        v7 = a5 - ((a1 * a5) - a5);
    }
    if (v7 < a1)
    {
        v8 = a1 + a4;
    }
    else
    {
        v8 = a3 - (a2 - a1 * a3);
    }
    if (a4 < a5)
    {
        v9 = a4 - a4;
    }
    else
    {
        v9 = a3 * a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 4
3 4
4 5
5 5
6 7
7 7
8 7
9 11
10 11
11 11
12 15
13 13
14 13
15 19
16 19
17 19
18 19
19 23
20 27
21 27
22 27
23 27
24 29
25 29
26 29
27 29
28 29
29 29
30 29
31 29
32 30
33 30
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
mov %ecx,%edi
imul %esi,%edi
mov %r8d,%r9d
sub %edi,%r9d
imul %edx,%r9d
add %r9d,%eax
sub %edx,%r8d
add %r8d,%esi
sub %ecx,%esi
lea 0x1(%rax,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = (a5 - a4 * a2) * a3;
    v7 = ((a5 - a3) + a2) - a4;
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += (a4 - a2) + a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 11
5 4
6 4
7 4
8 4
9 4
10 11
11 5
12 5
13 5
14 11
15 12
<<<sep_out_sample>>>
lea (%rsi,%rdi,1),%eax
lea (%r8,%rdi,1),%r9d
sub %edx,%eax
cmp %edi,%edx
cmovl %r9d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a5 - a3 * a2;
    }
    if (a3 < a1)
    {
        v8 = a5 + a1 + a4 - a4;
    }
    else
    {
        v8 = (a2 + a1) - a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 15
2 11
3 11
4 11
5 11
6 17
7 17
8 17
9 17
10 17
11 18
<<<sep_out_sample>>>
test %esi,%esi
jle 12 <func1+0x12>
mov %ecx,%r11d
sub %edi,%r11d
add %edx,%r11d
sub %esi,%r11d
jmp 1a <func1+0x1a>
mov %esi,%eax
sub %ecx,%eax
lea (%rax,%rsi,2),%r11d
mov %edi,%r10d
imul %edx,%r10d
sub %r8d,%r10d
sub %ecx,%r10d
cmp %edi,%ecx
jle 37 <func1+0x37>
mov %esi,%r9d
imul %ecx,%r9d
neg %r9d
jmp 45 <func1+0x45>
mov %esi,%r9d
sub %r8d,%r9d
sub $0x1,%r9d
imul %esi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
imul %r8d,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (v6 < a2)
    {
        v6 = (a4 - a1 + a3) - a2;
    }
    else
    {
        v6 = (a2 + (a2 - a4)) + a2;
    }
    v7 = a1 * a3 - a5 - a4;
    if (a1 < a4)
    {
        v8 = a3 - a2 * a4 - a3;
    }
    else
    {
        v8 = a2 * (a2 - a5) - a2;
    }
    v9 = a5 * a1;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 12
12 12
13 12
14 12
15 13
16 13
17 15
18 15
19 15
20 15
21 19
22 19
23 19
24 19
25 22
26 22
27 22
28 22
29 22
30 22
31 22
32 21
33 22
34 23
<<<sep_out_sample>>>
mov %edi,%eax
imul %edx,%eax
imul %edi,%eax
sub %r8d,%eax
lea 0x1(%rdi,%rax,1),%eax
add %eax,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a5 * a3 - a5;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        if (v7 < a4)
        {
            v8 += (a2 + a2) * a5;
        }
        else
        {
            v8 += (a1 + a2) * a5;
        }
    }
    v10 = a1 * a3 * a1 - a5;
    v11 = 0;
    for (v12 = 0; v12++; v12<a4)
    {
        v11 += a2 - a3 + a4;
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 21
5 27
6 27
7 27
8 27
9 27
10 28
<<<sep_out_sample>>>
cmp %ecx,%esi
jge 9 <func1+0x9>
lea (%rdi,%rdi,1),%eax
jmp 13 <func1+0x13>
lea 0x1(%r8),%eax
imul %edx,%eax
add %r8d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (a3 < a3)
        {
            v6 += a4 - a2 - a3;
        }
        else
        {
            v6 += a2 + a3 - a1;
        }
    }
    if (a2 < a4)
    {
        v8 = a1 + a1;
    }
    else
    {
        v8 = a5 + (a3 + (a5 * a3));
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 22
6 22
7 22
8 24
9 24
10 24
11 24
12 24
13 25
<<<sep_out_sample>>>
mov %r8d,%r9d
sub %ecx,%r9d
sub %edi,%r9d
add %esi,%r9d
mov %esi,%r11d
imul %r8d,%r11d
sub %edx,%r11d
add %esi,%r11d
cmp %r9d,%r8d
jle 2a <func1+0x2a>
mov %edi,%eax
imul %r8d,%eax
lea (%rax,%rdx,2),%r10d
jmp 32 <func1+0x32>
lea -0x1(%rsi),%r10d
imul %edx,%r10d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
add %r11d,%eax
add %r10d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = (a5 - a4 - a1) + a2;
    if (a3 < a3)
    {
        v7 = a2 - ((a1 + a1) + a2);
    }
    else
    {
        v7 = (a2 * a5) - a3 + a2;
    }
    if (v6 < a5)
    {
        v8 = a3 + a1 * a5 + a3;
    }
    else
    {
        v8 = a3 * a2 - a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 11
6 11
7 11
8 11
9 13
10 13
11 15
12 15
13 15
14 15
15 19
16 19
17 21
18 21
19 21
20 21
21 21
22 21
23 21
24 22
<<<sep_out_sample>>>
test %edx,%edx
jle c <func1+0xc>
mov %edi,%eax
imul %r8d,%eax
jmp 16 <func1+0x16>
mov %esi,%eax
imul %edx,%eax
sub %edi,%eax
imul %esi,%eax
lea 0x1(%rax,%rdi,1),%eax
add %eax,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a1 + a1 - a1;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        if (v9 < a1)
        {
            v8 += a4 - a3 * a5;
        }
        else
        {
            v8 += a2 - a1 * a3;
        }
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a1)
    {
        v10 += a5 + a2 * a5;
    }
    if (v12 < a3)
    {
        v12 = a1 * a5;
    }
    else
    {
        v12 = ((a2 * a3) - a1) * a2;
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 26
2 26
3 28
4 28
5 28
6 32
7 32
8 32
9 32
10 34
11 34
12 34
13 34
14 34
15 35
<<<sep_out_sample>>>
cmp %edx,%ecx
jge f <func1+0xf>
mov %esi,%eax
imul %edx,%eax
add %ecx,%eax
add %edi,%eax
jmp 19 <func1+0x19>
mov $0x1,%eax
sub %esi,%eax
imul %edi,%eax
add %edi,%edx
add %edx,%esi
add %r8d,%esi
add %esi,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a4 < a3)
    {
        v6 = a2 * a3 + a4 + a1;
    }
    else
    {
        v6 = a1 - (a1 * a2);
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        if (v7 < a2)
        {
            v7 += (a3 * a1) - a4;
        }
        else
        {
            v7 += a1 + a5 + a5;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 24
12 24
13 24
14 24
15 24
16 25
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
add %ecx,%esi
mov $0x1,%eax
sub %r8d,%eax
imul %eax,%ecx
lea 0x1(%rsi,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a4 - a5 * a4;
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a4 + a5;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        if (a1 < a3)
        {
            v9 += a4 * a2 + a4;
        }
        else
        {
            v9 += a5 + a3 - a1;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 22
4 22
5 4
6 4
7 4
8 22
9 23
<<<sep_out_sample>>>
mov %edi,%eax
sub %r8d,%eax
lea (%rdi,%rdx,1),%r11d
cmp %esi,%edx
cmovl %eax,%r11d
lea (%rdx,%rdx,1),%r10d
cmp %edi,%esi
jle 24 <func1+0x24>
mov %ecx,%r9d
imul %r8d,%r9d
imul %ecx,%r9d
jmp 2b <func1+0x2b>
mov %edi,%r9d
imul %edx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a3 < a2)
    {
        v6 = a1 - a5;
    }
    else
    {
        v6 = a1 + a3;
    }
    v7 = a3 + a3;
    if (a1 < a2)
    {
        v8 = a4 * (a4 * a5);
    }
    else
    {
        v8 = a1 * a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 6
6 12
7 13
8 13
9 15
10 15
11 15
12 15
13 19
14 19
15 21
16 21
17 21
18 21
19 21
20 21
21 21
22 22
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %edx,%r8d
imul %r8d,%ecx
sub %esi,%ecx
lea 0x1(%rax,%rcx,1),%eax
sub %edi,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a1 < a1)
    {
        v6 = a1 - a4;
    }
    else
    {
        v6 = (a5 + a3) * a4 - a2;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        if (a5 < a1)
        {
            v7 += a1 + a2;
        }
        else
        {
            v7 += (a2 - a4) * a3;
        }
    }
    v9 = a3 - a1;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 25
2 25
3 25
4 25
5 10
6 10
7 10
8 25
9 24
10 25
11 26
<<<sep_out_sample>>>
cmp %edi,%r8d
jge 13 <func1+0x13>
mov %edi,%eax
imul %edx,%eax
imul %ecx,%eax
imul %r8d,%eax
jmp 1e <func1+0x1e>
mov %edx,%eax
imul %r8d,%eax
imul %esi,%eax
sub %edx,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %r8d,%esi
add %ecx,%esi
lea 0x1(%rax,%rsi,1),%eax
add %ecx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    if (a5 < a1)
    {
        v6 = (a1 * a3 * a4) * a5;
    }
    else
    {
        v6 = a2 * (a3 * a5) - a3;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += a1 + a1;
    }
    v9 = a4 + a5;
    v10 = 0;
    for (v11 = 0; v11++; v11<a1)
    {
        if (a1 < a2)
        {
            v10 += a3 * a5 + a3;
        }
        else
        {
            v10 += a2 + a3 + a5;
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 30
13 30
14 30
15 30
16 30
17 17
18 30
19 31
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%r9d
cmp %r8d,%edi
jl 10 <func1+0x10>
mov %r8d,%r9d
imul %edi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
sub %esi,%r8d
lea (%r8,%rdi,2),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a1 < a5)
    {
        v6 = a1 + a3;
    }
    else
    {
        v6 = a5 * a1;
    }
    v7 = (a5 - a2 + a1) + a1;
    v8 = a3 - a3;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 6
2 4
3 4
4 10
5 10
6 14
7 14
8 14
9 14
10 14
11 12
12 12
13 14
14 15
<<<sep_out_sample>>>
mov %edx,%r9d
imul %ecx,%r9d
add %edi,%edx
add %edx,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%eax
add %r9d,%eax
add %r8d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a1 * (a5 * a2);
    }
    v8 = a1 + a3 * a4 - a1;
    v9 = a4 + a5;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 11
8 10
9 11
10 12
<<<sep_out_sample>>>
mov %esi,%eax
sub %ecx,%eax
lea (%rsi,%rsi,1),%r9d
test %esi,%esi
cmovle %r9d,%eax
add %edx,%edi
add %edi,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%edx
add %edx,%eax
sub %r8d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a5 * a4;
    }
    if (v8 < a2)
    {
        v8 = a2 - a4;
    }
    else
    {
        v8 = a2 + a2;
    }
    v9 = a4 - a5;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 11
5 11
6 18
7 18
8 18
9 18
10 18
11 17
12 18
13 19
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%eax
sub %r8d,%ecx
add %ecx,%edx
add %edx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (a5 < a5)
        {
            v6 += a5 - a2 + a5;
        }
        else
        {
            v6 += a3 * a2 - a4;
        }
    }
    v8 = a1 + ((a4 - a5) + a3);
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 16
6 16
7 16
8 17
9 18
<<<sep_out_sample>>>
lea (%rdx,%rdi,1),%r9d
cmp %esi,%edx
jle 13 <func1+0x13>
mov %r8d,%eax
sub %edx,%eax
sub %ecx,%eax
add %eax,%edi
jmp 1f <func1+0x1f>
mov %esi,%edi
imul %r8d,%edi
imul %esi,%edi
add %r8d,%edi
add %r9d,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%eax
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a3 + a1 - a3 + a3;
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        if (a2 < a5)
        {
            v7 += a5 - a2;
        }
        else
        {
            v7 += (a5 * a2) + a5;
        }
    }
    if (a2 < a3)
    {
        v9 = a1 - (a3 - a5 + a4);
    }
    else
    {
        v9 = (a2 * a5) * a2 + a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 17
3 17
4 19
5 19
6 19
7 19
8 19
9 23
10 23
11 23
12 23
13 25
14 25
15 25
16 25
17 25
18 26
<<<sep_out_sample>>>
mov %ecx,%eax
imul %r8d,%eax
test %ecx,%ecx
cmovg %r8d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (a5 < a3)
        {
            v6 += a4 - a5;
        }
        else
        {
            v6 += (a1 * a1) - a4;
        }
    }
    if (v6 < a4)
    {
        v8 = (a3 - a3) + a5;
    }
    else
    {
        v8 = a4 * a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 22
2 22
3 22
4 22
5 24
6 24
7 24
8 24
9 24
10 25
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add $0x2,%r8d
imul %r8d,%ecx
add %ecx,%eax
mov %esi,%ecx
sub %edi,%ecx
add %ecx,%edx
imul %edx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a4 + (a5 * a4 + a4);
    v7 = a2 * ((a2 - a1) + a3);
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 4
7 6
8 5
9 5
10 5
11 5
12 6
13 7
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
lea (%r8,%rcx,1),%eax
mov %ecx,%r9d
sub %edx,%r9d
mov %r9d,%edx
sub %esi,%edx
imul %edi,%edx
lea 0x1(%rax,%rdx,1),%edx
lea (%rdi,%rdi,1),%eax
imul %eax,%edi
sub %ecx,%edi
lea (%rdx,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = (a4 - a3 - a2) * a1;
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        if (a3 < a3)
        {
            v7 += a5 * a2 * a5;
        }
        else
        {
            v7 += a2 * a5 * a2;
        }
    }
    if (a3 < a3)
    {
        v9 = (a2 + a1) - a2 * a4;
    }
    else
    {
        v9 = (a1 + a1) * a1 - a4;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a1)
    {
        v10 += a2 * a4;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 30
2 30
3 30
4 30
5 4
6 4
7 4
8 4
9 4
10 30
11 23
12 23
13 23
14 30
15 31
<<<sep_out_sample>>>
add %edi,%edx
add %edx,%esi
add %r8d,%esi
add %r8d,%edi
lea (%rsi,%rcx,2),%eax
lea 0x1(%rdi,%rax,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a5 + a1 + a4;
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        if (a1 < a3)
        {
            v7 += (a5 * a5) - a5;
        }
        else
        {
            v7 += a5 - a3 + a1;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 4
5 4
6 17
7 18
<<<sep_out_sample>>>
mov %r8d,%eax
imul %edx,%eax
add %ecx,%eax
sub %r8d,%eax
cmp $0x1,%esi
jle 20 <func1+0x20>
mov %edi,%r9d
imul %r8d,%r9d
imul %edi,%r9d
add %r8d,%r9d
jmp 2e <func1+0x2e>
lea (%r8,%rdx,1),%r9d
mov %ecx,%r10d
imul %edi,%r10d
sub %r10d,%r9d
add %r9d,%edi
add %edi,%edx
add %esi,%edx
add %edx,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (v7 < a4)
        {
            v6 += a5 + a4 * a3;
        }
        else
        {
            v6 += a2 - a5 - a2;
        }
    }
    v8 = a4 + a5 * a3 - a5;
    v9 = a2 - a5 + a5;
    if (v7 < a2)
    {
        v10 = a5 + (a1 * a5) * a1;
    }
    else
    {
        v10 = a5 + a3 - a4 * a1;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 16
4 16
5 18
6 18
7 20
8 20
9 20
10 20
11 20
12 24
13 24
14 24
15 24
16 26
17 26
18 26
19 26
20 26
21 26
22 26
23 27
<<<sep_out_sample>>>
lea (%rdi,%rsi,1),%eax
cmp %esi,%edx
jl f <func1+0xf>
lea 0x1(%rdx,%r8,1),%eax
imul %ecx,%eax
add %edi,%edx
add %edx,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%edx
add %edx,%eax
imul %edi,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (a4 < a1)
        {
            v6 += a3 * a5 + a4;
        }
        else
        {
            v6 += a2 + (a5 * a5);
        }
    }
    if (a3 < a2)
    {
        v8 = a5 + (a1 - a5) + a2;
    }
    else
    {
        v8 = a4 + ((a5 + a3) * a4);
    }
    v9 = a5 * a1;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 16
3 16
4 22
5 22
6 25
7 25
8 25
9 25
10 25
11 24
12 25
13 26
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
add %esi,%ecx
lea 0x1(%r8),%eax
imul %eax,%edx
add %edx,%r8d
add %r8d,%ecx
lea 0x1(%rcx,%rdi,2),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a3 + a3 * a5 + a5;
    v7 = a1 + a1;
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += a3 * a1 * a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 11
5 4
6 4
7 4
8 11
9 11
10 12
<<<sep_out_sample>>>
push %rbx
lea (%rdi,%rsi,1),%r10d
cmp %edx,%ecx
jge 14 <func1+0x14>
lea -0x1(%rdi),%r10d
imul %esi,%r10d
add %edx,%r10d
lea (%rsi,%rsi,1),%ebx
sub %r8d,%ebx
imul %ecx,%ebx
lea (%rdx,%rcx,1),%r11d
imul %ecx,%r11d
mov %edx,%r9d
cmp %r8d,%ecx
jge 38 <func1+0x38>
lea 0x1(%rdx),%r9d
imul %esi,%r9d
sub %edx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %ebx,%eax
add %r11d,%eax
add %r9d,%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a4 < a3)
    {
        v6 = (a1 * a2 - a2) + a3;
    }
    else
    {
        v6 = a1 + a2;
    }
    if (a2 < a2)
    {
        v7 = a5 + a5 + a1 - a1;
    }
    else
    {
        v7 = (a2 + a2 - a5) * a4;
    }
    v8 = a4 * (a3 + a4);
    if (a4 < a5)
    {
        v9 = (a3 * a2) + a2 - a3;
    }
    else
    {
        v9 = a3 + a3 - a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 10
3 4
4 4
5 6
6 6
7 6
8 18
9 18
10 18
11 20
12 20
13 27
14 21
15 21
16 23
17 23
18 23
19 29
20 29
21 29
22 29
23 29
24 29
25 29
26 29
27 30
28 30
<<<sep_out_sample>>>
mov %esi,%eax
imul %r8d,%eax
sub %edx,%eax
add %r8d,%eax
add %edi,%eax
add %edx,%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
sub %edx,%esi
sub %r8d,%esi
add %esi,%edi
add %eax,%edi
imul %r8d,%edx
sub %ecx,%edx
add %edx,%r8d
lea 0x1(%rdi,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a2 - a3 - a5 + a1;
    v7 = a3 * a5 - a4 + a5;
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += a3 - a3;
    }
    v10 = (a2 * a5 - a3) + a5;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 11
5 12
6 12
7 12
8 12
9 12
10 4
11 4
12 4
13 12
14 5
15 5
16 5
17 12
18 13
<<<sep_out_sample>>>
mov %edi,%r9d
imul %edx,%r9d
cmp %esi,%edi
jle 17 <func1+0x17>
mov %esi,%eax
imul %edx,%eax
imul %ecx,%eax
add %esi,%eax
jmp 21 <func1+0x21>
mov %r8d,%eax
imul %esi,%eax
add %edi,%eax
sub %esi,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = a1 * a3;
    if (a2 < a1)
    {
        v7 = a2 + (a4 * (a2 * a3));
    }
    else
    {
        v7 = a1 + (a5 * a2) - a2;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        if (a4 < a1)
        {
            v8 += a2 + a3 * a2;
        }
        else
        {
            v8 += (a2 - a5) * a1;
        }
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a4)
    {
        if (a5 < a1)
        {
            v10 += a4 + (a1 + a1);
        }
        else
        {
            v10 += a3 - (a4 + a3);
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 5
4 5
5 7
6 7
7 7
8 7
9 7
10 11
11 11
12 11
13 11
14 37
15 37
16 37
17 37
18 37
19 37
20 38
<<<sep_out_sample>>>
lea (%rsi,%rsi,1),%r10d
cmp %edi,%r8d
jge 18 <func1+0x18>
mov %edi,%r10d
imul %ecx,%r10d
imul %r8d,%r10d
imul %r8d,%r10d
cmp %esi,%edi
jge 24 <func1+0x24>
mov %edx,%r11d
sub %ecx,%r11d
jmp 30 <func1+0x30>
mov %ecx,%r11d
sub %edx,%r11d
sub %edi,%r11d
add %ecx,%r11d
lea (%rsi,%rsi,1),%r9d
mov %esi,%eax
imul %edi,%eax
test %edi,%edi
cmovg %eax,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r11d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a5 < a1)
    {
        v6 = a5 * ((a1 * a4) * a5);
    }
    else
    {
        v6 = a2 - (a4 - a4) + a2;
    }
    if (a1 < a2)
    {
        v7 = a3 - a4;
    }
    else
    {
        v7 = ((a4 - a3) - a1) + a4;
    }
    if (v8 < a1)
    {
        v8 = a2 * a1;
    }
    else
    {
        v8 = a2 + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 6
7 6
8 12
9 12
10 14
11 14
12 14
13 18
14 18
15 18
16 18
17 26
18 22
19 22
20 22
21 22
22 28
23 28
24 28
25 28
26 28
27 28
28 28
29 29
<<<sep_out_sample>>>
lea (%r8,%rcx,1),%r9d
test %r8d,%r8d
jg 15 <func1+0x15>
lea (%rdx,%rdx,1),%r9d
imul %ecx,%r9d
imul %edx,%r9d
test %r8d,%r8d
jle 24 <func1+0x24>
lea (%rdi,%rsi,1),%eax
imul %edx,%eax
add %edi,%eax
jmp 2d <func1+0x2d>
lea (%rsi,%rdx,1),%eax
sub %r8d,%eax
sub %r8d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %r9d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a2 + a3;
    }
    if (v8 < a5)
    {
        v8 = a5 + a4;
    }
    else
    {
        v8 = a4 * (a3 + a3) * a3;
    }
    if (v6 < a5)
    {
        v9 = a1 + a3 * (a1 + a2);
    }
    else
    {
        v9 = (a2 + a3) - a5 - a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 9
3 9
4 15
5 15
6 15
7 17
8 17
9 19
10 19
11 19
12 19
13 23
14 23
15 23
16 25
17 25
18 25
19 25
20 25
21 25
22 26
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
lea (%rax,%rdi,2),%eax
mov %esi,%r9d
imul %r8d,%r9d
imul %r9d,%r8d
add %r8d,%esi
add %eax,%esi
imul %edx,%edi
sub %ecx,%edi
sub %edx,%edi
lea (%rsi,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a1 + a1;
    v7 = a5 * (a2 * a5) + a2;
    v8 = (a1 * a3 - a4) - a3;
    v9 = 0;
    for (v10 = 0; v10++; v10<a1)
    {
        v9 += (a5 * a5) * a3;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 12
2 12
3 12
4 12
5 12
6 5
7 5
8 5
9 5
10 12
11 6
12 6
13 6
14 12
15 13
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %edx,%edi
lea (%rax,%r8,2),%edx
sub %edi,%edx
lea (%rsi,%rcx,2),%eax
lea 0x1(%rdx,%rax,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = (a5 - (a3 + a1)) + a5;
    v7 = a4 + a2 + a4;
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += a4 + a4 + a5;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a1)
    {
        v10 += a2 + a1 - a3;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 16
4 16
5 4
6 4
7 16
8 5
9 16
10 17
<<<sep_out_sample>>>
mov %edi,%eax
imul %ecx,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a4 + a5 - a3;
    }
    v8 = (a1 * a4 + a2) - a2;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 9
2 9
3 10
4 10
5 10
6 10
7 10
8 11
<<<sep_out_sample>>>
mov $0x0,%eax
test %esi,%esi
jle 10 <func1+0x10>
lea (%rdx,%r8,2),%eax
imul %edi,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (v6 < a2)
    {
        v6 = (a3 + a5 + a5) * a1;
    }
    else
    {
        v6 = (a3 - (a3 - a4)) - a4;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += a4 * a5 - a5;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        if (a2 < a1)
        {
            v9 += a3 + a2 + a2;
        }
        else
        {
            v9 += (a2 * a3) * a3;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 29
7 29
8 29
9 29
10 29
11 30
<<<sep_out_sample>>>
lea (%rdi,%rcx,1),%r9d
cmp %r8d,%edi
jge 12 <func1+0x12>
mov %r8d,%r10d
imul %edx,%r10d
jmp 19 <func1+0x19>
lea (%rdx,%r8,1),%r10d
sub %esi,%r10d
mov %edi,%eax
sub %esi,%eax
cmp %edx,%r9d
jge 2a <func1+0x2a>
mov %edx,%eax
imul %esi,%eax
add %r8d,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
add %r10d,%r9d
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a1 + a4;
    if (a1 < a5)
    {
        v7 = a5 * a3;
    }
    else
    {
        v7 = a3 + a5 - a2;
    }
    if (v6 < a3)
    {
        v8 = a3 * a2 + a5;
    }
    else
    {
        v8 = a1 - a2;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        v9 += a1 + a3 * a3;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 5
3 5
4 7
5 7
6 7
7 11
8 11
9 19
10 19
11 13
12 13
13 15
14 15
15 15
16 26
17 26
18 26
19 26
20 26
21 26
22 26
23 27
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %r8d,%esi
add %esi,%ecx
imul %r8d,%edx
lea 0x1(%rcx,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a5 * a3;
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        if (v7 < a1)
        {
            v7 += a5 - a1 + a5;
        }
        else
        {
            v7 += a1 + a1 + a4;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 4
6 17
7 18
<<<sep_out_sample>>>
cmp %edx,%ecx
jge 10 <func1+0x10>
lea (%r8,%rdi,1),%r9d
sub %esi,%r9d
add %edx,%r9d
jmp 19 <func1+0x19>
mov %edx,%r9d
sub %ecx,%r9d
sub %edi,%r9d
test %edi,%edi
jle 28 <func1+0x28>
mov %edx,%eax
imul %esi,%eax
add %edi,%eax
add %esi,%eax
jmp 2a <func1+0x2a>
mov %esi,%eax
add %edi,%edx
add %esi,%edx
add %edx,%r8d
add %r8d,%ecx
sub %esi,%ecx
add %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a5 - (a2 + a5);
    if (a4 < a3)
    {
        v7 = a5 + a1 - a2 + a3;
    }
    else
    {
        v7 = a3 - a4 - a1;
    }
    if (v8 < a1)
    {
        v8 = (a1 + a3 * a2) + a2;
    }
    else
    {
        v8 = a2 + a1 - a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 5
2 5
3 7
4 7
5 7
6 7
7 11
8 11
9 11
10 13
11 13
12 15
13 15
14 15
15 15
16 15
17 19
18 21
19 21
20 21
21 21
22 21
23 21
24 21
25 22
<<<sep_out_sample>>>
lea (%r8,%rcx,1),%r11d
test %r8d,%r8d
jle 11 <func1+0x11>
mov %edx,%r10d
sub %esi,%r10d
jmp 1e <func1+0x1e>
mov %edx,%r10d
sub %r8d,%r10d
imul %ecx,%r10d
sub %esi,%r10d
mov %esi,%r9d
sub %edx,%r9d
sub %r8d,%r9d
cmp %r8d,%esi
jge 39 <func1+0x39>
mov %ecx,%r9d
imul %ecx,%r9d
sub %edi,%r9d
sub %edx,%r9d
add %r9d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %r11d,%eax
add %r10d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a3 * a3 + a2;
    }
    v8 = a5 + a4;
    if (v6 < a5)
    {
        v9 = a3 - a2;
    }
    else
    {
        v9 = (a3 - a5) * a4 - a2;
    }
    if (a2 < a5)
    {
        v10 = a4 * a4 - a1 - a3;
    }
    else
    {
        v10 = (a2 - a3) - a5;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 10
3 10
4 12
5 12
6 12
7 16
8 16
9 16
10 16
11 24
12 24
13 24
14 18
15 18
16 20
17 20
18 20
19 20
20 26
21 26
22 26
23 26
24 26
25 26
26 26
27 27
<<<sep_out_sample>>>
push %rbx
test %r8d,%r8d
jle f <func1+0xf>
mov %edx,%r11d
imul %r8d,%r11d
jmp 1a <func1+0x1a>
lea 0x1(%rdi),%r11d
imul %edx,%r11d
add %ecx,%r11d
cmp %edi,%r8d
jle 2f <func1+0x2f>
mov %ecx,%r10d
imul %esi,%r10d
imul %edi,%r10d
add %ecx,%r10d
jmp 3c <func1+0x3c>
mov %esi,%r10d
imul %ecx,%r10d
add %edx,%r10d
add %esi,%r10d
cmp %esi,%ecx
jle 52 <func1+0x52>
mov %edx,%r9d
imul %ecx,%r9d
mov %esi,%ebx
imul %r8d,%ebx
sub %ebx,%r9d
jmp 5b <func1+0x5b>
mov %ecx,%eax
sub %r8d,%eax
lea (%rax,%rcx,2),%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (v6 < a5)
    {
        v6 = a3 * a5;
    }
    else
    {
        v6 = a3 + a3 * a1 + a4;
    }
    if (a1 < a5)
    {
        v7 = a4 * a2 * a1 + a4;
    }
    else
    {
        v7 = (a3 + a2 * a4) + a2;
    }
    if (a2 < a4)
    {
        v8 = a3 * a4 - (a2 * a5);
    }
    else
    {
        v8 = a4 + a4 + (a4 - a5);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 2
2 4
3 4
4 6
5 6
6 6
7 10
8 10
9 10
10 12
11 12
12 14
13 14
14 14
15 14
16 14
17 18
18 18
19 18
20 18
21 20
22 20
23 22
24 22
25 22
26 22
27 22
28 22
29 26
30 26
31 26
32 28
33 28
34 28
35 28
36 28
37 28
38 28
39 29
40 29
<<<sep_out_sample>>>
cmp %ecx,%edx
jge 11 <func1+0x11>
lea -0x1(%r8),%eax
imul %esi,%eax
imul %r8d,%eax
jmp 1b <func1+0x1b>
mov %edi,%eax
imul %edx,%eax
sub %esi,%eax
imul %edx,%eax
lea 0x1(%rax,%rdi,1),%eax
add %eax,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a1 * a3 + a1;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += (a5 + a4) * a1;
    }
    if (a3 < a4)
    {
        v10 = (a2 * a5 - a2) * a5;
    }
    else
    {
        v10 = (a1 * a3 - a2) * a3;
    }
    v11 = 0;
    for (v12 = 0; v12++; v12<a1)
    {
        v11 += a3 * a3 * a3;
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 14
2 14
3 16
4 16
5 16
6 16
7 20
8 20
9 20
10 20
11 27
12 27
13 27
14 27
15 27
16 28
<<<sep_out_sample>>>
cmp %ecx,%edx
jge f <func1+0xf>
lea (%rdi,%rdx,1),%eax
imul %edi,%eax
imul %ecx,%eax
jmp 18 <func1+0x18>
mov %esi,%eax
sub %edi,%eax
add %r8d,%eax
sub %edi,%eax
add %edi,%edx
add %esi,%edx
add %edx,%r8d
add %r8d,%ecx
add %ecx,%eax
sub %esi,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a3 < a4)
    {
        v6 = a1 * (a1 + a3) * a4;
    }
    else
    {
        v6 = a5 + (a2 - a1) - a1;
    }
    v7 = a5 - ((a5 + a2) - a1);
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 10
11 13
12 13
13 13
14 13
15 13
16 12
17 13
18 14
<<<sep_out_sample>>>
mov $0x0,%r9d
mov %ecx,%eax
imul %edx,%eax
cmp %r8d,%edi
cmovl %eax,%r9d
add %edi,%edx
add %esi,%edx
add %r8d,%edx
add %edx,%ecx
add %ecx,%r9d
imul %esi,%r8d
lea (%r9,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a1 < a5)
    {
        v6 = a4 * a3;
    }
    else
    {
        v6 = a3 - a3;
    }
    v7 = a5 * a2;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 10
2 6
3 6
4 6
5 6
6 13
7 13
8 13
9 13
10 13
11 12
12 13
13 14
<<<sep_out_sample>>>
cmp %ecx,%r8d
jle 13 <func1+0x13>
mov %edi,%eax
imul %edx,%eax
add $0x1,%eax
imul %r8d,%eax
jmp 1b <func1+0x1b>
lea (%rcx,%rdx,1),%eax
imul %edx,%eax
add %edi,%eax
lea 0x1(%rax,%rdi,1),%eax
add %eax,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += (a2 * a2) - a5;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        if (a4 < a3)
        {
            v8 += a1 - a3 - a5;
        }
        else
        {
            v8 += a2 * a3 - a2;
        }
    }
    if (a4 < a5)
    {
        v10 = a5 + (a1 * a3 * a5);
    }
    else
    {
        v10 = (a4 + a3) * a3 + a1;
    }
    v11 = 0;
    for (v12 = 0; v12++; v12<a4)
    {
        if (v10 < a1)
        {
            v11 += a3 * a4 - a1;
        }
        else
        {
            v11 += a2 - a4 + a2;
        }
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 23
4 23
5 23
6 23
7 23
8 27
9 27
10 27
11 41
12 41
13 41
14 41
15 41
16 42
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %r8d,%esi
add %esi,%ecx
imul %r8d,%r8d
lea 0x1(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a5 * a5;
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += a1 * a2 - a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 4
6 10
7 11
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%eax
imul %ecx,%edx
sub %edx,%edi
imul %r8d,%edi
add %edi,%eax
imul %r8d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a3 - a2;
    }
    v8 = (a1 - a3 * a4) * a5;
    v9 = a4 * a5;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 11
5 9
6 9
7 9
8 11
9 10
10 11
11 12
<<<sep_out_sample>>>
cmp %r8d,%esi
jge e <func1+0xe>
mov %esi,%r9d
imul %esi,%r9d
jmp 1a <func1+0x1a>
mov %edx,%r9d
sub %ecx,%r9d
add %esi,%r9d
add %r8d,%r9d
mov %edi,%eax
sub %r8d,%eax
test %edi,%edi
jle 2d <func1+0x2d>
lea 0x1(%rcx),%eax
imul %edx,%eax
imul %r8d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a2 < a5)
    {
        v6 = a2 * a2;
    }
    else
    {
        v6 = a2 + (a3 - a4) + a5;
    }
    if (v7 < a1)
    {
        v7 = (a3 + a4 * a3) * a5;
    }
    else
    {
        v7 = a1 - a5;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 10
10 18
11 18
12 12
13 12
14 14
15 14
16 14
17 20
18 20
19 20
20 20
21 20
22 20
23 21
<<<sep_out_sample>>>
lea -0x1(%rdx),%r9d
imul %ecx,%r9d
imul %edx,%r9d
cmp %r8d,%ecx
jle 1a <func1+0x1a>
mov %edx,%eax
sub %esi,%eax
add %r8d,%eax
jmp 20 <func1+0x20>
lea (%rcx,%rdx,2),%eax
sub %r8d,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = a3 * ((a3 * a4) - a4);
    if (a5 < a4)
    {
        v7 = a3 - a2 + a5;
    }
    else
    {
        v7 = (a3 - a5) + a4 + a3;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        if (a1 < a3)
        {
            v8 += a1 + (a1 + a4);
        }
        else
        {
            v8 += a5 - (a4 * a3);
        }
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a4)
    {
        v10 += a4 - a3;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 5
5 5
6 7
7 7
8 7
9 7
10 11
11 11
12 30
13 30
14 30
15 30
16 30
17 30
18 31
<<<sep_out_sample>>>
cmp %edi,%r8d
jge 15 <func1+0x15>
mov %ecx,%r10d
imul %r8d,%r10d
imul %esi,%r10d
add %edx,%r10d
jmp 22 <func1+0x22>
mov $0x1,%r10d
sub %r8d,%r10d
imul %esi,%r10d
cmp %ecx,%edi
jle 2f <func1+0x2f>
lea (%rcx,%r8,2),%r9d
sub %edi,%r9d
jmp 3c <func1+0x3c>
mov %r8d,%r9d
sub %esi,%r9d
sub %edx,%r9d
imul %edx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a5 < a1)
    {
        v6 = ((a4 * a5) * a2) + a3;
    }
    else
    {
        v6 = a2 - a5 * a2;
    }
    if (a4 < a1)
    {
        v7 = ((a4 + a5) + a5) - a1;
    }
    else
    {
        v7 = (a5 - a2 - a3) * a3;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 12
12 12
13 14
14 14
15 14
16 18
17 18
18 18
19 18
20 20
21 20
22 20
23 20
24 20
25 20
26 21
<<<sep_out_sample>>>
cmp %edi,%edx
jge 10 <func1+0x10>
mov %esi,%eax
imul %esi,%eax
imul %ecx,%eax
sub %edi,%eax
jmp 19 <func1+0x19>
mov %ecx,%eax
imul %ecx,%eax
add %edi,%eax
add %edx,%eax
add %edx,%edi
add %edi,%esi
add %r8d,%esi
add %esi,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a3 < a1)
    {
        v6 = a2 * a2 * a4 - a1;
    }
    else
    {
        v6 = (a4 * a4 + a1) + a3;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a3 + a3 * a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 17
13 17
14 17
15 17
16 17
17 18
<<<sep_out_sample>>>
mov %ecx,%r9d
sub %esi,%r9d
test %edi,%edi
jle 18 <func1+0x18>
mov $0x1,%eax
sub %edx,%eax
imul %ecx,%eax
add %edi,%eax
jmp 1d <func1+0x1d>
mov %edi,%eax
imul %edi,%eax
add %edx,%edi
add %edi,%esi
add %r8d,%esi
add %esi,%ecx
sub %edx,%ecx
add %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = (a2 - a3) - a2;
    if (a4 < a4)
    {
        v7 = a1 + a3 - a1 - a5;
    }
    else
    {
        v7 = a4 - a2;
    }
    if (v8 < a1)
    {
        v8 = a4 - a3 * a4 + a1;
    }
    else
    {
        v8 = a1 * a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 11
2 11
3 13
4 13
5 15
6 15
7 15
8 15
9 15
10 19
11 19
12 21
13 21
14 21
15 21
16 21
17 21
18 21
19 22
<<<sep_out_sample>>>
lea (%rcx,%r8,2),%eax
imul %edx,%eax
cmp %eax,%r8d
jle 1a <func1+0x1a>
mov %ecx,%r9d
sub %edi,%r9d
sub %r8d,%r9d
sub %esi,%r9d
jmp 21 <func1+0x21>
mov %edx,%r9d
imul %r8d,%r9d
add %r9d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a3 + a4 + a2;
    }
    v8 = a3 - (a3 + a3 - a3);
    v9 = (a5 + a4 + a5) * a3;
    if (v9 < a5)
    {
        v10 = (a4 - a1 - a5) - a2;
    }
    else
    {
        v10 = a3 * a5;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 11
4 11
5 13
6 13
7 13
8 13
9 13
10 17
11 17
12 19
13 19
14 19
15 19
16 19
17 19
18 20
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a5 + a2 - a4;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += (a4 + a2) * a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 14
2 14
3 14
4 14
5 15
<<<sep_out_sample>>>
lea (%rcx,%rcx,1),%eax
imul %ecx,%eax
add %esi,%eax
add %eax,%edi
add %edx,%edi
add %esi,%edi
add %edi,%r8d
lea (%r8,%rcx,1),%edi
sub %edx,%ecx
lea 0x1(%rdi,%rcx,1),%eax
imul %edx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a4 - (a4 - a4 + a3);
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += a1 + a5 * a5;
    }
    v9 = a2 * a3;
    v10 = (a4 + a4) * a4 + a2;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 12
5 12
6 12
7 12
8 12
9 4
10 12
11 10
12 12
13 13
<<<sep_out_sample>>>
lea (%rdx,%r8,1),%r9d
mov %edx,%eax
imul %edx,%eax
cmp %r8d,%ecx
cmovl %eax,%r9d
cmp %esi,%edx
jle 1d <func1+0x1d>
lea (%rdx,%r8,2),%r10d
sub %ecx,%r10d
jmp 2c <func1+0x2c>
mov %edi,%r10d
imul %edi,%r10d
add $0x1,%r10d
imul %edi,%r10d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
lea (%r9,%r10,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a4 < a5)
    {
        v6 = a3 * a3 + a2 - a2;
    }
    else
    {
        v6 = a3 + a5;
    }
    if (a2 < a3)
    {
        v7 = ((a3 + a5) - a4) + a5;
    }
    else
    {
        v7 = a1 + (a1 * a1 * a1);
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 10
2 6
3 6
4 6
5 6
6 12
7 12
8 14
9 14
10 14
11 18
12 18
13 18
14 18
15 20
16 20
17 20
18 20
19 20
20 20
21 21
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
mov %ecx,%eax
imul %ecx,%eax
imul %edx,%eax
lea (%r8,%rcx,2),%esi
lea (%rsi,%rax,1),%eax
sub %ecx,%edx
lea 0x1(%rax,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = a4 + a3 * (a4 * a4);
    v7 = a3 - a4;
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        if (v9 < a5)
        {
            v8 += a4 - a1 + a4;
        }
        else
        {
            v8 += a2 * (a2 - a4);
        }
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a4)
    {
        v10 += a5 + a3 - a3;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 23
2 23
3 23
4 4
5 4
6 4
7 4
8 23
9 5
10 23
11 24
<<<sep_out_sample>>>
mov %edx,%eax
sub %edi,%eax
imul %edx,%eax
lea 0x1(%rsi,%rax,1),%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += (a2 + a2) * a2;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        if (v6 < a3)
        {
            v8 += a4 - a3;
        }
        else
        {
            v8 += (a4 - a1) + a2;
        }
    }
    if (a4 < a4)
    {
        v10 = a1 + a5 - (a2 - a2);
    }
    else
    {
        v10 = a3 * (a3 - a1) + a2;
    }
    v11 = 0;
    for (v12 = 0; v12++; v12<a1)
    {
        v11 += a5 * a5 - a3;
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 27
2 27
3 27
4 34
5 34
6 34
7 34
8 34
9 34
10 35
<<<sep_out_sample>>>
lea (%r8,%rdi,1),%eax
lea (%r8,%rdx,1),%r9d
cmp %esi,%edi
cmovl %eax,%r9d
add %edi,%edx
add %esi,%edx
add %edx,%r8d
add %r8d,%ecx
add %r9d,%ecx
mov $0x1,%eax
sub %edi,%eax
imul %eax,%esi
sub %edi,%esi
lea (%rcx,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a1 < a2)
    {
        v6 = a5 + a1;
    }
    else
    {
        v6 = a5 + a3;
    }
    v7 = a2 - (a1 * a2) - a1;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 13
6 13
7 13
8 13
9 13
10 12
11 12
12 12
13 12
14 13
15 14
<<<sep_out_sample>>>
mov %ecx,%eax
sub %esi,%eax
mov %edi,%r9d
sub %esi,%r9d
cmp %ecx,%edx
cmovge %r9d,%eax
add %edi,%edx
add %edx,%esi
add %r8d,%esi
add %esi,%ecx
lea 0x1(%rax,%rcx,1),%eax
add %r8d,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a3 < a4)
    {
        v6 = a4 - a2;
    }
    else
    {
        v6 = a1 - a2;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += a1 * a4 + a1;
    }
    v9 = a1 + (a2 + a5 - a2);
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 6
6 6
7 18
8 18
9 18
10 18
11 18
12 17
13 18
14 19
<<<sep_out_sample>>>
cmp %ecx,%edx
jge c <func1+0xc>
lea 0x1(%rcx),%eax
imul %edi,%eax
jmp 1d <func1+0x1d>
mov %esi,%eax
imul %r8d,%eax
mov %edx,%r9d
sub %eax,%r9d
mov %r9d,%eax
add %edx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a3 < a4)
    {
        v6 = a1 + a4 * a1;
    }
    else
    {
        v6 = a3 - (a2 * a5) + a3;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += a5 * a5 + a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 10
10 10
11 10
12 17
13 17
14 17
15 17
16 17
17 18
<<<sep_out_sample>>>
mov %esi,%r9d
sub %r8d,%r9d
cmp %ecx,%r8d
jge 13 <func1+0x13>
lea (%rdx,%rdi,1),%r9d
imul %r8d,%r9d
cmp %r8d,%r9d
jge 27 <func1+0x27>
mov %edx,%r10d
sub %esi,%r10d
sub %edi,%r10d
imul %r8d,%r10d
jmp 31 <func1+0x31>
lea (%r8,%rcx,1),%r10d
sub %edi,%r10d
add %r8d,%r10d
mov $0x0,%eax
test %r8d,%r8d
jle 49 <func1+0x49>
mov %edi,%r11d
imul %edx,%r11d
mov %esi,%eax
sub %ecx,%eax
add %r11d,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
add %r10d,%r9d
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a5 < a4)
    {
        v6 = a5 * (a3 + a1);
    }
    else
    {
        v6 = a2 - a5;
    }
    if (v6 < a5)
    {
        v7 = a5 * (a3 - a2 - a1);
    }
    else
    {
        v7 = a5 + a4 - a1 + a5;
    }
    if (v8 < a5)
    {
        v8 = a1 * a3 - (a4 - a2);
    }
    else
    {
        v8 = a4 - a4;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        v9 += a2 - a5 * a2;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 4
4 4
5 6
6 6
7 12
8 12
9 14
10 14
11 14
12 14
13 14
14 18
15 18
16 18
17 26
18 20
19 20
20 22
21 22
22 22
23 22
24 22
25 33
26 33
27 33
28 33
29 33
30 33
31 33
32 34
<<<sep_out_sample>>>
mov %edi,%r9d
sub %esi,%r9d
sub %esi,%r9d
add %ecx,%r9d
cmp %r9d,%r8d
jle 1d <func1+0x1d>
mov %edi,%eax
imul %ecx,%eax
imul %esi,%eax
add %edx,%eax
jmp 25 <func1+0x25>
mov %esi,%eax
sub %edi,%eax
add %esi,%eax
sub %ecx,%eax
lea (%rsi,%rdi,1),%r10d
cmp %edx,%esi
jle 35 <func1+0x35>
lea (%rdi,%rcx,2),%r10d
lea (%r10,%rsi,1),%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%r9d
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (v7 < a2)
        {
            v6 += a1 - a4;
        }
        else
        {
            v6 += a1 - a5 - a3;
        }
    }
    v8 = (a1 - a2) - a2 + a4;
    if (v8 < a5)
    {
        v9 = a3 + ((a1 * a4) * a2);
    }
    else
    {
        v9 = a2 + (a2 - a1) - a4;
    }
    if (a3 < a2)
    {
        v10 = (a4 + a2) + a1 + a4;
    }
    else
    {
        v10 = a2 + a1;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 16
4 16
5 17
6 17
7 19
8 19
9 19
10 19
11 19
12 23
13 23
14 23
15 23
16 31
17 25
18 25
19 27
20 27
21 33
22 33
23 33
24 33
25 33
26 33
27 33
28 34
<<<sep_out_sample>>>
mov $0x1,%eax
sub %esi,%eax
imul %ecx,%eax
add %edi,%eax
cmp %r8d,%eax
jge 20 <func1+0x20>
mov %ecx,%r9d
imul %edi,%r9d
sub %esi,%r9d
sub %edi,%r9d
jmp 27 <func1+0x27>
mov %ecx,%r9d
imul %ecx,%r9d
add %edx,%edi
add %esi,%edi
add %r8d,%edi
add %ecx,%edi
add %edi,%eax
add %r9d,%eax
sub %ecx,%esi
sub %r8d,%esi
imul %esi,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a4 - a2 * a4 + a1;
    if (v6 < a5)
    {
        v7 = (a4 * a1 - a2) - a1;
    }
    else
    {
        v7 = ((a4 + a3) - a3) * a4;
    }
    v8 = ((a2 - a4) - a5) * a3;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 5
6 5
7 7
8 7
9 7
10 7
11 7
12 11
13 11
14 14
15 14
16 14
17 14
18 14
19 14
20 13
21 13
22 13
23 14
24 15
<<<sep_out_sample>>>
push %rbx
mov %esi,%r11d
sub %ecx,%r11d
test %edx,%edx
jle 1b <func1+0x1b>
mov $0x1,%r11d
sub %edi,%r11d
imul %edi,%r11d
add %esi,%r11d
cmp %ecx,%edx
jge 27 <func1+0x27>
mov %edx,%r10d
sub %edi,%r10d
jmp 2e <func1+0x2e>
mov %edi,%r10d
imul %edx,%r10d
lea (%rsi,%rcx,1),%r9d
cmp %r8d,%r10d
jge 40 <func1+0x40>
mov %esi,%r9d
neg %r9d
sub %ecx,%r9d
lea (%rdi,%rsi,1),%ebx
cmp %ecx,%r9d
mov $0x0,%eax
cmovl %eax,%ebx
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r11d
add %r11d,%r10d
add %r10d,%r9d
lea (%r9,%rbx,1),%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (v6 < a3)
    {
        v6 = a1 - a1 * a1 + a2;
    }
    else
    {
        v6 = a2 - a4;
    }
    if (a3 < a4)
    {
        v7 = a3 - a1;
    }
    else
    {
        v7 = (a1 * a3) - (a1 - a1);
    }
    if (v7 < a5)
    {
        v8 = a4 - a4 - a2 - a4;
    }
    else
    {
        v8 = a2 + a4;
    }
    if (v8 < a4)
    {
        v9 = a3 - a3;
    }
    else
    {
        v9 = a1 + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 10
3 10
4 4
5 4
6 6
7 6
8 6
9 6
10 12
11 12
12 14
13 14
14 14
15 18
16 18
17 26
18 20
19 20
20 22
21 22
22 22
23 34
24 34
25 34
26 34
27 36
28 36
29 36
30 36
31 36
32 36
33 36
34 36
35 37
36 37
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %r8d,%esi
lea (%r8,%rcx,2),%eax
lea 0x1(%rsi,%rax,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a4 + a5;
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        if (v8 < a2)
        {
            v7 += a1 + (a5 + a2);
        }
        else
        {
            v7 += a4 * (a4 - a1);
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 4
5 17
6 18
<<<sep_out_sample>>>
mov %r8d,%r9d
imul %edi,%r9d
cmp %esi,%r9d
jge 15 <func1+0x15>
lea (%rcx,%rdx,1),%r10d
sub %edi,%r10d
jmp 22 <func1+0x22>
mov %edi,%r10d
sub %esi,%r10d
lea (%r8,%rcx,1),%r11d
sub %r11d,%r10d
lea (%r8,%rcx,1),%eax
cmp %edx,%r9d
jge 30 <func1+0x30>
lea (%rdi,%rsi,2),%eax
sub %ecx,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
add %r10d,%r9d
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a3 < a3)
    {
        v6 = a3 * (a5 * a2 * a2);
    }
    else
    {
        v6 = a5 * a1;
    }
    if (v6 < a2)
    {
        v7 = (a4 + a3) - a1;
    }
    else
    {
        v7 = (a1 - a2) - (a5 + a4);
    }
    if (v6 < a3)
    {
        v8 = (a1 + a2 + a2) - a4;
    }
    else
    {
        v8 = ((a5 + a4) - a5) + a5;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a1)
    {
        v9 += a3 + a1;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 12
4 12
5 14
6 14
7 14
8 18
9 18
10 18
11 18
12 26
13 20
14 20
15 22
16 22
17 33
18 33
19 33
20 33
21 33
22 33
23 33
24 34
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
imul %r8d,%edi
add %edi,%eax
imul %ecx,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a5 * a1;
    v7 = a3 * a4;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 6
7 5
8 6
9 7
<<<sep_out_sample>>>
test %r8d,%r8d
jle c <func1+0xc>
lea (%rsi,%rcx,2),%eax
add %ecx,%eax
jmp 17 <func1+0x17>
mov %edx,%eax
imul %ecx,%eax
add %r8d,%eax
imul %edx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a3 - a4;
    }
    if (v6 < a5)
    {
        v8 = (a4 + a2) + a4 + a4;
    }
    else
    {
        v8 = (a3 * a4 + a5) * a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 15
7 15
8 15
9 15
10 17
11 17
12 17
13 17
14 17
15 18
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea (%r8,%rcx,1),%esi
lea 0x1(%rsi,%rcx,2),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = (a4 - a2) + a2 + a4;
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += a5 + a2 - a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 10
6 11
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
add %r8d,%ecx
sub %edi,%esi
imul %edx,%edi
sub %edi,%esi
lea 0x1(%rcx,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a2 - a1 - a1 * a3;
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += (a3 * a4) - a1;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        if (v9 < a1)
        {
            v9 += (a2 - a1) - a5;
        }
        else
        {
            v9 += (a1 - a5) + a1;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 22
4 22
5 4
6 4
7 4
8 22
9 23
<<<sep_out_sample>>>
lea (%r8,%rcx,1),%r10d
imul %r8d,%r10d
mov %r8d,%r9d
sub %edx,%r9d
cmp %esi,%edi
jl 1f <func1+0x1f>
mov %r8d,%r9d
imul %edx,%r9d
add %ecx,%r9d
sub %r8d,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
imul %esi,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = (a5 * a5) + a5 * a4;
    if (a1 < a2)
    {
        v7 = (a4 - a4) - a3 + a5;
    }
    else
    {
        v7 = a4 + a5 * a3 - a5;
    }
    v8 = ((a4 - a4) + a2) * a2;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 7
4 7
5 5
6 5
7 11
8 11
9 11
10 11
11 14
12 14
13 14
14 14
15 14
16 14
17 13
18 14
19 15
<<<sep_out_sample>>>
mov %r8d,%r9d
sub %edx,%r9d
mov %r9d,%eax
mov %edx,%r10d
imul %edi,%r10d
cmp %ecx,%r9d
cmovl %r10d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a5 + a5 - a3 - a5;
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        if (v7 < a1)
        {
            v7 += (a2 + a5) + a1;
        }
        else
        {
            v7 += (a2 - a4) - a1;
        }
    }
    if (v6 < a4)
    {
        v9 = a3 * a1;
    }
    else
    {
        v9 = a2 + (a5 - a2 - a3);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 23
4 19
5 19
6 19
7 19
8 25
9 25
10 25
11 25
12 25
13 25
14 26
<<<sep_out_sample>>>
mov $0x0,%eax
cmp %edi,%edx
jge 15 <func1+0x15>
mov %r8d,%eax
imul %r8d,%eax
sub %edx,%eax
add %r8d,%eax
lea 0x1(%rdi,%rdx,1),%edi
add %esi,%edi
add %edi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
imul %esi,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    if (a3 < a1)
    {
        v6 = ((a5 * a5) - a3) + a5;
    }
    else
    {
        v6 = a5 * (a1 - a1) * a3;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        if (a4 < a4)
        {
            v7 += a1 + a5;
        }
        else
        {
            v7 += a2 + a2 + a3;
        }
    }
    v9 = a2 * a3;
    v10 = 0;
    for (v11 = 0; v11++; v11<a1)
    {
        v10 += a2 * a3 * a1;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 6
7 6
8 30
9 30
10 30
11 30
12 30
13 24
14 30
15 31
<<<sep_out_sample>>>
mov %edi,%r9d
sub %r8d,%r9d
test %ecx,%ecx
jle f <func1+0xf>
imul %edx,%edx
jmp 17 <func1+0x17>
imul %ecx,%edx
add %esi,%edx
imul %esi,%edx
mov %ecx,%eax
imul %esi,%eax
imul %esi,%eax
add %eax,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%eax
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a1 - a5 + a1 - a1;
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += a5 - (a1 - a2);
    }
    if (v9 < a4)
    {
        v9 = a3 * a3;
    }
    else
    {
        v9 = a2 * (a2 + a3 * a4);
    }
    if (a4 < a4)
    {
        v10 = a1 - a2 + a5;
    }
    else
    {
        v10 = a2 * (a4 * a2) - a3;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 10
4 10
5 12
6 12
7 16
8 16
9 16
10 24
11 24
12 24
13 26
14 26
15 26
16 26
17 26
18 26
19 27
<<<sep_out_sample>>>
mov %r8d,%eax
imul %ecx,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a4 * a1;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += a1 + a1 + a5;
    }
    if (a5 < a5)
    {
        v10 = a3 - a1 - a1 - a5;
    }
    else
    {
        v10 = a5 * a4;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 20
2 20
3 22
4 22
5 22
6 22
7 22
8 23
<<<sep_out_sample>>>
cmp %r8d,%edx
jge 16 <func1+0x16>
mov %r8d,%r9d
sub %ecx,%r9d
mov %r8d,%eax
imul %esi,%eax
add %r9d,%eax
jmp 22 <func1+0x22>
mov %esi,%eax
imul %r8d,%eax
add $0x1,%eax
imul %edx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
imul %edi,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a3 < a5)
    {
        v6 = (a5 - a4) + (a5 * a2);
    }
    else
    {
        v6 = a3 + a2 * a5 * a3;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += a1 * (a5 - a2);
    }
    v9 = a1 * a1;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 6
9 10
10 10
11 10
12 10
13 18
14 18
15 18
16 18
17 18
18 17
19 18
20 19
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += (a4 + a5) - a4;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += (a4 - a2) + a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 14
2 14
3 14
4 14
5 15
<<<sep_out_sample>>>
add %edx,%edi
add %esi,%edi
add %edi,%r8d
add %r8d,%ecx
add %edx,%esi
lea 0x1(%rcx,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a3 + a2;
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += a1 + a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 4
6 10
7 11
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%r10d
lea (%r10,%rdx,1),%r11d
add %r8d,%r11d
lea (%rcx,%rsi,1),%r9d
add %edi,%r9d
cmp %r9d,%r8d
jle 20 <func1+0x20>
add %r8d,%edx
add %edx,%edi
add %ecx,%edi
jmp 26 <func1+0x26>
add %edi,%edi
sub %edx,%edi
sub %esi,%edi
add %r10d,%esi
add %esi,%r8d
add %r8d,%ecx
add %r11d,%ecx
add %ecx,%r9d
lea (%r9,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a5 + ((a1 + a3) + a3);
    v7 = a4 + a2 + a1;
    if (v7 < a5)
    {
        v8 = (a5 + a3) + a1 + a4;
    }
    else
    {
        v8 = (a1 + a1) - a3 - a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 5
5 5
6 6
7 6
8 8
9 8
10 8
11 8
12 12
13 12
14 12
15 14
16 14
17 14
18 14
19 14
20 14
21 15
<<<sep_out_sample>>>
test %esi,%esi
jle 14 <func1+0x14>
mov %esi,%r9d
imul %r8d,%r9d
imul %esi,%r9d
add %ecx,%r9d
jmp 1b <func1+0x1b>
mov %edx,%r9d
imul %esi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
sub %edi,%esi
add %esi,%edx
imul %edx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (v6 < a2)
    {
        v6 = a2 * a5 * a2 + a4;
    }
    else
    {
        v6 = a3 * a2;
    }
    if (a4 < a4)
    {
        v7 = (a3 - a2) - a5 * a4;
    }
    else
    {
        v7 = (a2 - a1 + a3) * a5;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 20
11 20
12 20
13 20
14 20
15 18
16 18
17 18
18 20
19 21
<<<sep_out_sample>>>
lea (%r8,%rdx,1),%r9d
lea (%rdi,%rdi,1),%r10d
cmp %ecx,%esi
jge 1c <func1+0x1c>
mov %r8d,%r10d
imul %edi,%r10d
mov %edx,%eax
imul %esi,%eax
imul %eax,%r10d
cmp %ecx,%r9d
jge 2a <func1+0x2a>
mov %ecx,%r11d
imul %ecx,%r11d
jmp 31 <func1+0x31>
mov %r8d,%r11d
imul %edi,%r11d
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
add %r9d,%r10d
lea (%r10,%r11,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a5 + a3;
    if (a2 < a4)
    {
        v7 = a5 * a1 * (a3 * a2);
    }
    else
    {
        v7 = a1 + a1;
    }
    if (v6 < a4)
    {
        v8 = a4 * a4;
    }
    else
    {
        v8 = a5 * a1;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        v9 += (a3 + a1) - a2;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 11
3 5
4 5
5 7
6 7
7 7
8 7
9 7
10 13
11 13
12 15
13 15
14 15
15 19
16 19
17 26
18 26
19 26
20 26
21 26
22 26
23 26
24 27
<<<sep_out_sample>>>
mov %edx,%eax
sub %esi,%eax
mov %edi,%r9d
sub %esi,%r9d
mov %ecx,%r11d
imul %ecx,%r11d
lea (%r9,%rax,1),%r9d
lea (%rdx,%rcx,1),%eax
lea (%r8,%r8,1),%r10d
cmp %r9d,%esi
cmovg %eax,%r10d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
add %r11d,%eax
add %r10d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a1 - a2 + (a3 - a2);
    if (a4 < a4)
    {
        v7 = (a4 * a3) - a5 + a1;
    }
    else
    {
        v7 = a4 * a4;
    }
    if (v6 < a2)
    {
        v8 = a3 + a4;
    }
    else
    {
        v8 = a5 - (a1 - a1) + a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 11
6 11
7 13
8 15
9 15
10 15
11 15
12 21
13 21
14 21
15 21
16 21
17 21
18 21
19 22
<<<sep_out_sample>>>
cmp %ecx,%r8d
jge e <func1+0xe>
lea (%rsi,%rcx,2),%r9d
sub %edx,%r9d
jmp 1b <func1+0x1b>
mov %ecx,%r9d
imul %esi,%r9d
add %edi,%r9d
add %ecx,%r9d
add %edi,%edx
lea (%rsi,%rdx,1),%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
add %eax,%edx
lea (%rcx,%rcx,1),%eax
sub %edi,%eax
imul %eax,%ecx
lea (%rdx,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a5 < a4)
    {
        v6 = a2 + a4 - (a3 - a4);
    }
    else
    {
        v6 = (a4 * a2) + a1 + a4;
    }
    v7 = a1 + a3;
    v8 = ((a4 + a4) - a1) * a4;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 10
10 12
11 14
12 14
13 14
14 14
15 14
16 13
17 13
18 13
19 14
20 15
<<<sep_out_sample>>>
mov %r8d,%eax
sub %ecx,%eax
cmp %r8d,%esi
jl 12 <func1+0x12>
mov %edi,%eax
sub %esi,%eax
sub %esi,%eax
add %edx,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %eax,%ecx
lea 0x1(%rdi,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    if (a2 < a5)
    {
        v6 = a5 - a4;
    }
    else
    {
        v6 = a3 - (a2 - a1 + a2);
    }
    if (a5 < a5)
    {
        v7 = (a4 + (a5 - a1)) * a4;
    }
    else
    {
        v7 = a1 - (a2 - a2);
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += a1 * a2;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a2)
    {
        v10 += a2 + a4 * a2;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 6
3 4
4 4
5 10
6 10
7 10
8 10
9 30
10 30
11 30
12 30
13 30
14 30
15 31
<<<sep_out_sample>>>
lea (%rdx,%rdi,1),%eax
mov %r8d,%r9d
sub %esi,%r9d
cmp %r8d,%esi
cmovl %eax,%r9d
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
add %ecx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a2 < a5)
    {
        v6 = a3 + a1;
    }
    else
    {
        v6 = a5 - (a2 - a5) - a5;
    }
    v7 = a1 + (a5 - a5 + a4);
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 6
6 13
7 13
8 13
9 13
10 12
11 13
12 14
<<<sep_out_sample>>>
mov %edi,%r9d
imul %esi,%r9d
mov %r9d,%eax
imul %edx,%eax
imul %r8d,%eax
cmp %ecx,%r8d
jle 22 <func1+0x22>
mov %edi,%r10d
sub %edx,%r10d
imul %r10d,%r9d
jmp 36 <func1+0x36>
mov %r8d,%r9d
imul %r8d,%r9d
imul %esi,%r9d
mov %r8d,%r11d
sub %r9d,%r11d
mov %r11d,%r9d
lea 0x1(%r9,%rdi,1),%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (v7 < a5)
        {
            v6 += (a4 - a1) - a5;
        }
        else
        {
            v6 += (a5 * a4) * a3;
        }
    }
    if (a4 < a4)
    {
        v8 = a2 * a4 - a3;
    }
    else
    {
        v8 = a1 * a2 * a3 * a5;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        v9 += (a3 * a1) - a1;
    }
    if (a4 < a5)
    {
        v11 = (a1 - a3) * (a1 * a2);
    }
    else
    {
        v11 = a5 - (a5 * a5) * a2;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 22
4 22
5 22
6 29
7 29
8 31
9 31
10 31
11 31
12 35
13 35
14 35
15 35
16 35
17 35
18 37
19 37
20 37
21 37
22 37
23 37
24 38
<<<sep_out_sample>>>
cmp %esi,%edi
jge 11 <func1+0x11>
lea 0x1(%rcx),%r9d
imul %esi,%r9d
sub %ecx,%r9d
jmp 20 <func1+0x20>
mov %esi,%r9d
imul %esi,%r9d
add $0x1,%r9d
imul %edx,%r9d
mov %r8d,%eax
imul %r8d,%eax
add %esi,%eax
sub %edx,%eax
lea (%r8,%rsi,1),%r10d
test %ecx,%ecx
cmovle %r10d,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a1 < a2)
    {
        v6 = (a2 * a4) + a2 - a4;
    }
    else
    {
        v6 = a3 + a2 * a2 * a3;
    }
    if (a1 < a1)
    {
        v7 = a5 * ((a3 - a4) - a3);
    }
    else
    {
        v7 = ((a5 * a5) + a2) - a3;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += a4 - a3;
    }
    if (v10 < a4)
    {
        v10 = a5 + (a1 - a1) + a2;
    }
    else
    {
        v10 = a2 + a5;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 10
11 18
12 18
13 18
14 18
15 27
16 27
17 27
18 33
19 33
20 33
21 33
22 33
23 33
24 33
25 34
<<<sep_out_sample>>>
mov %edi,%eax
sub %ecx,%eax
cmp %ecx,%edx
jge 13 <func1+0x13>
mov %esi,%eax
imul %edx,%eax
add $0x1,%eax
imul %ecx,%eax
add %edi,%edx
add %edx,%esi
add %r8d,%esi
add %esi,%ecx
add %ecx,%eax
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a3 < a4)
    {
        v6 = a4 + a2 * a3 * a4;
    }
    else
    {
        v6 = a1 - a4;
    }
    v7 = (a2 - a2) + a5;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 10
2 10
3 4
4 4
5 6
6 6
7 6
8 6
9 13
10 13
11 13
12 13
13 13
14 13
15 14
<<<sep_out_sample>>>
lea (%rdx,%rcx,1),%r10d
cmp %esi,%ecx
jge 18 <func1+0x18>
mov %r8d,%r9d
imul %r8d,%r9d
add %esi,%r9d
imul %edx,%r9d
jmp 26 <func1+0x26>
mov %esi,%r9d
imul %esi,%r9d
add %r8d,%r9d
imul %edi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a3 + a4;
    if (a4 < a2)
    {
        v7 = a3 * (a5 * a5 + a2);
    }
    else
    {
        v7 = a1 * ((a2 * a2) + a5);
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 5
3 5
4 7
5 7
6 7
7 7
8 7
9 11
10 11
11 11
12 11
13 13
14 13
15 13
16 13
17 13
18 13
19 14
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %edx,%r8d
lea (%rsi,%rcx,2),%eax
lea 0x1(%rax,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += (a3 - a5) + a2;
    }
    v8 = a2 + a4;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 9
5 10
6 11
<<<sep_out_sample>>>
mov %edi,%eax
sub %r8d,%eax
cmp $0x1,%ecx
jle 16 <func1+0x16>
mov %ecx,%eax
imul %edx,%eax
imul %edx,%eax
imul %r8d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (v6 < a3)
        {
            v6 += a5 + a2 - a3;
        }
        else
        {
            v6 += a1 + a2 * a4;
        }
    }
    if (v7 < a4)
    {
        v8 = a5 * ((a4 * a3) * a3);
    }
    else
    {
        v8 = a1 - a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 22
2 22
3 16
4 16
5 18
6 18
7 18
8 18
9 24
10 24
11 24
12 24
13 24
14 25
<<<sep_out_sample>>>
lea (%r8,%r8,1),%r11d
sub %edi,%r11d
imul %edi,%r11d
cmp %esi,%edi
jge 1e <func1+0x1e>
mov %r8d,%r9d
sub %edx,%r9d
add %ecx,%r9d
imul %edx,%r9d
jmp 27 <func1+0x27>
mov %esi,%eax
imul %edx,%eax
lea (%rax,%r8,2),%r9d
lea (%rcx,%rcx,1),%r10d
imul %esi,%r10d
add %edx,%r10d
cmp %esi,%r9d
jge 44 <func1+0x44>
mov %r8d,%eax
imul %esi,%eax
imul %esi,%eax
sub %ecx,%eax
jmp 4a <func1+0x4a>
lea (%rdx,%r8,2),%eax
sub %ecx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r11d,%ecx
add %ecx,%r9d
add %r10d,%r9d
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a1 * ((a5 + a5) - a1);
    if (a1 < a2)
    {
        v7 = ((a5 - a3) + a4) * a3;
    }
    else
    {
        v7 = ((a2 * a3) + a5) + a5;
    }
    v8 = a3 + ((a4 + a4) * a2);
    if (v7 < a2)
    {
        v9 = a5 * a2 * a2 - a4;
    }
    else
    {
        v9 = (a5 - a4 + a3) + a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 5
5 5
6 7
7 7
8 7
9 7
10 7
11 11
12 11
13 11
14 13
15 13
16 13
17 14
18 14
19 16
20 16
21 16
22 16
23 16
24 20
25 20
26 22
27 22
28 22
29 22
30 22
31 22
32 22
33 22
34 23
<<<sep_out_sample>>>
mov %r8d,%eax
sub %esi,%eax
cmp %edi,%r8d
jge 11 <func1+0x11>
lea (%rcx,%r8,1),%eax
imul %edi,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a5 * (a4 + a5);
    }
    if (a5 < a1)
    {
        v8 = a4 * a1 + a5 * a1;
    }
    else
    {
        v8 = a5 - (a3 - a3 + a2);
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        v9 += a1 + a5 + a2;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 15
2 15
3 9
4 9
5 11
6 11
7 22
8 22
9 22
10 22
11 22
12 23
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%eax
imul %ecx,%edx
mov %r8d,%ecx
sub %edx,%ecx
imul %ecx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (a3 < a3)
        {
            v6 += a5 - a1 - a5;
        }
        else
        {
            v6 += a5 * (a5 - a4);
        }
    }
    if (a4 < a4)
    {
        v8 = a4 + a5;
    }
    else
    {
        v8 = (a5 - a3 * a4) * a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 24
2 24
3 24
4 24
5 22
6 22
7 22
8 22
9 24
10 25
<<<sep_out_sample>>>
cmp %esi,%ecx
jge c <func1+0xc>
mov %esi,%r10d
neg %r10d
jmp 13 <func1+0x13>
mov %ecx,%r10d
imul %edx,%r10d
mov %edi,%r9d
sub %ecx,%r9d
lea (%r9,%rdx,1),%eax
mov %ecx,%r11d
sub %edx,%r11d
cmp %edi,%esi
cmovg %r11d,%eax
add %edi,%edx
add %edx,%esi
add %r8d,%esi
add %esi,%ecx
add %r10d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a4 < a2)
    {
        v6 = a4 - a2 - a4;
    }
    else
    {
        v6 = a4 * a3;
    }
    if (a1 < a2)
    {
        v7 = a4 - a3;
    }
    else
    {
        v7 = a3 - (a4 - a1);
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 18
9 18
10 18
11 14
12 14
13 14
14 14
15 20
16 20
17 20
18 20
19 20
20 20
21 21
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %r8d,%edx
add %edx,%ecx
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a5 + a2;
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += a3 - a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 4
6 10
7 11
<<<sep_out_sample>>>
lea (%rdx,%rdx,2),%eax
mov %ecx,%r9d
sub %r8d,%r9d
cmp $0x2,%ecx
cmovl %r9d,%eax
add %edi,%edx
add %edx,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%edx
add %edx,%eax
imul %edi,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (a1 < a1)
        {
            v6 += a3 - (a2 * a4);
        }
        else
        {
            v6 += a4 * a5 * a4;
        }
    }
    if (v7 < a4)
    {
        v8 = a3 + (a3 + a3);
    }
    else
    {
        v8 = a4 - a5;
    }
    v9 = a1 * a5;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 18
5 18
6 25
7 25
8 25
9 25
10 25
11 24
12 25
13 26
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%r9d
add %esi,%r9d
add %r8d,%r9d
lea (%rdx,%r8,2),%eax
lea (%r9,%rcx,2),%edx
lea (%rdx,%rax,1),%eax
add %r8d,%edi
imul %edi,%esi
add %esi,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = (a5 + a5 + a3) + a4;
    if (a1 < a1)
    {
        v7 = a1 - a2 * a4;
    }
    else
    {
        v7 = ((a1 + a5) * a2) + a5;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 13
2 13
3 13
4 4
5 4
6 13
7 11
8 11
9 11
10 13
11 14
<<<sep_out_sample>>>
lea 0x1(%rsi,%rdi,2),%eax
add %eax,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a3 * a5;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        if (v8 < a2)
        {
            v8 += a4 + a3 - a4;
        }
        else
        {
            v8 += a4 - a5 + a4;
        }
    }
    v10 = a1 + a2;
    v11 = 0;
    for (v12 = 0; v12++; v12<a5)
    {
        if (v9 < a4)
        {
            v11 += a3 + a5;
        }
        else
        {
            v11 += a3 * a3;
        }
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 34
2 34
3 34
4 34
5 34
6 35
<<<sep_out_sample>>>
add %edx,%edi
add %esi,%edi
add %r8d,%edi
add %ecx,%edi
imul %ecx,%edx
add %r8d,%esi
add %esi,%edx
lea 0x1(%rdi,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a4 * a3 + (a5 + a2);
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        if (a1 < a3)
        {
            v7 += (a1 - a3) - a5;
        }
        else
        {
            v7 += a4 * a4 + a4;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 4
6 4
7 4
8 17
9 18
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %eax,%ecx
mov %r8d,%eax
sub %esi,%eax
imul %r8d,%eax
imul %edx,%eax
add %ecx,%eax
add %r8d,%edx
imul %edx,%esi
add %esi,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a4 < a4)
    {
        v6 = (a1 - a5 - a5) - a4;
    }
    else
    {
        v6 = ((a5 - a2) * a5) * a3;
    }
    if (a5 < a5)
    {
        v7 = a3 - a3 - (a2 * a4);
    }
    else
    {
        v7 = ((a3 + a5) * a2) + a5;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 20
2 20
3 20
4 20
5 10
6 10
7 10
8 10
9 20
10 18
11 18
12 18
13 20
14 21
<<<sep_out_sample>>>
mov %edi,%r11d
imul %r8d,%r11d
lea (%rsi,%rdi,1),%r10d
cmp %edx,%ecx
jl 1c <func1+0x1c>
mov %r8d,%r10d
imul %ecx,%r10d
add %esi,%r10d
sub %edi,%r10d
lea (%rsi,%rdi,1),%r9d
test %edx,%edx
jle 30 <func1+0x30>
mov %r8d,%r9d
sub %edx,%r9d
lea (%rdi,%rcx,1),%eax
sub %eax,%r9d
add %r9d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %r11d,%eax
add %r10d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a5 * a2;
    }
    if (a5 < a5)
    {
        v8 = a1 + a5;
    }
    else
    {
        v8 = a1 * a5;
    }
    if (a4 < a3)
    {
        v9 = a3 - a3 + (a2 + a1);
    }
    else
    {
        v9 = a5 * a4 + a2 - a1;
    }
    if (v6 < a3)
    {
        v10 = (a5 - a3) - (a1 + a4);
    }
    else
    {
        v10 = a2 + a1;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 15
2 15
3 19
4 17
5 17
6 23
7 23
8 23
9 23
10 31
11 25
12 25
13 27
14 27
15 27
16 27
17 33
18 33
19 33
20 33
21 33
22 33
23 33
24 34
<<<sep_out_sample>>>
cmp %esi,%ecx
jge 13 <func1+0x13>
mov $0x1,%r9d
sub %r8d,%r9d
imul %edx,%r9d
jmp 1a <func1+0x1a>
mov %esi,%r9d
imul %esi,%r9d
test %edx,%edx
jle 28 <func1+0x28>
mov %esi,%eax
sub %edi,%eax
lea (%rax,%rcx,2),%r10d
jmp 33 <func1+0x33>
lea (%rcx,%rcx,1),%r10d
imul %r8d,%r10d
add %ecx,%r10d
lea (%rdi,%rdx,2),%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %r9d,%eax
add %r10d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (v7 < a1)
        {
            v6 += a1 + a4 * a4;
        }
        else
        {
            v6 += a2 * (a3 + a2);
        }
    }
    if (a4 < a2)
    {
        v8 = a3 - a5 * a3;
    }
    else
    {
        v8 = a2 * a2;
    }
    if (v6 < a3)
    {
        v9 = (a2 - a1) + a4 + a4;
    }
    else
    {
        v9 = a4 + (a4 + a4) * a5;
    }
    v10 = a1 + a3 - a1;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 18
7 22
8 22
9 24
10 24
11 26
12 26
13 26
14 26
15 30
16 30
17 30
18 33
19 33
20 33
21 33
22 33
23 33
24 34
<<<sep_out_sample>>>
lea 0x1(%rdi),%r9d
imul %edx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %eax,%ecx
mov %r9d,%eax
sub %edi,%eax
add %eax,%ecx
sub %edx,%r9d
imul %r8d,%r9d
add %ecx,%r9d
imul %r8d,%r8d
sub %esi,%r8d
sub %esi,%r8d
lea (%r9,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = (a3 + a3 * a1) - a1;
    v7 = a5 * (a3 * a1);
    v8 = (a5 * a5 - a2) - a2;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 7
4 7
5 7
6 7
7 4
8 4
9 7
10 5
11 5
12 7
13 6
14 6
15 6
16 7
17 8
<<<sep_out_sample>>>
mov %r8d,%r9d
imul %edx,%r9d
mov %edx,%eax
sub %esi,%eax
imul %r9d,%eax
mov %r8d,%r9d
sub %edi,%r9d
cmp %eax,%edx
jle 21 <func1+0x21>
lea (%r8,%rdx,1),%r9d
imul %esi,%r9d
lea 0x1(%r9,%rdi,1),%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a3 * a3 - a2;
    }
    v8 = a5 * a3 * (a3 - a2);
    v9 = 0;
    for (v10 = 0; v10++; v10<a1)
    {
        if (a4 < a2)
        {
            v9 += a3 + a1 + a5;
        }
        else
        {
            v9 += a1 + a2;
        }
    }
    if (v8 < a3)
    {
        v11 = a2 * (a5 + a3);
    }
    else
    {
        v11 = a5 - a1;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 9
4 9
5 9
6 28
7 28
8 22
9 22
10 24
11 24
12 30
13 30
14 30
15 30
16 30
17 30
18 31
<<<sep_out_sample>>>
lea (%rcx,%rsi,2),%eax
cmp %edx,%r8d
jge 13 <func1+0x13>
mov %edx,%eax
imul %edx,%eax
imul %edi,%eax
imul %ecx,%eax
add %edx,%edi
add %esi,%edi
add %r8d,%edi
add %edi,%ecx
lea 0x1(%rax,%rcx,1),%ecx
lea (%rsi,%rdx,2),%eax
sub %r8d,%eax
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a5 < a3)
    {
        v6 = a3 * a3 * a1 * a4;
    }
    else
    {
        v6 = (a4 + a2) + a2;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += a5 * a3;
    }
    v9 = a2 + (a3 - a5) + a3;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 6
7 6
8 18
9 18
10 18
11 18
12 18
13 17
14 17
15 18
16 19
<<<sep_out_sample>>>
lea (%rsi,%r8,1),%r9d
test %edi,%edi
jle 12 <func1+0x12>
lea (%rcx,%rsi,1),%r9d
add %r8d,%r9d
add %edi,%r9d
lea (%rdi,%rcx,1),%r10d
mov %edi,%eax
imul %ecx,%eax
sub %eax,%r10d
mov $0x0,%eax
cmp %edx,%edi
jle 2e <func1+0x2e>
lea (%rsi,%r8,2),%eax
lea (%rax,%rcx,1),%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
lea 0x1(%r10,%r9,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (v6 < a1)
    {
        v6 = a4 + a2 + a5 + a1;
    }
    else
    {
        v6 = a2 + a5;
    }
    v7 = (a1 + a4) - a1 * a4;
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += a2 - a5;
    }
    if (a3 < a1)
    {
        v10 = a5 + ((a2 + a5) + a4);
    }
    else
    {
        v10 = (a4 - a4) - (a5 - a5);
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 6
7 12
8 12
9 12
10 12
11 24
12 18
13 18
14 20
15 20
16 26
17 26
18 26
19 26
20 26
21 26
22 26
23 27
<<<sep_out_sample>>>
mov %r8d,%eax
imul %ecx,%eax
imul %esi,%eax
mov %edi,%r10d
sub %eax,%r10d
cmp %edi,%ecx
jle 1c <func1+0x1c>
mov %edi,%r9d
imul %r8d,%r9d
jmp 26 <func1+0x26>
mov %edi,%r9d
imul %edi,%r9d
neg %r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a1 - a5 * a4 * a2;
    if (a1 < a4)
    {
        v7 = a1 * a5;
    }
    else
    {
        v7 = (a4 - a1 * a1) - a4;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 4
6 5
7 5
8 7
9 7
10 7
11 11
12 11
13 11
14 13
15 13
16 13
17 13
18 13
19 13
20 14
<<<sep_out_sample>>>
add %edi,%edx
lea (%rsi,%rdx,1),%eax
add %eax,%r8d
lea (%r8,%rcx,1),%eax
imul %ecx,%esi
sub %esi,%eax
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = (a2 - a4 * a2) - a2;
    v7 = a1 + a3;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 5
2 6
3 6
4 6
5 4
6 6
7 6
8 7
<<<sep_out_sample>>>
mov $0x0,%eax
cmp %ecx,%esi
jle 18 <func1+0x18>
mov %edi,%r9d
imul %edi,%r9d
mov %edx,%eax
sub %edi,%eax
imul %r9d,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %r8d,%esi
lea 0x2(%rcx,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a2 * a4 * a5;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        if (a3 < a5)
        {
            v8 += a4 + a2 + a1;
        }
        else
        {
            v8 += a4 + a3;
        }
    }
    if (a4 < a2)
    {
        v10 = a1 * a1 * (a3 - a1);
    }
    else
    {
        v10 = a1 - a1;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 27
2 21
3 21
4 23
5 23
6 23
7 23
8 23
9 29
10 29
11 29
12 29
13 29
14 30
<<<sep_out_sample>>>
cmp $0x1,%ecx
jle 14 <func1+0x14>
lea (%rsi,%rsi,1),%eax
mov %esi,%r9d
imul %edi,%r9d
sub %r9d,%eax
jmp 1a <func1+0x1a>
mov %esi,%eax
neg %eax
sub %edx,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %r8d,%esi
lea 0x2(%rcx,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a3 - a4 + a3;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        if (v7 < a3)
        {
            v8 += a3 * a1;
        }
        else
        {
            v8 += a1 + a3 - a1;
        }
    }
    if (v7 < a4)
    {
        v10 = a2 + a2 - (a2 * a1);
    }
    else
    {
        v10 = a5 - ((a5 + a2) + a3);
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 23
4 23
5 23
6 23
7 23
8 27
9 27
10 27
11 29
12 29
13 29
14 29
15 29
16 30
<<<sep_out_sample>>>
mov %ecx,%eax
sub %edi,%eax
add %r8d,%eax
add %ecx,%eax
mov %edx,%r9d
sub %r8d,%r9d
cmp %ecx,%edx
jge 21 <func1+0x21>
mov %edi,%r9d
sub %ecx,%r9d
imul %r8d,%r9d
imul %ecx,%r9d
lea 0x1(%r9,%rdi,1),%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (v7 < a5)
        {
            v6 += (a1 * a5) * a5;
        }
        else
        {
            v6 += a3 * a5 + a1;
        }
    }
    v8 = a4 - a1 + a5 + a4;
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        v9 += a1 - a1 * a1;
    }
    if (a3 < a4)
    {
        v11 = a5 * (a1 - a4) * a4;
    }
    else
    {
        v11 = a3 - a5;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 16
4 16
5 28
6 28
7 22
8 22
9 24
10 24
11 24
12 24
13 30
14 30
15 30
16 30
17 30
18 30
19 31
<<<sep_out_sample>>>
mov %edi,%r9d
sub %esi,%r9d
add %edi,%r9d
imul %ecx,%r9d
lea (%rdi,%rdx,1),%eax
mov %ecx,%r10d
sub %edx,%r10d
cmp %ecx,%edi
cmovge %r10d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
lea 0x1(%rax,%r9,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a3 < a3)
    {
        v6 = a4 + (a5 * a1 - a1);
    }
    else
    {
        v6 = (a1 + (a1 - a2)) * a4;
    }
    if (a1 < a4)
    {
        v7 = a1 + a3;
    }
    else
    {
        v7 = a1 - ((a3 - a4) + a1);
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        if (a4 < a4)
        {
            v8 += a2 + a3;
        }
        else
        {
            v8 += (a5 * a4) + a5;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 14
6 14
7 14
8 14
9 14
10 32
11 32
12 32
13 32
14 32
15 32
16 33
<<<sep_out_sample>>>
mov %edx,%r9d
sub %ecx,%r9d
cmp %esi,%edi
mov $0x0,%eax
cmovge %eax,%r9d
lea (%rdx,%r8,2),%eax
imul %edx,%eax
cmp %r8d,%r9d
jge 2d <func1+0x2d>
mov %edx,%r10d
sub %edi,%r10d
sub $0x1,%r10d
imul %esi,%r10d
jmp 34 <func1+0x34>
mov %edx,%r10d
imul %ecx,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a1 < a2)
    {
        v6 = a3 - a4;
    }
    else
    {
        v6 = a5 - a5;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a1 * a5 * a3;
    }
    v9 = (a5 + a5 + a3) * a3;
    if (v6 < a5)
    {
        v10 = ((a3 - a1) * a2) - a2;
    }
    else
    {
        v10 = a3 * a4 - (a3 - a3);
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 6
6 17
7 17
8 18
9 18
10 20
11 20
12 20
13 20
14 20
15 24
16 24
17 26
18 26
19 26
20 26
21 26
22 26
23 26
24 27
<<<sep_out_sample>>>
lea (%rdx,%rsi,1),%eax
cmp %edx,%ecx
jge 13 <func1+0x13>
mov %r8d,%eax
imul %r8d,%eax
imul %ecx,%eax
add %edx,%eax
lea (%rdi,%rdx,1),%r9d
add %r9d,%esi
add %r8d,%esi
add %esi,%ecx
add %ecx,%eax
add %r8d,%r8d
sub %edi,%r8d
add %r8d,%edx
lea 0x1(%rax,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a4 < a3)
    {
        v6 = a3 + (a5 * a5 * a4);
    }
    else
    {
        v6 = a3 + a2;
    }
    v7 = a5 + a5 - a1 + a3;
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        if (a3 < a5)
        {
            v8 += a4 * a3;
        }
        else
        {
            v8 += (a4 - a1) + a2;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 6
7 6
8 25
9 25
10 25
11 25
12 25
13 12
14 12
15 12
16 25
17 26
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a1 * a1 + a4;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += a4 * a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 14
2 14
3 14
4 14
5 15
<<<sep_out_sample>>>
mov %edx,%r9d
imul %esi,%r9d
add %edx,%edi
add %esi,%edi
add %r8d,%edi
add %ecx,%edi
imul %r9d,%ecx
sub %r8d,%ecx
lea (%rdi,%rcx,1),%eax
imul %r9d,%esi
add %esi,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = (a3 * a2 * a4) - a5;
    v7 = a2 * a3 * a2 + a3;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 4
8 4
9 6
10 5
11 5
12 6
13 7
<<<sep_out_sample>>>
cmp %edi,%r8d
jge 13 <func1+0x13>
lea (%rsi,%rcx,1),%r10d
imul %r8d,%r10d
imul %esi,%r10d
jmp 1a <func1+0x1a>
mov %edi,%r10d
imul %edx,%r10d
cmp %edx,%esi
jge 2d <func1+0x2d>
mov %esi,%r9d
imul %edx,%r9d
add %edi,%r9d
sub %ecx,%r9d
jmp 36 <func1+0x36>
mov %edi,%eax
imul %edx,%eax
lea (%rax,%rcx,2),%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
imul %ecx,%edx
sub %edx,%edi
add %edi,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a5 < a1)
    {
        v6 = (a5 * (a2 + a4)) * a2;
    }
    else
    {
        v6 = (a1 - (a2 - a2)) * a3;
    }
    if (a2 < a3)
    {
        v7 = a1 + a2 * a3 - a4;
    }
    else
    {
        v7 = a1 * a3 + (a4 + a4);
    }
    v8 = (a1 - (a4 * a3)) + a2;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 12
10 12
11 14
12 14
13 14
14 14
15 14
16 18
17 18
18 18
19 21
20 21
21 21
22 21
23 21
24 21
25 20
26 20
27 20
28 21
29 22
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
mov %edx,%eax
imul %edi,%eax
imul %edi,%eax
lea (%rsi,%rcx,2),%esi
lea (%rsi,%rax,1),%eax
imul %ecx,%edx
sub %edi,%edx
add %edx,%r8d
lea 0x1(%rax,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a4 + a1 * (a3 * a1);
    v7 = a3 * a4 - a1 + a5;
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        if (v8 < a2)
        {
            v8 += (a2 + a3) + a5;
        }
        else
        {
            v8 += (a1 * a4) + a3;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 4
5 4
6 4
7 4
8 18
9 5
10 5
11 5
12 18
13 19
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %r8d,%edx
lea 0x1(%rcx,%rdx,1),%eax
imul %r8d,%esi
sub %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += (a4 * a3) - a5;
    }
    v8 = a2 - a2 - (a5 * a2);
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 9
6 10
7 11
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
lea (%r8,%rcx,1),%eax
sub %edx,%edi
imul %ecx,%esi
sub %esi,%edi
lea 0x1(%rax,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a1 - a3 - a2 * a4;
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += (a4 - a3) - a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 4
6 4
7 4
8 10
9 11
<<<sep_out_sample>>>
mov %esi,%eax
imul %edi,%eax
imul %edx,%eax
lea 0x1(%rcx,%rax,1),%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (a5 < a3)
        {
            v6 += a1 + a2 + a5;
        }
        else
        {
            v6 += (a5 * a2) + a2;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        if (a1 < a5)
        {
            v8 += a5 - a3;
        }
        else
        {
            v8 += a3 + a1 - a2;
        }
    }
    v10 = a2 * a1 * a3 + a4;
    v11 = 0;
    for (v12 = 0; v12++; v12<a3)
    {
        v11 += a3 - (a1 + a2);
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 28
2 28
3 28
4 34
5 34
6 34
7 34
8 34
9 34
10 35
<<<sep_out_sample>>>
cmp %edx,%edi
jge c <func1+0xc>
lea (%rdx,%rsi,2),%eax
sub %r8d,%eax
jmp 15 <func1+0x15>
lea 0x1(%rdx),%eax
imul %r8d,%eax
sub %esi,%eax
add %edx,%edi
add %esi,%edi
add %edi,%r8d
add %r8d,%ecx
add %eax,%ecx
add %esi,%edx
lea 0x1(%rcx,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a1 < a3)
    {
        v6 = a2 + a3 + a2 - a5;
    }
    else
    {
        v6 = (a5 * a3 + a5) - a2;
    }
    v7 = a3 + a2;
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        if (a3 < a3)
        {
            v8 += a4 - a5 - a4;
        }
        else
        {
            v8 += a2 * (a5 * a4);
        }
    }
    v10 = (a4 - (a4 + a3)) + a3;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 26
10 26
11 26
12 26
13 26
14 12
15 26
16 27
<<<sep_out_sample>>>
lea (%rsi,%rdi,1),%r10d
sub %r8d,%r10d
add %edx,%r10d
mov %edi,%r9d
imul %edi,%r9d
mov %edi,%eax
sub %edx,%eax
add %eax,%r9d
mov %edi,%eax
sub %r8d,%eax
cmp %r9d,%r8d
jle 30 <func1+0x30>
lea (%rsi,%r8,1),%eax
mov %esi,%r11d
imul %edi,%r11d
sub %r11d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r10d,%ecx
add %ecx,%r9d
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = (a2 + a1) - a5 + a3;
    v7 = a1 * a1 + (a1 - a3);
    if (v7 < a5)
    {
        v8 = (a2 + a5) - (a2 * a1);
    }
    else
    {
        v8 = (a3 - a5) - a3 + a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 5
5 5
6 5
7 5
8 5
9 12
10 12
11 6
12 6
13 8
14 8
15 8
16 8
17 14
18 14
19 14
20 14
21 14
22 14
23 14
24 15
<<<sep_out_sample>>>
cmp %esi,%edi
jge 14 <func1+0x14>
lea (%rcx,%rcx,1),%r9d
mov %r8d,%eax
imul %edx,%eax
imul %r9d,%eax
jmp 1f <func1+0x1f>
mov %ecx,%eax
imul %edi,%eax
imul %edi,%eax
add %r8d,%eax
lea (%rdi,%rdx,1),%r9d
add %r9d,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%ecx
add %eax,%ecx
lea (%rdi,%rdx,2),%eax
sub %r8d,%eax
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a4 + a1;
    }
    if (a1 < a2)
    {
        v8 = (a4 + a4) * (a5 * a3);
    }
    else
    {
        v8 = (a4 * a1) * a1 + a5;
    }
    v9 = a1 - (a5 - a3) + a3;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 11
8 15
9 15
10 15
11 15
12 18
13 18
14 18
15 18
16 18
17 17
18 17
19 18
20 19
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
lea 0x1(%rcx,%rax,1),%eax
add %edx,%esi
add %eax,%esi
mov %r8d,%eax
sub %edx,%eax
imul %ecx,%r8d
sub %r8d,%eax
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a3 * a4;
    }
    v8 = a3 + a2;
    v9 = a5 - a3 - a4 * a5;
    v10 = 0;
    for (v11 = 0; v11++; v11<a3)
    {
        v10 += a5 + a5 + a5;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 16
4 16
5 9
6 16
7 10
8 10
9 10
10 10
11 16
12 17
<<<sep_out_sample>>>
add %edx,%edi
add %esi,%edi
add %edi,%r8d
lea 0x1(%rcx,%r8,1),%eax
imul %edx,%esi
sub %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (a3 < a4)
        {
            v6 += (a5 - a3) * a4;
        }
        else
        {
            v6 += (a1 * a2) + a2;
        }
    }
    if (a1 < a1)
    {
        v8 = (a4 - a1) * a4;
    }
    else
    {
        v8 = a2 - a2 * a3 - a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 24
2 24
3 24
4 24
5 22
6 24
7 25
<<<sep_out_sample>>>
mov $0x0,%eax
test %ecx,%ecx
jle 10 <func1+0x10>
mov %esi,%eax
sub %r8d,%eax
add %edi,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a1 - a5 * a5;
    }
    if (v8 < a4)
    {
        v8 = (a2 - a5) + a1;
    }
    else
    {
        v8 = a3 - a3;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        v9 += a4 * a4 - a5;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 15
2 9
3 9
4 11
5 11
6 11
7 22
8 22
9 22
10 22
11 22
12 23
<<<sep_out_sample>>>
lea (%r8,%rdx,1),%eax
mov %edx,%r9d
imul %edx,%r9d
sub %r9d,%eax
add %edi,%eax
add %edx,%eax
add %esi,%eax
add %eax,%r8d
add %ecx,%r8d
mov %ecx,%eax
imul %edi,%eax
imul %ecx,%eax
sub %edi,%eax
lea 0x1(%r8,%rax,1),%eax
sub %edi,%edx
sub %ecx,%edx
imul %edx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a4 * a1 * a4 - a1;
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a3 + a3 + a3;
    }
    v9 = a2 * (a3 - a1 - a4);
    v10 = (a5 + a3) - (a3 * a3);
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 11
5 12
6 12
7 12
8 12
9 12
10 4
11 4
12 4
13 4
14 12
15 10
16 10
17 10
18 12
19 13
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %r8d,%edx
lea 0x1(%rcx,%rdx,1),%eax
imul %esi,%ecx
imul %ecx,%r8d
imul %r8d,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a2 + a5 * a1;
    }
    v8 = a4 * a2 * a5 * a2;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 9
6 9
7 9
8 10
9 11
<<<sep_out_sample>>>
cmp %esi,%r8d
jge e <func1+0xe>
mov %esi,%r9d
imul %ecx,%r9d
jmp 17 <func1+0x17>
mov %esi,%r9d
sub %r8d,%r9d
add %edx,%r9d
mov %esi,%r10d
sub %ecx,%r10d
cmp %ecx,%r9d
jl 30 <func1+0x30>
mov %edx,%r10d
imul %esi,%r10d
imul %edx,%r10d
add %edi,%r10d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
lea (%r9,%r10,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a5 < a2)
    {
        v6 = (a2 * a4) + a5 - a5;
    }
    else
    {
        v6 = a3 - (a5 - a2);
    }
    if (v6 < a4)
    {
        v7 = a2 - a4;
    }
    else
    {
        v7 = a3 * a2 * a3 + a1;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 14
10 14
11 12
12 12
13 18
14 18
15 18
16 18
17 20
18 20
19 20
20 20
21 20
22 20
23 21
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add $0x1,%ecx
imul %ecx,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (a3 < a2)
        {
            v6 += a1 * a5 * a2;
        }
        else
        {
            v6 += a4 - a3 * a2;
        }
    }
    v8 = a4 * a3 + a3;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 16
6 16
7 17
8 18
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %eax,%ecx
sub %edx,%r8d
add %ecx,%r8d
imul %edi,%edi
imul %edi,%edx
add %edx,%esi
lea 0x1(%r8,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = a5 - a3;
    v7 = (a1 * a1) * a3 + a2;
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += (a1 + a5) * a4;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a2)
    {
        v10 += a4 * a5 * a5;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 16
4 16
5 4
6 16
7 5
8 5
9 5
10 16
11 17
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
imul %ecx,%edx
sub %edi,%edx
lea 0x1(%r8,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = ((a4 * a3) - a1) - a4;
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        if (v8 < a1)
        {
            v7 += a4 + a2;
        }
        else
        {
            v7 += a2 - a3 * a5;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 4
5 4
6 17
7 18
<<<sep_out_sample>>>
cmp %ecx,%edi
jle 12 <func1+0x12>
mov %r8d,%eax
imul %ecx,%eax
mov %edx,%r9d
sub %eax,%r9d
jmp 1f <func1+0x1f>
mov %r8d,%r9d
imul %esi,%r9d
add %ecx,%r9d
sub %edi,%r9d
cmp $0x1,%r8d
jle 34 <func1+0x34>
mov $0x1,%eax
sub %edx,%eax
imul %r8d,%eax
sub %esi,%eax
jmp 3c <func1+0x3c>
mov %edi,%eax
imul %edi,%eax
imul %edi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %r9d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a1 - a1 * a2;
    }
    if (a4 < a1)
    {
        v8 = a3 - (a5 * a4);
    }
    else
    {
        v8 = (a5 * a2 + a4) - a1;
    }
    if (v7 < a5)
    {
        v9 = a5 - (a3 * a5) - a2;
    }
    else
    {
        v9 = a1 * (a1 * a1);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 11
8 15
9 15
10 15
11 15
12 17
13 17
14 19
15 19
16 19
17 19
18 19
19 23
20 23
21 23
22 25
23 25
24 25
25 25
26 25
27 25
28 26
<<<sep_out_sample>>>
cmp %r8d,%edi
jge 10 <func1+0x10>
mov %edx,%eax
sub %ecx,%eax
imul %esi,%eax
add %ecx,%eax
jmp 1f <func1+0x1f>
mov %ecx,%eax
sub %r8d,%eax
mov %edi,%r9d
imul %edi,%r9d
sub %r9d,%eax
test %ecx,%ecx
jle 2f <func1+0x2f>
mov %r8d,%r9d
imul %edx,%r9d
neg %r9d
jmp 3d <func1+0x3d>
lea (%rcx,%rcx,1),%r9d
mov %edx,%r10d
imul %edx,%r10d
sub %r10d,%r9d
lea 0x1(%r9,%rdi,1),%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    if (a1 < a5)
    {
        v6 = ((a3 - a4) * a2) + a4;
    }
    else
    {
        v6 = a4 - a5 - a1 * a1;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        if (a2 < a4)
        {
            v7 += a2 - a2 + a4;
        }
        else
        {
            v7 += a4 * a1;
        }
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        v9 += a1 + a2;
    }
    if (v7 < a4)
    {
        v11 = a1 - (a5 * a3) - a1;
    }
    else
    {
        v11 = a4 + a4 - a3 * a3;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 10
13 29
14 29
15 31
16 31
17 31
18 31
19 35
20 35
21 35
22 35
23 37
24 37
25 37
26 37
27 37
28 37
29 38
<<<sep_out_sample>>>
add %edi,%edx
add %edx,%esi
add %r8d,%esi
add %esi,%ecx
lea (%rdi,%rdi,1),%eax
sub %eax,%ecx
sub %r8d,%edi
lea 0x1(%rcx,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a2 < a2)
    {
        v6 = a4 - a1 - a5 * a4;
    }
    else
    {
        v6 = a4 - a1 - a1 - a4;
    }
    v7 = a1 - a5;
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += a1 + a4 * a5;
    }
    v10 = a2 - a2;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 19
2 19
3 19
4 19
5 10
6 19
7 12
8 19
9 20
<<<sep_out_sample>>>
mov %edi,%r9d
sub %r8d,%r9d
mov %edx,%r11d
sub %edi,%r11d
cmp %r9d,%edi
jle 1a <func1+0x1a>
mov %edi,%r10d
imul %ecx,%r10d
jmp 27 <func1+0x27>
mov %edx,%r10d
sub %ecx,%r10d
imul %esi,%r10d
sub %ecx,%r10d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
add %r11d,%eax
add %r10d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = (a1 - a5 - a3) + a3;
    v7 = (a3 - a1) - a3 + a3;
    if (v6 < a1)
    {
        v8 = a1 * a4;
    }
    else
    {
        v8 = ((a3 - a4) * a2) - a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 5
4 5
5 6
6 6
7 8
8 8
9 8
10 12
11 12
12 12
13 12
14 14
15 14
16 14
17 14
18 14
19 14
20 14
21 15
<<<sep_out_sample>>>
mov $0x0,%eax
cmp %esi,%edx
jge 13 <func1+0x13>
mov %edx,%eax
imul %r8d,%eax
sub %edi,%eax
add %edx,%eax
test %ecx,%ecx
jle 23 <func1+0x23>
mov %esi,%r9d
imul %edi,%r9d
add %r8d,%r9d
jmp 2a <func1+0x2a>
mov %r8d,%r9d
imul %esi,%r9d
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%eax
lea 0x1(%r9,%rax,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    if (a3 < a2)
    {
        v6 = a3 * a5 - a1 + a3;
    }
    else
    {
        v6 = ((a3 - a3) * a5) * a5;
    }
    if (v7 < a4)
    {
        v7 = a2 * a1 + a5;
    }
    else
    {
        v7 = a5 * a2;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += a1 + a4 - a3;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a4)
    {
        v10 += a3 + a5;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 6
7 6
8 12
9 12
10 14
11 14
12 14
13 14
14 18
15 18
16 30
17 30
18 30
19 30
20 30
21 30
22 31
<<<sep_out_sample>>>
test %ecx,%ecx
jle f <func1+0xf>
mov %edx,%eax
imul %ecx,%eax
add %edi,%eax
add %esi,%eax
jmp 16 <func1+0x16>
mov %edi,%eax
imul %ecx,%eax
add %edx,%eax
lea (%rdi,%rdx,1),%r9d
add %esi,%r9d
add %r9d,%r8d
add %ecx,%r8d
add %eax,%r8d
sub %esi,%ecx
sub %edx,%ecx
add %ecx,%edi
lea 0x1(%r8,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (v6 < a4)
    {
        v6 = a1 + a3 * a4 + a2;
    }
    else
    {
        v6 = a1 * a4 + a3;
    }
    v7 = a4 - a2 - a3 + a1;
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        if (a3 < a2)
        {
            v8 += a4 * a5 + a2;
        }
        else
        {
            v8 += a4 * a3 * a3;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 25
12 25
13 25
14 25
15 25
16 12
17 12
18 12
19 25
20 26
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += (a5 * a3) * a1;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += (a4 * a4) + a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 14
2 14
3 14
4 14
5 15
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
lea (%rdi,%rcx,1),%r9d
mov %ecx,%edx
imul %ecx,%edx
add %r9d,%edx
add %eax,%edx
add %r8d,%edi
add %edi,%ecx
sub %esi,%ecx
lea (%rdx,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a1 + a4 + a4 * a4;
    v7 = a4 + (a5 + a1) - a2;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 4
7 4
8 4
9 6
10 5
11 5
12 5
13 6
14 7
<<<sep_out_sample>>>
mov %edi,%r9d
sub %esi,%r9d
cmp %edx,%edi
jl 11 <func1+0x11>
mov %edx,%r9d
imul %esi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
sub %ecx,%edx
add %edx,%eax
sub %r8d,%esi
add %esi,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a1 < a3)
    {
        v6 = a1 - a2;
    }
    else
    {
        v6 = a3 * a2;
    }
    v7 = a3 - a4;
    v8 = a4 - (a5 - a2);
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 6
2 6
3 4
4 4
5 10
6 10
7 14
8 14
9 14
10 14
11 14
12 12
13 14
14 13
15 13
16 14
17 15
<<<sep_out_sample>>>
mov %ecx,%r11d
sub %edi,%r11d
mov %ecx,%r9d
imul %edi,%r9d
mov %r9d,%r10d
imul %r8d,%r10d
add %edi,%r10d
mov %esi,%eax
sub %r8d,%eax
cmp %esi,%r8d
cmovg %eax,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a4 - a1;
    if (a4 < a4)
    {
        v7 = a2 * (a4 - a5) * a3;
    }
    else
    {
        v7 = a1 + a4 * a1 * a5;
    }
    if (a2 < a5)
    {
        v8 = a2 + a2 - a2 - a5;
    }
    else
    {
        v8 = a4 * a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 11
4 11
5 11
6 11
7 11
8 15
9 15
10 15
11 15
12 21
13 21
14 21
15 21
16 21
17 21
18 21
19 22
<<<sep_out_sample>>>
lea (%r8,%rcx,1),%eax
cmp %edx,%r8d
jle 1a <func1+0x1a>
mov %edx,%eax
imul %edx,%eax
imul %ecx,%eax
mov %esi,%r10d
sub %eax,%r10d
mov %r10d,%eax
cmp $0x1,%edx
jle 2d <func1+0x2d>
lea (%rsi,%rsi,1),%r9d
imul %esi,%r9d
imul %edx,%r9d
jmp 3c <func1+0x3c>
mov %edx,%r9d
imul %edi,%r9d
add $0x1,%r9d
imul %r8d,%r9d
lea 0x1(%r9,%rdi,1),%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (v7 < a5)
        {
            v6 += a1 - a4 - a4;
        }
        else
        {
            v6 += a2 - a3 + a5;
        }
    }
    if (a3 < a5)
    {
        v8 = a2 - (a3 * a3 * a4);
    }
    else
    {
        v8 = a5 + a4;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        if (v10 < a4)
        {
            v9 += (a4 - a4) * a4;
        }
        else
        {
            v9 += a3 * a1 * a5;
        }
    }
    if (v10 < a3)
    {
        v11 = ((a2 + a2) * a2) * a3;
    }
    else
    {
        v11 = a5 + (a3 * a1 * a5);
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 16
3 16
4 18
5 18
6 18
7 18
8 18
9 18
10 36
11 36
12 38
13 38
14 38
15 38
16 42
17 42
18 42
19 42
20 44
21 44
22 44
23 44
24 44
25 44
26 45
<<<sep_out_sample>>>
mov %ecx,%r9d
sub %r8d,%r9d
cmp %ecx,%r8d
jge 15 <func1+0x15>
lea (%rsi,%rcx,1),%r9d
sub %edi,%r9d
sub %r8d,%r9d
mov %r8d,%eax
sub %ecx,%eax
mov %edi,%r10d
imul %ecx,%r10d
cmp %edi,%r8d
cmovg %r10d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
lea 0x1(%rax,%r9,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a5 < a4)
    {
        v6 = a2 + a4 - a1 - a5;
    }
    else
    {
        v6 = a4 - a5;
    }
    if (a1 < a5)
    {
        v7 = a1 * a4;
    }
    else
    {
        v7 = a5 - a4;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += a4 * a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 4
4 4
5 6
6 6
7 6
8 18
9 18
10 14
11 14
12 14
13 14
14 25
15 25
16 25
17 25
18 25
19 25
20 26
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (a4 < a3)
        {
            v6 += (a4 - a2) - a4;
        }
        else
        {
            v6 += a5 + a1 * a3;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += a1 - a1 * a4;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a4)
    {
        if (a5 < a3)
        {
            v10 += a2 - a3 * a4;
        }
        else
        {
            v10 += (a2 - a4) * a5;
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 33
2 33
3 33
4 33
5 34
<<<sep_out_sample>>>
cmp %ecx,%esi
jge 14 <func1+0x14>
mov %ecx,%r9d
imul %ecx,%r9d
imul %esi,%r9d
add %edi,%r9d
jmp 21 <func1+0x21>
mov %r8d,%r9d
imul %edx,%r9d
add %ecx,%r9d
add %r8d,%r9d
lea (%rdx,%r8,1),%eax
cmp %edx,%ecx
jge 30 <func1+0x30>
lea (%r8,%rdx,2),%eax
imul %esi,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a2 < a4)
    {
        v6 = a1 + ((a4 * a4) * a2);
    }
    else
    {
        v6 = a5 + (a4 + a5 * a3);
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += a1 + a2 * a5;
    }
    if (a4 < a3)
    {
        v9 = (a5 + (a3 + a3)) * a2;
    }
    else
    {
        v9 = a3 + a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 23
13 17
14 17
15 19
16 19
17 25
18 25
19 25
20 25
21 25
22 25
23 26
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%eax
mov %edx,%esi
sub %ecx,%esi
imul %edx,%ecx
add %esi,%ecx
add %ecx,%eax
sub %edx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (a2 < a3)
        {
            v6 += a3 - a4;
        }
        else
        {
            v6 += a5 * a1 * a3;
        }
    }
    v8 = a3 - a4 + a4 * a3;
    if (a1 < a1)
    {
        v9 = ((a1 - a3) * a2) + a1;
    }
    else
    {
        v9 = a5 - a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 25
2 25
3 25
4 25
5 16
6 16
7 16
8 16
9 25
10 23
11 25
12 26
<<<sep_out_sample>>>
lea 0x2(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
lea 0x1(%rcx,%rax,1),%eax
imul %esi,%r8d
sub %edx,%r8d
add %r8d,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a1 * (a5 - a5);
    }
    v8 = (a2 * a5) - a3 + a2;
    v9 = 0;
    for (v10 = 0; v10++; v10<a1)
    {
        v9 += a2 - (a5 - a2);
    }
    v11 = 0;
    for (v12 = 0; v12++; v12<a2)
    {
        if (v6 < a2)
        {
            v11 += a3 * a3 * a5;
        }
        else
        {
            v11 += a2 - a3 - a3;
        }
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 27
2 27
3 27
4 27
5 9
6 9
7 9
8 27
9 28
<<<sep_out_sample>>>
mov %edi,%r9d
imul %r8d,%r9d
mov %ecx,%r10d
imul %ecx,%r10d
sub %r10d,%r9d
test %ecx,%ecx
jle 20 <func1+0x20>
lea (%rdx,%rcx,1),%eax
imul %esi,%eax
imul %edx,%eax
jmp 2a <func1+0x2a>
mov %esi,%eax
imul %edi,%eax
add %edx,%eax
add %r8d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = (a1 * a5) - a4 * a4;
    if (v7 < a4)
    {
        v7 = ((a3 + a4) * a2) * a3;
    }
    else
    {
        v7 = a2 * a1 + a3 + a5;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 4
6 5
7 5
8 7
9 7
10 7
11 7
12 11
13 11
14 11
15 11
16 13
17 13
18 13
19 13
20 13
21 13
22 14
<<<sep_out_sample>>>
lea (%r8,%rdx,2),%r10d
add %ecx,%r10d
cmp %esi,%ecx
jle 17 <func1+0x17>
mov %r8d,%r9d
neg %r9d
imul %edi,%r9d
jmp 22 <func1+0x22>
mov %ecx,%r9d
imul %ecx,%r9d
imul %esi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = (a5 + a3) + a3 + a4;
    if (a2 < a4)
    {
        v7 = a1 - (a5 * a1 + a1);
    }
    else
    {
        v7 = a4 * a4 * a2;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 5
4 5
5 7
6 7
7 7
8 7
9 11
10 11
11 11
12 13
13 13
14 13
15 13
16 13
17 13
18 14
<<<sep_out_sample>>>
cmp %ecx,%esi
jge a <func1+0xa>
lea (%r8,%r8,1),%eax
jmp 14 <func1+0x14>
mov %edi,%eax
imul %edx,%eax
sub %r8d,%eax
add %edx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a2 < a4)
    {
        v6 = a5 + a5;
    }
    else
    {
        v6 = a3 - (a5 - a1 * a3);
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a5 + a3 * a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 10
6 10
7 10
8 10
9 17
10 17
11 17
12 17
13 17
14 18
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%eax
imul %edi,%edi
sub %edx,%r8d
add %edi,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a4 + a3 * a3;
    }
    v8 = a1 * a1 + (a5 - a3);
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 9
6 9
7 9
8 10
9 11
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
sub $0x1,%ecx
imul %ecx,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (v6 < a5)
        {
            v6 += (a5 - a1) - a5;
        }
        else
        {
            v6 += (a3 * a5) * a1;
        }
    }
    v8 = a4 * a3 - a3;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 16
6 16
7 17
8 18
<<<sep_out_sample>>>
mov %ecx,%r9d
sub %edi,%r9d
cmp %r8d,%ecx
jge 12 <func1+0x12>
lea (%rsi,%rsi,2),%eax
sub %edi,%eax
jmp 1c <func1+0x1c>
mov %edi,%eax
sub %esi,%eax
imul %r8d,%eax
add %ecx,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = a4 - a1;
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += a1 - a5 * a1;
    }
    if (a4 < a5)
    {
        v9 = (a2 + a2 + a2) - a1;
    }
    else
    {
        v9 = a4 + ((a1 - a2) * a5);
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a3)
    {
        v10 += (a3 - a5) * a1;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 10
4 10
5 12
6 12
7 12
8 16
9 16
10 16
11 16
12 23
13 23
14 23
15 23
16 23
17 23
18 24
<<<sep_out_sample>>>
cmp %ecx,%esi
jge 12 <func1+0x12>
mov %r8d,%r10d
sub %esi,%r10d
sub %edi,%r10d
sub %edx,%r10d
jmp 23 <func1+0x23>
mov $0x1,%r10d
sub %edx,%r10d
imul %ecx,%r10d
imul %edx,%r10d
cmp %r8d,%esi
jge 32 <func1+0x32>
mov %edx,%eax
sub %ecx,%eax
lea (%rax,%rsi,2),%r9d
jmp 3f <func1+0x3f>
mov %r8d,%r9d
imul %r8d,%r9d
sub %esi,%r9d
sub %ecx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a2 < a4)
    {
        v6 = (a5 - a2 - a1) - a3;
    }
    else
    {
        v6 = (a4 - a3 * a4) * a3;
    }
    if (a2 < a5)
    {
        v7 = a2 - (a4 - a3) + a2;
    }
    else
    {
        v7 = (a5 * a5 - a2) - a4;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 12
13 12
14 14
15 14
16 14
17 14
18 18
19 18
20 18
21 18
22 20
23 20
24 20
25 20
26 20
27 20
28 21
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%eax
sub %edx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a4 * (a5 + a3);
    }
    v8 = a5 - a3;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 9
6 10
7 11
<<<sep_out_sample>>>
test %edx,%edx
jle 10 <func1+0x10>
lea (%rsi,%r8,1),%r11d
add %ecx,%r11d
add %edi,%r11d
jmp 1a <func1+0x1a>
mov %esi,%r11d
imul %r8d,%r11d
add %edi,%r11d
mov %r8d,%r10d
sub %edi,%r10d
mov %edi,%eax
sub %ecx,%eax
mov %edi,%r9d
sub %r8d,%r9d
cmp %ecx,%edx
cmovg %eax,%r9d
mov %ecx,%eax
sub %edi,%eax
cmp %esi,%r9d
jge 43 <func1+0x43>
mov %edx,%eax
imul %edx,%eax
add %edi,%eax
sub %r8d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r11d,%ecx
add %r10d,%ecx
add %ecx,%r9d
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (v6 < a3)
    {
        v6 = a2 + a5 + a4 + a1;
    }
    else
    {
        v6 = a1 + a2 * a5;
    }
    v7 = a5 - a1;
    if (a4 < a3)
    {
        v8 = a1 - a4;
    }
    else
    {
        v8 = a1 - a5;
    }
    if (v8 < a2)
    {
        v9 = a3 * a3 + a1 - a5;
    }
    else
    {
        v9 = a4 - a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 12
11 12
12 15
13 15
14 15
15 15
16 15
17 15
18 27
19 27
20 21
21 21
22 23
23 23
24 23
25 23
26 29
27 29
28 29
29 29
30 29
31 29
32 29
33 29
34 30
<<<sep_out_sample>>>
add %edx,%edi
cmp %esi,%r8d
jge 16 <func1+0x16>
mov %ecx,%eax
sub %edx,%eax
mov %eax,%edx
imul %r8d,%edx
imul %esi,%edx
jmp 23 <func1+0x23>
lea (%r8,%r8,1),%edx
mov %r8d,%eax
imul %ecx,%eax
imul %eax,%edx
lea (%rdi,%rsi,1),%eax
add %r8d,%eax
add %eax,%ecx
add %ecx,%edi
add %edx,%edi
lea (%rsi,%rsi,2),%eax
sub %r8d,%eax
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a3 + a1;
    if (a5 < a2)
    {
        v7 = a2 * ((a4 - a3) * a5);
    }
    else
    {
        v7 = (a5 + a5) * (a5 * a4);
    }
    v8 = (a2 + a2 - a5) + a2;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 5
3 5
4 7
5 7
6 7
7 7
8 7
9 7
10 11
11 11
12 11
13 11
14 14
15 14
16 14
17 14
18 14
19 13
20 13
21 14
22 15
<<<sep_out_sample>>>
test %ecx,%ecx
jle c <func1+0xc>
mov %r8d,%eax
imul %edi,%eax
jmp 16 <func1+0x16>
mov $0x1,%eax
sub %esi,%eax
imul %esi,%eax
cmp %esi,%r8d
jle 24 <func1+0x24>
mov %edi,%r9d
imul %esi,%r9d
jmp 2b <func1+0x2b>
lea (%rdi,%rcx,2),%r9d
add %esi,%r9d
cmp %edi,%eax
jge 3f <func1+0x3f>
mov %edi,%r10d
imul %esi,%r10d
imul %r8d,%r10d
sub %esi,%r10d
jmp 47 <func1+0x47>
lea (%rsi,%rdx,2),%r10d
lea (%r10,%r8,1),%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%eax
lea 0x1(%r9,%rax,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (v6 < a4)
    {
        v6 = a5 * a1;
    }
    else
    {
        v6 = a2 - (a2 * a2);
    }
    if (a2 < a5)
    {
        v7 = a1 * a2;
    }
    else
    {
        v7 = (a4 + a1) + a4 + a2;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += a3 + a5 + a5;
    }
    if (v6 < a1)
    {
        v10 = (a1 * a2 * a5) - a2;
    }
    else
    {
        v10 = a3 + (a5 + (a2 + a3));
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 12
10 12
11 14
12 14
13 14
14 18
15 18
16 25
17 25
18 27
19 27
20 27
21 27
22 27
23 31
24 31
25 33
26 33
27 33
28 33
29 33
30 33
31 33
32 34
<<<sep_out_sample>>>
mov %edx,%eax
imul %edx,%eax
cmp %r8d,%eax
jge 16 <func1+0x16>
lea (%rcx,%r8,1),%r9d
sub %esi,%r9d
add %edi,%r9d
jmp 1e <func1+0x1e>
lea 0x1(%r8),%r9d
imul %edi,%r9d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%eax
lea 0x1(%r9,%rax,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a3 * a3;
    if (v6 < a5)
    {
        v7 = (a4 + a5 - a2) + a1;
    }
    else
    {
        v7 = a1 + a1 * a5;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        if (a1 < a5)
        {
            v8 += (a4 + a5) + a1;
        }
        else
        {
            v8 += a4 + a5;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 5
4 5
5 7
6 7
7 7
8 7
9 11
10 11
11 25
12 25
13 25
14 25
15 25
16 25
17 26
<<<sep_out_sample>>>
lea (%rdx,%rdi,1),%eax
test %esi,%esi
jle 11 <func1+0x11>
mov %edx,%eax
imul %edx,%eax
add %r8d,%eax
sub %edi,%eax
mov %esi,%r9d
imul %edx,%r9d
add %edi,%r9d
imul %ecx,%r9d
add %r9d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a4 * a4 * a1;
    }
    if (v6 < a2)
    {
        v8 = (a5 + (a3 * a3)) - a1;
    }
    else
    {
        v8 = a3 + a1;
    }
    v9 = a2 - a2;
    v10 = (a2 * a3 + a1) * a4;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 15
2 9
3 9
4 11
5 11
6 11
7 11
8 18
9 18
10 18
11 18
12 19
13 19
14 19
15 19
16 19
17 19
18 20
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
add %ecx,%esi
add %eax,%esi
sub %edi,%edx
add %edx,%ecx
sub %r8d,%ecx
lea (%rsi,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a1 + a3;
    v7 = (a3 - a1) + a4 - a5;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 6
3 6
4 6
5 6
6 5
7 5
8 5
9 6
10 7
<<<sep_out_sample>>>
lea (%rcx,%rcx,1),%eax
imul %esi,%eax
lea 0x1(%rdi,%rax,1),%eax
add %edx,%eax
add %eax,%esi
add %r8d,%esi
add %ecx,%esi
sub %edx,%edi
add %edi,%ecx
sub %r8d,%ecx
lea 0x1(%rsi,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = (a1 - a3 + a4) - a5;
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a5 * a5;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        if (a1 < a5)
        {
            v9 += a3 - a2 - a1;
        }
        else
        {
            v9 += a5 - a1 - a5;
        }
    }
    if (a4 < a4)
    {
        v11 = a4 + a1;
    }
    else
    {
        v11 = (a4 + a4) * a2;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 28
2 28
3 30
4 30
5 30
6 30
7 30
8 4
9 4
10 4
11 30
12 31
<<<sep_out_sample>>>
mov %edi,%eax
imul %ecx,%eax
mov %edi,%r10d
sub %esi,%r10d
mov %ecx,%r9d
sub %r8d,%r9d
add %r10d,%r9d
lea (%rsi,%rcx,1),%r10d
sub %eax,%r10d
cmp %esi,%edi
jg 30 <func1+0x30>
mov %edx,%r10d
imul %edx,%r10d
mov %esi,%r11d
imul %r8d,%r11d
sub %r11d,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%eax
lea 0x1(%r9,%rax,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a1 * a4;
    v7 = a1 - a2 + (a4 - a5);
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += a4 - a4 * a1;
    }
    if (a2 < a1)
    {
        v10 = (a2 + a4) - a4 * a1;
    }
    else
    {
        v10 = a3 * a3 - a2 * a5;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 5
4 5
5 5
6 5
7 5
8 13
9 13
10 11
11 11
12 17
13 17
14 17
15 17
16 17
17 19
18 19
19 19
20 19
21 19
22 19
23 19
24 20
<<<sep_out_sample>>>
lea -0x1(%rcx),%r9d
imul %edi,%r9d
sub %esi,%r9d
lea (%rdi,%rsi,1),%eax
cmp %edx,%edi
jle 1a <func1+0x1a>
lea 0x1(%rdi),%eax
imul %edx,%eax
add %esi,%eax
add %edx,%edi
add %edi,%esi
add %r8d,%esi
add %esi,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a5 < a5)
    {
        v6 = a2 - a4 - a5 - a3;
    }
    else
    {
        v6 = (a1 * a4 - a1) - a2;
    }
    if (a3 < a1)
    {
        v7 = a3 * a1 + a3 + a2;
    }
    else
    {
        v7 = a1 + a2;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += a4 * a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 18
5 12
6 12
7 14
8 14
9 14
10 25
11 25
12 25
13 25
14 25
15 25
16 26
<<<sep_out_sample>>>
cmp %ecx,%edx
jge 14 <func1+0x14>
mov %esi,%eax
imul %edi,%eax
imul %ecx,%eax
mov %esi,%r9d
sub %eax,%r9d
jmp 20 <func1+0x20>
lea (%rcx,%rcx,1),%r9d
imul %edx,%r9d
imul %edi,%r9d
mov %edi,%eax
sub %r8d,%eax
cmp %edi,%edx
jge 32 <func1+0x32>
mov %edi,%eax
imul %edx,%eax
sub %esi,%eax
add %edi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a3 < a4)
    {
        v6 = a2 - a2 * a1 * a4;
    }
    else
    {
        v6 = (a4 + a4) * a3 * a1;
    }
    if (a3 < a1)
    {
        v7 = a1 + ((a1 * a3) - a2);
    }
    else
    {
        v7 = a1 - a5;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += (a3 - a5) + a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 6
9 10
10 10
11 10
12 18
13 18
14 12
15 12
16 14
17 14
18 14
19 14
20 25
21 25
22 25
23 25
24 25
25 25
26 26
<<<sep_out_sample>>>
test %ecx,%ecx
jle b <func1+0xb>
mov %r8d,%eax
sub %ecx,%eax
jmp 11 <func1+0x11>
lea (%rcx,%rsi,2),%eax
sub %r8d,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (a1 < a2)
        {
            v6 += (a3 * a5) * a3;
        }
        else
        {
            v6 += a5 * a2 * a4;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += a5 - a2 + a3;
    }
    if (v8 < a4)
    {
        v10 = (a2 + a5 - a2) - a4;
    }
    else
    {
        v10 = (a4 + a2) + a2 - a5;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 23
4 23
5 23
6 27
7 27
8 29
9 29
10 29
11 29
12 29
13 30
<<<sep_out_sample>>>
lea 0x2(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12, v13 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a2 - a3 - a3;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        if (a1 < a2)
        {
            v8 += a4 * (a5 * a4);
        }
        else
        {
            v8 += a1 + a2;
        }
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a4)
    {
        if (a5 < a3)
        {
            v10 += a2 + a5 - a5;
        }
        else
        {
            v10 += (a4 + a3) * a3;
        }
    }
    v12 = 0;
    for (v13 = 0; v13++; v13<a1)
    {
        v12 += a2 - a5 * a1;
    }
    return v12+v13+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 38
2 38
3 38
4 38
5 39
<<<sep_out_sample>>>
add %edi,%edx
add %edx,%esi
add %r8d,%esi
add %esi,%ecx
mov %r8d,%eax
sub %edi,%eax
lea 0x1(%rcx,%rax,1),%eax
sub %r8d,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a5 - a1;
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += a5 - a1;
    }
    v9 = a1 - a5;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 11
5 4
6 4
7 11
8 10
9 11
10 12
<<<sep_out_sample>>>
cmp $0x1,%r8d
jle 10 <func1+0x10>
lea (%rdx,%rdx,1),%eax
imul %edi,%eax
sub %ecx,%eax
jmp 1e <func1+0x1e>
mov %edi,%eax
sub %edx,%eax
mov %edx,%r9d
imul %edi,%r9d
sub %r9d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
imul %ecx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (a2 < a3)
        {
            v6 += (a1 - a4) * a2;
        }
        else
        {
            v6 += (a3 + a2) + a3;
        }
    }
    if (v7 < a5)
    {
        v8 = a1 * (a3 + a3) - a4;
    }
    else
    {
        v8 = (a1 - a3) - a3 * a1;
    }
    v9 = a1 * a4;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 18
7 22
8 22
9 22
10 22
11 22
12 25
13 25
14 25
15 25
16 25
17 24
18 25
19 26
<<<sep_out_sample>>>
mov $0x0,%eax
cmp %edx,%r8d
jge 15 <func1+0x15>
mov %edx,%eax
imul %esi,%eax
imul %r8d,%eax
add %esi,%eax
mov %ecx,%r10d
imul %ecx,%r10d
mov %esi,%r9d
imul %edi,%r9d
add %r9d,%r10d
lea (%rsi,%rcx,1),%r9d
add %edi,%r9d
cmp %edi,%esi
jge 3b <func1+0x3b>
mov %edx,%r9d
imul %r8d,%r9d
sub %esi,%r9d
add %edx,%edi
add %esi,%edi
add %r8d,%edi
add %edi,%ecx
add %ecx,%eax
add %r10d,%eax
add %eax,%r9d
add %esi,%edx
imul %edx,%esi
sub %r8d,%esi
lea (%r9,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a5 < a3)
    {
        v6 = a3 * a2 * a5 + a2;
    }
    else
    {
        v6 = a1 - a1;
    }
    if (a3 < a3)
    {
        v7 = a4 * a5;
    }
    else
    {
        v7 = a4 * a4 + a2 * a1;
    }
    if (a2 < a1)
    {
        v8 = a3 * a5 - a2;
    }
    else
    {
        v8 = (a2 + a4) + a1;
    }
    v9 = ((a3 + a2) * a2) - a5;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 6
7 6
8 18
9 18
10 18
11 18
12 18
13 26
14 26
15 20
16 20
17 22
18 22
19 22
20 29
21 29
22 29
23 29
24 29
25 29
26 29
27 28
28 28
29 28
30 29
31 30
<<<sep_out_sample>>>
mov %edi,%eax
sub %esi,%eax
lea (%rsi,%r8,1),%r9d
cmp %ecx,%r8d
cmovg %eax,%r9d
test %ecx,%ecx
jle 1c <func1+0x1c>
mov %ecx,%r10d
imul %edx,%r10d
jmp 27 <func1+0x27>
lea (%rdi,%rsi,1),%eax
add %ecx,%eax
mov %edx,%r10d
sub %eax,%r10d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %r9d,%eax
add %r10d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (a3 < a3)
        {
            v6 += a2 - a2;
        }
        else
        {
            v6 += a3 * a5;
        }
    }
    if (a4 < a5)
    {
        v8 = a1 - a2;
    }
    else
    {
        v8 = a2 + a5;
    }
    if (v6 < a4)
    {
        v9 = a4 * a3;
    }
    else
    {
        v9 = a3 - (a1 + a2 + a4);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 18
5 18
6 24
7 24
8 26
9 26
10 26
11 30
12 30
13 30
14 30
15 32
16 32
17 32
18 32
19 32
20 32
21 33
<<<sep_out_sample>>>
mov %esi,%eax
imul %ecx,%eax
lea 0x1(%rdi,%rax,1),%eax
add %eax,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a4 * a4 - a2;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        if (v9 < a4)
        {
            v8 += (a3 - a1) * a5;
        }
        else
        {
            v8 += a5 - a2;
        }
    }
    v10 = a2 * a4;
    v11 = 0;
    for (v12 = 0; v12++; v12<a2)
    {
        v11 += (a4 + a3) + a4;
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 27
4 27
5 27
6 27
7 27
8 28
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (a4 < a5)
        {
            v6 += a4 * a1 * a3;
        }
        else
        {
            v6 += a1 + a5 * a1;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += (a3 + a1) + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 21
5 22
<<<sep_out_sample>>>
lea (%rdi,%rcx,1),%r9d
sub %r8d,%r9d
sub %edx,%r9d
cmp %edx,%r8d
jge 16 <func1+0x16>
mov %edx,%eax
imul %edx,%eax
jmp 20 <func1+0x20>
lea (%rdx,%rdi,1),%eax
lea (%rcx,%r8,1),%r10d
sub %r10d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a3 < a3)
    {
        v6 = a3 - a5;
    }
    else
    {
        v6 = (a1 + a4) - a5 - a3;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += a1 + a3 + a2;
    }
    if (a5 < a3)
    {
        v9 = a3 * a3;
    }
    else
    {
        v9 = a3 + a1 - (a4 + a5);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 17
5 17
6 19
7 19
8 19
9 23
10 23
11 23
12 25
13 25
14 25
15 25
16 25
17 25
18 26
<<<sep_out_sample>>>
cmp %r8d,%edx
jge 19 <func1+0x19>
mov %r8d,%r9d
imul %ecx,%r9d
mov $0x1,%eax
sub %r9d,%eax
imul %edi,%eax
jmp 21 <func1+0x21>
lea (%r8,%rsi,1),%eax
add %edi,%eax
sub %ecx,%eax
add %edi,%edx
add %edx,%esi
add %r8d,%esi
add %ecx,%esi
add %esi,%eax
add $0x1,%ecx
imul %ecx,%r8d
add %r8d,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a3 < a5)
    {
        v6 = a1 - a5 * a4 * a1;
    }
    else
    {
        v6 = (a5 + a2) + a1 - a4;
    }
    v7 = (a5 + (a4 * a5)) + a1;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 6
9 10
10 10
11 10
12 13
13 13
14 13
15 13
16 13
17 12
18 12
19 12
20 13
21 14
<<<sep_out_sample>>>
cmp %r8d,%esi
jge e <func1+0xe>
mov %r8d,%r10d
imul %r8d,%r10d
jmp 17 <func1+0x17>
mov %esi,%r10d
sub %ecx,%r10d
add %edi,%r10d
cmp %edx,%ecx
jle 26 <func1+0x26>
lea 0x1(%r8),%eax
imul %esi,%eax
add %ecx,%eax
jmp 2e <func1+0x2e>
mov %esi,%eax
imul %r8d,%eax
neg %eax
cmp %edx,%eax
jge 42 <func1+0x42>
mov %ecx,%r9d
imul %esi,%r9d
imul %r8d,%r9d
add %edi,%r9d
jmp 4f <func1+0x4f>
mov %r8d,%r9d
imul %esi,%r9d
add %edi,%r9d
add %edx,%r9d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %ecx,%r8d
add %r10d,%r8d
add %r8d,%eax
add %r9d,%eax
imul %edi,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a2 < a5)
    {
        v6 = a5 * a5;
    }
    else
    {
        v6 = a1 - (a4 - a2);
    }
    if (a3 < a4)
    {
        v7 = a2 + a5 * a2 + a4;
    }
    else
    {
        v7 = a4 - a2 * a5 - a4;
    }
    if (v7 < a3)
    {
        v8 = a1 + a4 * a2 * a5;
    }
    else
    {
        v8 = a5 * a2 + a1 + a3;
    }
    if (a2 < a2)
    {
        v9 = a3 - a3;
    }
    else
    {
        v9 = a1 * a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 12
10 12
11 14
12 14
13 14
14 14
15 18
16 18
17 18
18 20
19 20
20 22
21 22
22 22
23 22
24 22
25 26
26 26
27 26
28 26
29 36
30 36
31 36
32 36
33 36
34 36
35 36
36 34
37 36
38 37
<<<sep_out_sample>>>
mov %edi,%r9d
sub %edx,%r9d
add %r8d,%r9d
imul %edx,%r9d
lea (%rdx,%r8,1),%eax
add %edi,%eax
cmp %esi,%edi
jge 20 <func1+0x20>
mov %esi,%eax
imul %edx,%eax
lea (%rax,%r8,2),%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = (a5 + (a1 - a3)) * a3;
    if (a1 < a2)
    {
        v7 = a2 * a3 + (a5 + a5);
    }
    else
    {
        v7 = a3 + a5 + a1;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += a2 - a2 * a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 11
6 11
7 5
8 5
9 7
10 7
11 7
12 18
13 18
14 18
15 18
16 18
17 18
18 19
<<<sep_out_sample>>>
mov %edx,%r9d
imul %r8d,%r9d
imul %edx,%r9d
sub %ecx,%r9d
mov %r8d,%eax
imul %esi,%eax
lea (%rsi,%rcx,1),%r10d
cmp $0x1,%esi
jg 24 <func1+0x24>
lea (%r8,%r8,1),%r10d
neg %r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a5 < a5)
    {
        v6 = a5 - a5 + a1 - a3;
    }
    else
    {
        v6 = (a3 * a5 * a3) - a4;
    }
    v7 = a5 * a2;
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += a5 * a5 - a4;
    }
    if (v9 < a2)
    {
        v10 = a2 + a4;
    }
    else
    {
        v10 = (a2 - a5 - a5) - a2;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 12
6 12
7 20
8 18
9 18
10 24
11 24
12 26
13 26
14 26
15 26
16 26
17 26
18 26
19 27
<<<sep_out_sample>>>
mov %edx,%r9d
imul %ecx,%r9d
imul %edx,%r9d
sub %r8d,%r9d
cmp %esi,%edi
jge 21 <func1+0x21>
lea (%r8,%rdx,2),%eax
mov %ecx,%r10d
sub %eax,%r10d
mov %r10d,%eax
jmp 2c <func1+0x2c>
mov %edi,%eax
imul %edx,%eax
sub $0x1,%eax
imul %ecx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = (a3 * a4 * a3) - a5;
    if (a1 < a2)
    {
        v7 = a4 - (a3 + a3 + a5);
    }
    else
    {
        v7 = (a1 * a3 * a4) - a4;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += a3 * a1 * a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 5
6 5
7 7
8 7
9 7
10 7
11 7
12 11
13 11
14 11
15 11
16 18
17 18
18 18
19 18
20 18
21 18
22 19
<<<sep_out_sample>>>
mov %esi,%r9d
sub %edi,%r9d
cmp %r8d,%ecx
jge 14 <func1+0x14>
mov %edi,%r9d
sub %r8d,%r9d
sub %edx,%r9d
lea 0x1(%r8),%eax
imul %esi,%eax
add %edx,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a4 < a5)
    {
        v6 = (a1 - a5) - a3;
    }
    else
    {
        v6 = a2 - a1;
    }
    v7 = a2 - a2;
    v8 = (a2 + a2 * a5) + a3;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 4
4 4
5 6
6 6
7 6
8 13
9 13
10 13
11 14
12 14
13 14
14 14
15 14
16 14
17 15
<<<sep_out_sample>>>
test %r8d,%r8d
jle 11 <func1+0x11>
mov %ecx,%eax
imul %r8d,%eax
sub %edi,%eax
sub %edx,%eax
jmp 19 <func1+0x19>
mov %ecx,%eax
imul %esi,%eax
lea (%rax,%rdi,2),%eax
cmp %edi,%eax
jge 2a <func1+0x2a>
lea (%rdx,%r8,1),%r9d
imul %ecx,%r9d
sub %edi,%r9d
jmp 3b <func1+0x3b>
mov %esi,%r10d
imul %edx,%r10d
mov %edi,%r9d
imul %ecx,%r9d
add %r10d,%r9d
lea 0x1(%r9,%rdi,1),%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    if (v6 < a5)
    {
        v6 = (a4 * a5 - a1) - a3;
    }
    else
    {
        v6 = (a4 * a2 + a1) + a1;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += a2 + a5 - a3;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a1)
    {
        v9 += a3 + a5 - a5;
    }
    if (v6 < a1)
    {
        v11 = ((a3 + a5) * a4) - a1;
    }
    else
    {
        v11 = a2 * a3 + a1 * a4;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 22
12 22
13 24
14 24
15 24
16 24
17 28
18 28
19 28
20 28
21 28
22 30
23 30
24 30
25 30
26 30
27 30
28 31
<<<sep_out_sample>>>
mov %edi,%r9d
sub %edx,%r9d
mov %esi,%eax
imul %edx,%eax
cmp %ecx,%esi
cmovl %eax,%r9d
test %r8d,%r8d
jle 20 <func1+0x20>
lea (%rcx,%rcx,1),%eax
sub %edx,%eax
sub %r8d,%eax
jmp 29 <func1+0x29>
mov %r8d,%eax
sub %edx,%eax
add %ecx,%eax
add %edi,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a2 < a4)
    {
        v6 = a2 * a3;
    }
    else
    {
        v6 = a1 - a3;
    }
    if (v7 < a5)
    {
        v7 = (a4 + a4 - a3) - a5;
    }
    else
    {
        v7 = (a5 - a3) + a4 + a1;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 10
2 10
3 6
4 6
5 6
6 6
7 12
8 12
9 14
10 14
11 14
12 14
13 18
14 18
15 18
16 18
17 20
18 20
19 20
20 20
21 20
22 20
23 21
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %r8d,%edx
lea 0x1(%rcx,%rdx,1),%edx
imul %ecx,%edi
imul %r8d,%esi
sub %esi,%edi
lea (%rdx,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a3 * (a5 - a2);
    }
    v8 = (a4 * a1) - a5 * a2;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 9
6 9
7 9
8 10
9 11
<<<sep_out_sample>>>
lea (%r8,%rdi,1),%r9d
imul %ecx,%r9d
add %esi,%r9d
mov $0x0,%eax
cmp %esi,%ecx
jge 1f <func1+0x1f>
mov %r8d,%eax
sub %ecx,%eax
sub $0x1,%eax
imul %ecx,%eax
lea (%rdi,%rsi,1),%r10d
imul %ecx,%r10d
lea (%rdi,%rdx,2),%edx
lea (%rdx,%r10,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a4 * (a5 + a1) + a2;
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += a2 + a1 + a2;
    }
    if (a4 < a2)
    {
        v9 = ((a5 - a4) * a4) - a4;
    }
    else
    {
        v9 = a2 - a4 - a2 + a4;
    }
    v10 = (a1 + a2) * a4 + a3;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 16
5 10
6 10
7 12
8 12
9 12
10 12
11 18
12 18
13 19
14 19
15 19
16 19
17 19
18 19
19 19
20 20
<<<sep_out_sample>>>
lea (%r8,%r8,1),%eax
mov %edi,%r9d
sub %r8d,%r9d
cmp $0x2,%edi
cmovl %r9d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += (a3 * a4) * a3;
    }
    if (v7 < a1)
    {
        v8 = a5 + a5;
    }
    else
    {
        v8 = a1 - a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 11
5 11
6 17
7 17
8 17
9 17
10 17
11 18
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %edx,%r8d
lea 0x1(%rcx,%r8,1),%edx
imul %ecx,%esi
lea (%rsi,%rdi,2),%eax
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (a5 < a4)
        {
            v6 += (a2 + a1) * a2;
        }
        else
        {
            v6 += a3 * a3;
        }
    }
    if (a5 < a5)
    {
        v8 = a1 - (a1 * (a2 - a5));
    }
    else
    {
        v8 = a1 + (a4 * a2) + a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 24
2 24
3 24
4 24
5 22
6 22
7 24
8 25
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
mov %edx,%ecx
sub %edi,%ecx
imul %ecx,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a3 * a5 + a3;
    }
    v8 = (a3 * a3) - a1 * a3;
    v9 = 0;
    for (v10 = 0; v10++; v10<a1)
    {
        v9 += a1 - a5 * a2;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 15
2 15
3 15
4 15
5 9
6 9
7 9
8 15
9 16
<<<sep_out_sample>>>
mov %edi,%eax
sub %ecx,%eax
lea (%rcx,%rdx,1),%r9d
test %ecx,%ecx
cmovg %eax,%r9d
mov %eax,%r10d
cmp %edi,%r9d
jl 23 <func1+0x23>
mov %edx,%r10d
imul %ecx,%r10d
sub %r8d,%r10d
add %edi,%r10d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
lea (%r9,%r10,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (v6 < a4)
    {
        v6 = a1 - a4;
    }
    else
    {
        v6 = a4 + a3;
    }
    if (v6 < a1)
    {
        v7 = (a1 - a4) + a1 - a1;
    }
    else
    {
        v7 = a1 - (a5 - (a3 * a4));
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 6
6 14
7 12
8 12
9 18
10 18
11 18
12 18
13 20
14 20
15 20
16 20
17 20
18 20
19 21
<<<sep_out_sample>>>
cmp %edi,%r8d
jge 11 <func1+0x11>
mov %esi,%r10d
sub %ecx,%r10d
imul %esi,%r10d
jmp 1f <func1+0x1f>
mov %esi,%r10d
sub %ecx,%r10d
imul %edx,%r10d
imul %edi,%r10d
cmp %esi,%r8d
jge 2d <func1+0x2d>
mov %edi,%r9d
imul %edi,%r9d
jmp 39 <func1+0x39>
mov %edx,%r9d
sub %edi,%r9d
add %ecx,%r9d
add %esi,%r9d
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
add %ecx,%esi
add %r10d,%esi
add %r9d,%esi
add %edx,%r8d
imul %r8d,%ecx
sub %edi,%ecx
lea (%rsi,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a5 < a1)
    {
        v6 = a2 * a2 - a2 * a4;
    }
    else
    {
        v6 = (a2 - a4) * a3 * a1;
    }
    if (a5 < a2)
    {
        v7 = a1 * a1;
    }
    else
    {
        v7 = (a4 - (a1 - a3)) + a2;
    }
    v8 = ((a3 + a5) * a4) - a1;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 10
11 12
12 12
13 14
14 14
15 14
16 18
17 18
18 18
19 18
20 21
21 21
22 21
23 21
24 21
25 21
26 20
27 20
28 20
29 21
30 22
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a4 - a2;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        if (a2 < a2)
        {
            v8 += (a2 * a4) * a5;
        }
        else
        {
            v8 += (a5 - a3) - a1;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 21
5 22
<<<sep_out_sample>>>
mov %r8d,%r9d
sub %ecx,%r9d
cmp %ecx,%edi
jge 18 <func1+0x18>
mov %r8d,%eax
sub %esi,%eax
imul %esi,%eax
imul %r8d,%eax
jmp 26 <func1+0x26>
mov %edx,%eax
sub %edi,%eax
mov %edi,%r10d
imul %ecx,%r10d
sub %r10d,%eax
add %r9d,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (v7 < a1)
        {
            v6 += a5 + a2 * a1;
        }
        else
        {
            v6 += (a3 * a3) * a2;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        if (v7 < a4)
        {
            v8 += a1 - a1 - a3;
        }
        else
        {
            v8 += a5 - a1 * a5;
        }
    }
    v10 = (a3 + a5) - (a4 + a3);
    if (a1 < a4)
    {
        v11 = ((a5 - a2) * a2) * a5;
    }
    else
    {
        v11 = a3 - a1 - a1 * a4;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 28
2 28
3 29
4 29
5 31
6 31
7 31
8 31
9 31
10 35
11 35
12 35
13 35
14 35
15 37
16 37
17 37
18 37
19 37
20 37
21 38
<<<sep_out_sample>>>
mov %ecx,%r9d
sub %esi,%r9d
cmp %edi,%esi
jl 19 <func1+0x19>
mov %r8d,%r9d
imul %ecx,%r9d
imul %esi,%r9d
imul %edx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
sub %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a2 < a1)
    {
        v6 = a4 - a2;
    }
    else
    {
        v6 = (a5 * a4 * a2) * a3;
    }
    v7 = (a4 - a4) - a1;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 4
4 4
5 10
6 10
7 10
8 10
9 13
10 13
11 13
12 13
13 13
14 13
15 14
<<<sep_out_sample>>>
add %edi,%edx
add %edx,%esi
add %r8d,%esi
add %ecx,%esi
imul %ecx,%r8d
add %esi,%r8d
add %edi,%ecx
lea 0x1(%r8,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a2 < a2)
    {
        v6 = (a5 + a5 + a2) * a2;
    }
    else
    {
        v6 = a4 * a5;
    }
    v7 = a4 + a1;
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += a4 + a3 * a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 18
5 10
6 18
7 12
8 18
9 19
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
lea (%r8,%rcx,1),%eax
sub %esi,%edi
add %edi,%ecx
imul %ecx,%edx
lea 0x1(%rax,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = (a4 - (a2 - a1)) * a3;
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += a3 - a1 + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 4
6 4
7 4
8 10
9 11
<<<sep_out_sample>>>
cmp %r8d,%edx
jge 10 <func1+0x10>
mov %r8d,%eax
sub %ecx,%eax
sub %edi,%eax
sub %esi,%eax
jmp 15 <func1+0x15>
lea (%rcx,%rdx,2),%eax
sub %esi,%eax
mov %edx,%r9d
imul %esi,%r9d
mov %esi,%r10d
imul %r9d,%r10d
lea (%rdx,%rdi,2),%edx
sub %r10d,%edx
add %edx,%esi
add %r8d,%esi
add %ecx,%esi
lea 0x1(%rax,%rsi,1),%eax
add %r9d,%ecx
imul %ecx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a3 < a5)
    {
        v6 = a5 - a4 - a1 - a2;
    }
    else
    {
        v6 = (a4 + a3) + a3 - a2;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += a4 * a3 - a5;
    }
    v9 = (a4 + a3 * a2) * a5;
    v10 = a1 - (a2 * (a2 * a3));
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 17
11 17
12 18
13 18
14 19
15 19
16 19
17 19
18 19
19 19
20 17
21 17
22 19
23 20
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
lea 0x1(%rcx,%r8,1),%eax
imul %edx,%edx
imul %edx,%edi
imul %edi,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += (a5 - a1) - a4;
    }
    v8 = a2 * ((a3 * a3) * a1);
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 9
6 9
7 9
8 10
9 11
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
add %ecx,%esi
mov %r8d,%eax
sub %ecx,%eax
imul %r8d,%eax
imul %eax,%r8d
add %esi,%r8d
sub %ecx,%edi
sub %edx,%edi
lea 0x1(%r8,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a5 * (a5 * (a5 - a4));
    v7 = a1 - a4 - a3;
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        if (v8 < a5)
        {
            v8 += a5 * a2 + a1;
        }
        else
        {
            v8 += (a3 - a3) + a2;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 18
5 4
6 4
7 4
8 4
9 18
10 5
11 5
12 18
13 19
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a2 * a3;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        if (v8 < a4)
        {
            v8 += a5 - a5 + a1;
        }
        else
        {
            v8 += a1 * (a5 + a3);
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 21
5 22
<<<sep_out_sample>>>
cmp %edx,%esi
jge c <func1+0xc>
lea (%rsi,%rdx,2),%eax
sub %r8d,%eax
jmp 15 <func1+0x15>
lea 0x1(%rdx),%eax
imul %ecx,%eax
add %r8d,%eax
add %edx,%edi
add %edi,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%esi
add %esi,%eax
add %edx,%ecx
sub %r8d,%ecx
imul %ecx,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a1 + a5 * a1;
    }
    if (a2 < a3)
    {
        v8 = (a2 - (a5 - a3)) + a3;
    }
    else
    {
        v8 = (a4 * a3 + a4) + a5;
    }
    v9 = ((a3 + a4) - a5) * a3;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 15
7 15
8 15
9 18
10 18
11 18
12 18
13 18
14 17
15 17
16 17
17 18
18 19
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
mov %r8d,%r9d
sub %esi,%r9d
add %r9d,%eax
imul %ecx,%r8d
add %r8d,%esi
lea 0x1(%rax,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a5 - a2;
    v7 = a4 * a5 + a2;
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += (a1 + a3) + a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 11
5 4
6 4
7 11
8 5
9 5
10 11
11 12
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
mov %esi,%r9d
sub %r8d,%r9d
sub %edi,%r9d
add %r9d,%edx
add %edx,%eax
add %esi,%edi
add %edi,%ecx
add %ecx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a3 + (a2 - a5 - a1);
    v7 = a1 + a2 + a4 + a5;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 4
7 4
8 4
9 6
10 5
11 5
12 5
13 6
14 7
<<<sep_out_sample>>>
lea (%r8,%rsi,1),%r9d
cmp %r8d,%edx
jge 18 <func1+0x18>
mov %esi,%eax
imul %edi,%eax
imul %r8d,%eax
mov %ecx,%r9d
sub %eax,%r9d
cmp %esi,%edx
jle 25 <func1+0x25>
mov %esi,%eax
imul %edi,%eax
add %ecx,%eax
jmp 2e <func1+0x2e>
mov %esi,%eax
sub %ecx,%eax
imul %esi,%eax
add %edx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a3 < a5)
    {
        v6 = a4 - a2 * a1 * a5;
    }
    else
    {
        v6 = a5 + a2;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += a5 + (a5 + a3);
    }
    if (a2 < a3)
    {
        v9 = (a2 * a1) + a4;
    }
    else
    {
        v9 = a3 + a2 * (a2 - a4);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 6
7 6
8 6
9 17
10 17
11 19
12 19
13 19
14 19
15 23
16 23
17 23
18 23
19 25
20 25
21 25
22 25
23 25
24 25
25 26
<<<sep_out_sample>>>
test %ecx,%ecx
jle 10 <func1+0x10>
mov %esi,%r9d
imul %esi,%r9d
add %edi,%r9d
jmp 1b <func1+0x1b>
lea (%rcx,%rsi,1),%r9d
add %edx,%r9d
imul %esi,%r9d
add %edi,%edx
add %esi,%edx
add %r8d,%edx
add %ecx,%edx
add %r9d,%edx
imul %esi,%ecx
imul %ecx,%esi
sub %r8d,%esi
lea (%rdx,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (v6 < a4)
    {
        v6 = (a2 * a2) + a1;
    }
    else
    {
        v6 = (a4 + a2 + a3) * a2;
    }
    v7 = a2 * a4 * a2 - a5;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 13
11 13
12 13
13 13
14 13
15 12
16 12
17 12
18 13
19 14
<<<sep_out_sample>>>
lea (%rsi,%r8,1),%r9d
test %r8d,%r8d
mov $0x0,%eax
cmovg %r9d,%eax
add %edx,%edi
add %esi,%edi
add %r8d,%edi
add %edi,%ecx
lea 0x1(%rax,%rcx,1),%eax
imul %edx,%esi
add %esi,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (v6 < a5)
    {
        v6 = a2 + a5;
    }
    else
    {
        v6 = a3 - a3;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        if (v7 < a3)
        {
            v7 += a1 - a5 + a2;
        }
        else
        {
            v7 += a2 * a5 + a2;
        }
    }
    v9 = a2 * a3 + a5;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 25
6 25
7 25
8 25
9 25
10 24
11 24
12 25
13 26
<<<sep_out_sample>>>
lea (%rdi,%rdx,2),%eax
lea (%rax,%rcx,1),%eax
add %esi,%eax
add %r8d,%eax
lea 0x1(%rcx,%rax,1),%eax
lea (%rax,%rsi,2),%eax
imul %r8d,%ecx
sub %ecx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a2 + a1 - a5;
    }
    if (a1 < a1)
    {
        v8 = a3 * a2;
    }
    else
    {
        v8 = a2 + a2;
    }
    v9 = a1 - a5 * a4;
    v10 = a4 + a3;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 19
2 19
3 19
4 19
5 19
6 19
7 17
8 17
9 19
10 20
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (a3 < a3)
        {
            v6 += a1 - a5 - a4;
        }
        else
        {
            v6 += a1 - a3;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += (a5 - a4) + a4;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a4)
    {
        v10 += a2 + a2 + a4;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 26
2 26
3 26
4 26
5 27
<<<sep_out_sample>>>
mov %r8d,%eax
sub %ecx,%eax
lea 0x1(%rdi,%rax,1),%eax
add %eax,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (a3 < a2)
        {
            v6 += a4 - (a1 + a2);
        }
        else
        {
            v6 += (a2 + a4) * a1;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += (a2 - a3) + a5;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a4)
    {
        v10 += a2 + a4 * a2;
    }
    v12 = a5 + a3 - a3 - a4;
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 26
2 26
3 27
4 27
5 27
6 27
7 27
8 28
<<<sep_out_sample>>>
mov %edx,%r10d
sub %edi,%r10d
cmp %ecx,%edi
jle 17 <func1+0x17>
lea -0x1(%r8),%r9d
imul %edx,%r9d
add %edi,%r9d
jmp 21 <func1+0x21>
lea (%rdi,%r8,1),%r9d
add %ecx,%r9d
add %esi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a4 < a4)
    {
        v6 = a1 + a4 * a5;
    }
    else
    {
        v6 = a3 - a1;
    }
    if (a4 < a1)
    {
        v7 = a1 + (a3 * a5 - a3);
    }
    else
    {
        v7 = a1 + a5 + a4 + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 10
2 10
3 12
4 12
5 14
6 14
7 14
8 14
9 18
10 18
11 18
12 20
13 20
14 20
15 20
16 20
17 20
18 21
<<<sep_out_sample>>>
cmp %edx,%ecx
jge e <func1+0xe>
lea (%rdi,%rcx,1),%eax
sub %r8d,%eax
sub %esi,%eax
jmp 14 <func1+0x14>
lea (%rcx,%rsi,1),%eax
imul %esi,%eax
lea (%rcx,%rdx,1),%r9d
test %esi,%esi
jg 23 <func1+0x23>
mov %ecx,%r9d
imul %ecx,%r9d
lea (%rdi,%rdx,1),%r10d
add %r10d,%esi
add %r8d,%esi
add %esi,%ecx
add %ecx,%eax
add %r9d,%eax
imul %r8d,%edx
add %edx,%edi
sub %edi,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a4 < a3)
    {
        v6 = (a1 + a4 - a5) - a2;
    }
    else
    {
        v6 = (a4 + a2) * a2;
    }
    if (v7 < a2)
    {
        v7 = a4 + a3;
    }
    else
    {
        v7 = a4 * a4;
    }
    if (a4 < a4)
    {
        v8 = a2 - a1 * a3 - a4;
    }
    else
    {
        v8 = a5 - (a3 * a5 + a1);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 14
10 12
11 12
12 18
13 18
14 28
15 28
16 28
17 28
18 28
19 28
20 26
21 26
22 26
23 28
24 29
<<<sep_out_sample>>>
lea 0x2(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12, v13 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (a2 < a2)
        {
            v6 += a3 - a2 + a5;
        }
        else
        {
            v6 += a1 * a4;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += a3 - (a2 * a2);
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a2)
    {
        v10 += a5 * a2 + a2;
    }
    v12 = 0;
    for (v13 = 0; v13++; v13<a1)
    {
        if (v12 < a4)
        {
            v12 += (a5 * a5) * a4;
        }
        else
        {
            v12 += a4 * a1;
        }
    }
    return v12+v13+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 38
2 38
3 38
4 38
5 39
<<<sep_out_sample>>>
cmp %esi,%r8d
jge 11 <func1+0x11>
mov %edi,%eax
imul %edx,%eax
imul %esi,%eax
sub %edi,%eax
jmp 1b <func1+0x1b>
mov %esi,%eax
imul %esi,%eax
imul %esi,%eax
add %ecx,%eax
add %edi,%edx
add %esi,%edx
add %r8d,%edx
add %edx,%ecx
lea 0x1(%rax,%rcx,1),%eax
imul %r8d,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a5 < a2)
    {
        v6 = (a1 * a3 * a2) - a1;
    }
    else
    {
        v6 = ((a2 * a2) * a2) + a4;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        if (a2 < a3)
        {
            v7 += a1 * a4;
        }
        else
        {
            v7 += a5 + a1 + a5;
        }
    }
    v9 = a5 * a2;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 25
13 25
14 25
15 25
16 25
17 24
18 25
19 26
<<<sep_out_sample>>>
test %edi,%edi
jle 13 <func1+0x13>
lea (%rcx,%r8,2),%eax
mov %edx,%r9d
sub %eax,%r9d
mov %r9d,%eax
jmp 1a <func1+0x1a>
mov %r8d,%eax
sub %ecx,%eax
add %edx,%eax
lea 0x2(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a2 * a5;
    }
    if (v6 < a1)
    {
        v8 = a3 - (a5 + a5 + a4);
    }
    else
    {
        v8 = a5 - a4 + a3;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a1)
    {
        if (a4 < a5)
        {
            v9 += a3 * a1;
        }
        else
        {
            v9 += a5 + a2;
        }
    }
    v11 = 0;
    for (v12 = 0; v12++; v12<a2)
    {
        v11 += a3 - a5 + a1;
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 11
8 15
9 15
10 15
11 34
12 34
13 34
14 34
15 34
16 35
<<<sep_out_sample>>>
cmp %r8d,%edi
jge 11 <func1+0x11>
mov %edx,%eax
sub %edi,%eax
sub $0x1,%eax
imul %edi,%eax
jmp 1d <func1+0x1d>
mov %r8d,%eax
imul %edx,%eax
imul %ecx,%eax
imul %edx,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %esi,%edx
add %edx,%r8d
add %ecx,%r8d
add %r8d,%eax
sub %ecx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a5 - a5;
    if (a1 < a5)
    {
        v7 = ((a3 - a1) * a1) - a1;
    }
    else
    {
        v7 = (a5 * a3) * a4 * a3;
    }
    v8 = a2 - (a4 - a4 + a4);
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        if (v10 < a1)
        {
            v9 += (a4 - a5) - a1;
        }
        else
        {
            v9 += a3 * (a4 - a5);
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 5
2 5
3 7
4 7
5 7
6 7
7 7
8 11
9 11
10 11
11 11
12 26
13 26
14 26
15 26
16 26
17 13
18 26
19 27
<<<sep_out_sample>>>
lea (%r8,%rdx,2),%r9d
cmp %edi,%ecx
jle 16 <func1+0x16>
lea (%r8,%rcx,1),%r10d
mov %esi,%eax
imul %esi,%eax
add %r10d,%eax
jmp 24 <func1+0x24>
mov %esi,%eax
sub %edi,%eax
mov %r8d,%r10d
imul %ecx,%r10d
sub %r10d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = (a3 + a3) + a5;
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        if (a4 < a2)
        {
            v7 += a5 * a1 + a1;
        }
        else
        {
            v7 += (a1 - a1) - a5;
        }
    }
    if (a1 < a4)
    {
        v9 = (a5 + a4) + a2 * a2;
    }
    else
    {
        v9 = (a2 - a1) - a5 * a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 17
3 17
4 19
5 19
6 19
7 19
8 19
9 23
10 23
11 23
12 23
13 23
14 25
15 25
16 25
17 25
18 25
19 25
20 26
<<<sep_out_sample>>>
lea (%rdx,%rdi,1),%r9d
cmp %esi,%r8d
jge 17 <func1+0x17>
mov %r8d,%r9d
imul %ecx,%r9d
imul %r8d,%r9d
add %ecx,%r9d
cmp %edi,%esi
jge 26 <func1+0x26>
lea (%rcx,%rdx,1),%eax
imul %r8d,%eax
add %edi,%eax
jmp 2d <func1+0x2d>
mov %edx,%eax
imul %edx,%eax
sub %ecx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a5 < a2)
    {
        v6 = ((a5 * a4) * a5) + a4;
    }
    else
    {
        v6 = a3 + a1;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        if (a4 < a1)
        {
            v7 += a3 - a2;
        }
        else
        {
            v7 += a4 - a3;
        }
    }
    if (a2 < a1)
    {
        v9 = a1 + (a5 * (a4 + a3));
    }
    else
    {
        v9 = a3 * a3 - a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 6
7 6
8 24
9 24
10 26
11 26
12 26
13 26
14 30
15 30
16 30
17 32
18 32
19 32
20 32
21 32
22 32
23 33
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
lea (%r8,%rdx,1),%r9d
sub %ecx,%r9d
add %esi,%r9d
add %eax,%r9d
mov %r8d,%ecx
sub %esi,%ecx
sub %edi,%ecx
sub %edi,%ecx
add %r9d,%ecx
sub %edx,%r8d
sub %edi,%r8d
lea (%rcx,%r8,1),%eax
imul %edx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a2 - (a4 - (a5 + a3));
    v7 = (a5 - a2 - a1) - a1;
    v8 = a5 - a3 - a1;
    v9 = a3 * a1;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 8
2 8
3 8
4 8
5 4
6 4
7 4
8 8
9 5
10 5
11 5
12 5
13 8
14 6
15 6
16 8
17 7
18 8
19 9
<<<sep_out_sample>>>
test %esi,%esi
jle f <func1+0xf>
lea -0x1(%r8),%eax
imul %edx,%eax
add %edi,%eax
jmp 18 <func1+0x18>
mov %edi,%eax
sub %ecx,%eax
sub %ecx,%eax
sub %r8d,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a4 * a2 + a1;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += a3 * (a4 + a1);
    }
    if (v6 < a2)
    {
        v10 = (a3 * a5 - a3) + a1;
    }
    else
    {
        v10 = (a1 - a4 - a4) - a5;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 14
2 14
3 16
4 16
5 16
6 16
7 20
8 20
9 20
10 20
11 22
12 22
13 22
14 22
15 22
16 23
<<<sep_out_sample>>>
mov %edx,%eax
sub %ecx,%eax
lea (%rdi,%rdi,1),%r9d
test %edi,%edi
cmovle %r9d,%eax
lea (%r8,%rcx,1),%r9d
mov %ecx,%r10d
sub %edx,%r10d
cmp %esi,%r8d
cmovge %r10d,%r9d
lea 0x1(%r9,%rdi,1),%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a4 - a1;
    }
    if (v6 < a1)
    {
        v8 = a3 + (a3 - (a3 + a4));
    }
    else
    {
        v8 = a1 + a1;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        v9 += a3 + (a4 + a1);
    }
    if (a5 < a2)
    {
        v11 = a5 + a4;
    }
    else
    {
        v11 = a4 - a3;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 11
5 11
6 24
7 24
8 24
9 24
10 24
11 30
12 30
13 30
14 30
15 30
16 30
17 31
<<<sep_out_sample>>>
lea (%rsi,%r8,1),%r9d
test %edi,%edi
jg 16 <func1+0x16>
mov %r8d,%r9d
imul %edx,%r9d
imul %edi,%r9d
add %esi,%r9d
cmp %r8d,%edi
jge 24 <func1+0x24>
mov %edx,%eax
sub %ecx,%eax
imul %edi,%eax
jmp 2d <func1+0x2d>
lea 0x1(%rsi),%eax
imul %r8d,%eax
add %ecx,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (v6 < a1)
    {
        v6 = a2 + a5;
    }
    else
    {
        v6 = a1 * (a5 * a3) + a2;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a2 - (a1 - a1);
    }
    if (a1 < a5)
    {
        v9 = a1 * a3 - a4 * a1;
    }
    else
    {
        v9 = a5 + a2 * a5 + a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 4
3 4
4 10
5 10
6 10
7 10
8 17
9 17
10 19
11 19
12 19
13 19
14 23
15 23
16 23
17 25
18 25
19 25
20 25
21 25
22 25
23 26
<<<sep_out_sample>>>
add %edx,%edi
add %esi,%edi
add %r8d,%edi
sub %r8d,%esi
imul %esi,%edx
lea 0x1(%rdi,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = (a2 - a5) * a3 - a4;
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        if (a3 < a3)
        {
            v7 += (a5 - a3) * a1;
        }
        else
        {
            v7 += a2 - a3 * a5;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 4
5 4
6 17
7 18
<<<sep_out_sample>>>
mov %edx,%eax
sub %edi,%eax
sub %edi,%eax
cmp %ecx,%esi
jge 13 <func1+0x13>
lea 0x1(%rsi),%eax
imul %r8d,%eax
add %edx,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a2 < a4)
    {
        v6 = a5 + a5 * a2 + a3;
    }
    else
    {
        v6 = (a3 - a1) - a1;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        if (a5 < a2)
        {
            v7 += a1 + a1 * a4;
        }
        else
        {
            v7 += (a4 - a1) * a1;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 4
5 4
6 6
7 6
8 6
9 24
10 24
11 24
12 24
13 24
14 25
<<<sep_out_sample>>>
push %rbx
cmp %edx,%edi
jge e <func1+0xe>
mov %edi,%r11d
imul %ecx,%r11d
jmp 19 <func1+0x19>
lea (%r8,%rsi,1),%r11d
imul %r8d,%r11d
sub %esi,%r11d
mov %edi,%r10d
cmp %esi,%ecx
jl 2a <func1+0x2a>
mov %edx,%r10d
imul %edi,%r10d
add %ecx,%r10d
mov %ecx,%r9d
sub %edx,%r9d
mov %r9d,%eax
sub %edx,%eax
mov %edi,%ebx
sub %ecx,%ebx
mov %eax,%r9d
cmp %edx,%edi
mov %ebx,%eax
cmovge %r9d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r11d,%ecx
add %ecx,%r10d
add %r10d,%eax
imul %edx,%edx
add %edx,%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a1 < a3)
    {
        v6 = a1 * a4;
    }
    else
    {
        v6 = ((a5 + a2) * a5) - a2;
    }
    if (a4 < a2)
    {
        v7 = a1 + a2 - a2;
    }
    else
    {
        v7 = (a3 * a1) + a4;
    }
    if (a1 < a3)
    {
        v8 = a1 - a4;
    }
    else
    {
        v8 = a4 - a3 - a3;
    }
    if (a3 < a3)
    {
        v9 = a4 + (a2 + (a3 * a1));
    }
    else
    {
        v9 = a3 * a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 4
3 4
4 6
5 6
6 6
7 10
8 10
9 10
10 14
11 12
12 12
13 18
14 18
15 18
16 26
17 26
18 26
19 26
20 22
21 22
22 22
23 22
24 22
25 22
26 36
27 36
28 36
29 36
30 36
31 36
32 36
33 34
34 36
35 37
36 37
<<<sep_out_sample>>>
cmp %edi,%ecx
jge e <func1+0xe>
lea (%rcx,%rdi,1),%eax
sub %esi,%eax
imul %edx,%eax
jmp 17 <func1+0x17>
lea (%rcx,%rdi,1),%eax
imul %r8d,%eax
add %edx,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a4 < a1)
    {
        v6 = (a4 + a1 - a2) * a3;
    }
    else
    {
        v6 = a3 + (a5 * (a4 + a1));
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        if (v8 < a5)
        {
            v7 += a5 * a5 - a5;
        }
        else
        {
            v7 += a3 * (a5 - a5);
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 24
11 24
12 24
13 24
14 24
15 25
<<<sep_out_sample>>>
lea (%rdx,%rdx,1),%eax
mov %ecx,%r9d
imul %edx,%r9d
cmp %edx,%edi
cmovl %r9d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea (%r8,%rcx,1),%esi
add %esi,%eax
add %ecx,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a1 < a3)
    {
        v6 = a4 * a3;
    }
    else
    {
        v6 = a3 + a3;
    }
    v7 = a3 + (a2 - a2) + a4;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 10
2 6
3 6
4 6
5 6
6 13
7 13
8 13
9 13
10 13
11 12
12 13
13 14
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea (%r8,%rcx,1),%eax
imul %ecx,%ecx
add %ecx,%eax
imul %edx,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a4 * a4;
    v7 = a3 * a3;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 6
7 5
8 6
9 7
<<<sep_out_sample>>>
cmp %edi,%esi
jge e <func1+0xe>
lea (%r8,%rdi,1),%r9d
imul %esi,%r9d
jmp 17 <func1+0x17>
lea 0x1(%rsi,%rsi,1),%r9d
imul %ecx,%r9d
cmp %r8d,%r9d
jge 2e <func1+0x2e>
mov $0x1,%r10d
sub %edi,%r10d
imul %ecx,%r10d
add %edx,%r10d
jmp 3c <func1+0x3c>
mov %ecx,%r10d
imul %edx,%r10d
add %edi,%r10d
imul %edi,%r10d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
lea (%r9,%r10,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a2 < a1)
    {
        v6 = (a5 * a2) + (a2 * a1);
    }
    else
    {
        v6 = (a2 + a2) * a4 + a4;
    }
    if (v6 < a5)
    {
        v7 = a4 - a1 * a4 + a3;
    }
    else
    {
        v7 = (a1 + a4 * a3) * a1;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 12
9 12
10 14
11 14
12 14
13 14
14 14
15 18
16 18
17 18
18 18
19 20
20 20
21 20
22 20
23 20
24 20
25 21
<<<sep_out_sample>>>
cmp %edx,%r8d
jle d <func1+0xd>
lea (%r8,%rsi,2),%eax
sub %edx,%eax
jmp 13 <func1+0x13>
mov %ecx,%eax
imul %r8d,%eax
cmp %ecx,%r8d
jge 24 <func1+0x24>
mov %edi,%r9d
imul %r8d,%r9d
add %ecx,%r9d
jmp 2b <func1+0x2b>
mov %r8d,%r9d
imul %r8d,%r9d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a1 + a5 + a4;
    }
    if (a3 < a5)
    {
        v8 = a2 + (a2 + a5) - a3;
    }
    else
    {
        v8 = a4 * a5;
    }
    if (a5 < a4)
    {
        v9 = a4 + a1 * a5;
    }
    else
    {
        v9 = a5 * a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 15
7 15
8 17
9 17
10 19
11 19
12 19
13 19
14 23
15 23
16 25
17 25
18 25
19 25
20 25
21 25
22 26
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
add %esi,%ecx
mov %r8d,%eax
sub %edi,%eax
add %eax,%ecx
mov $0x1,%eax
sub %edx,%eax
imul %eax,%r8d
lea (%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a5 - a1;
    if (a5 < a5)
    {
        v7 = (a1 - a1 * a1) + a4;
    }
    else
    {
        v7 = a5 - a3 * a5;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 13
2 13
3 13
4 13
5 4
6 4
7 13
8 11
9 11
10 11
11 13
12 14
<<<sep_out_sample>>>
push %rbx
cmp %r8d,%edi
jge 14 <func1+0x14>
mov %r8d,%ebx
imul %edi,%ebx
imul %esi,%ebx
imul %edx,%ebx
jmp 1e <func1+0x1e>
mov %edx,%ebx
imul %edx,%ebx
add %esi,%ebx
imul %esi,%ebx
test %esi,%esi
jle 2a <func1+0x2a>
mov %edi,%r11d
sub %edx,%r11d
jmp 35 <func1+0x35>
lea (%rcx,%rdx,1),%r11d
imul %edx,%r11d
sub %ecx,%r11d
test %edi,%edi
jle 4a <func1+0x4a>
mov %edx,%r10d
imul %ecx,%r10d
sub $0x1,%r10d
imul %esi,%r10d
jmp 56 <func1+0x56>
lea (%r8,%r8,1),%r10d
imul %ecx,%r10d
imul %esi,%r10d
mov %esi,%r9d
sub %edi,%r9d
cmp %edx,%r8d
jl 6b <func1+0x6b>
mov %esi,%r9d
imul %esi,%r9d
sub %ecx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %ebx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a1 < a5)
    {
        v6 = (a5 * a1 * a2) * a3;
    }
    else
    {
        v6 = (a2 + (a3 * a3)) * a2;
    }
    if (v7 < a2)
    {
        v7 = (a3 - a3) + a1 - a3;
    }
    else
    {
        v7 = (a4 + a3) * a3 - a4;
    }
    if (v8 < a1)
    {
        v8 = (a2 * (a3 * a4)) - a2;
    }
    else
    {
        v8 = a2 * ((a5 + a5) * a4);
    }
    if (a5 < a3)
    {
        v9 = a2 - a1;
    }
    else
    {
        v9 = a2 * a2 - a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 4
3 4
4 6
5 6
6 6
7 6
8 6
9 10
10 10
11 10
12 10
13 12
14 12
15 14
16 14
17 14
18 18
19 18
20 18
21 20
22 20
23 22
24 22
25 22
26 22
27 22
28 26
29 26
30 26
31 30
32 30
33 28
34 28
35 34
36 34
37 34
38 36
39 36
40 36
41 36
42 36
43 36
44 36
45 36
46 37
47 37
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
lea (%rax,%r8,2),%r9d
mov %esi,%r10d
imul %esi,%r10d
mov %r8d,%eax
sub %edx,%eax
imul %r10d,%eax
add %r9d,%eax
sub %r8d,%ecx
add %ecx,%esi
imul %esi,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a5 - a4;
    v7 = a2 * a2 * (a5 - a3);
    v8 = a1 * ((a4 - a5) + a2);
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 7
2 7
3 7
4 5
5 5
6 5
7 5
8 5
9 7
10 6
11 6
12 6
13 7
14 8
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
sub %ecx,%edi
imul %edi,%ecx
add %ecx,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a3 * (a5 * a5);
    }
    v8 = (a4 * (a1 - a4)) + a3;
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        if (v6 < a3)
        {
            v9 += a4 + a3;
        }
        else
        {
            v9 += (a1 + a2) - a5;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 22
4 22
5 9
6 9
7 9
8 22
9 23
<<<sep_out_sample>>>
mov %ecx,%r9d
imul %edi,%r9d
lea (%rdi,%rdx,1),%r10d
add %esi,%r10d
add %r8d,%r10d
add %ecx,%r10d
mov %r8d,%edx
sub %esi,%edx
mov %edi,%r11d
imul %edi,%r11d
sub %r11d,%edx
add %r10d,%edx
add %r9d,%edx
lea (%rdi,%rdi,2),%eax
sub %esi,%eax
add %edx,%eax
sub %r8d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a5 - a2 - (a1 * a1);
    v7 = (a4 * a1 + a5) - a5;
    v8 = a1 + (a1 + a1) - a2;
    v9 = a4 - a5;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 5
2 5
3 8
4 8
5 8
6 8
7 4
8 4
9 4
10 4
11 4
12 8
13 8
14 6
15 6
16 8
17 7
18 8
19 9
<<<sep_out_sample>>>
mov $0x0,%eax
lea (%r8,%r8,1),%r9d
cmp %esi,%edi
cmovge %r9d,%eax
mov %edi,%r10d
sub %esi,%r10d
imul %r8d,%r10d
imul %ecx,%r10d
test %edx,%edx
jle 31 <func1+0x31>
mov %edi,%r9d
imul %edi,%r9d
imul %esi,%r9d
add %edi,%r9d
jmp 3f <func1+0x3f>
lea (%rdi,%rcx,1),%r9d
mov %r8d,%r11d
imul %edi,%r11d
sub %r11d,%r9d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %ecx,%r8d
add %r8d,%eax
add %r10d,%eax
add %r9d,%eax
imul %edx,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a1 < a2)
    {
        v6 = a5 - a5;
    }
    else
    {
        v6 = (a5 + a2) - (a2 - a5);
    }
    v7 = ((a1 - a2) * a5) * a4;
    if (v8 < a3)
    {
        v8 = a1 + a1 * a1 * a2;
    }
    else
    {
        v8 = a1 + a4 - a5 * a1;
    }
    if (a5 < a5)
    {
        v9 = (a1 - a2) - a1 * a5;
    }
    else
    {
        v9 = a3 * a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 10
3 10
4 10
5 12
6 12
7 12
8 12
9 13
10 13
11 15
12 15
13 15
14 15
15 15
16 19
17 19
18 19
19 19
20 29
21 29
22 29
23 29
24 29
25 29
26 29
27 27
28 29
29 30
<<<sep_out_sample>>>
lea (%rdi,%r8,2),%eax
lea 0x1(%rax,%rsi,1),%eax
lea 0x1(%rcx,%rax,1),%eax
imul %r8d,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a3 - (a3 - a2);
    }
    v8 = a5 * a5;
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        v9 += (a3 * a3) + a4;
    }
    v11 = a5 - a3;
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 16
4 9
5 16
6 17
<<<sep_out_sample>>>
test %esi,%esi
jle 14 <func1+0x14>
mov %esi,%r9d
imul %edi,%r9d
imul %ecx,%r9d
sub %esi,%r9d
jmp 1b <func1+0x1b>
mov %edx,%r9d
imul %ecx,%r9d
mov %ecx,%eax
sub %edi,%eax
cmp %edi,%esi
jge 2b <func1+0x2b>
mov %r8d,%eax
sub %esi,%eax
add %r8d,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    if (v6 < a2)
    {
        v6 = a2 * a1 * a4 - a2;
    }
    else
    {
        v6 = a3 * a4;
    }
    if (a2 < a1)
    {
        v7 = a5 + (a5 - a2);
    }
    else
    {
        v7 = a4 - a1;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += a2 - (a1 - a4);
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a2)
    {
        v10 += a4 + a2;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 18
11 18
12 12
13 12
14 14
15 14
16 14
17 30
18 30
19 30
20 30
21 30
22 30
23 31
<<<sep_out_sample>>>
lea (%r8,%rdi,1),%r9d
cmp %r8d,%edx
cmovge %ecx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
imul %ecx,%ecx
add %ecx,%esi
add %esi,%r8d
lea 0x1(%rax,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a3 < a5)
    {
        v6 = a5 + a1;
    }
    else
    {
        v6 = a5 - a5 + a4;
    }
    v7 = (a2 + (a4 * a4)) + a5;
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += a1 - a3 * a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 18
5 18
6 18
7 18
8 18
9 12
10 12
11 12
12 18
13 19
<<<sep_out_sample>>>
cmp %edi,%r8d
jge 17 <func1+0x17>
mov %ecx,%eax
imul %ecx,%eax
mov %edx,%r9d
sub %eax,%r9d
mov %r9d,%eax
add %edi,%eax
jmp 21 <func1+0x21>
mov %ecx,%eax
imul %ecx,%eax
add %r8d,%eax
add %edi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a5 < a1)
    {
        v6 = (a3 - a4 * a4) + a1;
    }
    else
    {
        v6 = (a5 + a4 * a4) + a1;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += a3 - a1 - a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 6
9 6
10 10
11 10
12 10
13 10
14 17
15 17
16 17
17 17
18 17
19 18
<<<sep_out_sample>>>
test %edx,%edx
jle a <func1+0xa>
lea (%rcx,%rcx,1),%r9d
jmp 11 <func1+0x11>
mov %edx,%r9d
imul %edx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
add %ecx,%edx
add %edx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (v6 < a3)
    {
        v6 = a4 + a4;
    }
    else
    {
        v6 = a3 * a3;
    }
    v7 = a3 + a4 + a2;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 10
6 10
7 13
8 13
9 13
10 13
11 13
12 12
13 12
14 13
15 14
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%r9d
add %esi,%r9d
add %r8d,%r9d
add %ecx,%r9d
mov %ecx,%eax
sub %edx,%eax
imul %esi,%eax
add %edi,%eax
add %r9d,%eax
imul %r8d,%edi
sub %edi,%eax
imul %esi,%r8d
sub %ecx,%esi
add %r8d,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a1 + (a4 - a3) * a2;
    v7 = a3 - (a1 * a5) - a3;
    v8 = a5 * a2 + (a2 - a4);
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 7
2 7
3 7
4 7
5 4
6 4
7 4
8 4
9 7
10 5
11 7
12 6
13 6
14 6
15 7
16 8
<<<sep_out_sample>>>
lea 0x1(%rdx),%eax
imul %ecx,%eax
sub %r8d,%eax
lea 0x1(%rdi,%rax,1),%eax
add %eax,%edx
add %esi,%edx
add %r8d,%edx
lea 0x1(%rcx,%rdx,1),%edx
add %esi,%ecx
imul %ecx,%r8d
sub %esi,%r8d
lea (%rdx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (v7 < a2)
        {
            v6 += a1 + (a3 * a4);
        }
        else
        {
            v6 += a5 * a3 + a1;
        }
    }
    v8 = ((a4 + a2) * a5) - a2;
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        v9 += a5 + (a1 * a4);
    }
    v11 = a4 * a3 + a4 - a5;
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 22
4 23
5 23
6 23
7 23
8 23
9 16
10 16
11 16
12 23
13 24
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
sub %ecx,%esi
lea 0x1(%r8,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a1 < a1)
    {
        v6 = (a1 - a2) - a2 + a3;
    }
    else
    {
        v6 = a2 - a4 - a4;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a1 - a2 - a3;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a1)
    {
        v9 += (a3 + a1) + a5;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 22
4 10
5 22
6 23
<<<sep_out_sample>>>
cmp %edi,%ecx
jge b <func1+0xb>
mov %edi,%eax
imul %edi,%eax
jmp 10 <func1+0x10>
mov %edx,%eax
imul %esi,%eax
add %edx,%edi
add %edi,%esi
add %r8d,%esi
add %esi,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a4 < a1)
    {
        v6 = a1 * a1;
    }
    else
    {
        v6 = a3 * a2;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        if (v6 < a3)
        {
            v7 += (a4 * a3) - a2;
        }
        else
        {
            v7 += a2 + a3 - a5;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 24
9 24
10 24
11 24
12 24
13 25
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += (a1 + a2) + a5;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += a4 * a2 * a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 14
2 14
3 14
4 14
5 15
<<<sep_out_sample>>>
mov %ecx,%eax
sub %edi,%eax
cmp %esi,%ecx
jge d <func1+0xd>
lea (%rdx,%rdi,2),%eax
add %ecx,%eax
lea (%rdx,%rcx,1),%r9d
cmp %r8d,%esi
jg 20 <func1+0x20>
mov %r8d,%r9d
sub %ecx,%r9d
lea (%r9,%rdi,2),%r9d
lea 0x1(%rdi,%rdx,1),%edi
add %esi,%edi
add %edi,%r8d
add %r8d,%ecx
add %ecx,%eax
add %r9d,%eax
sub %esi,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a4 < a2)
    {
        v6 = a4 + (a3 + a1 + a1);
    }
    else
    {
        v6 = a4 - a1;
    }
    if (a5 < a2)
    {
        v7 = a4 + (a3 - a5) + a5;
    }
    else
    {
        v7 = ((a5 - a4) + a1) + a1;
    }
    v8 = a3 - a2;
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        if (a5 < a3)
        {
            v9 += a2 + a1 - a5;
        }
        else
        {
            v9 += (a5 + a1) + a5;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 4
4 4
5 6
6 6
7 14
8 12
9 12
10 18
11 18
12 18
13 33
14 33
15 33
16 33
17 33
18 33
19 20
20 33
21 34
<<<sep_out_sample>>>
mov $0x0,%eax
lea (%rdi,%r8,1),%r9d
cmp %edx,%r8d
cmovl %r9d,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %esi,%edx
add %r8d,%edx
add %ecx,%edx
add %edx,%eax
add %r8d,%esi
add %esi,%eax
imul %ecx,%edi
lea (%rdi,%r8,2),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a5 < a3)
    {
        v6 = (a5 + a3 + a1) - a3;
    }
    else
    {
        v6 = a3 - a3;
    }
    v7 = a2 + a1 - a1 + a5;
    v8 = a1 * a4 + (a5 + a5);
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        v9 += a5 + a2 - a4;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 6
3 6
4 6
5 19
6 19
7 19
8 19
9 19
10 12
11 19
12 13
13 13
14 19
15 20
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %r8d,%edx
mov $0x1,%eax
sub %r8d,%eax
imul %edi,%eax
lea (%rdx,%rcx,2),%edx
lea (%rdx,%rax,1),%edx
lea (%rsi,%rdi,2),%eax
lea (%rax,%rcx,1),%eax
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a4 + (a1 - a5 * a1);
    v7 = a4 + (a2 + a1) + a1;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 4
5 4
6 4
7 4
8 6
9 5
10 5
11 6
12 7
<<<sep_out_sample>>>
lea (%rsi,%rdx,1),%r9d
mov %r8d,%eax
sub %edx,%eax
cmp $0x1,%edi
jle 16 <func1+0x16>
mov %ecx,%eax
imul %ecx,%eax
imul %edi,%eax
add %r9d,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a5 + (a2 * a4);
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        if (v7 < a1)
        {
            v8 += a4 - a5 * a2;
        }
        else
        {
            v8 += a2 * (a2 + a5);
        }
    }
    v10 = a2 + a3;
    if (v7 < a1)
    {
        v11 = a1 * (a4 * a4);
    }
    else
    {
        v11 = a5 - a3;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 28
3 28
4 22
5 22
6 24
7 24
8 24
9 30
10 30
11 30
12 30
13 30
14 30
15 31
<<<sep_out_sample>>>
test %ecx,%ecx
jle b <func1+0xb>
mov %r8d,%eax
sub %esi,%eax
jmp 11 <func1+0x11>
mov %esi,%eax
imul %r8d,%eax
lea 0x1(%rax,%rdi,1),%eax
add %eax,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a1 - a2;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += a2 * a1;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a5)
    {
        if (v6 < a2)
        {
            v10 += a2 - (a2 + a3);
        }
        else
        {
            v10 += (a3 * a3) * a1;
        }
    }
    if (v12 < a4)
    {
        v12 = a5 - a2 - a1 + a1;
    }
    else
    {
        v12 = a2 * a5;
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 26
2 26
3 28
4 28
5 28
6 32
7 32
8 34
9 34
10 34
11 34
12 34
13 35
<<<sep_out_sample>>>
mov $0x1,%r10d
sub %edi,%r10d
imul %esi,%r10d
lea -0x1(%rdx,%rcx,1),%r9d
imul %edi,%r9d
lea (%rcx,%r8,1),%eax
cmp %r8d,%esi
jge 31 <func1+0x31>
mov %esi,%eax
imul %r8d,%eax
mov %ecx,%r11d
sub %eax,%r11d
mov %r11d,%eax
imul %edx,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r10d,%ecx
lea 0x1(%r9,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a2 - a2 * a1;
    v7 = (a1 * (a3 + a4)) - a1;
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += a2 - (a2 + a1);
    }
    if (a2 < a5)
    {
        v10 = (a4 - (a2 * a5)) * a3;
    }
    else
    {
        v10 = a4 + a5;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 5
5 5
6 17
7 11
8 11
9 13
10 13
11 13
12 13
13 13
14 13
15 19
16 19
17 19
18 19
19 19
20 19
21 19
22 20
<<<sep_out_sample>>>
add %edi,%edx
add %edx,%esi
add %r8d,%esi
add %esi,%ecx
imul %r8d,%edi
lea 0x1(%rcx,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a1 * a5;
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        if (a1 < a2)
        {
            v7 += a5 - a3;
        }
        else
        {
            v7 += a3 * (a4 - a1);
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 4
6 17
7 18
<<<sep_out_sample>>>
test %edx,%edx
jle e <func1+0xe>
lea -0x1(%rdx),%r9d
imul %edx,%r9d
jmp 1d <func1+0x1d>
mov %ecx,%r9d
imul %edx,%r9d
imul %edx,%r9d
imul %edi,%r9d
lea (%rdi,%rdx,2),%eax
sub %ecx,%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
lea 0x1(%r9,%rax,1),%eax
add %ecx,%edx
sub %r8d,%edx
add %edx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (v6 < a3)
    {
        v6 = (a3 * a3) - a3;
    }
    else
    {
        v6 = ((a4 * a3) * a3) * a1;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += a3 + a3;
    }
    if (a3 < a3)
    {
        v9 = a5 * a4 + a5 * a1;
    }
    else
    {
        v9 = a4 + a3 - a5 + a2;
    }
    v10 = a3 - a4;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 10
10 26
11 26
12 26
13 26
14 26
15 26
16 23
17 23
18 23
19 26
20 27
<<<sep_out_sample>>>
add %edi,%edx
lea (%rdx,%rsi,1),%eax
add %eax,%r8d
add %r8d,%ecx
add %ecx,%edx
lea 0x1(%rsi,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = (a5 - a5 + a1) + a3;
    v7 = a2 - (a1 - a1) * a3;
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        if (a3 < a4)
        {
            v8 += a4 * a1;
        }
        else
        {
            v8 += a3 - (a4 * a1);
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 18
3 18
4 18
5 18
6 18
7 19
<<<sep_out_sample>>>
push %rbx
lea (%rdi,%rdi,1),%ebx
lea (%rdx,%rcx,1),%r9d
cmp %esi,%r8d
jge 1a <func1+0x1a>
lea (%rdi,%rdx,1),%r9d
mov %edi,%eax
imul %r8d,%eax
sub %eax,%r9d
cmp %edx,%r9d
jge 28 <func1+0x28>
mov %r8d,%r11d
imul %ecx,%r11d
jmp 33 <func1+0x33>
lea 0x1(%rcx),%r11d
imul %r8d,%r11d
sub %esi,%r11d
cmp %ecx,%r8d
jge 46 <func1+0x46>
mov %ecx,%r10d
sub %edx,%r10d
add %esi,%r10d
sub %edi,%r10d
jmp 4d <func1+0x4d>
mov %ecx,%r10d
imul %edx,%r10d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %ebx,%eax
add %r9d,%eax
add %r11d,%eax
add %r10d,%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a1 < a1)
    {
        v6 = a3 + a3 - a4 - a2;
    }
    else
    {
        v6 = a5 + a1 + a1 - a5;
    }
    if (a5 < a2)
    {
        v7 = a1 + a3 - a1 * a5;
    }
    else
    {
        v7 = a3 + a4;
    }
    if (v7 < a3)
    {
        v8 = a5 * a4;
    }
    else
    {
        v8 = a5 + (a4 * a5) - a2;
    }
    if (a5 < a4)
    {
        v9 = (a4 - a3 + a2) - a1;
    }
    else
    {
        v9 = a4 * a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 10
3 18
4 12
5 12
6 14
7 14
8 14
9 14
10 20
11 20
12 22
13 22
14 22
15 26
16 26
17 26
18 28
19 28
20 30
21 30
22 30
23 30
24 30
25 34
26 34
27 36
28 36
29 36
30 36
31 36
32 36
33 36
34 36
35 37
36 37
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
lea (%r8,%rcx,1),%eax
lea -0x1(%rdx),%r8d
imul %edi,%r8d
add %r8d,%edx
add %eax,%edx
imul %edi,%ecx
sub %ecx,%esi
sub %edi,%esi
lea (%rdx,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = (a1 * a3 - a1) + a3;
    v7 = (a2 - (a1 * a4)) - a1;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 4
7 4
8 6
9 5
10 5
11 5
12 6
13 7
<<<sep_out_sample>>>
lea (%rdx,%rsi,2),%eax
add %eax,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (a1 < a3)
        {
            v6 += a2 * a5 * a3;
        }
        else
        {
            v6 += (a2 - a3) + a3;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += a1 + a2;
    }
    v10 = ((a2 - a5) + a5) - a1;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 22
4 23
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
imul %edx,%esi
add %esi,%eax
imul %edi,%edx
sub %edx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a3 * ((a2 + a5) - a5);
    v7 = a5 - a3 * a1;
    v8 = a1 - a1;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 7
2 7
3 7
4 7
5 4
6 7
7 5
8 5
9 7
10 8
<<<sep_out_sample>>>
mov %ecx,%r10d
imul %ecx,%r10d
lea (%rdi,%r8,1),%eax
imul %eax,%r10d
lea (%r8,%rdx,1),%eax
lea (%rdx,%rdi,1),%r9d
cmp %esi,%ecx
cmovl %eax,%r9d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += (a1 * a3) - a5;
    }
    v8 = a4 * a4 * (a1 + a5);
    if (a4 < a2)
    {
        v9 = a5 + a3;
    }
    else
    {
        v9 = a3 + a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 9
4 9
5 12
6 12
7 12
8 12
9 18
10 18
11 18
12 18
13 18
14 18
15 19
<<<sep_out_sample>>>
mov %ecx,%r11d
imul %edi,%r11d
add %edx,%r11d
add %edi,%r11d
mov %r8d,%r9d
sub %edi,%r9d
cmp %r8d,%ecx
jle 20 <func1+0x20>
lea (%r8,%rsi,1),%r9d
imul %esi,%r9d
test %edi,%edi
jle 31 <func1+0x31>
mov %esi,%r10d
imul %esi,%r10d
imul %esi,%r10d
jmp 38 <func1+0x38>
mov %edi,%r10d
imul %esi,%r10d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r11d,%ecx
add %ecx,%r9d
lea (%r9,%r10,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = (a4 * a1) + a3 + a1;
    if (a5 < a4)
    {
        v7 = a5 * a2 + a2 * a2;
    }
    else
    {
        v7 = a2 - a2 - a1 + a5;
    }
    if (v8 < a1)
    {
        v8 = a2 * a2 * a2;
    }
    else
    {
        v8 = a1 * a2;
    }
    v9 = a5 + a2 - a5 - a2;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 11
6 11
7 5
8 5
9 7
10 7
11 13
12 13
13 15
14 15
15 15
16 15
17 19
18 19
19 22
20 22
21 22
22 22
23 22
24 22
25 22
26 23
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %r8d,%esi
lea (%r8,%rcx,2),%eax
lea (%rax,%rsi,1),%eax
imul %edx,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a3 < a3)
    {
        v6 = a5 * a2;
    }
    else
    {
        v6 = a4 + a5;
    }
    if (a4 < a4)
    {
        v7 = a5 + a1 * a2 * a4;
    }
    else
    {
        v7 = (a3 - a2 + a2) * a3;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 20
2 20
3 20
4 10
5 20
6 18
7 20
8 21
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea (%rdi,%rcx,2),%eax
lea 0x1(%rax,%r8,1),%eax
imul %ecx,%edx
add $0x1,%edx
imul %edx,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a4 * a1;
    }
    v8 = a4 + a1;
    v9 = a4 + (a3 * a4 * a4);
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 9
5 11
6 10
7 10
8 10
9 11
10 12
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%r9d
add %esi,%r9d
add %r8d,%r9d
add %ecx,%r9d
imul %ecx,%edi
mov %edx,%eax
sub %edi,%eax
add %r8d,%eax
lea 0x1(%r9,%rax,1),%eax
add %edx,%r8d
imul %r8d,%edx
imul %edx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = a5 - ((a4 * a1) - a3);
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        if (v8 < a4)
        {
            v7 += a4 + a1 - a3;
        }
        else
        {
            v7 += a2 + a5 - a4;
        }
    }
    v9 = a2 * (a3 * (a3 + a5));
    v10 = 0;
    for (v11 = 0; v11++; v11<a4)
    {
        v10 += a1 * (a5 - a2);
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 23
2 23
3 23
4 23
5 4
6 4
7 4
8 4
9 23
10 17
11 17
12 17
13 23
14 24
<<<sep_out_sample>>>
lea (%rdx,%rdi,1),%r10d
test %edx,%edx
jg 15 <func1+0x15>
mov %edx,%r10d
imul %edx,%r10d
add %edi,%r10d
sub %edx,%r10d
cmp %ecx,%edx
jle 29 <func1+0x29>
mov %r8d,%r9d
sub %ecx,%r9d
mov %edx,%eax
imul %esi,%eax
sub %eax,%r9d
jmp 31 <func1+0x31>
lea 0x1(%rdx),%r9d
imul %edi,%r9d
mov %ecx,%eax
sub %r8d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r10d,%ecx
add %r9d,%ecx
lea (%rcx,%rax,2),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (v6 < a3)
    {
        v6 = a3 + a1;
    }
    else
    {
        v6 = a1 + (a3 * a3) - a3;
    }
    if (a4 < a3)
    {
        v7 = (a5 - a4) - a3 * a2;
    }
    else
    {
        v7 = a1 + a1 * a3;
    }
    v8 = a4 - a5;
    v9 = a4 - a5;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 4
3 4
4 10
5 10
6 10
7 10
8 12
9 12
10 14
11 14
12 14
13 14
14 14
15 14
16 18
17 18
18 20
19 20
20 22
21 22
22 22
23 22
24 22
25 22
26 22
27 23
<<<sep_out_sample>>>
mov %edi,%eax
test %edi,%edi
jg d <func1+0xd>
imul %edx,%eax
sub %esi,%eax
sub %esi,%eax
add %edi,%edx
add %esi,%edx
add %r8d,%edx
add %ecx,%edx
add %edx,%eax
imul %r8d,%esi
imul %esi,%edi
add %edi,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (v6 < a1)
    {
        v6 = (a3 + a1) - a3;
    }
    else
    {
        v6 = a1 * a3 - a2 - a2;
    }
    v7 = (a2 * a5 * a1) + a4;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 4
3 4
4 10
5 10
6 10
7 13
8 13
9 13
10 13
11 13
12 12
13 12
14 12
15 13
16 14
<<<sep_out_sample>>>
test %esi,%esi
jle 14 <func1+0x14>
mov %ecx,%r10d
imul %edi,%r10d
lea (%rcx,%r8,1),%r11d
sub %r11d,%r10d
jmp 25 <func1+0x25>
mov %ecx,%r10d
imul %edi,%r10d
mov %esi,%r11d
imul %edx,%r11d
sub %r11d,%r10d
mov %edi,%r9d
imul %r8d,%r9d
cmp %r9d,%edi
jle 3b <func1+0x3b>
lea (%rdi,%rdi,1),%eax
sub %r8d,%eax
sub %ecx,%eax
jmp 45 <func1+0x45>
mov %ecx,%eax
imul %edx,%eax
add %r8d,%eax
sub %edx,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r10d,%ecx
add %ecx,%r9d
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (v6 < a2)
    {
        v6 = a4 * a1 - (a4 + a5);
    }
    else
    {
        v6 = a4 * a1 - a2 * a3;
    }
    v7 = a1 * a5;
    if (v7 < a1)
    {
        v8 = a1 + a1 - a5 - a4;
    }
    else
    {
        v8 = ((a4 * a3) + a5) - a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 10
13 12
14 12
15 13
16 13
17 15
18 15
19 15
20 15
21 19
22 19
23 19
24 19
25 21
26 21
27 21
28 21
29 21
30 21
31 21
32 22
<<<sep_out_sample>>>
cmp $0x1,%ecx
jle 13 <func1+0x13>
mov %r8d,%r9d
sub %edx,%r9d
sub %ecx,%r9d
add %r8d,%r9d
jmp 21 <func1+0x21>
mov %edi,%eax
imul %edi,%eax
mov %ecx,%r9d
sub %eax,%r9d
add %esi,%r9d
mov %edx,%eax
sub %ecx,%eax
cmp %ecx,%esi
jge 35 <func1+0x35>
mov $0x1,%eax
sub %edi,%eax
imul %edi,%eax
sub %esi,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %r9d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a1 - a2;
    }
    if (v7 < a4)
    {
        v8 = (a5 - a3 - a4) + a5;
    }
    else
    {
        v8 = a2 - (a1 * a1 - a4);
    }
    if (a2 < a4)
    {
        v9 = a1 - (a1 * a1) - a2;
    }
    else
    {
        v9 = a3 - a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 11
8 15
9 15
10 15
11 15
12 15
13 23
14 23
15 17
16 17
17 19
18 19
19 19
20 19
21 25
22 25
23 25
24 25
25 25
26 25
27 26
<<<sep_out_sample>>>
lea (%rdi,%rdi,1),%eax
cmp %edx,%ecx
jge 18 <func1+0x18>
mov %esi,%eax
imul %ecx,%eax
imul %ecx,%eax
mov %edi,%r10d
sub %eax,%r10d
mov %r10d,%eax
lea (%rsi,%rdi,2),%r9d
imul %esi,%r9d
add %r9d,%edi
add %edx,%edi
add %esi,%edi
add %edi,%r8d
lea 0x1(%rcx,%r8,1),%edi
add %edi,%eax
sub %esi,%edx
imul %ecx,%esi
add %esi,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a4 + (a1 + a4);
    }
    if (a4 < a3)
    {
        v8 = a1 - (a2 * a4 * a4);
    }
    else
    {
        v8 = a1 + a1;
    }
    v9 = a3 - a2 + a2 * a4;
    v10 = a2 * (a1 + a2 + a1);
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 15
2 9
3 9
4 11
5 11
6 11
7 11
8 11
9 11
10 18
11 18
12 19
13 19
14 19
15 19
16 19
17 19
18 17
19 17
20 17
21 19
22 20
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %r8d,%edx
add %edx,%ecx
imul %r8d,%esi
sub %esi,%edi
sub %r8d,%edi
lea 0x1(%rcx,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a1 - a5 * a2 - a5;
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += a2 * a1 + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 4
6 4
7 4
8 10
9 11
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea (%r8,%rcx,1),%esi
imul %edi,%edx
imul %ecx,%edx
imul %edx,%ecx
lea 0x1(%rsi,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = (a1 * a3) * a4 * a4;
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += a1 * a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 4
6 4
7 4
8 10
9 11
<<<sep_out_sample>>>
cmp %esi,%ecx
jge 14 <func1+0x14>
mov %esi,%r10d
imul %esi,%r10d
imul %esi,%r10d
add %ecx,%r10d
jmp 20 <func1+0x20>
lea (%r8,%rcx,1),%r10d
mov %esi,%eax
imul %esi,%eax
sub %eax,%r10d
mov %edi,%r9d
imul %edi,%r9d
test %edx,%edx
jle 30 <func1+0x30>
lea (%rdx,%rdx,1),%eax
jmp 37 <func1+0x37>
mov %r8d,%eax
sub %edi,%eax
add %eax,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r10d,%ecx
lea (%rcx,%r9,2),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a4 < a2)
    {
        v6 = (a2 * (a2 * a2)) + a4;
    }
    else
    {
        v6 = (a5 + a4) - a2 * a2;
    }
    v7 = a2 + ((a1 * a1) - a2);
    v8 = a1 * a1;
    if (v9 < a3)
    {
        v9 = a3 + a3;
    }
    else
    {
        v9 = a5 - a1 + a5 - a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 12
13 12
14 14
15 14
16 16
17 16
18 20
19 20
20 20
21 22
22 22
23 22
24 22
25 22
26 22
27 22
28 23
<<<sep_out_sample>>>
cmp %edx,%r8d
jge 15 <func1+0x15>
lea (%rcx,%rdx,1),%eax
mov %edi,%r9d
sub %eax,%r9d
mov %r9d,%eax
sub %ecx,%eax
jmp 1e <func1+0x1e>
mov %ecx,%eax
imul %edx,%eax
sub %edi,%eax
add %esi,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a1 - a5 + a2;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        if (v6 < a3)
        {
            v8 += a5 + a3;
        }
        else
        {
            v8 += a4 * a5 - a2;
        }
    }
    if (a5 < a3)
    {
        v10 = a1 - (a4 + a3) - a4;
    }
    else
    {
        v10 = a4 * a3 - a1 + a2;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 23
4 23
5 23
6 23
7 23
8 23
9 27
10 27
11 27
12 27
13 29
14 29
15 29
16 29
17 29
18 30
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
lea (%rsi,%rsi,1),%r8d
imul %r8d,%esi
lea (%rax,%rcx,2),%eax
lea (%rax,%rsi,1),%eax
add %ecx,%edx
imul %edx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a4 + ((a2 + a2) * a2);
    if (a3 < a3)
    {
        v7 = a5 * a5 * a1 * a2;
    }
    else
    {
        v7 = (a4 + a3) * a1;
    }
    v8 = a2 - a2;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 14
2 14
3 14
4 4
5 4
6 4
7 14
8 11
9 11
10 14
11 15
<<<sep_out_sample>>>
mov $0x2,%r11d
sub %esi,%r11d
imul %edx,%r11d
cmp %r8d,%esi
jle 1a <func1+0x1a>
mov %ecx,%r9d
sub %edi,%r9d
jmp 21 <func1+0x21>
mov %r8d,%r9d
imul %ecx,%r9d
cmp %edi,%r9d
jge 31 <func1+0x31>
mov %edx,%r10d
sub %ecx,%r10d
add %esi,%r10d
jmp 3f <func1+0x3f>
mov %esi,%eax
imul %esi,%eax
mov %edx,%r10d
sub %eax,%r10d
add %r8d,%r10d
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
add %r8d,%ecx
add %r11d,%ecx
add %ecx,%r9d
lea (%r9,%r10,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a3 - a3 * a2 + a3;
    if (a5 < a2)
    {
        v7 = a4 - a1;
    }
    else
    {
        v7 = a5 * a4;
    }
    if (v7 < a1)
    {
        v8 = a2 + (a3 - a4);
    }
    else
    {
        v8 = a3 - a2 * a2 + a5;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        v9 += (a3 + a1) - a1;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 5
5 5
6 7
7 7
8 7
9 11
10 11
11 13
12 13
13 15
14 15
15 15
16 15
17 19
18 19
19 19
20 19
21 19
22 26
23 26
24 26
25 26
26 26
27 26
28 26
29 27
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %r8d,%edx
add %edx,%ecx
imul %edi,%r8d
sub %r8d,%esi
add %esi,%edi
lea 0x1(%rcx,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a2 - (a5 * a1) + a1;
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        if (v7 < a2)
        {
            v7 += a2 - a3;
        }
        else
        {
            v7 += a2 + a4 - a5;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 4
6 4
7 4
8 17
9 18
<<<sep_out_sample>>>
push %rbx
lea (%r8,%r8,1),%eax
mov %edx,%ebx
sub %eax,%ebx
lea (%r8,%rdx,1),%r11d
sub %ecx,%r11d
imul %esi,%r11d
mov %edi,%r9d
sub %ecx,%r9d
mov %r8d,%eax
imul %r8d,%eax
cmp %edi,%ecx
cmovl %eax,%r9d
cmp %ecx,%edx
jle 3b <func1+0x3b>
mov %edx,%r10d
imul %ecx,%r10d
imul %r8d,%r10d
add %edx,%r10d
jmp 49 <func1+0x49>
mov %edx,%eax
imul %edx,%eax
imul %esi,%eax
mov %r8d,%r10d
sub %eax,%r10d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %ebx,%eax
add %r11d,%eax
add %eax,%r9d
lea (%r9,%r10,1),%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a3 - (a5 + a5);
    v7 = (a5 + a3 - a4) * a2;
    if (a4 < a1)
    {
        v8 = a5 * a5 - (a3 - a3);
    }
    else
    {
        v8 = a1 - a4;
    }
    if (a4 < a3)
    {
        v9 = a3 + a3 * a4 * a5;
    }
    else
    {
        v9 = a5 - (a3 * a3) * a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 4
3 4
4 4
5 5
6 5
7 5
8 12
9 12
10 8
11 8
12 8
13 8
14 14
15 14
16 16
17 16
18 16
19 16
20 16
21 20
22 20
23 20
24 20
25 20
26 22
27 22
28 22
29 22
30 22
31 22
32 22
33 22
34 23
35 23
<<<sep_out_sample>>>
test %esi,%esi
jle d <func1+0xd>
mov %ecx,%eax
neg %eax
imul %edx,%eax
jmp 15 <func1+0x15>
lea -0x1(%r8),%eax
imul %r8d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (v6 < a2)
    {
        v6 = (a2 - a4 - a2) * a3;
    }
    else
    {
        v6 = (a5 * a5) - a5;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += a2 - a2 - a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 17
10 17
11 17
12 17
13 17
14 18
<<<sep_out_sample>>>
test %edx,%edx
jle 13 <func1+0x13>
mov %edi,%r11d
sub %edx,%r11d
sub %edx,%r11d
imul %r8d,%r11d
jmp 21 <func1+0x21>
lea (%rsi,%rdi,1),%r11d
mov %r8d,%eax
imul %r8d,%eax
add %eax,%r11d
test %r8d,%r8d
jle 35 <func1+0x35>
mov %r8d,%eax
imul %r8d,%eax
mov %edi,%r10d
sub %eax,%r10d
jmp 40 <func1+0x40>
lea 0x1(%rsi),%r10d
imul %esi,%r10d
sub %edx,%r10d
mov $0x0,%r9d
cmp %edi,%edx
jge 54 <func1+0x54>
lea (%rdi,%rsi,1),%r9d
add %edx,%r9d
add %ecx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (v6 < a3)
    {
        v6 = (a1 - a3 - a3) * a5;
    }
    else
    {
        v6 = a2 + a1 + a5 * a5;
    }
    if (v7 < a5)
    {
        v7 = a1 - a5 * a5;
    }
    else
    {
        v7 = a2 * a2 + a2 - a3;
    }
    if (a3 < a1)
    {
        v8 = (a1 + a2 + a3) + a4;
    }
    else
    {
        v8 = a5 - a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 12
13 12
14 14
15 14
16 14
17 14
18 14
19 18
20 18
21 18
22 26
23 20
24 20
25 22
26 22
27 22
28 28
29 28
30 28
31 28
32 28
33 28
34 28
35 29
<<<sep_out_sample>>>
cmp $0x1,%r8d
jle 10 <func1+0x10>
mov %edx,%eax
imul %r8d,%eax
neg %eax
jmp 15 <func1+0x15>
mov $0x0,%eax
mov %r8d,%r9d
imul %esi,%r9d
add %r9d,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += (a4 - a2) * a1;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += (a3 - a5) - a2;
    }
    if (v7 < a5)
    {
        v10 = a4 - a4 - a3 * a5;
    }
    else
    {
        v10 = ((a3 - a3) * a2) * a2;
    }
    v11 = a5 * a2;
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 14
2 14
3 16
4 16
5 16
6 16
7 20
8 22
9 22
10 23
11 23
12 23
13 23
14 23
15 23
16 24
<<<sep_out_sample>>>
lea (%r8,%rcx,1),%eax
test %esi,%esi
jle e <func1+0xe>
lea (%r8,%rsi,2),%eax
add %esi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (v6 < a2)
    {
        v6 = a2 + (a5 + a2) + a2;
    }
    else
    {
        v6 = a4 - a4 + a5 + a4;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        if (a2 < a2)
        {
            v7 += a4 + a1 - a1;
        }
        else
        {
            v7 += a1 - (a2 - a1);
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 24
7 24
8 24
9 24
10 24
11 25
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (a3 < a2)
        {
            v6 += a1 - a2 * a2;
        }
        else
        {
            v6 += a3 + (a4 + a5);
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        if (v9 < a3)
        {
            v8 += a1 + a4;
        }
        else
        {
            v8 += (a5 * a3) + a4;
        }
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a3)
    {
        v10 += a2 + a5 * a2;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 33
2 33
3 33
4 33
5 34
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (v7 < a5)
        {
            v6 += (a2 * a2) - a4;
        }
        else
        {
            v6 += a3 - a1 * a1;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += (a5 + a5) * a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 21
5 22
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %r8d,%edx
lea (%rsi,%rcx,2),%eax
lea 0x1(%rdx,%rax,1),%eax
sub %r8d,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a2 < a2)
    {
        v6 = a4 + (a2 - a5) - a1;
    }
    else
    {
        v6 = a2 + a4;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a4 - a2;
    }
    v9 = a2 - a5;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 10
5 18
6 17
7 18
8 19
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a4 * a3 - a3;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += a3 - a3 + a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 14
2 14
3 14
4 14
5 15
<<<sep_out_sample>>>
cmp %edi,%edx
jge d <func1+0xd>
mov %edx,%r10d
imul %edx,%r10d
jmp 1a <func1+0x1a>
mov %edi,%r10d
sub %r8d,%r10d
add %edi,%r10d
imul %esi,%r10d
lea (%rdi,%r8,1),%r9d
add %edx,%r9d
mov %esi,%eax
sub %ecx,%eax
cmp %r9d,%esi
jle 2f <func1+0x2f>
lea (%rcx,%rdx,1),%eax
add %esi,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r10d,%ecx
add %ecx,%r9d
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a3 < a1)
    {
        v6 = a3 * a3;
    }
    else
    {
        v6 = (a1 - (a5 - a1)) * a2;
    }
    v7 = (a1 + a5) + a3;
    if (v7 < a2)
    {
        v8 = (a4 + a3) + a2;
    }
    else
    {
        v8 = a2 - a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 10
10 12
11 12
12 19
13 19
14 13
15 13
16 15
17 15
18 21
19 21
20 21
21 21
22 21
23 21
24 21
25 22
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
lea (%rax,%rcx,2),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (v6 < a5)
        {
            v6 += (a4 * a4) - a3;
        }
        else
        {
            v6 += a2 + a4;
        }
    }
    v8 = a4 + a4;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 17
6 18
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
imul %r8d,%ecx
mov %edx,%r9d
sub %ecx,%r9d
add %r9d,%eax
not %esi
imul %esi,%edx
add %edx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a3 - a5 * a4;
    if (a3 < a3)
    {
        v7 = a3 * a5;
    }
    else
    {
        v7 = a1 - (a3 + a3 * a2);
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 13
2 13
3 13
4 13
5 4
6 4
7 4
8 13
9 11
10 11
11 11
12 13
13 14
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%eax
imul %r8d,%r8d
sub %edx,%r8d
imul %r8d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += (a4 + a1) + a2;
    }
    v8 = ((a5 * a5) - a3) * a3;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 9
6 9
7 9
8 10
9 11
<<<sep_out_sample>>>
lea (%rsi,%rdx,1),%eax
cmp %edi,%r8d
jle 10 <func1+0x10>
mov %edi,%eax
sub %esi,%eax
sub %esi,%eax
add %ecx,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (a3 < a5)
        {
            v6 += a5 * a1 + a2;
        }
        else
        {
            v6 += a1 * a4;
        }
    }
    if (a1 < a5)
    {
        v8 = a1 - a2 - a2 + a4;
    }
    else
    {
        v8 = a2 + a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 22
2 16
3 16
4 18
5 18
6 18
7 18
8 24
9 24
10 24
11 24
12 24
13 25
<<<sep_out_sample>>>
mov %edi,%eax
neg %eax
sub %r8d,%eax
cmp %edx,%r8d
jge 18 <func1+0x18>
mov %edx,%eax
imul %r8d,%eax
imul %r8d,%eax
sub %edx,%eax
add %edx,%edi
add %esi,%edi
add %edi,%r8d
add %ecx,%r8d
add %r8d,%eax
sub %esi,%ecx
imul %edx,%edx
add %edx,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a5 < a3)
    {
        v6 = a3 * a5 * a5 - a3;
    }
    else
    {
        v6 = (a4 - (a4 + a1)) - a5;
    }
    v7 = a4 - a2 + a3 * a3;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 4
5 4
6 6
7 6
8 6
9 6
10 13
11 13
12 13
13 13
14 13
15 12
16 12
17 12
18 13
19 14
<<<sep_out_sample>>>
cmp %edi,%esi
jge 14 <func1+0x14>
mov %edi,%eax
imul %edi,%eax
mov %ecx,%r9d
sub %eax,%r9d
add %esi,%r9d
jmp 1d <func1+0x1d>
mov %r8d,%r9d
sub %edx,%r9d
add %ecx,%r9d
mov %ecx,%eax
imul %edi,%eax
cmp %r8d,%ecx
cmovge %ecx,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a2 < a1)
    {
        v6 = a2 - ((a1 * a1) - a4);
    }
    else
    {
        v6 = a5 - a3 + a4;
    }
    if (a4 < a5)
    {
        v7 = a4 * a1;
    }
    else
    {
        v7 = (a1 - a1) * a4 + a4;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        if (v9 < a3)
        {
            v8 += (a2 + a3) - a3;
        }
        else
        {
            v8 += a5 + a1;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 6
9 10
10 10
11 10
12 14
13 14
14 14
15 14
16 32
17 32
18 32
19 32
20 32
21 32
22 33
<<<sep_out_sample>>>
lea 0x1(%r8),%r9d
imul %edx,%r9d
imul %r8d,%r9d
lea (%r8,%rdi,1),%eax
cmp %esi,%r8d
jle 20 <func1+0x20>
mov %r8d,%eax
sub %edi,%eax
sub $0x1,%eax
imul %edx,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %r9d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (a5 < a2)
        {
            v6 += a5 + a5 - a2;
        }
        else
        {
            v6 += (a1 - a4) * a3;
        }
    }
    v8 = (a3 * a5 + a3) * a5;
    if (a2 < a5)
    {
        v9 = (a5 - a1) * a3 - a3;
    }
    else
    {
        v9 = a5 + a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 16
4 23
5 17
6 17
7 19
8 19
9 19
10 19
11 25
12 25
13 25
14 25
15 25
16 25
17 26
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
lea (%r8,%rcx,1),%eax
sub %edx,%esi
sub %ecx,%esi
add %esi,%edi
lea 0x1(%rax,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a1 - (a4 + (a3 - a2));
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += (a1 * a3) * a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 4
6 4
7 4
8 10
9 11
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %r8d,%edx
add %ecx,%edx
add %r8d,%esi
lea 0x1(%rdx,%rsi,1),%eax
imul %ecx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a2 + a5;
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        if (v8 < a5)
        {
            v7 += a1 + a2 * a2;
        }
        else
        {
            v7 += a5 + a5 + a5;
        }
    }
    v9 = a5 * a4;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 18
5 4
6 18
7 17
8 18
9 19
<<<sep_out_sample>>>
mov %r8d,%eax
imul %edx,%eax
mov %esi,%r9d
sub %edx,%r9d
mov %edx,%r10d
imul %edx,%r10d
sub %r10d,%r9d
add %r9d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = (a1 + (a5 * a3)) - a1;
    if (a5 < a5)
    {
        v7 = a1 - (a2 - a5 * a1);
    }
    else
    {
        v7 = a1 - (a5 - a5) - a1;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        if (v8 < a4)
        {
            v8 += a4 + a2 * a2;
        }
        else
        {
            v8 += a2 - a3 - a1;
        }
    }
    v10 = (a2 - a3) - a3 * a3;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 25
4 25
5 25
6 25
7 25
8 26
9 26
10 26
11 26
12 26
13 26
14 27
<<<sep_out_sample>>>
add %edi,%edx
add %edx,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%edx
sub %r8d,%edi
sub %ecx,%edi
sub %r8d,%edi
lea (%rdx,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a4 - a2;
    }
    v8 = a1 - a5 - a4 - a5;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 9
6 9
7 9
8 10
9 11
<<<sep_out_sample>>>
mov %edi,%eax
sub %edx,%eax
cmp %edx,%ecx
jge 10 <func1+0x10>
mov %ecx,%eax
imul %r8d,%eax
add %edi,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a4 < a3)
    {
        v6 = a1 + a4 * a5;
    }
    else
    {
        v6 = a1 - a3;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += (a5 - a2) - a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 4
4 4
5 6
6 6
7 6
8 17
9 17
10 17
11 17
12 17
13 18
<<<sep_out_sample>>>
push %rbx
test %edi,%edi
jle 14 <func1+0x14>
mov %esi,%r11d
sub %ecx,%r11d
sub %edi,%r11d
imul %ecx,%r11d
jmp 22 <func1+0x22>
mov %ecx,%r11d
sub %edi,%r11d
imul %edi,%r11d
imul %edx,%r11d
mov $0x0,%r9d
cmp %edx,%ecx
jge 33 <func1+0x33>
lea (%rcx,%rdx,1),%r9d
add %esi,%r9d
test %ecx,%ecx
jle 40 <func1+0x40>
lea (%r8,%rdx,1),%r10d
sub %esi,%r10d
jmp 4d <func1+0x4d>
lea (%rsi,%rdi,1),%r10d
mov %esi,%ebx
imul %r8d,%ebx
sub %ebx,%r10d
lea (%rdi,%rsi,1),%eax
test %edi,%edi
jg 60 <func1+0x60>
mov %r8d,%eax
imul %edi,%eax
imul %r8d,%eax
add %esi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r11d,%ecx
add %ecx,%r9d
add %r10d,%r9d
add %r9d,%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (v6 < a1)
    {
        v6 = ((a2 - a4) - a1) * a4;
    }
    else
    {
        v6 = a1 * (a4 - a1) * a3;
    }
    if (a4 < a3)
    {
        v7 = a2 + (a4 + a3);
    }
    else
    {
        v7 = a3 - a3;
    }
    if (v8 < a4)
    {
        v8 = (a5 + a3) - a2;
    }
    else
    {
        v8 = a2 + a1 - a2 * a5;
    }
    if (v9 < a1)
    {
        v9 = ((a4 + a1) + a2) - a4;
    }
    else
    {
        v9 = a5 * a1 * a5 + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 4
3 4
4 6
5 6
6 6
7 6
8 6
9 10
10 10
11 10
12 10
13 18
14 12
15 12
16 14
17 14
18 20
19 20
20 22
21 22
22 22
23 26
24 26
25 26
26 26
27 30
28 28
29 28
30 34
31 34
32 34
33 34
34 36
35 36
36 36
37 36
38 36
39 36
40 36
41 36
42 37
43 37
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
sub %edx,%edi
sub %r8d,%edi
lea (%rsi,%rcx,2),%eax
lea 0x1(%rdi,%rax,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = (a1 - a3) - a5 + a4;
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += a3 + a3;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        v9 += a2 - a1 * a1;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 15
2 15
3 15
4 4
5 4
6 4
7 15
8 16
<<<sep_out_sample>>>
add %edi,%edx
add %edx,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%eax
imul %r8d,%edi
sub %edi,%ecx
add %ecx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += (a4 * a5) + a4;
    }
    v8 = a4 - a5 * a1 + a5;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 9
6 9
7 9
8 10
9 11
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %r8d,%esi
add %ecx,%esi
add %ecx,%edx
imul %r8d,%ecx
sub %ecx,%edx
lea 0x1(%rsi,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a4 + a3 - (a4 * a5);
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        if (a4 < a2)
        {
            v7 += a2 + a4;
        }
        else
        {
            v7 += a1 + a1;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 4
6 4
7 4
8 17
9 18
<<<sep_out_sample>>>
mov %ecx,%eax
imul %esi,%eax
mov %r8d,%r10d
sub %eax,%r10d
imul %edi,%r10d
cmp %edx,%ecx
jle 1c <func1+0x1c>
mov %esi,%r9d
imul %edi,%r9d
jmp 2b <func1+0x2b>
mov %edx,%eax
imul %r8d,%eax
mov %esi,%r9d
sub %eax,%r9d
add %ecx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a4 < a4)
    {
        v6 = a2 - (a1 - (a4 * a1));
    }
    else
    {
        v6 = a1 * (a5 - a4 * a2);
    }
    if (a3 < a4)
    {
        v7 = a2 * a1;
    }
    else
    {
        v7 = a2 - a3 * a5 + a4;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 10
6 12
7 12
8 14
9 14
10 14
11 18
12 18
13 18
14 18
15 18
16 20
17 20
18 20
19 20
20 20
21 20
22 21
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
mov %esi,%edx
imul %ecx,%edx
lea (%rdx,%r8,2),%r8d
add %r8d,%eax
add %esi,%ecx
imul %esi,%ecx
imul %ecx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = (a5 + a5) + a2 * a4;
    v7 = a2 * ((a2 + a4) * a2);
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 4
7 4
8 6
9 5
10 5
11 5
12 6
13 7
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add $0x1,%esi
imul %esi,%ecx
imul %edi,%ecx
add %ecx,%eax
imul %r8d,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a1 * (a4 + a4 * a2);
    v7 = a5 * a1;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 4
7 4
8 6
9 5
10 6
11 7
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %eax,%ecx
imul %edx,%esi
sub %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a3 * a2 - a1 + a5;
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += a5 - a3 + a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 4
6 4
7 4
8 10
9 11
<<<sep_out_sample>>>
mov %ecx,%r10d
imul %ecx,%r10d
test %ecx,%ecx
jle 17 <func1+0x17>
mov %edi,%r9d
imul %esi,%r9d
add %ecx,%r9d
jmp 1e <func1+0x1e>
mov %ecx,%r9d
imul %edi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
imul %edx,%esi
sub %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a4 * a4;
    if (v7 < a4)
    {
        v7 = a4 + a1 * a2;
    }
    else
    {
        v7 = a4 * a1;
    }
    v8 = a2 - a2 - a3 * a2;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 5
4 5
5 7
6 7
7 7
8 7
9 11
10 11
11 14
12 14
13 14
14 14
15 14
16 14
17 13
18 14
19 15
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (a3 < a2)
        {
            v6 += (a5 + a4) - a1;
        }
        else
        {
            v6 += a3 * a3 + a4;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += (a2 - a3) * a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 21
5 22
<<<sep_out_sample>>>
lea (%r8,%rcx,2),%r10d
add %edx,%r10d
cmp %edi,%ecx
jle 1c <func1+0x1c>
mov %esi,%r9d
imul %esi,%r9d
sub $0x1,%r9d
imul %edi,%r9d
jmp 24 <func1+0x24>
lea (%rdx,%rdi,2),%r9d
imul %esi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = (a4 + a4) + a5 + a3;
    if (a1 < a4)
    {
        v7 = a2 * a2 * a1 - a1;
    }
    else
    {
        v7 = a2 * (a3 + a1 + a1);
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 5
4 5
5 7
6 7
7 7
8 7
9 7
10 11
11 11
12 13
13 13
14 13
15 13
16 13
17 13
18 14
<<<sep_out_sample>>>
cmp %edx,%esi
jge d <func1+0xd>
lea (%r8,%rcx,2),%r11d
add %ecx,%r11d
jmp 14 <func1+0x14>
mov %edx,%r11d
imul %ecx,%r11d
cmp %edi,%edx
jle 27 <func1+0x27>
mov %r8d,%r10d
sub %edi,%r10d
imul %edi,%r10d
add %edx,%r10d
jmp 2f <func1+0x2f>
lea 0x1(%r8),%r10d
imul %edx,%r10d
lea (%r8,%r8,1),%r9d
test %edi,%edi
jle 46 <func1+0x46>
mov %r8d,%eax
imul %ecx,%eax
mov %esi,%r9d
sub %eax,%r9d
add %r8d,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a2 < a3)
    {
        v6 = ((a5 + a4) + a4) + a4;
    }
    else
    {
        v6 = a3 * a4;
    }
    if (a1 < a3)
    {
        v7 = a1 * (a5 - a1) + a3;
    }
    else
    {
        v7 = a3 + (a3 * a5);
    }
    if (v8 < a1)
    {
        v8 = a2 - a5 * a4 + a5;
    }
    else
    {
        v8 = a5 + a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 12
9 12
10 14
11 14
12 14
13 14
14 14
15 18
16 18
17 26
18 20
19 20
20 22
21 22
22 22
23 22
24 22
25 28
26 28
27 28
28 28
29 28
30 28
31 28
32 29
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%r10d
lea (%r10,%rdi,1),%r9d
sub %ecx,%r9d
cmp %r8d,%r9d
jge 1a <func1+0x1a>
lea -0x1(%rsi),%eax
imul %eax,%edx
add %edx,%edi
jmp 26 <func1+0x26>
mov %r8d,%eax
sub %esi,%eax
sub %edi,%eax
mov %eax,%edi
add %r8d,%edi
add %r10d,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
lea (%r9,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a1 + a3 + a1 - a4;
    if (v6 < a5)
    {
        v7 = a3 * a2 - a3 + a1;
    }
    else
    {
        v7 = a5 - a2 - a1 + a5;
    }
    v8 = a2 - a2;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 5
5 5
6 7
7 7
8 7
9 7
10 11
11 11
12 11
13 11
14 11
15 14
16 14
17 14
18 14
19 14
20 15
<<<sep_out_sample>>>
lea (%r8,%rdi,1),%eax
test %r8d,%r8d
jle 14 <func1+0x14>
mov %esi,%eax
imul %edi,%eax
imul %esi,%eax
imul %ecx,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (v6 < a5)
    {
        v6 = (a2 * a1) * a2 * a4;
    }
    else
    {
        v6 = a5 + a1;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += a5 * (a3 + a1);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 6
7 6
8 17
9 17
10 17
11 17
12 17
13 18
<<<sep_out_sample>>>
push %rbx
cmp %edx,%esi
jge 11 <func1+0x11>
mov %ecx,%ebx
imul %r8d,%ebx
add %edi,%ebx
add %edx,%ebx
jmp 17 <func1+0x17>
lea 0x2(%rdi),%ebx
imul %ecx,%ebx
mov %edi,%r11d
imul %edx,%r11d
mov %edx,%eax
sub %ecx,%eax
imul %eax,%r11d
lea (%rdx,%rdi,1),%r10d
cmp %r8d,%edx
jg 3d <func1+0x3d>
mov %edi,%eax
imul %esi,%eax
mov %r8d,%r10d
sub %eax,%r10d
add %esi,%r10d
lea (%rsi,%rdi,1),%r9d
cmp %ecx,%edx
jg 4f <func1+0x4f>
lea (%rsi,%r8,1),%r9d
sub %edi,%r9d
sub %edx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %ebx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a2 < a3)
    {
        v6 = (a4 * a5 + a1) + a3;
    }
    else
    {
        v6 = (a4 * a1 + a4) + a4;
    }
    v7 = a1 * a3 * (a3 - a4);
    if (a5 < a3)
    {
        v8 = a3 + a1;
    }
    else
    {
        v8 = (a5 - (a1 * a2)) + a2;
    }
    if (a4 < a3)
    {
        v9 = a2 + a1;
    }
    else
    {
        v9 = a2 + a5 - a1 - a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 4
3 4
4 6
5 6
6 6
7 6
8 6
9 10
10 10
11 12
12 12
13 12
14 12
15 12
16 15
17 13
18 13
19 19
20 19
21 19
22 19
23 19
24 23
25 21
26 21
27 27
28 27
29 27
30 29
31 29
32 29
33 29
34 29
35 29
36 29
37 29
38 30
39 30
<<<sep_out_sample>>>
lea (%rdx,%rdx,1),%r9d
cmp %ecx,%edi
mov $0x0,%eax
cmovg %r9d,%eax
add %edi,%edx
add %esi,%edx
add %edx,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
lea (%rax,%rsi,2),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a2 * a1;
    }
    if (a4 < a1)
    {
        v8 = (a3 + a1 - a1) + a3;
    }
    else
    {
        v8 = a5 - a5;
    }
    v9 = a2 + a2;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 11
5 18
6 18
7 18
8 18
9 18
10 18
11 19
<<<sep_out_sample>>>
test %r8d,%r8d
jle 12 <func1+0x12>
mov %ecx,%r10d
imul %edi,%r10d
imul %edi,%r10d
jmp 19 <func1+0x19>
lea (%rcx,%rsi,2),%r10d
add %esi,%r10d
lea (%rsi,%rsi,1),%eax
mov %r8d,%r9d
sub %edi,%r9d
test %r8d,%r8d
cmovg %eax,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
mov %r8d,%ecx
imul %r8d,%ecx
imul %ecx,%edx
add %edx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (v6 < a5)
    {
        v6 = a4 * a1 * a1;
    }
    else
    {
        v6 = a2 + ((a2 + a4) + a2);
    }
    if (v7 < a5)
    {
        v7 = a2 + a2;
    }
    else
    {
        v7 = a5 - a1;
    }
    v8 = a5 + (a5 * a5 * a3);
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 14
10 14
11 14
12 14
13 14
14 21
15 21
16 21
17 21
18 21
19 21
20 20
21 20
22 20
23 20
24 21
25 22
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a1 - a3 * a2;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        if (a4 < a1)
        {
            v8 += a2 * a5;
        }
        else
        {
            v8 += a4 * a2 - a4;
        }
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a5)
    {
        if (a1 < a5)
        {
            v10 += a2 * a3 * a4;
        }
        else
        {
            v10 += a3 + (a4 * a4);
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 33
2 33
3 33
4 33
5 34
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,2),%eax
add %eax,%edx
add %esi,%edx
add %edx,%r8d
add %r8d,%ecx
sub %edi,%esi
lea 0x1(%rcx,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = a2 + (a5 - a1 - a5);
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += (a3 + a5) + a2;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a1)
    {
        if (v10 < a1)
        {
            v9 += a2 * a1;
        }
        else
        {
            v9 += a1 - (a1 * a5);
        }
    }
    v11 = a3 + a3;
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 23
2 23
3 23
4 23
5 23
6 4
7 23
8 24
<<<sep_out_sample>>>
push %rbx
mov %ecx,%ebx
sub %edi,%ebx
cmp %edx,%edi
jle 1c <func1+0x1c>
mov %esi,%r11d
imul %esi,%r11d
mov %r8d,%r10d
imul %edi,%r10d
sub %r10d,%r11d
jmp 2b <func1+0x2b>
mov %edx,%r11d
imul %edi,%r11d
imul %ecx,%r11d
imul %ecx,%r11d
lea 0x1(%rdx),%r9d
imul %edx,%r9d
sub %esi,%r9d
cmp %r9d,%esi
jle 4b <func1+0x4b>
mov %r8d,%r10d
imul %ecx,%r10d
imul %edx,%r10d
add %edi,%r10d
jmp 5a <func1+0x5a>
mov %r8d,%r10d
imul %r8d,%r10d
imul %edx,%r10d
imul %r8d,%r10d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %ebx,%eax
add %r11d,%eax
add %eax,%r9d
lea (%r9,%r10,1),%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a4 - a1;
    if (a3 < a1)
    {
        v7 = a2 * a2 - (a5 * a1);
    }
    else
    {
        v7 = (a3 * a1) * a4 * a4;
    }
    v8 = a3 * a3 + a3 - a2;
    if (v8 < a2)
    {
        v9 = a1 + a5 * a4 * a3;
    }
    else
    {
        v9 = a3 * (a5 * a5) * a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 4
3 4
4 5
5 5
6 7
7 7
8 7
9 7
10 7
11 7
12 11
13 11
14 11
15 11
16 13
17 13
18 13
19 14
20 14
21 16
22 16
23 16
24 16
25 16
26 20
27 20
28 20
29 20
30 22
31 22
32 22
33 22
34 22
35 22
36 22
37 22
38 23
39 23
<<<sep_out_sample>>>
mov %r8d,%r11d
sub %ecx,%r11d
imul %r8d,%r11d
imul %edi,%r11d
mov %edi,%r10d
imul %esi,%r10d
sub %edx,%r10d
add %edi,%r10d
mov %edi,%r9d
sub %esi,%r9d
cmp %esi,%r8d
mov $0x0,%eax
cmovg %eax,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a1 * ((a5 - a4) * a5);
    v7 = (a1 * a2 - a3) + a1;
    if (a2 < a5)
    {
        v8 = a5 - a5;
    }
    else
    {
        v8 = a1 - a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 5
6 5
7 5
8 5
9 12
10 12
11 12
12 12
13 12
14 14
15 14
16 14
17 14
18 14
19 14
20 14
21 15
<<<sep_out_sample>>>
lea (%rdx,%rcx,1),%r9d
mov %ecx,%eax
imul %edx,%eax
add %eax,%r9d
cmp $0x1,%ecx
jle 19 <func1+0x19>
mov %esi,%eax
imul %r8d,%eax
jmp 24 <func1+0x24>
mov %edi,%eax
imul %edi,%eax
sub %ecx,%eax
imul %r8d,%eax
mov %edi,%r10d
sub %esi,%r10d
cmp %esi,%edi
jl 36 <func1+0x36>
lea 0x2(%r8),%r10d
imul %edx,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a3 + a4 + a4 * a3;
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a5 + a1;
    }
    if (v8 < a4)
    {
        v9 = a2 * a5;
    }
    else
    {
        v9 = (a1 * a1 - a4) * a5;
    }
    if (a1 < a2)
    {
        v10 = a3 + a1 - a2 - a3;
    }
    else
    {
        v10 = (a3 + a3 * a5) + a3;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 10
6 10
7 12
8 12
9 12
10 16
11 16
12 16
13 16
14 20
15 20
16 18
17 18
18 24
19 24
20 26
21 26
22 26
23 26
24 26
25 26
26 26
27 27
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
sub %edx,%ecx
add %eax,%ecx
imul %r8d,%esi
sub %esi,%edi
imul %edi,%edx
lea 0x1(%rcx,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = ((a5 - a5) - a3) + a4;
    v7 = a3 * (a1 - a2 * a5);
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        if (a4 < a3)
        {
            v8 += a2 + (a2 * a3);
        }
        else
        {
            v8 += a5 - a4 * a4;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 18
5 4
6 18
7 5
8 5
9 5
10 18
11 19
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
sub %edx,%edi
add %edi,%esi
lea (%r8,%rcx,2),%eax
lea 0x1(%rsi,%rax,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a1 < a1)
    {
        v6 = (a1 + a3 + a1) + a2;
    }
    else
    {
        v6 = a1 - a3 + a2 + a4;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += a3 - a1;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        if (v6 < a1)
        {
            v9 += a1 * a5;
        }
        else
        {
            v9 += a4 - (a2 * a1);
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 29
2 29
3 29
4 10
5 10
6 10
7 29
8 30
<<<sep_out_sample>>>
mov %edi,%r10d
imul %r8d,%r10d
lea (%rcx,%rdx,1),%r9d
cmp %esi,%r8d
jg 1d <func1+0x1d>
mov %edx,%r9d
sub %esi,%r9d
imul %ecx,%r9d
add %r8d,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
imul %r8d,%r8d
add %edi,%r8d
imul %edi,%r8d
add %r8d,%eax
imul %edx,%edx
add %edx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a1 * a5;
    if (a2 < a5)
    {
        v7 = a4 + a3;
    }
    else
    {
        v7 = (a3 - a2) * a4 + a5;
    }
    v8 = a1 * ((a5 * a5) + a1);
    v9 = a1 + (a3 * a3);
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 7
4 5
5 5
6 11
7 11
8 11
9 11
10 15
11 15
12 15
13 15
14 15
15 15
16 13
17 13
18 13
19 15
20 14
21 14
22 15
23 16
<<<sep_out_sample>>>
cmp %ecx,%esi
jge d <func1+0xd>
mov %ecx,%r10d
imul %edi,%r10d
jmp 19 <func1+0x19>
mov %esi,%r10d
sub %edi,%r10d
sub %edx,%r10d
add %ecx,%r10d
cmp %r8d,%esi
jge 2d <func1+0x2d>
lea (%rcx,%rsi,1),%r9d
mov %esi,%eax
imul %r8d,%eax
add %eax,%r9d
jmp 3a <func1+0x3a>
mov %r8d,%r9d
imul %r8d,%r9d
add %edx,%r9d
add %r8d,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a2 < a4)
    {
        v6 = a4 * a1;
    }
    else
    {
        v6 = (a2 - a1 - a3) + a4;
    }
    if (a2 < a5)
    {
        v7 = (a4 + a2) + a2 * a5;
    }
    else
    {
        v7 = ((a5 * a5) + a3) + a5;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 10
10 12
11 12
12 14
13 14
14 14
15 14
16 14
17 18
18 18
19 18
20 18
21 20
22 20
23 20
24 20
25 20
26 20
27 21
<<<sep_out_sample>>>
lea (%r8,%r8,1),%r9d
cmp %esi,%r8d
jle 1a <func1+0x1a>
mov %ecx,%r10d
imul %esi,%r10d
mov %edi,%eax
imul %edx,%eax
add %r10d,%eax
jmp 1f <func1+0x1f>
mov %esi,%eax
imul %ecx,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a5 + a5;
    if (a2 < a5)
    {
        v7 = (a4 * a2) + a1 * a3;
    }
    else
    {
        v7 = a2 * a4 - a5 + a5;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += a4 + a1 - a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 5
3 5
4 7
5 7
6 7
7 7
8 7
9 7
10 11
11 11
12 18
13 18
14 18
15 18
16 18
17 18
18 19
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
lea (%r8,%rcx,1),%eax
lea (%rdx,%rcx,2),%edx
imul %esi,%edx
add %edx,%eax
add %esi,%edi
imul %ecx,%esi
lea (%rdi,%rsi,1),%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a2 * ((a3 + a4) + a4);
    v7 = (a2 + a1) + a4 * a2;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 4
7 6
8 5
9 5
10 5
11 6
12 7
<<<sep_out_sample>>>
mov %r8d,%eax
imul %edi,%eax
mov %edx,%r9d
sub %ecx,%r9d
lea 0x1(%r9,%rax,1),%eax
add %eax,%edi
add %edi,%edx
add %esi,%edx
add %edx,%r8d
add %ecx,%r8d
sub %esi,%ecx
lea 0x1(%r8,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = a3 - (a3 + a2) + a4;
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += (a2 - a2) - a2;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        v9 += a3 - a3 - a5;
    }
    v11 = (a3 + (a5 * a1)) - a4;
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 15
2 15
3 15
4 15
5 16
6 16
7 16
8 16
9 16
10 16
11 4
12 16
13 17
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
sub %r8d,%ecx
sub %esi,%ecx
sub %edx,%ecx
add %eax,%ecx
sub %edx,%r8d
lea 0x1(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = (a4 - a5) - a2 - a3;
    v7 = a5 - a3;
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += a4 - a2 + a1;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a4)
    {
        if (v6 < a3)
        {
            v10 += a2 + a4 + a5;
        }
        else
        {
            v10 += (a4 * a2) - a4;
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 23
2 23
3 23
4 23
5 4
6 4
7 4
8 23
9 5
10 23
11 24
<<<sep_out_sample>>>
lea (%rdi,%rsi,1),%r10d
imul %ecx,%r10d
mov %ecx,%eax
neg %eax
imul %edi,%eax
lea (%rdi,%rdi,1),%r9d
cmp %ecx,%edi
jle 22 <func1+0x22>
mov %edi,%r9d
imul %ecx,%r9d
imul %esi,%r9d
add %r9d,%edi
add %edi,%edx
add %edx,%esi
add %r8d,%esi
add %esi,%ecx
lea 0x1(%r10,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = (a1 + a2) * a4;
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += a2 + a1 - a2;
    }
    v9 = a1 - (a1 + (a1 * a4));
    if (a4 < a1)
    {
        v10 = a2 * (a1 * a4);
    }
    else
    {
        v10 = a1 + a1;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 10
4 10
5 10
6 17
7 11
8 11
9 13
10 13
11 13
12 19
13 19
14 19
15 19
16 19
17 19
18 19
19 20
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%eax
lea (%rax,%rcx,2),%eax
imul %r8d,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a1 + (a3 - a4);
    }
    v8 = a4 + a4;
    v9 = a5 * a5;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 11
5 11
6 10
7 11
8 12
<<<sep_out_sample>>>
cmp %edi,%r8d
jge e <func1+0xe>
mov %ecx,%r9d
imul %esi,%r9d
jmp 1f <func1+0x1f>
lea (%rcx,%r8,1),%r10d
mov $0x1,%r9d
sub %r10d,%r9d
imul %esi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
sub %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a5 < a1)
    {
        v6 = (a4 * a2 + a5) - a5;
    }
    else
    {
        v6 = a2 - (a4 + a5) * a2;
    }
    v7 = (a1 - a2) - a1;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 10
10 13
11 13
12 13
13 13
14 13
15 13
16 14
<<<sep_out_sample>>>
mov %ecx,%r9d
sub %edx,%r9d
mov %esi,%eax
sub %ecx,%eax
test %r8d,%r8d
jle 17 <func1+0x17>
mov %r8d,%r10d
sub %ecx,%r10d
jmp 20 <func1+0x20>
mov %esi,%r10d
sub %edx,%r10d
sub %edx,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a4 - a3;
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += a2 - a5 + a1;
    }
    v9 = a2 - a4;
    if (v7 < a5)
    {
        v10 = a5 - a4;
    }
    else
    {
        v10 = a2 - a3 - a3;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 10
4 10
5 11
6 11
7 13
8 13
9 13
10 17
11 17
12 17
13 19
14 19
15 19
16 19
17 19
18 19
19 19
20 20
<<<sep_out_sample>>>
push %rbp
push %rbx
cmp %r8d,%esi
jge 14 <func1+0x14>
mov %edx,%ebx
imul %edx,%ebx
lea (%r8,%rdx,1),%eax
add %eax,%ebx
jmp 1c <func1+0x1c>
mov %ecx,%ebx
sub %esi,%ebx
add %ecx,%ebx
sub %edi,%ebx
mov %edi,%r11d
sub %ecx,%r11d
mov %ecx,%r10d
imul %edi,%r10d
cmp %edx,%esi
jge 3d <func1+0x3d>
mov %edx,%r9d
imul %ecx,%r9d
imul %ecx,%r9d
sub %r8d,%r9d
jmp 4a <func1+0x4a>
lea (%rdx,%rdi,1),%r9d
mov %r8d,%ebp
imul %edi,%ebp
sub %ebp,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %ebx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
pop %rbx
pop %rbp
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a2 < a5)
    {
        v6 = a3 * a3 + (a5 + a3);
    }
    else
    {
        v6 = (a4 - a2) + a4 - a1;
    }
    v7 = (a3 - a3 + a1) - a4;
    v8 = a4 * a1;
    if (a2 < a3)
    {
        v9 = (a3 * a4 * a4) - a5;
    }
    else
    {
        v9 = a3 + a1 - (a5 * a1);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 2
3 4
4 4
5 6
6 6
7 6
8 6
9 6
10 10
11 10
12 10
13 10
14 12
15 12
16 13
17 13
18 14
19 14
20 16
21 16
22 16
23 16
24 16
25 20
26 20
27 20
28 20
29 22
30 22
31 22
32 22
33 22
34 22
35 22
36 22
37 23
38 23
39 23
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (a1 < a5)
        {
            v6 += a1 * a2;
        }
        else
        {
            v6 += a5 - a5;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        if (a4 < a1)
        {
            v8 += (a3 + a5) * a5;
        }
        else
        {
            v8 += (a2 - a1) * a4;
        }
    }
    v10 = (a4 * (a5 - a5)) * a2;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 29
2 29
3 29
4 29
5 30
<<<sep_out_sample>>>
lea 0x2(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12, v13 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a4 + a2;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        if (a5 < a1)
        {
            v8 += a1 + a1 - a2;
        }
        else
        {
            v8 += (a3 * a2) + a4;
        }
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a1)
    {
        v10 += a3 + (a4 + a3);
    }
    v12 = 0;
    for (v13 = 0; v13++; v13<a5)
    {
        v12 += (a2 + a4) - a1;
    }
    return v12+v13+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 31
2 31
3 31
4 31
5 32
<<<sep_out_sample>>>
mov %esi,%eax
cmp %esi,%edx
jle 11 <func1+0x11>
mov %r8d,%eax
imul %ecx,%eax
sub %edx,%eax
imul %edx,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%ecx
add %ecx,%eax
lea (%rax,%rdx,2),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a3 * a5;
    }
    if (a2 < a3)
    {
        v8 = (a5 * a4 - a3) * a3;
    }
    else
    {
        v8 = (a1 - a1) + a2;
    }
    v9 = a3 + a3;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 15
2 9
3 9
4 11
5 11
6 11
7 11
8 18
9 18
10 18
11 18
12 18
13 18
14 19
<<<sep_out_sample>>>
cmp %r8d,%edx
jge e <func1+0xe>
mov %edi,%eax
sub %r8d,%eax
sub %edx,%eax
jmp 14 <func1+0x14>
mov %edi,%eax
neg %eax
sub %edx,%eax
cmp $0x1,%edx
jle 28 <func1+0x28>
mov %edi,%r9d
imul %edx,%r9d
add %esi,%r9d
sub %edx,%r9d
jmp 35 <func1+0x35>
mov %esi,%r9d
sub %r8d,%r9d
imul %edi,%r9d
sub %esi,%r9d
lea 0x1(%r9,%rdi,1),%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (a4 < a2)
        {
            v6 += a2 + a4 * a1;
        }
        else
        {
            v6 += a2 * a3 * a4;
        }
    }
    if (a3 < a5)
    {
        v8 = a1 - a5 - a3;
    }
    else
    {
        v8 = (a3 - a3 - a1) - a3;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        v9 += a5 * (a3 - a2);
    }
    if (v10 < a3)
    {
        v11 = a1 * a3 + a2 - a3;
    }
    else
    {
        v11 = a1 * (a2 - a5) - a2;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 18
7 22
8 22
9 22
10 29
11 29
12 31
13 31
14 31
15 31
16 31
17 35
18 35
19 35
20 35
21 37
22 37
23 37
24 37
25 37
26 37
27 38
<<<sep_out_sample>>>
cmp %edi,%r8d
jge d <func1+0xd>
lea -0x1(%rsi),%eax
imul %ecx,%eax
jmp 13 <func1+0x13>
mov %edi,%eax
imul %r8d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a5 < a1)
    {
        v6 = a4 * a2 - a4;
    }
    else
    {
        v6 = a1 * a5;
    }
    v7 = a1 - (a1 + a4);
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 13
9 13
10 13
11 13
12 14
<<<sep_out_sample>>>
mov %ecx,%r9d
sub %edi,%r9d
lea (%rcx,%r8,1),%eax
test %esi,%esi
jg 18 <func1+0x18>
lea (%rsi,%rdx,1),%eax
imul %r8d,%eax
imul %esi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a4 - a1;
    if (v7 < a2)
    {
        v7 = a4 + a5;
    }
    else
    {
        v7 = a2 * (a5 * (a2 + a3));
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 7
4 5
5 5
6 11
7 11
8 11
9 13
10 13
11 13
12 13
13 13
14 13
15 14
<<<sep_out_sample>>>
cmp %r8d,%edx
jge 13 <func1+0x13>
mov %ecx,%r9d
sub %r8d,%r9d
sub %esi,%r9d
add %edx,%r9d
jmp 1b <func1+0x1b>
lea -0x1(%r8),%r9d
imul %r8d,%r9d
mov %esi,%eax
imul %edx,%eax
cmp %eax,%edx
jle 33 <func1+0x33>
mov %esi,%r10d
imul %r8d,%r10d
add %edx,%r10d
sub %edi,%r10d
jmp 3d <func1+0x3d>
mov %esi,%r10d
imul %edi,%r10d
neg %r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a3 < a5)
    {
        v6 = (a4 - a5 - a2) + a3;
    }
    else
    {
        v6 = a5 * a5 - a5;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        if (v6 < a2)
        {
            v7 += a2 + a1 + a3;
        }
        else
        {
            v7 += a1 + a2 * a2;
        }
    }
    v9 = a2 * a3;
    if (v9 < a3)
    {
        v10 = (a2 * a5 + a3) - a1;
    }
    else
    {
        v10 = a3 - ((a2 * a1) + a3);
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 24
11 24
12 25
13 25
14 27
15 27
16 27
17 27
18 27
19 31
20 31
21 31
22 33
23 33
24 33
25 33
26 33
27 33
28 33
29 34
<<<sep_out_sample>>>
lea 0x2(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12, v13 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += (a4 * a3) * a3;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += a5 + a5 - a2;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a4)
    {
        if (v8 < a4)
        {
            v10 += a1 + a4 + a5;
        }
        else
        {
            v10 += a5 + a1 - a5;
        }
    }
    v12 = 0;
    for (v13 = 0; v13++; v13<a5)
    {
        v12 += a3 - a4;
    }
    return v12+v13+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 31
2 31
3 31
4 31
5 32
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rdx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a3 - a4;
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a3 + a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 11
<<<sep_out_sample>>>
mov %edi,%eax
sub %edx,%eax
cmp %edi,%edx
jl 10 <func1+0x10>
mov %esi,%eax
sub %edi,%eax
sub %ecx,%eax
sub %edi,%eax
add %edx,%edi
add %edi,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (a2 < a2)
        {
            v6 += (a4 + a2) - a2;
        }
        else
        {
            v6 += a5 - (a3 - a3);
        }
    }
    if (a3 < a1)
    {
        v8 = a1 - a3;
    }
    else
    {
        v8 = (a2 - a1 - a4) - a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 18
2 18
3 16
4 16
5 22
6 22
7 22
8 22
9 24
10 24
11 24
12 24
13 24
14 25
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%eax
imul %r8d,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (v7 < a2)
        {
            v6 += a3 + a1 - a2;
        }
        else
        {
            v6 += a4 + a1 - a1;
        }
    }
    v8 = a5 * a5;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 16
6 17
7 18
<<<sep_out_sample>>>
cmp %esi,%r8d
jge 13 <func1+0x13>
mov %esi,%r10d
sub %edi,%r10d
sub %edi,%r10d
add %r8d,%r10d
jmp 23 <func1+0x23>
mov %r8d,%eax
imul %edx,%eax
mov %esi,%r10d
sub %eax,%r10d
imul %r8d,%r10d
cmp %ecx,%esi
jle 37 <func1+0x37>
mov %r8d,%r9d
imul %r8d,%r9d
sub %ecx,%r9d
imul %ecx,%r9d
jmp 42 <func1+0x42>
mov %edx,%r9d
imul %ecx,%r9d
imul %r9d,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a5 < a2)
    {
        v6 = a5 - (a1 + (a1 - a2));
    }
    else
    {
        v6 = (a2 - a5 * a3) * a5;
    }
    if (a4 < a2)
    {
        v7 = (a5 * a5 - a4) * a4;
    }
    else
    {
        v7 = (a3 * a4 * a4) * a3;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 10
13 12
14 12
15 14
16 14
17 14
18 14
19 14
20 18
21 18
22 18
23 20
24 20
25 20
26 20
27 20
28 20
29 21
<<<sep_out_sample>>>
mov %ecx,%eax
imul %ecx,%eax
lea (%rax,%rsi,2),%r11d
lea (%rsi,%rcx,1),%r10d
mov %r8d,%eax
imul %edx,%eax
mov %edi,%r9d
sub %eax,%r9d
imul %edx,%r9d
cmp %r9d,%r8d
jle 2a <func1+0x2a>
mov %r8d,%eax
imul %esi,%eax
jmp 33 <func1+0x33>
mov %edi,%eax
imul %edi,%eax
sub %esi,%eax
sub %edi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r11d,%ecx
add %r10d,%ecx
add %ecx,%r9d
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a2 + a4 * a4 + a2;
    if (a5 < a5)
    {
        v7 = a3 + ((a2 * a5) + a4);
    }
    else
    {
        v7 = a2 + a4;
    }
    v8 = (a1 - (a5 * a3)) * a3;
    if (v8 < a5)
    {
        v9 = a5 * a2;
    }
    else
    {
        v9 = (a1 * a1) - a2 - a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 11
5 13
6 13
7 13
8 13
9 13
10 14
11 14
12 16
13 16
14 16
15 20
16 20
17 20
18 20
19 22
20 22
21 22
22 22
23 22
24 22
25 22
26 22
27 23
<<<sep_out_sample>>>
mov %edx,%r11d
imul %ecx,%r11d
imul %ecx,%r11d
lea (%r8,%rsi,1),%r10d
cmp %esi,%edx
jg 22 <func1+0x22>
mov %edi,%r10d
imul %r8d,%r10d
imul %edx,%r10d
imul %esi,%r10d
lea (%rdi,%rdx,1),%r9d
add %esi,%r9d
add %r8d,%r9d
add %ecx,%r9d
add %r11d,%r9d
add %r10d,%r9d
sub %ecx,%esi
sub %r8d,%esi
sub %ecx,%esi
lea (%r9,%rsi,1),%eax
imul %edx,%edx
imul %edx,%ecx
sub %ecx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a3 * a4 * a4;
    if (a2 < a3)
    {
        v7 = a5 + a2;
    }
    else
    {
        v7 = (a1 * a5 * a3) * a2;
    }
    v8 = (a2 - a4 - a5) - a4;
    v9 = a1 - a3 * a3 * a4;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 7
5 5
6 5
7 11
8 11
9 11
10 11
11 15
12 15
13 15
14 15
15 15
16 15
17 13
18 13
19 13
20 15
21 14
22 14
23 14
24 15
25 16
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a3 - a3 - a4;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        if (v8 < a1)
        {
            v8 += a1 * a2 * a2;
        }
        else
        {
            v8 += a1 - a2 - a3;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 21
5 22
<<<sep_out_sample>>>
cmp %edi,%esi
jle 13 <func1+0x13>
mov %esi,%r9d
imul %edi,%r9d
add %ecx,%r9d
sub %edx,%r9d
jmp 1d <func1+0x1d>
mov %esi,%r9d
imul %ecx,%r9d
sub %edx,%r9d
cmp %esi,%r9d
jge 31 <func1+0x31>
mov %edx,%r10d
sub %ecx,%r10d
imul %r8d,%r10d
add %esi,%r10d
jmp 40 <func1+0x40>
mov %edi,%r10d
imul %edx,%r10d
imul %r8d,%r10d
imul %edx,%r10d
test %esi,%esi
jle 4a <func1+0x4a>
mov %esi,%eax
sub %ecx,%eax
jmp 50 <func1+0x50>
lea (%rdx,%rcx,2),%eax
imul %edi,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %eax,%r9d
lea (%r9,%r10,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (a3 < a2)
        {
            v6 += (a2 * a1) + a3;
        }
        else
        {
            v6 += a5 * (a4 - a4);
        }
    }
    if (a1 < a2)
    {
        v8 = (a2 * a1 + a4) - a3;
    }
    else
    {
        v8 = a2 * a4 - a3;
    }
    if (v8 < a2)
    {
        v9 = a2 + (a3 - a4) * a5;
    }
    else
    {
        v9 = a3 * (a1 * a3 * a5);
    }
    if (v6 < a2)
    {
        v10 = a2 - a4;
    }
    else
    {
        v10 = a1 * ((a3 + a4) + a4);
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 18
7 18
8 22
9 22
10 22
11 24
12 24
13 26
14 26
15 26
16 26
17 26
18 30
19 30
20 30
21 30
22 32
23 32
24 34
25 34
26 34
27 38
28 38
29 40
30 40
31 40
32 40
33 40
34 40
35 40
36 41
<<<sep_out_sample>>>
test %r8d,%r8d
jle 13 <func1+0x13>
mov %esi,%r9d
sub %edx,%r9d
add %esi,%r9d
add %r8d,%r9d
jmp 22 <func1+0x22>
mov %edx,%r9d
imul %edx,%r9d
imul %r8d,%r9d
imul %ecx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
sub %edx,%ecx
imul %ecx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (v6 < a5)
    {
        v6 = a2 - (a3 - a2) + a5;
    }
    else
    {
        v6 = (a3 * a3 * a5) * a4;
    }
    v7 = (a4 - a3) * a5;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 13
13 13
14 13
15 13
16 13
17 12
18 12
19 13
20 14
<<<sep_out_sample>>>
mov %ecx,%r9d
imul %esi,%r9d
cmp %edi,%r8d
jge 15 <func1+0x15>
mov %r8d,%eax
neg %eax
sub %ecx,%eax
jmp 1e <func1+0x1e>
mov %edx,%eax
sub %r8d,%eax
add %ecx,%eax
add %esi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a4 * a2;
    if (a5 < a1)
    {
        v7 = ((a1 - a1) - a5) - a4;
    }
    else
    {
        v7 = (a3 - a5 + a4) + a2;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += a3 * (a4 * a2);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 5
4 5
5 7
6 7
7 7
8 7
9 11
10 11
11 11
12 11
13 18
14 18
15 18
16 18
17 18
18 18
19 19
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %eax,%ecx
imul %r8d,%esi
lea 0x1(%rcx,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    if (a5 < a5)
    {
        v6 = a1 - a2;
    }
    else
    {
        v6 = a5 * a2;
    }
    v7 = (a5 + a5) * (a4 - a4);
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += (a2 + a2) + a1;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a4)
    {
        v10 += a4 * a3 - a2;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 23
2 23
3 23
4 23
5 10
6 23
7 24
<<<sep_out_sample>>>
lea (%rdi,%rdi,2),%eax
cmp $0x1,%esi
jle 14 <func1+0x14>
lea (%rdi,%rcx,1),%eax
mov %edx,%r9d
sub %eax,%r9d
mov %r9d,%eax
lea 0x1(%rdi,%rdx,1),%edi
add %edi,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%ecx
add %ecx,%eax
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (a1 < a5)
        {
            v6 += (a1 + a5) + a1;
        }
        else
        {
            v6 += a1 - a2 + a2;
        }
    }
    if (v7 < a2)
    {
        v8 = a3 - (a1 + a4);
    }
    else
    {
        v8 = a1 + a1 + a1;
    }
    v9 = ((a4 - a4) * a5) + a3;
    v10 = 0;
    for (v11 = 0; v11++; v11<a1)
    {
        if (a3 < a1)
        {
            v10 += a3 + a5;
        }
        else
        {
            v10 += a2 - a2;
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 16
3 16
4 18
5 18
6 18
7 18
8 37
9 37
10 37
11 37
12 37
13 37
14 38
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a4 * a3;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += a3 + (a4 - a1);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 14
2 14
3 14
4 14
5 15
<<<sep_out_sample>>>
mov %edi,%r10d
imul %ecx,%r10d
mov %edi,%eax
neg %eax
mov %esi,%r9d
sub %edi,%r9d
cmp %esi,%edi
cmovl %eax,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
add %ecx,%r8d
add %r8d,%edx
imul %edx,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a1 * a4;
    if (a1 < a2)
    {
        v7 = a5 - (a1 + a5);
    }
    else
    {
        v7 = a2 - a1;
    }
    v8 = (a5 + a4 + a3) * a4;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 7
4 7
5 7
6 7
7 7
8 7
9 14
10 14
11 14
12 14
13 14
14 14
15 13
16 13
17 13
18 14
19 15
<<<sep_out_sample>>>
push %rbx
mov %r8d,%eax
imul %esi,%eax
mov %edi,%r11d
sub %eax,%r11d
sub %edx,%r11d
mov %esi,%r10d
neg %r10d
sub %ecx,%r10d
cmp %ecx,%esi
jle 26 <func1+0x26>
mov %edi,%r9d
imul %edi,%r9d
jmp 32 <func1+0x32>
lea (%r8,%rcx,1),%r9d
mov %edi,%ebx
imul %ecx,%ebx
sub %ebx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
sub %edx,%esi
add %esi,%edi
add %edi,%ecx
add %ecx,%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a1 - (a5 * a2) - a3;
    v7 = (a2 - a4) - (a2 + a2);
    if (a4 < a2)
    {
        v8 = (a1 + a5 - a5) * a1;
    }
    else
    {
        v8 = a5 + a4 - a1 * a4;
    }
    v9 = a4 + ((a2 - a3) + a1);
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 4
3 4
4 4
5 4
6 4
7 5
8 5
9 5
10 6
11 6
12 8
13 8
14 8
15 12
16 12
17 12
18 12
19 15
20 15
21 15
22 15
23 15
24 15
25 15
26 14
27 14
28 14
29 15
30 16
31 16
<<<sep_out_sample>>>
test %r8d,%r8d
jle f <func1+0xf>
lea -0x1(%rsi),%eax
imul %ecx,%eax
add %esi,%eax
jmp 18 <func1+0x18>
mov %edx,%eax
sub %ecx,%eax
imul %ecx,%eax
sub %esi,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (v6 < a5)
    {
        v6 = a2 + (a2 * a4 - a4);
    }
    else
    {
        v6 = (a4 * (a3 - a4)) - a2;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a2 + a3;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a1)
    {
        v9 += (a1 - a5) + a3;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 10
11 22
12 22
13 22
14 22
15 22
16 23
<<<sep_out_sample>>>
test %esi,%esi
jle d <func1+0xd>
lea (%rdx,%r8,2),%r9d
add %edx,%r9d
jmp 14 <func1+0x14>
lea (%rsi,%rdx,1),%eax
lea (%rax,%rcx,2),%r9d
mov %edx,%eax
sub %esi,%eax
cmp %edx,%edi
jle 25 <func1+0x25>
lea -0x1(%r8),%eax
imul %edx,%eax
add %esi,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %r9d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a1 + a5 - a2;
    }
    if (v8 < a2)
    {
        v8 = a5 + (a3 + a5) + a3;
    }
    else
    {
        v8 = a4 + ((a2 + a3) + a4);
    }
    if (a3 < a1)
    {
        v9 = (a3 * a5 - a3) + a2;
    }
    else
    {
        v9 = a3 - a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 15
7 15
8 23
9 23
10 17
11 17
12 19
13 19
14 19
15 25
16 25
17 25
18 25
19 25
20 25
21 26
<<<sep_out_sample>>>
mov $0x0,%r9d
cmp %edx,%ecx
jl 13 <func1+0x13>
mov %r8d,%r9d
sub %edx,%r9d
add %ecx,%r9d
mov %edx,%r11d
imul %edi,%r11d
test %esi,%esi
jle 28 <func1+0x28>
lea (%r8,%rcx,1),%r10d
imul %edi,%r10d
jmp 2f <func1+0x2f>
mov %esi,%r10d
imul %edi,%r10d
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
add %r11d,%eax
add %r10d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a4 < a3)
    {
        v6 = a5 - a5;
    }
    else
    {
        v6 = a4 - (a3 - a5);
    }
    v7 = a3 * a1;
    if (v8 < a2)
    {
        v8 = a1 * a5 + a4 * a1;
    }
    else
    {
        v8 = a2 * a1;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        if (a3 < a5)
        {
            v9 += a1 - a3 + a2;
        }
        else
        {
            v9 += a5 - a1;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 4
3 4
4 10
5 10
6 10
7 12
8 12
9 13
10 13
11 15
12 15
13 15
14 19
15 19
16 33
17 33
18 33
19 33
20 33
21 33
22 33
23 34
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a5 * a1 * a4;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += a1 + a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 14
2 14
3 14
4 14
5 15
<<<sep_out_sample>>>
lea (%rcx,%rcx,1),%r10d
sub %esi,%r10d
cmp %edi,%esi
jle 1c <func1+0x1c>
mov %edx,%r9d
imul %edi,%r9d
imul %r8d,%r9d
imul %ecx,%r9d
jmp 27 <func1+0x27>
lea -0x1(%rdi),%r9d
imul %r8d,%r9d
sub %edi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = (a4 + a4) - a2;
    if (a1 < a2)
    {
        v7 = (a3 * a1 * a5) * a4;
    }
    else
    {
        v7 = (a1 * a5 - a5) - a1;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 5
4 5
5 7
6 7
7 7
8 7
9 7
10 11
11 11
12 11
13 13
14 13
15 13
16 13
17 13
18 13
19 14
<<<sep_out_sample>>>
cmp %edx,%ecx
jge 13 <func1+0x13>
mov $0x1,%eax
sub %esi,%eax
imul %r8d,%eax
sub %ecx,%eax
jmp 1f <func1+0x1f>
mov %r8d,%eax
imul %edx,%eax
imul %edi,%eax
imul %edx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
add %edi,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (v6 < a4)
        {
            v6 += a1 - a4 - a1;
        }
        else
        {
            v6 += a5 + (a4 - a5);
        }
    }
    if (a4 < a3)
    {
        v8 = (a5 - a2 * a5) - a4;
    }
    else
    {
        v8 = a5 * a3 * a1 * a3;
    }
    v9 = a4 + a1;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 18
7 18
8 22
9 22
10 22
11 22
12 25
13 25
14 25
15 25
16 25
17 24
18 25
19 26
<<<sep_out_sample>>>
push %rbx
mov %ecx,%r11d
sub %edx,%r11d
add $0x1,%r11d
imul %ecx,%r11d
mov %r8d,%r10d
sub %edi,%r10d
cmp %esi,%edi
jge 22 <func1+0x22>
mov %edi,%r9d
imul %edx,%r9d
jmp 2f <func1+0x2f>
mov %esi,%r9d
imul %esi,%r9d
add %ecx,%r9d
add %esi,%r9d
test %edx,%edx
jle 40 <func1+0x40>
mov $0x1,%ebx
sub %r8d,%ebx
imul %ecx,%ebx
jmp 4a <func1+0x4a>
lea (%r8,%rdi,1),%eax
mov %edx,%ebx
sub %eax,%ebx
add %esi,%ebx
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea (%rcx,%r11,1),%eax
add %r10d,%eax
add %r9d,%eax
add %ebx,%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = (a4 * (a4 - a3)) + a4;
    v7 = a5 - a1;
    if (a1 < a2)
    {
        v8 = a1 * a3;
    }
    else
    {
        v8 = (a2 * a2) + a4 + a2;
    }
    if (v9 < a3)
    {
        v9 = a4 - (a5 * a4);
    }
    else
    {
        v9 = a2 + (a3 - (a5 + a1));
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 4
3 4
4 4
5 4
6 5
7 5
8 6
9 6
10 8
11 8
12 8
13 12
14 12
15 12
16 12
17 14
18 14
19 16
20 16
21 16
22 16
23 20
24 20
25 20
26 20
27 22
28 22
29 22
30 22
31 22
32 22
33 22
34 22
35 23
36 23
<<<sep_out_sample>>>
cmp %edx,%r8d
jge e <func1+0xe>
mov %edi,%r9d
imul %esi,%r9d
jmp 18 <func1+0x18>
lea (%rcx,%r8,1),%r9d
add %edi,%r9d
add %esi,%r9d
cmp $0x1,%esi
jle 2c <func1+0x2c>
mov %ecx,%r11d
sub %edi,%r11d
imul %edi,%r11d
add %ecx,%r11d
jmp 34 <func1+0x34>
lea (%rdx,%rcx,1),%r11d
imul %r8d,%r11d
lea (%rsi,%r8,1),%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %r9d,%eax
add %r11d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a2 + (a2 - a4);
    }
    if (a5 < a3)
    {
        v8 = a3 + (a1 * a2) - a3;
    }
    else
    {
        v8 = (a4 + a5 + a1) + a2;
    }
    if (v7 < a2)
    {
        v9 = a4 - ((a1 - a4) * a1);
    }
    else
    {
        v9 = (a3 + a4) * a5;
    }
    v10 = (a2 + a5) + (a3 - a3);
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 15
7 15
8 15
9 17
10 17
11 19
12 19
13 19
14 19
15 19
16 23
17 23
18 25
19 26
20 26
21 26
22 26
23 26
24 26
25 26
26 27
<<<sep_out_sample>>>
cmp %edi,%esi
jle 14 <func1+0x14>
lea (%r8,%r8,1),%eax
mov %ecx,%r9d
imul %r8d,%r9d
sub %r9d,%eax
jmp 1e <func1+0x1e>
mov %edx,%eax
imul %r8d,%eax
sub %esi,%eax
add %edx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (v6 < a4)
        {
            v6 += (a5 * a5) + a2;
        }
        else
        {
            v6 += a4 + (a5 - a5);
        }
    }
    if (a1 < a2)
    {
        v8 = a5 + a5 - a4 * a5;
    }
    else
    {
        v8 = (a3 * a5 - a2) + a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 18
7 18
8 22
9 22
10 22
11 22
12 24
13 24
14 24
15 24
16 24
17 25
<<<sep_out_sample>>>
mov $0x1,%r9d
sub %esi,%r9d
imul %r8d,%r9d
test %edi,%edi
jle 1d <func1+0x1d>
lea -0x1(%rdi),%eax
imul %ecx,%eax
imul %r8d,%eax
jmp 23 <func1+0x23>
lea 0x1(%rcx),%eax
imul %edi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a5 - (a2 * a5);
    if (v7 < a1)
    {
        v7 = (a4 * a1 - a4) * a5;
    }
    else
    {
        v7 = a1 + (a1 * a4);
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 5
5 5
6 7
7 7
8 7
9 7
10 11
11 11
12 13
13 13
14 13
15 13
16 13
17 13
18 14
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (a4 < a3)
        {
            v6 += a1 - a1;
        }
        else
        {
            v6 += a5 + (a5 * a2);
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        if (v8 < a3)
        {
            v8 += a4 + a1;
        }
        else
        {
            v8 += a4 + a5 + a2;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 28
2 28
3 28
4 28
5 29
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %r8d,%edx
add %ecx,%edx
lea 0x1(%rcx),%eax
imul %ecx,%eax
sub %esi,%eax
add %edx,%eax
sub %r8d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = (a4 * a4) + a4 - a2;
    v7 = a4 - a5;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 4
7 4
8 6
9 5
10 6
11 7
<<<sep_out_sample>>>
mov %edx,%eax
neg %eax
sub %r8d,%eax
lea (%rsi,%r8,1),%r9d
test %r8d,%r8d
jle 18 <func1+0x18>
mov %edi,%r10d
sub %r8d,%r10d
jmp 28 <func1+0x28>
lea (%rsi,%rsi,1),%r10d
mov %ecx,%r11d
sub %r10d,%r11d
mov %r11d,%r10d
sub %r8d,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += (a2 + a4) + a1;
    }
    v8 = (a2 - a3 - a5) - a2;
    v9 = a2 + a5;
    if (v10 < a5)
    {
        v10 = a1 - a5;
    }
    else
    {
        v10 = a4 - (a2 + a2) - a5;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 9
4 10
5 11
6 11
7 13
8 13
9 13
10 17
11 17
12 17
13 17
14 17
15 19
16 19
17 19
18 19
19 19
20 19
21 19
22 20
<<<sep_out_sample>>>
lea (%rcx,%rsi,1),%eax
lea (%rax,%rdx,2),%r10d
lea (%rdi,%rsi,1),%r9d
test %ecx,%ecx
jle 1b <func1+0x1b>
mov %esi,%eax
imul %edi,%eax
add %r8d,%eax
sub %edx,%eax
jmp 21 <func1+0x21>
lea (%rsi,%r8,2),%eax
add %ecx,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r10d,%ecx
sub %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = (a4 + a2) + a3 + a3;
    v7 = a3 - a3;
    v8 = a5 - (a1 + a2) - a5;
    if (v7 < a4)
    {
        v9 = a2 * a1 + a5 - a3;
    }
    else
    {
        v9 = (a2 + (a5 + a5)) + a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 7
5 7
6 9
7 9
8 9
9 9
10 9
11 13
12 13
13 15
14 15
15 15
16 15
17 15
18 15
19 15
20 16
<<<sep_out_sample>>>
cmp %r8d,%edi
jge 11 <func1+0x11>
mov %edi,%eax
imul %r8d,%eax
lea (%rax,%rdx,2),%r9d
jmp 1b <func1+0x1b>
mov %r8d,%r9d
sub %ecx,%r9d
imul %edi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
mov %edi,%r9d
imul %edi,%r9d
add %r9d,%eax
imul %edx,%edi
add %edi,%eax
imul %ecx,%edx
imul %edx,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a1 < a5)
    {
        v6 = (a3 + a1 * a5) + a3;
    }
    else
    {
        v6 = a1 * a5 - a4 * a1;
    }
    v7 = a1 * a1;
    v8 = a3 * a1;
    v9 = (a3 * a3) * a4 * a4;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 15
11 15
12 15
13 15
14 15
15 12
16 12
17 15
18 13
19 15
20 14
21 14
22 15
23 16
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %edx,%r8d
lea 0x1(%rcx,%r8,1),%edx
lea (%rsi,%rcx,2),%eax
add %edx,%eax
sub %ecx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (a1 < a4)
        {
            v6 += a2 * a1 * a5;
        }
        else
        {
            v6 += a1 + a2 - a1;
        }
    }
    v8 = a4 + a2 + a4;
    v9 = a1 - a4;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 18
5 16
6 18
7 17
8 18
9 19
<<<sep_out_sample>>>
mov %r8d,%eax
sub %edx,%eax
add %ecx,%eax
cmp %ecx,%esi
jge 15 <func1+0x15>
mov %esi,%eax
sub %r8d,%eax
imul %esi,%eax
add %edx,%eax
lea 0x2(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    if (a2 < a4)
    {
        v6 = (a2 - a5) * a2 + a3;
    }
    else
    {
        v6 = (a5 - a3) + a4;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += a4 * a3;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        v9 += a2 + a1;
    }
    v11 = 0;
    for (v12 = 0; v12++; v12<a1)
    {
        v11 += (a3 * a3) * a5;
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 4
5 4
6 6
7 6
8 6
9 6
10 27
11 27
12 27
13 27
14 27
15 28
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %esi,%r8d
add %r8d,%eax
add %edx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a2 + a5;
    v7 = a3 + a2;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 6
7 5
8 6
9 7
<<<sep_out_sample>>>
cmp %edx,%esi
jge 16 <func1+0x16>
mov %edx,%r9d
imul %esi,%r9d
mov %r8d,%eax
sub %esi,%eax
imul %eax,%r9d
jmp 24 <func1+0x24>
mov %esi,%r9d
imul %r8d,%r9d
lea (%rcx,%rdi,1),%eax
imul %eax,%r9d
lea (%rcx,%rcx,1),%eax
cmp %r8d,%esi
jle 35 <func1+0x35>
lea -0x1(%rsi),%eax
imul %edx,%eax
imul %ecx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea (%r9,%rcx,2),%edx
lea (%rdx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a2 < a3)
    {
        v6 = a3 * a2 * (a5 - a2);
    }
    else
    {
        v6 = a2 * a5 * (a4 + a1);
    }
    v7 = (a1 + a4) - a1;
    if (a5 < a2)
    {
        v8 = (a2 * a3 - a3) * a4;
    }
    else
    {
        v8 = a4 + a4;
    }
    v9 = a4 - a4;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 6
9 10
10 10
11 10
12 10
13 19
14 13
15 13
16 15
17 15
18 15
19 22
20 22
21 22
22 22
23 22
24 22
25 23
<<<sep_out_sample>>>
add %edx,%edi
add %esi,%edi
add %r8d,%edi
add %ecx,%edi
lea -0x1(%rsi),%eax
imul %ecx,%eax
sub %edx,%eax
add %edi,%eax
imul %r8d,%ecx
add %ecx,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a4 < a4)
    {
        v6 = (a2 * a5) * a2;
    }
    else
    {
        v6 = a2 * a4 - a4 - a3;
    }
    v7 = a5 * a4 + a3;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 13
2 13
3 13
4 13
5 10
6 10
7 10
8 13
9 12
10 12
11 13
12 14
<<<sep_out_sample>>>
lea (%rsi,%rdx,1),%eax
test %esi,%esi
jle 16 <func1+0x16>
mov %edi,%eax
imul %edi,%eax
mov %esi,%r9d
imul %esi,%r9d
sub %r9d,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %r8d,%esi
lea 0x2(%rcx,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (a3 < a3)
        {
            v6 += a2 * a3 - a5;
        }
        else
        {
            v6 += (a5 - a4) - a1;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += a2 * a2;
    }
    if (v10 < a2)
    {
        v10 = a1 * a1 - a2 * a2;
    }
    else
    {
        v10 = a2 + a3;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 27
2 21
3 21
4 23
5 23
6 23
7 23
8 23
9 29
10 29
11 29
12 29
13 29
14 30
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%r9d
add %esi,%r9d
add %r8d,%r9d
add %ecx,%r9d
imul %esi,%edx
mov %edi,%eax
sub %edx,%eax
sub %esi,%eax
add %r9d,%eax
imul %ecx,%edi
sub %edi,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a1 - a3 * a2 - a2;
    v7 = a5 - a4 * a1;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 4
7 4
8 4
9 6
10 5
11 5
12 6
13 7
<<<sep_out_sample>>>
lea (%rdx,%rdi,1),%eax
add %eax,%esi
add %r8d,%esi
add %ecx,%esi
add %ecx,%eax
add %edx,%eax
add %eax,%esi
mov %edi,%eax
imul %edx,%eax
imul %ecx,%eax
sub %edx,%eax
add %esi,%eax
sub %r8d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = (a3 + a1 + a4) + a3;
    v7 = (a1 * a3 * a4) - a3;
    v8 = a4 - a5;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 7
3 7
4 7
5 4
6 4
7 7
8 5
9 5
10 5
11 5
12 7
13 6
14 7
15 8
<<<sep_out_sample>>>
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rcx,%rdi,2),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = (a1 - a1) + a1 + a1;
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += a2 + a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 10
6 11
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%eax
sub %edx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (a5 < a5)
        {
            v6 += a3 * a4;
        }
        else
        {
            v6 += (a1 * a4) * a3;
        }
    }
    v8 = a5 - a3;
    v9 = 0;
    for (v10 = 0; v10++; v10<a1)
    {
        v9 += a4 - a3 * a2;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 22
4 22
5 16
6 22
7 23
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a5 - (a2 + a3);
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        if (v6 < a4)
        {
            v8 += (a5 * a1) - a2;
        }
        else
        {
            v8 += a4 * a4 - a1;
        }
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a2)
    {
        v10 += a4 + a4 - a3;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 26
2 26
3 26
4 26
5 27
<<<sep_out_sample>>>
mov %esi,%eax
sub %ecx,%eax
test %esi,%esi
jg e <func1+0xe>
lea (%rdx,%rcx,2),%eax
sub %r8d,%eax
add %edx,%edi
add %esi,%edi
add %r8d,%edi
add %ecx,%edi
add %edi,%eax
mov %edx,%edi
imul %edx,%edi
sub %esi,%edi
imul %edi,%ecx
add %ecx,%eax
mov $0x1,%ecx
sub %r8d,%ecx
imul %ecx,%esi
add %esi,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (v6 < a2)
    {
        v6 = (a2 - a4) + a3 - a3;
    }
    else
    {
        v6 = a3 - ((a5 - a4) - a4);
    }
    v7 = (a3 * a3 - a2) * a4;
    v8 = a2 - a2 * a5 + a3;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 6
2 6
3 4
4 4
5 10
6 10
7 14
8 14
9 14
10 14
11 14
12 12
13 12
14 12
15 12
16 14
17 13
18 13
19 13
20 13
21 14
22 15
<<<sep_out_sample>>>
cmp %edx,%ecx
jge 17 <func1+0x17>
mov %r8d,%eax
imul %esi,%eax
mov %ecx,%r9d
sub %eax,%r9d
mov %r9d,%eax
sub %edi,%eax
jmp 1f <func1+0x1f>
mov %edi,%eax
imul %ecx,%eax
imul %edx,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %esi,%edx
add %r8d,%edx
add %ecx,%edx
add %eax,%edx
sub %r8d,%esi
add %ecx,%esi
sub %edi,%esi
add %edx,%esi
imul %r8d,%ecx
imul %ecx,%r8d
sub %edi,%r8d
lea (%rsi,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a4 < a3)
    {
        v6 = (a4 - a5 * a2) - a1;
    }
    else
    {
        v6 = a3 * (a1 * a4);
    }
    v7 = ((a2 - a5) + a4) - a1;
    v8 = (a4 * a5) * a5 - a1;
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        if (v9 < a3)
        {
            v9 += a5 - (a1 + a2);
        }
        else
        {
            v9 += a1 + a1;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 6
9 6
10 10
11 10
12 10
13 26
14 26
15 26
16 26
17 26
18 12
19 12
20 12
21 26
22 13
23 13
24 13
25 26
26 27
<<<sep_out_sample>>>
mov %r8d,%eax
imul %r8d,%eax
imul %esi,%eax
imul %eax,%ecx
add %ecx,%edi
add %edx,%edi
lea (%r8,%rsi,2),%eax
lea (%rax,%rdi,1),%eax
imul %edx,%esi
lea 0x1(%rax,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a2 - a4 - a2 + a2;
    v7 = a2 * a3;
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        if (v6 < a2)
        {
            v8 += a3 * (a5 * a1);
        }
        else
        {
            v8 += (a4 * a2) - a3;
        }
    }
    v10 = a2 * (a5 * a5) * a4;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 18
5 19
6 19
7 19
8 19
9 5
10 19
11 20
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %eax,%edx
imul %ecx,%edi
sub %edi,%r8d
sub %ecx,%r8d
lea (%rdx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a3 + a4 - a4;
    v7 = (a5 - (a1 * a4)) - a4;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 6
6 5
7 5
8 5
9 6
10 7
<<<sep_out_sample>>>
lea 0x2(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12, v13 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a2 + a2 * a3;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        if (a5 < a2)
        {
            v8 += (a2 * a1) + a3;
        }
        else
        {
            v8 += a5 + a2 + a2;
        }
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a1)
    {
        if (v6 < a3)
        {
            v10 += a2 - a1 * a1;
        }
        else
        {
            v10 += (a2 + a3) - a1;
        }
    }
    v12 = 0;
    for (v13 = 0; v13++; v13<a4)
    {
        v12 += a1 + a1 * a5;
    }
    return v12+v13+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 38
2 38
3 38
4 38
5 39
<<<sep_out_sample>>>
mov %r8d,%r10d
imul %r8d,%r10d
add %edx,%r10d
sub %r8d,%r10d
mov %edx,%r9d
neg %r9d
cmp %edi,%r8d
jle 21 <func1+0x21>
mov %r8d,%r9d
neg %r9d
sub %edi,%r9d
test %ecx,%ecx
jle 32 <func1+0x32>
mov %edx,%eax
imul %ecx,%eax
imul %edi,%eax
add %r8d,%eax
jmp 3b <func1+0x3b>
mov %esi,%eax
sub %edx,%eax
add %esi,%eax
imul %edi,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r10d,%ecx
add %ecx,%r9d
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = (a5 * a5) + a3 - a5;
    v7 = a2 - a2;
    if (a1 < a5)
    {
        v8 = (a2 - a2 - a5) - a1;
    }
    else
    {
        v8 = (a2 - a2) - a3;
    }
    if (v9 < a4)
    {
        v9 = ((a3 * a4) * a1) + a5;
    }
    else
    {
        v9 = (a2 - a3 + a2) * a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 12
6 12
7 6
8 6
9 8
10 8
11 8
12 14
13 14
14 16
15 16
16 16
17 16
18 16
19 20
20 20
21 20
22 20
23 22
24 22
25 22
26 22
27 22
28 22
29 22
30 23
<<<sep_out_sample>>>
lea (%rsi,%rcx,1),%eax
test %r8d,%r8d
jg 1a <func1+0x1a>
mov %r8d,%r9d
imul %ecx,%r9d
mov $0x1,%eax
sub %r9d,%eax
imul %edx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (v6 < a5)
    {
        v6 = a2 + a4 - a1 + a1;
    }
    else
    {
        v6 = a3 - a5 * a4 * a3;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += a3 + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 6
2 4
3 4
4 10
5 10
6 10
7 10
8 10
9 17
10 17
11 17
12 17
13 17
14 18
<<<sep_out_sample>>>
test %esi,%esi
jle c <func1+0xc>
mov %edi,%r10d
sub %r8d,%r10d
jmp 13 <func1+0x13>
mov %edi,%r10d
imul %edi,%r10d
mov %ecx,%r9d
imul %ecx,%r9d
imul %r8d,%r9d
lea (%rdi,%rdx,2),%edx
lea (%rdx,%r9,1),%edx
add %esi,%edx
add %r8d,%edx
lea 0x1(%rcx,%rdx,1),%eax
add %r10d,%eax
add %edi,%r8d
add %r8d,%esi
add %esi,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += (a2 + a4) - a1;
    }
    if (v6 < a2)
    {
        v8 = a1 - a5;
    }
    else
    {
        v8 = a1 * a1;
    }
    v9 = a4 + (a1 + a5 + a2);
    v10 = a4 * a4 * a5 + a3;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 15
7 15
8 18
9 18
10 18
11 19
12 19
13 19
14 19
15 19
16 19
17 17
18 17
19 17
20 19
21 20
<<<sep_out_sample>>>
mov %r8d,%eax
imul %ecx,%eax
mov %edx,%r10d
sub %eax,%r10d
mov %esi,%r9d
sub %edx,%r9d
sub %edx,%r9d
sub %r8d,%r9d
test %esi,%esi
jle 2c <func1+0x2c>
mov %edi,%r11d
imul %edx,%r11d
add %esi,%r11d
imul %r8d,%r11d
jmp 3a <func1+0x3a>
mov %ecx,%r11d
imul %edi,%r11d
sub %r8d,%r11d
imul %edx,%r11d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea (%rcx,%r10,1),%eax
add %r9d,%eax
add %r11d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a3 - (a5 * a4);
    v7 = (a2 - a3) - a3 - a5;
    if (v8 < a2)
    {
        v8 = (a2 + (a1 * a3)) * a5;
    }
    else
    {
        v8 = (a4 * a1 - a5) * a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 5
6 5
7 5
8 5
9 6
10 6
11 8
12 8
13 8
14 8
15 8
16 12
17 12
18 12
19 12
20 14
21 14
22 14
23 14
24 14
25 14
26 14
27 15
<<<sep_out_sample>>>
lea (%rcx,%rdx,1),%r9d
mov %esi,%r11d
sub %r8d,%r11d
mov %ecx,%eax
imul %edi,%eax
add %eax,%r11d
cmp %edi,%r9d
jge 21 <func1+0x21>
lea 0x1(%r8),%r10d
imul %esi,%r10d
jmp 28 <func1+0x28>
mov %r8d,%r10d
imul %esi,%r10d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
add %r11d,%eax
add %r10d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a4 + a3;
    v7 = a2 - a5 + a4 * a1;
    if (v6 < a1)
    {
        v8 = a2 * a5 + a2;
    }
    else
    {
        v8 = a5 * a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 5
3 5
4 5
5 5
6 5
7 6
8 6
9 8
10 8
11 8
12 12
13 12
14 14
15 14
16 14
17 14
18 14
19 14
20 14
21 15
<<<sep_out_sample>>>
cmp $0x1,%r8d
jle 11 <func1+0x11>
mov %esi,%eax
imul %esi,%eax
imul %r8d,%eax
jmp 17 <func1+0x17>
mov %edi,%eax
imul %r8d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += (a4 - a1) - a1;
    }
    if (v7 < a5)
    {
        v8 = a2 * a2 * a5;
    }
    else
    {
        v8 = a1 * a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 15
8 15
9 17
10 17
11 17
12 17
13 17
14 18
<<<sep_out_sample>>>
push %rbx
mov %esi,%eax
imul %esi,%eax
mov %r8d,%ebx
sub %eax,%ebx
add %r8d,%ebx
lea (%rsi,%rsi,1),%r11d
cmp %r8d,%esi
jge 27 <func1+0x27>
mov %esi,%r10d
imul %edx,%r10d
imul %esi,%r10d
sub %ecx,%r10d
jmp 31 <func1+0x31>
lea (%rdx,%rdx,1),%r10d
sub %edi,%r10d
add %ecx,%r10d
cmp %edi,%ecx
jge 43 <func1+0x43>
mov %edx,%r9d
sub %r8d,%r9d
add %edx,%r9d
sub %esi,%r9d
jmp 53 <func1+0x53>
mov $0x1,%r9d
sub %edx,%r9d
imul %ecx,%r9d
add %edx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %ebx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a5 - (a2 * a2) + a5;
    v7 = a4 - (a4 - a2 - a2);
    if (a2 < a5)
    {
        v8 = (a2 * a3 * a2) - a4;
    }
    else
    {
        v8 = a3 + a3 - a1 + a4;
    }
    if (a4 < a1)
    {
        v9 = (a3 + (a3 - a5)) - a2;
    }
    else
    {
        v9 = a4 - a4 * a3 + a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 4
3 4
4 4
5 4
6 4
7 5
8 6
9 6
10 8
11 8
12 8
13 8
14 8
15 12
16 12
17 12
18 14
19 14
20 16
21 16
22 16
23 16
24 16
25 20
26 20
27 20
28 20
29 22
30 22
31 22
32 22
33 22
34 22
35 22
36 22
37 23
38 23
<<<sep_out_sample>>>
mov %edx,%eax
sub %ecx,%eax
cmp %r8d,%ecx
jge 11 <func1+0x11>
mov %esi,%eax
imul %r8d,%eax
add %edx,%eax
test %r8d,%r8d
jle 23 <func1+0x23>
lea (%rdi,%rcx,1),%r9d
sub %r8d,%r9d
imul %r8d,%r9d
jmp 2a <func1+0x2a>
mov %r8d,%r9d
imul %r8d,%r9d
add %r9d,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (v6 < a4)
        {
            v6 += a5 + a3 - a4;
        }
        else
        {
            v6 += a3 + (a5 - a1);
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += a2 * a5;
    }
    if (a4 < a5)
    {
        v10 = a3 + a2 * a5;
    }
    else
    {
        v10 = ((a3 + a1) - a1) - a4;
    }
    if (v8 < a5)
    {
        v11 = a5 * (a1 + a4 - a5);
    }
    else
    {
        v11 = a1 + (a5 * a5 - a1);
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 27
2 27
3 21
4 21
5 23
6 23
7 23
8 29
9 29
10 31
11 31
12 31
13 31
14 35
15 35
16 37
17 37
18 37
19 37
20 37
21 37
22 38
<<<sep_out_sample>>>
mov %edi,%eax
sub %esi,%eax
lea 0x1(%rax,%r8,1),%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += (a1 * a3) - a3;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += a1 - a4 + a5;
    }
    v10 = (a5 + a1) - a2;
    v11 = 0;
    for (v12 = 0; v12++; v12<a5)
    {
        v11 += a3 * a3;
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 14
2 14
3 20
4 20
5 20
6 20
7 20
8 20
9 21
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
lea 0x1(%r8,%rsi,1),%eax
sub %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (a4 < a3)
        {
            v6 += (a5 + a1) * a3;
        }
        else
        {
            v6 += a3 * a2 - a3;
        }
    }
    v8 = a2 - (a4 + a2 + a3);
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 16
4 17
5 18
<<<sep_out_sample>>>
test %esi,%esi
jle 14 <func1+0x14>
lea (%r8,%r8,1),%eax
mov %edx,%r9d
imul %ecx,%r9d
sub %r9d,%eax
jmp 16 <func1+0x16>
mov %edi,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a2 * a1;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        if (v9 < a4)
        {
            v8 += a4 * a1;
        }
        else
        {
            v8 += a1 * (a5 - a1);
        }
    }
    if (v8 < a2)
    {
        v10 = a5 + a5 - a3 * a4;
    }
    else
    {
        v10 = a5 - a5 + a1;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 23
4 23
5 23
6 23
7 23
8 27
9 29
10 29
11 29
12 29
13 29
14 30
<<<sep_out_sample>>>
cmp %r8d,%edx
jge e <func1+0xe>
lea (%rdi,%rsi,1),%r11d
add %r8d,%r11d
jmp 15 <func1+0x15>
mov %edx,%r11d
imul %ecx,%r11d
test %esi,%esi
jle 22 <func1+0x22>
mov %esi,%r10d
imul %ecx,%r10d
jmp 30 <func1+0x30>
mov %edi,%r10d
imul %edi,%r10d
imul %r8d,%r10d
sub %edi,%r10d
cmp %ecx,%edi
jle 43 <func1+0x43>
lea (%rcx,%rdi,1),%r9d
mov %r8d,%eax
imul %edx,%eax
add %eax,%r9d
jmp 52 <func1+0x52>
mov %edx,%eax
imul %r8d,%eax
imul %edx,%eax
mov %esi,%r9d
sub %eax,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a3 < a5)
    {
        v6 = a5 + (a1 + a2);
    }
    else
    {
        v6 = (a4 + a3 - a3) * a3;
    }
    if (v7 < a2)
    {
        v7 = ((a2 + a1) - a1) * a4;
    }
    else
    {
        v7 = a1 * a1 * a5 - a1;
    }
    if (a4 < a1)
    {
        v8 = a4 + a1 + a5 * a3;
    }
    else
    {
        v8 = a2 - a3 * (a3 * a5);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 12
9 12
10 14
11 14
12 14
13 18
14 18
15 18
16 18
17 20
18 20
19 22
20 22
21 22
22 22
23 22
24 26
25 26
26 26
27 26
28 26
29 28
30 28
31 28
32 28
33 28
34 28
35 28
36 29
<<<sep_out_sample>>>
cmp $0x1,%esi
jle e <func1+0xe>
mov %edx,%r9d
imul %edx,%r9d
jmp 1b <func1+0x1b>
mov %r8d,%r9d
sub %edx,%r9d
add %ecx,%r9d
imul %r8d,%r9d
mov %r8d,%eax
sub %esi,%eax
cmp %r8d,%edx
jle 34 <func1+0x34>
mov %r8d,%r10d
imul %r8d,%r10d
mov %edi,%eax
sub %edx,%eax
imul %r10d,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %r9d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a2 * a4 * a2;
    }
    if (v7 < a2)
    {
        v8 = a3 * a3;
    }
    else
    {
        v8 = (a5 - a3 + a4) * a5;
    }
    if (a5 < a3)
    {
        v9 = a5 * a5 * (a1 - a3);
    }
    else
    {
        v9 = a5 - a2;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a4)
    {
        if (a4 < a3)
        {
            v10 += a2 + (a1 * a5);
        }
        else
        {
            v10 += a2 * a5;
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 15
7 15
8 15
9 15
10 23
11 23
12 17
13 17
14 19
15 19
16 19
17 19
18 19
19 37
20 37
21 37
22 37
23 37
24 37
25 38
<<<sep_out_sample>>>
cmp %ecx,%esi
jge f <func1+0xf>
mov %esi,%eax
sub %edx,%eax
add %edi,%eax
imul %esi,%eax
jmp 17 <func1+0x17>
mov %edi,%eax
sub %edx,%eax
lea (%rax,%r8,2),%eax
lea (%rdx,%rdi,1),%r9d
add %r9d,%esi
add %r8d,%esi
add %esi,%ecx
lea 0x1(%rax,%rcx,1),%ecx
mov %edx,%eax
imul %edi,%eax
sub %r8d,%eax
sub %edi,%eax
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a2 < a4)
    {
        v6 = a2 * (a2 - a3 + a1);
    }
    else
    {
        v6 = a5 + (a5 - (a3 - a1));
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        if (v8 < a1)
        {
            v7 += a4 - a4 - a3;
        }
        else
        {
            v7 += (a2 * a2) + a2;
        }
    }
    v9 = a3 * a1 - a5 - a1;
    if (a3 < a3)
    {
        v10 = (a2 + a5 - a1) * a1;
    }
    else
    {
        v10 = a1 - a1;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 33
12 33
13 33
14 33
15 33
16 24
17 24
18 24
19 24
20 33
21 34
<<<sep_out_sample>>>
lea (%rsi,%r8,1),%r10d
mov %ecx,%r9d
neg %r9d
imul %esi,%r9d
cmp %edx,%r8d
jge 22 <func1+0x22>
mov %edi,%eax
imul %r8d,%eax
lea (%rdx,%rcx,1),%r11d
sub %r11d,%eax
jmp 2c <func1+0x2c>
mov %edi,%eax
imul %ecx,%eax
imul %edi,%eax
sub %esi,%eax
lea (%rdi,%rdx,1),%r11d
add %esi,%r11d
add %r11d,%r8d
add %r8d,%ecx
add %r10d,%ecx
add %r9d,%ecx
add %eax,%ecx
sub $0x1,%edx
imul %edx,%edi
sub %esi,%edi
lea (%rcx,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a2 + a5;
    v7 = (a2 - a4 * a2) - a2;
    if (a5 < a3)
    {
        v8 = a1 * a5 - (a3 + a4);
    }
    else
    {
        v8 = (a1 * a4 * a1) - a2;
    }
    v9 = (a1 * a3) - a1 - a2;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 5
3 5
4 5
5 6
6 6
7 8
8 8
9 8
10 8
11 8
12 12
13 12
14 12
15 12
16 15
17 15
18 15
19 15
20 15
21 15
22 15
23 14
24 14
25 14
26 15
27 16
<<<sep_out_sample>>>
lea (%r8,%rdi,2),%eax
add %edx,%eax
add %esi,%eax
add %r8d,%eax
add %eax,%ecx
lea -0x1(%rdx),%eax
imul %eax,%edi
imul %esi,%edi
add %edi,%ecx
add $0x1,%esi
imul %esi,%r8d
sub %edx,%r8d
lea 0x1(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = ((a1 * a3) - a1) * a2;
    v7 = (a5 + a5 * a2) - a3;
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += a4 - (a2 + a1);
    }
    v10 = a5 + a1;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 12
2 12
3 12
4 12
5 12
6 4
7 4
8 4
9 12
10 5
11 5
12 5
13 12
14 13
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
imul %r8d,%edi
sub %edi,%edx
lea (%rsi,%rcx,2),%eax
lea 0x1(%rdx,%rax,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a3 - a5 * a1 + a4;
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        if (a3 < a3)
        {
            v7 += (a5 + a2) - a1;
        }
        else
        {
            v7 += a3 * a1;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 4
5 4
6 4
7 17
8 18
<<<sep_out_sample>>>
cmp %ecx,%edi
jge a <func1+0xa>
lea (%r8,%r8,1),%eax
jmp 13 <func1+0x13>
lea 0x1(%rdi),%eax
imul %r8d,%eax
sub %esi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a3 + a5;
    }
    if (a1 < a4)
    {
        v8 = a5 + a5;
    }
    else
    {
        v8 = a1 * a5 + a5 - a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 15
6 15
7 15
8 17
9 17
10 17
11 17
12 17
13 18
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %r8d,%esi
add %ecx,%esi
mov %r8d,%eax
imul %r8d,%eax
imul %eax,%eax
add %esi,%eax
add %ecx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = ((a5 * a5) * a5) * a5;
    v7 = a4 + a5;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 4
7 4
8 6
9 5
10 6
11 7
<<<sep_out_sample>>>
lea (%rcx,%rsi,1),%r10d
imul %r8d,%r10d
imul %edi,%r10d
cmp %edi,%esi
jge 1f <func1+0x1f>
mov %edi,%r9d
sub %edx,%r9d
imul %edx,%r9d
add %esi,%r9d
jmp 2f <func1+0x2f>
mov %edx,%r9d
sub %edi,%r9d
mov %edx,%r11d
imul %edi,%r11d
sub %r11d,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = (a4 + a2) * a5 * a1;
    if (a2 < a1)
    {
        v7 = a3 * (a1 - a3) + a2;
    }
    else
    {
        v7 = a3 - a1 - a3 * a1;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 5
5 5
6 7
7 7
8 7
9 7
10 7
11 11
12 11
13 11
14 11
15 11
16 13
17 13
18 13
19 13
20 13
21 13
22 14
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %edx,%r8d
lea (%r8,%rcx,1),%edx
imul %esi,%ecx
add %ecx,%edi
add %edi,%esi
lea 0x1(%rdx,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a3 < a3)
    {
        v6 = ((a2 * a2) * a3) * a3;
    }
    else
    {
        v6 = ((a2 * a4) + a1) + a2;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += (a3 * a4) + a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 10
6 10
7 10
8 17
9 18
<<<sep_out_sample>>>
lea (%rsi,%r8,1),%r9d
imul %ecx,%r9d
imul %edx,%r9d
mov $0x0,%eax
cmp %edi,%edx
jg 26 <func1+0x26>
mov %ecx,%eax
imul %ecx,%eax
imul %edi,%eax
mov %ecx,%r10d
sub %eax,%r10d
mov %r10d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %r9d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a5 + a3 - a2;
    }
    v8 = a4 * (a2 + a5) * a3;
    if (a1 < a3)
    {
        v9 = a1 - a1;
    }
    else
    {
        v9 = a4 - a1 * (a4 * a4);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 9
4 12
5 10
6 10
7 16
8 16
9 16
10 16
11 16
12 16
13 18
14 18
15 18
16 18
17 18
18 18
19 19
<<<sep_out_sample>>>
mov %esi,%r10d
sub %edi,%r10d
sub %r8d,%r10d
add %esi,%r10d
cmp %edx,%esi
jle 19 <func1+0x19>
mov %esi,%r9d
imul %esi,%r9d
jmp 23 <func1+0x23>
lea (%rdx,%rdi,1),%r9d
sub %r8d,%r9d
add %ecx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
sub %esi,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a2 - a1 - a5 + a2;
    if (a3 < a2)
    {
        v7 = a2 * a2;
    }
    else
    {
        v7 = a4 + (a3 + a1 - a5);
    }
    v8 = a4 - a2;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 5
6 5
7 7
8 7
9 7
10 11
11 11
12 11
13 14
14 14
15 14
16 14
17 14
18 14
19 13
20 14
21 15
<<<sep_out_sample>>>
add %edx,%edi
add %esi,%edi
add %r8d,%edi
lea (%r8,%rcx,1),%eax
sub %edx,%eax
lea (%rdi,%rcx,2),%edi
lea (%rdi,%rax,1),%eax
imul %esi,%ecx
add %ecx,%r8d
add %r8d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = (a5 + a4 - a3) + a4;
    v7 = a4 * a2 + a5 + a3;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 4
5 4
6 4
7 6
8 5
9 5
10 5
11 6
12 7
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %edx,%r8d
sub %edi,%esi
sub %edi,%esi
lea (%r8,%rcx,2),%eax
lea 0x1(%rsi,%rax,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a4 + (a2 - a1 - a1);
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += (a3 - a5) * a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 4
5 4
6 4
7 10
8 11
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (a5 < a3)
        {
            v6 += a1 - a1 * a2;
        }
        else
        {
            v6 += a2 - (a4 - a3);
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += a3 * a5 - a3;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a3)
    {
        if (a5 < a4)
        {
            v10 += (a3 + a5) - a2;
        }
        else
        {
            v10 += a3 + (a4 * a1);
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 33
2 33
3 33
4 33
5 34
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%eax
add %ecx,%edx
add %edx,%r8d
imul %r8d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (a4 < a5)
        {
            v6 += a5 - a5 - a2;
        }
        else
        {
            v6 += a3 - a2 * a4;
        }
    }
    v8 = (a3 + a4 + a5) * a4;
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        v9 += a4 * a5;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 22
4 22
5 16
6 16
7 16
8 22
9 23
<<<sep_out_sample>>>
mov %r8d,%r9d
imul %ecx,%r9d
lea (%rdx,%r8,1),%eax
cmp %edx,%r9d
jge 18 <func1+0x18>
lea 0x1(%rsi),%eax
imul %esi,%eax
add %ecx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a5 * a4;
    if (v6 < a3)
    {
        v7 = ((a2 * a2) + a2) + a4;
    }
    else
    {
        v7 = a3 + a5;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 11
4 5
5 5
6 7
7 7
8 7
9 13
10 13
11 13
12 13
13 13
14 13
15 14
<<<sep_out_sample>>>
mov %ecx,%r10d
imul %edx,%r10d
mov %esi,%r9d
sub %ecx,%r9d
cmp %edi,%edx
jg 1d <func1+0x1d>
mov %r8d,%r9d
sub %edx,%r9d
sub %ecx,%r9d
add %r8d,%r9d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a3 + a5;
    }
    v8 = (a4 - (a4 - a4)) * a3;
    if (a1 < a3)
    {
        v9 = (a3 + a2) - a3 - a4;
    }
    else
    {
        v9 = a5 - a3 - a4 + a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 12
4 12
5 10
6 10
7 16
8 16
9 16
10 16
11 18
12 18
13 18
14 18
15 18
16 18
17 19
<<<sep_out_sample>>>
lea (%rdi,%r8,1),%r9d
mov %esi,%eax
sub %ecx,%eax
add %edi,%r9d
cmp %edx,%edi
cmovl %eax,%r9d
mov %ecx,%eax
imul %edx,%eax
lea (%rdi,%rdx,1),%r10d
add %r10d,%esi
add %r8d,%esi
add %ecx,%esi
add %r9d,%esi
sub %ecx,%edx
add %esi,%edx
add %edx,%eax
imul %r8d,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a1 < a3)
    {
        v6 = (a3 - (a4 + a3)) + a2;
    }
    else
    {
        v6 = a1 + a5 + a1;
    }
    v7 = a3 - a2 - a4 + a2;
    v8 = a4 * a3 + a1 - a1;
    v9 = a1 * a5;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 6
3 6
4 6
5 6
6 6
7 13
8 13
9 15
10 15
11 15
12 15
13 15
14 12
15 15
16 15
17 14
18 15
19 16
<<<sep_out_sample>>>
lea (%rcx,%rdx,1),%eax
mov %r8d,%r9d
sub %eax,%r9d
add %r9d,%edi
add %edi,%edx
add %esi,%edx
add %edx,%r8d
add %ecx,%r8d
mov %esi,%eax
imul %esi,%eax
imul %eax,%esi
imul %ecx,%esi
add %r8d,%esi
mov %ecx,%edx
imul %ecx,%edx
lea (%rsi,%rcx,2),%eax
sub %edx,%eax
add $0x1,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = (a2 * a2) * a2 * a4;
    v7 = a4 + a4 - (a4 * a4);
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += a5 + a3;
    }
    v10 = a5 - (a4 + a3);
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 12
5 12
6 12
7 12
8 12
9 4
10 4
11 4
12 4
13 12
14 5
15 5
16 5
17 12
18 12
19 13
<<<sep_out_sample>>>
cmp %edi,%r8d
jge 12 <func1+0x12>
mov %edi,%eax
imul %edx,%eax
imul %esi,%eax
imul %edi,%eax
jmp 1b <func1+0x1b>
mov %edx,%eax
imul %r8d,%eax
lea (%rax,%rdi,2),%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a5 < a1)
    {
        v6 = a1 * a3 * a2 * a1;
    }
    else
    {
        v6 = a3 * a5 + a1 + a1;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += a1 * (a4 + a2);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 17
12 17
13 17
14 17
15 17
16 18
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
lea 0x1(%rcx,%rax,1),%eax
sub %esi,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += (a3 + a3) + a2;
    }
    v8 = a5 - a2;
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        v9 += (a3 - a5) - a3;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 15
2 15
3 15
4 15
5 9
6 15
7 16
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%eax
sub %r8d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a2 * a4 * a2;
    }
    v8 = a4 - a5;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 9
6 10
7 11
<<<sep_out_sample>>>
lea 0x1(%rcx),%r10d
imul %r8d,%r10d
cmp %edi,%ecx
lea (%rcx,%r8,2),%r9d
mov $0x0,%eax
cmovl %eax,%r9d
cmp %edx,%edi
jle 2b <func1+0x2b>
mov %esi,%r11d
sub %edi,%r11d
mov %esi,%eax
imul %edx,%eax
add %r11d,%eax
jmp 33 <func1+0x33>
lea -0x1(%rsi),%eax
imul %edx,%eax
sub %edi,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r10d,%ecx
add %ecx,%r9d
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a3 < a3)
    {
        v6 = a4 + (a2 + a3 - a1);
    }
    else
    {
        v6 = (a4 * a5) + a5;
    }
    if (a4 < a1)
    {
        v7 = a4 - a4;
    }
    else
    {
        v7 = (a4 + a5) + a5;
    }
    if (a3 < a1)
    {
        v8 = a2 - a1 + a2 * a3;
    }
    else
    {
        v8 = (a3 * a2 - a3) - a1;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        v9 += a5 * a3 * a2;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 12
4 18
5 18
6 18
7 20
8 20
9 22
10 22
11 22
12 22
13 22
14 22
15 26
16 26
17 26
18 33
19 33
20 33
21 33
22 33
23 33
24 33
25 34
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
lea 0x1(%rcx,%r8,1),%eax
imul %edx,%esi
add %esi,%edi
imul %edi,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (a5 < a2)
        {
            v6 += (a3 * a2) + a4;
        }
        else
        {
            v6 += a4 - a5 - a2;
        }
    }
    v8 = a3 * ((a2 * a3) + a1);
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 16
6 16
7 16
8 17
9 18
<<<sep_out_sample>>>
mov %edi,%eax
imul %edx,%eax
lea 0x1(%rdi,%rax,1),%eax
add %edx,%eax
add %eax,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%eax
sub %edx,%r8d
imul %r8d,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += (a4 * a4) * a1;
    }
    if (a4 < a4)
    {
        v8 = a5 * a1;
    }
    else
    {
        v8 = (a5 - a3) * a1;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        if (a5 < a1)
        {
            v9 += a1 * a4 - a5;
        }
        else
        {
            v9 += (a1 + a5) * a2;
        }
    }
    v11 = a1 * a3;
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 29
2 29
3 30
4 30
5 30
6 30
7 30
8 15
9 15
10 30
11 31
<<<sep_out_sample>>>
mov $0x0,%eax
mov %r8d,%r9d
imul %r8d,%r9d
cmp %esi,%ecx
cmovl %r9d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a4 < a2)
    {
        v6 = a5 * a5;
    }
    else
    {
        v6 = (a3 * (a2 - a2)) * a3;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += a2 + a5 - a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 6
3 6
4 6
5 6
6 17
7 17
8 17
9 17
10 17
11 18
<<<sep_out_sample>>>
mov %edx,%eax
imul %ecx,%eax
sub %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (a5 < a5)
        {
            v6 += a1 - a1;
        }
        else
        {
            v6 += (a5 + a3) - a2;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += a2 * a3 + a2;
    }
    v10 = a2 - (a2 + a3 * a4);
    if (a4 < a4)
    {
        v11 = a3 + a3 + a4 + a1;
    }
    else
    {
        v11 = a1 - a1;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 30
4 30
5 30
6 30
7 30
8 31
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
imul %ecx,%edx
sub %edi,%edx
add %edx,%r8d
add %r8d,%eax
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a5 + (a4 * a3 - a1);
    v7 = a1 + (a2 - a2);
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 4
7 4
8 6
9 6
10 7
<<<sep_out_sample>>>
add %edi,%edx
add %edx,%esi
lea 0x1(%rsi,%r8,2),%eax
sub %ecx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a2 < a2)
    {
        v6 = a2 + ((a2 - a2) + a2);
    }
    else
    {
        v6 = a5 - a4;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        if (v7 < a4)
        {
            v7 += (a1 + a1) - a3;
        }
        else
        {
            v7 += a3 + a2;
        }
    }
    v9 = a1 - a4;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 25
2 25
3 25
4 24
5 25
6 26
<<<sep_out_sample>>>
mov %ecx,%r11d
sub %r8d,%r11d
sub %r8d,%r11d
add %edi,%r11d
cmp %edi,%edx
jle 19 <func1+0x19>
lea (%r8,%rcx,1),%r10d
sub %esi,%r10d
jmp 26 <func1+0x26>
mov %edx,%r10d
imul %ecx,%r10d
sub %edi,%r10d
add %edx,%r10d
lea (%r8,%r8,1),%r9d
cmp %esi,%edx
jle 3e <func1+0x3e>
mov $0x1,%r9d
sub %edi,%r9d
imul %esi,%r9d
add %edi,%r9d
add %r9d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %r11d,%eax
add %r10d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (a5 < a3)
        {
            v6 += (a5 * a1) + a2;
        }
        else
        {
            v6 += (a2 * a1) - a2;
        }
    }
    v8 = a1 + (a4 - a5 - a5);
    if (a1 < a3)
    {
        v9 = a5 + a4 - a2;
    }
    else
    {
        v9 = (a3 * a4) - a1 + a3;
    }
    if (a2 < a3)
    {
        v10 = a2 - (a1 * a2) + a1;
    }
    else
    {
        v10 = a5 + a3 + a5 - a3;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 16
4 16
5 17
6 17
7 19
8 19
9 19
10 23
11 23
12 23
13 23
14 31
15 25
16 25
17 27
18 27
19 27
20 27
21 33
22 33
23 33
24 33
25 33
26 33
27 33
28 34
<<<sep_out_sample>>>
lea (%rsi,%rsi,1),%eax
mov %edx,%r9d
sub %esi,%r9d
cmp %edx,%esi
cmovle %r9d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += (a2 - a4) + a4;
    }
    if (a3 < a2)
    {
        v8 = a2 + a2;
    }
    else
    {
        v8 = a3 - a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 11
5 11
6 17
7 17
8 17
9 17
10 17
11 18
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
lea (%r8,%rcx,1),%eax
mov %edx,%r9d
sub %edi,%r9d
lea 0x1(%rax,%r9,1),%eax
imul %ecx,%edx
add %edx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a3 - a1;
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        if (v8 < a2)
        {
            v7 += a4 + (a4 * a1);
        }
        else
        {
            v7 += a1 - a5;
        }
    }
    v9 = a2 + a4 * a3;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 18
5 4
6 4
7 18
8 17
9 17
10 18
11 19
<<<sep_out_sample>>>
lea (%rcx,%rsi,1),%r10d
cmp %esi,%ecx
cmovl %edi,%r10d
cmp %r8d,%ecx
jle 18 <func1+0x18>
mov %edi,%r9d
imul %ecx,%r9d
jmp 26 <func1+0x26>
mov %edi,%r9d
imul %edi,%r9d
imul %edi,%r9d
add %esi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
imul %esi,%ecx
add %ecx,%edx
sub %edx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a4 < a2)
    {
        v6 = a2 - a2 + a1;
    }
    else
    {
        v6 = a4 + a2;
    }
    if (a5 < a4)
    {
        v7 = a1 * a4;
    }
    else
    {
        v7 = a1 * (a1 * a1) + a2;
    }
    v8 = a5 - ((a2 * a4) + a3);
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 12
5 12
6 14
7 14
8 14
9 18
10 18
11 18
12 18
13 21
14 21
15 21
16 21
17 21
18 21
19 20
20 20
21 20
22 21
23 22
<<<sep_out_sample>>>
mov %edx,%eax
sub %edi,%eax
test %edx,%edx
jg e <func1+0xe>
lea (%rcx,%rsi,2),%eax
imul %edi,%eax
add %edi,%edx
add %edx,%esi
add %r8d,%esi
add %esi,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (v6 < a3)
    {
        v6 = a3 - ((a4 - a4) + a1);
    }
    else
    {
        v6 = (a2 + a2 + a4) * a1;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += a4 + a2 * a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 6
2 6
3 4
4 4
5 10
6 10
7 17
8 17
9 17
10 17
11 17
12 18
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
lea 0x1(%rcx,%rax,1),%eax
imul %r8d,%esi
add %esi,%eax
add %ecx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a4 * a1 + a3;
    }
    v8 = a5 * a2;
    v9 = ((a4 + a4) + a1) - a4;
    v10 = 0;
    for (v11 = 0; v11++; v11<a5)
    {
        if (v8 < a4)
        {
            v10 += a3 - a5 * a1;
        }
        else
        {
            v10 += a5 + a2;
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 23
2 23
3 23
4 23
5 9
6 23
7 10
8 23
9 24
<<<sep_out_sample>>>
test %esi,%esi
jle 12 <func1+0x12>
mov %ecx,%r9d
sub %r8d,%r9d
add %esi,%r9d
add %edi,%r9d
jmp 21 <func1+0x21>
mov %ecx,%r9d
imul %edi,%r9d
imul %ecx,%r9d
imul %r8d,%r9d
lea 0x1(%rsi),%eax
imul %edi,%eax
sub %ecx,%eax
cmp %esi,%r8d
jle 3a <func1+0x3a>
mov %esi,%r10d
neg %r10d
imul %edi,%r10d
jmp 44 <func1+0x44>
mov %esi,%r10d
imul %esi,%r10d
add %ecx,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %r9d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (a1 < a5)
        {
            v6 += (a3 - a1) - a2;
        }
        else
        {
            v6 += a4 * a5 + a5;
        }
    }
    if (v8 < a2)
    {
        v8 = (a2 - (a5 - a4)) + a1;
    }
    else
    {
        v8 = a4 * a1 * a4 * a5;
    }
    v9 = (a2 * a1) + a1 - a4;
    if (a2 < a5)
    {
        v10 = a1 - a1 * a2 - a1;
    }
    else
    {
        v10 = a2 * a2 + a4;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 18
7 18
8 22
9 22
10 22
11 22
12 24
13 24
14 24
15 25
16 25
17 27
18 27
19 27
20 27
21 31
22 31
23 31
24 33
25 33
26 33
27 33
28 33
29 33
30 33
31 34
<<<sep_out_sample>>>
lea (%rcx,%rdx,2),%eax
lea (%rax,%r8,1),%r9d
lea (%r8,%rdi,1),%eax
cmp $0x1,%r8d
jg 1c <func1+0x1c>
mov %edi,%eax
sub %r8d,%eax
sub $0x1,%eax
imul %esi,%eax
mov %esi,%r10d
sub %r8d,%r10d
sub %ecx,%r10d
imul %edi,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a4 + a3 + a5 + a3;
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += (a1 + a4) + a5;
    }
    if (v8 < a5)
    {
        v9 = a5 + a1;
    }
    else
    {
        v9 = (a2 * (a1 - a5)) - a2;
    }
    v10 = a1 * (a2 - a5 - a4);
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 12
4 10
5 10
6 16
7 16
8 16
9 16
10 18
11 18
12 18
13 18
14 19
15 19
16 19
17 19
18 19
19 19
20 19
21 20
<<<sep_out_sample>>>
add %edx,%edi
add %esi,%edi
add %edi,%r8d
mov %edx,%eax
imul %edx,%eax
sub %esi,%eax
lea (%r8,%rcx,2),%ecx
lea (%rcx,%rax,1),%eax
sub %esi,%edx
lea 0x1(%rax,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a3 * a3 - a2 + a4;
    v7 = a3 - a2;
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += a2 + a3 + a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 4
5 4
6 4
7 4
8 11
9 5
10 11
11 12
<<<sep_out_sample>>>
cmp %edi,%r8d
jge e <func1+0xe>
lea (%rcx,%rcx,1),%r9d
neg %r9d
jmp 15 <func1+0x15>
mov %ecx,%r9d
imul %edi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
imul %edx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a5 < a1)
    {
        v6 = (a4 - a4) - (a4 + a4);
    }
    else
    {
        v6 = a4 * a1;
    }
    v7 = a3 * a2;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 13
9 13
10 13
11 13
12 13
13 12
14 13
15 14
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %eax,%ecx
lea (%rsi,%rsi,1),%eax
imul %eax,%esi
lea 0x1(%rcx,%rsi,1),%ecx
imul %r8d,%edi
sub %edx,%edi
sub %edx,%edi
lea (%rcx,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = (a2 * a2) + (a2 * a2);
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        if (a4 < a5)
        {
            v7 += (a1 * a5) - a3;
        }
        else
        {
            v7 += a5 + a4;
        }
    }
    v9 = (a5 * a1 - a3) - a3;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 18
5 4
6 4
7 18
8 17
9 17
10 17
11 18
12 19
<<<sep_out_sample>>>
cmp %esi,%edi
jge 13 <func1+0x13>
mov %ecx,%r9d
sub %r8d,%r9d
sub %edx,%r9d
imul %edx,%r9d
jmp 1a <func1+0x1a>
mov %esi,%r9d
imul %edi,%r9d
add %edi,%edx
add %edx,%esi
add %r8d,%esi
add %ecx,%esi
add %r9d,%esi
add %ecx,%ecx
sub %ecx,%r8d
sub %edi,%r8d
lea (%rsi,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a1 < a2)
    {
        v6 = ((a4 - a5) - a3) * a3;
    }
    else
    {
        v6 = a2 * a1;
    }
    v7 = a5 - (a4 + a4) - a1;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 13
11 13
12 13
13 13
14 13
15 12
16 12
17 12
18 13
19 14
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
add %esi,%ecx
imul %r8d,%edi
sub %edi,%ecx
lea 0x1(%rcx),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a5 * (a1 - a1 - a1);
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        if (v7 < a4)
        {
            v7 += a5 * a5 * a5;
        }
        else
        {
            v7 += a1 + a3 + a4;
        }
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        v9 += a4 - a3;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 22
4 22
5 4
6 22
7 22
8 23
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
add %esi,%ecx
sub %edx,%r8d
lea 0x1(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a5 - a3;
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        if (a4 < a1)
        {
            v7 += a1 * a1 * a4;
        }
        else
        {
            v7 += a5 * a1 - a1;
        }
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        if (v8 < a1)
        {
            v9 += a1 + a2 - a4;
        }
        else
        {
            v9 += a5 * a2 + a1;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 29
2 29
3 29
4 29
5 4
6 29
7 30
<<<sep_out_sample>>>
lea (%rcx,%rcx,1),%r9d
mov %edx,%r10d
sub %r9d,%r10d
add %edi,%r10d
cmp %edx,%ecx
jle 22 <func1+0x22>
mov %r8d,%eax
sub %edi,%eax
mov %r8d,%r11d
imul %edi,%r11d
sub %r11d,%eax
jmp 2a <func1+0x2a>
lea (%rsi,%rdi,1),%eax
imul %esi,%eax
add %edx,%eax
cmp %esi,%eax
jge 37 <func1+0x37>
imul %esi,%r9d
add %ecx,%r9d
jmp 45 <func1+0x45>
lea (%rsi,%rdi,1),%r11d
mov %edx,%r9d
imul %r8d,%r9d
add %r11d,%r9d
add %edi,%edx
add %edx,%esi
add %r8d,%esi
add %esi,%ecx
add %r10d,%ecx
add %ecx,%eax
add %r9d,%eax
imul %edi,%edi
lea (%rdi,%r8,2),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = (a3 - (a4 + a4)) + a1;
    if (a3 < a4)
    {
        v7 = a5 - a1 - a5 * a1;
    }
    else
    {
        v7 = a2 * (a2 + a1) + a3;
    }
    if (v7 < a2)
    {
        v8 = a4 + (a4 + a4) * a2;
    }
    else
    {
        v8 = (a2 + a1) + a3 * a5;
    }
    v9 = a5 + a1 * a1 + a5;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 5
6 5
7 7
8 7
9 7
10 7
11 7
12 7
13 11
14 11
15 11
16 13
17 13
18 15
19 15
20 15
21 19
22 19
23 19
24 19
25 22
26 22
27 22
28 22
29 22
30 22
31 22
32 21
33 21
34 22
35 23
<<<sep_out_sample>>>
mov %edi,%r9d
sub %esi,%r9d
lea (%rdi,%rcx,1),%eax
cmp %ecx,%r9d
jge 18 <func1+0x18>
mov %edx,%eax
sub %ecx,%eax
imul %ecx,%eax
sub %r8d,%eax
add %edi,%edx
add %esi,%edx
add %edx,%r8d
add %r8d,%ecx
add %ecx,%r9d
add %r9d,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = (a1 - a2 + a1) - a1;
    v7 = ((a1 - a1) * a2) + a2;
    if (v6 < a4)
    {
        v8 = (a3 - a4) * a4 - a5;
    }
    else
    {
        v8 = a1 + a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 12
4 6
5 6
6 8
7 8
8 8
9 8
10 14
11 14
12 14
13 14
14 14
15 14
16 14
17 15
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %ecx,%ecx
sub %ecx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a1 + a5 - a1;
    }
    v8 = a2 - (a4 + a4);
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        v9 += a5 * (a4 - a4);
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 15
2 15
3 15
4 15
5 9
6 9
7 15
8 16
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
imul %edx,%edi
imul %r8d,%edi
add %edi,%eax
mov %ecx,%r9d
imul %r8d,%r9d
imul %r8d,%r9d
add %r9d,%eax
imul %edx,%ecx
add $0x1,%ecx
imul %esi,%ecx
add %ecx,%eax
imul %r8d,%esi
add %esi,%edx
add %edx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a5 * (a3 * a1);
    if (a1 < a1)
    {
        v7 = a3 + a4;
    }
    else
    {
        v7 = a4 * a5 * a5;
    }
    v8 = a2 + a4 * a3 * a2;
    v9 = (a3 + a5 * a2) + a5;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 15
2 15
3 15
4 15
5 4
6 4
7 15
8 11
9 11
10 11
11 15
12 13
13 13
14 13
15 15
16 14
17 14
18 14
19 15
20 16
<<<sep_out_sample>>>
lea 0x2(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %eax,%ecx
sub %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = a5 - a2;
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += a2 - (a5 - a2);
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a1)
    {
        v9 += (a5 - a1) * a4;
    }
    v11 = 0;
    for (v12 = 0; v12++; v12<a2)
    {
        if (v7 < a5)
        {
            v11 += a2 * a2;
        }
        else
        {
            v11 += (a2 - a5) + a3;
        }
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 27
2 27
3 27
4 27
5 4
6 27
7 28
<<<sep_out_sample>>>
mov %edx,%eax
sub %edi,%eax
cmp %edi,%esi
jg 14 <func1+0x14>
mov %ecx,%eax
imul %edi,%eax
imul %r8d,%eax
imul %edx,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a5 * a2 - a5;
    }
    if (a1 < a2)
    {
        v8 = a3 - a1;
    }
    else
    {
        v8 = (a4 * a1 * a5) * a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 11
2 11
3 9
4 9
5 15
6 15
7 15
8 15
9 17
10 17
11 17
12 17
13 17
14 18
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %eax,%ecx
mov %esi,%eax
imul %edi,%eax
imul %edi,%eax
imul %edi,%eax
lea 0x1(%rcx,%rax,1),%eax
sub %esi,%r8d
sub %edx,%r8d
imul %r8d,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    if (a5 < a5)
    {
        v6 = a2 + a4;
    }
    else
    {
        v6 = a2 * a1 * a1 * a1;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += a3 - a1;
    }
    v9 = a1 * (a5 - a2 - a3);
    v10 = 0;
    for (v11 = 0; v11++; v11<a3)
    {
        if (a2 < a2)
        {
            v10 += (a3 * a1) * a1;
        }
        else
        {
            v10 += (a1 * a4) - a4;
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 30
2 30
3 30
4 30
5 10
6 10
7 10
8 10
9 30
10 17
11 17
12 17
13 30
14 31
<<<sep_out_sample>>>
cmp %edi,%ecx
jge 10 <func1+0x10>
mov %esi,%eax
imul %ecx,%eax
add %r8d,%eax
add %edi,%eax
jmp 20 <func1+0x20>
mov %ecx,%eax
imul %esi,%eax
add %edi,%eax
mov %edx,%r10d
sub %eax,%r10d
mov %r10d,%eax
lea (%rdi,%rdx,1),%r9d
add %r9d,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%esi
add %esi,%eax
imul %edx,%edi
add %edi,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a3 * a2;
    }
    if (a4 < a1)
    {
        v8 = (a2 * a4 + a5) + a1;
    }
    else
    {
        v8 = a3 - (a4 * a2 + a1);
    }
    v9 = a1 * a3 + a4;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 11
8 15
9 15
10 15
11 15
12 15
13 15
14 18
15 18
16 18
17 18
18 18
19 17
20 17
21 18
22 19
<<<sep_out_sample>>>
lea (%rdi,%r8,1),%r9d
lea (%rdi,%rdi,1),%eax
mov %ecx,%r10d
sub %eax,%r10d
mov %r10d,%eax
cmp %edx,%ecx
jge 1b <func1+0x1b>
mov %esi,%eax
sub %r8d,%eax
add %esi,%eax
lea 0x1(%rdi,%rdx,1),%edi
add %esi,%edi
add %r8d,%edi
add %edi,%ecx
add %r9d,%ecx
add %ecx,%eax
lea (%rsi,%r8,2),%ecx
sub %edx,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a1 + a5;
    if (a4 < a3)
    {
        v7 = a2 + (a2 - a5);
    }
    else
    {
        v7 = a4 - (a1 + a1);
    }
    v8 = a2 - ((a3 - a5) - a5);
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        v9 += a2 - a5 + a1;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 11
3 11
4 11
5 11
6 5
7 5
8 7
9 7
10 7
11 19
12 19
13 19
14 19
15 19
16 19
17 13
18 13
19 19
20 20
<<<sep_out_sample>>>
cmp %esi,%edx
jge e <func1+0xe>
lea -0x1(%rcx),%eax
imul %ecx,%eax
sub %edx,%eax
jmp 15 <func1+0x15>
lea (%rdi,%rsi,1),%eax
add %ecx,%eax
sub %edx,%eax
mov %edx,%r9d
imul %r8d,%r9d
add %r9d,%edi
add %edx,%edi
add %edi,%esi
add %r8d,%esi
add %esi,%ecx
lea 0x1(%rax,%rcx,1),%eax
add %r8d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a3 < a2)
    {
        v6 = (a4 * a4) - a4 - a3;
    }
    else
    {
        v6 = a4 + (a1 + a2) - a3;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += a1 + a1;
    }
    v9 = a3 + a5;
    v10 = a3 * a5;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 18
11 18
12 19
13 19
14 19
15 19
16 19
17 19
18 17
19 19
20 20
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
lea 0x1(%rsi),%r9d
imul %r9d,%ecx
add %ecx,%edi
lea 0x1(%rax,%rdi,1),%eax
lea (%r8,%rsi,2),%ecx
add %ecx,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = ((a2 * a4) + a4) + a1;
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += (a3 + a4) + a5;
    }
    v9 = (a2 + a5 + a2) + a3;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 11
5 4
6 4
7 4
8 11
9 10
10 10
11 11
12 12
<<<sep_out_sample>>>
lea 0x1(%rcx),%eax
imul %esi,%eax
sub %r8d,%eax
lea 0x1(%rdi,%rax,1),%eax
add %edx,%eax
add %eax,%esi
add %r8d,%esi
imul %edi,%r8d
add %r8d,%edx
lea (%rsi,%rcx,2),%eax
lea 0x1(%rdx,%rax,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = a3 + (a1 * a5) + a4;
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += a2 + (a5 * a4);
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        if (a1 < a5)
        {
            v9 += a3 * a1;
        }
        else
        {
            v9 += a5 * (a5 - a2);
        }
    }
    v11 = (a4 * a2 + a2) - a5;
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 22
4 23
5 23
6 23
7 23
8 4
9 4
10 4
11 23
12 24
<<<sep_out_sample>>>
cmp %edi,%edx
jge a <func1+0xa>
lea (%r8,%r8,1),%r9d
jmp 18 <func1+0x18>
mov %edi,%r9d
imul %ecx,%r9d
sub %edx,%r9d
imul %esi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
imul %edx,%edi
imul %edi,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a3 < a1)
    {
        v6 = a5 + a5;
    }
    else
    {
        v6 = ((a1 * a4) - a3) * a2;
    }
    v7 = (a1 * a3) * a5;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 10
6 10
7 10
8 10
9 13
10 13
11 13
12 13
13 13
14 12
15 12
16 13
17 14
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %r8d,%esi
add %ecx,%esi
lea (%r8,%rcx,2),%eax
add %r8d,%eax
add %esi,%eax
add %edx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a4 + (a5 + a4) + a5;
    v7 = a3 + a5;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 4
7 6
8 5
9 6
10 7
<<<sep_out_sample>>>
mov %edi,%eax
imul %ecx,%eax
imul %ecx,%eax
mov %edx,%r9d
sub %eax,%r9d
cmp %esi,%r9d
jge 22 <func1+0x22>
mov %edx,%r10d
sub %ecx,%r10d
imul %r8d,%r10d
sub %edi,%r10d
jmp 30 <func1+0x30>
mov %edx,%r10d
imul %r8d,%r10d
mov %edi,%eax
sub %ecx,%eax
add %eax,%r10d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
lea (%r9,%r10,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a5 < a5)
    {
        v6 = a1 + a1;
    }
    else
    {
        v6 = a3 - ((a1 * a4) * a4);
    }
    if (v6 < a2)
    {
        v7 = a5 * (a3 - a4) - a1;
    }
    else
    {
        v7 = (a3 * a5) - (a4 - a1);
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 10
6 12
7 12
8 14
9 14
10 14
11 14
12 14
13 18
14 18
15 18
16 18
17 18
18 20
19 20
20 20
21 20
22 20
23 20
24 21
<<<sep_out_sample>>>
mov %ecx,%r10d
imul %esi,%r10d
cmp %r10d,%ecx
jle 1d <func1+0x1d>
mov %edi,%eax
imul %r8d,%eax
imul %edx,%eax
mov %r8d,%r9d
sub %eax,%r9d
jmp 26 <func1+0x26>
mov %ecx,%r9d
sub %edx,%r9d
sub %edx,%r9d
mov %r8d,%eax
sub %edi,%eax
cmp %edi,%r9d
jge 3e <func1+0x3e>
mov %edi,%r11d
sub %esi,%r11d
mov %edx,%eax
sub %r8d,%eax
add %r11d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r10d
add %r10d,%r9d
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a4 * a2;
    if (v6 < a4)
    {
        v7 = a5 - a1 * a5 * a3;
    }
    else
    {
        v7 = a4 - a3 - a3;
    }
    if (v7 < a1)
    {
        v8 = a1 - a2 + (a3 - a5);
    }
    else
    {
        v8 = a5 - a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 5
4 5
5 7
6 7
7 7
8 7
9 7
10 7
11 11
12 11
13 11
14 19
15 19
16 13
17 13
18 15
19 15
20 15
21 15
22 15
23 21
24 21
25 21
26 21
27 21
28 21
29 21
30 22
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
mov %esi,%r9d
sub %edi,%r9d
add %r9d,%edx
lea 0x1(%rax,%rdx,1),%eax
sub %edi,%ecx
add %ecx,%r8d
imul %r8d,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a3 - (a1 - a2);
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        if (a4 < a2)
        {
            v7 += (a5 + a2) * a4;
        }
        else
        {
            v7 += a5 * a1 * a5;
        }
    }
    v9 = a2 * (a5 - (a1 - a4));
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 18
5 4
6 4
7 4
8 18
9 17
10 17
11 17
12 18
13 19
<<<sep_out_sample>>>
mov %r8d,%r11d
imul %r8d,%r11d
add %edx,%r11d
lea (%rdi,%rdi,1),%r9d
mov %edx,%eax
imul %ecx,%eax
test %ecx,%ecx
cmovg %eax,%r9d
lea (%rsi,%rdx,1),%r10d
cmp %edx,%r8d
jg 2d <func1+0x2d>
lea (%rdx,%rcx,1),%r10d
add %edi,%r10d
imul %edi,%r10d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r11d,%ecx
add %ecx,%r9d
lea (%r9,%r10,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a3 + a5 * a5;
    if (v7 < a4)
    {
        v7 = a3 * a4;
    }
    else
    {
        v7 = a1 + a1;
    }
    if (a3 < a5)
    {
        v8 = a2 + a3;
    }
    else
    {
        v8 = a1 * (a1 + (a3 + a4));
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 11
5 7
6 7
7 7
8 7
9 15
10 13
11 13
12 19
13 19
14 19
15 21
16 21
17 21
18 21
19 21
20 21
21 21
22 22
<<<sep_out_sample>>>
add %edx,%edi
add %esi,%edi
add %edi,%r8d
imul %ecx,%esi
add %esi,%edx
lea (%r8,%rcx,2),%eax
lea 0x1(%rdx,%rax,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a3 < a3)
    {
        v6 = a2 * a5 - a3 + a4;
    }
    else
    {
        v6 = a3 + (a4 * a2) + a4;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        if (v7 < a4)
        {
            v7 += a2 * a1 * a3;
        }
        else
        {
            v7 += a2 - a2;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 24
2 24
3 24
4 10
5 10
6 10
7 24
8 25
<<<sep_out_sample>>>
mov %esi,%r9d
sub %r8d,%r9d
cmp %ecx,%r8d
jge 1a <func1+0x1a>
mov %esi,%r9d
imul %edx,%r9d
imul %esi,%r9d
imul %edi,%r9d
mov %edi,%eax
sub %r8d,%eax
add %edi,%eax
cmp %edi,%r9d
jge 2c <func1+0x2c>
mov %edx,%eax
sub %ecx,%eax
add %esi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a5 < a4)
    {
        v6 = ((a2 * a3) * a2) * a1;
    }
    else
    {
        v6 = a2 - a5;
    }
    if (v6 < a1)
    {
        v7 = a2 - (a4 - a3);
    }
    else
    {
        v7 = a1 - a5 + a1;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 10
2 10
3 4
4 4
5 6
6 6
7 6
8 6
9 18
10 18
11 18
12 12
13 12
14 14
15 14
16 14
17 20
18 20
19 20
20 20
21 20
22 20
23 21
<<<sep_out_sample>>>
mov %edi,%r9d
imul %esi,%r9d
imul %edi,%r9d
lea (%rsi,%rcx,1),%eax
test %ecx,%ecx
cmovle %esi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea (%r9,%rcx,2),%ecx
lea 0x1(%r8,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a1 * a2 * a1 + a4;
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += (a3 - a5) + a2;
    }
    if (v9 < a4)
    {
        v9 = (a5 + a2 - a5) + a4;
    }
    else
    {
        v9 = a5 + a2 - a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 12
5 12
6 12
7 18
8 18
9 18
10 18
11 18
12 18
13 19
<<<sep_out_sample>>>
mov %esi,%eax
sub %ecx,%eax
test %ecx,%ecx
jle 13 <func1+0x13>
lea (%rdx,%r8,1),%r9d
mov %edx,%eax
sub %edi,%eax
add %r9d,%eax
add %edi,%edx
add %esi,%edx
add %r8d,%edx
lea 0x1(%rcx,%rdx,1),%edx
add %edx,%eax
sub %r8d,%edi
imul %esi,%esi
sub %esi,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += (a3 - a4) - a2;
    }
    if (v8 < a4)
    {
        v8 = a3 + a5 - (a1 - a3);
    }
    else
    {
        v8 = a2 - a4;
    }
    v9 = a1 - a5 - a2 * a2;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 15
2 15
3 9
4 9
5 11
6 11
7 11
8 11
9 18
10 18
11 18
12 18
13 18
14 17
15 17
16 17
17 18
18 19
<<<sep_out_sample>>>
mov %edx,%eax
sub %ecx,%eax
mov %esi,%r9d
imul %r8d,%r9d
cmp %esi,%edx
cmovl %r9d,%eax
mov %ecx,%r10d
imul %edi,%r10d
test %ecx,%ecx
jle 25 <func1+0x25>
mov %ecx,%r9d
imul %ecx,%r9d
jmp 30 <func1+0x30>
mov %edi,%r9d
imul %r8d,%r9d
imul %r8d,%r9d
add %edx,%edi
add %esi,%edi
add %edi,%r8d
add %ecx,%r8d
add %r8d,%eax
add %r10d,%eax
add %r9d,%eax
imul %edx,%esi
sub %esi,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a3 < a2)
    {
        v6 = a2 * a5;
    }
    else
    {
        v6 = (a3 + a5 - a4) - a5;
    }
    v7 = a4 * a1;
    if (v8 < a4)
    {
        v8 = a4 * a4;
    }
    else
    {
        v8 = a1 * a5 * a5;
    }
    v9 = a4 - (a2 * a3);
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 6
4 6
5 6
6 6
7 12
8 12
9 13
10 13
11 15
12 15
13 15
14 19
15 19
16 19
17 22
18 22
19 22
20 22
21 22
22 22
23 22
24 21
25 21
26 22
27 23
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (a3 < a5)
        {
            v6 += a4 * a1;
        }
        else
        {
            v6 += a4 * a4 * a4;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += a2 - a1 * a5;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a1)
    {
        v10 += (a2 + a2) - a3;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 26
2 26
3 26
4 26
5 27
<<<sep_out_sample>>>
cmp %edi,%edx
jge 12 <func1+0x12>
mov %r8d,%eax
imul %edi,%eax
add $0x1,%eax
imul %ecx,%eax
jmp 17 <func1+0x17>
mov %edx,%eax
imul %edx,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (v6 < a5)
        {
            v6 += a5 + a3 * a1;
        }
        else
        {
            v6 += a2 - (a1 * a1);
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += (a3 * a2) + a4;
    }
    if (a3 < a1)
    {
        v10 = (a5 * a1 * a4) + a4;
    }
    else
    {
        v10 = a3 * a3;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 23
4 23
5 23
6 23
7 23
8 27
9 27
10 29
11 29
12 29
13 29
14 29
15 30
<<<sep_out_sample>>>
lea (%rdx,%rdi,1),%eax
mov %r8d,%r9d
imul %ecx,%r9d
cmp %r8d,%ecx
cmovl %r9d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a2 * a4;
    }
    if (a4 < a5)
    {
        v8 = a5 * a4;
    }
    else
    {
        v8 = a3 + a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 15
2 11
3 11
4 11
5 11
6 17
7 17
8 17
9 17
10 17
11 18
<<<sep_out_sample>>>
cmp %edx,%edi
jge b <func1+0xb>
mov %edx,%eax
imul %ecx,%eax
jmp 13 <func1+0x13>
mov %ecx,%eax
imul %r8d,%eax
add %esi,%eax
test %edx,%edx
jle 24 <func1+0x24>
mov %edi,%r9d
imul %ecx,%r9d
imul %edi,%r9d
jmp 2e <func1+0x2e>
mov %esi,%r9d
imul %edx,%r9d
add %r8d,%r9d
lea 0x1(%r9,%rdi,1),%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    if (a1 < a3)
    {
        v6 = a3 * a4 - (a3 - a3);
    }
    else
    {
        v6 = a4 * a5 + a2;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += a5 * (a3 + a3);
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a1)
    {
        if (a5 < a5)
        {
            v9 += (a1 + a4) + a2;
        }
        else
        {
            v9 += a4 - a1;
        }
    }
    if (v7 < a3)
    {
        v11 = a1 * a4 * a1;
    }
    else
    {
        v11 = a5 + a2 * a3;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 29
10 29
11 31
12 31
13 31
14 31
15 35
16 35
17 35
18 37
19 37
20 37
21 37
22 37
23 37
24 38
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
lea -0x1(%rsi,%rcx,1),%edx
imul %edx,%r8d
lea 0x1(%rax,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a5 * (a4 + a2) - a5;
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a5 * a5 * a2;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        v9 += a4 * a4;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 15
2 15
3 15
4 15
5 4
6 4
7 15
8 16
<<<sep_out_sample>>>
test %edi,%edi
jle d <func1+0xd>
mov %edi,%r9d
imul %ecx,%r9d
jmp 18 <func1+0x18>
lea (%rcx,%rdi,1),%r9d
imul %r8d,%r9d
add %ecx,%r9d
test %r8d,%r8d
jle 27 <func1+0x27>
lea (%rdi,%rcx,2),%r10d
imul %ecx,%r10d
jmp 2e <func1+0x2e>
mov %edx,%r10d
imul %edi,%r10d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %r9d,%eax
add %r10d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += (a1 + a4) + a5;
    }
    if (v8 < a1)
    {
        v8 = a1 * a4;
    }
    else
    {
        v8 = a5 * (a4 + a1) + a4;
    }
    if (v6 < a5)
    {
        v9 = (a4 + (a4 + a1)) * a4;
    }
    else
    {
        v9 = a3 * a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 15
7 15
8 15
9 17
10 17
11 19
12 19
13 19
14 23
15 23
16 25
17 25
18 25
19 25
20 25
21 25
22 26
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a5 + a1 + a2;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += a2 + (a5 - a3);
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a3)
    {
        if (v7 < a1)
        {
            v10 += a2 - a5;
        }
        else
        {
            v10 += a3 - a4 * a4;
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 26
2 26
3 26
4 26
5 27
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%r9d
lea (%rsi,%r9,1),%eax
add %eax,%r8d
add %r8d,%ecx
imul %esi,%edx
imul %edx,%edi
sub %esi,%edi
lea (%rcx,%rdi,1),%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a2 * a3 * a1 - a2;
    v7 = a1 + a3;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 5
2 6
3 6
4 6
5 4
6 4
7 4
8 6
9 6
10 7
<<<sep_out_sample>>>
mov %esi,%eax
sub %edx,%eax
cmp %esi,%edi
jl 1a <func1+0x1a>
mov %ecx,%eax
imul %r8d,%eax
mov %edx,%r9d
sub %eax,%r9d
mov %r9d,%eax
add %r8d,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (a4 < a5)
        {
            v6 += (a1 - a2) - a1;
        }
        else
        {
            v6 += a3 * (a1 - a5);
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += a4 * (a2 + a5);
    }
    if (a1 < a2)
    {
        v10 = a2 - a3;
    }
    else
    {
        v10 = a5 + (a3 - a4 * a5);
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 23
2 23
3 21
4 21
5 27
6 27
7 27
8 27
9 27
10 27
11 29
12 29
13 29
14 29
15 29
16 30
<<<sep_out_sample>>>
add %edx,%edi
add %esi,%edi
add %r8d,%edi
add %ecx,%edi
sub %esi,%edx
lea 0x1(%rdi,%rdx,1),%eax
add %r8d,%esi
imul %esi,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a5 - a2 - a5 + a3;
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        if (a4 < a1)
        {
            v7 += a4 + a4;
        }
        else
        {
            v7 += a4 - a5 * a2;
        }
    }
    v9 = a4 * (a2 + a5);
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 18
5 4
6 18
7 17
8 17
9 18
10 19
<<<sep_out_sample>>>
add %edx,%edi
add %esi,%edi
add %edi,%r8d
lea 0x1(%rcx,%r8,1),%edi
mov %ecx,%eax
imul %esi,%eax
imul %esi,%eax
imul %edx,%eax
add %edi,%eax
imul %edx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a3 - a4 * a5;
    }
    v8 = ((a4 * a2) * a2) * a3;
    v9 = a3 * a2;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 11
5 9
6 9
7 9
8 9
9 11
10 10
11 11
12 12
<<<sep_out_sample>>>
mov %edi,%r9d
sub %ecx,%r9d
add $0x1,%r9d
imul %ecx,%r9d
cmp %r8d,%esi
jge 1e <func1+0x1e>
lea (%rsi,%rdx,1),%eax
imul %r8d,%eax
sub %edx,%eax
jmp 29 <func1+0x29>
mov %esi,%eax
imul %edi,%eax
add $0x1,%eax
imul %edx,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = (a1 - a4) * a4 + a4;
    if (a2 < a5)
    {
        v7 = ((a2 + a3) * a5) - a3;
    }
    else
    {
        v7 = (a2 * a1 * a3) + a3;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += a3 - a5 * a1;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a4)
    {
        v10 += a5 - a4 - a2;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 5
6 5
7 7
8 7
9 7
10 7
11 11
12 11
13 11
14 11
15 23
16 23
17 23
18 23
19 23
20 23
21 24
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
add %r8d,%ecx
imul %edx,%edi
lea 0x1(%rcx,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a3 * a1;
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += a2 * a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 4
6 10
7 11
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %edx,%esi
sub %edi,%edx
add %esi,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (a2 < a3)
        {
            v6 += (a3 + a1) - a1;
        }
        else
        {
            v6 += a1 * a5 + a1;
        }
    }
    v8 = a3 + a2 + (a3 - a1);
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 16
6 16
7 16
8 17
9 18
<<<sep_out_sample>>>
lea 0x1(%rdi,%rcx,2),%eax
add %eax,%edx
add %edx,%esi
add %r8d,%esi
mov $0x1,%eax
sub %ecx,%eax
imul %eax,%r8d
lea 0x1(%rsi,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    if (a5 < a5)
    {
        v6 = (a1 * a5 + a1) * a3;
    }
    else
    {
        v6 = a5 - (a4 * a5) - a4;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        if (v8 < a3)
        {
            v7 += a3 * a4;
        }
        else
        {
            v7 += a4 - a5 - a5;
        }
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        if (v7 < a2)
        {
            v9 += (a3 - a1) + a3;
        }
        else
        {
            v9 += a5 * a3 + a3;
        }
    }
    v11 = (a4 + a4 + a1) - a1;
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 37
2 37
3 37
4 37
5 10
6 10
7 10
8 37
9 38
<<<sep_out_sample>>>
lea (%r8,%rcx,1),%r9d
test %esi,%esi
mov $0x0,%eax
cmovg %r9d,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (v6 < a2)
    {
        v6 = a5 + a4;
    }
    else
    {
        v6 = a3 + a4 - (a3 + a4);
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += (a4 * a1) + a3;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a1)
    {
        if (a1 < a1)
        {
            v9 += a3 * (a1 - a5);
        }
        else
        {
            v9 += a2 * a4 - a1;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 29
6 29
7 29
8 29
9 29
10 30
<<<sep_out_sample>>>
mov %esi,%eax
sub %edx,%eax
cmp %r8d,%ecx
jge 11 <func1+0x11>
mov %r8d,%eax
imul %edx,%eax
sub %ecx,%eax
lea (%rdx,%r8,1),%r9d
cmp %edi,%eax
jge 21 <func1+0x21>
lea (%r8,%rdi,1),%r9d
imul %r8d,%r9d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%eax
lea 0x1(%r9,%rax,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a4 < a5)
    {
        v6 = a5 * a3 - a4;
    }
    else
    {
        v6 = a2 - a3;
    }
    if (v6 < a1)
    {
        v7 = (a5 + a1) * a5;
    }
    else
    {
        v7 = a3 + a5;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        if (v8 < a4)
        {
            v8 += a1 + a3;
        }
        else
        {
            v8 += (a5 * a5) - a5;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 4
4 4
5 6
6 6
7 6
8 18
9 12
10 12
11 14
12 14
13 32
14 32
15 32
16 32
17 32
18 32
19 33
<<<sep_out_sample>>>
mov %r8d,%r9d
sub %edx,%r9d
sub %ecx,%r9d
mov %ecx,%eax
imul %ecx,%eax
lea (%rsi,%rdi,1),%r10d
sub %r10d,%eax
add %r9d,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += (a5 * a5) + a2;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += a1 + a4 + a4;
    }
    if (a2 < a2)
    {
        v10 = (a1 * a5) + a1 * a1;
    }
    else
    {
        v10 = a5 - a3 - a4;
    }
    v11 = a4 * a4 - (a2 + a1);
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 20
2 20
3 20
4 22
5 22
6 22
7 22
8 23
9 23
10 23
11 23
12 23
13 23
14 24
<<<sep_out_sample>>>
cmp %esi,%edx
jle 10 <func1+0x10>
mov %ecx,%eax
imul %edx,%eax
imul %esi,%eax
add %ecx,%eax
jmp 16 <func1+0x16>
lea 0x1(%rdi),%eax
imul %esi,%eax
add %edi,%edx
add %edx,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += (a1 * a4) * a3;
    }
    if (a2 < a3)
    {
        v8 = a4 + ((a4 * a3) * a2);
    }
    else
    {
        v8 = a2 * a1 + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 11
8 15
9 15
10 17
11 17
12 17
13 17
14 17
15 18
<<<sep_out_sample>>>
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
imul %edx,%edi
lea 0x1(%rcx,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = (a1 + a3) * a1;
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += (a3 - a3) + a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 10
3 10
4 10
5 4
6 10
7 11
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
lea 0x1(%rcx,%rax,1),%eax
add %r8d,%edx
add %edx,%esi
add %esi,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (a4 < a4)
        {
            v6 += a3 * a2 + a5;
        }
        else
        {
            v6 += a5 + (a4 - a2);
        }
    }
    if (a2 < a2)
    {
        v8 = (a5 + a5) * a2 - a4;
    }
    else
    {
        v8 = (a2 + (a3 + a5)) + a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 24
2 24
3 24
4 24
5 22
6 22
7 22
8 24
9 25
<<<sep_out_sample>>>
cmp $0x1,%esi
jle d <func1+0xd>
mov %ecx,%eax
imul %r8d,%eax
jmp 15 <func1+0x15>
mov %ecx,%eax
sub %edi,%eax
sub %esi,%eax
add %edx,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (v6 < a2)
        {
            v6 += a2 + a3 + a3;
        }
        else
        {
            v6 += a4 - a2 - a4;
        }
    }
    if (v7 < a2)
    {
        v8 = a4 * a5;
    }
    else
    {
        v8 = a3 + (a4 - a1 - a2);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 22
7 22
8 22
9 22
10 24
11 24
12 24
13 24
14 24
15 25
<<<sep_out_sample>>>
lea (%r8,%rdi,1),%r9d
cmp %edi,%edx
jg 18 <func1+0x18>
mov $0x1,%r9d
sub %r8d,%r9d
imul %esi,%r9d
sub %ecx,%r9d
cmp $0x1,%esi
jle 27 <func1+0x27>
lea (%rsi,%r8,1),%eax
lea (%rax,%rcx,2),%r10d
jmp 34 <func1+0x34>
mov %esi,%r10d
sub %r8d,%r10d
add %esi,%r10d
imul %ecx,%r10d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %r9d,%eax
add %r10d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (a3 < a1)
        {
            v6 += (a5 + a5) - a5;
        }
        else
        {
            v6 += a4 - (a1 * a3);
        }
    }
    if (a1 < a3)
    {
        v8 = a5 + a1;
    }
    else
    {
        v8 = (a2 - a5 * a2) - a4;
    }
    if (v7 < a2)
    {
        v9 = a4 + ((a2 + a5) + a4);
    }
    else
    {
        v9 = ((a2 - a5) + a2) * a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 16
3 16
4 22
5 22
6 22
7 22
8 24
9 24
10 26
11 26
12 26
13 30
14 30
15 30
16 30
17 32
18 32
19 32
20 32
21 32
22 32
23 33
<<<sep_out_sample>>>
mov %esi,%r10d
sub %edx,%r10d
cmp %r8d,%edx
jle 1a <func1+0x1a>
mov %ecx,%r9d
sub %edx,%r9d
add %r8d,%r9d
imul %edx,%r9d
jmp 27 <func1+0x27>
mov %r8d,%r9d
sub %esi,%r9d
add %edx,%r9d
imul %edi,%r9d
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
imul %ecx,%edi
sub %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a1 + a2 - a3 - a1;
    if (a5 < a3)
    {
        v7 = (a4 - a3 + a5) * a3;
    }
    else
    {
        v7 = (a3 + (a5 - a2)) * a1;
    }
    v8 = (a2 - (a4 * a1)) - a2;
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        v9 += (a3 - a1) - a4;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 5
4 5
5 7
6 7
7 7
8 7
9 7
10 11
11 11
12 11
13 11
14 19
15 19
16 19
17 19
18 19
19 19
20 13
21 19
22 20
<<<sep_out_sample>>>
lea (%rcx,%r8,1),%eax
mov %edi,%r9d
imul %r8d,%r9d
cmp %edx,%edi
cmovg %r9d,%eax
add %edi,%edx
add %edx,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%edx
add %edx,%eax
sub %r8d,%eax
sub %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += (a1 + a3) - a5;
    }
    if (a3 < a1)
    {
        v8 = a1 * a5;
    }
    else
    {
        v8 = a4 + a5;
    }
    v9 = (a3 - a5 - a3) - a1;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 15
2 11
3 11
4 11
5 11
6 18
7 18
8 18
9 18
10 18
11 17
12 18
13 19
<<<sep_out_sample>>>
lea (%r8,%r8,1),%eax
test %edx,%edx
jle e <func1+0xe>
lea (%rsi,%rcx,2),%eax
imul %esi,%eax
add %edx,%edi
add %esi,%edi
add %r8d,%edi
add %edi,%ecx
lea 0x1(%rax,%rcx,1),%ecx
imul %r8d,%edx
add %edx,%esi
sub %r8d,%esi
lea (%rcx,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (v6 < a3)
    {
        v6 = a2 * (a4 + (a2 + a4));
    }
    else
    {
        v6 = a5 + a5;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a1 - a1 - a3;
    }
    v9 = ((a5 * a3) + a2) - a5;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 18
7 18
8 18
9 18
10 18
11 17
12 17
13 17
14 18
15 19
<<<sep_out_sample>>>
mov %r8d,%eax
imul %esi,%eax
cmp %ecx,%eax
jge 16 <func1+0x16>
lea (%rcx,%r8,1),%r9d
sub %edi,%r9d
sub %edi,%r9d
jmp 23 <func1+0x23>
mov $0x1,%r9d
sub %esi,%r9d
imul %edi,%r9d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%eax
lea 0x1(%r9,%rax,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a5 * a2;
    if (v6 < a4)
    {
        v7 = (a4 + a5) - a1 - a1;
    }
    else
    {
        v7 = a1 - (a1 * a2);
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += a1 + a2 + a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 5
4 5
5 7
6 7
7 7
8 7
9 11
10 11
11 11
12 18
13 18
14 18
15 18
16 18
17 18
18 19
<<<sep_out_sample>>>
mov %edx,%r9d
sub %ecx,%r9d
sub %edi,%r9d
add %edx,%r9d
lea (%rdi,%rdx,1),%eax
cmp $0x1,%edi
jg 25 <func1+0x25>
mov %esi,%eax
sub %r8d,%eax
mov %eax,%r8d
mov %ecx,%eax
imul %edx,%eax
imul %r8d,%eax
lea (%rdi,%rdx,2),%edx
add %edx,%esi
add %esi,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a3 - (a4 - a3 + a1);
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += (a1 * a3) * a3;
    }
    if (v8 < a1)
    {
        v9 = a5 - (a5 - a1 - a3);
    }
    else
    {
        v9 = (a2 - a5) * (a4 * a3);
    }
    v10 = a3 - a5;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 12
6 10
7 10
8 16
9 16
10 16
11 16
12 16
13 16
14 19
15 19
16 19
17 19
18 19
19 20
<<<sep_out_sample>>>
mov %edi,%eax
imul %edi,%eax
imul %edx,%eax
add %r8d,%eax
add %eax,%edi
add %edx,%edi
add %esi,%edi
add %r8d,%edi
add %edi,%ecx
mov %r8d,%edi
imul %esi,%edi
mov %r8d,%eax
sub %edx,%eax
add %edi,%eax
lea 0x1(%rcx,%rax,1),%eax
lea -0x1(%rsi,%r8,1),%edx
imul %edx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a5 * a2 + (a5 - a3);
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        if (a2 < a2)
        {
            v7 += a5 - a4;
        }
        else
        {
            v7 += (a3 + a5) * a1;
        }
    }
    v9 = ((a5 + a2) * a5) - a5;
    v10 = a5 + a3 * (a1 * a1);
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 18
5 19
6 19
7 19
8 19
9 19
10 4
11 4
12 4
13 4
14 4
15 19
16 17
17 17
18 19
19 20
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
add %ecx,%r8d
mov %esi,%r9d
imul %edx,%r9d
add %r9d,%r8d
add %ecx,%edx
sub %edx,%edi
sub %esi,%edi
lea (%r8,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a2 * a3 - (a4 - a4);
    v7 = (a1 - (a4 + a3)) - a2;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 4
7 6
8 5
9 5
10 5
11 6
12 7
<<<sep_out_sample>>>
lea (%r8,%rcx,1),%r9d
mov %r8d,%eax
imul %edi,%eax
add %eax,%r9d
cmp %edi,%r8d
jge 21 <func1+0x21>
mov %esi,%eax
imul %r8d,%eax
imul %r8d,%eax
imul %edx,%eax
jmp 2b <func1+0x2b>
mov %r8d,%eax
sub %ecx,%eax
add %esi,%eax
imul %edi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a5 + a4 + a5 * a1;
    v7 = a2 - a2;
    if (a5 < a1)
    {
        v8 = (a2 * a5 * a5) * a3;
    }
    else
    {
        v8 = (a2 + (a5 - a4)) * a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 6
6 6
7 8
8 8
9 8
10 8
11 8
12 12
13 12
14 12
15 12
16 14
17 14
18 14
19 14
20 14
21 14
22 15
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %eax,%ecx
mov %r8d,%eax
imul %edx,%eax
add %edi,%eax
add %eax,%edx
add %ecx,%edx
imul %edi,%esi
sub %r8d,%esi
imul %esi,%edi
lea (%rdx,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a3 + (a5 * a3 + a1);
    v7 = a1 * (a2 * a1 - a5);
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 4
7 4
8 4
9 6
10 5
11 5
12 5
13 6
14 7
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %ecx,%edx
mov %r8d,%esi
sub %edx,%esi
add %esi,%eax
sub %r8d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a5 - (a3 + a4);
    v7 = (a1 - a5 - a1) + a4;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 4
7 4
8 6
9 5
10 6
11 7
<<<sep_out_sample>>>
mov %edx,%eax
sub %edi,%eax
cmp %esi,%ecx
jge 12 <func1+0x12>
mov %edi,%eax
imul %ecx,%eax
add %r8d,%eax
sub %edi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a4 < a2)
    {
        v6 = a5 + a1 * a4 - a1;
    }
    else
    {
        v6 = a3 - a2 - a1 + a2;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        if (a1 < a5)
        {
            v7 += (a1 - a1) + a5;
        }
        else
        {
            v7 += (a2 * a4) - a2;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 4
4 4
5 6
6 6
7 6
8 6
9 24
10 24
11 24
12 24
13 24
14 25
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
lea 0x1(%rcx,%rax,1),%eax
add %esi,%edi
add %ecx,%edx
add %edi,%edx
add %edx,%eax
sub %esi,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (a2 < a5)
        {
            v6 += a1 * a4 * a2;
        }
        else
        {
            v6 += (a1 * a5) * a2;
        }
    }
    v8 = a1 + a2 + (a3 + a4);
    v9 = (a3 + a5 - a3) - a2;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 18
5 16
6 16
7 16
8 18
9 17
10 18
11 19
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
lea 0x1(%rcx,%rax,1),%eax
sub %edi,%esi
imul %esi,%ecx
add %ecx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (a1 < a1)
        {
            v6 += (a1 + a2) + a1;
        }
        else
        {
            v6 += a3 * a2;
        }
    }
    v8 = a4 * (a2 - a1) + a5;
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        if (a3 < a5)
        {
            v9 += a4 + a4 + a2;
        }
        else
        {
            v9 += a1 - a5;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 29
2 29
3 29
4 29
5 16
6 16
7 16
8 29
9 30
<<<sep_out_sample>>>
cmp %r8d,%ecx
jge d <func1+0xd>
mov %ecx,%r9d
neg %r9d
jmp 19 <func1+0x19>
mov %ecx,%r9d
sub %edx,%r9d
add %ecx,%r9d
add %r8d,%r9d
cmp %edx,%ecx
jle 29 <func1+0x29>
mov %edx,%eax
imul %edi,%eax
imul %edi,%eax
add %esi,%eax
jmp 2f <func1+0x2f>
mov %r8d,%eax
imul %ecx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a4 < a5)
    {
        v6 = a3 - (a4 + a3);
    }
    else
    {
        v6 = (a4 - a3 + a4) + a5;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        if (a2 < a2)
        {
            v7 += a5 * a1 + a3;
        }
        else
        {
            v7 += (a5 + a4) - a5;
        }
    }
    if (a3 < a4)
    {
        v9 = a2 + a3 * a1 * a1;
    }
    else
    {
        v9 = a5 * (a5 - a5 + a4);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 10
10 24
11 24
12 26
13 26
14 26
15 26
16 26
17 30
18 30
19 32
20 32
21 32
22 32
23 32
24 32
25 33
<<<sep_out_sample>>>
cmp %r8d,%ecx
jge 11 <func1+0x11>
mov %edx,%r9d
imul %ecx,%r9d
neg %r9d
jmp 1d <func1+0x1d>
mov %esi,%r9d
sub %ecx,%r9d
sub %ecx,%r9d
add %edi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
imul %esi,%ecx
imul %esi,%ecx
add %r8d,%ecx
add %ecx,%eax
add %esi,%r8d
add %eax,%r8d
lea (%rsi,%rdi,2),%eax
sub %edx,%eax
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a4 < a5)
    {
        v6 = (a5 - a3 * a4) - a5;
    }
    else
    {
        v6 = a1 - (a4 + (a4 - a2));
    }
    if (a4 < a4)
    {
        v7 = a1 * a1 - (a4 + a4);
    }
    else
    {
        v7 = a2 * a4 * a2 + a5;
    }
    v8 = a5 + a4 - a4 + a2;
    v9 = a2 + a1 - a3 + a1;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 10
11 22
12 22
13 22
14 22
15 22
16 18
17 18
18 18
19 22
20 20
21 22
22 21
23 21
24 22
25 23
<<<sep_out_sample>>>
cmp %ecx,%edi
jge f <func1+0xf>
mov %esi,%eax
sub %edx,%eax
add %r8d,%eax
add %esi,%eax
jmp 17 <func1+0x17>
mov %ecx,%eax
sub %esi,%eax
add %ecx,%eax
sub %edi,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a1 < a4)
    {
        v6 = a2 + (a2 - a3 + a5);
    }
    else
    {
        v6 = a4 - (a2 - a4) - a1;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        if (a4 < a5)
        {
            v7 += (a5 * a2) - a3;
        }
        else
        {
            v7 += a3 - a2;
        }
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        v9 += a1 - a4;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 29
13 29
14 29
15 29
16 29
17 30
<<<sep_out_sample>>>
cmp %esi,%edx
jge c <func1+0xc>
mov %edx,%r9d
sub %r8d,%r9d
jmp 1c <func1+0x1c>
mov %edx,%eax
imul %r8d,%eax
mov %edi,%r9d
sub %eax,%r9d
imul %esi,%r9d
cmp %r8d,%esi
jle 28 <func1+0x28>
mov %edx,%eax
imul %edi,%eax
jmp 38 <func1+0x38>
lea (%rdi,%rdx,1),%eax
imul %r8d,%eax
mov %esi,%r10d
sub %eax,%r10d
mov %r10d,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    if (a3 < a2)
    {
        v6 = a3 - a5;
    }
    else
    {
        v6 = (a1 - a3 * a5) * a2;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += a3 - a5;
    }
    if (a5 < a2)
    {
        v9 = a3 * a1;
    }
    else
    {
        v9 = a2 - a5 * (a1 + a3);
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a1)
    {
        v10 += a3 + a1;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 10
10 10
11 17
12 17
13 19
14 19
15 19
16 23
17 23
18 23
19 23
20 23
21 30
22 30
23 30
24 30
25 30
26 30
27 31
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %edx,%edx
imul %edi,%edx
add %edx,%eax
mov %ecx,%edx
imul %ecx,%edx
imul %edx,%edi
add %edi,%esi
add %esi,%eax
imul %r8d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = (a3 + a3) * a1;
    v7 = (a4 * a4 * a1) + a2;
    v8 = a5 * a4;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 7
2 7
3 7
4 7
5 4
6 4
7 7
8 5
9 5
10 5
11 5
12 7
13 6
14 7
15 8
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %r8d,%edx
add %ecx,%edx
lea (%rdx,%rsi,2),%eax
add %r8d,%esi
imul %ecx,%esi
imul %esi,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a2 + a2;
    v7 = ((a2 + a5) * a4) * a4;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 6
6 5
7 5
8 5
9 6
10 7
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a5 - (a2 * a4);
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        if (v8 < a3)
        {
            v8 += (a2 - a5) * a1;
        }
        else
        {
            v8 += a3 * a2 - a2;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 21
5 22
<<<sep_out_sample>>>
lea (%rsi,%rcx,1),%eax
add %edi,%eax
test %edi,%edi
jle 19 <func1+0x19>
lea (%rdx,%rdx,1),%r9d
mov %edi,%r10d
imul %esi,%r10d
sub %r10d,%r9d
jmp 23 <func1+0x23>
mov %ecx,%r9d
sub %edx,%r9d
lea (%r9,%rcx,2),%r9d
add %r9d,%edi
add %edi,%edx
add %edx,%esi
lea (%rcx,%r8,2),%ecx
lea 0x1(%rsi,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a3 - a3 + a5;
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += a1 + a1 * a2;
    }
    v9 = a2 + a4 + a1;
    if (v10 < a1)
    {
        v10 = a3 + a3 - (a1 * a2);
    }
    else
    {
        v10 = a4 + a4 + (a4 - a3);
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 11
4 11
5 13
6 13
7 13
8 13
9 13
10 17
11 17
12 17
13 19
14 19
15 19
16 19
17 19
18 19
19 20
<<<sep_out_sample>>>
add %edi,%edx
add %edx,%esi
add %r8d,%esi
add %ecx,%esi
mov %edi,%eax
sub %r8d,%eax
lea 0x1(%rsi,%rax,2),%eax
sub %edi,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a1 - a5 - a5 + a1;
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        if (a2 < a5)
        {
            v7 += a2 - a1 + a5;
        }
        else
        {
            v7 += (a1 - a1) * a1;
        }
    }
    v9 = (a4 - (a5 - a5)) - a1;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 18
5 4
6 4
7 18
8 17
9 18
10 19
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%r9d
add %esi,%r9d
add %r8d,%r9d
add %ecx,%r9d
imul %edx,%ecx
imul %ecx,%edi
sub %esi,%edi
add %r9d,%edi
lea (%rdx,%rsi,2),%eax
sub %r8d,%eax
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = (a1 * (a3 * a4)) - a2;
    v7 = a3 + a2 - a5 + a2;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 4
7 4
8 6
9 5
10 5
11 6
12 7
<<<sep_out_sample>>>
test %ecx,%ecx
jle 10 <func1+0x10>
mov %ecx,%eax
imul %edx,%eax
imul %esi,%eax
sub %ecx,%eax
jmp 19 <func1+0x19>
lea -0x1(%r8),%eax
imul %ecx,%eax
add %esi,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (v6 < a4)
    {
        v6 = a2 * (a4 * a3) - a4;
    }
    else
    {
        v6 = ((a4 * a5) - a4) + a2;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += a4 + a2;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        v9 += a5 + a3;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 22
12 22
13 22
14 22
15 22
16 23
<<<sep_out_sample>>>
cmp %esi,%ecx
jle 9 <func1+0x9>
lea (%rdx,%rdx,1),%eax
jmp 12 <func1+0x12>
mov %r8d,%eax
imul %edx,%eax
lea (%rax,%rdi,2),%eax
add %edi,%edx
add %esi,%edx
add %r8d,%edx
lea 0x1(%rcx,%rdx,1),%edx
add %edx,%eax
mov %esi,%edx
sub %r8d,%edx
imul %edx,%edi
imul %edi,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (v7 < a5)
        {
            v6 += a4 - a3 + a1;
        }
        else
        {
            v6 += (a2 - a5) * a1;
        }
    }
    if (a2 < a4)
    {
        v8 = a3 + a3 - a3 + a3;
    }
    else
    {
        v8 = a1 + a1 + a5 * a3;
    }
    v9 = ((a2 - a5) * a1) * a2;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 22
6 22
7 22
8 25
9 25
10 25
11 25
12 25
13 24
14 24
15 24
16 24
17 25
18 26
<<<sep_out_sample>>>
test %edi,%edi
jle b <func1+0xb>
mov %edi,%eax
imul %ecx,%eax
jmp 18 <func1+0x18>
lea (%rdi,%rdx,1),%r9d
mov %r8d,%eax
imul %edx,%eax
add %r9d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (v6 < a1)
    {
        v6 = ((a1 * a4) + a4) - a4;
    }
    else
    {
        v6 = a1 + a3 + a5 * a3;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        if (a2 < a4)
        {
            v7 += (a2 + a5) - a4;
        }
        else
        {
            v7 += a4 * a4 + a3;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 10
10 24
11 24
12 24
13 24
14 24
15 25
<<<sep_out_sample>>>
mov %edi,%eax
sub %ecx,%eax
lea (%rdi,%rsi,1),%r11d
test %esi,%esi
cmovg %eax,%r11d
lea (%rdi,%rdx,1),%r9d
cmp %r8d,%edi
jl 20 <func1+0x20>
mov %edi,%r9d
sub %r8d,%r9d
sub %ecx,%r9d
mov $0x0,%r10d
cmp %r8d,%r9d
jge 37 <func1+0x37>
mov %ecx,%r10d
sub %edi,%r10d
add %ecx,%r10d
add %r8d,%r10d
mov %esi,%eax
sub %ecx,%eax
cmp %edx,%esi
jge 4a <func1+0x4a>
mov %ecx,%eax
imul %r8d,%eax
sub %esi,%eax
sub %r8d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r11d,%ecx
add %ecx,%r9d
add %r9d,%r10d
add %r10d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (v6 < a2)
    {
        v6 = a2 - (a2 - (a1 - a4));
    }
    else
    {
        v6 = a1 + a2;
    }
    if (a1 < a5)
    {
        v7 = a1 + a3;
    }
    else
    {
        v7 = a1 - a5 - a4;
    }
    if (v7 < a5)
    {
        v8 = a5 + ((a4 - a1) + a4);
    }
    else
    {
        v8 = ((a4 - a4) * a2) * a1;
    }
    if (a2 < a3)
    {
        v9 = a4 * a5 - a2 - a5;
    }
    else
    {
        v9 = a2 - a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 6
6 14
7 12
8 12
9 18
10 18
11 18
12 26
13 20
14 20
15 22
16 22
17 22
18 22
19 34
20 34
21 28
22 28
23 30
24 30
25 30
26 30
27 36
28 36
29 36
30 36
31 36
32 36
33 36
34 36
35 37
<<<sep_out_sample>>>
mov %edx,%r10d
imul %edx,%r10d
add %ecx,%r10d
add %edi,%r10d
mov %edi,%r9d
sub %esi,%r9d
cmp %r8d,%edx
jl 23 <func1+0x23>
mov %edi,%r9d
imul %esi,%r9d
imul %r9d,%r9d
add %edx,%edi
add %edi,%esi
add %r8d,%esi
add %ecx,%esi
add %r10d,%esi
add %r9d,%esi
imul %r8d,%ecx
imul %ecx,%r8d
sub %edx,%r8d
lea (%rsi,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = (a4 + a3 * a3) + a1;
    if (a3 < a5)
    {
        v7 = a1 - a2;
    }
    else
    {
        v7 = (a1 * a1 * a2) * a2;
    }
    if (a4 < a4)
    {
        v8 = a3 * a3;
    }
    else
    {
        v8 = (a5 * a4 * a5) - a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 7
6 7
7 5
8 5
9 11
10 11
11 11
12 21
13 21
14 21
15 21
16 21
17 21
18 19
19 19
20 19
21 21
22 22
<<<sep_out_sample>>>
cmp %edi,%r8d
jge 11 <func1+0x11>
lea (%rdi,%rsi,1),%r10d
sub %r8d,%r10d
sub %r8d,%r10d
jmp 1e <func1+0x1e>
mov %r8d,%r10d
imul %edx,%r10d
sub %edi,%r10d
add %ecx,%r10d
lea 0x2(%r8),%eax
imul %edi,%eax
lea (%rdi,%rdi,1),%r9d
neg %r9d
cmp %edi,%r8d
jle 3a <func1+0x3a>
mov %edi,%r9d
sub %esi,%r9d
add %ecx,%r9d
add %r9d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r10,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a5 < a1)
    {
        v6 = a1 + a2 - a5 - a5;
    }
    else
    {
        v6 = (a5 * a3 - a1) + a4;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        if (a3 < a1)
        {
            v7 += a1 + a1;
        }
        else
        {
            v7 += a1 * a3 + a4;
        }
    }
    v9 = a1 + (a1 * a5 + a1);
    if (a1 < a5)
    {
        v10 = a1 - a2 + a4;
    }
    else
    {
        v10 = a1 - (a1 + a1 + a1);
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 10
11 24
12 24
13 31
14 31
15 25
16 25
17 27
18 27
19 27
20 33
21 33
22 33
23 33
24 33
25 33
26 33
27 34
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
mov %ecx,%r8d
imul %esi,%r8d
add %r8d,%edx
lea (%rax,%rcx,2),%eax
sub %edx,%eax
add %esi,%ecx
add %edi,%ecx
imul %ecx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a4 - ((a4 * a2) + a3);
    v7 = ((a4 + a2) + a1) * a1;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 4
5 4
6 4
7 4
8 6
9 5
10 5
11 5
12 6
13 7
<<<sep_out_sample>>>
cmp %esi,%edi
jle 10 <func1+0x10>
mov %edi,%r10d
imul %edi,%r10d
add %esi,%r10d
jmp 1b <func1+0x1b>
lea -0x1(%rcx),%r10d
imul %edx,%r10d
sub %edi,%r10d
cmp %esi,%edi
jge 25 <func1+0x25>
lea (%rdx,%rdx,1),%r9d
jmp 33 <func1+0x33>
mov %r8d,%r9d
imul %ecx,%r9d
imul %edi,%r9d
sub %r8d,%r9d
mov %r8d,%eax
imul %edx,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += (a3 + a1) * a4;
    }
    if (a2 < a1)
    {
        v8 = a2 + a1 * a1;
    }
    else
    {
        v8 = a3 * a4 - a3 - a1;
    }
    if (a1 < a2)
    {
        v9 = a3 + a3;
    }
    else
    {
        v9 = (a5 * a4) * a1 - a5;
    }
    v10 = a5 * a3;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 15
8 15
9 15
10 17
11 17
12 19
13 19
14 23
15 23
16 23
17 23
18 25
19 25
20 26
21 26
22 26
23 26
24 26
25 26
26 26
27 27
<<<sep_out_sample>>>
mov %r8d,%eax
imul %edx,%eax
lea (%rax,%rsi,2),%r10d
cmp %esi,%edx
jle 20 <func1+0x20>
mov %r8d,%r9d
sub %esi,%r9d
mov %ecx,%r11d
imul %edx,%r11d
sub %r11d,%r9d
jmp 28 <func1+0x28>
lea -0x1(%rsi),%r9d
imul %esi,%r9d
cmp %edi,%ecx
mov $0x0,%r11d
cmovle %r11d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r10d,%ecx
add %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a2 < a2)
    {
        v6 = a2 + a1;
    }
    else
    {
        v6 = a2 + a5 * a3 + a2;
    }
    if (a2 < a3)
    {
        v7 = a5 - a2 - (a4 * a3);
    }
    else
    {
        v7 = (a2 * a2) - a2;
    }
    if (a1 < a4)
    {
        v8 = a3 * a5;
    }
    else
    {
        v8 = a2 - a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 12
5 12
6 14
7 14
8 14
9 14
10 14
11 14
12 18
13 18
14 26
15 26
16 26
17 28
18 28
19 28
20 28
21 28
22 28
23 28
24 29
<<<sep_out_sample>>>
cmp %edi,%esi
jge d <func1+0xd>
lea (%rdi,%r8,2),%r9d
sub %esi,%r9d
jmp 15 <func1+0x15>
lea (%rdi,%rcx,2),%r9d
imul %esi,%r9d
lea (%rdi,%rcx,1),%eax
cmp %edx,%esi
jg 21 <func1+0x21>
lea (%rsi,%rcx,2),%eax
add %edi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a2 < a1)
    {
        v6 = (a1 + a5 + a5) - a2;
    }
    else
    {
        v6 = a2 * ((a1 + a4) + a4);
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += (a2 * a4) - a4;
    }
    if (a3 < a2)
    {
        v9 = a1 + a4;
    }
    else
    {
        v9 = a4 + a2 + a4 + a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 19
9 17
10 17
11 23
12 23
13 25
14 25
15 25
16 25
17 25
18 25
19 26
<<<sep_out_sample>>>
lea (%rdi,%rdi,1),%r10d
mov %r8d,%eax
sub %edi,%eax
lea (%rdi,%r8,1),%r9d
cmp %r8d,%esi
jle 20 <func1+0x20>
mov %r8d,%r9d
sub %ecx,%r9d
imul %edx,%r9d
imul %edx,%r9d
add %r9d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r10,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a1 + a1;
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += a2 + a4;
    }
    if (a5 < a5)
    {
        v9 = a5 * a1;
    }
    else
    {
        v9 = a5 - a1;
    }
    if (a5 < a2)
    {
        v10 = (a3 * (a5 - a4)) * a3;
    }
    else
    {
        v10 = a1 + a5;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 16
3 16
4 24
5 18
6 18
7 20
8 20
9 20
10 20
11 26
12 26
13 26
14 26
15 26
16 26
17 26
18 27
<<<sep_out_sample>>>
push %rbx
mov %esi,%eax
imul %ecx,%eax
mov %edx,%ebx
sub %eax,%ebx
imul %ecx,%ebx
cmp %edi,%esi
jge 21 <func1+0x21>
mov %r8d,%r11d
imul %r8d,%r11d
imul %ecx,%r11d
sub %esi,%r11d
jmp 2b <func1+0x2b>
lea (%r8,%rdx,1),%r11d
add %ecx,%r11d
add %esi,%r11d
mov %esi,%r10d
imul %edx,%r10d
add %r8d,%r10d
sub %edi,%r10d
cmp %r8d,%ecx
jge 4e <func1+0x4e>
mov %esi,%eax
imul %esi,%eax
imul %r8d,%eax
mov %edi,%r9d
sub %eax,%r9d
jmp 58 <func1+0x58>
mov %r8d,%r9d
neg %r9d
imul %r8d,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %ebx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a4 * (a3 - a2 * a4);
    if (a2 < a1)
    {
        v7 = (a5 * a5) * a4 - a2;
    }
    else
    {
        v7 = (a5 + a3 + a4) + a2;
    }
    v8 = a2 * a3 + a5 - a1;
    if (a4 < a5)
    {
        v9 = a1 - (a2 * a2) * a5;
    }
    else
    {
        v9 = a5 * (a1 - a5 - a1);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 4
3 4
4 4
5 4
6 4
7 5
8 5
9 7
10 7
11 7
12 7
13 7
14 11
15 11
16 11
17 13
18 13
19 13
20 13
21 14
22 14
23 16
24 16
25 16
26 16
27 16
28 16
29 20
30 20
31 20
32 22
33 22
34 22
35 22
36 22
37 22
38 22
39 22
40 23
41 23
<<<sep_out_sample>>>
mov %edi,%eax
sub %esi,%eax
cmp %ecx,%r8d
jl 1a <func1+0x1a>
mov %esi,%eax
imul %r8d,%eax
mov %ecx,%r9d
sub %eax,%r9d
mov %r9d,%eax
add %edx,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a5 < a4)
    {
        v6 = (a1 - a1 + a1) - a2;
    }
    else
    {
        v6 = a4 - (a2 * a5) + a3;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += a3 - (a1 - a5);
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a1)
    {
        v9 += a5 - a4 * a5;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 6
3 4
4 4
5 10
6 10
7 10
8 10
9 10
10 10
11 22
12 22
13 22
14 22
15 22
16 23
<<<sep_out_sample>>>
lea (%rdx,%rdi,1),%r9d
lea (%r9,%rsi,1),%eax
add %r8d,%eax
add %ecx,%eax
mov %edx,%esi
imul %edi,%esi
add %ecx,%edi
imul %esi,%edi
add %eax,%edi
mov %r8d,%eax
imul %r8d,%eax
sub %ecx,%eax
sub %ecx,%eax
add %edi,%eax
imul %r9d,%edx
imul %edx,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a3 * a1 * (a4 + a1);
    if (a2 < a2)
    {
        v7 = a3 * a5;
    }
    else
    {
        v7 = (a5 * a5) - a4 - a4;
    }
    v8 = ((a3 + a1) * a3) * a4;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 13
2 14
3 14
4 14
5 4
6 4
7 4
8 4
9 14
10 11
11 11
12 11
13 11
14 14
15 13
16 13
17 14
18 15
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
add %esi,%ecx
sub %r8d,%edx
imul %edx,%edi
lea 0x1(%rcx,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = (a3 - a5) * a1;
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        if (v6 < a5)
        {
            v7 += (a5 - a3) - a3;
        }
        else
        {
            v7 += a5 + a1;
        }
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        if (v10 < a5)
        {
            v9 += a1 - a4;
        }
        else
        {
            v9 += a1 - a1 - a3;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 29
2 29
3 29
4 29
5 4
6 4
7 29
8 30
<<<sep_out_sample>>>
cmp $0x1,%esi
jle e <func1+0xe>
mov %edx,%r9d
imul %esi,%r9d
jmp 15 <func1+0x15>
mov %ecx,%r9d
imul %esi,%r9d
add %edi,%edx
add %edx,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (v6 < a3)
        {
            v6 += a2 * a2;
        }
        else
        {
            v6 += (a5 + a5) - a5;
        }
    }
    if (v7 < a2)
    {
        v8 = a3 * a2;
    }
    else
    {
        v8 = a4 * a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 22
7 22
8 24
9 24
10 24
11 24
12 24
13 25
<<<sep_out_sample>>>
lea (%r8,%r8,1),%r10d
cmp %esi,%ecx
jge 18 <func1+0x18>
mov %ecx,%eax
imul %edi,%eax
imul %esi,%eax
mov %edi,%r9d
sub %eax,%r9d
jmp 1f <func1+0x1f>
mov %esi,%r9d
imul %edx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
sub %edx,%ecx
imul %ecx,%esi
add %esi,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a5 + a5;
    if (a4 < a2)
    {
        v7 = a1 - a4 * a1 * a2;
    }
    else
    {
        v7 = a2 * a3;
    }
    v8 = a3 - a2 * (a3 - a4);
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 5
3 5
4 7
5 7
6 7
7 7
8 7
9 7
10 11
11 11
12 14
13 14
14 14
15 14
16 14
17 14
18 13
19 13
20 13
21 14
22 15
<<<sep_out_sample>>>
lea (%rdx,%rdi,1),%eax
add %esi,%eax
add %r8d,%eax
lea 0x1(%rcx,%rax,1),%eax
add %r8d,%edi
sub %edi,%edx
add %edx,%esi
add %eax,%esi
lea (%rsi,%rcx,2),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a3 + a3 + a4;
    }
    v8 = a2 - (a5 + a1 - a3);
    v9 = (a4 + a4) - a1 + a1;
    v10 = a2 - a2;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 12
2 12
3 12
4 12
5 9
6 9
7 9
8 12
9 12
10 13
<<<sep_out_sample>>>
mov %edx,%r11d
imul %edx,%r11d
mov %r8d,%r10d
sub %ecx,%r10d
lea (%rdx,%rsi,1),%r9d
sub %r9d,%r10d
cmp %edi,%edx
jle 25 <func1+0x25>
mov %r8d,%eax
imul %r8d,%eax
lea (%rax,%rcx,2),%r9d
jmp 33 <func1+0x33>
mov %r8d,%r9d
imul %esi,%r9d
imul %r8d,%r9d
add %edx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a3 * a3;
    v7 = a5 - a4 - (a3 + a2);
    v8 = a5 - a5;
    if (a1 < a3)
    {
        v9 = a5 * a5 + (a4 + a4);
    }
    else
    {
        v9 = a3 + a5 * a2 * a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 5
4 5
5 5
6 5
7 7
8 7
9 9
10 9
11 9
12 9
13 13
14 13
15 13
16 13
17 15
18 15
19 15
20 15
21 15
22 15
23 15
24 16
<<<sep_out_sample>>>
cmp %ecx,%edx
jge 21 <func1+0x21>
mov %ecx,%r11d
sub %r8d,%r11d
sub %r8d,%r11d
add %esi,%r11d
mov %ecx,%eax
imul %ecx,%eax
mov %edi,%r10d
sub %eax,%r10d
imul %esi,%r10d
jmp 2f <func1+0x2f>
lea (%rcx,%rcx,1),%r11d
imul %edi,%r11d
sub %edx,%r11d
mov %edx,%r10d
cmp %esi,%ecx
jle 42 <func1+0x42>
lea (%rsi,%rcx,1),%r9d
mov %r8d,%eax
imul %edx,%eax
add %eax,%r9d
jmp 49 <func1+0x49>
mov %ecx,%r9d
imul %edi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a3 < a4)
    {
        v6 = a2 + (a4 - a5 - a5);
    }
    else
    {
        v6 = a1 * (a4 + a4) - a3;
    }
    if (a3 < a4)
    {
        v7 = (a1 - (a4 * a4)) * a2;
    }
    else
    {
        v7 = a3 + a4 - a4;
    }
    if (a2 < a4)
    {
        v8 = a2 + a4 + a5 * a3;
    }
    else
    {
        v8 = a4 * a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 14
8 14
9 14
10 14
11 14
12 14
13 10
14 10
15 10
16 18
17 20
18 20
19 22
20 22
21 22
22 22
23 22
24 26
25 26
26 28
27 28
28 28
29 28
30 28
31 28
32 28
33 29
<<<sep_out_sample>>>
lea (%rcx,%r8,1),%r9d
cmp %esi,%ecx
jge 10 <func1+0x10>
lea (%r8,%rdi,2),%r9d
imul %esi,%r9d
add %edx,%edi
mov %edi,%r10d
imul %edx,%r10d
add %r8d,%r10d
mov %r8d,%eax
sub %esi,%eax
mov %edx,%r11d
sub %r8d,%r11d
cmp %edx,%esi
cmovge %r11d,%eax
mov %eax,%edx
lea (%rsi,%rdi,1),%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
add %r10d,%eax
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a4 < a2)
    {
        v6 = a2 * ((a1 + a5) + a1);
    }
    else
    {
        v6 = (a5 + a3) + (a4 - a3);
    }
    if (a3 < a3)
    {
        v7 = a5 * (a1 + a1) * a5;
    }
    else
    {
        v7 = a5 + (a1 + a3) * a3;
    }
    if (a2 < a3)
    {
        v8 = a5 - a2 - a3 + a3;
    }
    else
    {
        v8 = a3 - a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 18
7 18
8 18
9 18
10 22
11 22
12 22
13 22
14 22
15 22
16 22
17 28
18 28
19 28
20 28
21 28
22 28
23 29
<<<sep_out_sample>>>
lea (%rdx,%rdx,1),%eax
mov %ecx,%r9d
imul %ecx,%r9d
cmp %r8d,%ecx
cmovl %r9d,%eax
mov %edi,%r9d
sub %ecx,%r9d
cmp %esi,%eax
jge 28 <func1+0x28>
mov %esi,%r9d
sub %edx,%r9d
add %esi,%r9d
imul %edx,%r9d
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%eax
lea 0x1(%r9,%rax,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    if (a4 < a5)
    {
        v6 = a4 * a4;
    }
    else
    {
        v6 = a3 + a3;
    }
    if (v6 < a2)
    {
        v7 = ((a2 - a3) + a2) * a3;
    }
    else
    {
        v7 = a1 - a4;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += a3 - a4 - a4;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a4)
    {
        v10 += a5 - a4 * a5;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 6
3 6
4 6
5 6
6 18
7 18
8 12
9 12
10 14
11 14
12 14
13 14
14 30
15 30
16 30
17 30
18 30
19 30
20 31
<<<sep_out_sample>>>
mov %edx,%eax
sub %esi,%eax
add %ecx,%eax
sub %r8d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a1 - a1;
    v7 = a3 - a2 + a4 - a5;
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += (a1 - a5) + a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 5
2 5
3 5
4 5
5 11
6 11
7 11
8 11
9 11
10 12
<<<sep_out_sample>>>
push %rbx
mov $0x1,%ebx
sub %edx,%ebx
imul %ecx,%ebx
add %esi,%ebx
cmp %edi,%edx
jle 22 <func1+0x22>
mov %ecx,%eax
imul %edx,%eax
mov %esi,%r11d
sub %eax,%r11d
imul %r8d,%r11d
jmp 2c <func1+0x2c>
lea (%r8,%rdx,1),%r11d
add %esi,%r11d
sub %ecx,%r11d
mov %edi,%eax
sub %esi,%eax
lea (%r8,%rcx,1),%r9d
test %esi,%esi
cmovg %eax,%r9d
lea (%r8,%rsi,1),%r10d
cmp %esi,%r9d
jl 51 <func1+0x51>
mov %r8d,%r10d
imul %r8d,%r10d
imul %edi,%r10d
add %edx,%r10d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %ebx,%eax
add %r11d,%eax
add %eax,%r9d
lea (%r9,%r10,1),%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = (a4 - a4 * a3) + a2;
    if (a1 < a3)
    {
        v7 = (a2 - (a4 * a3)) * a5;
    }
    else
    {
        v7 = ((a5 + a3) + a2) - a4;
    }
    if (v8 < a2)
    {
        v8 = a1 - a2;
    }
    else
    {
        v8 = a5 + a4;
    }
    if (v8 < a2)
    {
        v9 = a5 + a2;
    }
    else
    {
        v9 = a1 * (a5 * a5) + a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 4
3 4
4 4
5 4
6 5
7 5
8 7
9 7
10 7
11 7
12 7
13 7
14 11
15 11
16 11
17 15
18 15
19 15
20 15
21 15
22 23
23 21
24 21
25 27
26 27
27 27
28 27
29 29
30 29
31 29
32 29
33 29
34 29
35 29
36 29
37 30
38 30
<<<sep_out_sample>>>
mov %ecx,%r10d
sub %edi,%r10d
mov %edi,%r9d
sub %edx,%r9d
cmp %edx,%ecx
jl 1a <func1+0x1a>
mov %esi,%r9d
imul %edi,%r9d
add %ecx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a4 - a1;
    if (a4 < a3)
    {
        v7 = a1 - a3;
    }
    else
    {
        v7 = a4 + a2 * a1;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 7
4 7
5 5
6 5
7 11
8 11
9 11
10 13
11 13
12 13
13 13
14 13
15 13
16 14
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
imul %edi,%edi
mov %edx,%eax
sub %edi,%eax
lea (%r8,%rcx,2),%esi
lea (%rsi,%rax,1),%eax
mov %ecx,%esi
imul %ecx,%esi
sub %esi,%eax
sub %ecx,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a4 + (a3 - a1 * a1);
    v7 = a4 * (a5 - a4 - a5);
    v8 = a3 - a4;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 7
2 7
3 7
4 4
5 4
6 4
7 4
8 7
9 5
10 5
11 7
12 6
13 7
14 8
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a2 * a5 + a5;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += a4 * a2 + a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 14
2 14
3 14
4 14
5 15
<<<sep_out_sample>>>
lea -0x1(%rdx),%r9d
imul %esi,%r9d
cmp %edi,%edx
jge 1b <func1+0x1b>
mov %edx,%r10d
imul %edx,%r10d
add %r8d,%r10d
add %edx,%r10d
jmp 2a <func1+0x2a>
mov %r8d,%eax
imul %esi,%eax
mov %edx,%r10d
sub %eax,%r10d
sub %r8d,%r10d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
add %eax,%r10d
sub %ecx,%edx
mov %edx,%eax
imul %edi,%eax
sub %r8d,%eax
add %r10d,%eax
add %esi,%r9d
sub %esi,%edi
imul %r9d,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = (a3 * a2) - a2;
    if (a3 < a1)
    {
        v7 = a3 * a3 + a5 + a3;
    }
    else
    {
        v7 = a3 - a5 * a2 - a5;
    }
    v8 = (a1 * (a3 - a4)) - a5;
    v9 = (a3 * a2) * (a1 - a2);
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 5
4 5
5 7
6 7
7 7
8 7
9 7
10 11
11 11
12 11
13 11
14 11
15 15
16 15
17 15
18 15
19 15
20 15
21 13
22 13
23 13
24 13
25 15
26 14
27 14
28 14
29 15
30 16
<<<sep_out_sample>>>
test %edi,%edi
jle 14 <func1+0x14>
mov %r8d,%r10d
imul %esi,%r10d
sub %ecx,%r10d
imul %edi,%r10d
jmp 22 <func1+0x22>
mov %esi,%r10d
imul %esi,%r10d
imul %edi,%r10d
add %ecx,%r10d
cmp %edx,%edi
jge 32 <func1+0x32>
mov %edi,%r9d
imul %esi,%r9d
add %r8d,%r9d
jmp 3a <func1+0x3a>
lea 0x2(%rcx),%r9d
imul %ecx,%r9d
lea (%rsi,%r8,1),%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (a4 < a4)
        {
            v6 += a3 + a4;
        }
        else
        {
            v6 += a1 - (a4 + a1);
        }
    }
    if (v8 < a1)
    {
        v8 = a1 * (a5 * a2 - a4);
    }
    else
    {
        v8 = a2 * a2 * a1 + a4;
    }
    if (a1 < a3)
    {
        v9 = a1 * a2 + a5;
    }
    else
    {
        v9 = (a4 * a4) + a4 + a4;
    }
    v10 = a2 + a5;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 18
7 18
8 22
9 22
10 22
11 22
12 24
13 24
14 26
15 26
16 26
17 26
18 30
19 30
20 32
21 33
22 33
23 33
24 33
25 33
26 33
27 33
28 34
<<<sep_out_sample>>>
mov %ecx,%r9d
sub %edi,%r9d
mov %edx,%eax
sub %esi,%eax
add %edx,%eax
test %ecx,%ecx
jle 1c <func1+0x1c>
mov %edi,%eax
imul %esi,%eax
imul %r8d,%eax
imul %esi,%eax
mov %edx,%r10d
imul %esi,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a4 - a1;
    if (v7 < a4)
    {
        v7 = (a1 * a2) * a5 * a2;
    }
    else
    {
        v7 = a3 - (a2 - a3);
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += a1 + (a5 + a2);
    }
    v10 = a3 * a2;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 11
4 11
5 11
6 5
7 5
8 7
9 7
10 7
11 7
12 18
13 18
14 19
15 19
16 19
17 19
18 19
19 19
20 19
21 20
<<<sep_out_sample>>>
lea (%rsi,%r8,1),%eax
sub %edx,%eax
cmp %esi,%ecx
jl 13 <func1+0x13>
lea -0x1(%rdx),%eax
imul %r8d,%eax
sub %ecx,%eax
lea (%rdi,%rdx,1),%r9d
add %r9d,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%esi
add %eax,%esi
imul %edi,%edi
add %edi,%edx
sub %ecx,%edx
lea (%rsi,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (a4 < a2)
        {
            v6 += a5 + a4;
        }
        else
        {
            v6 += a5 * a4;
        }
    }
    if (a4 < a2)
    {
        v8 = (a2 + a5) - a3;
    }
    else
    {
        v8 = (a5 * a3) - a5 - a4;
    }
    v9 = a1 * a1 + a3 - a4;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 16
4 16
5 22
6 22
7 22
8 25
9 25
10 25
11 25
12 25
13 24
14 24
15 24
16 25
17 26
<<<sep_out_sample>>>
test %edi,%edi
jle 14 <func1+0x14>
mov %edx,%r9d
sub %r8d,%r9d
mov %edx,%eax
imul %edi,%eax
add %r9d,%eax
jmp 19 <func1+0x19>
mov $0x0,%eax
lea (%rdi,%rsi,2),%edi
lea (%r8,%rcx,2),%esi
lea 0x1(%rdi,%rsi,1),%esi
add %esi,%eax
mov $0x1,%esi
sub %ecx,%esi
imul %esi,%ecx
add %ecx,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a4 - a4;
    }
    if (v6 < a1)
    {
        v8 = (a3 - a5) + (a3 * a1);
    }
    else
    {
        v8 = a2 - a2;
    }
    v9 = (a4 - (a4 * a4)) + a3;
    v10 = a2 + a4 - a3;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 11
8 11
9 15
10 19
11 19
12 19
13 19
14 17
15 17
16 17
17 17
18 19
19 20
<<<sep_out_sample>>>
lea (%rsi,%r8,1),%r10d
cmp %edx,%esi
jl 10 <func1+0x10>
mov %edi,%eax
sub %edx,%eax
lea (%rax,%rcx,2),%r10d
cmp %edi,%edx
jge 24 <func1+0x24>
mov %ecx,%r9d
imul %edx,%r9d
add %edi,%r9d
imul %edx,%r9d
jmp 34 <func1+0x34>
mov $0x1,%r9d
sub %esi,%r9d
imul %edi,%r9d
sub %r8d,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a2 < a3)
    {
        v6 = a2 + a5;
    }
    else
    {
        v6 = a4 + (a1 - a3) + a4;
    }
    if (a3 < a1)
    {
        v7 = ((a4 * a3) + a1) * a3;
    }
    else
    {
        v7 = a1 - a2 * a1 - a5;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 4
3 4
4 10
5 10
6 10
7 12
8 12
9 14
10 14
11 14
12 14
13 14
14 18
15 18
16 18
17 18
18 20
19 20
20 20
21 20
22 20
23 20
24 21
<<<sep_out_sample>>>
test %ecx,%ecx
jle 13 <func1+0x13>
mov %edx,%r9d
imul %r8d,%r9d
sub %esi,%r9d
sub %ecx,%r9d
jmp 1d <func1+0x1d>
mov %r8d,%r9d
neg %r9d
imul %edx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
imul %edi,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (v6 < a4)
    {
        v6 = a3 * a5 - a2 - a4;
    }
    else
    {
        v6 = ((a2 - a2) - a5) * a3;
    }
    v7 = a1 * a4;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 13
12 13
13 13
14 13
15 13
16 12
17 13
18 14
<<<sep_out_sample>>>
mov %ecx,%r9d
sub %edx,%r9d
cmp %edx,%ecx
jl 11 <func1+0x11>
mov %esi,%r9d
imul %r8d,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
sub %ecx,%edi
add %edi,%esi
add %esi,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a4 < a3)
    {
        v6 = a4 - a3;
    }
    else
    {
        v6 = a2 * a5;
    }
    v7 = (a1 - a4) + a2 + a3;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 4
4 4
5 10
6 10
7 13
8 13
9 13
10 13
11 13
12 12
13 12
14 12
15 13
16 14
<<<sep_out_sample>>>
lea (%rsi,%r8,2),%r10d
imul %edi,%r10d
lea (%r8,%rdx,1),%r9d
cmp %ecx,%esi
mov $0x0,%eax
cmovl %eax,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
imul %r8d,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a1 * (a5 + a2 + a5);
    if (a2 < a4)
    {
        v7 = a2 - a2;
    }
    else
    {
        v7 = (a2 + a5) - a2 + a3;
    }
    v8 = a5 - (a5 - a5 * a5);
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 11
4 11
5 11
6 11
7 14
8 14
9 14
10 14
11 14
12 14
13 13
14 14
15 15
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
sub %esi,%edi
add $0x1,%edi
imul %edi,%r8d
lea 0x1(%rax,%r8,1),%eax
imul %esi,%ecx
imul %ecx,%esi
add %esi,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a5 + a5 * (a1 - a2);
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a5 * a3 - a4;
    }
    v9 = a2 * a4 * a2 + a3;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 11
5 4
6 4
7 4
8 11
9 10
10 10
11 10
12 11
13 12
<<<sep_out_sample>>>
test %edx,%edx
jle 11 <func1+0x11>
mov %ecx,%r9d
imul %edi,%r9d
imul %esi,%r9d
jmp 18 <func1+0x18>
mov %edi,%r9d
imul %ecx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
add %esi,%edx
imul %r8d,%edx
imul %r8d,%edx
add %edx,%eax
sub %r8d,%edi
imul %edi,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (v6 < a3)
    {
        v6 = a4 * a1 * a2;
    }
    else
    {
        v6 = a1 * a4;
    }
    v7 = a5 * (a2 + a3) * a5;
    v8 = (a1 - a5) * a2;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 14
10 14
11 14
12 14
13 14
14 12
15 12
16 12
17 14
18 13
19 13
20 14
21 15
<<<sep_out_sample>>>
push %rbx
lea (%rsi,%r8,1),%r9d
mov %esi,%r11d
imul %ecx,%r11d
imul %esi,%r11d
add %edi,%r11d
cmp %r8d,%esi
jge 24 <func1+0x24>
mov %edi,%eax
imul %edx,%eax
imul %esi,%eax
sub %ecx,%eax
jmp 2c <func1+0x2c>
lea 0x1(%rcx),%eax
imul %edi,%eax
sub %ecx,%eax
cmp %edx,%ecx
jge 3f <func1+0x3f>
lea (%rdi,%rdi,1),%r10d
mov %r9d,%ebx
sub %r10d,%ebx
mov %ebx,%r10d
jmp 46 <func1+0x46>
mov %esi,%r10d
imul %esi,%r10d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
add %r11d,%r9d
add %r9d,%eax
add %r10d,%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a1 < a1)
    {
        v6 = a2 * a4;
    }
    else
    {
        v6 = a2 + a5;
    }
    v7 = a1 + (a2 * a4 * a2);
    if (a2 < a5)
    {
        v8 = a1 * a3 * a2 - a4;
    }
    else
    {
        v8 = (a1 + a4 * a1) - a4;
    }
    if (a4 < a3)
    {
        v9 = a5 + a2 - (a1 + a1);
    }
    else
    {
        v9 = (a2 + a4 - a4) * a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 10
3 12
4 12
5 12
6 12
7 13
8 13
9 15
10 15
11 15
12 15
13 15
14 19
15 19
16 19
17 21
18 21
19 23
20 23
21 23
22 23
23 23
24 27
25 27
26 29
27 29
28 29
29 29
30 29
31 29
32 29
33 29
34 30
35 30
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %r8d,%edx
lea 0x1(%rcx,%rdx,1),%eax
sub $0x1,%esi
imul %esi,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a2 * a1 * a2;
    }
    v8 = a5 * a2 - a5;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 9
6 9
7 10
8 11
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea (%r8,%rcx,1),%esi
mov %edx,%eax
sub %ecx,%eax
add %eax,%edi
imul %edi,%edx
lea 0x1(%rsi,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = (a3 - a4 + a1) * a3;
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        if (v8 < a3)
        {
            v7 += (a5 * a2) * a5;
        }
        else
        {
            v7 += a1 * a2;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 4
6 4
7 4
8 4
9 17
10 18
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (a1 < a4)
        {
            v6 += a3 + a3;
        }
        else
        {
            v6 += a4 * a2 + a5;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        if (a1 < a4)
        {
            v8 += (a1 - a3) - a3;
        }
        else
        {
            v8 += (a5 - a1) - a4;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 28
2 28
3 28
4 28
5 29
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %r8d,%esi
add %ecx,%esi
mov %ecx,%eax
sub %edx,%eax
imul %ecx,%eax
add %r8d,%eax
lea 0x1(%rsi,%rax,1),%esi
sub %r8d,%edx
add %edx,%ecx
sub %r8d,%ecx
lea (%rsi,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a5 + (a4 * (a4 - a3));
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += a2 * a5;
    }
    v9 = (a4 + (a3 - a5)) - a5;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 11
5 4
6 4
7 4
8 4
9 11
10 10
11 10
12 10
13 11
14 12
<<<sep_out_sample>>>
test %r8d,%r8d
jle b <func1+0xb>
lea (%r8,%r8,1),%r9d
jmp 15 <func1+0x15>
mov %ecx,%r9d
neg %r9d
imul %r8d,%r9d
lea -0x1(%r8),%r11d
imul %edi,%r11d
add %ecx,%r11d
cmp %edi,%r9d
jge 32 <func1+0x32>
lea (%rcx,%rsi,1),%r10d
add %r8d,%r10d
imul %edi,%r10d
jmp 40 <func1+0x40>
mov %edx,%eax
imul %ecx,%eax
mov %esi,%r10d
sub %eax,%r10d
add %edx,%r10d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
add %r11d,%eax
add %r10d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (v6 < a5)
    {
        v6 = a5 + a5;
    }
    else
    {
        v6 = a5 - (a4 * a5 + a5);
    }
    v7 = a4 - (a1 - (a1 * a5));
    if (v6 < a1)
    {
        v8 = a1 * (a4 + a2 + a5);
    }
    else
    {
        v8 = a3 - (a3 * a4 - a2);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 10
6 10
7 10
8 12
9 12
10 12
11 13
12 13
13 15
14 15
15 15
16 15
17 19
18 19
19 19
20 19
21 19
22 21
23 21
24 21
25 21
26 21
27 21
28 21
29 22
<<<sep_out_sample>>>
mov %r8d,%eax
neg %eax
cmp %r8d,%edx
jge 1d <func1+0x1d>
mov %ecx,%eax
imul %r8d,%eax
imul %r8d,%eax
mov %edx,%r9d
sub %eax,%r9d
mov %r9d,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (a5 < a5)
        {
            v6 += a5 - a1 * a2;
        }
        else
        {
            v6 += a3 + a3;
        }
    }
    if (a3 < a5)
    {
        v8 = a3 - a4 * a5 * a5;
    }
    else
    {
        v8 = a3 * (a2 - a2) - a5;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        if (a4 < a4)
        {
            v9 += a4 + (a1 + a5);
        }
        else
        {
            v9 += a5 - a5 - a2;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 16
4 16
5 18
6 18
7 18
8 18
9 18
10 18
11 36
12 36
13 36
14 36
15 36
16 37
<<<sep_out_sample>>>
mov %r8d,%r9d
sub %edx,%r9d
imul %r8d,%r9d
cmp %edi,%r9d
jge 1e <func1+0x1e>
mov %esi,%r11d
imul %edx,%r11d
sub %r8d,%r11d
add %esi,%r11d
jmp 2b <func1+0x2b>
mov %ecx,%r11d
sub %r8d,%r11d
imul %esi,%r11d
add %edx,%r11d
cmp %ecx,%r8d
jle 3f <func1+0x3f>
mov %esi,%r10d
sub %ecx,%r10d
imul %edx,%r10d
add %ecx,%r10d
jmp 46 <func1+0x46>
mov %esi,%r10d
imul %esi,%r10d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
add %r11d,%eax
add %r10d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a5 * (a5 - a3);
    if (v6 < a1)
    {
        v7 = a2 * a3 - a5 + a2;
    }
    else
    {
        v7 = ((a4 - a5) * a2) + a3;
    }
    if (a4 < a5)
    {
        v8 = (a2 - a4) * a3 + a4;
    }
    else
    {
        v8 = a2 * a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 5
5 5
6 7
7 7
8 7
9 7
10 7
11 11
12 11
13 11
14 11
15 13
16 13
17 15
18 15
19 15
20 15
21 15
22 19
23 19
24 21
25 21
26 21
27 21
28 21
29 21
30 21
31 22
<<<sep_out_sample>>>
mov %edi,%r10d
imul %edx,%r10d
cmp %esi,%edx
jge 1c <func1+0x1c>
mov %edi,%r9d
imul %edi,%r9d
imul %esi,%r9d
imul %r8d,%r9d
jmp 23 <func1+0x23>
mov %edx,%r9d
imul %ecx,%r9d
test %esi,%esi
jle 32 <func1+0x32>
lea (%rdx,%rsi,1),%eax
imul %r8d,%eax
sub %edi,%eax
jmp 39 <func1+0x39>
lea (%rdx,%rcx,1),%eax
sub %edi,%eax
add %esi,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r10d,%ecx
add %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a1 * a3;
    if (a3 < a2)
    {
        v7 = a1 * a1 * a2 * a5;
    }
    else
    {
        v7 = a3 * a4;
    }
    if (v8 < a2)
    {
        v8 = a5 * (a3 + a2) - a1;
    }
    else
    {
        v8 = (a3 + a4 - a1) + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 5
4 5
5 7
6 7
7 7
8 7
9 7
10 11
11 11
12 13
13 13
14 15
15 15
16 15
17 15
18 19
19 19
20 19
21 21
22 21
23 21
24 21
25 21
26 21
27 21
28 22
<<<sep_out_sample>>>
lea (%r8,%rcx,1),%r10d
cmp %edx,%ecx
jge 1b <func1+0x1b>
lea (%rdx,%rcx,1),%r11d
mov $0x1,%r9d
sub %r11d,%r9d
imul %edi,%r9d
jmp 27 <func1+0x27>
lea (%rcx,%rdi,1),%r9d
mov %esi,%eax
imul %esi,%eax
add %eax,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a5 + a4;
    if (a4 < a3)
    {
        v7 = a1 - (a3 + a4) * a1;
    }
    else
    {
        v7 = a4 + a1 + a2 * a2;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 5
3 5
4 7
5 7
6 7
7 7
8 7
9 11
10 11
11 11
12 11
13 13
14 13
15 13
16 13
17 13
18 13
19 14
<<<sep_out_sample>>>
test %edi,%edi
jle 9 <func1+0x9>
lea (%rcx,%rcx,1),%eax
jmp 11 <func1+0x11>
lea -0x1(%rsi),%eax
imul %edi,%eax
add %esi,%eax
add %edx,%edi
add %edi,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a1 + a1;
    }
    if (v8 < a1)
    {
        v8 = a4 + a4;
    }
    else
    {
        v8 = ((a2 * a1) - a1) + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 15
6 15
7 15
8 17
9 17
10 17
11 17
12 17
13 18
<<<sep_out_sample>>>
mov %edi,%eax
imul %r8d,%eax
lea 0x1(%rdi,%rax,1),%eax
add %eax,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a4 * (a5 * a5);
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += a2 + a4;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a3)
    {
        if (a3 < a4)
        {
            v10 += (a2 - a4) * a1;
        }
        else
        {
            v10 += (a2 + a1) + a1;
        }
    }
    v12 = a1 * a5;
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 26
2 26
3 27
4 27
5 27
6 27
7 27
8 28
<<<sep_out_sample>>>
lea (%rcx,%rdx,1),%eax
mov %r8d,%r9d
sub %ecx,%r9d
cmp %edi,%edx
cmovl %eax,%r9d
lea (%rdi,%rdx,1),%eax
mov %r8d,%r10d
sub %edi,%r10d
test %esi,%esi
cmovle %r10d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a3 < a1)
    {
        v6 = a4 + a3;
    }
    else
    {
        v6 = a5 - a4;
    }
    if (v7 < a2)
    {
        v7 = ((a3 + a4) + a1) - a4;
    }
    else
    {
        v7 = a5 - a1;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 6
6 14
7 14
8 14
9 14
10 14
11 20
12 20
13 20
14 20
15 20
16 20
17 21
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
sub $0x1,%ecx
imul %r8d,%ecx
add %eax,%ecx
add %edi,%r8d
sub %edx,%r8d
lea (%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a5 * a4 - a5;
    v7 = a5 + a1 - a3;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 4
7 6
8 5
9 5
10 6
11 7
<<<sep_out_sample>>>
test %edx,%edx
jle 11 <func1+0x11>
lea (%r8,%rdx,1),%r9d
imul %edx,%r9d
sub %ecx,%r9d
jmp 1e <func1+0x1e>
mov %edi,%r9d
imul %r8d,%r9d
add %edx,%r9d
add %ecx,%r9d
lea (%rdx,%rdi,1),%eax
lea (%rax,%rsi,1),%r10d
add %r10d,%r8d
add %r8d,%ecx
add %r9d,%ecx
imul %edx,%eax
add %ecx,%eax
mov %edi,%ecx
sub %edx,%ecx
mov %ecx,%edx
sub %esi,%edx
add %edi,%edx
lea (%rax,%rdx,1),%ecx
lea 0x1(%rdi),%eax
imul %eax,%esi
sub %edi,%esi
lea (%rcx,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (v6 < a3)
    {
        v6 = (a3 * (a5 + a3)) - a4;
    }
    else
    {
        v6 = a3 + a1 * a5 + a4;
    }
    v7 = a3 * a3 + a3 * a1;
    v8 = a1 - (a2 - (a1 - a3));
    v9 = a1 * a2 + a2 - a1;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 10
11 12
12 15
13 15
14 15
15 15
16 12
17 15
18 13
19 13
20 13
21 13
22 13
23 15
24 14
25 14
26 14
27 15
28 16
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %edx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a2 + a5 * a4;
    }
    v8 = a3 + a1;
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        v9 += a5 - a4;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 15
2 15
3 15
4 15
5 9
6 15
7 16
<<<sep_out_sample>>>
cmp %esi,%ecx
jge b <func1+0xb>
mov %ecx,%eax
imul %ecx,%eax
jmp 13 <func1+0x13>
mov %edi,%eax
imul %r8d,%eax
sub %ecx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %ecx,%r8d
add %eax,%r8d
imul %edi,%ecx
lea 0x1(%r8,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a4 < a2)
    {
        v6 = a4 * a4;
    }
    else
    {
        v6 = a1 * a5 - a4;
    }
    v7 = a4 * a1;
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += a5 + a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 18
10 18
11 18
12 18
13 18
14 12
15 18
16 19
<<<sep_out_sample>>>
lea 0x2(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12, v13 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a2 * a1;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        if (a4 < a1)
        {
            v8 += a1 * a4 - a2;
        }
        else
        {
            v8 += a2 + a2 - a5;
        }
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a2)
    {
        v10 += (a1 - a4) + a3;
    }
    v12 = 0;
    for (v13 = 0; v13++; v13<a4)
    {
        v12 += a2 - a2 - a4;
    }
    return v12+v13+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 31
2 31
3 31
4 31
5 32
<<<sep_out_sample>>>
mov %edx,%r10d
imul %edi,%r10d
add %ecx,%r10d
cmp %esi,%edx
jle 1f <func1+0x1f>
mov %r8d,%r9d
imul %esi,%r9d
imul %edi,%r9d
imul %ecx,%r9d
jmp 2d <func1+0x2d>
mov %r8d,%r9d
sub %ecx,%r9d
imul %edx,%r9d
imul %edi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a3 < a3)
    {
        v6 = (a2 * a4 - a1) + a2;
    }
    else
    {
        v6 = a3 * a1 + a4;
    }
    if (a2 < a3)
    {
        v7 = a4 * (a5 * a2 * a1);
    }
    else
    {
        v7 = a1 * ((a5 - a4) * a3);
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 12
5 12
6 14
7 14
8 14
9 14
10 14
11 18
12 18
13 18
14 18
15 20
16 20
17 20
18 20
19 20
20 20
21 21
<<<sep_out_sample>>>
mov %edi,%r10d
imul %edx,%r10d
mov %edx,%r9d
sub %r8d,%r9d
cmp %esi,%edi
jg 19 <func1+0x19>
lea 0x1(%rdi),%r9d
imul %ecx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a2 < a2)
    {
        v6 = a5 + ((a1 * a3) * a5);
    }
    else
    {
        v6 = a1 * a3;
    }
    if (a2 < a1)
    {
        v7 = a3 - a5;
    }
    else
    {
        v7 = a4 * a1 + a4;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 10
2 10
3 14
4 14
5 12
6 12
7 18
8 18
9 20
10 20
11 20
12 20
13 20
14 20
15 21
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
lea (%rsi,%rcx,2),%edx
lea 0x1(%r8,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a5 < a5)
    {
        v6 = a1 - (a4 * a3 - a2);
    }
    else
    {
        v6 = a2 + a4;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        if (v6 < a5)
        {
            v7 += a5 - a5 + a4;
        }
        else
        {
            v7 += (a2 + a2) + a2;
        }
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        v9 += a1 + a5 - a3;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 29
2 29
3 29
4 10
5 29
6 30
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
lea (%rax,%rsi,1),%r9d
add %r8d,%r9d
add %ecx,%r9d
sub %eax,%ecx
add %esi,%ecx
add %r9d,%ecx
add %edi,%esi
sub %r8d,%esi
lea (%rcx,%rsi,1),%eax
sub %edi,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a5 < a5)
    {
        v6 = (a3 - a2) + a3 * a5;
    }
    else
    {
        v6 = a4 - (a1 + a3) + a2;
    }
    v7 = a2 + a1 - a5;
    if (a3 < a3)
    {
        v8 = (a1 - a5 - a5) * a3;
    }
    else
    {
        v8 = a3 - a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 21
3 21
4 21
5 10
6 10
7 21
8 12
9 12
10 21
11 19
12 21
13 22
<<<sep_out_sample>>>
mov %r8d,%r9d
imul %ecx,%r9d
test %edi,%edi
jle 1d <func1+0x1d>
mov %esi,%r10d
imul %esi,%r10d
mov %r8d,%eax
imul %edx,%eax
add %eax,%r10d
jmp 24 <func1+0x24>
mov %r8d,%r10d
imul %r8d,%r10d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %r9d,%eax
add %r10d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (a2 < a3)
        {
            v6 += (a4 + a4) + a4;
        }
        else
        {
            v6 += (a5 - a3) - a5;
        }
    }
    if (a5 < a5)
    {
        v8 = a3 - a4 * a5 * a4;
    }
    else
    {
        v8 = a5 * a4;
    }
    if (v6 < a1)
    {
        v9 = a2 * a2 + a5 * a3;
    }
    else
    {
        v9 = a5 * a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 24
4 24
5 26
6 26
7 26
8 26
9 26
10 26
11 30
12 30
13 32
14 32
15 32
16 32
17 32
18 32
19 33
<<<sep_out_sample>>>
mov %r8d,%r9d
imul %ecx,%r9d
test %edx,%edx
jle 17 <func1+0x17>
lea 0x1(%rdx),%eax
imul %edi,%eax
imul %r8d,%eax
jmp 1a <func1+0x1a>
mov %r9d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a5 * a4;
    if (v7 < a3)
    {
        v7 = a5 * (a1 + a3 * a1);
    }
    else
    {
        v7 = a4 * a5;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 5
4 5
5 7
6 7
7 7
8 7
9 11
10 13
11 13
12 13
13 13
14 13
15 13
16 14
<<<sep_out_sample>>>
mov %edx,%r9d
imul %edi,%r9d
add %esi,%r9d
sub %edx,%r9d
lea (%rdx,%r8,1),%eax
cmp $0x1,%edi
jle 20 <func1+0x20>
mov %esi,%eax
sub %r8d,%eax
sub %edi,%eax
imul %edx,%eax
lea 0x1(%rax,%rdi,1),%eax
add %eax,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = a2 + a3 * a1 - a3;
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        if (a5 < a2)
        {
            v7 += a3 * a4 + a5;
        }
        else
        {
            v7 += a1 + a4 + a3;
        }
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a1)
    {
        if (a3 < a3)
        {
            v9 += a4 + a1 * a1;
        }
        else
        {
            v9 += a3 - a4;
        }
    }
    if (v8 < a1)
    {
        v11 = (a2 - a5 - a1) * a3;
    }
    else
    {
        v11 = a3 + a4 - a4 + a5;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 35
6 29
7 29
8 31
9 31
10 31
11 31
12 37
13 37
14 37
15 37
16 37
17 37
18 38
<<<sep_out_sample>>>
test %edx,%edx
jle f <func1+0xf>
lea (%rdx,%rdi,1),%eax
imul %edi,%eax
add %r8d,%eax
jmp 1f <func1+0x1f>
mov %esi,%eax
imul %esi,%eax
mov %edi,%r9d
sub %eax,%r9d
mov %r9d,%eax
add %ecx,%eax
add %edx,%edi
add %edi,%esi
add %r8d,%esi
add %esi,%ecx
lea 0x1(%rax,%rcx,1),%ecx
lea 0x1(%rdx),%eax
imul %eax,%edx
sub %r8d,%edx
lea (%rcx,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (v6 < a3)
    {
        v6 = a1 * (a3 + a1) + a5;
    }
    else
    {
        v6 = a1 - a2 * a2 + a4;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        if (v6 < a1)
        {
            v7 += a3 * a5;
        }
        else
        {
            v7 += a5 * a2;
        }
    }
    v9 = a3 + a3 * a3 - a5;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 10
11 10
12 10
13 25
14 25
15 25
16 25
17 25
18 24
19 24
20 24
21 25
22 26
<<<sep_out_sample>>>
mov %esi,%r9d
imul %edx,%r9d
imul %edi,%r9d
add %edx,%r9d
lea (%r8,%rdx,1),%eax
cmp %r8d,%edi
jg 1d <func1+0x1d>
lea (%rdi,%rdx,2),%eax
lea (%rax,%rsi,1),%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = (a2 * a3 * a1) + a3;
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a5 + (a2 - a3);
    }
    if (a5 < a1)
    {
        v9 = a5 + a3;
    }
    else
    {
        v9 = (a3 + a1 + a2) + a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 12
6 10
7 10
8 16
9 16
10 18
11 18
12 18
13 18
14 18
15 18
16 19
<<<sep_out_sample>>>
lea (%rsi,%r8,2),%r11d
lea (%rdi,%rcx,1),%r10d
add %edx,%r10d
imul %r8d,%r10d
mov %edx,%r9d
sub %r8d,%r9d
cmp %ecx,%esi
mov $0x0,%eax
cmovl %eax,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a5 + a5 + a2;
    v7 = ((a1 + a4) + a3) * a5;
    if (a2 < a4)
    {
        v8 = a5 - a5;
    }
    else
    {
        v8 = a3 + (a2 - a2) - a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 5
3 5
4 5
5 12
6 12
7 12
8 12
9 12
10 14
11 14
12 14
13 14
14 14
15 14
16 14
17 15
<<<sep_out_sample>>>
test %edx,%edx
jle 9 <func1+0x9>
lea (%rcx,%rcx,1),%eax
jmp 10 <func1+0x10>
mov %esi,%eax
imul %esi,%eax
neg %eax
test %esi,%esi
jle 1d <func1+0x1d>
mov %edi,%r9d
imul %ecx,%r9d
jmp 31 <func1+0x31>
mov %ecx,%r9d
imul %esi,%r9d
imul %edi,%r9d
mov %esi,%r10d
sub %r9d,%r10d
mov %r10d,%r9d
add %r9d,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %r8d,%esi
lea 0x2(%rcx,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (a4 < a2)
        {
            v6 += a3 - a1 * a5;
        }
        else
        {
            v6 += a5 * a4 - a4;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += a2 + a1 * a3;
    }
    if (v10 < a3)
    {
        v10 = a4 + a4;
    }
    else
    {
        v10 = a4 - (a2 * a2 + a4);
    }
    if (v6 < a2)
    {
        v11 = a1 * a4;
    }
    else
    {
        v11 = a2 - a4 * a2 * a1;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 23
4 23
5 27
6 27
7 27
8 29
9 29
10 31
11 31
12 31
13 35
14 35
15 35
16 35
17 35
18 35
19 37
20 37
21 37
22 37
23 37
24 37
25 38
<<<sep_out_sample>>>
add %edi,%edx
add %edx,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%edx
add %r8d,%ecx
lea (%rcx,%rdi,2),%eax
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (v6 < a1)
        {
            v6 += (a5 - a4) * a4;
        }
        else
        {
            v6 += a4 + (a4 * a3);
        }
    }
    v8 = ((a5 + a4) + a1) + a1;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 16
6 16
7 17
8 18
<<<sep_out_sample>>>
cmp %edx,%edi
jge a <func1+0xa>
lea (%rsi,%rsi,1),%r10d
jmp 17 <func1+0x17>
mov %esi,%r10d
imul %r8d,%r10d
add %edi,%r10d
sub %esi,%r10d
lea (%rdi,%rcx,1),%r9d
cmp %r9d,%edi
jle 2a <func1+0x2a>
mov %ecx,%eax
imul %esi,%eax
imul %eax,%eax
jmp 34 <func1+0x34>
mov %edi,%eax
imul %ecx,%eax
imul %esi,%eax
sub %edi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r10d,%ecx
add %ecx,%r9d
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a1 < a3)
    {
        v6 = ((a2 + a2) - a1) + a1;
    }
    else
    {
        v6 = a2 * a5 + a1 - a2;
    }
    v7 = (a5 + a4 + a1) - a5;
    if (v7 < a1)
    {
        v8 = (a4 * a2 * a2) * a4;
    }
    else
    {
        v8 = (a1 * a4 * a2) - a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 10
6 10
7 10
8 10
9 12
10 13
11 13
12 15
13 15
14 15
15 15
16 19
17 19
18 19
19 19
20 21
21 21
22 21
23 21
24 21
25 21
26 21
27 22
<<<sep_out_sample>>>
mov %esi,%eax
sub %ecx,%eax
cmp %edi,%r8d
jge 11 <func1+0x11>
mov %ecx,%eax
imul %r8d,%eax
add %edx,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a4 - a2 - a5;
    }
    if (a5 < a1)
    {
        v8 = a3 + a4 * a5;
    }
    else
    {
        v8 = a2 - a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 15
2 15
3 9
4 9
5 11
6 11
7 11
8 17
9 17
10 17
11 17
12 17
13 18
<<<sep_out_sample>>>
cmp %esi,%edi
jge 14 <func1+0x14>
mov %ecx,%eax
imul %ecx,%eax
mov %r8d,%r9d
sub %eax,%r9d
add %r8d,%r9d
jmp 22 <func1+0x22>
mov %edx,%r9d
imul %edi,%r9d
imul %esi,%r9d
add %edi,%r9d
test %r8d,%r8d
jle 2f <func1+0x2f>
lea 0x2(%rdx),%eax
imul %ecx,%eax
jmp 38 <func1+0x38>
mov %esi,%eax
imul %ecx,%eax
lea (%rax,%r8,2),%eax
cmp %edx,%r9d
jge 4d <func1+0x4d>
mov %edx,%r10d
imul %edi,%r10d
imul %r8d,%r10d
add %edx,%r10d
jmp 55 <func1+0x55>
lea 0x1(%rsi),%r10d
imul %edi,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a1 < a2)
    {
        v6 = a5 - a4 * a4 + a5;
    }
    else
    {
        v6 = a1 + a3 * a1 * a2;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += (a2 + a4) * a5;
    }
    if (v7 < a5)
    {
        v9 = a4 + a3 * a4 + a4;
    }
    else
    {
        v9 = a5 + (a2 * a4) + a5;
    }
    if (v6 < a3)
    {
        v10 = (a3 * a1 * a5) + a3;
    }
    else
    {
        v10 = a1 + a2 * a1;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 6
9 10
10 10
11 10
12 10
13 17
14 17
15 19
16 19
17 19
18 23
19 23
20 23
21 25
22 25
23 27
24 27
25 27
26 27
27 27
28 31
29 31
30 33
31 33
32 33
33 33
34 33
35 33
36 33
37 34
<<<sep_out_sample>>>
cmp %edi,%r8d
jge 12 <func1+0x12>
mov %ecx,%eax
imul %esi,%eax
imul %edx,%eax
add %r8d,%eax
jmp 22 <func1+0x22>
mov %edx,%r9d
sub %esi,%r9d
mov %r8d,%eax
imul %r8d,%eax
add %r9d,%eax
add %edx,%edi
add %edi,%esi
add %r8d,%esi
add %ecx,%esi
lea 0x1(%rax,%rsi,1),%eax
imul %ecx,%r8d
add %r8d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a5 < a1)
    {
        v6 = (a4 * a2 * a3) + a5;
    }
    else
    {
        v6 = a3 - a2 + a5 * a5;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a5 - a4;
    }
    v9 = a3 + a5 * a4;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 10
13 18
14 18
15 18
16 18
17 18
18 17
19 17
20 18
21 19
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %eax,%ecx
sub %edx,%edi
add %r8d,%edi
lea (%rcx,%rdi,1),%eax
sub %esi,%r8d
add $0x1,%r8d
imul %r8d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a5 - (a3 - a1);
    v7 = ((a5 - a2) * a3) + a3;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 4
7 6
8 5
9 5
10 5
11 6
12 7
<<<sep_out_sample>>>
cmp %ecx,%r8d
jge 12 <func1+0x12>
mov %ecx,%eax
imul %esi,%eax
sub %r8d,%eax
sub %r8d,%eax
jmp 23 <func1+0x23>
mov %esi,%eax
imul %edi,%eax
imul %esi,%eax
mov %edi,%r10d
sub %eax,%r10d
mov %r10d,%eax
mov %edx,%r9d
imul %ecx,%r9d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a5 < a4)
    {
        v6 = (a4 * a2) - a5 - a5;
    }
    else
    {
        v6 = a1 - a2 * a1 * a2;
    }
    if (a4 < a3)
    {
        v7 = a3 * a4;
    }
    else
    {
        v7 = a3 * a4;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 10
13 10
14 18
15 18
16 20
17 20
18 20
19 20
20 20
21 20
22 21
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (a2 < a2)
        {
            v6 += (a1 - a1) + a4;
        }
        else
        {
            v6 += a5 + a5;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += (a5 + a1) + a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 21
5 22
<<<sep_out_sample>>>
lea (%rdi,%rsi,1),%r9d
cmp %ecx,%esi
jl 16 <func1+0x16>
lea (%rsi,%rsi,1),%r9d
mov %edi,%r10d
imul %edx,%r10d
sub %r10d,%r9d
mov $0x0,%eax
cmp %r8d,%edx
jle 25 <func1+0x25>
lea (%rsi,%rcx,2),%eax
sub %edi,%eax
lea (%rdi,%rdx,1),%r10d
add %r10d,%esi
add %r8d,%esi
add %ecx,%esi
add %r9d,%esi
add %esi,%eax
lea (%rax,%r8,2),%eax
imul %ecx,%ecx
sub %ecx,%edx
add %edx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a2 < a4)
    {
        v6 = a1 + a2;
    }
    else
    {
        v6 = a2 + a2 - a1 * a3;
    }
    if (a5 < a3)
    {
        v7 = (a2 + a4 + a4) - a1;
    }
    else
    {
        v7 = a2 * (a4 - a4);
    }
    v8 = a5 + a5;
    v9 = a1 + (a3 - a4 * a4);
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 4
3 4
4 10
5 10
6 10
7 10
8 18
9 12
10 12
11 14
12 14
13 22
14 22
15 22
16 22
17 22
18 22
19 22
20 21
21 21
22 21
23 22
24 23
<<<sep_out_sample>>>
cmp %esi,%ecx
jge 14 <func1+0x14>
mov %edi,%r9d
imul %esi,%r9d
imul %r8d,%r9d
add %ecx,%r9d
jmp 21 <func1+0x21>
mov %edi,%r9d
imul %ecx,%r9d
add %r8d,%r9d
sub %ecx,%r9d
lea (%rdi,%rcx,1),%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a4 < a2)
    {
        v6 = a4 + a1 * a2 * a5;
    }
    else
    {
        v6 = (a1 * a4 + a5) - a4;
    }
    if (a2 < a3)
    {
        v7 = a1 - a1;
    }
    else
    {
        v7 = a5 * a5 - a5 * a5;
    }
    v8 = a1 + a4;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 20
13 21
14 21
15 21
16 21
17 21
18 21
19 22
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
sub %r8d,%esi
add %ecx,%esi
add %edi,%esi
add %eax,%esi
add %edx,%ecx
sub %edi,%ecx
lea 0x1(%rsi,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    if (a4 < a4)
    {
        v6 = a5 + (a4 * a5 + a5);
    }
    else
    {
        v6 = ((a2 - a5) + a4) + a1;
    }
    v7 = a3 + a4 - a1;
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        if (v8 < a3)
        {
            v8 += a5 + a1 * a5;
        }
        else
        {
            v8 += a4 + a3;
        }
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a5)
    {
        v10 += (a3 - a1) - a5;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 30
2 30
3 30
4 30
5 10
6 10
7 10
8 30
9 12
10 12
11 30
12 31
<<<sep_out_sample>>>
test %edi,%edi
jle 16 <func1+0x16>
mov %edi,%eax
imul %edx,%eax
add %esi,%eax
mov %edx,%r9d
sub %eax,%r9d
mov %r9d,%eax
jmp 1c <func1+0x1c>
lea 0x1(%rdi),%eax
imul %esi,%eax
add %edi,%edx
add %edx,%esi
add %r8d,%esi
add %esi,%ecx
lea 0x1(%rax,%rcx,1),%eax
sub %r8d,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (v6 < a1)
    {
        v6 = a3 - (a1 * a3 + a2);
    }
    else
    {
        v6 = a2 + (a1 * a2);
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        if (v8 < a5)
        {
            v7 += a3 * (a1 - a3);
        }
        else
        {
            v7 += (a3 * a4) + a1;
        }
    }
    v9 = a1 - a5;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 6
9 6
10 10
11 10
12 25
13 25
14 25
15 25
16 25
17 24
18 25
19 26
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %eax,%ecx
sub %r8d,%esi
sub %edi,%esi
add %esi,%edx
lea 0x1(%rcx,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a2 - a5 - a1 + a3;
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a1 * a1 * a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 4
6 4
7 4
8 10
9 11
<<<sep_out_sample>>>
mov %esi,%r9d
sub %ecx,%r9d
mov %edi,%eax
imul %ecx,%eax
add %r8d,%eax
sub %edi,%eax
cmp %eax,%ecx
jle 1d <func1+0x1d>
mov %esi,%r10d
imul %ecx,%r10d
jmp 24 <func1+0x24>
lea (%rdi,%r8,2),%r10d
sub %ecx,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a2 - a4;
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += (a4 * a3) - a4;
    }
    v9 = (a1 * a4 + a5) - a1;
    if (v9 < a4)
    {
        v10 = a2 * a4;
    }
    else
    {
        v10 = a5 + a1 - a4 + a5;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 10
4 10
5 10
6 10
7 11
8 11
9 13
10 13
11 13
12 17
13 17
14 19
15 19
16 19
17 19
18 19
19 19
20 19
21 20
<<<sep_out_sample>>>
mov %esi,%r9d
imul %esi,%r9d
mov $0x0,%eax
cmp %edi,%ecx
jge 16 <func1+0x16>
mov %ecx,%eax
sub %edi,%eax
add %ecx,%eax
add %edx,%edi
add %edi,%esi
add %r8d,%esi
add %esi,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a2 * a2;
    if (a4 < a1)
    {
        v7 = (a4 - a1) + a4;
    }
    else
    {
        v7 = ((a4 - a2) + a2) - a4;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += a1 * (a2 - a3);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 11
4 5
5 5
6 7
7 7
8 7
9 18
10 18
11 18
12 18
13 18
14 18
15 19
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
lea (%r8,%rcx,2),%eax
lea 0x1(%rsi,%rax,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a4 + a5;
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += a2 + a1;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        if (v10 < a1)
        {
            v9 += a2 * (a2 * a4);
        }
        else
        {
            v9 += a3 + a1;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 22
4 4
5 22
6 23
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%r9d
add %esi,%r9d
add %r8d,%r9d
add %ecx,%r9d
mov %edi,%eax
sub %edx,%eax
add %ecx,%eax
imul %edi,%eax
add %eax,%r9d
mov $0x1,%eax
sub %edx,%eax
imul %edi,%eax
sub %r8d,%eax
add %r9d,%eax
imul %r8d,%ecx
sub %edi,%esi
imul %ecx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = (a4 - (a3 - a1)) * a1;
    v7 = a1 - a3 * a1 - a5;
    v8 = a5 * a4 * (a2 - a1);
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 7
2 7
3 7
4 7
5 4
6 4
7 4
8 4
9 7
10 5
11 5
12 5
13 5
14 7
15 6
16 6
17 6
18 7
19 8
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
sub %r8d,%edx
add %edx,%ecx
add %ecx,%esi
lea 0x1(%rax,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a3 - a5 + a4 + a2;
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += a3 - a1 * a1;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        v9 += a3 * a3 + a3;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 15
2 15
3 15
4 15
5 4
6 4
7 4
8 15
9 16
<<<sep_out_sample>>>
cmp %ecx,%r8d
jge 15 <func1+0x15>
mov %edx,%eax
sub %ecx,%eax
mov %edx,%r9d
imul %esi,%r9d
sub %r9d,%eax
jmp 1e <func1+0x1e>
mov %ecx,%eax
imul %edi,%eax
sub %esi,%eax
add %edi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (a1 < a5)
        {
            v6 += a4 + (a3 - a2);
        }
        else
        {
            v6 += a1 - a1 - a3;
        }
    }
    if (a5 < a4)
    {
        v8 = (a3 - a4) - (a3 * a2);
    }
    else
    {
        v8 = (a4 * a1) - a2 + a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 18
7 18
8 18
9 22
10 22
11 22
12 22
13 24
14 24
15 24
16 24
17 24
18 25
<<<sep_out_sample>>>
lea -0x1(%rsi,%r8,1),%r10d
imul %edx,%r10d
mov %edx,%r9d
sub %edi,%r9d
cmp %ecx,%edx
cmovle %r8d,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
imul %esi,%r8d
lea (%r8,%rsi,2),%edx
add %edx,%eax
sub %esi,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a3 * (a2 + a5) - a3;
    if (a4 < a3)
    {
        v7 = ((a2 + a3) - a2) - a1;
    }
    else
    {
        v7 = a5 - (a2 - a2) * a4;
    }
    v8 = a2 + a2 + a5 * a2;
    v9 = a1 - a2;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 7
4 7
5 7
6 7
7 15
8 15
9 15
10 15
11 15
12 15
13 13
14 13
15 15
16 14
17 15
18 16
<<<sep_out_sample>>>
lea (%rcx,%rsi,1),%r9d
lea (%rcx,%rdi,1),%eax
cmp %r8d,%edi
jg 17 <func1+0x17>
mov %edi,%eax
imul %esi,%eax
imul %edi,%eax
imul %edx,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = (a4 + a3 - a3) + a2;
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += a1 + a3 + a5;
    }
    if (a5 < a1)
    {
        v9 = a4 + a1;
    }
    else
    {
        v9 = a3 * (a1 * (a1 * a2));
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 12
3 10
4 10
5 16
6 16
7 16
8 16
9 18
10 18
11 18
12 18
13 18
14 18
15 19
<<<sep_out_sample>>>
cmp %esi,%ecx
jge f <func1+0xf>
mov %esi,%r9d
neg %r9d
sub %r8d,%r9d
jmp 1b <func1+0x1b>
mov %edx,%eax
imul %r8d,%eax
mov %ecx,%r9d
sub %eax,%r9d
mov %r8d,%eax
neg %eax
imul %esi,%eax
cmp %eax,%edi
jle 37 <func1+0x37>
mov %edx,%r10d
imul %r8d,%r10d
imul %edx,%r10d
sub %edi,%r10d
jmp 45 <func1+0x45>
mov %ecx,%r10d
imul %esi,%r10d
sub %r8d,%r10d
imul %edi,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %r9d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (a4 < a3)
        {
            v6 += (a5 * a3) + a2;
        }
        else
        {
            v6 += a1 - a4 - a3;
        }
    }
    if (a4 < a2)
    {
        v8 = a4 - ((a2 + a4) + a5);
    }
    else
    {
        v8 = a4 - a3 * a5;
    }
    v9 = a2 * (a3 - (a3 + a5));
    if (v9 < a1)
    {
        v10 = (a3 * a5 * a3) - a1;
    }
    else
    {
        v10 = (a4 * a2 - a5) * a1;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 18
7 22
8 22
9 22
10 22
11 24
12 24
13 24
14 25
15 25
16 27
17 27
18 27
19 27
20 27
21 31
22 31
23 31
24 31
25 33
26 33
27 33
28 33
29 33
30 33
31 33
32 34
<<<sep_out_sample>>>
lea (%rdi,%r8,2),%eax
lea (%rax,%rsi,1),%eax
lea 0x2(%rcx,%rax,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a1 * a5;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        if (a3 < a5)
        {
            v8 += a2 + a5 * a5;
        }
        else
        {
            v8 += a3 + a4;
        }
    }
    v10 = (a4 + a5) - a4 - a3;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 22
4 23
<<<sep_out_sample>>>
cmp %edi,%esi
jge d <func1+0xd>
mov %r8d,%r9d
imul %esi,%r9d
jmp 1c <func1+0x1c>
mov %edx,%r9d
imul %edx,%r9d
add $0x1,%r9d
imul %r8d,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
sub %esi,%ecx
add %eax,%ecx
mov $0x2,%eax
sub %r8d,%eax
imul %eax,%edi
lea (%rcx,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a2 < a1)
    {
        v6 = a5 * a2;
    }
    else
    {
        v6 = a5 + a3 * a3 * a5;
    }
    v7 = (a1 + a4 - a2) - a1;
    if (a2 < a2)
    {
        v8 = (a5 * a5 * a3) - a4;
    }
    else
    {
        v8 = a1 - ((a5 * a1) - a1);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 10
10 21
11 21
12 21
13 21
14 21
15 12
16 21
17 19
18 19
19 19
20 21
21 22
<<<sep_out_sample>>>
lea (%r8,%rdx,1),%r9d
mov %edx,%eax
imul %r8d,%eax
test %edi,%edi
cmovg %eax,%r9d
lea (%rcx,%r8,1),%r10d
cmp %ecx,%r8d
jge 22 <func1+0x22>
mov %eax,%r10d
add %ecx,%r10d
sub %edx,%r10d
cmp %esi,%r10d
jge 2c <func1+0x2c>
lea (%rsi,%rsi,1),%eax
jmp 35 <func1+0x35>
lea 0x1(%rcx),%eax
imul %r8d,%eax
sub %edx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
add %r9d,%r10d
add %r10d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (v6 < a1)
    {
        v6 = a2 + (a3 * a5) - a2;
    }
    else
    {
        v6 = (a5 + a3) + a3 - a3;
    }
    if (a5 < a4)
    {
        v7 = a3 * a5 + a4 - a3;
    }
    else
    {
        v7 = a4 + a5;
    }
    if (v7 < a2)
    {
        v8 = a2 + a2;
    }
    else
    {
        v8 = ((a5 * a4) + a5) - a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 6
3 6
4 6
5 6
6 18
7 12
8 12
9 14
10 14
11 14
12 20
13 20
14 22
15 22
16 26
17 26
18 26
19 28
20 28
21 28
22 28
23 28
24 28
25 28
26 29
<<<sep_out_sample>>>
cmp %r8d,%ecx
jge d <func1+0xd>
lea (%rsi,%rdx,1),%eax
imul %edi,%eax
jmp 16 <func1+0x16>
lea -0x1(%rsi),%eax
imul %edx,%eax
imul %edx,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = a2 - a2;
    if (a4 < a5)
    {
        v7 = (a1 * a2) + a3 * a1;
    }
    else
    {
        v7 = (a2 * a3 - a3) * a3;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += a2 * a3 - a2;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a5)
    {
        if (a4 < a5)
        {
            v10 += a5 + a1 - a3;
        }
        else
        {
            v10 += a5 + a1 * a2;
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 5
2 5
3 7
4 7
5 7
6 11
7 11
8 11
9 30
10 30
11 30
12 30
13 30
14 31
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
add %r8d,%ecx
add %esi,%edi
lea 0x1(%rcx,%rdi,1),%eax
sub %edx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a2 + a1;
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += a4 * a4;
    }
    v9 = a2 - a3;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 11
5 4
6 11
7 10
8 11
9 12
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a2 + a3 + a1;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += a3 * (a1 * a1);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 14
2 14
3 14
4 14
5 15
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
sub %edi,%ecx
add %eax,%ecx
add %r8d,%edi
imul %edx,%esi
sub %esi,%edi
lea 0x1(%rcx,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a4 - a1;
    if (a5 < a5)
    {
        v7 = a3 - a1 + a2 + a4;
    }
    else
    {
        v7 = a5 + a1 - a3 * a2;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        if (v8 < a3)
        {
            v8 += (a3 * a1) * a5;
        }
        else
        {
            v8 += a4 * a5 - a5;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 25
2 25
3 25
4 25
5 4
6 25
7 11
8 11
9 11
10 25
11 26
<<<sep_out_sample>>>
mov %ecx,%r10d
sub %edi,%r10d
mov %esi,%r11d
imul %ecx,%r11d
sub %r11d,%r10d
mov %edx,%r9d
sub %ecx,%r9d
test %edx,%edx
jle 24 <func1+0x24>
lea (%rdi,%rsi,1),%r9d
sub %r8d,%r9d
sub %r8d,%r9d
mov %edi,%eax
sub %esi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r10d,%ecx
add %ecx,%r9d
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a4 - a1 - (a2 * a4);
    if (v7 < a3)
    {
        v7 = (a1 + a2 - a5) - a5;
    }
    else
    {
        v7 = a3 - a4;
    }
    v8 = a2 + (a5 - a2 - a5);
    v9 = (a3 + a1 - a3) - a2;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 4
6 11
7 11
8 5
9 5
10 7
11 7
12 7
13 14
14 14
15 15
16 15
17 15
18 15
19 15
20 15
21 15
22 16
<<<sep_out_sample>>>
cmp %esi,%ecx
jge 10 <func1+0x10>
lea (%r8,%rdi,1),%eax
mov %esi,%r9d
sub %eax,%r9d
jmp 1e <func1+0x1e>
mov %edx,%r9d
imul %esi,%r9d
add %ecx,%r9d
imul %edx,%r9d
add %edx,%edi
add %esi,%edi
add %r8d,%edi
add %edi,%ecx
add %r9d,%ecx
add %edx,%esi
sub %r8d,%esi
lea (%rcx,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a4 < a2)
    {
        v6 = a2 - (a5 + a1);
    }
    else
    {
        v6 = ((a3 * a2) + a4) * a3;
    }
    v7 = a3 + a2 - a5;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 10
11 13
12 13
13 13
14 13
15 13
16 12
17 12
18 13
19 14
<<<sep_out_sample>>>
lea (%rcx,%rdx,1),%r9d
mov %edx,%eax
imul %esi,%eax
cmp %edi,%edx
cmovl %eax,%r9d
test %r8d,%r8d
jle 26 <func1+0x26>
mov %esi,%eax
imul %esi,%eax
mov %r8d,%r10d
sub %eax,%r10d
mov %r10d,%eax
sub %edx,%eax
jmp 2f <func1+0x2f>
lea (%rdi,%rsi,1),%eax
sub %r8d,%eax
sub %r8d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a3 < a1)
    {
        v6 = a3 * a2;
    }
    else
    {
        v6 = a4 + a3;
    }
    if (v7 < a5)
    {
        v7 = a5 - a2 * a2 - a3;
    }
    else
    {
        v7 = ((a1 + a2) - a5) - a5;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 10
2 6
3 6
4 6
5 6
6 12
7 12
8 14
9 14
10 14
11 14
12 14
13 14
14 14
15 18
16 18
17 18
18 20
19 20
20 20
21 20
22 20
23 20
24 21
<<<sep_out_sample>>>
mov %edx,%r9d
imul %ecx,%r9d
add %esi,%r9d
sub %edi,%r9d
cmp $0x1,%r8d
jle 1d <func1+0x1d>
mov %edx,%eax
imul %r8d,%eax
add %ecx,%eax
jmp 24 <func1+0x24>
lea 0x1(%rdx),%eax
imul %r8d,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    if (a2 < a2)
    {
        v6 = ((a3 - a5) * a4) * a2;
    }
    else
    {
        v6 = (a3 * a4 + a2) - a1;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        if (a1 < a4)
        {
            v7 += (a4 * a2) + a5;
        }
        else
        {
            v7 += (a2 * a4) * a4;
        }
    }
    if (v8 < a5)
    {
        v9 = a3 * a5 + a4;
    }
    else
    {
        v9 = a5 + a3 * a5;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a4)
    {
        v10 += (a3 + a5) + a5;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 24
6 24
7 26
8 26
9 26
10 26
11 30
12 30
13 37
14 37
15 37
16 37
17 37
18 37
19 38
<<<sep_out_sample>>>
mov %edx,%r11d
imul %edx,%r11d
test %edi,%edi
jle 19 <func1+0x19>
lea (%rcx,%rdx,1),%r10d
imul %edi,%r10d
imul %ecx,%r10d
jmp 20 <func1+0x20>
lea (%rdx,%rcx,1),%r10d
add %edi,%r10d
lea (%rdx,%rcx,1),%r9d
cmp %esi,%r8d
jge 33 <func1+0x33>
mov %r8d,%r9d
imul %edx,%r9d
add %ecx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a3 * a3;
    if (v7 < a1)
    {
        v7 = (a4 + a3) * a1 * a4;
    }
    else
    {
        v7 = a3 + a4 + a1;
    }
    if (a5 < a2)
    {
        v8 = a4 + a5 * a3;
    }
    else
    {
        v8 = a3 + (a3 - a3 + a4);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 5
4 5
5 7
6 7
7 7
8 7
9 11
10 11
11 19
12 13
13 13
14 15
15 15
16 15
17 21
18 21
19 21
20 21
21 21
22 21
23 21
24 22
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%r9d
mov %ecx,%eax
imul %esi,%eax
cmp %ecx,%edx
cmovl %eax,%r9d
mov %ecx,%eax
test %ecx,%ecx
jg 19 <func1+0x19>
sub %edx,%eax
add %ecx,%eax
add %edi,%edx
add %edx,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%edx
add %edx,%r9d
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a5 * (a2 - a2);
    }
    if (a3 < a4)
    {
        v8 = a4 * a2;
    }
    else
    {
        v8 = a1 + a3;
    }
    if (v6 < a4)
    {
        v9 = a4 - a4 + a4;
    }
    else
    {
        v9 = a4 - a3 + a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 15
2 11
3 11
4 11
5 11
6 19
7 17
8 17
9 23
10 23
11 25
12 25
13 25
14 25
15 25
16 25
17 26
<<<sep_out_sample>>>
cmp %ecx,%edi
jge 13 <func1+0x13>
mov %edi,%r9d
imul %ecx,%r9d
add %esi,%r9d
sub %r8d,%r9d
jmp 1d <func1+0x1d>
mov %esi,%r9d
imul %esi,%r9d
add %edi,%r9d
cmp %r8d,%esi
jle 2c <func1+0x2c>
lea (%rcx,%rdi,1),%eax
imul %edi,%eax
add %edx,%eax
jmp 36 <func1+0x36>
mov %ecx,%eax
sub %esi,%eax
imul %edx,%eax
imul %edx,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a1 < a4)
    {
        v6 = a2 + (a1 * a4) - a5;
    }
    else
    {
        v6 = a1 + (a2 * a2);
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        if (a4 < a5)
        {
            v7 += (a1 - a4) - a3;
        }
        else
        {
            v7 += a1 - a1 + a3;
        }
    }
    if (a5 < a2)
    {
        v9 = a1 * (a4 + a1) + a3;
    }
    else
    {
        v9 = ((a4 - a2) * a3) * a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 24
12 24
13 26
14 26
15 26
16 26
17 30
18 30
19 30
20 30
21 32
22 32
23 32
24 32
25 32
26 32
27 33
<<<sep_out_sample>>>
lea (%rdi,%rdx,2),%eax
lea (%rsi,%r8,2),%edx
lea (%rdx,%rax,1),%eax
lea 0x2(%rcx,%rax,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a3 - a5;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += a3 + (a1 - a3);
    }
    v10 = a5 + a3 - a1 + a1;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 15
2 15
3 15
4 15
5 16
<<<sep_out_sample>>>
cmp %ecx,%edx
jle f <func1+0xf>
mov %ecx,%eax
imul %esi,%eax
add %edi,%eax
sub %ecx,%eax
jmp 16 <func1+0x16>
lea 0x1(%rcx),%eax
imul %r8d,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a3 - a1;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        if (a2 < a3)
        {
            v8 += a2 + a2;
        }
        else
        {
            v8 += a2 - a1 - a3;
        }
    }
    if (a4 < a3)
    {
        v10 = a1 + a4 * a2 - a4;
    }
    else
    {
        v10 = a5 + a5 * a4;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 23
4 23
5 23
6 23
7 23
8 27
9 27
10 29
11 29
12 29
13 29
14 29
15 30
<<<sep_out_sample>>>
cmp %esi,%edx
jge 18 <func1+0x18>
mov %edx,%r9d
imul %edi,%r9d
mov %r8d,%eax
imul %r8d,%eax
imul %r9d,%eax
jmp 1e <func1+0x1e>
mov %r8d,%eax
imul %ecx,%eax
cmp %edx,%eax
jge 32 <func1+0x32>
lea (%rdx,%r8,1),%r9d
mov %esi,%r10d
imul %edi,%r10d
sub %r10d,%r9d
jmp 3d <func1+0x3d>
lea (%rdi,%rsi,1),%r9d
imul %edi,%r9d
add %esi,%r9d
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %r8d,%esi
add %ecx,%esi
add %esi,%eax
add %r9d,%eax
imul %r8d,%ecx
imul %edi,%ecx
imul %ecx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a3 < a2)
    {
        v6 = a3 * a1 * (a5 * a5);
    }
    else
    {
        v6 = a5 * a4;
    }
    if (v6 < a3)
    {
        v7 = a3 + a5 - a2 * a1;
    }
    else
    {
        v7 = a2 + ((a1 + a2) * a1);
    }
    v8 = (a5 * a4) * a1 * a1;
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        if (a4 < a4)
        {
            v9 += a1 + a5;
        }
        else
        {
            v9 += a2 - a4 - a5;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 6
9 10
10 10
11 12
12 12
13 14
14 14
15 14
16 14
17 14
18 18
19 18
20 18
21 33
22 33
23 33
24 33
25 33
26 33
27 20
28 20
29 20
30 33
31 34
<<<sep_out_sample>>>
mov %r8d,%r9d
imul %ecx,%r9d
sub %edx,%r9d
sub %r8d,%r9d
mov %ecx,%eax
sub %esi,%eax
cmp $0x1,%edx
jle 26 <func1+0x26>
mov %ecx,%r10d
imul %esi,%r10d
mov %edi,%eax
imul %r8d,%eax
add %r10d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a5 * a4 - a3 - a5;
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += (a2 - a2) - a3;
    }
    if (v8 < a3)
    {
        v9 = (a4 * a2) + a1 * a5;
    }
    else
    {
        v9 = a4 - a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 16
6 16
7 10
8 10
9 12
10 12
11 12
12 12
13 12
14 18
15 18
16 18
17 18
18 18
19 18
20 19
<<<sep_out_sample>>>
lea (%rdx,%rdx,1),%eax
mov %edx,%r10d
sub %edi,%r10d
cmp %edx,%ecx
cmovl %eax,%r10d
jle 21 <func1+0x21>
mov %edi,%r9d
imul %ecx,%r9d
imul %ecx,%r9d
add %edx,%r9d
jmp 2b <func1+0x2b>
mov %edi,%r9d
imul %esi,%r9d
sub %r8d,%r9d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a3 - a3;
    }
    if (a4 < a3)
    {
        v8 = a3 + a3;
    }
    else
    {
        v8 = a3 - a1;
    }
    if (a3 < a4)
    {
        v9 = a1 * a4 * a4 + a3;
    }
    else
    {
        v9 = (a1 * a2) - a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 11
5 11
6 17
7 19
8 19
9 19
10 19
11 19
12 23
13 23
14 23
15 25
16 25
17 25
18 25
19 25
20 25
21 26
<<<sep_out_sample>>>
lea 0x1(%rsi),%r9d
imul %edi,%r9d
test %r8d,%r8d
jle 16 <func1+0x16>
mov %esi,%r10d
imul %ecx,%r10d
jmp 22 <func1+0x22>
lea (%rdx,%rdi,1),%r10d
imul %edx,%r10d
imul %esi,%r10d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %r9d,%eax
add %r10d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += (a5 * a5) - a4;
    }
    v8 = a1 + a2 * a1;
    if (v6 < a5)
    {
        v9 = a2 * a4;
    }
    else
    {
        v9 = a3 * (a3 + a1) * a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 10
4 10
5 12
6 12
7 12
8 16
9 16
10 16
11 18
12 18
13 18
14 18
15 18
16 18
17 19
<<<sep_out_sample>>>
cmp %edi,%esi
jge 16 <func1+0x16>
mov %edx,%eax
imul %edi,%eax
mov %r8d,%r10d
sub %eax,%r10d
mov %r10d,%eax
sub %ecx,%eax
jmp 21 <func1+0x21>
mov %esi,%eax
imul %edi,%eax
imul %edi,%eax
imul %edx,%eax
cmp %ecx,%edx
jle 33 <func1+0x33>
mov %ecx,%r9d
sub %esi,%r9d
add %r8d,%r9d
add %ecx,%r9d
jmp 3a <func1+0x3a>
mov %r8d,%r9d
imul %ecx,%r9d
lea 0x1(%r9,%rdi,1),%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    if (a2 < a1)
    {
        v6 = a5 - a3 * a1 - a4;
    }
    else
    {
        v6 = a1 * (a2 * a1) * a3;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += (a4 * a4) * a4;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        v9 += a4 * a2 * a1;
    }
    if (a4 < a3)
    {
        v11 = a5 - (a2 - a4) + a4;
    }
    else
    {
        v11 = (a4 - a2 + a2) * a5;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 6
9 6
10 10
11 10
12 10
13 10
14 22
15 22
16 24
17 24
18 24
19 24
20 24
21 28
22 28
23 30
24 30
25 30
26 30
27 30
28 30
29 31
<<<sep_out_sample>>>
mov %esi,%eax
imul %ecx,%eax
imul %r8d,%eax
lea 0x1(%rdi,%rax,1),%eax
add %eax,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (a3 < a4)
        {
            v6 += (a5 - a1) - a2;
        }
        else
        {
            v6 += (a5 - a1) - a4;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        if (a5 < a4)
        {
            v8 += a4 * a5;
        }
        else
        {
            v8 += a4 + a1;
        }
    }
    v10 = a2 * a4 * a5;
    v11 = 0;
    for (v12 = 0; v12++; v12<a1)
    {
        v11 += (a2 - a3) + a4;
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 28
2 28
3 28
4 34
5 34
6 34
7 34
8 34
9 35
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
lea 0x1(%rcx,%r8,1),%eax
imul %esi,%edi
add %edi,%eax
sub %edx,%esi
imul %esi,%edx
imul %edx,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (v7 < a3)
        {
            v6 += a4 - a1 - a3;
        }
        else
        {
            v6 += a2 * a4;
        }
    }
    v8 = a2 * a1;
    v9 = ((a2 - a3) * a3) * a4;
    v10 = 0;
    for (v11 = 0; v11++; v11<a1)
    {
        v10 += a1 * a1;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 23
2 23
3 23
4 23
5 16
6 23
7 17
8 17
9 17
10 23
11 24
<<<sep_out_sample>>>
cmp %r8d,%esi
jge 11 <func1+0x11>
mov %ecx,%eax
imul %r8d,%eax
add %esi,%eax
add %edi,%eax
jmp 1f <func1+0x1f>
lea (%r8,%rdx,1),%eax
mov %r8d,%r9d
imul %edx,%r9d
sub %r9d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a2 < a5)
    {
        v6 = a2 + (a4 * a5) + a1;
    }
    else
    {
        v6 = (a5 + a3) - a5 * a3;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += a2 + a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 17
13 17
14 17
15 17
16 17
17 18
<<<sep_out_sample>>>
cmp %esi,%r8d
jle 13 <func1+0x13>
mov %r8d,%eax
imul %esi,%eax
imul %r8d,%eax
add %esi,%eax
jmp 1a <func1+0x1a>
mov %ecx,%eax
sub %r8d,%eax
add %ecx,%eax
cmp %ecx,%edi
jge 27 <func1+0x27>
add %edx,%ecx
imul %esi,%ecx
sub %edi,%ecx
jmp 37 <func1+0x37>
imul %edx,%ecx
imul %r8d,%ecx
mov %edx,%r9d
sub %ecx,%r9d
mov %r9d,%ecx
add %ecx,%edi
add %edi,%edx
add %edx,%esi
lea 0x1(%r8,%rsi,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a2 * (a5 * a1);
    }
    if (a1 < a1)
    {
        v8 = (a4 - a3) - a3 - a5;
    }
    else
    {
        v8 = a3 - a3 - a4;
    }
    if (a2 < a5)
    {
        v9 = (a5 * a2) * a5 + a2;
    }
    else
    {
        v9 = a4 + (a4 - a5);
    }
    if (a1 < a4)
    {
        v10 = a2 * (a4 + a3) - a1;
    }
    else
    {
        v10 = a3 - (a4 * a3) * a5;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 17
2 17
3 19
4 19
5 19
6 19
7 19
8 23
9 23
10 23
11 25
12 25
13 27
14 27
15 27
16 27
17 31
18 31
19 31
20 31
21 31
22 33
23 33
24 33
25 33
26 33
27 34
<<<sep_out_sample>>>
mov %esi,%eax
sub %edx,%eax
lea (%rcx,%rcx,1),%r9d
cmp $0x2,%esi
cmovl %r9d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea (%rdx,%rcx,2),%edx
lea 0x1(%rdx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a1 + (a4 - a4);
    }
    v8 = ((a3 - a4) + a4) + a4;
    if (v7 < a2)
    {
        v9 = a2 - a3;
    }
    else
    {
        v9 = a4 + a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 12
2 12
3 12
4 12
5 12
6 18
7 18
8 18
9 18
10 18
11 18
12 19
<<<sep_out_sample>>>
cmp %edx,%edi
jge d <func1+0xd>
mov %ecx,%r9d
imul %ecx,%r9d
jmp 16 <func1+0x16>
mov %ecx,%r9d
neg %r9d
sub %esi,%r9d
cmp %edi,%r9d
jge 28 <func1+0x28>
lea (%rcx,%rdx,1),%r10d
mov %esi,%eax
sub %edi,%eax
add %r10d,%eax
jmp 2e <func1+0x2e>
mov %r8d,%eax
imul %esi,%eax
cmp %ecx,%edi
jge 3f <func1+0x3f>
mov %ecx,%r10d
imul %esi,%r10d
imul %edi,%r10d
jmp 4c <func1+0x4c>
mov $0x1,%r10d
sub %esi,%r10d
imul %edi,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a1 < a3)
    {
        v6 = a4 * a4;
    }
    else
    {
        v6 = a2 - (a2 + a4) - a2;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        if (a5 < a4)
        {
            v7 += (a2 - a4) + a3;
        }
        else
        {
            v7 += a1 - a5 - a1;
        }
    }
    if (v6 < a1)
    {
        v9 = (a4 + a3) + (a2 - a1);
    }
    else
    {
        v9 = a5 * a2;
    }
    if (a1 < a4)
    {
        v10 = a4 * a2 * a1;
    }
    else
    {
        v10 = a1 - (a2 * a1);
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 24
10 24
11 26
12 26
13 26
14 26
15 26
16 30
17 30
18 32
19 32
20 34
21 34
22 34
23 34
24 38
25 38
26 38
27 40
28 40
29 40
30 40
31 40
32 40
33 40
34 41
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rcx,%rdx,2),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a3 + a3;
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        if (a4 < a3)
        {
            v7 += a3 - a2;
        }
        else
        {
            v7 += a4 - a5 + a3;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 17
6 18
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %edx,%r8d
lea (%rsi,%rcx,2),%eax
lea 0x1(%rax,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (a5 < a1)
        {
            v6 += (a5 - a1) * a4;
        }
        else
        {
            v6 += a3 - a5;
        }
    }
    v8 = a4 + a2;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 16
5 17
6 18
<<<sep_out_sample>>>
lea (%r8,%rdi,1),%eax
cmp %esi,%edi
jge 12 <func1+0x12>
mov %ecx,%eax
imul %esi,%eax
imul %edi,%eax
sub %esi,%eax
mov %ecx,%r9d
sub %edx,%r9d
imul %esi,%r9d
sub %r8d,%r9d
lea 0x1(%rdi,%r9,1),%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    if (a1 < a2)
    {
        v6 = (a4 * a2) * a1 - a2;
    }
    else
    {
        v6 = (a5 + a1 - a3) + a3;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a5 - a4 - a2;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        v9 += a3 * a5 + a5;
    }
    if (a3 < a3)
    {
        v11 = a1 - a3 - (a1 * a3);
    }
    else
    {
        v11 = (a4 - a3) * a2 - a5;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 6
7 6
8 28
9 28
10 28
11 28
12 30
13 30
14 30
15 30
16 30
17 30
18 31
<<<sep_out_sample>>>
test %r8d,%r8d
jle 10 <func1+0x10>
mov %esi,%eax
sub %edi,%eax
imul %edi,%eax
add %esi,%eax
jmp 1c <func1+0x1c>
mov %ecx,%eax
imul %edx,%eax
imul %esi,%eax
imul %r8d,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (a2 < a5)
        {
            v6 += (a4 * a5) + a3;
        }
        else
        {
            v6 += a1 + a3 * a5;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += a1 - a5;
    }
    if (v6 < a5)
    {
        v10 = a2 + (a2 - a1) * a1;
    }
    else
    {
        v10 = a4 * a3 * a2 * a5;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 23
4 23
5 23
6 23
7 23
8 27
9 27
10 27
11 27
12 29
13 29
14 29
15 29
16 29
17 30
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
mov %r8d,%r9d
imul %ecx,%r9d
add %edi,%r9d
add %r9d,%r8d
add %eax,%r8d
lea (%r8,%rsi,2),%eax
sub %edi,%ecx
imul %ecx,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = (a1 + a5 * a4) + a5;
    v7 = (a4 + a2) + a2 - a4;
    if (a4 < a4)
    {
        v8 = a4 + a1;
    }
    else
    {
        v8 = (a4 - a1) * a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 14
2 14
3 14
4 14
5 4
6 4
7 4
8 4
9 14
10 14
11 12
12 12
13 14
14 15
<<<sep_out_sample>>>
mov %edi,%r9d
imul %r8d,%r9d
imul %r8d,%r9d
add %ecx,%r9d
test %ecx,%ecx
jle 1e <func1+0x1e>
mov %ecx,%eax
imul %r8d,%eax
add %edx,%eax
add %edi,%eax
jmp 27 <func1+0x27>
mov %esi,%eax
imul %esi,%eax
add %edx,%eax
sub %esi,%eax
test %esi,%esi
jle 33 <func1+0x33>
mov %ecx,%r10d
sub %esi,%r10d
jmp 44 <func1+0x44>
mov $0x1,%r10d
sub %edi,%r10d
imul %esi,%r10d
imul %ecx,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a5 < a5)
    {
        v6 = a4 - a1 - a1 * a1;
    }
    else
    {
        v6 = a1 * a5 * a5 + a4;
    }
    if (v7 < a4)
    {
        v7 = a4 * a5 + a3 + a1;
    }
    else
    {
        v7 = (a3 + a2 * a2) - a2;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += a2 + a3 - a4;
    }
    if (v8 < a2)
    {
        v10 = a4 - a2;
    }
    else
    {
        v10 = a4 * (a2 - a1 * a2);
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 12
6 12
7 14
8 14
9 14
10 14
11 14
12 18
13 18
14 18
15 18
16 25
17 25
18 27
19 27
20 27
21 31
22 31
23 31
24 31
25 33
26 33
27 33
28 33
29 33
30 33
31 33
32 34
<<<sep_out_sample>>>
lea (%rcx,%rdi,1),%eax
cmp %esi,%r8d
jge f <func1+0xf>
mov %edx,%eax
neg %eax
imul %edx,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a5 < a2)
    {
        v6 = (a4 - a3 - a4) * a3;
    }
    else
    {
        v6 = a4 + a1;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += (a3 * a4) + a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 6
7 17
8 17
9 17
10 17
11 17
12 18
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
add %ecx,%esi
imul %r8d,%edi
imul %edi,%ecx
add %ecx,%r8d
lea 0x1(%rsi,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a5 + a4 * (a5 * a1);
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        if (a2 < a1)
        {
            v7 += a4 * a2 + a4;
        }
        else
        {
            v7 += a3 - a3 + a4;
        }
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        if (v6 < a5)
        {
            v9 += a3 - (a5 - a2);
        }
        else
        {
            v9 += a1 - a4;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 29
2 29
3 29
4 29
5 4
6 4
7 4
8 29
9 30
<<<sep_out_sample>>>
mov %r8d,%eax
sub %esi,%eax
add %edi,%eax
add %edx,%eax
add %esi,%eax
add %eax,%r8d
add %r8d,%ecx
mov %edx,%eax
sub %esi,%eax
add %edi,%eax
add %ecx,%eax
sub %edx,%eax
sub %edi,%eax
add $0x1,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a3 - a2 + a1;
    v7 = (a1 - a1) - a1 - a3;
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += a1 - a4 - a2;
    }
    v10 = a5 - a2;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 12
4 12
5 12
6 12
7 12
8 4
9 4
10 4
11 12
12 5
13 12
14 12
15 13
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%esi
add %r8d,%edi
imul %edi,%ecx
sub %edx,%ecx
lea (%rsi,%rcx,1),%eax
sub %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a4 * a5 + a3;
    }
    if (a5 < a5)
    {
        v8 = a4 * a2 + (a4 * a5);
    }
    else
    {
        v8 = (a5 + a1) * a4 - a3;
    }
    v9 = ((a1 - a1) * a5) - a3;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 18
5 15
6 15
7 15
8 18
9 18
10 19
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (a5 < a4)
        {
            v6 += a2 - a5 + a4;
        }
        else
        {
            v6 += a2 * a4;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += (a2 - a4) - a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 21
5 22
<<<sep_out_sample>>>
test %ecx,%ecx
jle 13 <func1+0x13>
mov %ecx,%r9d
imul %ecx,%r9d
add %edx,%r9d
add %ecx,%r9d
jmp 20 <func1+0x20>
mov %edi,%r9d
imul %edi,%r9d
add %r8d,%r9d
sub %edi,%r9d
mov %ecx,%eax
sub %edx,%eax
lea (%rcx,%r8,1),%r10d
test %edx,%edx
cmovle %r10d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (v6 < a4)
    {
        v6 = a3 + (a4 * a4) + a4;
    }
    else
    {
        v6 = a5 + a1 * a1 - a1;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += (a4 - a2) + a4;
    }
    if (v7 < a3)
    {
        v9 = a4 - a3;
    }
    else
    {
        v9 = (a4 + a4) + a5 - a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 19
13 19
14 19
15 19
16 19
17 25
18 25
19 25
20 25
21 25
22 25
23 26
<<<sep_out_sample>>>
add %edi,%edx
lea (%rdx,%rsi,1),%eax
add %r8d,%eax
add %ecx,%eax
imul %edi,%edx
add %r8d,%edx
add %edx,%eax
lea (%r8,%rdi,2),%edx
add %edx,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a5 + (a3 + a1) * a1;
    v7 = a1 + (a5 + a1) + a4;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 6
3 6
4 6
5 4
6 4
7 6
8 5
9 5
10 6
11 7
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %eax,%ecx
mov %r8d,%eax
sub %edi,%eax
sub %esi,%eax
add %eax,%r8d
lea (%rcx,%r8,1),%eax
sub %esi,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a5 - (a1 - a5 + a2);
    v7 = a1 - (a1 + a2) + a1;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 4
7 4
8 4
9 6
10 5
11 6
12 7
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %edx,%r8d
imul %ecx,%r8d
add %r8d,%edx
add %edx,%eax
imul %ecx,%ecx
sub %ecx,%edi
add %edi,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = (a3 + a5) * a4 + a3;
    v7 = a1 - a4 * a4 + a2;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 4
7 4
8 6
9 5
10 5
11 5
12 6
13 7
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a3 - (a5 - a1);
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += a5 - (a1 + a2);
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a5)
    {
        if (a4 < a3)
        {
            v10 += (a4 + a2) + a5;
        }
        else
        {
            v10 += a3 - a3;
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 26
2 26
3 26
4 26
5 27
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %ecx,%edi
imul %edx,%edx
add %edi,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a1 + a2;
    }
    v8 = (a1 + a4) + a3 * a3;
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        if (a5 < a2)
        {
            v9 += a5 + a2 + a4;
        }
        else
        {
            v9 += (a3 + a5) + a5;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 22
4 22
5 9
6 9
7 9
8 22
9 23
<<<sep_out_sample>>>
cmp %edi,%ecx
jge 14 <func1+0x14>
mov %ecx,%r10d
imul %ecx,%r10d
imul %esi,%r10d
add %r8d,%r10d
jmp 23 <func1+0x23>
mov %ecx,%eax
imul %r8d,%eax
mov %edi,%r10d
sub %eax,%r10d
sub %edx,%r10d
cmp %r8d,%esi
jle 38 <func1+0x38>
mov %edx,%r9d
imul %ecx,%r9d
imul %ecx,%r9d
sub %esi,%r9d
jmp 43 <func1+0x43>
lea (%rdi,%r8,1),%r9d
imul %edx,%r9d
sub %esi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a4 < a1)
    {
        v6 = a5 + a4 * a4 * a2;
    }
    else
    {
        v6 = a1 - (a4 * a5) - a3;
    }
    if (a5 < a2)
    {
        v7 = (a3 * a4) * a4 - a2;
    }
    else
    {
        v7 = ((a1 + a5) * a3) - a2;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 10
13 12
14 12
15 14
16 14
17 14
18 14
19 14
20 18
21 18
22 18
23 20
24 20
25 20
26 20
27 20
28 20
29 21
<<<sep_out_sample>>>
cmp %edi,%ecx
jge d <func1+0xd>
lea 0x1(%rdx),%eax
imul %r8d,%eax
jmp 12 <func1+0x12>
mov %edx,%eax
imul %edx,%eax
lea 0x1(%rdi,%rdx,1),%edi
add %esi,%edi
add %edi,%r8d
add %ecx,%r8d
lea 0x1(%rax,%r8,1),%eax
sub %ecx,%esi
sub $0x1,%esi
imul %esi,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    if (a4 < a1)
    {
        v6 = a5 * a3 + a5;
    }
    else
    {
        v6 = a3 * a3;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        if (a4 < a1)
        {
            v7 += a3 - a1;
        }
        else
        {
            v7 += a5 + a3;
        }
    }
    v9 = (a2 - a4) * a3 - a3;
    v10 = 0;
    for (v11 = 0; v11++; v11<a4)
    {
        v10 += (a2 - a3) * a3;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 30
9 30
10 30
11 30
12 30
13 24
14 24
15 24
16 30
17 31
<<<sep_out_sample>>>
lea (%rsi,%rdx,1),%eax
mov %edi,%r9d
imul %edx,%r9d
sub %r9d,%eax
cmp %r8d,%edi
jge 18 <func1+0x18>
lea (%rdi,%rdi,1),%r9d
jmp 2b <func1+0x2b>
mov %ecx,%r9d
imul %r8d,%r9d
mov %edi,%r11d
sub %r9d,%r11d
mov %r11d,%r9d
add %esi,%r9d
lea 0x1(%rdi,%rdx,1),%r10d
add %r10d,%esi
add %esi,%r8d
add %ecx,%r8d
add %r8d,%eax
add %r9d,%eax
lea -0x1(%rdi,%rcx,1),%ecx
imul %ecx,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a4 < a4)
    {
        v6 = a4 + a5;
    }
    else
    {
        v6 = (a2 + a3) - a1 * a3;
    }
    if (a1 < a5)
    {
        v7 = a3 + a1 - a3 + a1;
    }
    else
    {
        v7 = (a1 - (a4 * a5)) + a2;
    }
    v8 = (a4 + a1) * a3 - a3;
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        v9 += a3 + a4 * a1;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 12
6 12
7 14
8 14
9 18
10 18
11 18
12 18
13 18
14 18
15 26
16 26
17 26
18 26
19 26
20 26
21 20
22 20
23 26
24 27
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %r8d,%esi
add %esi,%ecx
add %edx,%r8d
imul %edx,%r8d
imul %r8d,%edx
lea 0x1(%rcx,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a3 * (a5 + a3) * a3;
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += (a1 - a5) * a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 4
6 4
7 4
8 10
9 11
<<<sep_out_sample>>>
add %edx,%edi
add %esi,%edi
add %edi,%r8d
lea (%r8,%rcx,1),%edi
sub %edx,%ecx
lea (%rcx,%rsi,2),%eax
lea 0x1(%rdi,%rax,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a4 < a4)
    {
        v6 = a2 + a1;
    }
    else
    {
        v6 = a2 - (a3 - a4 - a2);
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        if (v8 < a5)
        {
            v7 += a4 - a1 * a2;
        }
        else
        {
            v7 += (a3 - a1) - a5;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 24
2 24
3 24
4 24
5 10
6 10
7 24
8 25
<<<sep_out_sample>>>
mov %ecx,%eax
sub %r8d,%eax
cmp %ecx,%edi
jge 12 <func1+0x12>
mov %edi,%eax
imul %edx,%eax
add %esi,%eax
add %edi,%eax
cmp %r8d,%edi
jle 22 <func1+0x22>
mov %edx,%r9d
sub %ecx,%r9d
add %edi,%r9d
jmp 29 <func1+0x29>
mov %edi,%r9d
imul %edx,%r9d
lea (%rdi,%rdx,1),%r10d
add %esi,%r10d
add %r10d,%r8d
add %r8d,%ecx
add %ecx,%eax
lea (%rax,%r9,1),%ecx
sub %edx,%esi
sub %edx,%esi
sub %edi,%esi
lea (%rcx,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a1 < a4)
    {
        v6 = (a1 * a3) + a2 + a1;
    }
    else
    {
        v6 = (a4 - (a4 - a4)) - a5;
    }
    if (a5 < a1)
    {
        v7 = a3 - a4 + a1;
    }
    else
    {
        v7 = a1 * a3;
    }
    v8 = a2 - a3 - a3 - a1;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 4
4 4
5 6
6 6
7 6
8 6
9 12
10 12
11 14
12 14
13 14
14 14
15 18
16 18
17 21
18 21
19 21
20 21
21 21
22 21
23 20
24 20
25 20
26 21
27 22
<<<sep_out_sample>>>
test %ecx,%ecx
jle 11 <func1+0x11>
mov %r8d,%eax
imul %edi,%eax
sub %edx,%eax
imul %edi,%eax
jmp 16 <func1+0x16>
mov %esi,%eax
imul %esi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a2 + (a2 + a2);
    }
    if (v6 < a4)
    {
        v8 = a1 * (a5 * a1 - a3);
    }
    else
    {
        v8 = a2 * a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 11
8 15
9 15
10 17
11 17
12 17
13 17
14 17
15 18
<<<sep_out_sample>>>
lea (%rsi,%r8,1),%r11d
mov %edi,%eax
imul %edx,%eax
mov %r8d,%r10d
sub %eax,%r10d
add %r8d,%r10d
cmp %edi,%esi
jge 21 <func1+0x21>
mov %edi,%r9d
sub %edx,%r9d
add %r8d,%r9d
jmp 28 <func1+0x28>
lea (%rdx,%rcx,2),%r9d
sub %esi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a2 + (a3 - a3 + a5);
    v7 = a5 - (a1 * a3) + a5;
    if (a2 < a1)
    {
        v8 = a5 - (a3 - a1);
    }
    else
    {
        v8 = (a4 + a4 + a3) - a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 5
3 5
4 5
5 5
6 5
7 6
8 6
9 8
10 8
11 8
12 8
13 12
14 12
15 14
16 14
17 14
18 14
19 14
20 14
21 14
22 15
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
lea 0x1(%rsi,%r8,2),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a5 - a4;
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += (a2 * a3) * a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 11
<<<sep_out_sample>>>
mov %edi,%eax
sub %ecx,%eax
lea (%rdx,%rcx,1),%r9d
cmp %edx,%ecx
cmovge %r9d,%eax
add %edi,%edx
add %edx,%esi
add %r8d,%esi
add %esi,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a4 < a3)
    {
        v6 = (a1 - a3) - a4 + a3;
    }
    else
    {
        v6 = a3 + a4;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += a4 * a1 * a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 6
6 17
7 17
8 17
9 17
10 17
11 18
<<<sep_out_sample>>>
cmp %esi,%ecx
jge 10 <func1+0x10>
mov %edi,%r9d
sub %edx,%r9d
mov %edx,%eax
sub %ecx,%eax
jmp 25 <func1+0x25>
mov %ecx,%r9d
sub %edi,%r9d
imul %edx,%r9d
add %esi,%r9d
mov %edi,%eax
imul %r8d,%eax
add %esi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a4 < a2)
    {
        v6 = a1 + a3 - a3 - a3;
    }
    else
    {
        v6 = a3 * (a4 - a1) + a2;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += a5 * a5;
    }
    if (a4 < a2)
    {
        v9 = a3 - a4;
    }
    else
    {
        v9 = a2 + a1 * a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 19
6 19
7 19
8 10
9 10
10 10
11 10
12 23
13 23
14 23
15 25
16 25
17 25
18 25
19 25
20 25
21 26
<<<sep_out_sample>>>
mov %r8d,%r10d
sub %edx,%r10d
mov %esi,%r9d
imul %esi,%r9d
mov %r8d,%eax
sub %esi,%eax
mov %ecx,%r11d
imul %edx,%r11d
cmp %esi,%edx
cmovg %r11d,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r10d,%ecx
add %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a5 - a3;
    if (a4 < a4)
    {
        v7 = (a2 - a5) * (a5 + a3);
    }
    else
    {
        v7 = a2 * a2;
    }
    if (a2 < a3)
    {
        v8 = a5 + a4 * a3 - a5;
    }
    else
    {
        v8 = a5 - (a5 - a5 + a2);
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a1)
    {
        v9 += a5 - a4 - a2;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 11
4 11
5 19
6 19
7 15
8 15
9 15
10 15
11 26
12 26
13 26
14 26
15 26
16 26
17 26
18 27
<<<sep_out_sample>>>
lea 0x2(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
lea 0x1(%rcx,%rax,1),%edx
lea (%rdi,%rsi,2),%eax
lea (%rax,%r8,1),%eax
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a2 + a4;
    }
    if (a4 < a4)
    {
        v8 = a5 * a3 + a2 - a3;
    }
    else
    {
        v8 = a5 + a2 + (a2 + a1);
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        if (a4 < a2)
        {
            v9 += a4 - a3;
        }
        else
        {
            v9 += (a4 + a4) - a2;
        }
    }
    v11 = 0;
    for (v12 = 0; v12++; v12<a1)
    {
        if (a3 < a1)
        {
            v11 += a2 - a1 - a2;
        }
        else
        {
            v11 += a3 * a2;
        }
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 41
2 41
3 41
4 41
5 15
6 15
7 41
8 42
<<<sep_out_sample>>>
push %rbx
mov %edx,%r9d
sub %r8d,%r9d
cmp %esi,%r8d
jge 16 <func1+0x16>
lea (%rdx,%rdx,1),%r9d
sub %esi,%r9d
add %r8d,%r9d
mov %ecx,%ebx
sub %r8d,%ebx
cmp %r8d,%r9d
jge 2d <func1+0x2d>
lea -0x1(%rcx),%r10d
imul %edx,%r10d
add %ecx,%r10d
jmp 36 <func1+0x36>
lea 0x1(%rdi,%r8,1),%r10d
imul %esi,%r10d
cmp %r8d,%r10d
jge 44 <func1+0x44>
lea (%rdx,%rdi,2),%r11d
add %ecx,%r11d
jmp 50 <func1+0x50>
lea (%rsi,%rdx,1),%eax
mov %r8d,%r11d
sub %eax,%r11d
add %ecx,%r11d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
add %ebx,%r9d
add %r9d,%r10d
lea (%r10,%r11,1),%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a5 < a2)
    {
        v6 = a3 + a3 - a2 + a5;
    }
    else
    {
        v6 = a3 - a5;
    }
    v7 = a4 - (a5 + a4) + a4;
    if (v6 < a5)
    {
        v8 = a4 * a3 - a3 + a4;
    }
    else
    {
        v8 = a2 * (a5 + a1) + a2;
    }
    if (v8 < a5)
    {
        v9 = (a3 + a1 + a1) + a4;
    }
    else
    {
        v9 = a5 - (a2 + a3) + a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 10
3 10
4 4
5 4
6 6
7 6
8 6
9 12
10 12
11 13
12 13
13 15
14 15
15 15
16 15
17 19
18 19
19 21
20 21
21 23
22 23
23 23
24 27
25 27
26 27
27 27
28 29
29 29
30 29
31 29
32 29
33 29
34 29
35 29
36 30
37 30
<<<sep_out_sample>>>
mov %edx,%eax
neg %eax
cmp %edi,%ecx
jge 11 <func1+0x11>
mov %esi,%eax
sub %edi,%eax
add %ecx,%eax
sub %r8d,%eax
lea (%rdi,%rdx,1),%r9d
add %esi,%r9d
add %r8d,%r9d
add %ecx,%r9d
add %r9d,%eax
mov %edi,%r10d
sub %edx,%r10d
mov %r10d,%edx
imul %edi,%edx
sub %r8d,%edx
add %eax,%edx
imul %esi,%edi
sub %r8d,%edi
sub %ecx,%edi
lea (%rdx,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a4 < a1)
    {
        v6 = a4 - (a1 - a2) - a5;
    }
    else
    {
        v6 = a5 - a3 - a5;
    }
    v7 = ((a1 - a3) * a1) - a5;
    v8 = a2 * a1 - a5 - a4;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 4
4 4
5 6
6 6
7 6
8 6
9 14
10 14
11 14
12 14
13 14
14 12
15 12
16 12
17 12
18 12
19 14
20 13
21 13
22 13
23 14
24 15
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
mov %edx,%r9d
sub %ecx,%r9d
sub %ecx,%r9d
add %r9d,%r8d
add %eax,%r8d
add $0x1,%edx
imul %edx,%esi
add %esi,%edi
lea 0x1(%r8,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = (a3 - a4 - a4) + a5;
    v7 = (a3 * a2) + a2 + a1;
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        if (a5 < a4)
        {
            v8 += (a4 - a4) + a3;
        }
        else
        {
            v8 += a5 - a3;
        }
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a1)
    {
        if (v8 < a2)
        {
            v10 += a3 + a5;
        }
        else
        {
            v10 += a4 + (a1 + a3);
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 30
2 30
3 30
4 30
5 4
6 4
7 4
8 4
9 30
10 5
11 5
12 5
13 30
14 31
<<<sep_out_sample>>>
lea (%r8,%r8,1),%eax
add %edx,%edi
add %edi,%esi
add %r8d,%esi
add %ecx,%esi
add %eax,%esi
imul %ecx,%eax
add %eax,%esi
mov %r8d,%edi
imul %ecx,%edi
add %edi,%esi
sub %r8d,%ecx
add %ecx,%edx
sub %r8d,%edx
lea (%rsi,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a5 + a5;
    v7 = a5 * a4 + a5 * a4;
    v8 = a5 * a4;
    v9 = a3 - (a5 - a4) - a5;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 8
3 8
4 8
5 8
6 8
7 5
8 8
9 6
10 6
11 8
12 7
13 7
14 7
15 8
16 9
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
mov %edi,%ecx
sub %esi,%ecx
sub %r8d,%edi
add %edi,%eax
lea 0x1(%rcx),%ecx
imul %ecx,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a1 - a2 - a5 + a2;
    v7 = a3 + a3 * (a1 - a2);
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 4
7 4
8 6
9 5
10 5
11 6
12 7
<<<sep_out_sample>>>
lea (%r8,%rsi,1),%eax
cmp %edi,%edx
jg 19 <func1+0x19>
mov %edi,%eax
imul %r8d,%eax
mov %esi,%r9d
sub %eax,%r9d
mov %r9d,%eax
add %ecx,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (v7 < a4)
        {
            v6 += (a4 + a5) + a5;
        }
        else
        {
            v6 += a3 + a5;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += a2 + a1;
    }
    if (a1 < a3)
    {
        v10 = a5 + a2;
    }
    else
    {
        v10 = a2 - (a1 * a5) + a4;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 23
2 21
3 21
4 27
5 27
6 27
7 27
8 27
9 27
10 29
11 29
12 29
13 29
14 29
15 30
<<<sep_out_sample>>>
cmp %edi,%r8d
jge b <func1+0xb>
mov %esi,%eax
sub %edi,%eax
jmp 16 <func1+0x16>
mov %r8d,%eax
imul %ecx,%eax
imul %ecx,%eax
add %edx,%eax
test %esi,%esi
jle 23 <func1+0x23>
mov %edi,%r9d
imul %edx,%r9d
jmp 2d <func1+0x2d>
mov %esi,%r9d
imul %esi,%r9d
sub %edi,%r9d
lea 0x1(%r9,%rdi,1),%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    if (a5 < a1)
    {
        v6 = a2 - a1;
    }
    else
    {
        v6 = a5 * a4 * a4 + a3;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += a1 - a2 + a1;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a1)
    {
        if (a5 < a4)
        {
            v9 += a3 - a4 - a4;
        }
        else
        {
            v9 += a2 * a4;
        }
    }
    if (v9 < a2)
    {
        v11 = a1 * a3;
    }
    else
    {
        v11 = (a2 * a2) - a1;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 10
10 29
11 29
12 31
13 31
14 31
15 35
16 35
17 35
18 37
19 37
20 37
21 37
22 37
23 37
24 38
<<<sep_out_sample>>>
test %ecx,%ecx
jle 10 <func1+0x10>
lea (%r8,%rsi,1),%eax
imul %edi,%eax
imul %edx,%eax
jmp 1a <func1+0x1a>
mov %edx,%eax
imul %esi,%eax
add %ecx,%eax
imul %ecx,%eax
add %edx,%edi
add %edi,%esi
add %r8d,%esi
add %esi,%ecx
lea 0x1(%rax,%rcx,1),%eax
imul %r8d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (v6 < a4)
    {
        v6 = (a5 + a2) * a1 * a3;
    }
    else
    {
        v6 = (a4 + a3 * a2) * a4;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        if (a3 < a3)
        {
            v7 += a2 - a4;
        }
        else
        {
            v7 += a2 + a4;
        }
    }
    v9 = a3 * a5;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 10
11 25
12 25
13 25
14 25
15 25
16 24
17 25
18 26
<<<sep_out_sample>>>
test %r8d,%r8d
jle e <func1+0xe>
lea (%rdx,%rsi,2),%eax
lea (%rax,%rcx,1),%r9d
jmp 1b <func1+0x1b>
mov %r8d,%r9d
imul %edi,%r9d
add %edx,%r9d
add %esi,%r9d
mov $0x0,%eax
cmp %edx,%esi
jg 31 <func1+0x31>
lea (%rdi,%rsi,1),%eax
mov %r8d,%r10d
imul %ecx,%r10d
sub %r10d,%eax
lea 0x1(%rdi,%rdx,1),%r10d
add %esi,%r10d
add %r10d,%r8d
add %r8d,%ecx
add %r9d,%ecx
add %ecx,%eax
imul %esi,%edi
add %edi,%edx
add %edx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (v6 < a5)
    {
        v6 = (a4 + a2 + a3) + a2;
    }
    else
    {
        v6 = (a3 + a5 * a1) + a2;
    }
    if (a3 < a2)
    {
        v7 = a3 + ((a2 - a2) - a3);
    }
    else
    {
        v7 = a1 + a2 - a5 * a4;
    }
    v8 = (a1 * a2 + a3) + a2;
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        v9 += a3 + (a5 * a3);
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 10
10 14
11 12
12 12
13 18
14 18
15 18
16 18
17 26
18 26
19 26
20 26
21 26
22 26
23 20
24 20
25 20
26 26
27 27
<<<sep_out_sample>>>
push %rbx
mov %esi,%r9d
imul %edx,%r9d
mov %r9d,%r10d
imul %r8d,%r10d
sub %edx,%r10d
lea (%rsi,%r8,1),%ebx
cmp %r10d,%edx
jle 26 <func1+0x26>
mov %r8d,%eax
sub %ecx,%eax
lea (%rax,%rdx,2),%r11d
jmp 34 <func1+0x34>
mov %ecx,%r11d
imul %esi,%r11d
imul %r8d,%r11d
sub %edx,%r11d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r10d
add %ebx,%r10d
add %r10d,%r9d
lea (%r9,%r11,1),%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a2 * a3 * a5 - a3;
    v7 = a2 + a5;
    v8 = a3 * (a2 - a3 + a3);
    if (v6 < a3)
    {
        v9 = a5 - a4 + a3 + a3;
    }
    else
    {
        v9 = (a4 * a2 * a5) - a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 4
3 4
4 4
5 4
6 4
7 5
8 7
9 7
10 9
11 9
12 9
13 9
14 13
15 13
16 13
17 13
18 15
19 15
20 15
21 15
22 15
23 15
24 15
25 15
26 16
27 16
<<<sep_out_sample>>>
add %edx,%edi
add %esi,%edi
add %r8d,%edi
add %ecx,%edi
mov %ecx,%eax
imul %edx,%eax
add %eax,%r8d
sub %edx,%r8d
lea (%rdi,%r8,1),%eax
not %esi
imul %esi,%edx
add %edx,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a5 < a5)
    {
        v6 = a5 - (a5 * a2);
    }
    else
    {
        v6 = ((a4 * a3) + a5) - a3;
    }
    v7 = a4 - (a3 + a3 * a2);
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 13
2 13
3 13
4 13
5 10
6 10
7 10
8 10
9 13
10 12
11 12
12 12
13 13
14 14
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %r8d,%esi
add %ecx,%esi
imul %r8d,%ecx
lea 0x1(%rsi,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a3 - a3 + a4 * a5;
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += a4 * a1 + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 4
6 10
7 11
<<<sep_out_sample>>>
test %edi,%edi
jle f <func1+0xf>
lea (%rdi,%rcx,1),%eax
imul %ecx,%eax
sub %r8d,%eax
jmp 16 <func1+0x16>
lea 0x1(%rsi,%rcx,1),%eax
imul %esi,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (v6 < a1)
    {
        v6 = ((a1 + a4) * a4) - a5;
    }
    else
    {
        v6 = (a4 + a2) * a2 + a2;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += a5 - (a4 + a4);
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a1)
    {
        v9 += a3 + a3 + a5;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 22
10 22
11 22
12 22
13 22
14 23
<<<sep_out_sample>>>
lea (%rsi,%rsi,1),%r11d
imul %r8d,%r11d
lea (%rdi,%rsi,1),%r10d
mov %edx,%r9d
cmp %edx,%esi
jl 20 <func1+0x20>
lea (%r8,%rsi,1),%eax
mov %edi,%r9d
sub %eax,%r9d
add %edx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a2 * a5 + a2 * a5;
    v7 = a1 + a2;
    if (a2 < a3)
    {
        v8 = a3 + a2 * (a4 - a4);
    }
    else
    {
        v8 = a3 - (a5 + a2 - a1);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 5
4 8
5 6
6 6
7 12
8 12
9 12
10 12
11 14
12 14
13 14
14 14
15 14
16 14
17 14
18 15
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %edx,%r8d
lea (%r8,%rcx,1),%edx
imul %esi,%edi
imul %ecx,%ecx
imul %edi,%ecx
lea 0x1(%rdx,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a2 * a1 * (a4 * a4);
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += a2 * (a5 - a2);
    }
    if (a3 < a3)
    {
        v9 = a3 + a3;
    }
    else
    {
        v9 = (a5 - a5) * (a5 * a4);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 18
5 4
6 4
7 4
8 18
9 19
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
add %ecx,%esi
mov %ecx,%eax
imul %ecx,%eax
imul %eax,%edi
add %edi,%edx
lea 0x1(%rsi,%rdx,1),%eax
add %r8d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a4 < a4)
    {
        v6 = (a3 * a3 + a1) * a2;
    }
    else
    {
        v6 = (a4 * a4 * a1) + a3;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        if (v6 < a4)
        {
            v7 += (a1 - a3) * a5;
        }
        else
        {
            v7 += a4 + a3 - a4;
        }
    }
    v9 = a4 + a5;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 25
2 25
3 25
4 25
5 10
6 10
7 10
8 10
9 25
10 24
11 25
12 26
<<<sep_out_sample>>>
cmp %edi,%esi
jge 11 <func1+0x11>
lea (%rdx,%r8,1),%r9d
imul %r8d,%r9d
sub %edi,%r9d
jmp 1f <func1+0x1f>
mov %edx,%r9d
imul %r8d,%r9d
imul %esi,%r9d
add %edx,%r9d
test %edi,%edi
jle 2e <func1+0x2e>
mov %edx,%eax
imul %edi,%eax
add %esi,%eax
sub %edi,%eax
jmp 34 <func1+0x34>
lea (%r8,%rdi,1),%eax
add %ecx,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
lea (%rcx,%r8,2),%eax
lea (%rax,%rsi,1),%eax
lea 0x1(%r9,%rax,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a1 < a1)
    {
        v6 = a2 + a5 * a5;
    }
    else
    {
        v6 = a5 + a4 * (a2 - a2);
    }
    if (a2 < a1)
    {
        v7 = (a3 + a5) * a5 - a1;
    }
    else
    {
        v7 = a3 + a3 * a5 * a2;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += a3 * a5 * a5;
    }
    if (v10 < a1)
    {
        v10 = a3 * a1 + a2 - a1;
    }
    else
    {
        v10 = (a5 + a1) + a4;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 12
2 12
3 14
4 14
5 14
6 14
7 18
8 18
9 18
10 18
11 25
12 25
13 27
14 27
15 27
16 27
17 27
18 31
19 31
20 33
21 33
22 33
23 33
24 33
25 33
26 34
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%r9d
add %esi,%r9d
add %r8d,%r9d
add %ecx,%r9d
lea (%rcx,%rsi,1),%eax
sub %edi,%eax
add %r8d,%eax
add %r9d,%eax
sub %ecx,%r8d
sub %edx,%r8d
add %r8d,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a4 + a2 - a1 + a5;
    v7 = (a5 - a4) - a3 + a2;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 4
7 4
8 6
9 5
10 5
11 5
12 6
13 7
<<<sep_out_sample>>>
test %ecx,%ecx
jle c <func1+0xc>
lea 0x1(%rcx),%eax
imul %edx,%eax
jmp 19 <func1+0x19>
mov %edx,%eax
imul %r8d,%eax
imul %r8d,%eax
imul %esi,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (a4 < a1)
        {
            v6 += a1 * a2 * a3;
        }
        else
        {
            v6 += a4 + a3 - a4;
        }
    }
    if (v6 < a4)
    {
        v8 = a3 + (a4 * a3);
    }
    else
    {
        v8 = a2 * ((a3 * a5) * a5);
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        v9 += a1 + a2 + a5;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 22
7 22
8 22
9 22
10 29
11 29
12 29
13 29
14 29
15 30
<<<sep_out_sample>>>
lea (%rsi,%rdx,1),%eax
mov %edx,%r9d
sub %r8d,%r9d
test %esi,%esi
cmovg %eax,%r9d
cmp %ecx,%edi
jge 1b <func1+0x1b>
lea (%rdi,%rsi,1),%eax
imul %ecx,%eax
jmp 23 <func1+0x23>
mov %r8d,%eax
neg %eax
imul %ecx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (v6 < a2)
    {
        v6 = a2 + a3;
    }
    else
    {
        v6 = a3 - a5;
    }
    if (a1 < a4)
    {
        v7 = (a4 * a1) + a2 * a4;
    }
    else
    {
        v7 = a4 * (a2 - a5 - a2);
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += a2 * a2 * a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 6
6 12
7 12
8 14
9 14
10 14
11 18
12 18
13 18
14 25
15 25
16 25
17 25
18 25
19 25
20 26
<<<sep_out_sample>>>
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea (%r8,%rcx,1),%esi
mov $0x1,%eax
sub %edi,%eax
imul %eax,%ecx
sub %edi,%ecx
lea 0x1(%rsi,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a4 - a4 * a1 - a1;
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        if (v7 < a1)
        {
            v7 += (a2 + a1) * a3;
        }
        else
        {
            v7 += a2 - a2 * a2;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 4
6 4
7 4
8 4
9 17
10 18
<<<sep_out_sample>>>
mov %r8d,%r10d
sub %ecx,%r10d
cmp %esi,%edi
jle 18 <func1+0x18>
lea 0x1(%rdi),%r9d
imul %edx,%r9d
imul %r8d,%r9d
jmp 25 <func1+0x25>
mov %edx,%r9d
sub %ecx,%r9d
imul %edi,%r9d
add %r8d,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = (a5 + a1) - a4 - a1;
    if (a2 < a1)
    {
        v7 = ((a1 * a3) + a3) * a5;
    }
    else
    {
        v7 = a1 * (a3 - a4) + a5;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 5
4 5
5 7
6 7
7 7
8 7
9 11
10 11
11 11
12 11
13 13
14 13
15 13
16 13
17 13
18 13
19 14
<<<sep_out_sample>>>
lea (%rdx,%r8,1),%r9d
cmp %edx,%ecx
jle 15 <func1+0x15>
mov %edx,%eax
imul %edi,%eax
imul %esi,%eax
imul %edi,%eax
jmp 1c <func1+0x1c>
lea (%rdx,%r9,1),%eax
sub %r8d,%eax
lea (%r8,%rcx,1),%r10d
cmp %edx,%edi
jle 30 <func1+0x30>
mov %edi,%r10d
sub %esi,%r10d
sub %ecx,%r10d
add %edx,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%r9d
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += (a4 * a1) * a1;
    }
    v8 = a3 + a5;
    if (a3 < a4)
    {
        v9 = ((a3 * a1) * a2) * a1;
    }
    else
    {
        v9 = a5 + a3 + a3 - a5;
    }
    if (a3 < a1)
    {
        v10 = a1 - a2 - a4 + a3;
    }
    else
    {
        v10 = a5 + a4;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 10
3 10
4 12
5 12
6 12
7 12
8 12
9 16
10 16
11 24
12 18
13 18
14 20
15 20
16 20
17 20
18 26
19 26
20 26
21 26
22 26
23 26
24 26
25 27
<<<sep_out_sample>>>
mov %edi,%r9d
imul %r8d,%r9d
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a4 - a1;
    }
    v8 = a4 - (a4 - a1 * a5);
    v9 = 0;
    for (v10 = 0; v10++; v10<a1)
    {
        if (v9 < a4)
        {
            v9 += a5 - a5 + a1;
        }
        else
        {
            v9 += a3 - a3;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 22
4 22
5 22
6 22
7 22
8 23
<<<sep_out_sample>>>
cmp %ecx,%edx
jge 12 <func1+0x12>
mov %edx,%r9d
sub %r8d,%r9d
sub %edi,%r9d
add %ecx,%r9d
jmp 19 <func1+0x19>
mov %edi,%r9d
imul %edi,%r9d
cmp %edx,%r9d
jge 29 <func1+0x29>
mov %ecx,%eax
imul %edx,%eax
sub %esi,%eax
sub %edx,%eax
jmp 32 <func1+0x32>
mov %esi,%eax
sub %edi,%eax
imul %esi,%eax
sub %ecx,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%r9d
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (a3 < a1)
        {
            v6 += (a5 + a2) + a5;
        }
        else
        {
            v6 += a3 - a4 * a4;
        }
    }
    if (a3 < a4)
    {
        v8 = ((a3 - a5) - a1) + a4;
    }
    else
    {
        v8 = a1 * a1;
    }
    if (v8 < a3)
    {
        v9 = (a4 * a3 - a2) - a3;
    }
    else
    {
        v9 = ((a2 - a1) * a2) - a4;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a4)
    {
        if (v10 < a1)
        {
            v10 += a5 * a2 + a1;
        }
        else
        {
            v10 += a4 * a2;
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 18
7 18
8 22
9 22
10 24
11 24
12 26
13 26
14 26
15 26
16 26
17 30
18 30
19 30
20 30
21 44
22 44
23 44
24 44
25 44
26 44
27 45
<<<sep_out_sample>>>
test %edi,%edi
jle f <func1+0xf>
lea (%rcx,%r8,1),%eax
add %esi,%eax
imul %edx,%eax
jmp 18 <func1+0x18>
lea (%rdx,%rdi,1),%eax
imul %edi,%eax
add %r8d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (v6 < a1)
    {
        v6 = (a4 + a5 + a2) * a3;
    }
    else
    {
        v6 = (a3 + a1) * a1 + a5;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += (a4 - a5) - a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 17
11 17
12 17
13 17
14 17
15 18
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
imul %edx,%r8d
add %r8d,%eax
sub %ecx,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a3 * a5;
    v7 = (a2 - a2) + a3 - a4;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 6
7 5
8 6
9 7
<<<sep_out_sample>>>
lea (%rsi,%rdx,1),%r9d
mov %edi,%eax
imul %ecx,%eax
add %eax,%r9d
mov %r8d,%eax
imul %r8d,%eax
imul %ecx,%eax
mov %edx,%r11d
sub %eax,%r11d
mov %r11d,%eax
cmp $0x1,%edi
jle 38 <func1+0x38>
mov %esi,%r11d
imul %ecx,%r11d
mov %r8d,%r10d
imul %edi,%r10d
imul %r11d,%r10d
jmp 48 <func1+0x48>
mov $0x1,%r10d
sub %ecx,%r10d
imul %edx,%r10d
add %esi,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = (a2 + a3) + a1 * a4;
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += a4 * a1 * a1;
    }
    v9 = a3 - (a5 * a5) * a4;
    if (v8 < a1)
    {
        v10 = (a2 * a4) * (a5 * a1);
    }
    else
    {
        v10 = a2 - ((a3 * a4) - a3);
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 10
6 10
7 10
8 10
9 10
10 10
11 11
12 11
13 13
14 13
15 13
16 13
17 13
18 13
19 17
20 17
21 17
22 17
23 19
24 19
25 19
26 19
27 19
28 19
29 19
30 20
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %edx,%r8d
lea 0x1(%rcx,%r8,1),%eax
imul %esi,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a2 + (a3 - a4);
    }
    v8 = a1 * a2;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 9
6 10
7 11
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %eax,%ecx
lea (%rsi,%rdi,1),%eax
imul %esi,%eax
add %eax,%r8d
lea (%rcx,%r8,1),%eax
add %edx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a3 < a3)
    {
        v6 = a3 + a2;
    }
    else
    {
        v6 = a5 + a2 * (a2 + a1);
    }
    v7 = ((a2 - a4) + a4) + a3;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 13
2 13
3 13
4 13
5 10
6 10
7 10
8 13
9 12
10 13
11 14
<<<sep_out_sample>>>
lea (%rdi,%rsi,1),%r10d
mov %edi,%eax
imul %esi,%eax
add %eax,%r10d
cmp %edx,%edi
jge 1b <func1+0x1b>
lea -0x1(%rsi,%r8,1),%r9d
imul %ecx,%r9d
jmp 22 <func1+0x22>
mov %edx,%r9d
imul %edx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = (a1 + a2) + (a1 * a2);
    if (a1 < a3)
    {
        v7 = (a5 + a2) * a4 - a4;
    }
    else
    {
        v7 = ((a1 - a1) + a3) * a3;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 5
6 5
7 7
8 7
9 7
10 11
11 11
12 13
13 13
14 13
15 13
16 13
17 13
18 14
<<<sep_out_sample>>>
cmp %ecx,%r8d
jge 16 <func1+0x16>
mov %edx,%r9d
imul %ecx,%r9d
imul %esi,%r9d
imul %esi,%r9d
jmp 22 <func1+0x22>
lea (%rdx,%rcx,1),%r9d
mov %ecx,%eax
imul %edi,%eax
add %eax,%r9d
lea (%rcx,%rdx,1),%eax
mov %edi,%r10d
imul %r8d,%r10d
cmp %ecx,%r9d
cmovl %r10d,%eax
lea (%rdi,%rdx,1),%r10d
add %r10d,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
add %r9d,%eax
sub %edi,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a5 < a4)
    {
        v6 = a3 * a4 * a2 * a2;
    }
    else
    {
        v6 = a3 + a4 + a4 * a1;
    }
    if (v6 < a4)
    {
        v7 = a1 * a5;
    }
    else
    {
        v7 = a4 + a3;
    }
    v8 = a3 - a3 + a3 - a1;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 18
13 14
14 14
15 14
16 14
17 21
18 21
19 21
20 21
21 21
22 21
23 20
24 21
25 22
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %eax,%ecx
imul %edx,%edi
add %edi,%r8d
sub %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = (a5 + a3 * a1) - a2;
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        if (v6 < a1)
        {
            v7 += (a3 + a2) - a4;
        }
        else
        {
            v7 += a3 * a4 + a4;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 4
6 4
7 4
8 17
9 18
<<<sep_out_sample>>>
mov %edx,%eax
cmp %r8d,%ecx
jl f <func1+0xf>
imul %ecx,%eax
imul %edx,%eax
add %esi,%eax
lea (%rdx,%r8,2),%r9d
imul %ecx,%r9d
add %r9d,%edi
add %edi,%edx
add %esi,%edx
add %edx,%r8d
add %ecx,%r8d
add %r8d,%eax
sub %esi,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a4 < a5)
    {
        v6 = a3 - (a4 - a4) * a5;
    }
    else
    {
        v6 = a2 + (a3 * (a3 * a4));
    }
    v7 = a4 - a2;
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += a4 - a5 * a1;
    }
    v10 = (a3 + a5 + a5) * a4;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 4
3 4
4 10
5 10
6 10
7 18
8 18
9 19
10 19
11 19
12 19
13 19
14 19
15 12
16 19
17 20
<<<sep_out_sample>>>
test %ecx,%ecx
jle 14 <func1+0x14>
mov %edi,%r11d
imul %edi,%r11d
imul %esi,%r11d
add %ecx,%r11d
jmp 1c <func1+0x1c>
lea (%rcx,%rdi,1),%r11d
imul %edi,%r11d
mov $0x1,%r10d
sub %edx,%r10d
imul %ecx,%r10d
sub %edx,%r10d
cmp %r8d,%edi
jge 37 <func1+0x37>
lea (%rsi,%rsi,1),%r9d
jmp 44 <func1+0x44>
mov %edx,%r9d
imul %r8d,%r9d
add %ecx,%r9d
sub %edx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (v6 < a4)
    {
        v6 = (a2 * (a1 * a1)) + a4;
    }
    else
    {
        v6 = (a4 * a1) + a1 * a1;
    }
    v7 = a4 - (a3 * a4) - a3;
    if (a1 < a5)
    {
        v8 = a2 + a2;
    }
    else
    {
        v8 = (a4 + a3 * a5) - a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 12
11 12
12 12
13 12
14 13
15 13
16 15
17 15
18 19
19 19
20 19
21 19
22 21
23 21
24 21
25 21
26 21
27 21
28 21
29 22
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %r8d,%edx
add %edx,%ecx
lea 0x1(%rcx,%r8,2),%eax
lea (%rax,%rsi,2),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a3 < a3)
    {
        v6 = (a3 - a4) - a1 + a4;
    }
    else
    {
        v6 = a5 + a5;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        if (v6 < a3)
        {
            v7 += (a2 + a4) * a2;
        }
        else
        {
            v7 += a3 + a2;
        }
    }
    v9 = a2 + a2;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 25
2 25
3 25
4 25
5 25
6 25
7 26
<<<sep_out_sample>>>
mov %edi,%eax
sub %edx,%eax
cmp %r8d,%edi
jle f <func1+0xf>
lea (%rsi,%r8,2),%eax
sub %ecx,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += (a3 + a1) + a4;
    }
    if (a5 < a1)
    {
        v8 = (a5 + (a2 + a5)) - a4;
    }
    else
    {
        v8 = a4 - ((a4 - a1) + a3);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 15
2 15
3 9
4 9
5 11
6 11
7 17
8 17
9 17
10 17
11 17
12 18
<<<sep_out_sample>>>
mov %ecx,%r9d
imul %esi,%r9d
imul %r8d,%r9d
add %edi,%r9d
lea -0x1(%rsi),%eax
imul %esi,%eax
add %r8d,%eax
cmp %r8d,%ecx
jge 2b <func1+0x2b>
mov %esi,%r10d
sub %ecx,%r10d
sub %edi,%r10d
imul %ecx,%r10d
jmp 3a <func1+0x3a>
mov %edx,%r10d
imul %edx,%r10d
imul %ecx,%r10d
imul %edi,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a4 * a2 * a5 + a1;
    v7 = (a2 * a2 - a2) + a5;
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += (a4 * a4) + a3;
    }
    if (a4 < a5)
    {
        v10 = ((a2 - a4) - a1) * a4;
    }
    else
    {
        v10 = (a3 * a3 * a4) * a1;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 5
6 5
7 5
8 11
9 11
10 13
11 13
12 13
13 13
14 13
15 17
16 17
17 17
18 17
19 19
20 19
21 19
22 19
23 19
24 19
25 19
26 20
<<<sep_out_sample>>>
cmp %edi,%r8d
jge e <func1+0xe>
mov %r8d,%eax
sub %edi,%eax
add %eax,%eax
jmp 1c <func1+0x1c>
mov %edx,%eax
sub %ecx,%eax
mov %esi,%r9d
imul %esi,%r9d
sub %r9d,%eax
lea (%rdi,%rdx,2),%edx
lea 0x1(%rdx,%rcx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    if (a5 < a1)
    {
        v6 = (a5 - a1 + a5) - a1;
    }
    else
    {
        v6 = a3 - a4 - a2 * a2;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += a3 * (a5 - a3);
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        if (a4 < a2)
        {
            v9 += a3 - a2 + a5;
        }
        else
        {
            v9 += (a2 - a4) + a2;
        }
    }
    v11 = a4 + a3;
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 10
11 10
12 30
13 30
14 30
15 30
16 30
17 30
18 31
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %r8d,%esi
lea (%r8,%rcx,2),%eax
lea (%rax,%rsi,1),%eax
imul %edx,%r8d
lea 0x1(%rax,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = (a4 + a4 + a5) - a4;
    v7 = a3 * a5;
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        if (a2 < a3)
        {
            v8 += a4 - (a2 + a1);
        }
        else
        {
            v8 += a1 * a2 - a2;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 4
5 18
6 5
7 18
8 19
<<<sep_out_sample>>>
lea 0x2(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x1(%rdi,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a5 * a2 * a4;
    }
    v8 = a1 - a4;
    v9 = 0;
    for (v10 = 0; v10++; v10<a1)
    {
        v9 += (a3 * a1) + a1;
    }
    v11 = 0;
    for (v12 = 0; v12++; v12<a4)
    {
        if (a2 < a3)
        {
            v11 += a1 * a5 * a3;
        }
        else
        {
            v11 += a5 + a3;
        }
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 27
2 27
3 27
4 27
5 28
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
lea 0x1(%rcx,%rax,1),%eax
sub %edi,%esi
imul %edx,%edx
add %edx,%esi
add %esi,%eax
imul %r8d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (a2 < a4)
        {
            v6 += a1 * (a5 - a3);
        }
        else
        {
            v6 += (a2 + a1) - a2;
        }
    }
    v8 = a2 - a1 + a3 * a3;
    v9 = a4 * a5;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 18
5 16
6 16
7 16
8 18
9 17
10 18
11 19
<<<sep_out_sample>>>
mov %edi,%eax
imul %r8d,%eax
sub %ecx,%eax
lea 0x1(%rdi,%rax,1),%eax
add %eax,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += (a3 + a1) - a5;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += a4 * a2;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a4)
    {
        v10 += a4 + a4 + a3;
    }
    v12 = (a1 * a5) - a4;
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 19
2 19
3 19
4 20
5 20
6 20
7 20
8 20
9 21
<<<sep_out_sample>>>
test %ecx,%ecx
jle 10 <func1+0x10>
mov %ecx,%r9d
sub %edi,%r9d
imul %r8d,%r9d
jmp 17 <func1+0x17>
mov %r8d,%r9d
imul %ecx,%r9d
lea (%rsi,%r8,1),%eax
cmp %esi,%r9d
jl 2a <func1+0x2a>
mov %edi,%eax
imul %edx,%eax
add %ecx,%eax
sub %r8d,%eax
mov %edx,%r10d
cmp %esi,%eax
jge 38 <func1+0x38>
lea (%rdi,%rdx,2),%r10d
add %r8d,%r10d
add %edx,%edi
add %esi,%edi
add %edi,%r8d
add %ecx,%r8d
add %r8d,%r9d
add %r9d,%eax
add %eax,%r10d
add %ecx,%esi
add %esi,%edx
lea (%r10,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (v6 < a4)
    {
        v6 = a5 * a4 - a5 * a1;
    }
    else
    {
        v6 = a5 * a4;
    }
    if (v6 < a2)
    {
        v7 = a2 + a5;
    }
    else
    {
        v7 = ((a1 * a3) + a4) - a5;
    }
    if (v7 < a2)
    {
        v8 = a3 + a3 + a1 + a5;
    }
    else
    {
        v8 = (a2 - a2) + a3;
    }
    v9 = a2 + a4 + a3;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 14
10 12
11 12
12 18
13 18
14 18
15 18
16 26
17 20
18 20
19 22
20 22
21 29
22 29
23 29
24 29
25 29
26 29
27 29
28 28
29 28
30 29
31 30
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
lea (%r8,%rcx,2),%eax
lea 0x1(%rsi,%rax,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a1 + (a4 - (a1 - a5));
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += (a4 + a2) * a3;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a1)
    {
        if (a5 < a2)
        {
            v9 += a2 - a3;
        }
        else
        {
            v9 += a5 * (a3 + a5);
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 22
4 4
5 22
6 23
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
add %ecx,%esi
add $0x1,%edi
imul %edx,%edi
add %edi,%r8d
add %esi,%r8d
imul %ecx,%edx
lea 0x1(%r8,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = (a3 + (a3 * a1)) + a5;
    v7 = a4 * a3;
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += a3 + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 11
5 4
6 4
7 4
8 11
9 5
10 11
11 12
<<<sep_out_sample>>>
cmp %edi,%ecx
jge c <func1+0xc>
mov %ecx,%eax
sub %edx,%eax
add %esi,%eax
jmp 1b <func1+0x1b>
mov %edi,%r9d
sub %ecx,%r9d
mov %edx,%eax
imul %r8d,%eax
add %r9d,%eax
lea (%rdi,%rdx,2),%r9d
sub %ecx,%r9d
add %r9d,%edi
add %edx,%edi
add %esi,%edi
add %r8d,%edi
add %edi,%ecx
lea 0x1(%rax,%rcx,1),%eax
sub %esi,%edx
add %edx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a4 < a1)
    {
        v6 = a4 - a3 + a2;
    }
    else
    {
        v6 = a1 - a4 + (a3 * a5);
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += a5 * (a5 * a1);
    }
    if (a4 < a4)
    {
        v9 = a1 + a2 + (a5 + a4);
    }
    else
    {
        v9 = (a3 - a2) + a5;
    }
    v10 = a3 + (a3 - a4) + a1;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 10
11 10
12 25
13 25
14 26
15 26
16 26
17 26
18 26
19 26
20 23
21 23
22 26
23 27
<<<sep_out_sample>>>
lea 0x1(%rdx,%rdi,2),%eax
add %eax,%edx
add %esi,%edx
add %r8d,%edx
lea 0x1(%rcx,%rdx,1),%eax
lea -0x1(%r8,%r8,1),%edx
imul %edx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a2 * (a1 - a1);
    }
    v8 = (a5 + a5) * a2 - a2;
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        if (a2 < a1)
        {
            v9 += a4 + a1 - a3;
        }
        else
        {
            v9 += (a5 * a5) * a5;
        }
    }
    v11 = a1 + a3;
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 23
2 23
3 23
4 23
5 23
6 9
7 9
8 23
9 24
<<<sep_out_sample>>>
mov %esi,%r11d
imul %esi,%r11d
mov %edi,%r10d
sub %r8d,%r10d
lea (%rdi,%rcx,1),%r9d
cmp %ecx,%r8d
jg 1d <func1+0x1d>
mov %edi,%r9d
imul %ecx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a2 * a2;
    v7 = a3 - a5 + a1 - a3;
    if (a4 < a5)
    {
        v8 = a1 + a4;
    }
    else
    {
        v8 = (a1 * a4 - a4) + a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 5
4 5
5 8
6 6
7 6
8 12
9 12
10 14
11 14
12 14
13 14
14 14
15 14
16 14
17 15
<<<sep_out_sample>>>
cmp %r8d,%esi
jge 10 <func1+0x10>
mov %r8d,%eax
imul %edx,%eax
imul %eax,%eax
jmp 17 <func1+0x17>
lea -0x1(%r8),%eax
imul %esi,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a2 < a5)
    {
        v6 = a5 * a3 * a3 * a5;
    }
    else
    {
        v6 = a2 * a5 - a2;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += (a5 - a3) + a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 17
10 17
11 17
12 17
13 17
14 18
<<<sep_out_sample>>>
mov %ecx,%eax
sub %edi,%eax
imul %esi,%eax
cmp %eax,%esi
jle 15 <func1+0x15>
lea -0x2(%r8),%r9d
imul %r8d,%r9d
jmp 23 <func1+0x23>
mov %ecx,%r9d
imul %r8d,%r9d
sub %esi,%r9d
imul %r8d,%r9d
add %edi,%edx
add %esi,%edx
add %r8d,%edx
add %edx,%ecx
add %ecx,%eax
add %r9d,%eax
imul %edi,%esi
lea (%rax,%r8,2),%eax
sub %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = (a4 - a1) * a2;
    if (v6 < a2)
    {
        v7 = a5 * a5 - a5 - a5;
    }
    else
    {
        v7 = (a4 * a5 - a2) * a5;
    }
    v8 = a5 - ((a2 * a1) - a5);
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 5
5 5
6 7
7 7
8 7
9 11
10 11
11 11
12 11
13 14
14 14
15 14
16 14
17 14
18 14
19 13
20 13
21 14
22 15
<<<sep_out_sample>>>
mov $0x0,%eax
cmp %edi,%edx
jl 13 <func1+0x13>
mov %esi,%eax
sub %ecx,%eax
imul %ecx,%eax
imul %edx,%eax
add %edi,%edx
add %edx,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += (a2 + a2) * a5;
    }
    if (a3 < a1)
    {
        v8 = a2 - a2;
    }
    else
    {
        v8 = (a2 - a4) * a4 * a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 11
2 9
3 9
4 15
5 15
6 15
7 15
8 17
9 17
10 17
11 17
12 17
13 18
<<<sep_out_sample>>>
cmp %r8d,%esi
jge d <func1+0xd>
mov %r8d,%eax
imul %esi,%eax
jmp 16 <func1+0x16>
mov %edi,%eax
sub %esi,%eax
add %edx,%eax
imul %edx,%eax
lea (%rdx,%rdx,1),%r9d
imul %edi,%r9d
lea 0x1(%rcx,%r9,1),%r9d
add %r9d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (v7 < a1)
        {
            v6 += a2 + (a1 - a3);
        }
        else
        {
            v6 += a4 + a5 * a5;
        }
    }
    if (a2 < a5)
    {
        v8 = a5 * a2;
    }
    else
    {
        v8 = (a1 - a2 + a3) * a3;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        if (v7 < a1)
        {
            v9 += (a5 * a5) - a3;
        }
        else
        {
            v9 += (a1 * a1) + a3;
        }
    }
    v11 = a4 + ((a3 + a3) * a1);
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 22
7 22
8 22
9 22
10 36
11 36
12 37
13 37
14 37
15 37
16 37
17 37
18 37
19 38
<<<sep_out_sample>>>
mov %edx,%eax
sub %r8d,%eax
lea (%rdi,%rdx,1),%r9d
add %r9d,%esi
add %r8d,%esi
add %esi,%ecx
lea 0x1(%rax,%rcx,1),%eax
imul %edi,%r8d
lea (%rax,%rdx,2),%eax
sub %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = (a3 - a5 + a2) - a2;
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a4 * a3;
    }
    if (a2 < a2)
    {
        v9 = a5 * (a2 * a5 + a2);
    }
    else
    {
        v9 = a3 - a1 * a5 + a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 18
4 18
5 18
6 18
7 18
8 16
9 16
10 18
11 19
<<<sep_out_sample>>>
mov %ecx,%eax
sub %edi,%eax
test %ecx,%ecx
jg 10 <func1+0x10>
mov %edx,%eax
sub %ecx,%eax
sub %esi,%eax
add %edi,%eax
mov %r8d,%r9d
imul %ecx,%r9d
imul %r8d,%r9d
lea (%r9,%rdi,2),%edi
add %edi,%edx
add %esi,%edx
add %r8d,%edx
lea 0x1(%rcx,%rdx,1),%edx
add %eax,%edx
add $0x1,%ecx
imul %ecx,%esi
sub %r8d,%esi
lea (%rdx,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a2 + a5 * a1;
    }
    if (v8 < a4)
    {
        v8 = a4 - a1;
    }
    else
    {
        v8 = a1 - (a2 - (a3 - a4));
    }
    v9 = (a4 * a2 + a2) - a5;
    v10 = (a5 * a4 * a5) + a1;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 9
4 9
5 15
6 15
7 15
8 15
9 18
10 18
11 18
12 19
13 19
14 19
15 19
16 19
17 19
18 17
19 17
20 17
21 19
22 20
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
add %r8d,%ecx
sub %edx,%esi
imul %edi,%esi
add %esi,%ecx
lea 0x1(%rcx,%rdi,2),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a1 * (a2 - a3);
    v7 = a1 + a1;
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += a3 - a4 - a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 11
5 4
6 4
7 11
8 11
9 12
<<<sep_out_sample>>>
mov %edx,%eax
not %eax
imul %edi,%eax
lea (%rdi,%rdx,2),%edx
lea (%rdx,%rax,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (a1 < a4)
        {
            v6 += (a3 - a3) * a5;
        }
        else
        {
            v6 += a1 * a1 + a4;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += a3 * a5 * a4;
    }
    v10 = a3 - (a1 * a3 + a1);
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 22
5 22
6 22
7 22
8 22
9 23
<<<sep_out_sample>>>
lea (%rdx,%rsi,1),%eax
test %edi,%edi
jle 13 <func1+0x13>
mov %r8d,%eax
imul %edi,%eax
imul %r8d,%eax
sub %edi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (v6 < a1)
    {
        v6 = a5 * a1 * a5 - a1;
    }
    else
    {
        v6 = a5 - a5 + a3 + a2;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += a4 * a2 + a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 6
7 6
8 17
9 17
10 17
11 17
12 17
13 18
<<<sep_out_sample>>>
mov %r8d,%r10d
sub %ecx,%r10d
add %r8d,%r10d
sub %esi,%r10d
lea (%rsi,%rcx,1),%r9d
imul %edi,%r9d
lea (%rsi,%r8,1),%r11d
test %edi,%edi
jg 23 <func1+0x23>
mov %esi,%r11d
imul %edx,%r11d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea (%rcx,%r10,1),%eax
add %r9d,%eax
add %r11d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = (a5 - a4) + a5 - a2;
    v7 = a2 * a1 + (a4 * a1);
    if (v8 < a1)
    {
        v8 = a2 - a4 + a5 + a4;
    }
    else
    {
        v8 = a2 * a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 5
6 5
7 8
8 6
9 6
10 12
11 12
12 14
13 14
14 14
15 14
16 14
17 14
18 14
19 15
<<<sep_out_sample>>>
mov %edx,%eax
sub %r8d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a1 < a1)
    {
        v6 = a4 - a1 * a2 + a4;
    }
    else
    {
        v6 = a3 - a3;
    }
    if (a4 < a4)
    {
        v7 = ((a1 - a1) - a3) * a3;
    }
    else
    {
        v7 = a3 - a5;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 18
2 18
3 20
4 20
5 20
6 20
7 20
8 21
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += (a3 * a4) + a5;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += a5 + a4 * a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 14
2 14
3 14
4 14
5 15
<<<sep_out_sample>>>
lea (%rsi,%rdi,1),%r9d
cmp %edi,%esi
jl 15 <func1+0x15>
mov %edx,%r9d
imul %edi,%r9d
add %esi,%r9d
sub %r8d,%r9d
lea (%rsi,%rcx,1),%eax
mov %edx,%r10d
imul %esi,%r10d
cmp %edx,%esi
cmovl %r10d,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    if (a2 < a1)
    {
        v6 = a2 + a1 - (a4 - a4);
    }
    else
    {
        v6 = (a3 * a1 + a2) - a5;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += a1 - (a3 * a5);
    }
    if (a2 < a3)
    {
        v9 = a3 * a2;
    }
    else
    {
        v9 = a2 + a4;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a2)
    {
        v10 += a2 - a1;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 4
3 4
4 10
5 10
6 10
7 10
8 23
9 19
10 19
11 19
12 19
13 30
14 30
15 30
16 30
17 30
18 30
19 31
<<<sep_out_sample>>>
mov $0x0,%eax
cmp %ecx,%edx
jl 14 <func1+0x14>
lea (%rcx,%r8,1),%eax
imul %r8d,%eax
imul %edx,%eax
add %edx,%edi
add %edi,%esi
add %r8d,%esi
add %ecx,%esi
add %esi,%eax
imul %ecx,%edx
sub %r8d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a3 < a4)
    {
        v6 = a4 - a4;
    }
    else
    {
        v6 = a5 * (a4 + a5) * a3;
    }
    v7 = a3 * a4 - a5;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 4
3 4
4 10
5 10
6 10
7 13
8 13
9 13
10 13
11 13
12 12
13 12
14 13
15 14
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
cmp $0x1,%edx
jle 17 <func1+0x17>
mov %edx,%r9d
sub %edi,%r9d
add %r8d,%r9d
imul %ecx,%r9d
jmp 23 <func1+0x23>
lea (%rcx,%rdx,1),%r9d
imul %ecx,%r9d
imul %ecx,%r9d
lea 0x1(%r9,%rdi,1),%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (a1 < a5)
        {
            v6 += a5 + a4 - a3;
        }
        else
        {
            v6 += a3 * a4;
        }
    }
    v8 = a1 + a3;
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        if (v6 < a5)
        {
            v9 += a5 - a5 * a2;
        }
        else
        {
            v9 += a4 + a3 + a3;
        }
    }
    if (v7 < a3)
    {
        v11 = (a5 - (a1 - a3)) * a4;
    }
    else
    {
        v11 = a4 * (a4 + a3) * a4;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 29
3 29
4 31
5 31
6 31
7 31
8 31
9 35
10 35
11 35
12 37
13 37
14 37
15 37
16 37
17 37
18 38
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %r8d,%edx
mov %esi,%eax
imul %esi,%eax
lea (%rdx,%rcx,2),%edx
lea (%rdx,%rax,1),%eax
imul %r8d,%ecx
add %ecx,%edi
add %edi,%esi
lea 0x1(%rax,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a5 < a5)
    {
        v6 = a4 - a1;
    }
    else
    {
        v6 = a2 * a2 + a4;
    }
    v7 = a1 + a5 * a4 + a2;
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        if (a3 < a5)
        {
            v8 += a1 - a2 + a1;
        }
        else
        {
            v8 += (a1 + a2) + a3;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 25
2 25
3 25
4 10
5 10
6 10
7 25
8 12
9 12
10 12
11 25
12 26
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %r8d,%edx
add %ecx,%edx
imul %r8d,%ecx
imul %ecx,%edi
sub %esi,%edi
lea (%rdx,%rdi,1),%eax
sub %r8d,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = ((a5 * a4) * a1) - a2;
    v7 = (a3 - a3) - (a5 - a2);
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 4
7 4
8 6
9 5
10 6
11 7
<<<sep_out_sample>>>
mov %edx,%eax
sub %ecx,%eax
cmp %edi,%edx
jl 12 <func1+0x12>
mov %r8d,%eax
imul %esi,%eax
sub %edi,%eax
add %edx,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (a2 < a2)
        {
            v6 += a3 + a1 - a4;
        }
        else
        {
            v6 += (a5 - a3) * a1;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        if (a1 < a5)
        {
            v8 += a5 - (a2 + a1);
        }
        else
        {
            v8 += a5 * a1 + a4;
        }
    }
    if (a3 < a1)
    {
        v10 = a3 - a4;
    }
    else
    {
        v10 = (a5 * a2) - a1 + a3;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 30
2 30
3 28
4 28
5 34
6 34
7 34
8 34
9 36
10 36
11 36
12 36
13 36
14 37
<<<sep_out_sample>>>
lea (%rcx,%rdx,1),%r9d
lea (%rsi,%rdi,1),%r10d
cmp %edi,%r9d
jl 1b <func1+0x1b>
lea (%r8,%rsi,1),%eax
mov %edi,%r10d
sub %eax,%r10d
imul %ecx,%r10d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
lea (%r9,%r10,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a4 + a3;
    if (v6 < a1)
    {
        v7 = a2 + a1;
    }
    else
    {
        v7 = a4 * (a1 - (a5 + a2));
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 7
3 5
4 5
5 11
6 11
7 11
8 11
9 13
10 13
11 13
12 13
13 13
14 13
15 14
<<<sep_out_sample>>>
mov %r8d,%eax
imul %edx,%eax
sub %esi,%eax
imul %ecx,%eax
cmp %edx,%edi
jge 15 <func1+0x15>
lea (%r8,%r8,1),%r9d
jmp 24 <func1+0x24>
mov %esi,%r9d
imul %ecx,%r9d
imul %edi,%r9d
imul %r8d,%r9d
add %r9d,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (a2 < a2)
        {
            v6 += (a2 * a3) - a2;
        }
        else
        {
            v6 += a2 + a4;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += a5 * a1;
    }
    v10 = (a5 * a3 - a2) * a4;
    if (a1 < a3)
    {
        v11 = a5 + a4 - a4 + a5;
    }
    else
    {
        v11 = a2 * a4 * a1 * a5;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 21
5 22
6 22
7 24
8 24
9 28
10 28
11 28
12 28
13 30
14 30
15 30
16 30
17 30
18 30
19 31
<<<sep_out_sample>>>
mov %ecx,%r9d
imul %edi,%r9d
mov %esi,%eax
sub %r8d,%eax
add %eax,%r9d
mov %esi,%eax
sub %ecx,%eax
cmp %r8d,%edi
jge 22 <func1+0x22>
mov %esi,%eax
sub %edx,%eax
imul %ecx,%eax
imul %edi,%eax
add %edx,%edi
add %esi,%edi
add %r8d,%edi
add %edi,%ecx
add %r9d,%ecx
add %ecx,%eax
imul %esi,%edx
add %r8d,%edx
imul %edx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a1 < a1)
    {
        v6 = a4 * a2;
    }
    else
    {
        v6 = a4 * a1 - (a5 - a2);
    }
    if (a1 < a5)
    {
        v7 = ((a2 - a3) * a4) * a1;
    }
    else
    {
        v7 = a2 - a4;
    }
    v8 = (a3 * a2 + a5) * a5;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 10
6 18
7 18
8 12
9 12
10 14
11 14
12 14
13 14
14 21
15 21
16 21
17 21
18 21
19 21
20 20
21 20
22 20
23 21
24 22
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
mov %r8d,%ecx
sub %edx,%ecx
add %ecx,%eax
add %esi,%eax
imul %r8d,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a5 - a3;
    v7 = (a5 + a2) - a5;
    v8 = a5 * a2;
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        if (v7 < a5)
        {
            v9 += a3 * a3 + a2;
        }
        else
        {
            v9 += a3 * (a3 + a4);
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 19
2 19
3 19
4 19
5 4
6 4
7 19
8 19
9 6
10 19
11 20
<<<sep_out_sample>>>
lea (%r8,%rdi,1),%r9d
cmp %ecx,%edx
jge f <func1+0xf>
mov %ecx,%eax
imul %edx,%eax
jmp 16 <func1+0x16>
mov %esi,%eax
imul %esi,%eax
add %edi,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = a5 + a1;
    if (a3 < a4)
    {
        v7 = a4 * a3;
    }
    else
    {
        v7 = a1 + a2 * a2;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += a2 * a4;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a4)
    {
        v10 += (a1 + a3) * a2;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 5
3 5
4 7
5 7
6 7
7 11
8 11
9 11
10 23
11 23
12 23
13 23
14 23
15 23
16 24
<<<sep_out_sample>>>
test %r8d,%r8d
jle e <func1+0xe>
mov %edx,%r10d
imul %esi,%r10d
jmp 15 <func1+0x15>
mov %ecx,%r10d
imul %esi,%r10d
lea (%rdi,%rdx,1),%r9d
add %r9d,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %r10d,%eax
sub %edi,%ecx
imul %ecx,%edx
add %edx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (a4 < a4)
        {
            v6 += a5 * a3 - a3;
        }
        else
        {
            v6 += (a4 * a2) + a1;
        }
    }
    if (v6 < a5)
    {
        v8 = a3 * a2;
    }
    else
    {
        v8 = a3 - a3 + a4 * a2;
    }
    v9 = a1 - ((a1 - a4) * a3);
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 22
7 22
8 25
9 25
10 25
11 25
12 25
13 24
14 24
15 24
16 25
17 26
<<<sep_out_sample>>>
mov %edi,%r9d
imul %r8d,%r9d
test %esi,%esi
jle 1e <func1+0x1e>
mov $0x1,%r11d
sub %edi,%r11d
imul %esi,%r11d
imul %edi,%r11d
jmp 2a <func1+0x2a>
lea (%rdi,%rcx,1),%r11d
imul %esi,%r11d
imul %r8d,%r11d
mov %esi,%r10d
sub %ecx,%r10d
lea (%r10,%rdx,2),%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %r9d,%eax
add %r11d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += (a3 + a4) * a5;
    }
    v8 = a1 * a5;
    if (v6 < a2)
    {
        v9 = (a2 - a2 * a1) * a1;
    }
    else
    {
        v9 = (a2 * (a1 + a4)) * a5;
    }
    v10 = (a2 - a4 + a3) + a3;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 10
4 10
5 12
6 12
7 12
8 12
9 12
10 16
11 16
12 16
13 18
14 18
15 18
16 19
17 19
18 19
19 19
20 19
21 19
22 19
23 20
<<<sep_out_sample>>>
mov %esi,%eax
sub %ecx,%eax
cmp %esi,%edi
jge 12 <func1+0x12>
mov %esi,%eax
sub %edi,%eax
imul %esi,%eax
imul %esi,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %r8d,%esi
add %esi,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a1 < a2)
    {
        v6 = a2 * (a2 - a1) * a2;
    }
    else
    {
        v6 = a2 - a4;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        if (a2 < a5)
        {
            v7 += a5 * a3 - a4;
        }
        else
        {
            v7 += a5 + a3 - a3;
        }
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        v9 += a2 - a2;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 4
4 4
5 6
6 6
7 6
8 6
9 29
10 29
11 29
12 29
13 29
14 30
<<<sep_out_sample>>>
push %rbx
lea (%rdx,%rdi,1),%r10d
mov %r10d,%r9d
imul %ecx,%r9d
sub %edx,%r9d
mov %edx,%eax
sub %edi,%eax
mov %ecx,%r11d
sub %esi,%r11d
cmp %r9d,%edi
cmovg %eax,%r11d
cmp %r8d,%r9d
jge 2a <func1+0x2a>
imul %esi,%edi
jmp 37 <func1+0x37>
mov %edi,%eax
sub %edx,%eax
mov %edi,%ebx
imul %esi,%ebx
sub %ebx,%eax
mov %eax,%edi
lea (%r10,%rsi,1),%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
add %r11d,%eax
add %edi,%eax
imul %ecx,%edx
add %edx,%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = ((a3 + a1) * a4) - a3;
    if (v6 < a1)
    {
        v7 = (a4 - a4 + a3) - a1;
    }
    else
    {
        v7 = a4 - a2;
    }
    if (v6 < a5)
    {
        v8 = a1 * a2;
    }
    else
    {
        v8 = a1 - a3 - a1 * a2;
    }
    v9 = a3 * a4;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 4
3 4
4 4
5 4
6 7
7 7
8 7
9 7
10 7
11 7
12 13
13 13
14 15
15 15
16 19
17 19
18 19
19 19
20 19
21 19
22 22
23 22
24 22
25 22
26 22
27 22
28 21
29 22
30 23
31 23
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %r8d,%esi
lea (%r8,%rcx,2),%eax
lea (%rax,%rsi,1),%eax
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a5 + a4;
    v7 = a4 - a3 + a3;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 4
5 6
6 6
7 7
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea (%r8,%rcx,1),%esi
imul %ecx,%ecx
lea 0x1(%rsi,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a4 * a4;
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a1 + (a5 - a5);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 4
6 10
7 11
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %edx,%r8d
lea (%r8,%rcx,1),%edx
imul %ecx,%esi
lea 0x1(%rdx,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a4 * a2;
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += a3 - a4 * a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 4
6 10
7 11
<<<sep_out_sample>>>
cmp %ecx,%r8d
jge 11 <func1+0x11>
mov %edi,%eax
imul %ecx,%eax
imul %edi,%eax
sub %esi,%eax
jmp 17 <func1+0x17>
mov %r8d,%eax
imul %esi,%eax
mov %esi,%r9d
imul %esi,%r9d
lea 0x1(%rdi,%r9,1),%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    if (a5 < a4)
    {
        v6 = a1 * a4 * a1 - a2;
    }
    else
    {
        v6 = a5 * a2;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a3 - a2 - a3;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        if (v6 < a5)
        {
            v9 += (a3 - a2) + a1;
        }
        else
        {
            v9 += a2 - a5;
        }
    }
    v11 = a2 * a2;
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 29
11 29
12 30
13 30
14 30
15 30
16 30
17 30
18 31
<<<sep_out_sample>>>
mov %edi,%eax
sub %esi,%eax
imul %esi,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (a3 < a4)
        {
            v6 += a4 - a3;
        }
        else
        {
            v6 += a2 * (a2 * a4);
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        if (a4 < a4)
        {
            v8 += a5 - a2 - a4;
        }
        else
        {
            v8 += (a1 - a1) * a3;
        }
    }
    v10 = a2 * (a1 - a2);
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 28
2 28
3 28
4 29
5 29
6 29
7 29
8 29
9 30
<<<sep_out_sample>>>
lea (%r8,%rsi,1),%eax
cmp $0x1,%ecx
jle 19 <func1+0x19>
mov %edx,%r9d
imul %ecx,%r9d
mov %esi,%eax
imul %r8d,%eax
add %r9d,%eax
add %edi,%eax
add %eax,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (a4 < a3)
        {
            v6 += a5 - a5;
        }
        else
        {
            v6 += a2 + a5 - a2;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += a1 - (a3 + a1);
    }
    if (v9 < a4)
    {
        v10 = a3 * a4 + a2 * a5;
    }
    else
    {
        v10 = a5 + a2;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 27
2 21
3 21
4 23
5 23
6 23
7 23
8 23
9 29
10 29
11 29
12 29
13 29
14 30
<<<sep_out_sample>>>
mov %edi,%eax
imul %ecx,%eax
mov %esi,%r11d
sub %eax,%r11d
mov %r11d,%eax
add %esi,%eax
lea (%rsi,%rdx,1),%r9d
lea (%rcx,%rdx,1),%r10d
cmp %eax,%esi
cmovle %r10d,%r9d
lea 0x1(%r9,%rdi,1),%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (a5 < a3)
        {
            v6 += a4 * (a4 * a4);
        }
        else
        {
            v6 += a5 - a5;
        }
    }
    v8 = a2 - ((a1 * a4) - a2);
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        v9 += a5 - (a1 + a1);
    }
    if (v8 < a2)
    {
        v11 = a2 + a3;
    }
    else
    {
        v11 = a4 + a3;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 16
4 16
5 16
6 16
7 24
8 24
9 24
10 24
11 30
12 30
13 30
14 30
15 30
16 30
17 31
<<<sep_out_sample>>>
push %rbx
cmp %r8d,%esi
jge 11 <func1+0x11>
mov %edx,%ebx
sub %esi,%ebx
add %r8d,%ebx
add %ecx,%ebx
jmp 1c <func1+0x1c>
mov %esi,%ebx
sub %edi,%ebx
mov %edx,%eax
sub %r8d,%eax
add %eax,%ebx
mov %edi,%r11d
sub %ecx,%r11d
mov %ecx,%eax
imul %edx,%eax
add %eax,%r11d
lea (%rsi,%rdi,1),%r10d
cmp %edi,%esi
jle 40 <func1+0x40>
lea -0x1(%rdx),%r9d
imul %esi,%r9d
imul %edi,%r9d
jmp 49 <func1+0x49>
lea 0x1(%rdi,%r8,1),%r9d
imul %ecx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %ebx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a2 < a5)
    {
        v6 = (a3 - a2 + a5) + a4;
    }
    else
    {
        v6 = a2 - a1 - (a5 - a3);
    }
    if (a5 < a5)
    {
        v7 = (a4 * a5) - a5;
    }
    else
    {
        v7 = a1 - a4 + a4 * a3;
    }
    v8 = a2 + a1;
    if (a1 < a2)
    {
        v9 = (a2 * a3 - a2) * a1;
    }
    else
    {
        v9 = a4 + ((a1 + a5) * a4);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 4
3 4
4 6
5 6
6 6
7 6
8 6
9 10
10 10
11 10
12 10
13 10
14 18
15 18
16 18
17 18
18 18
19 20
20 21
21 21
22 23
23 23
24 23
25 23
26 27
27 27
28 29
29 29
30 29
31 29
32 29
33 29
34 29
35 29
36 30
37 30
<<<sep_out_sample>>>
lea (%rdx,%rdi,1),%eax
add %ecx,%eax
cmp %edx,%r8d
jl 1a <func1+0x1a>
mov %edi,%eax
imul %ecx,%eax
mov %esi,%r9d
sub %eax,%r9d
mov %r9d,%eax
add %ecx,%eax
add %edx,%edi
add %edi,%esi
add %r8d,%esi
add %esi,%ecx
add %ecx,%eax
imul %r8d,%r8d
add $0x1,%r8d
imul %r8d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a1 - a1;
    if (a5 < a3)
    {
        v7 = a4 + (a3 + a1);
    }
    else
    {
        v7 = a4 + (a2 - a1 * a4);
    }
    v8 = a3 * (a5 * a5) + a3;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 7
2 7
3 5
4 5
5 11
6 11
7 11
8 11
9 11
10 11
11 14
12 14
13 14
14 14
15 14
16 13
17 13
18 13
19 14
20 15
<<<sep_out_sample>>>
test %esi,%esi
jle e <func1+0xe>
mov %edx,%eax
imul %ecx,%eax
lea (%rax,%rdi,2),%eax
jmp 17 <func1+0x17>
mov %ecx,%eax
sub %r8d,%eax
add %ecx,%eax
sub %edx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a3 + a2 + a1;
    }
    if (v6 < a2)
    {
        v8 = ((a3 * a4) + a1) + a1;
    }
    else
    {
        v8 = (a4 - a5) + a4 - a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 15
8 15
9 15
10 15
11 17
12 17
13 17
14 17
15 17
16 18
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
mov $0x1,%edx
sub %ecx,%edx
imul %edx,%r8d
add %r8d,%eax
mov %esi,%edx
imul %esi,%edx
imul %edx,%esi
add %esi,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a5 - (a4 * a5);
    v7 = a1 + a2 * a2 * a2;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 4
7 4
8 6
9 5
10 5
11 5
12 5
13 6
14 7
<<<sep_out_sample>>>
mov %r8d,%r10d
sub %esi,%r10d
mov %edx,%r9d
imul %edi,%r9d
mov %r9d,%eax
imul %r8d,%eax
sub %edx,%eax
cmp %ecx,%esi
cmovle %ecx,%r9d
add %edi,%r9d
add %r9d,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %r10d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (v6 < a3)
        {
            v6 += a5 + a3;
        }
        else
        {
            v6 += a5 - a3 + a5;
        }
    }
    v8 = a5 - a2;
    v9 = a3 * a1 * a5 - a3;
    if (a4 < a2)
    {
        v10 = a3 * a1;
    }
    else
    {
        v10 = (a4 - a3) + a3;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 17
4 17
5 17
6 17
7 17
8 24
9 24
10 26
11 26
12 26
13 26
14 26
15 26
16 26
17 27
<<<sep_out_sample>>>
mov %ecx,%r9d
imul %ecx,%r9d
sub %r8d,%r9d
sub %ecx,%r9d
lea (%rdi,%r8,1),%eax
cmp %esi,%edi
jge 21 <func1+0x21>
mov %edi,%r10d
imul %edx,%r10d
add %r8d,%r10d
jmp 2f <func1+0x2f>
mov %esi,%r10d
imul %ecx,%r10d
imul %ecx,%r10d
add %esi,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a4 * a4 - a5 - a4;
    v7 = (a3 + a5) + (a1 - a3);
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        if (v7 < a1)
        {
            v8 += a4 + a5 * a2;
        }
        else
        {
            v8 += a1 + a1;
        }
    }
    if (a1 < a2)
    {
        v10 = a1 * a3 + a5;
    }
    else
    {
        v10 = a2 + a2 * a4 * a4;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 5
6 18
7 18
8 20
9 20
10 20
11 20
12 24
13 24
14 24
15 24
16 26
17 26
18 26
19 26
20 26
21 26
22 26
23 27
<<<sep_out_sample>>>
mov %esi,%eax
sub %ecx,%eax
lea (%r8,%rsi,1),%r9d
cmp %ecx,%edx
cmovge %r9d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a3 < a4)
    {
        v6 = a2 - a4;
    }
    else
    {
        v6 = a5 + a2;
    }
    v7 = a3 * a4 * (a1 - a1);
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += (a1 + a2) + a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 6
6 18
7 18
8 18
9 18
10 18
11 19
<<<sep_out_sample>>>
mov %ecx,%eax
sub %r8d,%eax
add %eax,%eax
cmp %esi,%edi
jge 14 <func1+0x14>
mov %edx,%eax
sub %ecx,%eax
sub %r8d,%eax
sub %esi,%eax
add %edi,%edx
add %esi,%edx
add %edx,%r8d
add %r8d,%ecx
add %ecx,%eax
imul %edi,%esi
lea 0x1(%rax,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a1 < a2)
    {
        v6 = (a3 - a4 - a5) - a2;
    }
    else
    {
        v6 = a4 - a5 - a5 + a4;
    }
    v7 = a1 * a2;
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += a3 + a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 4
5 4
6 6
7 6
8 6
9 6
10 18
11 18
12 18
13 18
14 18
15 12
16 18
17 19
<<<sep_out_sample>>>
mov %ecx,%eax
sub %esi,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a1 + a2;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        if (a5 < a1)
        {
            v8 += a5 * a3 - a1;
        }
        else
        {
            v8 += a2 + a3 * a5;
        }
    }
    v10 = (a3 - a2) + a4 - a3;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 22
4 22
5 22
6 22
7 22
8 23
<<<sep_out_sample>>>
cmp %r8d,%edx
jge c <func1+0xc>
mov %edx,%eax
imul %ecx,%eax
jmp 14 <func1+0x14>
lea 0x1(%rsi),%eax
imul %edi,%eax
add %esi,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a3 < a5)
    {
        v6 = a3 * a4;
    }
    else
    {
        v6 = (a1 + a1 * a2) + a2;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a2 - a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 17
10 17
11 17
12 17
13 17
14 18
<<<sep_out_sample>>>
mov %esi,%eax
imul %esi,%eax
add %r8d,%eax
lea (%rdi,%rdx,2),%r9d
lea (%r9,%rax,1),%eax
add %esi,%eax
add %r8d,%eax
add %eax,%ecx
mov %esi,%eax
sub %edi,%eax
imul %r8d,%edi
add %eax,%edi
lea 0x1(%rcx,%rdi,1),%eax
imul %edx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = (a2 - a1) + a1 * a5;
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += a5 - a5;
    }
    v9 = ((a3 - a4) + a4) * a2;
    v10 = a5 + a2 * a2 + a3;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 12
5 12
6 12
7 12
8 12
9 4
10 4
11 4
12 4
13 12
14 10
15 12
16 13
<<<sep_out_sample>>>
cmp %edx,%esi
jge 14 <func1+0x14>
mov %edx,%r9d
imul %ecx,%r9d
sub %edi,%r9d
imul %r8d,%r9d
jmp 20 <func1+0x20>
lea (%rdx,%rdx,1),%eax
mov %ecx,%r9d
sub %eax,%r9d
add %esi,%r9d
lea (%r8,%rdi,1),%eax
mov %esi,%r10d
sub %r8d,%r10d
test %r8d,%r8d
cmovle %r10d,%eax
cmp %edx,%esi
jle 3e <func1+0x3e>
lea (%rsi,%rdx,2),%r10d
add %edx,%r10d
jmp 51 <func1+0x51>
mov %edx,%r10d
imul %r8d,%r10d
mov %ecx,%r11d
sub %r10d,%r11d
mov %r11d,%r10d
add %r8d,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a2 < a3)
    {
        v6 = a5 * ((a3 * a4) - a1);
    }
    else
    {
        v6 = a2 - ((a3 + a3) - a4);
    }
    if (v7 < a5)
    {
        v7 = a5 + a1;
    }
    else
    {
        v7 = a2 - a5;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += a2 * a1 * a5;
    }
    if (a3 < a2)
    {
        v10 = (a3 + a3) + a2 + a3;
    }
    else
    {
        v10 = a4 - a3 * a5 + a5;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 14
13 14
14 14
15 14
16 14
17 25
18 25
19 27
20 27
21 27
22 31
23 31
24 31
25 31
26 31
27 31
28 33
29 33
30 33
31 33
32 33
33 33
34 33
35 34
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += (a5 - a5) * a4;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        if (v9 < a4)
        {
            v8 += a2 + a5 * a4;
        }
        else
        {
            v8 += a2 + a1 + a1;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 21
5 22
<<<sep_out_sample>>>
mov %ecx,%eax
neg %eax
mov %ecx,%r9d
sub %edi,%r9d
test %ecx,%ecx
cmovle %r9d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (a5 < a2)
        {
            v6 += (a4 * a5) + a5;
        }
        else
        {
            v6 += a3 - a3 + a1;
        }
    }
    if (v6 < a4)
    {
        v8 = (a4 - a4) * a5 - a4;
    }
    else
    {
        v8 = a4 - a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 18
5 18
6 18
7 24
8 24
9 24
10 24
11 24
12 25
<<<sep_out_sample>>>
cmp %r8d,%edx
jge 15 <func1+0x15>
mov %edi,%r10d
sub %r8d,%r10d
imul %edi,%r10d
imul %esi,%r10d
jmp 1c <func1+0x1c>
mov %esi,%r10d
imul %esi,%r10d
lea (%r8,%rdi,1),%r9d
lea (%r9,%rcx,1),%eax
mov %esi,%r11d
sub %edx,%r11d
cmp %esi,%edx
cmovg %r11d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r10d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a3 < a5)
    {
        v6 = a2 * ((a1 - a5) * a1);
    }
    else
    {
        v6 = a2 * (a2 + a3 - a3);
    }
    if (a2 < a3)
    {
        v7 = a2 - a3;
    }
    else
    {
        v7 = a5 + a1 + a4;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 18
11 18
12 14
13 14
14 14
15 14
16 20
17 20
18 20
19 20
20 20
21 20
22 21
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea (%rdx,%rcx,2),%eax
lea (%rax,%r8,1),%ecx
mov %edx,%eax
sub %edi,%eax
imul %edx,%edx
sub %edx,%eax
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a4 + a3;
    v7 = a3 - a1 - a3 * a3;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 4
5 6
6 5
7 5
8 5
9 5
10 6
11 7
<<<sep_out_sample>>>
mov %r8d,%eax
sub %esi,%eax
cmp %r8d,%edi
jge 12 <func1+0x12>
lea (%rcx,%r8,1),%eax
add %esi,%eax
add %edi,%eax
add %edx,%edi
add %esi,%edi
add %r8d,%edi
add %edi,%ecx
add %eax,%ecx
lea (%rsi,%r8,2),%edi
sub %edx,%edi
lea (%rcx,%rdi,1),%eax
add %edx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a1 < a5)
    {
        v6 = ((a4 + a5) + a2) + a1;
    }
    else
    {
        v6 = (a3 - a3) - a2 + a5;
    }
    v7 = ((a5 + a2) + a5) - a3;
    v8 = a2 + a3;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 4
4 4
5 6
6 6
7 6
8 14
9 14
10 14
11 14
12 14
13 12
14 12
15 14
16 13
17 14
18 15
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %edx,%r8d
lea 0x1(%rcx,%r8,1),%edx
mov %ecx,%eax
imul %esi,%eax
imul %eax,%esi
sub %edi,%esi
lea (%rdx,%rsi,1),%eax
sub %ecx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (a3 < a3)
        {
            v6 += (a1 * a5) + a5;
        }
        else
        {
            v6 += a2 + a1;
        }
    }
    if (a2 < a2)
    {
        v8 = a2 + a3;
    }
    else
    {
        v8 = a2 * (a4 * a2) - a1;
    }
    v9 = a1 - a4;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 25
2 25
3 25
4 25
5 22
6 22
7 22
8 22
9 25
10 24
11 25
12 26
<<<sep_out_sample>>>
lea (%rsi,%rdi,2),%eax
add %eax,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (a3 < a2)
        {
            v6 += a2 * a4;
        }
        else
        {
            v6 += a5 - a1;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += a4 - a5;
    }
    v10 = a1 - a3;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 22
4 23
<<<sep_out_sample>>>
cmp %edi,%ecx
jge 11 <func1+0x11>
mov %ecx,%eax
sub %r8d,%eax
imul %edx,%eax
imul %esi,%eax
jmp 23 <func1+0x23>
mov %r8d,%eax
imul %edx,%eax
mov %esi,%r10d
sub %eax,%r10d
mov %r10d,%eax
imul %edx,%eax
cmp $0x1,%edi
jle 37 <func1+0x37>
mov %ecx,%r9d
sub %edx,%r9d
imul %ecx,%r9d
sub %esi,%r9d
jmp 3e <func1+0x3e>
mov %ecx,%r9d
imul %edi,%r9d
lea 0x1(%r9,%rdi,1),%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (a2 < a5)
        {
            v6 += a4 + a1;
        }
        else
        {
            v6 += a3 - a1 - a5;
        }
    }
    if (a4 < a1)
    {
        v8 = a2 * (a3 * (a4 - a5));
    }
    else
    {
        v8 = (a2 - a5 * a3) * a3;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        v9 += a4 - a2 * a2;
    }
    if (v10 < a1)
    {
        v11 = ((a4 - a3) * a4) - a2;
    }
    else
    {
        v11 = a4 * a1;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 18
7 18
8 22
9 22
10 22
11 22
12 22
13 22
14 29
15 29
16 31
17 31
18 31
19 31
20 31
21 35
22 35
23 37
24 37
25 37
26 37
27 37
28 37
29 38
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
lea (%r8,%rcx,1),%eax
mov %esi,%r9d
sub %ecx,%r9d
mov %r9d,%ecx
sub %edi,%ecx
lea 0x1(%rax,%rcx,1),%ecx
add %esi,%esi
sub %edx,%esi
lea (%rcx,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = (a2 - a4) - a1;
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += a1 - a2 - a2;
    }
    v9 = a2 + a2 - a3;
    v10 = 0;
    for (v11 = 0; v11++; v11<a4)
    {
        if (a5 < a5)
        {
            v10 += a2 * a2 - a2;
        }
        else
        {
            v10 += a1 + a3 * a1;
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 23
2 23
3 23
4 23
5 4
6 4
7 4
8 4
9 23
10 10
11 10
12 23
13 24
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
mov %edi,%r9d
sub %r8d,%r9d
add %r9d,%eax
add %edi,%ecx
imul %ecx,%edi
add %edi,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a1 - a5;
    v7 = ((a4 + a1) * a1) + a5;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 4
7 6
8 5
9 5
10 5
11 6
12 7
<<<sep_out_sample>>>
add %edx,%edi
add %esi,%edi
add %r8d,%edi
add %ecx,%edi
mov %edx,%eax
sub %esi,%eax
imul %r8d,%eax
add %edx,%eax
add %edi,%eax
lea (%rcx,%rcx,1),%esi
sub %esi,%edx
add %edx,%eax
imul %r8d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = (a3 - a2) * a5 + a3;
    v7 = a3 - (a4 + a4);
    if (a2 < a2)
    {
        v8 = (a4 - a1 + a3) + a3;
    }
    else
    {
        v8 = a5 * a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 14
2 14
3 14
4 14
5 4
6 4
7 4
8 4
9 14
10 5
11 5
12 14
13 12
14 14
15 15
<<<sep_out_sample>>>
mov %edx,%r9d
imul %r8d,%r9d
mov $0x0,%eax
test %ecx,%ecx
jg 15 <func1+0x15>
lea (%rdi,%rdx,2),%eax
sub %ecx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %r9d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (v6 < a1)
        {
            v6 += a4 - a3 * a3;
        }
        else
        {
            v6 += a2 * a2 * a1;
        }
    }
    v8 = a3 * a5;
    if (v6 < a4)
    {
        v9 = (a2 + a3 - a3) - a2;
    }
    else
    {
        v9 = a1 + a3 + a3 - a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 19
4 17
5 17
6 23
7 23
8 25
9 25
10 25
11 25
12 25
13 25
14 26
<<<sep_out_sample>>>
cmp %edi,%edx
jge 15 <func1+0x15>
lea (%rsi,%rdi,1),%eax
imul %edx,%eax
mov %edi,%r9d
sub %eax,%r9d
mov %r9d,%eax
jmp 1f <func1+0x1f>
mov %edi,%eax
imul %r8d,%eax
add %ecx,%eax
sub %esi,%eax
add %edx,%edi
add %edi,%esi
add %r8d,%esi
add %ecx,%esi
add %esi,%eax
lea 0x1(%rcx),%edx
imul %edx,%r8d
imul %r8d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a3 < a1)
    {
        v6 = a1 - ((a2 + a1) * a3);
    }
    else
    {
        v6 = a4 + a1 * a5 - a2;
    }
    v7 = a4 * ((a4 * a5) + a5);
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 6
9 10
10 10
11 10
12 10
13 13
14 13
15 13
16 13
17 13
18 12
19 12
20 12
21 13
22 14
<<<sep_out_sample>>>
mov %esi,%r9d
sub %ecx,%r9d
test %edx,%edx
jle 17 <func1+0x17>
mov %r8d,%r9d
imul %edx,%r9d
add %ecx,%r9d
add %esi,%r9d
mov %esi,%eax
imul %edx,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %r8d,%esi
add %ecx,%esi
add %esi,%r9d
sub %r8d,%ecx
add %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (v6 < a3)
    {
        v6 = a2 + (a4 + (a5 * a3));
    }
    else
    {
        v6 = a4 - (a4 - a2) - a4;
    }
    v7 = a4 - a5;
    v8 = a2 * a3 + a5 - a5;
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        v9 += a5 + a2 + a5;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 4
4 4
5 6
6 6
7 6
8 6
9 13
10 13
11 19
12 19
13 19
14 19
15 19
16 12
17 19
18 19
19 20
<<<sep_out_sample>>>
push %rbx
cmp %r8d,%esi
jge 12 <func1+0x12>
lea (%r8,%rsi,1),%r11d
sub %ecx,%r11d
add %edx,%r11d
jmp 19 <func1+0x19>
mov %edx,%r11d
imul %r8d,%r11d
mov $0x1,%r10d
sub %ecx,%r10d
imul %edi,%r10d
imul %edx,%r10d
cmp %edx,%esi
jge 3b <func1+0x3b>
lea (%rdx,%r8,1),%r9d
imul %esi,%r9d
add %edx,%r9d
jmp 49 <func1+0x49>
mov %edx,%r9d
sub %r8d,%r9d
mov %edx,%ebx
imul %edx,%ebx
sub %ebx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a2 < a5)
    {
        v6 = a5 + a2 - a4 + a3;
    }
    else
    {
        v6 = a3 * a5;
    }
    v7 = (a1 - (a1 * a4)) * a3;
    if (a2 < a3)
    {
        v8 = a3 + (a2 * (a3 + a5));
    }
    else
    {
        v8 = a3 - a5 - a3 * a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 2
2 4
3 4
4 6
5 6
6 6
7 6
8 10
9 10
10 12
11 12
12 12
13 12
14 13
15 13
16 15
17 15
18 15
19 15
20 19
21 19
22 19
23 19
24 19
25 21
26 21
27 21
28 21
29 21
30 21
31 21
32 22
33 22
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %r8d,%edx
add %ecx,%edx
imul %ecx,%r8d
lea 0x1(%rdx,%r8,1),%eax
add $0x1,%esi
imul %esi,%ecx
imul %ecx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a5 < a5)
    {
        v6 = a2 + a5;
    }
    else
    {
        v6 = a4 * a5;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        if (a3 < a4)
        {
            v7 += a4 - a4 + a4;
        }
        else
        {
            v7 += (a4 - a3) * a5;
        }
    }
    v9 = (a4 * a2 + a4) * a1;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 25
2 25
3 25
4 25
5 10
6 25
7 24
8 24
9 24
10 25
11 26
<<<sep_out_sample>>>
mov %esi,%r9d
imul %ecx,%r9d
test %edx,%edx
jle 14 <func1+0x14>
mov %ecx,%eax
sub %r8d,%eax
add %edx,%eax
jmp 1b <func1+0x1b>
mov %ecx,%eax
sub %esi,%eax
imul %esi,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a2 * a4;
    if (v7 < a3)
    {
        v7 = a3 + (a4 - a5);
    }
    else
    {
        v7 = (a4 * a2) - (a2 * a2);
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 5
4 5
5 7
6 7
7 7
8 7
9 11
10 11
11 11
12 13
13 13
14 13
15 13
16 13
17 13
18 14
<<<sep_out_sample>>>
mov %esi,%r9d
sub %r8d,%r9d
cmp %esi,%ecx
jge 17 <func1+0x17>
mov %edi,%r9d
imul %ecx,%r9d
add %edx,%r9d
add %ecx,%r9d
lea (%rcx,%rdi,1),%eax
cmp %r8d,%edi
jg 2a <func1+0x2a>
mov %esi,%eax
imul %edi,%eax
add %r8d,%eax
imul %edx,%eax
mov $0x2,%r10d
sub %ecx,%r10d
imul %ecx,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a4 < a2)
    {
        v6 = (a3 + a1 * a4) + a4;
    }
    else
    {
        v6 = a2 - a5;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        if (a4 < a3)
        {
            v7 += a5 * a1;
        }
        else
        {
            v7 += a1 + a5 * a1;
        }
    }
    if (a5 < a1)
    {
        v9 = a4 - a2 + a2 + a1;
    }
    else
    {
        v9 = (a5 + a2 * a1) * a3;
    }
    v10 = (a4 - a4 * a4) + a4;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 4
4 4
5 6
6 6
7 6
8 6
9 26
10 24
11 24
12 30
13 30
14 30
15 30
16 32
17 32
18 32
19 33
20 33
21 33
22 33
23 33
24 33
25 33
26 34
<<<sep_out_sample>>>
mov %ecx,%eax
imul %esi,%eax
imul %edx,%eax
test %ecx,%ecx
jle 15 <func1+0x15>
lea (%rcx,%rsi,2),%r9d
sub %r8d,%r9d
jmp 1c <func1+0x1c>
lea (%r8,%rsi,2),%r9d
add %r8d,%r9d
lea 0x1(%r9,%rdi,1),%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a2 + a5 - a1;
    }
    v8 = a4 * a2 * a3;
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        v9 += (a4 + a2) * a5;
    }
    if (v6 < a4)
    {
        v11 = (a4 - (a5 - a2)) + a2;
    }
    else
    {
        v11 = (a2 + (a5 + a2)) + a5;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 9
4 15
5 15
6 17
7 17
8 17
9 21
10 21
11 23
12 23
13 23
14 23
15 23
16 23
17 24
<<<sep_out_sample>>>
lea (%rsi,%rdx,1),%eax
cmp %edi,%esi
jge d <func1+0xd>
lea 0x1(%rsi),%eax
imul %ecx,%eax
lea (%rdi,%rdx,1),%r9d
add %r9d,%esi
add %r8d,%esi
add %esi,%ecx
lea 0x1(%rax,%rcx,1),%eax
imul %edx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a2 < a1)
    {
        v6 = a4 * a2 + a4;
    }
    else
    {
        v6 = a2 + a3;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        if (v7 < a4)
        {
            v7 += a2 * (a5 * a3);
        }
        else
        {
            v7 += a4 * a4;
        }
    }
    v9 = (a4 + a1 - a4) * a3;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 25
7 25
8 25
9 25
10 25
11 24
12 25
13 26
<<<sep_out_sample>>>
mov %esi,%eax
sub %edi,%eax
mov %r8d,%r10d
sub %esi,%r10d
cmp %edx,%esi
cmovl %eax,%r10d
cmp %r8d,%edi
jge 24 <func1+0x24>
lea (%rdx,%rsi,1),%eax
imul %r8d,%eax
mov %esi,%r9d
sub %eax,%r9d
jmp 2c <func1+0x2c>
mov %esi,%eax
sub %edi,%eax
lea (%rax,%rdx,2),%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a2 < a3)
    {
        v6 = a2 - a1;
    }
    else
    {
        v6 = a5 - a2;
    }
    if (a1 < a5)
    {
        v7 = a2 - (a3 + a2) * a5;
    }
    else
    {
        v7 = a2 - a1 + a3 + a3;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 6
6 6
7 12
8 12
9 14
10 14
11 14
12 14
13 14
14 18
15 18
16 18
17 20
18 20
19 20
20 20
21 20
22 20
23 21
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%r9d
imul %edi,%r9d
cmp %edi,%ecx
jge 1e <func1+0x1e>
mov %r8d,%eax
imul %r8d,%eax
mov %edx,%r11d
sub %eax,%r11d
mov %r11d,%eax
jmp 2c <func1+0x2c>
lea (%rdx,%r8,1),%eax
mov %edi,%r10d
imul %ecx,%r10d
sub %r10d,%eax
add %r9d,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (v7 < a3)
        {
            v6 += a1 + (a3 - a4);
        }
        else
        {
            v6 += (a1 + a2) + a3;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += a4 + (a2 + a1);
    }
    v10 = a1 * (a1 + a3);
    if (a4 < a1)
    {
        v11 = a3 - a5 * a5;
    }
    else
    {
        v11 = a3 + a5 - a1 * a4;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 22
4 22
5 24
6 24
7 24
8 24
9 24
10 24
11 28
12 28
13 28
14 28
15 30
16 30
17 30
18 30
19 30
20 30
21 31
<<<sep_out_sample>>>
cmp %r8d,%edi
jl 22 <func1+0x22>
lea (%rsi,%rdx,1),%eax
mov $0x1,%r9d
sub %eax,%r9d
imul %edi,%r9d
mov %edi,%eax
imul %ecx,%eax
sub %r8d,%eax
imul %esi,%eax
jmp 31 <func1+0x31>
mov %esi,%eax
imul %edx,%eax
sub %ecx,%eax
sub %edx,%eax
mov $0x0,%r9d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a1 < a5)
    {
        v6 = a1 * (a2 - a2) * a3;
    }
    else
    {
        v6 = a1 - a1 * (a2 + a3);
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += (a4 + a1) + a3;
    }
    if (a1 < a5)
    {
        v9 = (a2 * a3 - a4) - a3;
    }
    else
    {
        v9 = (a1 * a4 - a5) * a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 10
4 10
5 10
6 10
7 23
8 23
9 23
10 23
11 23
12 19
13 19
14 19
15 19
16 6
17 25
18 25
19 25
20 25
21 25
22 25
23 26
<<<sep_out_sample>>>
cmp %esi,%r8d
jge f <func1+0xf>
lea -0x1(%rcx),%eax
imul %edx,%eax
sub %ecx,%eax
jmp 1b <func1+0x1b>
lea (%rcx,%r8,1),%r9d
mov %edi,%eax
imul %edi,%eax
add %r9d,%eax
lea 0x1(%rdi,%rdx,1),%r9d
add %r9d,%esi
add %r8d,%esi
add %esi,%ecx
add %eax,%ecx
sub $0x1,%r8d
imul %r8d,%edi
add %edi,%edx
lea 0x1(%rcx,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    if (a5 < a2)
    {
        v6 = a4 * a3 - a3 - a4;
    }
    else
    {
        v6 = a4 + a5 + a1 * a1;
    }
    v7 = a3 + ((a5 * a1) - a1);
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        if (v7 < a3)
        {
            v8 += (a1 + a2) - a1;
        }
        else
        {
            v8 += a5 - (a1 + a4);
        }
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a3)
    {
        v10 += a2 + a2;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 10
11 30
12 30
13 30
14 30
15 30
16 12
17 12
18 12
19 30
20 31
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (a5 < a4)
        {
            v6 += (a3 - a5) * a4;
        }
        else
        {
            v6 += a4 - (a2 - a1);
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += a1 + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 21
5 22
<<<sep_out_sample>>>
mov %edi,%eax
imul %edx,%eax
sub %esi,%eax
add %ecx,%eax
lea (%rcx,%rsi,1),%r9d
test %r8d,%r8d
jg 1c <func1+0x1c>
mov %edx,%r9d
sub %ecx,%r9d
lea (%r9,%r8,2),%r9d
add %r9d,%edi
add %edi,%edx
add %esi,%edx
add %edx,%r8d
add %r8d,%ecx
lea 0x1(%rsi,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = (a2 + a1) - a1;
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        if (a2 < a2)
        {
            v7 += a5 - a3 + a3;
        }
        else
        {
            v7 += a1 - a2 - a1;
        }
    }
    if (a4 < a4)
    {
        v9 = a5 - a3 * a2 - a1;
    }
    else
    {
        v9 = a1 * a3 - a2 + a4;
    }
    if (v10 < a5)
    {
        v10 = a4 + a2;
    }
    else
    {
        v10 = a5 + (a3 - a4 + a5);
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 23
2 23
3 23
4 23
5 27
6 25
7 25
8 31
9 31
10 31
11 33
12 33
13 33
14 33
15 33
16 33
17 33
18 34
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %r8d,%edx
add %ecx,%edx
imul %r8d,%edi
mov %ecx,%eax
sub %edi,%eax
imul %ecx,%eax
add %edx,%eax
sub %ecx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = (a4 - a5 * a1) * a4;
    if (a4 < a4)
    {
        v7 = a5 + a2 + a2 + a3;
    }
    else
    {
        v7 = ((a3 - a3) + a2) - a4;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 13
2 13
3 13
4 13
5 4
6 4
7 4
8 4
9 13
10 11
11 13
12 14
<<<sep_out_sample>>>
lea (%r8,%rcx,1),%r9d
imul %edi,%r9d
add %esi,%r9d
lea (%rsi,%rdx,1),%eax
cmp $0x1,%edx
jle 19 <func1+0x19>
lea (%rdi,%rcx,2),%eax
sub %r8d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a2 + a1 * (a5 + a4);
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += (a3 + a2) + a5;
    }
    if (v8 < a3)
    {
        v9 = ((a1 + a4) - a5) + a4;
    }
    else
    {
        v9 = (a2 + a2 - a2) + a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 16
5 10
6 10
7 12
8 12
9 18
10 18
11 18
12 18
13 18
14 18
15 19
<<<sep_out_sample>>>
cmp %ecx,%esi
jge c <func1+0xc>
mov %ecx,%r9d
sub %edx,%r9d
jmp 19 <func1+0x19>
mov %edi,%r9d
sub %edx,%r9d
add %r8d,%r9d
imul %r8d,%r9d
mov %edi,%eax
sub %edx,%eax
cmp %edx,%r9d
jge 2f <func1+0x2f>
mov %edi,%r10d
sub %ecx,%r10d
lea (%rsi,%r8,1),%eax
add %r10d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a2 < a4)
    {
        v6 = a4 - a3;
    }
    else
    {
        v6 = (a1 - a3 + a5) * a5;
    }
    if (v6 < a3)
    {
        v7 = a1 - a4 + (a2 + a5);
    }
    else
    {
        v7 = a1 - a3;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 10
10 18
11 18
12 12
13 12
14 14
15 14
16 14
17 14
18 20
19 20
20 20
21 20
22 20
23 20
24 21
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %edx,%r8d
lea 0x1(%rcx,%r8,1),%eax
imul %esi,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a3 + a1 - a1;
    }
    v8 = a2 * a1;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 9
6 10
7 11
<<<sep_out_sample>>>
lea (%rsi,%rdi,1),%r9d
sub %edx,%r9d
lea (%rcx,%r8,1),%eax
mov %ecx,%r10d
sub %edx,%r10d
mov %edx,%r11d
neg %r11d
sub %edx,%r10d
cmp %ecx,%esi
cmovl %r11d,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea (%r9,%rcx,2),%edx
lea 0x1(%rdx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a5 - (a1 + a3);
    }
    v8 = (a2 + a1) - a3 + a4;
    if (a5 < a5)
    {
        v9 = a1 + a3 - a1 + a3;
    }
    else
    {
        v9 = a4 + a5;
    }
    if (a2 < a4)
    {
        v10 = ((a2 - a2) * a4) - a3;
    }
    else
    {
        v10 = a4 - a3 - a3;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 16
4 24
5 24
6 20
7 20
8 20
9 20
10 20
11 26
12 26
13 26
14 26
15 26
16 26
17 26
18 27
<<<sep_out_sample>>>
mov %esi,%r9d
imul %edx,%r9d
lea (%rcx,%rcx,1),%eax
cmp %edi,%esi
jge 16 <func1+0x16>
lea (%rcx,%rdi,1),%eax
sub %esi,%eax
add %r8d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a2 * a3;
    if (a2 < a1)
    {
        v7 = (a4 + a1 - a2) + a5;
    }
    else
    {
        v7 = a4 + a4;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        if (v6 < a5)
        {
            v8 += (a3 * a2) * a2;
        }
        else
        {
            v8 += a2 * a2 - a5;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 11
4 5
5 5
6 7
7 7
8 7
9 25
10 25
11 25
12 25
13 25
14 25
15 26
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (a5 < a2)
        {
            v6 += a2 * a5;
        }
        else
        {
            v6 += a1 - a4 + a5;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        if (v8 < a2)
        {
            v8 += a4 + (a4 + a4);
        }
        else
        {
            v8 += a2 * (a3 - a3);
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 28
2 28
3 28
4 28
5 29
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
add %esi,%ecx
imul %edx,%edi
imul %edi,%r8d
imul %edx,%r8d
add %r8d,%ecx
imul %edx,%edx
lea 0x1(%rcx,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = (a3 * a1 * a5) * a3;
    v7 = a3 * a3;
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += a2 - a3;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a4)
    {
        v10 += (a2 - a4) + a5;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 16
4 16
5 4
6 4
7 4
8 16
9 5
10 16
11 17
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = (a3 - a3) * a3 * a3;
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += a5 + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 11
<<<sep_out_sample>>>
lea (%rsi,%rcx,2),%r9d
cmp %r8d,%edx
jge 18 <func1+0x18>
mov %r8d,%r9d
imul %edx,%r9d
mov %edi,%eax
imul %edi,%eax
add %eax,%r9d
mov %ecx,%r10d
imul %edi,%r10d
lea (%r8,%rsi,1),%eax
cmp %ecx,%r9d
jge 34 <func1+0x34>
mov $0x1,%eax
sub %ecx,%eax
imul %edx,%eax
add %edi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
add %r10d,%r9d
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a3 < a5)
    {
        v6 = a5 * a3 + (a1 * a1);
    }
    else
    {
        v6 = a4 + (a4 + a2);
    }
    v7 = a4 * a1;
    if (v6 < a4)
    {
        v8 = a3 - a4 * a3 + a1;
    }
    else
    {
        v8 = a5 + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 6
7 6
8 6
9 12
10 12
11 19
12 13
13 13
14 15
15 15
16 15
17 15
18 21
19 21
20 21
21 21
22 21
23 21
24 21
25 22
<<<sep_out_sample>>>
mov %esi,%eax
imul %edi,%eax
imul %ecx,%eax
imul %edx,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %esi,%edx
add %r8d,%edx
add %ecx,%edx
add %r8d,%ecx
imul %ecx,%esi
add %edx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = (a5 + a4) * a2;
    v7 = a1 - a1;
    v8 = ((a2 * a1) * a4) * a3;
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        v9 += a5 - a1 + a4;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 12
6 12
7 12
8 12
9 4
10 4
11 12
12 12
13 13
<<<sep_out_sample>>>
mov %edx,%eax
imul %ecx,%eax
add %r8d,%eax
sub %edi,%eax
cmp %r8d,%edx
jge 1b <func1+0x1b>
mov %edx,%r10d
imul %esi,%r10d
add %ecx,%r10d
jmp 2b <func1+0x2b>
mov %esi,%r9d
imul %edi,%r9d
mov %edx,%r10d
sub %r9d,%r10d
add %edi,%r10d
mov %ecx,%r9d
sub %edi,%r9d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a3 * a4 + a5 - a1;
    if (a3 < a5)
    {
        v7 = a4 + (a3 * a2);
    }
    else
    {
        v7 = a1 + (a3 - a2 * a1);
    }
    v8 = (a1 - a2) - a1 + a2;
    v9 = a4 - a1;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 5
6 5
7 7
8 7
9 7
10 7
11 11
12 11
13 11
14 11
15 11
16 14
17 14
18 15
19 15
20 15
21 15
22 15
23 15
24 15
25 16
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %eax,%ecx
imul %edx,%esi
add %esi,%edi
sub %r8d,%edi
lea 0x1(%rcx,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a1 + (a3 * a2) - a5;
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += a3 - a1 + a1;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        v9 += a2 + a3 - a5;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 15
2 15
3 15
4 15
5 4
6 4
7 4
8 15
9 16
<<<sep_out_sample>>>
test %esi,%esi
jle 11 <func1+0x11>
mov %r8d,%eax
imul %edi,%eax
imul %ecx,%eax
add %edx,%eax
jmp 1c <func1+0x1c>
mov %r8d,%eax
imul %edx,%eax
add %ecx,%eax
add %r8d,%eax
add %edx,%edi
add %edi,%esi
add %r8d,%esi
add %ecx,%esi
add %eax,%esi
add $0x1,%edx
imul %edx,%r8d
add %r8d,%ecx
lea 0x1(%rsi,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (v6 < a2)
    {
        v6 = (a5 * a1 * a4) + a3;
    }
    else
    {
        v6 = (a5 * a3) + a4 + a5;
    }
    v7 = a3 * a5 + a5 + a4;
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        if (a2 < a5)
        {
            v8 += (a1 - a2) * a5;
        }
        else
        {
            v8 += a2 + a3 - a4;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 25
13 25
14 25
15 25
16 25
17 12
18 12
19 12
20 25
21 26
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %ecx,%esi
lea (%rsi,%r8,2),%esi
lea (%rax,%rsi,1),%ecx
mov %edi,%eax
sub %edx,%eax
imul %edx,%edi
sub %edi,%eax
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a5 < a5)
    {
        v6 = a1 - (a4 * a3) + a5;
    }
    else
    {
        v6 = a2 + a4 + a5 + a5;
    }
    v7 = a1 - a3 - a1 * a3;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 13
2 13
3 13
4 13
5 10
6 10
7 13
8 12
9 12
10 12
11 12
12 13
13 14
<<<sep_out_sample>>>
cmp %ecx,%esi
jle 10 <func1+0x10>
lea (%r8,%rsi,1),%eax
imul %r8d,%eax
add %ecx,%eax
jmp 16 <func1+0x16>
lea (%r8,%rdi,2),%eax
add %edx,%eax
cmp %edi,%r8d
jge 28 <func1+0x28>
mov %edi,%r9d
imul %edx,%r9d
imul %ecx,%r9d
jmp 3c <func1+0x3c>
mov %edi,%r9d
imul %edx,%r9d
mov %ecx,%r10d
sub %r9d,%r10d
mov %r10d,%r9d
imul %esi,%r9d
lea 0x1(%r9,%rdi,1),%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a4 - a4 + a2;
    }
    if (a4 < a2)
    {
        v8 = ((a5 + a2) * a5) + a4;
    }
    else
    {
        v8 = a3 + (a5 + (a1 + a1));
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a1)
    {
        v9 += a1 + a1;
    }
    if (a5 < a1)
    {
        v11 = (a1 * a3) * a4;
    }
    else
    {
        v11 = a2 * (a4 - a1 * a3);
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 15
8 15
9 22
10 22
11 24
12 24
13 24
14 24
15 28
16 28
17 28
18 28
19 28
20 28
21 30
22 30
23 30
24 30
25 30
26 30
27 31
<<<sep_out_sample>>>
lea (%rdx,%rdx,1),%r9d
imul %ecx,%r9d
add %edi,%r9d
cmp %esi,%edx
jge 16 <func1+0x16>
mov %edx,%eax
imul %esi,%eax
jmp 20 <func1+0x20>
mov %edx,%eax
imul %ecx,%eax
sub %r8d,%eax
add %edx,%eax
mov %edx,%r10d
imul %edx,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a1 + (a3 + a3) * a4;
    if (a3 < a2)
    {
        v7 = (a2 - a3 + a3) * a3;
    }
    else
    {
        v7 = a3 * a4 - a5 + a3;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += a4 + (a5 + a2);
    }
    v10 = a3 * a3;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 5
5 5
6 7
7 7
8 7
9 11
10 11
11 11
12 11
13 18
14 18
15 19
16 19
17 19
18 19
19 19
20 19
21 19
22 20
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %edx,%r8d
lea (%rsi,%rcx,2),%eax
lea 0x1(%rax,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += (a1 * a2) * a4;
    }
    v8 = a4 + a2;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 9
5 10
6 11
<<<sep_out_sample>>>
test %edx,%edx
jle b <func1+0xb>
mov %ecx,%eax
imul %edx,%eax
jmp 16 <func1+0x16>
mov %ecx,%eax
imul %esi,%eax
imul %r8d,%eax
sub %edx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (v6 < a3)
    {
        v6 = a4 * a3;
    }
    else
    {
        v6 = (a4 * a2 * a5) - a3;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        if (v7 < a3)
        {
            v7 += (a2 - a2) * a2;
        }
        else
        {
            v7 += (a4 * a4) - a1;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 10
10 24
11 24
12 24
13 24
14 24
15 25
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a1 + a3 * a1;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        if (v6 < a4)
        {
            v8 += a3 * (a2 + a2);
        }
        else
        {
            v8 += a1 - a5;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 21
5 22
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
mov %edi,%r9d
imul %edi,%r9d
sub %edx,%r9d
add %r9d,%esi
lea 0x1(%rax,%rsi,1),%eax
sub %ecx,%r8d
sub %edx,%r8d
add %r8d,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a2 - (a3 - (a1 * a1));
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a3 + a2;
    }
    v9 = a1 - (a4 - a5 + a3);
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 11
5 4
6 4
7 4
8 4
9 11
10 10
11 10
12 10
13 11
14 12
<<<sep_out_sample>>>
mov %esi,%r10d
sub %edx,%r10d
lea (%rdi,%r8,1),%r9d
cmp %ecx,%edx
jg 19 <func1+0x19>
lea (%rdx,%rdx,1),%r9d
imul %esi,%r9d
sub %ecx,%r9d
test %edx,%edx
jle 2c <func1+0x2c>
mov %ecx,%r11d
sub %r8d,%r11d
add %esi,%r11d
imul %edi,%r11d
jmp 2f <func1+0x2f>
mov %ecx,%r11d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea (%rcx,%r10,1),%eax
add %r9d,%eax
add %r11d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a1 < a1)
    {
        v6 = a4 * a2 + a3 * a2;
    }
    else
    {
        v6 = a2 - a3;
    }
    if (a4 < a3)
    {
        v7 = a1 + a5;
    }
    else
    {
        v7 = (a3 + a3) * a2 - a4;
    }
    if (v8 < a3)
    {
        v8 = a1 * (a4 - a5 + a2);
    }
    else
    {
        v8 = a4 - a2 + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 14
4 12
5 12
6 18
7 18
8 18
9 20
10 20
11 22
12 22
13 22
14 22
15 22
16 26
17 28
18 28
19 28
20 28
21 28
22 28
23 28
24 29
<<<sep_out_sample>>>
lea 0x2(%rdx),%r11d
imul %edi,%r11d
cmp %r8d,%esi
jge 24 <func1+0x24>
mov %edx,%r10d
sub %edi,%r10d
mov %ecx,%r9d
imul %esi,%r9d
imul %edi,%r9d
imul %esi,%r9d
jmp 38 <func1+0x38>
lea (%rsi,%r8,1),%r10d
add %edx,%r10d
mov %ecx,%r9d
imul %edx,%r9d
sub %r8d,%r9d
sub %ecx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a2 < a2)
    {
        v6 = a3 - a1 + a4 * a1;
    }
    else
    {
        v6 = a1 + a3 * a1 + a1;
    }
    if (a2 < a5)
    {
        v7 = (a3 + a5 - a5) - a1;
    }
    else
    {
        v7 = a3 + (a2 + a5);
    }
    if (a2 < a5)
    {
        v8 = (a4 * a2) * a1 * a2;
    }
    else
    {
        v8 = (a4 * a3) - a5 - a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 12
4 12
5 14
6 14
7 22
8 22
9 22
10 22
11 22
12 18
13 18
14 26
15 26
16 26
17 26
18 28
19 28
20 28
21 28
22 28
23 28
24 28
25 29
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%eax
add %r8d,%edx
imul %edx,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (a4 < a2)
        {
            v6 += (a5 * a4) + a1;
        }
        else
        {
            v6 += a3 - a3;
        }
    }
    v8 = a5 * a4 + a4 * a3;
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        if (a4 < a3)
        {
            v9 += (a5 - a3) - a2;
        }
        else
        {
            v9 += a2 * a4;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 29
2 29
3 29
4 29
5 16
6 16
7 29
8 30
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %edx,%r8d
add %r8d,%ecx
imul %esi,%esi
lea 0x1(%rcx,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a2 * a2;
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += a3 * a3 * a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 4
6 10
7 11
<<<sep_out_sample>>>
test %edi,%edi
jle 10 <func1+0x10>
mov %esi,%eax
imul %r8d,%eax
sub %edi,%eax
sub %ecx,%eax
jmp 1a <func1+0x1a>
lea 0x1(%r8),%eax
imul %ecx,%eax
imul %ecx,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (v6 < a1)
    {
        v6 = a2 * a5 - a1 - a4;
    }
    else
    {
        v6 = (a4 + a5 * a4) * a4;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        if (a1 < a3)
        {
            v7 += a5 + a5 - a1;
        }
        else
        {
            v7 += a1 * a1 * a2;
        }
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a1)
    {
        v9 += (a3 - a2) * a1;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 29
12 29
13 29
14 29
15 29
16 30
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
add %r8d,%ecx
imul %esi,%edi
lea 0x1(%rcx,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a1 * a2;
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        if (a5 < a4)
        {
            v7 += (a3 * a5) - a4;
        }
        else
        {
            v7 += a2 + a1;
        }
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        if (v6 < a5)
        {
            v9 += a1 + a4 * a4;
        }
        else
        {
            v9 += a3 - a1;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 29
2 29
3 29
4 29
5 4
6 29
7 30
<<<sep_out_sample>>>
mov %edx,%eax
neg %eax
cmp %ecx,%edx
jl f <func1+0xf>
mov %r8d,%eax
imul %r8d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (a2 < a5)
        {
            v6 += (a3 * a2) + a3;
        }
        else
        {
            v6 += a2 - a4 * a1;
        }
    }
    if (a3 < a4)
    {
        v8 = a4 - a3 - a4;
    }
    else
    {
        v8 = a5 * a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 18
2 18
3 16
4 16
5 22
6 22
7 24
8 24
9 24
10 24
11 24
12 25
<<<sep_out_sample>>>
mov %edi,%r10d
imul %ecx,%r10d
cmp %esi,%edi
jge 16 <func1+0x16>
lea -0x1(%rdi,%rsi,1),%r9d
imul %esi,%r9d
jmp 1e <func1+0x1e>
lea (%rcx,%rdx,2),%r9d
imul %r8d,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
add %r8d,%edx
imul %edx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a1 * a4;
    if (a1 < a2)
    {
        v7 = ((a2 + a1) * a2) - a2;
    }
    else
    {
        v7 = (a4 + a3 + a3) * a5;
    }
    v8 = (a3 + a5) * a1;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 5
4 5
5 7
6 7
7 7
8 11
9 11
10 14
11 14
12 14
13 14
14 14
15 14
16 13
17 13
18 14
19 15
<<<sep_out_sample>>>
cmp %ecx,%esi
jge 9 <func1+0x9>
lea (%rdx,%rdx,1),%eax
jmp 17 <func1+0x17>
mov %esi,%r9d
sub %edi,%r9d
mov %ecx,%eax
imul %ecx,%eax
add %r9d,%eax
lea -0x1(%rdi,%rsi,1),%r9d
imul %esi,%r9d
add %r9d,%edi
add %edi,%edx
add %esi,%edx
add %r8d,%edx
add %edx,%ecx
add %eax,%ecx
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a2 < a4)
    {
        v6 = a3 + a3;
    }
    else
    {
        v6 = a2 - a1 + a4 * a4;
    }
    v7 = a2 + a5;
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += (a5 + a4) + a5;
    }
    v10 = ((a1 + a2) * a2) - a2;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 10
6 10
7 10
8 10
9 10
10 18
11 18
12 19
13 19
14 19
15 19
16 19
17 19
18 12
19 19
20 20
<<<sep_out_sample>>>
test %ecx,%ecx
jle 10 <func1+0x10>
mov %ecx,%r9d
imul %esi,%r9d
add %r8d,%r9d
jmp 17 <func1+0x17>
mov %ecx,%r9d
imul %esi,%r9d
mov %esi,%eax
sub %r8d,%eax
test %edx,%edx
jle 26 <func1+0x26>
mov %edx,%eax
sub %esi,%eax
add %edi,%eax
mov %ecx,%r10d
sub %r8d,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %r9d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (v6 < a4)
        {
            v6 += (a1 - a3) - a1;
        }
        else
        {
            v6 += a1 - a1 - a3;
        }
    }
    if (v8 < a4)
    {
        v8 = (a4 * a2) + a5;
    }
    else
    {
        v8 = a4 * a2;
    }
    if (v9 < a3)
    {
        v9 = a3 - a2 + a1;
    }
    else
    {
        v9 = a2 - a5;
    }
    v10 = a4 - a5;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 18
7 22
8 22
9 30
10 30
11 24
12 24
13 26
14 26
15 26
16 32
17 32
18 33
19 33
20 33
21 33
22 33
23 33
24 33
25 34
<<<sep_out_sample>>>
add %edi,%edx
lea (%rdx,%rsi,1),%eax
add %eax,%r8d
lea (%rdx,%rcx,2),%edx
lea (%rdx,%r8,1),%eax
imul %edi,%esi
imul %esi,%ecx
add %ecx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a4 + (a1 + a3);
    v7 = (a1 * a2) * a4 + a1;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 6
3 6
4 4
5 6
6 5
7 5
8 5
9 6
10 7
<<<sep_out_sample>>>
cmp %edi,%esi
jle f <func1+0xf>
mov %esi,%eax
imul %esi,%eax
add %ecx,%eax
sub %edi,%eax
jmp 1c <func1+0x1c>
lea (%r8,%rdx,2),%eax
mov %edi,%r9d
sub %eax,%r9d
mov %r9d,%eax
lea 0x1(%rax,%rdi,1),%eax
add %eax,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (a2 < a1)
        {
            v6 += a1 - a2;
        }
        else
        {
            v6 += (a5 - a4) - a3;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += a2 * a2 + a4;
    }
    if (a1 < a2)
    {
        v10 = a4 + a2 * a2 - a1;
    }
    else
    {
        v10 = a1 - (a3 + a5 + a3);
    }
    v11 = 0;
    for (v12 = 0; v12++; v12<a5)
    {
        v11 += a1 - a5;
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 23
4 23
5 23
6 23
7 23
8 27
9 27
10 27
11 27
12 34
13 34
14 34
15 34
16 34
17 35
<<<sep_out_sample>>>
test %edx,%edx
jle d <func1+0xd>
mov %esi,%r10d
imul %ecx,%r10d
jmp 18 <func1+0x18>
mov %esi,%r10d
imul %esi,%r10d
imul %edi,%r10d
mov %edi,%r9d
sub %ecx,%r9d
cmp %ecx,%edx
jg 29 <func1+0x29>
mov %edx,%r9d
imul %edi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (v6 < a3)
    {
        v6 = a2 * a4;
    }
    else
    {
        v6 = a2 * a2 * a1;
    }
    if (a4 < a3)
    {
        v7 = a1 - a4;
    }
    else
    {
        v7 = ((a3 + a2) - a2) * a1;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 14
10 14
11 12
12 12
13 18
14 18
15 20
16 20
17 20
18 20
19 20
20 20
21 21
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %eax,%ecx
imul %r8d,%edx
sub %esi,%edx
lea (%rcx,%rdi,2),%eax
lea (%rax,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = (a5 * a3) - a2 + a1;
    if (a1 < a1)
    {
        v7 = a1 - (a3 - a3 - a5);
    }
    else
    {
        v7 = a2 - a2 + a1;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 13
2 13
3 13
4 13
5 4
6 4
7 13
8 13
9 14
<<<sep_out_sample>>>
mov %r8d,%r9d
sub %esi,%r9d
cmp %ecx,%edx
jge 17 <func1+0x17>
mov %edi,%r9d
imul %esi,%r9d
add %edx,%r9d
add %r8d,%r9d
mov %ecx,%eax
sub %esi,%eax
test %esi,%esi
jle 2a <func1+0x2a>
mov %esi,%eax
imul %edx,%eax
imul %r8d,%eax
add %ecx,%eax
cmp %edi,%eax
jge 34 <func1+0x34>
lea (%r8,%r8,1),%r10d
jmp 42 <func1+0x42>
mov %r8d,%r10d
sub %ecx,%r10d
imul %edx,%r10d
imul %edx,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%r9d
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (a1 < a1)
        {
            v6 += (a4 * a4) - a4;
        }
        else
        {
            v6 += a1 - (a5 - a5);
        }
    }
    if (a3 < a4)
    {
        v8 = (a3 + (a1 * a2)) + a5;
    }
    else
    {
        v8 = (a5 - a5) - a2 + a5;
    }
    if (v6 < a2)
    {
        v9 = a4 + a2 * a3 * a5;
    }
    else
    {
        v9 = a4 - a2;
    }
    if (v9 < a1)
    {
        v10 = a5 + a5;
    }
    else
    {
        v10 = ((a5 - a4) * a3) * a3;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 16
4 16
5 18
6 18
7 18
8 18
9 30
10 30
11 24
12 24
13 26
14 26
15 26
16 26
17 32
18 32
19 34
20 34
21 38
22 38
23 38
24 38
25 40
26 40
27 40
28 40
29 40
30 40
31 40
32 41
<<<sep_out_sample>>>
cmp %ecx,%edi
jge 10 <func1+0x10>
mov %ecx,%eax
imul %ecx,%eax
imul %edx,%eax
sub %ecx,%eax
jmp 16 <func1+0x16>
mov %r8d,%eax
imul %edx,%eax
add %edi,%edx
add %esi,%edx
add %edx,%r8d
add %ecx,%r8d
add %eax,%r8d
imul %ecx,%ecx
imul %ecx,%edi
sub %esi,%edi
lea 0x1(%r8,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a1 < a4)
    {
        v6 = a4 * a4 * a3 - a4;
    }
    else
    {
        v6 = a5 * a3;
    }
    v7 = (a4 * a4) * a1 - a2;
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        if (a2 < a2)
        {
            v8 += (a1 * a1) - a5;
        }
        else
        {
            v8 += a1 + a1;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 25
11 25
12 25
13 25
14 25
15 12
16 12
17 12
18 25
19 26
<<<sep_out_sample>>>
lea (%rdi,%r8,1),%r10d
sub %ecx,%r10d
add %edx,%r10d
mov %ecx,%r9d
sub %edi,%r9d
mov %esi,%eax
imul %edi,%eax
add %r9d,%eax
mov %ecx,%r9d
sub %esi,%r9d
cmp %eax,%edi
jle 2f <func1+0x2f>
mov $0x1,%r9d
sub %ecx,%r9d
imul %edi,%r9d
add %r9d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %r10d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (a3 < a2)
        {
            v6 += a1 * a1 - a2;
        }
        else
        {
            v6 += a3 - a3 * a5;
        }
    }
    v8 = a3 + (a1 + a5 - a4);
    v9 = (a4 - a1) + a2 * a1;
    if (v9 < a1)
    {
        v10 = a1 - (a1 * a4);
    }
    else
    {
        v10 = a4 - a2;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 16
4 17
5 17
6 17
7 17
8 17
9 24
10 24
11 18
12 18
13 20
14 20
15 20
16 26
17 26
18 26
19 26
20 26
21 26
22 26
23 27
<<<sep_out_sample>>>
lea 0x2(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12, v13 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (a2 < a2)
        {
            v6 += a1 - a5;
        }
        else
        {
            v6 += a4 - a5 + a1;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += a3 - a5 + a4;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a5)
    {
        v10 += a4 - (a2 - a4);
    }
    v12 = 0;
    for (v13 = 0; v13++; v13<a3)
    {
        v12 += (a3 - a2) - a4;
    }
    return v12+v13+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 31
2 31
3 31
4 31
5 32
<<<sep_out_sample>>>
lea (%r8,%rdx,1),%eax
mov %esi,%r9d
sub %edx,%r9d
cmp %esi,%edi
cmovl %eax,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
imul %r8d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a1 < a2)
    {
        v6 = a5 + a3;
    }
    else
    {
        v6 = a2 - a3;
    }
    v7 = a3 * a5;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 6
6 13
7 13
8 13
9 13
10 13
11 12
12 13
13 14
<<<sep_out_sample>>>
push %rbx
mov %r8d,%eax
imul %edx,%eax
sub %esi,%eax
lea (%rdx,%rdi,1),%r9d
cmp %edi,%r8d
jge 1f <func1+0x1f>
mov %esi,%r9d
sub %edi,%r9d
imul %edx,%r9d
add %r8d,%r9d
lea (%rdi,%rcx,1),%r11d
imul %ecx,%r11d
imul %r8d,%r11d
cmp %edx,%r8d
jge 45 <func1+0x45>
mov %edi,%r10d
imul %edi,%r10d
add %ecx,%r10d
mov %r8d,%ebx
sub %r10d,%ebx
mov %ebx,%r10d
jmp 50 <func1+0x50>
mov %edx,%r10d
imul %edx,%r10d
imul %r8d,%r10d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%eax
add %r9d,%eax
add %r11d,%eax
add %r10d,%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = (a5 * a3) - a2;
    if (a5 < a1)
    {
        v7 = a5 + (a2 - a1) * a3;
    }
    else
    {
        v7 = a3 + a1;
    }
    v8 = a5 * ((a1 + a4) * a4);
    if (a5 < a3)
    {
        v9 = a5 - (a4 + a1 * a1);
    }
    else
    {
        v9 = a3 * a3 * a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 4
3 4
4 4
5 11
6 5
7 5
8 7
9 7
10 7
11 7
12 13
13 13
14 13
15 14
16 14
17 16
18 16
19 16
20 16
21 16
22 16
23 16
24 20
25 20
26 20
27 22
28 22
29 22
30 22
31 22
32 22
33 22
34 22
35 23
36 23
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
imul %ecx,%edi
imul %esi,%edi
add %eax,%edi
imul %r8d,%edx
add %edx,%ecx
sub %esi,%ecx
lea (%rdi,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a2 < a2)
    {
        v6 = a3 + a3;
    }
    else
    {
        v6 = a4 * a1 * a2;
    }
    v7 = a5 * a3 + a4 - a2;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 13
2 13
3 13
4 13
5 10
6 10
7 13
8 12
9 12
10 12
11 13
12 14
<<<sep_out_sample>>>
lea (%r8,%rcx,1),%eax
mov %esi,%r10d
sub %edx,%r10d
cmp %r8d,%ecx
cmovl %eax,%r10d
cmp %edx,%ecx
jle 21 <func1+0x21>
lea (%rdx,%rsi,1),%r9d
sub %edi,%r9d
add %ecx,%r9d
jmp 28 <func1+0x28>
mov %edx,%r9d
imul %ecx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
add %edx,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a4 < a5)
    {
        v6 = a5 + a4;
    }
    else
    {
        v6 = a2 - a3;
    }
    if (a3 < a4)
    {
        v7 = (a3 + a2) - a1 + a4;
    }
    else
    {
        v7 = a3 * a4;
    }
    v8 = a3 + a4;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 6
6 12
7 12
8 14
9 14
10 14
11 14
12 18
13 18
14 21
15 21
16 21
17 21
18 21
19 21
20 20
21 21
22 22
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (v7 < a2)
        {
            v6 += (a3 - a2) + a2;
        }
        else
        {
            v6 += a3 - a4 - a3;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        if (a3 < a3)
        {
            v8 += a5 * a2 - a1;
        }
        else
        {
            v8 += (a4 + a3) * a1;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 28
2 28
3 28
4 28
5 29
<<<sep_out_sample>>>
mov %esi,%eax
sub %edi,%eax
imul %edi,%eax
imul %edx,%eax
lea (%rcx,%rsi,1),%r9d
sub %r8d,%r9d
cmp %r8d,%edi
jg 21 <func1+0x21>
lea (%rdi,%rsi,1),%r9d
add %r8d,%r9d
imul %r8d,%r9d
lea 0x1(%r9,%rdi,1),%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    if (a5 < a5)
    {
        v6 = a3 * a5;
    }
    else
    {
        v6 = ((a2 - a1) * a1) * a3;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += a4 * a3 * a5;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        v9 += a2 - (a5 * a3);
    }
    if (a5 < a1)
    {
        v11 = a4 + a2 - a5;
    }
    else
    {
        v11 = (a1 + a2 + a5) * a5;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 24
6 24
7 22
8 22
9 28
10 28
11 28
12 30
13 30
14 30
15 30
16 30
17 30
18 31
<<<sep_out_sample>>>
mov %edx,%r10d
imul %esi,%r10d
mov %r8d,%eax
imul %r8d,%eax
add %eax,%r10d
lea (%rcx,%r8,1),%r9d
cmp %r8d,%esi
mov $0x0,%eax
cmovl %eax,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
imul %ecx,%edi
imul %edi,%edx
add %edx,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = (a3 * a2) + a5 * a5;
    if (a2 < a5)
    {
        v7 = (a3 + a5 - a5) - a3;
    }
    else
    {
        v7 = a4 + a5;
    }
    v8 = (a4 * a1) * a3 + a4;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 4
6 11
7 11
8 11
9 11
10 14
11 14
12 14
13 14
14 14
15 14
16 13
17 13
18 13
19 14
20 15
<<<sep_out_sample>>>
cmp %esi,%edx
jge b <func1+0xb>
mov %ecx,%eax
imul %esi,%eax
jmp 15 <func1+0x15>
mov %r8d,%eax
not %eax
imul %esi,%eax
add %edi,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a3 < a2)
    {
        v6 = a4 * a2;
    }
    else
    {
        v6 = a1 - (a2 + a2 * a5);
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        if (v8 < a4)
        {
            v7 += a2 - a2;
        }
        else
        {
            v7 += a2 - (a1 * a3);
        }
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        v9 += a2 - a4;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 10
10 29
11 29
12 29
13 29
14 29
15 30
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
add %esi,%ecx
sub %r8d,%edi
add $0x1,%edi
imul %edi,%edx
lea 0x1(%rcx,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a3 + (a3 * (a1 - a5));
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        if (v6 < a2)
        {
            v7 += a5 - a1;
        }
        else
        {
            v7 += a2 * a1 - a5;
        }
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        if (a2 < a5)
        {
            v9 += (a2 * a4) * a5;
        }
        else
        {
            v9 += a1 - a2;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 29
2 29
3 29
4 29
5 4
6 4
7 4
8 29
9 30
<<<sep_out_sample>>>
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (a1 < a5)
        {
            v6 += (a4 * a3) * a3;
        }
        else
        {
            v6 += a2 * a4;
        }
    }
    v8 = a5 - a5 + a1;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 17
6 18
<<<sep_out_sample>>>
mov $0x0,%eax
cmp %r8d,%edx
jge 13 <func1+0x13>
mov %esi,%eax
imul %edx,%eax
sub %edi,%eax
add %edx,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a3 < a5)
    {
        v6 = a3 + ((a2 * a3) - a1);
    }
    else
    {
        v6 = a1 - a1;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += a2 * a4 + a4;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        v9 += a3 + a1;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 6
7 6
8 22
9 22
10 22
11 22
12 22
13 23
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%r9d
add %esi,%r9d
add %r8d,%r9d
add %ecx,%r9d
lea (%rsi,%rdi,1),%eax
imul %esi,%edx
sub %edx,%eax
add %r9d,%eax
imul %esi,%ecx
imul %r8d,%ecx
imul %ecx,%edi
add %edi,%eax
imul %r8d,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = (a2 + a1) - a3 * a2;
    v7 = a1 * (a2 * a4 * a5);
    v8 = ((a5 + a5) - a5) * a5;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 7
2 7
3 7
4 7
5 4
6 4
7 4
8 7
9 5
10 5
11 5
12 7
13 6
14 7
15 8
<<<sep_out_sample>>>
lea (%r8,%r8,1),%eax
imul %r8d,%eax
imul %r8d,%eax
lea 0x1(%rdi,%rax,1),%eax
add %eax,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a3 - a1 - a5;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += a2 + (a3 + a5);
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a5)
    {
        v10 += a3 + a2 * a1;
    }
    v12 = ((a5 + a5) * a5) * a5;
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 19
2 19
3 19
4 20
5 20
6 20
7 20
8 20
9 21
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%r8,%rcx,2),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a4 + a4 - a4;
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a2 - a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 11
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
add %esi,%ecx
imul %r8d,%edx
imul %edx,%edi
lea 0x1(%rcx,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a3 * a5 * a1;
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        if (v8 < a3)
        {
            v7 += a5 - (a1 * a2);
        }
        else
        {
            v7 += a3 + a3;
        }
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        if (v8 < a5)
        {
            v9 += (a5 - a1) + a1;
        }
        else
        {
            v9 += a1 + a3 - a2;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 29
2 29
3 29
4 29
5 4
6 4
7 29
8 30
<<<sep_out_sample>>>
test %edx,%edx
jle f <func1+0xf>
mov %ecx,%eax
imul %esi,%eax
add %edi,%eax
sub %ecx,%eax
jmp 1e <func1+0x1e>
mov %esi,%r9d
sub %ecx,%r9d
mov %r8d,%eax
imul %ecx,%eax
add %r9d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (v6 < a3)
    {
        v6 = a4 * a2 + a1 - a4;
    }
    else
    {
        v6 = (a2 - a4) + (a5 * a4);
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        if (v7 < a5)
        {
            v7 += a5 * a1 - a3;
        }
        else
        {
            v7 += a1 + (a1 * a2);
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 10
13 24
14 24
15 24
16 24
17 24
18 25
<<<sep_out_sample>>>
mov %edi,%r10d
imul %r8d,%r10d
cmp %edx,%edi
jge 12 <func1+0x12>
lea (%rsi,%rsi,2),%eax
add %ecx,%eax
jmp 1d <func1+0x1d>
mov %ecx,%eax
imul %r8d,%eax
add %edi,%eax
imul %esi,%eax
mov $0x0,%r9d
cmp %ecx,%eax
jl 32 <func1+0x32>
lea -0x1(%rsi),%r9d
imul %ecx,%r9d
add %edx,%r9d
add %r9d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r10d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a1 * a5;
    if (a1 < a3)
    {
        v7 = a4 + (a2 + a2 + a2);
    }
    else
    {
        v7 = (a1 + a4 * a5) * a2;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        if (v6 < a3)
        {
            v8 += (a1 + a5) + a1;
        }
        else
        {
            v8 += (a3 + a1) - a1;
        }
    }
    if (v7 < a4)
    {
        v10 = a2 - a2;
    }
    else
    {
        v10 = (a4 * a2 - a4) + a3;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 5
4 5
5 7
6 7
7 7
8 11
9 11
10 11
11 11
12 27
13 25
14 25
15 31
16 31
17 31
18 33
19 33
20 33
21 33
22 33
23 33
24 33
25 34
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%eax
imul %ecx,%ecx
imul %ecx,%r8d
sub %r8d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a1 + a1;
    }
    v8 = a3 - a4 * a4 * a5;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 9
6 9
7 9
8 10
9 11
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %edx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (a3 < a5)
        {
            v6 += a4 * a5 + a1;
        }
        else
        {
            v6 += a1 + a5 + a2;
        }
    }
    v8 = a3 + a1;
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        v9 += (a4 + a2) * a5;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 22
4 22
5 16
6 22
7 23
<<<sep_out_sample>>>
mov %r8d,%r9d
imul %ecx,%r9d
mov %ecx,%eax
sub %edi,%eax
imul %r9d,%eax
lea (%rsi,%r8,1),%r9d
cmp %r8d,%edi
jl 23 <func1+0x23>
lea (%r8,%rdi,1),%r9d
imul %edi,%r9d
add %r8d,%r9d
lea 0x1(%r9,%rdi,1),%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a3 * a1;
    }
    v8 = a5 * a4 * (a4 - a1);
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        if (v6 < a5)
        {
            v9 += a4 + a4 * a2;
        }
        else
        {
            v9 += a1 - a2 + a5;
        }
    }
    if (a1 < a5)
    {
        v11 = a2 - a4 + (a5 + a4);
    }
    else
    {
        v11 = ((a5 + a1) * a1) + a5;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 9
4 9
5 9
6 24
7 22
8 22
9 28
10 28
11 28
12 30
13 30
14 30
15 30
16 30
17 30
18 31
<<<sep_out_sample>>>
lea (%rcx,%r8,1),%r9d
mov %ecx,%eax
sub %edi,%eax
add %eax,%r9d
lea (%rdx,%r8,1),%r11d
cmp %esi,%r9d
jge 1d <func1+0x1d>
mov %r8d,%r10d
imul %edi,%r10d
jmp 24 <func1+0x24>
lea (%rdi,%rsi,2),%r10d
add %ecx,%r10d
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
add %r11d,%eax
add %r10d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = (a4 + a5) - (a1 - a4);
    v7 = a3 + a5;
    if (v6 < a2)
    {
        v8 = a5 * a1;
    }
    else
    {
        v8 = a1 + a2 + a2 + a4;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        v9 += a3 + a1 * a2;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 5
6 6
7 6
8 8
9 8
10 8
11 12
12 12
13 19
14 19
15 19
16 19
17 19
18 19
19 19
20 20
<<<sep_out_sample>>>
test %edi,%edi
jle c <func1+0xc>
mov %r8d,%eax
imul %esi,%eax
jmp 1b <func1+0x1b>
mov %edx,%eax
imul %edi,%eax
mov %r8d,%r9d
imul %ecx,%r9d
sub %r9d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea (%rax,%rcx,2),%eax
lea 0x1(%rax,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (v6 < a3)
        {
            v6 += a1 + a1;
        }
        else
        {
            v6 += (a3 * a2) - a2;
        }
    }
    if (v8 < a1)
    {
        v8 = a5 * a2;
    }
    else
    {
        v8 = a3 * a1 - (a5 * a4);
    }
    v9 = ((a3 - a3) * a1) + a4;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 22
7 22
8 22
9 22
10 22
11 25
12 25
13 25
14 25
15 25
16 26
<<<sep_out_sample>>>
mov %ecx,%r9d
sub %r8d,%r9d
cmp %esi,%r9d
jge 19 <func1+0x19>
lea (%rcx,%rdi,1),%r10d
mov %esi,%eax
imul %edx,%eax
add %r10d,%eax
jmp 22 <func1+0x22>
lea (%rsi,%r8,1),%eax
sub %ecx,%eax
imul %edi,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = a4 - a5;
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += a5 + (a5 - a3);
    }
    if (v6 < a2)
    {
        v9 = a4 + a1 + a2 * a3;
    }
    else
    {
        v9 = ((a2 + a5) - a4) * a1;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a2)
    {
        if (v7 < a5)
        {
            v10 += a1 - (a1 - a5);
        }
        else
        {
            v10 += (a3 * a2) * a1;
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 10
4 10
5 12
6 12
7 12
8 12
9 12
10 16
11 16
12 16
13 30
14 30
15 30
16 30
17 30
18 30
19 31
<<<sep_out_sample>>>
cmp %edx,%edi
jge 10 <func1+0x10>
mov %edx,%r9d
neg %r9d
imul %edx,%r9d
jmp 18 <func1+0x18>
lea 0x1(%rcx),%r9d
imul %edx,%r9d
mov %r8d,%r10d
imul %r8d,%r10d
mov %edx,%eax
imul %edi,%eax
add %r10d,%eax
add %edi,%eax
add %edx,%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
imul %esi,%edi
sub %edi,%eax
add $0x1,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a1 < a3)
    {
        v6 = ((a4 - a3) - a4) * a3;
    }
    else
    {
        v6 = a3 + a3 * a4;
    }
    v7 = a3 - a2 * a1 - a3;
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += a2 * a2;
    }
    v10 = a5 * a5 + a3 * a1;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 18
10 18
11 18
12 18
13 18
14 19
15 19
16 19
17 19
18 19
19 19
20 12
21 19
22 19
23 20
<<<sep_out_sample>>>
cmp %edi,%edx
jge 12 <func1+0x12>
lea 0x1(%rcx),%r10d
imul %ecx,%r10d
imul %edx,%r10d
jmp 1e <func1+0x1e>
lea (%rcx,%r8,1),%r10d
mov %edx,%eax
imul %ecx,%eax
add %eax,%r10d
lea (%rdi,%rdx,1),%r9d
test %edx,%edx
jg 35 <func1+0x35>
mov %r8d,%r9d
sub %ecx,%r9d
mov %r8d,%eax
imul %esi,%eax
add %eax,%r9d
lea (%rdx,%r8,1),%eax
mov %edi,%r11d
imul %r8d,%r11d
cmp $0x2,%ecx
cmovge %r11d,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r10d,%ecx
lea 0x1(%r9,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a3 < a1)
    {
        v6 = a3 * (a4 + (a4 * a4));
    }
    else
    {
        v6 = a4 + a5 + a3 * a4;
    }
    if (v7 < a3)
    {
        v7 = a1 + a3;
    }
    else
    {
        v7 = a5 - a4 + a5 * a2;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += a1 + a3;
    }
    if (v9 < a4)
    {
        v10 = a1 * a5;
    }
    else
    {
        v10 = a3 + a5;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 10
11 14
12 12
13 12
14 18
15 18
16 18
17 18
18 18
19 31
20 27
21 27
22 27
23 27
24 33
25 33
26 33
27 33
28 33
29 33
30 33
31 34
<<<sep_out_sample>>>
mov %ecx,%eax
sub %edi,%eax
mov %edx,%r9d
imul %r8d,%r9d
cmp $0x2,%r8d
cmovge %r9d,%eax
add %edx,%edi
add %edi,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%edx
add %edx,%eax
imul %ecx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (v7 < a3)
        {
            v6 += a1 * a5 + a2;
        }
        else
        {
            v6 += a4 * a4;
        }
    }
    if (v7 < a5)
    {
        v8 = (a3 + a5 - a5) * a5;
    }
    else
    {
        v8 = a4 - a1;
    }
    v9 = a5 * a4;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 18
4 18
5 18
6 18
7 25
8 25
9 25
10 25
11 25
12 24
13 25
14 26
<<<sep_out_sample>>>
lea (%rdx,%r8,1),%eax
lea (%rcx,%rdx,1),%r10d
cmp %esi,%eax
mov $0x0,%r9d
cmovge %r10d,%r9d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%eax
lea 0x1(%r9,%rax,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a3 + a5;
    if (v6 < a2)
    {
        v7 = a4 * (a4 - a4);
    }
    else
    {
        v7 = a4 + a3;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        if (v6 < a3)
        {
            v8 += (a5 - a3) - a2;
        }
        else
        {
            v8 += a1 * a4;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 11
3 11
4 11
5 11
6 25
7 25
8 25
9 25
10 25
11 25
12 26
<<<sep_out_sample>>>
add %edx,%edi
add %esi,%edi
add %r8d,%edi
add %ecx,%edi
mov %edx,%eax
sub %esi,%eax
add %ecx,%eax
imul %eax,%r8d
add %edi,%r8d
imul %ecx,%edx
lea 0x1(%r8,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = (a4 - (a2 - a3)) * a5;
    v7 = a4 * a3;
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        if (v9 < a4)
        {
            v8 += a3 + a4 - a2;
        }
        else
        {
            v8 += a4 * a1 - a4;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 18
5 4
6 4
7 4
8 4
9 18
10 5
11 18
12 19
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
lea 0x1(%rcx,%rax,1),%eax
add %r8d,%edi
add %edi,%esi
imul %esi,%edx
add %edx,%eax
imul %r8d,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (a2 < a3)
        {
            v6 += a4 * a2 - a5;
        }
        else
        {
            v6 += a4 + (a2 - a3);
        }
    }
    v8 = (a2 + (a1 + a5)) * a3;
    v9 = a5 * a5;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 18
5 16
6 16
7 16
8 18
9 17
10 18
11 19
<<<sep_out_sample>>>
cmp %r8d,%ecx
jge 15 <func1+0x15>
mov %r8d,%r10d
imul %esi,%r10d
imul %esi,%r10d
add %edi,%r10d
jmp 21 <func1+0x21>
lea 0x1(%rdx),%r10d
imul %esi,%r10d
imul %edx,%r10d
lea (%rdx,%rdi,1),%r9d
cmp %edx,%esi
jg 37 <func1+0x37>
mov %ecx,%r9d
imul %r8d,%r9d
mov %edi,%eax
sub %esi,%eax
add %eax,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a4 < a5)
    {
        v6 = a1 + (a5 * a2) * a2;
    }
    else
    {
        v6 = (a2 * a3 + a2) * a3;
    }
    if (a3 < a2)
    {
        v7 = a3 + a1;
    }
    else
    {
        v7 = a4 * a5 - (a2 - a1);
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 14
12 12
13 12
14 18
15 18
16 18
17 18
18 18
19 20
20 20
21 20
22 20
23 20
24 20
25 21
<<<sep_out_sample>>>
mov %edi,%r9d
sub %r8d,%r9d
sub %r8d,%r9d
add %esi,%r9d
cmp %edx,%edi
jge 22 <func1+0x22>
mov %r8d,%eax
imul %edx,%eax
mov %ecx,%r10d
imul %esi,%r10d
sub %r10d,%eax
jmp 27 <func1+0x27>
mov %edi,%eax
imul %ecx,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = a2 + ((a1 - a5) - a5);
    if (a1 < a3)
    {
        v7 = (a5 * a3) - a4 * a2;
    }
    else
    {
        v7 = a1 * a4;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        if (a1 < a3)
        {
            v8 += (a2 + a4) * a5;
        }
        else
        {
            v8 += (a1 + a2) - a2;
        }
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a3)
    {
        if (v9 < a4)
        {
            v10 += a1 + (a2 + a3);
        }
        else
        {
            v10 += a4 + a1;
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 5
6 5
7 7
8 7
9 7
10 7
11 7
12 7
13 11
14 11
15 37
16 37
17 37
18 37
19 37
20 37
21 38
<<<sep_out_sample>>>
mov %edx,%eax
imul %edi,%eax
mov %edi,%r9d
imul %r8d,%r9d
imul %eax,%r9d
cmp %edi,%ecx
jge 20 <func1+0x20>
mov $0x1,%eax
sub %r8d,%eax
imul %r8d,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %r9d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a5 * a4;
    }
    v8 = (a3 * a1) * (a1 * a5);
    if (a4 < a1)
    {
        v9 = a5 - a5 * a5;
    }
    else
    {
        v9 = a3 * a1;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a2)
    {
        if (a1 < a1)
        {
            v10 += a5 * (a1 - a4);
        }
        else
        {
            v10 += (a3 + a3) * a5;
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 9
4 9
5 9
6 10
7 10
8 12
9 12
10 12
11 30
12 30
13 30
14 30
15 30
16 30
17 31
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %r8d,%esi
add %esi,%ecx
lea (%rcx,%r8,2),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a5 + a5;
    v7 = a4 - a4;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 6
6 7
<<<sep_out_sample>>>
lea 0x1(%r8),%eax
imul %edi,%eax
sub %esi,%eax
mov %edi,%r9d
sub %ecx,%r9d
cmp $0x1,%esi
jle 29 <func1+0x29>
mov %r8d,%r10d
imul %r8d,%r10d
mov %edi,%r11d
sub %r10d,%r11d
mov %r11d,%r10d
add %edi,%r10d
jmp 38 <func1+0x38>
mov %r8d,%r10d
imul %r8d,%r10d
add $0x1,%r10d
imul %ecx,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (a1 < a5)
        {
            v6 += a3 * a5 + a3;
        }
        else
        {
            v6 += a4 + (a1 + a2);
        }
    }
    v8 = a1 + a5 * a1 - a2;
    v9 = a1 - a4;
    if (v7 < a2)
    {
        v10 = a1 - a5 * a5 + a1;
    }
    else
    {
        v10 = a4 + a5 * a5 * a4;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 16
4 17
5 17
6 18
7 18
8 20
9 20
10 20
11 20
12 20
13 20
14 20
15 24
16 24
17 24
18 24
19 26
20 26
21 26
22 26
23 26
24 26
25 26
26 27
<<<sep_out_sample>>>
lea (%rdi,%r8,1),%eax
lea 0x1(%rdi,%rdx,1),%edi
add %esi,%edi
add %r8d,%edi
add %edi,%ecx
add $0x1,%r8d
imul %r8d,%esi
imul %esi,%edx
add %ecx,%edx
lea 0x1(%rax,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = (a5 * a2 + a2) * a3;
    v7 = (a1 + a5) + a3 - a3;
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += a2 * a2;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a4)
    {
        v10 += (a2 + a3) - a1;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 5
2 16
3 16
4 16
5 16
6 4
7 4
8 4
9 16
10 16
11 17
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %r8d,%esi
add %esi,%ecx
imul %edx,%edx
lea (%rdx,%r8,2),%eax
lea 0x1(%rcx,%rax,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a3 * a3 + a5 + a5;
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += (a3 + a3) - a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 4
6 4
7 10
8 11
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %r8d,%edx
lea 0x1(%rcx,%rdx,1),%eax
add %r8d,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a2 + a5 + a3;
    }
    v8 = a5 + a2;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 9
6 10
7 11
<<<sep_out_sample>>>
cmp %ecx,%edi
jge 13 <func1+0x13>
lea (%rsi,%rdx,1),%r9d
mov %edx,%eax
imul %r8d,%eax
sub %eax,%r9d
jmp 1e <func1+0x1e>
lea (%rdi,%rdx,1),%r9d
sub %esi,%r9d
imul %r8d,%r9d
mov %esi,%eax
imul %ecx,%eax
imul %edx,%eax
imul %ecx,%eax
lea (%rcx,%rdx,1),%r10d
lea (%rcx,%rdi,1),%r11d
cmp %edx,%ecx
cmovle %r11d,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a1 < a4)
    {
        v6 = a2 + a3 - a3 * a5;
    }
    else
    {
        v6 = a5 * (a1 + a3 - a2);
    }
    v7 = a3 * (a2 * a4) * a4;
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += a2 * a2 * a5;
    }
    if (a3 < a4)
    {
        v10 = a4 + a3;
    }
    else
    {
        v10 = a4 + a1;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 12
12 12
13 12
14 12
15 20
16 20
17 20
18 20
19 26
20 26
21 26
22 26
23 26
24 26
25 26
26 27
<<<sep_out_sample>>>
cmp %edi,%r8d
jge e <func1+0xe>
mov %esi,%r9d
imul %esi,%r9d
jmp 1b <func1+0x1b>
mov %r8d,%r9d
imul %edx,%r9d
add %esi,%r9d
sub %ecx,%r9d
lea (%rdi,%rdi,1),%eax
mov %edx,%r10d
sub %esi,%r10d
add %edi,%eax
cmp %esi,%edi
cmovg %r10d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a5 < a1)
    {
        v6 = a2 * (a3 - (a3 - a2));
    }
    else
    {
        v6 = a2 + a5 * a3 - a4;
    }
    if (a2 < a1)
    {
        v7 = a3 - a2;
    }
    else
    {
        v7 = (a1 + a1) + a1;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += a4 - a2 + a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 10
10 18
11 14
12 14
13 14
14 14
15 14
16 25
17 25
18 25
19 25
20 25
21 25
22 26
<<<sep_out_sample>>>
test %r8d,%r8d
jle d <func1+0xd>
lea 0x2(%rdx),%eax
imul %esi,%eax
jmp 1b <func1+0x1b>
mov %r8d,%r9d
sub %edx,%r9d
mov %edx,%eax
imul %edx,%eax
add %r9d,%eax
lea 0x2(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (a4 < a1)
        {
            v6 += a1 * (a5 - a1);
        }
        else
        {
            v6 += a1 + a1;
        }
    }
    if (v8 < a5)
    {
        v8 = a2 + (a3 * a2) + a2;
    }
    else
    {
        v8 = (a5 - a3) + a3 * a3;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        v9 += (a5 * a5) * a3;
    }
    v11 = 0;
    for (v12 = 0; v12++; v12<a2)
    {
        v11 += a1 - (a3 + a3);
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 22
7 22
8 22
9 22
10 22
11 34
12 34
13 34
14 34
15 34
16 35
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
add %r8d,%ecx
mov %edi,%eax
sub %edx,%eax
imul %eax,%edi
add %edi,%esi
lea 0x1(%rcx,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a2 - ((a3 - a1) * a1);
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        if (v7 < a5)
        {
            v7 += a4 + a5;
        }
        else
        {
            v7 += (a4 * a2) + a3;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 4
6 4
7 4
8 4
9 17
10 18
<<<sep_out_sample>>>
lea (%r8,%rdi,1),%eax
lea (%rax,%rsi,2),%r9d
cmp %edi,%r8d
jge 20 <func1+0x20>
mov %esi,%eax
imul %edi,%eax
mov %r8d,%r10d
sub %eax,%r10d
mov %r10d,%eax
add %r8d,%eax
jmp 25 <func1+0x25>
mov %esi,%eax
imul %edi,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = a2 + (a5 + a1 + a2);
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a4 - a1 - a4;
    }
    if (a5 < a1)
    {
        v9 = (a5 - a2 * a1) + a5;
    }
    else
    {
        v9 = a2 * a1;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a1)
    {
        if (v9 < a2)
        {
            v10 += a3 - a2 - a5;
        }
        else
        {
            v10 += (a3 + a3) - a4;
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 10
4 10
5 12
6 12
7 12
8 12
9 12
10 12
11 12
12 16
13 16
14 30
15 30
16 30
17 30
18 30
19 30
20 31
<<<sep_out_sample>>>
test %ecx,%ecx
jle 13 <func1+0x13>
mov %edi,%eax
imul %edx,%eax
add %ecx,%eax
mov %esi,%r10d
sub %eax,%r10d
jmp 1a <func1+0x1a>
mov %r8d,%r10d
imul %esi,%r10d
mov %ecx,%r9d
sub %r8d,%r9d
cmp %r8d,%edx
jl 33 <func1+0x33>
mov %ecx,%r9d
imul %r8d,%r9d
sub %edi,%r9d
imul %edi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (v6 < a4)
    {
        v6 = a2 - (a4 + a1 * a3);
    }
    else
    {
        v6 = a5 * a2;
    }
    if (a3 < a5)
    {
        v7 = a4 - a5;
    }
    else
    {
        v7 = a1 * ((a4 * a5) - a1);
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 6
9 10
10 10
11 14
12 14
13 12
14 12
15 18
16 18
17 18
18 18
19 20
20 20
21 20
22 20
23 20
24 20
25 21
<<<sep_out_sample>>>
lea (%rsi,%rcx,1),%r10d
test %esi,%esi
jg 18 <func1+0x18>
mov %edi,%eax
imul %r8d,%eax
imul %r8d,%eax
mov %esi,%r10d
sub %eax,%r10d
cmp %ecx,%r10d
jge 27 <func1+0x27>
lea 0x1(%rcx),%eax
imul %edi,%eax
sub %edx,%eax
jmp 2d <func1+0x2d>
mov %edx,%eax
sub %edi,%eax
sub %ecx,%eax
lea (%r8,%rdx,1),%r9d
mov %ecx,%r11d
imul %ecx,%r11d
cmp %edi,%eax
cmovl %r11d,%r9d
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r10d
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (v6 < a2)
    {
        v6 = ((a2 + a4) + a2) - a2;
    }
    else
    {
        v6 = a2 - a5 * (a1 * a5);
    }
    if (v6 < a4)
    {
        v7 = a4 * a1 + a1 - a3;
    }
    else
    {
        v7 = a3 - a1 - a4;
    }
    if (v7 < a1)
    {
        v8 = a4 * a4;
    }
    else
    {
        v8 = a5 + a3;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        if (a2 < a4)
        {
            v9 += a3 - a5 - a4;
        }
        else
        {
            v9 += a2 * a2 - a4;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 4
3 4
4 10
5 10
6 10
7 10
8 10
9 12
10 12
11 14
12 14
13 14
14 14
15 18
16 18
17 18
18 26
19 22
20 22
21 22
22 22
23 40
24 40
25 40
26 40
27 40
28 40
29 40
30 41
<<<sep_out_sample>>>
cmp %ecx,%esi
jge 12 <func1+0x12>
mov %r8d,%eax
imul %edi,%eax
imul %r8d,%eax
sub %edi,%eax
jmp 1c <func1+0x1c>
mov %esi,%eax
imul %edi,%eax
imul %ecx,%eax
add %edx,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a2 < a4)
    {
        v6 = ((a5 * a1) * a5) - a1;
    }
    else
    {
        v6 = a3 + a2 * a1 * a4;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a4 * (a4 - a3);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 17
13 17
14 17
15 17
16 17
17 18
<<<sep_out_sample>>>
lea (%rsi,%rcx,1),%r9d
cmp %edi,%r9d
jge 19 <func1+0x19>
lea (%rdi,%rcx,1),%eax
lea (%rax,%rsi,2),%r11d
mov %edi,%r10d
imul %ecx,%r10d
jmp 2e <func1+0x2e>
mov %edi,%r11d
sub %esi,%r11d
add %edx,%r11d
add %r8d,%r11d
mov %edi,%eax
sub %r8d,%eax
lea (%rax,%rdi,2),%r10d
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
add %r11d,%eax
add %r10d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a3 - a3 + a2 + a4;
    if (v6 < a1)
    {
        v7 = a1 + a4 + a2 + a2;
    }
    else
    {
        v7 = a5 + (a1 - a2 + a3);
    }
    if (v6 < a1)
    {
        v8 = a1 * a4;
    }
    else
    {
        v8 = (a1 - a5) + a1 + a1;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        v9 += a3 + a5 - a4;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 5
3 5
4 7
5 7
6 15
7 15
8 15
9 11
10 11
11 11
12 11
13 19
14 19
15 19
16 26
17 26
18 26
19 26
20 26
21 26
22 26
23 27
<<<sep_out_sample>>>
mov %edx,%eax
imul %edx,%eax
sub %r8d,%eax
lea 0x1(%rdi,%rax,1),%eax
add %eax,%edx
add %esi,%edx
add %edx,%r8d
lea 0x1(%rcx,%r8,1),%eax
sub %edi,%ecx
imul %esi,%edi
add %edi,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a3 * (a2 - a3);
    }
    v8 = a4 - a1 + a2 * a1;
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        v9 += a5 * a4;
    }
    if (a5 < a5)
    {
        v11 = a3 * a4;
    }
    else
    {
        v11 = (a3 * a3) - a5;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 23
5 23
6 23
7 23
8 23
9 9
10 9
11 9
12 23
13 24
<<<sep_out_sample>>>
cmp %esi,%ecx
jge 14 <func1+0x14>
lea (%r8,%rdx,1),%eax
mov %ecx,%r9d
imul %edx,%r9d
sub %r9d,%eax
jmp 1c <func1+0x1c>
mov %ecx,%eax
sub %edx,%eax
add %esi,%eax
sub %edi,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a5 - a5;
    if (a4 < a2)
    {
        v7 = (a5 + a3) - a4 * a3;
    }
    else
    {
        v7 = a2 + (a4 - a3) - a1;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 5
2 5
3 7
4 7
5 7
6 7
7 7
8 11
9 11
10 11
11 11
12 13
13 13
14 13
15 13
16 13
17 14
<<<sep_out_sample>>>
lea (%rcx,%r8,1),%r9d
mov %edx,%eax
imul %ecx,%eax
add %r9d,%eax
add %edi,%eax
add %eax,%edx
add %edx,%esi
add %r8d,%esi
add %ecx,%esi
lea (%r8,%rdi,1),%eax
imul %edi,%eax
add %eax,%esi
mov $0x1,%eax
sub %edi,%eax
imul %eax,%r8d
add %r8d,%ecx
lea 0x1(%rsi,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = (a5 + a1) * a1;
    v7 = a4 - (a1 * a5 - a5);
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += a3 * a3 + a5;
    }
    v10 = a4 + a5 + (a3 * a4);
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 11
5 12
6 12
7 12
8 12
9 12
10 4
11 4
12 12
13 5
14 5
15 5
16 5
17 12
18 13
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
lea (%r8,%rcx,1),%eax
imul %ecx,%ecx
imul %ecx,%edx
add %edx,%esi
lea 0x1(%rax,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a2 + a3 * (a4 * a4);
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += a1 * a3;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        v9 += a3 - a5 * a3;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 15
2 15
3 15
4 15
5 4
6 4
7 4
8 15
9 16
<<<sep_out_sample>>>
mov %edx,%r9d
sub %esi,%r9d
imul %esi,%r9d
add %r8d,%r9d
cmp $0x1,%edx
jle 1b <func1+0x1b>
mov %edi,%r10d
imul %r8d,%r10d
jmp 29 <func1+0x29>
mov %edx,%eax
imul %r8d,%eax
add %ecx,%eax
mov %esi,%r10d
sub %eax,%r10d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %r9d,%eax
add %r10d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a5 + a5 - a3;
    }
    v8 = a5 - (a2 - a3) * a2;
    if (v7 < a3)
    {
        v9 = a1 * a5;
    }
    else
    {
        v9 = a2 - ((a3 * a5) + a4);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 9
4 9
5 10
6 10
7 12
8 12
9 12
10 16
11 16
12 16
13 16
14 16
15 18
16 18
17 18
18 18
19 18
20 18
21 19
<<<sep_out_sample>>>
add %edx,%edi
add %esi,%edi
add %edi,%r8d
lea (%r8,%rcx,1),%edi
add %ecx,%edx
add %edx,%esi
lea 0x1(%rdi,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a3 + a4 + a2;
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        if (a3 < a2)
        {
            v7 += (a1 * a4) + a3;
        }
        else
        {
            v7 += a2 - a3;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 4
6 4
7 17
8 18
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %eax,%ecx
imul %r8d,%edx
add %ecx,%edx
lea (%rdi,%r8,2),%eax
sub %esi,%eax
add %edx,%eax
imul %esi,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a3 * a5;
    v7 = a5 - a2 + (a5 + a1);
    v8 = a1 * a2;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 7
2 7
3 7
4 7
5 4
6 7
7 5
8 5
9 7
10 6
11 7
12 8
<<<sep_out_sample>>>
cmp %r8d,%ecx
jge 12 <func1+0x12>
mov %edi,%eax
imul %esi,%eax
imul %r8d,%eax
sub %edi,%eax
jmp 1a <func1+0x1a>
lea (%rcx,%rdi,1),%eax
add %esi,%eax
add %r8d,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %esi,%edx
add %edx,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
add %esi,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    if (a4 < a5)
    {
        v6 = (a1 * a2 * a5) - a1;
    }
    else
    {
        v6 = a5 + (a4 + a1 + a2);
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a4 - a1;
    }
    v9 = a2 + a1;
    v10 = 0;
    for (v11 = 0; v11++; v11<a3)
    {
        v10 += (a2 * a1) + a1;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 23
12 23
13 23
14 23
15 23
16 17
17 23
18 24
<<<sep_out_sample>>>
push %rbx
mov %edx,%eax
imul %esi,%eax
lea (%rax,%rcx,1),%ebx
sub %r8d,%ebx
cmp %ecx,%edx
jge 26 <func1+0x26>
mov %esi,%r11d
sub %edx,%r11d
sub %eax,%r11d
lea 0x1(%rdi),%r10d
imul %esi,%r10d
add %r8d,%r10d
jmp 34 <func1+0x34>
mov %esi,%r10d
imul %ecx,%r10d
lea (%r10,%rdx,2),%r11d
sub %edi,%r10d
cmp %edi,%r8d
jle 44 <func1+0x44>
mov %edx,%eax
imul %edx,%eax
lea (%rax,%rcx,2),%r9d
jmp 51 <func1+0x51>
lea (%rsi,%rcx,1),%eax
imul %r8d,%eax
mov %esi,%r9d
sub %eax,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %ebx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a4 + a3 * a2 - a5;
    if (a3 < a4)
    {
        v7 = a2 - a3 - a2 * a3;
    }
    else
    {
        v7 = a3 + (a2 * a4) + a3;
    }
    if (a3 < a4)
    {
        v8 = a2 * a1 + a2 + a5;
    }
    else
    {
        v8 = (a2 * a4) - a1;
    }
    if (a1 < a5)
    {
        v9 = (a4 + a4) + a3 * a3;
    }
    else
    {
        v9 = a2 - (a2 + a4) * a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 4
3 4
4 4
5 4
6 5
7 5
8 7
9 7
10 7
11 15
12 15
13 15
14 15
15 11
16 11
17 11
18 19
19 21
20 21
21 23
22 23
23 23
24 23
25 27
26 27
27 27
28 27
29 29
30 29
31 29
32 29
33 29
34 29
35 29
36 29
37 30
38 30
<<<sep_out_sample>>>
cmp %r8d,%edi
jge e <func1+0xe>
mov %edx,%eax
imul %edx,%eax
add %edi,%eax
jmp 1a <func1+0x1a>
mov %esi,%eax
imul %edx,%eax
imul %r8d,%eax
imul %esi,%eax
mov %edi,%r9d
sub %ecx,%r9d
lea (%r9,%rdi,2),%edi
add %edx,%edi
add %edi,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%esi
add %esi,%eax
lea (%rdx,%rcx,2),%edx
imul %edx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (a5 < a5)
        {
            v6 += a3 - a1 * a3;
        }
        else
        {
            v6 += a2 - (a4 + a3);
        }
    }
    if (a1 < a5)
    {
        v8 = a1 + a3 * a3;
    }
    else
    {
        v8 = (a2 * a3 * a5) * a2;
    }
    v9 = a5 * (a4 + (a3 + a4));
    v10 = (a1 - a4) + a1;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 18
7 22
8 22
9 22
10 22
11 25
12 25
13 26
14 26
15 26
16 26
17 26
18 26
19 24
20 24
21 26
22 27
<<<sep_out_sample>>>
mov %ecx,%r9d
imul %r8d,%r9d
imul %ecx,%r9d
add %edi,%r9d
mov %r8d,%eax
sub %esi,%eax
cmp %esi,%ecx
jg 20 <func1+0x20>
mov %ecx,%eax
imul %edx,%eax
sub %edi,%eax
add %esi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = ((a4 * a5) * a4) + a1;
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += a4 + a5 * a3;
    }
    if (a2 < a4)
    {
        v9 = a5 - a2;
    }
    else
    {
        v9 = a4 * a3 - a1 + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 12
6 12
7 10
8 10
9 16
10 16
11 16
12 16
13 18
14 18
15 18
16 18
17 18
18 18
19 19
<<<sep_out_sample>>>
cmp %esi,%r8d
jle 17 <func1+0x17>
mov %esi,%eax
imul %esi,%eax
mov %r8d,%r9d
sub %eax,%r9d
mov %r9d,%eax
add %ecx,%eax
jmp 20 <func1+0x20>
lea (%rdx,%r8,1),%eax
add %ecx,%eax
imul %ecx,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a5 - a3;
    }
    if (a2 < a5)
    {
        v8 = (a5 - a2 * a2) + a4;
    }
    else
    {
        v8 = a4 * (a4 + (a3 + a5));
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        v9 += a1 * a4 - a5;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 11
8 11
9 11
10 15
11 15
12 15
13 22
14 22
15 22
16 22
17 22
18 23
<<<sep_out_sample>>>
mov %esi,%eax
cmp $0x1,%edi
jle 19 <func1+0x19>
mov %edx,%eax
imul %r8d,%eax
imul %esi,%eax
mov %edx,%r10d
sub %eax,%r10d
mov %r10d,%eax
cmp %ecx,%edx
jge 26 <func1+0x26>
mov %ecx,%r9d
imul %ecx,%r9d
jmp 33 <func1+0x33>
mov %esi,%r9d
imul %edi,%r9d
add %ecx,%r9d
sub %esi,%r9d
lea 0x1(%r9,%rdi,1),%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a2 - a5 - a2;
    }
    if (v7 < a1)
    {
        v8 = a3 - (a3 * a5 * a2);
    }
    else
    {
        v8 = a2 + a1 - a1;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        v9 += (a5 - a2) * a3;
    }
    if (a3 < a4)
    {
        v11 = ((a4 * a4) - a4) + a4;
    }
    else
    {
        v11 = a2 * a1 + a4 - a2;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 15
2 9
3 9
4 11
5 11
6 11
7 11
8 11
9 11
10 22
11 22
12 24
13 24
14 24
15 28
16 28
17 28
18 28
19 30
20 30
21 30
22 30
23 30
24 30
25 31
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
add %ecx,%esi
lea (%r8,%rdi,2),%eax
add %r8d,%eax
add %esi,%eax
imul %edx,%r8d
add %r8d,%ecx
add %ecx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a1 < a1)
    {
        v6 = (a4 - (a5 * a4)) + a3;
    }
    else
    {
        v6 = a5 + a1 + a1 + a5;
    }
    v7 = (a3 * a5 + a4) + a1;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 13
2 13
3 13
4 13
5 10
6 10
7 13
8 12
9 12
10 12
11 13
12 14
<<<sep_out_sample>>>
lea (%rdi,%rdx,2),%eax
add %eax,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a3 * a2;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        if (v8 < a2)
        {
            v8 += a5 * a3 + a3;
        }
        else
        {
            v8 += a5 + (a2 - a3);
        }
    }
    v10 = a5 + a3 - a5;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 22
4 22
5 23
<<<sep_out_sample>>>
cmp %ecx,%r8d
jle e <func1+0xe>
mov %edx,%r9d
imul %edi,%r9d
jmp 1b <func1+0x1b>
lea (%r8,%rsi,1),%eax
mov %edi,%r9d
sub %eax,%r9d
sub %edx,%r9d
test %ecx,%ecx
jle 28 <func1+0x28>
mov %ecx,%eax
imul %edx,%eax
neg %eax
jmp 2d <func1+0x2d>
lea (%rdi,%rcx,1),%eax
add %edx,%eax
lea (%rdx,%rcx,1),%r10d
lea (%rcx,%r8,1),%r11d
cmp %ecx,%eax
cmovge %r11d,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %r9d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a5 + a3 + a3;
    }
    if (a4 < a5)
    {
        v8 = a3 * a1;
    }
    else
    {
        v8 = (a1 - (a5 + a2)) - a3;
    }
    if (v6 < a4)
    {
        v9 = a5 - (a4 * a3 + a5);
    }
    else
    {
        v9 = a1 + a4 + a3;
    }
    if (v9 < a4)
    {
        v10 = a3 + a4;
    }
    else
    {
        v10 = a4 + a5;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 15
7 15
8 15
9 15
10 17
11 17
12 19
13 19
14 19
15 19
16 23
17 23
18 27
19 27
20 27
21 27
22 33
23 33
24 33
25 33
26 33
27 33
28 33
29 34
<<<sep_out_sample>>>
lea -0x1(%rdx),%r9d
imul %r8d,%r9d
sub %ecx,%r9d
lea (%rcx,%rdx,1),%eax
test %edi,%edi
jle 19 <func1+0x19>
mov %esi,%eax
sub %ecx,%eax
lea (%rax,%rdx,2),%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a3 * a5 - a5 - a4;
    if (v7 < a1)
    {
        v7 = (a2 - a4) + a3 + a3;
    }
    else
    {
        v7 = a4 + a3;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 11
5 5
6 5
7 7
8 7
9 7
10 13
11 13
12 13
13 13
14 13
15 13
16 14
<<<sep_out_sample>>>
cmp %esi,%edx
jge a <func1+0xa>
lea (%r8,%r8,1),%r11d
jmp 17 <func1+0x17>
mov %edi,%r11d
imul %edx,%r11d
sub %ecx,%r11d
sub %edx,%r11d
lea (%rdx,%rdi,1),%r10d
cmp %edi,%r8d
jl 2b <func1+0x2b>
lea (%rsi,%rcx,1),%r10d
add %edi,%r10d
imul %edi,%r10d
cmp %edi,%edx
lea (%r8,%rdx,2),%r9d
cmovge %esi,%r9d
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a3 < a2)
    {
        v6 = a5 + a5;
    }
    else
    {
        v6 = (a1 * a3 - a4) - a3;
    }
    if (a5 < a1)
    {
        v7 = a3 + a1;
    }
    else
    {
        v7 = a1 * (a2 + a4 + a1);
    }
    if (a3 < a1)
    {
        v8 = a3 + a3 + a5;
    }
    else
    {
        v8 = a2 - (a1 - a1) * a1;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        v9 += a1 * a1 - a5;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 10
6 10
7 10
8 10
9 14
10 12
11 12
12 18
13 18
14 18
15 20
16 22
17 22
18 33
19 33
20 33
21 33
22 33
23 33
24 33
25 34
<<<sep_out_sample>>>
cmp %ecx,%esi
jge 1a <func1+0x1a>
mov %r8d,%r10d
imul %esi,%r10d
mov $0x1,%r9d
sub %r8d,%r9d
imul %edx,%r9d
jmp 27 <func1+0x27>
mov %r8d,%r10d
sub %edi,%r10d
lea (%rdi,%rdx,2),%r9d
sub %esi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a2 < a4)
    {
        v6 = a5 * (a2 + (a1 - a1));
    }
    else
    {
        v6 = a5 - a1;
    }
    if (a2 < a4)
    {
        v7 = a3 - a3 * a5;
    }
    else
    {
        v7 = a1 + ((a3 - a2) + a3);
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 14
6 14
7 14
8 14
9 10
10 10
11 18
12 18
13 20
14 20
15 20
16 20
17 20
18 20
19 21
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
mov %edi,%r9d
imul %edx,%r9d
add %r9d,%eax
imul %r8d,%edx
sub %edx,%esi
add %esi,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a1 * a3;
    v7 = a2 - a5 * a3 + a1;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 4
7 6
8 5
9 5
10 5
11 6
12 7
<<<sep_out_sample>>>
lea (%rsi,%rcx,1),%eax
mov %r8d,%r9d
sub %esi,%r9d
cmp %r8d,%esi
cmovge %r9d,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a2 < a5)
    {
        v6 = a2 + a4 + a2 - a2;
    }
    else
    {
        v6 = (a5 - a4) + (a4 - a2);
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += (a5 - a3) - a1;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        v9 += a1 + a5 - a3;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 6
6 22
7 22
8 22
9 22
10 22
11 23
<<<sep_out_sample>>>
mov %esi,%eax
sub %r8d,%eax
cmp %ecx,%edi
jg 13 <func1+0x13>
mov %r8d,%eax
imul %esi,%eax
sub %edx,%eax
add %edi,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a1 + a2 - a5;
    }
    if (a4 < a1)
    {
        v8 = a2 - a5;
    }
    else
    {
        v8 = a5 * a2 - a3 + a1;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        if (a1 < a5)
        {
            v9 += a4 + a4 - a3;
        }
        else
        {
            v9 += (a1 * a1) * a5;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 9
4 9
5 15
6 15
7 15
8 15
9 29
10 29
11 29
12 29
13 29
14 30
<<<sep_out_sample>>>
test %esi,%esi
jle b <func1+0xb>
mov %ecx,%eax
imul %esi,%eax
jmp 12 <func1+0x12>
mov %esi,%eax
imul %edx,%eax
add %ecx,%eax
add %edi,%edx
add %edx,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a3 + a3;
    }
    if (v6 < a2)
    {
        v8 = a4 * a2;
    }
    else
    {
        v8 = (a2 * a3) + a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 15
7 15
8 15
9 17
10 17
11 17
12 17
13 17
14 18
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
lea 0x1(%rcx,%r8,1),%eax
sub %esi,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a1 * (a3 + a2);
    }
    v8 = a3 - a2;
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        if (a2 < a5)
        {
            v9 += a1 + a2;
        }
        else
        {
            v9 += a4 - a3;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 22
4 22
5 9
6 22
7 23
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %edx,%r8d
add %r8d,%ecx
sub %esi,%edi
lea 0x1(%rcx,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a1 - a2;
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        if (a2 < a1)
        {
            v7 += a3 + (a3 + a4);
        }
        else
        {
            v7 += a1 + a1 * a4;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 4
6 17
7 18
<<<sep_out_sample>>>
lea (%rdx,%rdx,1),%eax
sub %r8d,%eax
sub %edi,%eax
lea (%rsi,%rsi,1),%r9d
cmp %esi,%edx
jle 1a <func1+0x1a>
mov %esi,%r9d
neg %r9d
imul %esi,%r9d
lea (%rsi,%rdx,1),%r10d
lea (%rcx,%rsi,1),%r11d
cmp %eax,%r8d
cmovle %r11d,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%eax
lea 0x1(%r9,%rax,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = (a3 + a3 - a5) - a1;
    if (a2 < a3)
    {
        v7 = (a4 - a4 - a2) * a2;
    }
    else
    {
        v7 = a2 + a2;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += (a5 + a3) + a2;
    }
    if (v6 < a5)
    {
        v10 = a2 + a3;
    }
    else
    {
        v10 = a4 + a2;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 11
5 5
6 5
7 7
8 7
9 7
10 20
11 20
12 20
13 20
14 26
15 26
16 26
17 26
18 26
19 26
20 26
21 27
<<<sep_out_sample>>>
mov %r8d,%eax
imul %edx,%eax
lea (%rsi,%rcx,1),%r9d
lea (%r9,%rax,1),%r9d
mov %edx,%eax
sub %r8d,%eax
lea (%rsi,%rdi,1),%r10d
cmp %r9d,%esi
cmovg %eax,%r10d
mov %ecx,%eax
imul %r8d,%eax
imul %edi,%eax
add %esi,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %eax,%r9d
lea (%r9,%r10,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (v7 < a1)
        {
            v6 += a4 + a5;
        }
        else
        {
            v6 += (a1 + a2) - a3;
        }
    }
    if (a5 < a5)
    {
        v8 = (a4 - (a4 - a4)) + a1;
    }
    else
    {
        v8 = (a2 + a5 * a3) + a4;
    }
    if (v8 < a2)
    {
        v9 = ((a3 + a4) - a4) - a5;
    }
    else
    {
        v9 = a2 + a1;
    }
    v10 = a2 + (a1 * (a4 * a5));
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 22
4 24
5 26
6 26
7 26
8 26
9 26
10 32
11 32
12 32
13 32
14 33
15 33
16 33
17 33
18 33
19 33
20 33
21 34
<<<sep_out_sample>>>
lea (%rsi,%rdi,1),%eax
cmp $0x1,%r8d
jle 15 <func1+0x15>
mov $0x1,%eax
sub %edi,%eax
imul %edx,%eax
sub %esi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += (a4 - a5) + a3;
    }
    if (v7 < a5)
    {
        v8 = (a3 - a1 * a3) - a2;
    }
    else
    {
        v8 = a2 + a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 15
2 9
3 9
4 11
5 11
6 11
7 11
8 17
9 17
10 17
11 17
12 17
13 18
<<<sep_out_sample>>>
cmp %r8d,%esi
jge 11 <func1+0x11>
mov %edx,%eax
sub %ecx,%eax
add $0x1,%eax
imul %ecx,%eax
jmp 18 <func1+0x18>
mov %edi,%eax
imul %esi,%eax
add %edx,%eax
add %edx,%edi
add %edi,%esi
add %r8d,%esi
add %esi,%ecx
lea 0x1(%rax,%rcx,1),%eax
sub %r8d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a2 < a5)
    {
        v6 = a4 * (a3 - a4) + a4;
    }
    else
    {
        v6 = a3 + a1 * a2;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += a4 * a1 * a5;
    }
    v9 = (a5 - a5) - a5 + a3;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 18
12 18
13 18
14 18
15 18
16 17
17 18
18 19
<<<sep_out_sample>>>
cmp %edi,%ecx
jge 19 <func1+0x19>
mov %ecx,%r10d
sub %edx,%r10d
mov %r8d,%r9d
imul %esi,%r9d
add %edx,%r9d
add %edi,%r9d
jmp 2a <func1+0x2a>
mov %edi,%r10d
imul %edi,%r10d
add %ecx,%r10d
mov %esi,%r9d
imul %ecx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a4 < a1)
    {
        v6 = a2 + a4 - a2 - a3;
    }
    else
    {
        v6 = a1 * a1 + a4;
    }
    if (a4 < a1)
    {
        v7 = a3 + (a5 * a2) + a1;
    }
    else
    {
        v7 = a2 * a4;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 14
6 14
7 14
8 14
9 14
10 10
11 10
12 10
13 18
14 18
15 20
16 20
17 20
18 20
19 20
20 20
21 21
<<<sep_out_sample>>>
lea 0x1(%rcx),%eax
imul %r8d,%eax
add %ecx,%eax
add %eax,%edi
add %edx,%edi
add %esi,%edi
add %edi,%r8d
sub %edx,%ecx
lea 0x1(%rcx,%r8,1),%eax
sub %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a5 - a3;
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += a4 * (a2 + a3);
    }
    v9 = a1 - (a5 + a1 + a2);
    v10 = a4 + ((a4 * a5) + a5);
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 12
5 12
6 12
7 12
8 12
9 10
10 12
11 13
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,2),%eax
add %eax,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a3 - (a1 + a5);
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        if (v6 < a2)
        {
            v8 += (a3 * a2) * a2;
        }
        else
        {
            v8 += a3 + a1 + a5;
        }
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a2)
    {
        v10 += a5 - a5;
    }
    v12 = (a3 - a3) * a1 + a3;
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 27
2 27
3 27
4 27
5 28
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %edx,%r8d
lea (%r8,%rcx,1),%edx
imul %edi,%esi
sub %ecx,%esi
add %esi,%edi
lea 0x1(%rdx,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = ((a1 * a2) - a4) + a1;
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += (a5 * a1) + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 4
6 4
7 4
8 10
9 11
<<<sep_out_sample>>>
cmp %edx,%esi
jge 15 <func1+0x15>
mov %edx,%eax
imul %edx,%eax
mov %ecx,%r9d
sub %eax,%r9d
imul %r8d,%r9d
jmp 23 <func1+0x23>
mov %ecx,%eax
imul %esi,%eax
mov %r8d,%r9d
sub %eax,%r9d
sub %esi,%r9d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
sub %edi,%ecx
lea (%rcx,%r9,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = (a4 - a4) * a4 - a1;
    if (a2 < a3)
    {
        v7 = (a4 - (a3 * a3)) * a5;
    }
    else
    {
        v7 = (a5 - a4 * a2) - a2;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 5
2 5
3 7
4 7
5 7
6 7
7 7
8 7
9 11
10 11
11 11
12 11
13 11
14 13
15 13
16 13
17 13
18 13
19 13
20 14
<<<sep_out_sample>>>
add %edx,%edi
add %esi,%edi
add %edi,%r8d
lea (%r8,%rcx,1),%eax
sub %esi,%edx
add %edx,%eax
add %ecx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a3 - a2;
    v7 = a3 + a2 - a3 + a4;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 6
7 5
8 6
9 7
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (a3 < a1)
        {
            v6 += a2 - a5;
        }
        else
        {
            v6 += a2 - a3 + a1;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        if (a4 < a5)
        {
            v8 += a2 * a1 - a4;
        }
        else
        {
            v8 += (a1 - a5) * a2;
        }
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a3)
    {
        v10 += a4 + a3;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 33
2 33
3 33
4 33
5 34
<<<sep_out_sample>>>
mov %esi,%eax
sub %ecx,%eax
cmp %ecx,%esi
jg 19 <func1+0x19>
mov %r8d,%eax
imul %edi,%eax
mov %ecx,%r9d
sub %eax,%r9d
mov %r9d,%eax
add %edx,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (a2 < a3)
        {
            v6 += (a4 + a2) + a3;
        }
        else
        {
            v6 += (a1 - a2) * a5;
        }
    }
    if (a4 < a2)
    {
        v8 = a2 - a4;
    }
    else
    {
        v8 = a4 - (a5 * a1) + a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 18
2 18
3 16
4 16
5 22
6 22
7 22
8 22
9 22
10 22
11 24
12 24
13 24
14 24
15 24
16 25
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
lea -0x1(%rdx),%ecx
imul %ecx,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a2 - (a3 - a1);
    }
    v8 = a3 * a3 - a3;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 9
6 9
7 10
8 11
<<<sep_out_sample>>>
cmp %ecx,%edi
jge 14 <func1+0x14>
mov %esi,%r9d
imul %esi,%r9d
imul %edi,%r9d
add %ecx,%r9d
jmp 1b <func1+0x1b>
mov %edx,%r9d
imul %r8d,%r9d
cmp %r8d,%edx
jge 2a <func1+0x2a>
lea (%rdi,%rdx,1),%eax
imul %esi,%eax
sub %ecx,%eax
jmp 33 <func1+0x33>
lea (%rdi,%rcx,1),%eax
imul %edi,%eax
imul %edi,%eax
cmp %r8d,%ecx
jge 44 <func1+0x44>
mov %edx,%r10d
sub %ecx,%r10d
imul %ecx,%r10d
jmp 4b <func1+0x4b>
lea (%rsi,%rdi,2),%r10d
sub %ecx,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a1 < a4)
    {
        v6 = a4 + (a2 * a2) * a1;
    }
    else
    {
        v6 = a3 * a5;
    }
    if (a3 < a5)
    {
        v7 = ((a1 + a3) * a2) - a4;
    }
    else
    {
        v7 = (a1 + a4) * a1 * a1;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += a2 * (a3 + a1);
    }
    if (a4 < a5)
    {
        v10 = (a3 - a4) * a4;
    }
    else
    {
        v10 = a2 - ((a4 - a1) - a1);
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 12
11 12
12 14
13 14
14 14
15 14
16 18
17 18
18 18
19 25
20 25
21 27
22 27
23 27
24 27
25 31
26 31
27 33
28 33
29 33
30 33
31 33
32 33
33 33
34 34
<<<sep_out_sample>>>
mov %r8d,%eax
imul %r8d,%eax
imul %r8d,%eax
mov %edi,%r9d
sub %esi,%r9d
lea (%rsi,%rdi,1),%r10d
cmp %edi,%edx
jg 26 <func1+0x26>
mov %esi,%r10d
sub %edi,%r10d
add %edx,%r10d
imul %r8d,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += (a2 + a3) * a3;
    }
    v8 = a5 * (a5 * a5);
    v9 = (a1 - a5) + a5 - a2;
    if (a1 < a3)
    {
        v10 = a5 - a5 + a2 + a1;
    }
    else
    {
        v10 = (a2 - a1 + a3) * a5;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 9
4 10
5 10
6 13
7 11
8 11
9 17
10 17
11 17
12 17
13 19
14 19
15 19
16 19
17 19
18 19
19 19
20 20
<<<sep_out_sample>>>
mov %r8d,%r9d
imul %ecx,%r9d
test %esi,%esi
jle 1b <func1+0x1b>
mov %ecx,%eax
sub %edx,%eax
mov %ecx,%r10d
imul %esi,%r10d
sub %r10d,%eax
jmp 24 <func1+0x24>
mov %edx,%eax
imul %edi,%eax
sub %esi,%eax
sub %edx,%eax
lea (%rdi,%rdx,1),%r10d
add %r10d,%esi
add %r8d,%esi
add %esi,%ecx
add %r9d,%ecx
add %eax,%ecx
add $0x1,%edi
imul %edi,%edx
sub %r8d,%edx
lea (%rcx,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a5 * a4;
    if (v7 < a2)
    {
        v7 = a4 - a3 - a4 * a2;
    }
    else
    {
        v7 = a3 * a1 - a2 - a3;
    }
    v8 = a1 * a3 + a3 - a5;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 5
4 5
5 7
6 7
7 7
8 7
9 7
10 7
11 11
12 11
13 11
14 11
15 14
16 14
17 14
18 14
19 14
20 14
21 13
22 13
23 13
24 14
25 15
<<<sep_out_sample>>>
mov $0x0,%eax
cmp %edx,%ecx
jle 18 <func1+0x18>
lea (%r8,%rcx,1),%eax
mov %esi,%r9d
sub %eax,%r9d
mov %r9d,%eax
add %edi,%eax
lea 0x2(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a1 * a4 + a5;
    }
    if (a3 < a4)
    {
        v8 = (a2 - (a5 + a4)) + a1;
    }
    else
    {
        v8 = a2 - a2;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a1)
    {
        v9 += (a1 - a2) + a5;
    }
    v11 = 0;
    for (v12 = 0; v12++; v12<a4)
    {
        v11 += a5 + a5 - a4;
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 15
2 9
3 9
4 11
5 11
6 11
7 11
8 11
9 27
10 27
11 27
12 27
13 27
14 28
<<<sep_out_sample>>>
mov %esi,%eax
sub %edi,%eax
sub %edi,%eax
add %edx,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = (a2 - a2) * a2;
    v7 = a2 - a1 - a1 + a3;
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += a1 + a5 * a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 5
2 5
3 5
4 5
5 11
6 11
7 11
8 11
9 11
10 12
<<<sep_out_sample>>>
cmp %edi,%ecx
jge c <func1+0xc>
mov %edi,%r9d
sub %ecx,%r9d
jmp 13 <func1+0x13>
mov %edx,%r9d
imul %r8d,%r9d
mov %edx,%eax
sub %esi,%eax
cmp %r8d,%edi
jle 24 <func1+0x24>
lea (%r8,%r8,1),%eax
imul %r8d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %ecx,%r8d
add %r9d,%r8d
add %r8d,%eax
imul %ecx,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a4 < a1)
    {
        v6 = a1 - a4;
    }
    else
    {
        v6 = a3 * a5;
    }
    if (a5 < a1)
    {
        v7 = a5 * (a5 + a5);
    }
    else
    {
        v7 = a3 - a2;
    }
    v8 = a3 * a4;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 18
9 18
10 12
11 12
12 14
13 14
14 21
15 21
16 21
17 21
18 21
19 21
20 20
21 21
22 22
<<<sep_out_sample>>>
mov %esi,%r9d
imul %r8d,%r9d
imul %r8d,%r9d
add %ecx,%r9d
lea (%r8,%rdx,1),%eax
cmp %edi,%ecx
jl 1b <func1+0x1b>
mov %edi,%eax
imul %esi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a4 + a5 * (a2 * a5);
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        if (a4 < a3)
        {
            v7 += a1 + a1 * a1;
        }
        else
        {
            v7 += (a3 * a3) - a3;
        }
    }
    if (a4 < a1)
    {
        v9 = a5 + a3;
    }
    else
    {
        v9 = (a1 * a2 + a4) - a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 19
6 17
7 17
8 23
9 23
10 25
11 25
12 25
13 25
14 25
15 25
16 26
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a3 + (a4 + a4);
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        if (v8 < a3)
        {
            v8 += a5 * (a5 + a1);
        }
        else
        {
            v8 += a1 * a4 * a3;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 21
5 22
<<<sep_out_sample>>>
lea (%r8,%rsi,1),%r11d
imul %edx,%r11d
add %r8d,%r11d
cmp %esi,%r8d
jle 18 <func1+0x18>
mov %ecx,%r10d
sub %edx,%r10d
jmp 23 <func1+0x23>
lea (%rcx,%rdi,1),%r10d
imul %ecx,%r10d
add %r8d,%r10d
lea (%rdx,%rcx,1),%r9d
cmp %edi,%esi
jge 34 <func1+0x34>
mov %ecx,%r9d
sub %r8d,%r9d
add %edx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a1 < a1)
    {
        v6 = a1 + a5 * a4 * a1;
    }
    else
    {
        v6 = a5 + (a5 + a2) * a3;
    }
    if (a2 < a5)
    {
        v7 = a4 - a3;
    }
    else
    {
        v7 = (a4 + a1) * a4 + a5;
    }
    if (a2 < a1)
    {
        v8 = (a4 - a5) + a3;
    }
    else
    {
        v8 = a3 + a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 12
5 12
6 14
7 14
8 14
9 18
10 18
11 18
12 26
13 20
14 20
15 22
16 22
17 22
18 28
19 28
20 28
21 28
22 28
23 28
24 28
25 29
<<<sep_out_sample>>>
push %rbx
cmp %edi,%edx
jge 10 <func1+0x10>
mov %edi,%ebx
sub %esi,%ebx
imul %edx,%ebx
add %edi,%ebx
jmp 16 <func1+0x16>
mov %r8d,%ebx
imul %ecx,%ebx
lea (%rdi,%rcx,1),%eax
imul %r8d,%eax
mov %ecx,%r9d
sub %eax,%r9d
cmp %r8d,%esi
jle 30 <func1+0x30>
mov %edi,%r11d
sub %esi,%r11d
jmp 40 <func1+0x40>
mov $0x1,%r11d
sub %esi,%r11d
imul %esi,%r11d
sub %ecx,%r11d
cmp %r9d,%ecx
jle 4e <func1+0x4e>
mov %esi,%r10d
imul %r8d,%r10d
jmp 58 <func1+0x58>
mov %edx,%r10d
imul %r8d,%r10d
sub %ecx,%r10d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %ebx,%eax
add %r9d,%eax
add %r11d,%eax
add %r10d,%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a3 < a1)
    {
        v6 = ((a1 - a2) * a3) + a1;
    }
    else
    {
        v6 = ((a2 + a5) - a2) * a4;
    }
    v7 = a4 - ((a1 + a4) * a5);
    if (a5 < a2)
    {
        v8 = ((a1 - a2) - a4) + a4;
    }
    else
    {
        v8 = a2 - a2 * a2 - a4;
    }
    if (v7 < a4)
    {
        v9 = a2 * a5;
    }
    else
    {
        v9 = a3 * a5 - a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 4
3 4
4 6
5 6
6 6
7 6
8 6
9 10
10 10
11 12
12 12
13 12
14 12
15 13
16 13
17 15
18 15
19 15
20 19
21 19
22 19
23 19
24 21
25 21
26 23
27 23
28 23
29 27
30 27
31 27
32 29
33 29
34 29
35 29
36 29
37 29
38 29
39 29
40 30
41 30
<<<sep_out_sample>>>
lea (%rsi,%r8,1),%r9d
cmp %ecx,%esi
mov $0x0,%eax
cmovl %eax,%r9d
jle 17 <func1+0x17>
lea (%rcx,%r8,1),%eax
jmp 22 <func1+0x22>
mov %r8d,%eax
sub %edi,%eax
imul %ecx,%eax
imul %esi,%eax
cmp %r8d,%esi
jle 30 <func1+0x30>
mov %edi,%r10d
imul %r8d,%r10d
jmp 38 <func1+0x38>
lea (%rdx,%rcx,1),%r10d
imul %r8d,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a2 < a4)
    {
        v6 = a2 * a4 - (a4 * a2);
    }
    else
    {
        v6 = a2 + a5;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a3 - a2;
    }
    if (a4 < a2)
    {
        v9 = a4 + a5;
    }
    else
    {
        v9 = a4 * (a5 - a1) * a2;
    }
    if (a5 < a2)
    {
        v10 = a1 * a5;
    }
    else
    {
        v10 = (a3 * a5) + a5 * a4;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 17
6 19
7 19
8 23
9 23
10 23
11 23
12 25
13 25
14 27
15 27
16 27
17 31
18 31
19 33
20 33
21 33
22 33
23 33
24 33
25 33
26 34
<<<sep_out_sample>>>
cmp %edx,%esi
jge 11 <func1+0x11>
mov %ecx,%eax
imul %ecx,%eax
imul %esi,%eax
add %r8d,%eax
jmp 18 <func1+0x18>
lea (%rcx,%rcx,1),%eax
sub %edi,%eax
sub %edx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %ecx,%r8d
add %eax,%r8d
add %edi,%ecx
lea 0x1(%r8,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a2 < a3)
    {
        v6 = a5 + a4 * a4 * a2;
    }
    else
    {
        v6 = a4 + a4 - a1 - a3;
    }
    v7 = (a1 + a4) + (a1 - a1);
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        if (v7 < a4)
        {
            v8 += a4 + a4 - a3;
        }
        else
        {
            v8 += a3 + a4;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 25
12 25
13 25
14 25
15 25
16 12
17 25
18 26
<<<sep_out_sample>>>
cmp %esi,%ecx
jge 18 <func1+0x18>
mov %r8d,%eax
imul %esi,%eax
imul %esi,%eax
mov %edi,%r10d
sub %eax,%r10d
mov %r10d,%eax
jmp 25 <func1+0x25>
lea (%rdi,%rdx,1),%eax
mov %edx,%r9d
imul %r8d,%r9d
sub %r9d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a4 < a2)
    {
        v6 = a1 - a2 * (a5 * a2);
    }
    else
    {
        v6 = a1 + a3 - a3 * a5;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        if (a1 < a5)
        {
            v7 += a1 * a1;
        }
        else
        {
            v7 += a2 + a2;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 6
9 6
10 10
11 10
12 10
13 10
14 24
15 24
16 24
17 24
18 24
19 25
<<<sep_out_sample>>>
lea (%rcx,%rsi,2),%eax
test %ecx,%ecx
jg 12 <func1+0x12>
mov %r8d,%eax
imul %edi,%eax
imul %edi,%eax
sub %edx,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a1 * a1;
    }
    if (v8 < a4)
    {
        v8 = a2 + a4 + a2;
    }
    else
    {
        v8 = (a5 * a1) * a1 - a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 11
2 9
3 9
4 15
5 15
6 15
7 15
8 17
9 17
10 17
11 17
12 17
13 18
<<<sep_out_sample>>>
lea (%rsi,%r8,1),%eax
test %edx,%edx
jg f <func1+0xf>
mov %ecx,%eax
sub %edi,%eax
add %r8d,%eax
lea 0x1(%rdi,%rdx,1),%edi
add %esi,%edi
add %r8d,%edi
lea 0x1(%rcx,%rdi,1),%ecx
add %ecx,%eax
imul %r8d,%esi
add %esi,%edx
imul %edx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a2 * a2;
    }
    if (v6 < a3)
    {
        v8 = a2 + a5;
    }
    else
    {
        v8 = a4 - a1 + a5;
    }
    v9 = (a2 * a5 + a3) * a5;
    v10 = 0;
    for (v11 = 0; v11++; v11<a4)
    {
        if (a3 < a3)
        {
            v10 += (a4 * a2) + a1;
        }
        else
        {
            v10 += a3 * a4 + a3;
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 9
3 9
4 15
5 15
6 15
7 30
8 30
9 30
10 30
11 30
12 17
13 17
14 17
15 30
16 31
<<<sep_out_sample>>>
cmp %ecx,%esi
jle d <func1+0xd>
mov %ecx,%r10d
imul %ecx,%r10d
jmp 1c <func1+0x1c>
mov %r8d,%eax
imul %esi,%eax
mov %edi,%r10d
sub %eax,%r10d
add %edx,%r10d
lea (%rdi,%r8,1),%r9d
test %edi,%edi
jg 2e <func1+0x2e>
mov %esi,%r9d
sub %ecx,%r9d
imul %r8d,%r9d
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += (a2 + a5) * a3;
    }
    if (a4 < a2)
    {
        v8 = a4 * a4;
    }
    else
    {
        v8 = a1 - a5 * a2 + a3;
    }
    if (v9 < a1)
    {
        v9 = a1 + a5;
    }
    else
    {
        v9 = a5 * (a2 - a4);
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a2)
    {
        v10 += a1 * a4 + a1;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 15
7 15
8 15
9 15
10 15
11 19
12 17
13 17
14 23
15 23
16 23
17 30
18 30
19 30
20 30
21 30
22 30
23 31
<<<sep_out_sample>>>
mov %esi,%r9d
imul %ecx,%r9d
add %r8d,%r9d
sub %ecx,%r9d
mov %ecx,%eax
sub %r8d,%eax
mov %esi,%r10d
imul %edx,%r10d
test %r8d,%r8d
cmovg %r10d,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = a5 + a2 * a4 - a4;
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        if (v8 < a4)
        {
            v7 += a5 * a1 + a4;
        }
        else
        {
            v7 += (a1 * a1) + a1;
        }
    }
    if (v9 < a5)
    {
        v9 = a2 * a3;
    }
    else
    {
        v9 = ((a4 - a3) - a5) + a3;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a1)
    {
        v10 += a5 - a3;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 23
6 23
7 19
8 19
9 19
10 19
11 30
12 30
13 30
14 30
15 30
16 30
17 31
<<<sep_out_sample>>>
lea (%rdx,%rdi,1),%eax
cmp %edx,%r8d
jge e <func1+0xe>
mov %edx,%eax
neg %eax
sub %ecx,%eax
add %edi,%edx
add %esi,%edx
add %edx,%r8d
add %ecx,%r8d
add %r8d,%eax
sub %esi,%edi
imul %ecx,%esi
add %esi,%edi
add %edi,%eax
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a5 < a3)
    {
        v6 = ((a1 - a3) - a4) - a1;
    }
    else
    {
        v6 = a3 + (a2 - a2) + a1;
    }
    v7 = a1 - a2 + a4 * a2;
    v8 = a2 + (a4 - a2);
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 6
7 14
8 14
9 14
10 14
11 14
12 12
13 12
14 12
15 14
16 14
17 15
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
lea 0x1(%rcx,%r8,1),%eax
mov %edi,%edx
imul %edi,%edx
imul %edx,%esi
add %esi,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (v7 < a5)
        {
            v6 += (a4 - a2) * a1;
        }
        else
        {
            v6 += a2 + a3 - a5;
        }
    }
    v8 = a1 + a1 * a1 * a2;
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        v9 += (a2 + a4) + a4;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 22
4 22
5 16
6 16
7 16
8 16
9 22
10 23
<<<sep_out_sample>>>
lea (%rdi,%r8,2),%eax
sub %esi,%eax
lea 0x1(%rdi,%rax,1),%eax
add %eax,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a2 * a2 - a4;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += (a1 + a4) + a3;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a4)
    {
        if (v10 < a5)
        {
            v10 += a1 * a3 * a3;
        }
        else
        {
            v10 += (a2 - a5) * a3;
        }
    }
    v12 = (a5 - a2) + (a1 + a5);
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 26
2 26
3 27
4 27
5 27
6 27
7 27
8 28
<<<sep_out_sample>>>
test %edx,%edx
jle f <func1+0xf>
mov %edi,%eax
sub %edx,%eax
sub %r8d,%eax
sub %ecx,%eax
jmp 1d <func1+0x1d>
mov %edx,%eax
sub %ecx,%eax
mov %ecx,%r9d
imul %ecx,%r9d
sub %r9d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%ecx
add %ecx,%eax
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += (a1 - a3) + a5;
    }
    if (v6 < a3)
    {
        v8 = (a1 - a3) - a5 - a4;
    }
    else
    {
        v8 = a3 - a4 - a4 * a4;
    }
    if (a4 < a4)
    {
        v9 = a5 + ((a4 - a2) + a3);
    }
    else
    {
        v9 = a3 + a1 - a5 + a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 11
8 15
9 15
10 15
11 15
12 15
13 23
14 25
15 25
16 25
17 25
18 25
19 26
<<<sep_out_sample>>>
mov %edx,%eax
sub %esi,%eax
add %edi,%edx
add %esi,%edx
add %r8d,%edx
lea 0x1(%rcx,%rdx,1),%edx
imul %eax,%r8d
sub %esi,%r8d
add %edx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (a5 < a4)
        {
            v6 += a4 - a2 * a1;
        }
        else
        {
            v6 += a3 + a4 - a3;
        }
    }
    v8 = ((a3 - a2) * a5) - a2;
    v9 = a3 - a2;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 18
7 16
8 16
9 18
10 18
11 19
<<<sep_out_sample>>>
mov %edx,%eax
sub %edi,%eax
cmp $0x1,%edi
jle 10 <func1+0x10>
mov %edi,%eax
sub %ecx,%eax
imul %esi,%eax
add %edx,%edi
add %edi,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a4 - a4 * a2;
    }
    if (v7 < a1)
    {
        v8 = a2 * a1 - a4 * a2;
    }
    else
    {
        v8 = a3 - a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 15
2 15
3 9
4 9
5 11
6 11
7 11
8 17
9 17
10 17
11 17
12 17
13 18
<<<sep_out_sample>>>
mov %edi,%r9d
sub %r8d,%r9d
sub %r8d,%r9d
imul %r8d,%r9d
mov %ecx,%r11d
imul %esi,%r11d
cmp %r9d,%r8d
jle 29 <func1+0x29>
mov %edx,%r10d
imul %edi,%r10d
imul %esi,%r10d
add %ecx,%r10d
jmp 38 <func1+0x38>
mov %r8d,%r10d
imul %edx,%r10d
imul %edi,%r10d
imul %edi,%r10d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
add %r11d,%eax
add %r10d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = (a1 - a5 - a5) * a5;
    v7 = a4 * a2;
    if (v6 < a5)
    {
        v8 = a4 + a2 * (a3 * a1);
    }
    else
    {
        v8 = a1 * (a5 * a3) * a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 5
6 5
7 6
8 6
9 8
10 8
11 8
12 8
13 8
14 12
15 12
16 12
17 12
18 14
19 14
20 14
21 14
22 14
23 14
24 14
25 15
<<<sep_out_sample>>>
mov %edi,%eax
imul %r8d,%eax
add %eax,%edi
add %edx,%edi
add %esi,%edi
add %edi,%r8d
add %r8d,%ecx
add %esi,%edx
imul %esi,%esi
sub %esi,%edx
lea 0x1(%rcx,%rdx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = (a2 + a3) - a2 * a2;
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        if (v6 < a2)
        {
            v7 += a3 * a2 * a3;
        }
        else
        {
            v7 += a3 - a3;
        }
    }
    v9 = a1 * a5;
    v10 = a5 * a1;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 17
2 17
3 19
4 19
5 19
6 19
7 19
8 4
9 4
10 4
11 19
12 19
13 20
<<<sep_out_sample>>>
mov %esi,%eax
sub %ecx,%eax
cmp %edx,%ecx
jl 12 <func1+0x12>
lea (%r8,%rdx,1),%eax
imul %ecx,%eax
imul %edi,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a4 < a3)
    {
        v6 = (a2 - a5 - a4) + a5;
    }
    else
    {
        v6 = (a5 + a3) * a4 * a1;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        if (v8 < a1)
        {
            v7 += a5 * (a5 - a1);
        }
        else
        {
            v7 += a5 - a2 - a1;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 6
2 6
3 4
4 4
5 10
6 10
7 10
8 24
9 24
10 24
11 24
12 24
13 25
<<<sep_out_sample>>>
mov %r8d,%r9d
sub %edx,%r9d
test %ecx,%ecx
mov $0x0,%eax
cmovle %r9d,%eax
lea 0x1(%rax,%rdi,1),%eax
add %eax,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += (a2 - a2) + a1;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += a4 + (a5 + a4);
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a4)
    {
        if (v9 < a4)
        {
            v10 += a2 + a2 + a1;
        }
        else
        {
            v10 += a2 * a1 + a1;
        }
    }
    if (v6 < a4)
    {
        v12 = a3 - a3;
    }
    else
    {
        v12 = a5 - a3;
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 32
2 32
3 32
4 32
5 32
6 34
7 34
8 34
9 34
10 34
11 35
<<<sep_out_sample>>>
lea (%rsi,%r8,2),%r9d
sub %edx,%r9d
cmp %r9d,%edx
jle 1d <func1+0x1d>
mov %esi,%r10d
imul %edx,%r10d
imul %ecx,%r10d
imul %edi,%r10d
jmp 2b <func1+0x2b>
mov %edi,%r10d
sub %esi,%r10d
mov %edx,%eax
imul %edx,%eax
add %eax,%r10d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
lea (%r9,%r10,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a1 < a1)
    {
        v6 = (a4 - (a1 * a4)) * a1;
    }
    else
    {
        v6 = (a2 + a5 + a5) - a3;
    }
    if (v6 < a3)
    {
        v7 = ((a2 * a3) * a4) * a1;
    }
    else
    {
        v7 = (a1 - a2) + a3 * a3;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 10
2 10
3 12
4 12
5 14
6 14
7 14
8 14
9 14
10 18
11 18
12 18
13 18
14 18
15 20
16 20
17 20
18 20
19 20
20 20
21 21
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %r8d,%edx
add %edx,%ecx
lea (%rsi,%r8,2),%eax
add %eax,%esi
lea 0x1(%rcx,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = ((a5 + a5) + a2) + a2;
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        if (a5 < a4)
        {
            v7 += a3 * a3;
        }
        else
        {
            v7 += a3 - a1 - a1;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 4
6 4
7 17
8 18
<<<sep_out_sample>>>
mov %esi,%eax
sub %edi,%eax
cmp %edi,%r8d
jl 11 <func1+0x11>
mov %r8d,%eax
imul %edi,%eax
neg %eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a5 < a1)
    {
        v6 = a2 - a1;
    }
    else
    {
        v6 = a5 - a5 - a5 * a1;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += (a4 - a2) + a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 6
2 6
3 4
4 4
5 10
6 10
7 10
8 17
9 17
10 17
11 17
12 17
13 18
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a4 * a5 * a2;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += a4 + a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 14
2 14
3 14
4 14
5 15
<<<sep_out_sample>>>
mov %edi,%eax
imul %edx,%eax
mov %r8d,%r10d
sub %eax,%r10d
imul %r8d,%r10d
cmp %edx,%edi
jge 21 <func1+0x21>
mov %esi,%r9d
sub %r8d,%r9d
add %edx,%r9d
add %ecx,%r9d
jmp 2a <func1+0x2a>
lea -0x1(%rsi,%rcx,1),%r9d
imul %ecx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a5 * (a5 - a1 * a3);
    if (a1 < a3)
    {
        v7 = a2 - a5 + a3 + a4;
    }
    else
    {
        v7 = ((a2 + a4) * a4) - a4;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 4
6 5
7 5
8 7
9 7
10 7
11 7
12 7
13 11
14 11
15 13
16 13
17 13
18 13
19 13
20 13
21 14
<<<sep_out_sample>>>
mov $0x0,%eax
test %edx,%edx
jg 11 <func1+0x11>
lea (%r8,%rcx,1),%eax
imul %r8d,%eax
add %edi,%edx
add %esi,%edx
add %r8d,%edx
add %edx,%ecx
lea 0x1(%rax,%rcx,1),%eax
sub %esi,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (v6 < a3)
    {
        v6 = a4 - a4;
    }
    else
    {
        v6 = a5 * a5 + a4 * a5;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        if (a1 < a4)
        {
            v7 += a2 + a2 + a4;
        }
        else
        {
            v7 += a4 + a1 - a3;
        }
    }
    v9 = a5 - a2;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 4
3 4
4 10
5 10
6 25
7 25
8 25
9 25
10 25
11 24
12 25
13 26
<<<sep_out_sample>>>
lea (%rcx,%r8,1),%r9d
mov %ecx,%eax
imul %esi,%eax
lea 0x1(%r9,%rax,1),%eax
add %eax,%edi
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
sub %edx,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a1 + a4 + a4;
    }
    v8 = a1 - a3 - a1 + a4;
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        v9 += a4 - a5 + a4;
    }
    v11 = a4 + a5 + a4 * a2;
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 15
2 15
3 15
4 16
5 16
6 16
7 16
8 16
9 16
10 9
11 16
12 17
<<<sep_out_sample>>>
cmp %edi,%r8d
jle 12 <func1+0x12>
mov %edx,%eax
imul %edi,%eax
imul %edx,%eax
imul %ecx,%eax
jmp 1a <func1+0x1a>
mov %ecx,%eax
sub %esi,%eax
sub %edx,%eax
add %edi,%eax
cmp $0x1,%ecx
jle 2a <func1+0x2a>
mov %edi,%r9d
neg %r9d
sub %esi,%r9d
jmp 33 <func1+0x33>
mov %r8d,%r9d
sub %edx,%r9d
sub %ecx,%r9d
lea 0x1(%r9,%rdi,1),%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a4 + a5 - a3;
    }
    if (a1 < a5)
    {
        v8 = a3 * a1 * a3 * a4;
    }
    else
    {
        v8 = a4 - a2 - a3 + a1;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        v9 += a1 - a2 + a3;
    }
    if (v7 < a4)
    {
        v11 = (a3 - a1 - a3) - a2;
    }
    else
    {
        v11 = (a5 - a3) - a4;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 11
8 15
9 15
10 15
11 15
12 22
13 22
14 24
15 24
16 24
17 24
18 28
19 28
20 28
21 30
22 30
23 30
24 30
25 30
26 30
27 31
<<<sep_out_sample>>>
lea (%rcx,%rdi,2),%eax
add %edx,%eax
add %esi,%eax
add %r8d,%eax
add %eax,%ecx
mov %esi,%eax
imul %edi,%eax
lea 0x1(%rcx,%rax,1),%ecx
imul %edx,%esi
add %esi,%edi
sub %r8d,%edi
lea (%rcx,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a2 * a1;
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += a2 * a5;
    }
    if (a1 < a1)
    {
        v9 = (a5 * a1 + a2) * a4;
    }
    else
    {
        v9 = a3 * a2 + a1 - a5;
    }
    v10 = a4 + a4 + a1 - a4;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 19
2 19
3 19
4 19
5 19
6 4
7 4
8 19
9 16
10 16
11 16
12 19
13 20
<<<sep_out_sample>>>
lea (%rdi,%rdi,1),%eax
test %ecx,%ecx
jle 13 <func1+0x13>
mov %edi,%eax
imul %r8d,%eax
imul %edi,%eax
imul %edi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (v7 < a4)
        {
            v6 += (a4 * a1) + a4;
        }
        else
        {
            v6 += a5 * a3 - a4;
        }
    }
    if (v8 < a4)
    {
        v8 = (a1 * a5) * a1 * a1;
    }
    else
    {
        v8 = a1 + a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 22
2 16
3 16
4 18
5 18
6 18
7 18
8 24
9 24
10 24
11 24
12 24
13 25
<<<sep_out_sample>>>
mov %esi,%r9d
sub %r8d,%r9d
imul %ecx,%r9d
imul %ecx,%r9d
test %esi,%esi
jle 21 <func1+0x21>
mov %esi,%r10d
imul %esi,%r10d
add %ecx,%r10d
add %edi,%r10d
jmp 28 <func1+0x28>
lea (%rdx,%rsi,2),%r10d
add %edx,%r10d
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %r9d,%eax
add %r10d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (v7 < a3)
        {
            v6 += (a3 + a3) + a2;
        }
        else
        {
            v6 += a3 + a1;
        }
    }
    if (a5 < a5)
    {
        v8 = a2 - a5;
    }
    else
    {
        v8 = a4 * (a2 - a5) * a4;
    }
    if (v6 < a2)
    {
        v9 = ((a2 * a2) + a4) + a1;
    }
    else
    {
        v9 = (a2 + a2 + a3) + a3;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a3)
    {
        if (a3 < a1)
        {
            v10 += a5 + a1;
        }
        else
        {
            v10 += (a5 - a3) + a2;
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 22
4 22
5 24
6 24
7 26
8 26
9 26
10 26
11 26
12 30
13 30
14 44
15 44
16 44
17 44
18 44
19 44
20 45
<<<sep_out_sample>>>
mov %edi,%eax
imul %ecx,%eax
mov %esi,%r9d
sub %r8d,%r9d
lea 0x1(%r9,%rax,1),%eax
add %eax,%edi
add %edx,%edi
add %edi,%esi
add %r8d,%esi
add %esi,%ecx
imul %edx,%r8d
lea 0x1(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = a5 * a3;
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        if (v7 < a1)
        {
            v7 += (a3 + a5) - a5;
        }
        else
        {
            v7 += a5 * (a1 + a3);
        }
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a1)
    {
        v9 += a2 * a5 - a2;
    }
    v11 = a2 + a1 * a4 - a5;
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 22
4 22
5 23
6 23
7 23
8 23
9 23
10 23
11 4
12 23
13 24
<<<sep_out_sample>>>
cmp $0x1,%esi
jle d <func1+0xd>
mov %edi,%eax
imul %r8d,%eax
jmp 17 <func1+0x17>
mov %edx,%eax
sub %r8d,%eax
sub %r8d,%eax
add %ecx,%eax
lea (%rsi,%rcx,1),%r9d
lea (%r9,%rdi,2),%r9d
test %r8d,%r8d
jle 33 <func1+0x33>
mov %esi,%r10d
sub %ecx,%r10d
sub %ecx,%r10d
imul %r8d,%r10d
jmp 41 <func1+0x41>
mov %r8d,%r10d
imul %esi,%r10d
imul %edx,%r10d
sub %esi,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a1 * a2;
    }
    if (v7 < a2)
    {
        v8 = a1 * a5;
    }
    else
    {
        v8 = a4 - (a5 - a3 + a5);
    }
    v9 = a2 + a4 + a1 + a1;
    if (v10 < a5)
    {
        v10 = (a2 - a4 - a4) * a5;
    }
    else
    {
        v10 = (a3 * (a5 * a2)) - a2;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 15
7 15
8 15
9 15
10 17
11 17
12 18
13 18
14 20
15 20
16 20
17 20
18 20
19 24
20 24
21 24
22 24
23 26
24 26
25 26
26 26
27 26
28 26
29 26
30 27
<<<sep_out_sample>>>
mov %ecx,%eax
imul %r8d,%eax
mov %edx,%r9d
sub %eax,%r9d
add %edi,%r9d
cmp %edi,%ecx
jge 1e <func1+0x1e>
mov %ecx,%eax
imul %ecx,%eax
add %edi,%eax
add %ecx,%eax
jmp 24 <func1+0x24>
lea (%rdi,%rcx,2),%eax
lea (%rax,%rdx,1),%eax
mov %esi,%r10d
imul %esi,%r10d
lea (%rdx,%rdi,2),%edx
sub %r10d,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a3 - a4 * a5 + a1;
    if (a4 < a1)
    {
        v7 = (a4 * a4) + a1 + a4;
    }
    else
    {
        v7 = (a4 + a3 + a1) + a4;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        if (v8 < a3)
        {
            v8 += a4 + a1 * a5;
        }
        else
        {
            v8 += a4 - (a2 - a5);
        }
    }
    v10 = a1 - a2 * a2;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 4
6 5
7 5
8 7
9 7
10 7
11 7
12 7
13 11
14 11
15 25
16 25
17 26
18 26
19 26
20 26
21 26
22 26
23 26
24 27
<<<sep_out_sample>>>
lea (%rcx,%r8,2),%eax
sub %edi,%eax
mov %ecx,%r9d
sub %edx,%r9d
mov %edx,%r10d
sub %r8d,%r10d
sub %edi,%r9d
cmp %eax,%edi
cmovg %r10d,%r9d
add %edx,%edi
add %edi,%esi
add %r8d,%esi
add %esi,%ecx
add %ecx,%eax
add %r9d,%eax
add %r8d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = (a5 + a4 + a5) - a1;
    if (v6 < a1)
    {
        v7 = a3 - a5;
    }
    else
    {
        v7 = a4 - a3 - a1;
    }
    v8 = a3 + a5;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 11
4 11
5 7
6 7
7 7
8 7
9 7
10 14
11 14
12 14
13 14
14 14
15 14
16 13
17 14
18 15
<<<sep_out_sample>>>
lea (%rdx,%rsi,1),%r9d
cmp %esi,%edi
jl f <func1+0xf>
mov %edx,%r9d
imul %r8d,%r9d
lea (%rdi,%rcx,1),%eax
add %edx,%eax
cmp %edx,%esi
jle 20 <func1+0x20>
mov %edx,%eax
imul %esi,%eax
imul %edx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a1 < a2)
    {
        v6 = a3 + a2;
    }
    else
    {
        v6 = a3 * a5;
    }
    if (a3 < a2)
    {
        v7 = a3 * a2 * a3;
    }
    else
    {
        v7 = (a1 + a4) + a3;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 4
3 4
4 10
5 10
6 18
7 18
8 12
9 12
10 14
11 14
12 14
13 20
14 20
15 20
16 20
17 20
18 20
19 21
<<<sep_out_sample>>>
lea (%rdx,%rsi,2),%r9d
imul %edx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
cmp %ecx,%edx
jg 16 <func1+0x16>
mov %edi,%eax
imul %esi,%eax
add %edi,%edx
add %edx,%esi
add %r8d,%esi
add %esi,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = (a2 + (a2 + a3)) * a3;
    if (a4 < a3)
    {
        v7 = a1 + a3 + a2;
    }
    else
    {
        v7 = a1 * a2;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        if (a2 < a4)
        {
            v8 += a2 - a5 + a3;
        }
        else
        {
            v8 += (a5 - a1) * a2;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 7
4 7
5 5
6 5
7 11
8 11
9 25
10 25
11 25
12 25
13 25
14 25
15 26
<<<sep_out_sample>>>
cmp %ecx,%r8d
jge d <func1+0xd>
lea (%rdi,%rsi,2),%eax
imul %ecx,%eax
jmp 14 <func1+0x14>
mov %edx,%eax
sub %edi,%eax
imul %ecx,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %esi,%edx
add %r8d,%edx
lea 0x1(%rcx,%rdx,1),%edx
add %edx,%eax
imul %esi,%r8d
imul %r8d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a2 - (a3 - a1);
    }
    if (a5 < a4)
    {
        v8 = a4 * (a2 + a1 + a2);
    }
    else
    {
        v8 = a3 * a4 - a4 * a1;
    }
    v9 = (a2 * a5) * a4;
    v10 = 0;
    for (v11 = 0; v11++; v11<a2)
    {
        if (v11 < a5)
        {
            v10 += a1 - a4 - a4;
        }
        else
        {
            v10 += a4 - (a5 * a4);
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 15
7 15
8 15
9 30
10 30
11 30
12 30
13 30
14 17
15 17
16 30
17 31
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%eax
add $0x1,%ecx
imul %ecx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (a2 < a1)
        {
            v6 += a5 + a4 - a1;
        }
        else
        {
            v6 += (a4 - a2) + a3;
        }
    }
    v8 = a4 * a5 + a5;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 16
6 16
7 17
8 18
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %eax,%ecx
lea (%rsi,%rsi,1),%eax
imul %edx,%eax
imul %eax,%edi
lea 0x1(%rcx,%rdi,1),%eax
imul %r8d,%esi
add %esi,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a1 < a1)
    {
        v6 = (a3 - a5 - a1) + a1;
    }
    else
    {
        v6 = (a2 + a2) * a3 * a1;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += a1 + a1 + a2;
    }
    v9 = a3 + (a2 * a5);
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 18
5 10
6 10
7 10
8 18
9 17
10 17
11 18
12 19
<<<sep_out_sample>>>
add %edi,%edx
mov %esi,%eax
sub %edx,%eax
sub %r8d,%eax
cmp %r8d,%esi
jle 15 <func1+0x15>
mov %r8d,%edi
sub %ecx,%edi
jmp 21 <func1+0x21>
sub %esi,%edi
mov %esi,%r9d
imul %r8d,%r9d
add %r9d,%edi
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%eax
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = (a2 - (a3 + a1)) - a5;
    if (a5 < a2)
    {
        v7 = a5 - a4;
    }
    else
    {
        v7 = a1 - a2 + a2 * a5;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 5
6 5
7 7
8 7
9 7
10 11
11 11
12 11
13 11
14 13
15 13
16 13
17 13
18 13
19 14
<<<sep_out_sample>>>
lea (%rcx,%rdx,1),%eax
neg %eax
test %esi,%esi
jg 16 <func1+0x16>
mov $0x1,%eax
sub %r8d,%eax
imul %esi,%eax
sub %ecx,%eax
add %edi,%edx
add %esi,%edx
add %r8d,%edx
add %edx,%ecx
add %ecx,%eax
mov %r8d,%edx
imul %r8d,%edx
imul %edx,%r8d
imul %r8d,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (v6 < a2)
    {
        v6 = a1 - (a4 + a3) - a1;
    }
    else
    {
        v6 = a2 - (a5 * a2) - a4;
    }
    v7 = a5 * a5 * a5 * a2;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 4
4 4
5 10
6 10
7 10
8 10
9 13
10 13
11 13
12 13
13 13
14 12
15 12
16 12
17 12
18 13
19 14
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a2 < a3)
    {
        v6 = a2 - a2;
    }
    else
    {
        v6 = a2 - a2;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += a3 - a3 - a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 18
<<<sep_out_sample>>>
cmp %r8d,%esi
jle 10 <func1+0x10>
mov %edi,%eax
imul %edx,%eax
sub %ecx,%eax
sub %edx,%eax
jmp 1c <func1+0x1c>
mov %edx,%eax
imul %edx,%eax
imul %r8d,%eax
imul %ecx,%eax
add %edx,%edi
add %esi,%edi
add %edi,%r8d
lea 0x1(%rcx,%r8,1),%ecx
add %ecx,%eax
imul %edx,%edx
sub %edx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a2 * a2 + a1;
    }
    if (a5 < a2)
    {
        v8 = (a1 * a3) - a4 - a3;
    }
    else
    {
        v8 = ((a3 * a3) * a5) * a4;
    }
    v9 = a2 - a3 * a3;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 11
8 15
9 15
10 15
11 15
12 18
13 18
14 18
15 18
16 18
17 17
18 17
19 18
20 19
<<<sep_out_sample>>>
lea (%rsi,%rdx,1),%r9d
lea (%rsi,%rcx,1),%r10d
cmp %r8d,%edx
jg 19 <func1+0x19>
lea -0x1(%r8),%r10d
imul %edi,%r10d
imul %esi,%r10d
lea (%rdi,%rdi,1),%eax
mov %r8d,%r11d
imul %edx,%r11d
cmp %ecx,%r9d
cmovl %r11d,%eax
add %edi,%edx
add %esi,%edx
add %r8d,%edx
add %edx,%ecx
add %ecx,%r9d
add %r10d,%r9d
add %eax,%r9d
mov %esi,%eax
imul %esi,%eax
add %eax,%r8d
sub %esi,%r8d
lea (%r9,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a2 + a3;
    if (a5 < a3)
    {
        v7 = a2 + a4;
    }
    else
    {
        v7 = a2 * ((a1 * a5) - a1);
    }
    if (v6 < a4)
    {
        v8 = a5 * a3;
    }
    else
    {
        v8 = a1 + a1;
    }
    v9 = (a2 * a2 + a5) - a2;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 7
3 5
4 5
5 11
6 11
7 11
8 19
9 15
10 15
11 15
12 15
13 22
14 22
15 22
16 22
17 22
18 22
19 22
20 21
21 21
22 21
23 21
24 22
25 23
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %edx,%r8d
lea (%r8,%rcx,1),%eax
mov %esi,%r9d
imul %ecx,%r9d
add %r9d,%eax
sub %ecx,%esi
imul %esi,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a2 * a4;
    v7 = a4 * a2 - a4 * a4;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 4
7 6
8 5
9 5
10 6
11 7
<<<sep_out_sample>>>
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rdi,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a1 - a4;
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        if (v8 < a5)
        {
            v7 += a4 + (a2 + a2);
        }
        else
        {
            v7 += (a4 * a2) * a1;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 18
<<<sep_out_sample>>>
mov $0x0,%eax
cmp %edi,%edx
jl 12 <func1+0x12>
lea 0x1(%rdx),%eax
imul %esi,%eax
imul %ecx,%eax
test %r8d,%r8d
jle 26 <func1+0x26>
mov %esi,%r9d
imul %esi,%r9d
add %ecx,%r9d
sub %edx,%r9d
jmp 2d <func1+0x2d>
mov %r8d,%r9d
imul %esi,%r9d
lea (%rdi,%rdx,1),%r10d
add %r10d,%esi
add %r8d,%esi
add %ecx,%esi
add %esi,%eax
add %r9d,%eax
imul %r8d,%edx
imul %edx,%ecx
sub %ecx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a3 < a1)
    {
        v6 = a1 - a1;
    }
    else
    {
        v6 = a4 * (a3 * a2 + a2);
    }
    if (v7 < a5)
    {
        v7 = a2 * a2 + a4 - a3;
    }
    else
    {
        v7 = a5 * a2;
    }
    v8 = a1 - (a3 * a5) * a4;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 6
2 4
3 4
4 10
5 10
6 10
7 12
8 12
9 14
10 14
11 14
12 14
13 14
14 18
15 18
16 21
17 21
18 21
19 21
20 21
21 21
22 20
23 20
24 20
25 21
26 22
<<<sep_out_sample>>>
lea (%rcx,%rsi,1),%eax
cmp $0x1,%edi
jle 1a <func1+0x1a>
mov %esi,%r10d
sub %ecx,%r10d
mov %r8d,%r9d
imul %esi,%r9d
add %r10d,%r9d
jmp 21 <func1+0x21>
mov %edx,%r9d
imul %esi,%r9d
lea 0x1(%r9,%rdi,1),%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = a4 + a2;
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        if (a4 < a5)
        {
            v7 += a5 + a4 - a3;
        }
        else
        {
            v7 += (a4 - a1) * a4;
        }
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a1)
    {
        v9 += a3 - a2;
    }
    if (v8 < a1)
    {
        v11 = a2 - a4 + a5 * a2;
    }
    else
    {
        v11 = a3 * a2;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 22
3 22
4 24
5 24
6 24
7 24
8 24
9 24
10 28
11 28
12 30
13 30
14 30
15 30
16 30
17 30
18 31
<<<sep_out_sample>>>
push %rbx
cmp %ecx,%edx
jge 15 <func1+0x15>
mov %r8d,%r11d
imul %ecx,%r11d
mov %esi,%eax
sub %edi,%eax
add %eax,%r11d
jmp 1c <func1+0x1c>
mov %ecx,%r11d
imul %edx,%r11d
lea (%r8,%rdi,1),%r10d
lea (%rcx,%r8,1),%r9d
mov %edx,%ebx
imul %ecx,%ebx
sub %ebx,%r9d
test %esi,%esi
jle 39 <func1+0x39>
lea (%rcx,%rdi,1),%eax
imul %r8d,%eax
jmp 3e <func1+0x3e>
lea (%rsi,%rsi,1),%eax
sub %edx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r11d,%ecx
add %r10d,%ecx
add %r9d,%ecx
add %ecx,%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a3 < a4)
    {
        v6 = a5 * a4 + (a2 - a1);
    }
    else
    {
        v6 = a4 * a3;
    }
    v7 = a5 + a1;
    v8 = (a4 + a5) - a3 * a4;
    if (v9 < a2)
    {
        v9 = a4 * a5 + a5 * a1;
    }
    else
    {
        v9 = a2 + a2 - a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 4
3 4
4 6
5 6
6 6
7 6
8 6
9 6
10 10
11 10
12 12
13 13
14 13
15 13
16 13
17 14
18 14
19 16
20 16
21 16
22 20
23 20
24 22
25 22
26 22
27 22
28 22
29 22
30 22
31 22
32 23
33 23
<<<sep_out_sample>>>
cmp %esi,%ecx
jge 10 <func1+0x10>
mov %esi,%r9d
imul %ecx,%r9d
sub %edi,%r9d
jmp 1e <func1+0x1e>
mov %edi,%r9d
imul %ecx,%r9d
imul %edi,%r9d
add %esi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
mov %ecx,%edi
imul %edx,%edi
add %edi,%eax
sub $0x1,%edx
imul %edx,%esi
imul %esi,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a4 < a2)
    {
        v6 = a2 * a4 - a1;
    }
    else
    {
        v6 = a2 + (a1 * a4 * a1);
    }
    if (a1 < a1)
    {
        v7 = a3 - a5 - a4 + a3;
    }
    else
    {
        v7 = a2 - a2 + a4 * a3;
    }
    v8 = ((a2 * a3) - a2) * a4;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 10
11 21
12 21
13 21
14 21
15 21
16 18
17 18
18 21
19 20
20 20
21 20
22 21
23 22
<<<sep_out_sample>>>
cmp %r8d,%edi
jge 15 <func1+0x15>
mov %edi,%r9d
imul %r8d,%r9d
imul %edx,%r9d
add %ecx,%r9d
jmp 1f <func1+0x1f>
lea (%rdi,%r8,1),%r9d
add %ecx,%r9d
add %esi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
add %edx,%ecx
add %ecx,%eax
imul %edi,%esi
add %esi,%r8d
add %r8d,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a1 < a5)
    {
        v6 = (a1 * a5 * a3) + a4;
    }
    else
    {
        v6 = a4 + (a1 + a5) + a2;
    }
    v7 = a3 + a4;
    v8 = a1 + (a5 + a2 * a1);
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 14
12 14
13 14
14 14
15 14
16 12
17 14
18 13
19 13
20 13
21 14
22 15
<<<sep_out_sample>>>
cmp %ecx,%r8d
jge 11 <func1+0x11>
mov %edx,%eax
imul %edx,%eax
add %r8d,%eax
add %edi,%eax
jmp 1b <func1+0x1b>
lea (%rdx,%r8,1),%eax
add %esi,%eax
imul %r8d,%eax
lea 0x2(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a3 - a5 + a1;
    }
    if (a5 < a4)
    {
        v8 = a1 + (a5 + a3 * a3);
    }
    else
    {
        v8 = ((a3 + a5) + a2) * a5;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a1)
    {
        v9 += a1 + a3 - a1;
    }
    v11 = 0;
    for (v12 = 0; v12++; v12<a4)
    {
        v11 += a5 - (a3 * a1);
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 11
8 15
9 15
10 15
11 27
12 27
13 27
14 27
15 27
16 28
<<<sep_out_sample>>>
lea (%rsi,%rcx,1),%r9d
cmp %esi,%r8d
jl 14 <func1+0x14>
mov %ecx,%r9d
imul %edi,%r9d
imul %edi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
sub %r8d,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a5 < a2)
    {
        v6 = (a2 - a4) + (a4 + a4);
    }
    else
    {
        v6 = a1 * (a4 * a1);
    }
    if (a2 < a2)
    {
        v7 = (a1 + a4) + a5 - a5;
    }
    else
    {
        v7 = a2 - a5;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 4
3 4
4 10
5 10
6 10
7 20
8 20
9 20
10 20
11 20
12 18
13 20
14 21
<<<sep_out_sample>>>
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
sub %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += (a2 * a1) * a4;
    }
    v8 = a2 - a2 - a1;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 10
6 11
<<<sep_out_sample>>>
mov %edx,%r9d
sub %r8d,%r9d
add $0x1,%r9d
imul %r8d,%r9d
cmp %edi,%r9d
jge 18 <func1+0x18>
lea (%rcx,%rcx,1),%eax
jmp 21 <func1+0x21>
mov %ecx,%eax
imul %ecx,%eax
sub %esi,%eax
sub %edx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = (a3 - a5) * a5 + a5;
    if (v6 < a1)
    {
        v7 = a4 + (a3 + a4) - a3;
    }
    else
    {
        v7 = a4 * a4 - a2 - a3;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 5
6 5
7 7
8 7
9 11
10 11
11 11
12 11
13 13
14 13
15 13
16 13
17 13
18 13
19 14
<<<sep_out_sample>>>
cmp %r8d,%esi
jle f <func1+0xf>
lea (%rsi,%rdi,2),%r9d
imul %edi,%r9d
jmp 16 <func1+0x16>
mov %edx,%r9d
imul %ecx,%r9d
mov %edi,%eax
sub %r8d,%eax
mov %ecx,%r10d
imul %r8d,%r10d
cmp %esi,%ecx
cmovg %r10d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %r9d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (a4 < a2)
        {
            v6 += a2 - a4 + a4;
        }
        else
        {
            v6 += (a5 * a5) - a5;
        }
    }
    if (a5 < a2)
    {
        v8 = (a1 + a2 + a1) * a1;
    }
    else
    {
        v8 = a3 * a4;
    }
    if (a2 < a4)
    {
        v9 = a4 * a5;
    }
    else
    {
        v9 = a1 - a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 22
7 22
8 30
9 30
10 26
11 26
12 26
13 26
14 32
15 32
16 32
17 32
18 32
19 32
20 33
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
lea (%r8,%rcx,1),%eax
sub %edx,%esi
add %esi,%eax
sub %ecx,%edi
add %edi,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a2 - a3;
    v7 = a1 - a4 + a3;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 6
7 5
8 5
9 6
10 7
<<<sep_out_sample>>>
mov %edx,%r10d
imul %edi,%r10d
add %ecx,%r10d
sub %esi,%r10d
lea (%rdx,%rdi,1),%r9d
cmp %esi,%edi
jg 25 <func1+0x25>
mov $0x1,%r9d
sub %ecx,%r9d
imul %ecx,%r9d
sub %esi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
mov %r8d,%edx
sub %edi,%edx
add %edx,%eax
imul %r8d,%ecx
sub %ecx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = (a3 * a1 + a4) - a2;
    if (a2 < a1)
    {
        v7 = a3 + (a2 + a1 - a2);
    }
    else
    {
        v7 = (a4 - a4 * a4) - a2;
    }
    v8 = a5 - a1;
    v9 = a1 - a4 * a5;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 7
6 5
7 5
8 11
9 11
10 11
11 11
12 15
13 15
14 15
15 15
16 15
17 15
18 13
19 13
20 15
21 14
22 14
23 15
24 16
<<<sep_out_sample>>>
mov %ecx,%r9d
imul %edx,%r9d
test %ecx,%ecx
jle 1b <func1+0x1b>
mov %esi,%r10d
imul %esi,%r10d
imul %ecx,%r10d
add %edx,%r10d
jmp 26 <func1+0x26>
mov %r8d,%r10d
imul %r8d,%r10d
imul %r8d,%r10d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %r9d,%eax
add %r10d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a4 + a3;
    }
    v8 = a4 * a3;
    if (v9 < a4)
    {
        v9 = a2 * a2 * a4 + a3;
    }
    else
    {
        v9 = (a5 * a5) * a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 10
4 10
5 12
6 12
7 12
8 12
9 12
10 16
11 16
12 16
13 18
14 18
15 18
16 18
17 18
18 18
19 19
<<<sep_out_sample>>>
mov %r8d,%r9d
sub %edx,%r9d
mov %edi,%eax
sub %edx,%eax
cmp %ecx,%r8d
jge 21 <func1+0x21>
mov %edi,%eax
imul %r8d,%eax
mov %edx,%r11d
sub %eax,%r11d
mov %r11d,%eax
add %r8d,%eax
cmp %esi,%edx
jge 2e <func1+0x2e>
lea (%rdi,%rcx,2),%r10d
sub %edx,%r10d
jmp 42 <func1+0x42>
mov %esi,%r10d
imul %ecx,%r10d
imul %esi,%r10d
mov %edi,%r11d
sub %r10d,%r11d
mov %r11d,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a5 - a3;
    if (a5 < a4)
    {
        v7 = a5 - (a1 * a5 - a3);
    }
    else
    {
        v7 = (a1 + a1) - a1 - a3;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += a1 * a3;
    }
    if (a3 < a2)
    {
        v10 = a4 + (a1 + a4) - a3;
    }
    else
    {
        v10 = a1 - ((a2 * a4) * a2);
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 11
4 11
5 5
6 5
7 7
8 7
9 7
10 7
11 7
12 7
13 18
14 18
15 20
16 20
17 20
18 24
19 24
20 24
21 24
22 24
23 24
24 26
25 26
26 26
27 26
28 26
29 26
30 26
31 27
<<<sep_out_sample>>>
lea (%rdx,%r8,1),%eax
mov %edi,%r9d
sub %ecx,%r9d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = (a3 + a5 - a1) + a1;
    if (a5 < a2)
    {
        v7 = a1 - a4;
    }
    else
    {
        v7 = a1 - a4;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 11
3 11
4 13
5 13
6 13
7 13
8 13
9 13
10 14
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
add %esi,%ecx
sub %edi,%r8d
imul %r8d,%edx
lea 0x1(%rcx,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = (a5 - a1) * a3;
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += a1 * a3 * a1;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        v9 += a5 + a3 - a5;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 15
2 15
3 15
4 15
5 4
6 4
7 15
8 16
<<<sep_out_sample>>>
test %r8d,%r8d
jle 16 <func1+0x16>
mov %ecx,%eax
sub %r8d,%eax
mov %edi,%r9d
imul %esi,%r9d
sub %r9d,%eax
jmp 20 <func1+0x20>
mov %r8d,%eax
sub %esi,%eax
add %ecx,%eax
imul %edi,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (a2 < a2)
        {
            v6 += a1 + a2 - a1;
        }
        else
        {
            v6 += a4 + a3 - a2;
        }
    }
    if (v6 < a5)
    {
        v8 = a4 - a5 - a1 * a2;
    }
    else
    {
        v8 = (a4 + (a5 - a2)) * a1;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        v9 += (a3 * a3) - a5;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 18
7 18
8 18
9 22
10 22
11 22
12 22
13 29
14 29
15 29
16 29
17 29
18 30
<<<sep_out_sample>>>
cmp %ecx,%edi
jge c <func1+0xc>
lea (%rcx,%r8,2),%eax
sub %edx,%eax
jmp 16 <func1+0x16>
mov %edi,%eax
sub %ecx,%eax
imul %edx,%eax
imul %edi,%eax
lea (%rdi,%rdx,1),%r9d
add %r9d,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
sub %edx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a1 < a4)
    {
        v6 = a4 + a5 + a5 - a3;
    }
    else
    {
        v6 = a3 * (a1 - a4) * a1;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a1 - a2;
    }
    v9 = a1 - a3;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 10
10 18
11 18
12 18
13 18
14 18
15 17
16 18
17 19
<<<sep_out_sample>>>
mov %esi,%r9d
imul %r8d,%r9d
sub %edx,%r9d
mov %r8d,%eax
sub %ecx,%eax
mov %edi,%r10d
neg %r10d
cmp %r9d,%edx
cmovle %r10d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a2 * a5 - a3;
    if (v6 < a3)
    {
        v7 = a2 - (a2 + a4 - a5);
    }
    else
    {
        v7 = a3 - a1 - a3;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 7
5 7
6 7
7 7
8 7
9 7
10 13
11 13
12 13
13 13
14 13
15 13
16 14
<<<sep_out_sample>>>
mov %ecx,%r9d
sub %esi,%r9d
mov %ecx,%eax
cmp %esi,%ecx
jge 19 <func1+0x19>
mov %r8d,%r10d
sub %edx,%r10d
mov %edi,%eax
sub %esi,%eax
add %r10d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a4 - a2;
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        if (v6 < a4)
        {
            v7 += (a2 + a1) * a1;
        }
        else
        {
            v7 += a4 - a4 - a4;
        }
    }
    if (a4 < a2)
    {
        v9 = (a5 - a3) - (a2 - a1);
    }
    else
    {
        v9 = a4 - (a2 - a2);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 23
4 17
5 17
6 19
7 19
8 19
9 19
10 19
11 25
12 25
13 25
14 25
15 25
16 25
17 26
<<<sep_out_sample>>>
cmp %edx,%r8d
jge d <func1+0xd>
mov %ecx,%eax
imul %r8d,%eax
jmp 1a <func1+0x1a>
mov $0x1,%eax
sub %edi,%eax
imul %ecx,%eax
imul %ecx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %eax,%ecx
imul %edi,%edi
lea 0x1(%rcx,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a5 < a3)
    {
        v6 = (a4 * a5 - a3) + a3;
    }
    else
    {
        v6 = (a4 - a4 * a1) * a4;
    }
    if (a4 < a4)
    {
        v7 = a2 - a5;
    }
    else
    {
        v7 = a1 * a1;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        if (a4 < a3)
        {
            v8 += a5 - a3;
        }
        else
        {
            v8 += (a4 + a4) - a1;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 10
10 32
11 32
12 32
13 32
14 32
15 18
16 32
17 33
<<<sep_out_sample>>>
mov %esi,%r9d
sub %ecx,%r9d
mov %esi,%eax
imul %ecx,%eax
lea 0x1(%r9,%rax,1),%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a5 * a1 + a1;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += a3 * a4 - a2;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a5)
    {
        if (v11 < a2)
        {
            v10 += a5 - a5;
        }
        else
        {
            v10 += a1 * a4;
        }
    }
    v12 = a2 - a4 + a2 * a4;
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 26
2 26
3 26
4 26
5 27
6 27
7 27
8 27
9 27
10 27
11 28
<<<sep_out_sample>>>
cmp %ecx,%edi
jge 14 <func1+0x14>
mov %ecx,%r9d
imul %esi,%r9d
imul %edx,%r9d
add %ecx,%r9d
jmp 21 <func1+0x21>
mov %esi,%r9d
sub %edi,%r9d
add %esi,%r9d
imul %edi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
mov %ecx,%edx
imul %r8d,%edx
add %esi,%edx
add %edx,%ecx
add %ecx,%eax
sub %r8d,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a1 < a4)
    {
        v6 = (a4 * a2) * a3 + a4;
    }
    else
    {
        v6 = (a2 - a1 + a2) * a1;
    }
    v7 = a4 + (a4 * a5 + a2);
    v8 = a2 - a5;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 14
13 14
14 14
15 14
16 14
17 12
18 12
19 12
20 12
21 14
22 13
23 14
24 15
<<<sep_out_sample>>>
mov %ecx,%r9d
sub %edi,%r9d
add %ecx,%r9d
add %edx,%r9d
mov %edx,%eax
sub %esi,%eax
mov %r8d,%r10d
imul %r8d,%r10d
sub %r10d,%eax
cmp %eax,%edi
jle 27 <func1+0x27>
mov %r8d,%r10d
imul %edi,%r10d
jmp 38 <func1+0x38>
mov %esi,%r11d
imul %ecx,%r11d
mov %r8d,%r10d
imul %edi,%r10d
add %r11d,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %r9d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += (a3 + a2) - a5;
    }
    v8 = (a4 - a1) + a4 + a3;
    v9 = a3 - a2 - (a5 * a5);
    if (v9 < a1)
    {
        v10 = a1 + a1 * a5 - a1;
    }
    else
    {
        v10 = (a2 * a4) + a5 * a1;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 9
4 9
5 10
6 10
7 10
8 10
9 10
10 11
11 11
12 13
13 13
14 13
15 17
16 17
17 17
18 17
19 17
20 19
21 19
22 19
23 19
24 19
25 19
26 19
27 20
<<<sep_out_sample>>>
push %rbx
mov %edx,%ebx
sub %edi,%ebx
cmp %ecx,%edi
cmovge %edx,%ebx
cmp %r8d,%ecx
jge 1e <func1+0x1e>
mov %r8d,%r11d
sub %esi,%r11d
mov %ecx,%eax
sub %edx,%eax
add %eax,%r11d
jmp 2c <func1+0x2c>
mov %edx,%r11d
sub %ecx,%r11d
sub $0x1,%r11d
imul %esi,%r11d
mov %edi,%eax
imul %ecx,%eax
imul %ecx,%eax
mov %esi,%r10d
sub %eax,%r10d
cmp %esi,%r8d
jge 48 <func1+0x48>
mov %r8d,%r9d
imul %edi,%r9d
jmp 56 <func1+0x56>
mov %edx,%r9d
imul %ecx,%r9d
imul %r8d,%r9d
sub %esi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %ebx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a1 < a4)
    {
        v6 = a3 - a1;
    }
    else
    {
        v6 = (a5 - a5) * a5 + a3;
    }
    if (a4 < a5)
    {
        v7 = (a5 - a2) - (a3 - a4);
    }
    else
    {
        v7 = ((a3 - a4) * a2) - a2;
    }
    v8 = a2 - (a4 * (a1 * a4));
    if (a5 < a2)
    {
        v9 = a5 * a1;
    }
    else
    {
        v9 = a3 * a4 * a5 - a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 6
3 6
4 6
5 6
6 12
7 12
8 14
9 14
10 14
11 14
12 14
13 14
14 18
15 18
16 18
17 18
18 20
19 20
20 20
21 20
22 20
23 21
24 21
25 23
26 23
27 23
28 27
29 27
30 27
31 27
32 29
33 29
34 29
35 29
36 29
37 29
38 29
39 29
40 30
41 30
<<<sep_out_sample>>>
cmp %edx,%edi
jge 13 <func1+0x13>
mov %esi,%r10d
sub %edi,%r10d
imul %r8d,%r10d
add %edx,%r10d
jmp 21 <func1+0x21>
mov %esi,%r10d
imul %edi,%r10d
imul %edi,%r10d
add %edx,%r10d
cmp %ecx,%edi
jle 36 <func1+0x36>
mov %esi,%r9d
imul %ecx,%r9d
imul %ecx,%r9d
imul %r8d,%r9d
jmp 3d <func1+0x3d>
mov %edi,%r9d
imul %edi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a1 < a3)
    {
        v6 = (a5 * (a2 - a1)) + a3;
    }
    else
    {
        v6 = (a2 * a1 * a1) + a3;
    }
    if (a4 < a1)
    {
        v7 = a4 * (a2 * a4) * a5;
    }
    else
    {
        v7 = a1 * a1;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 12
13 12
14 14
15 14
16 14
17 14
18 14
19 18
20 18
21 20
22 20
23 20
24 20
25 20
26 20
27 21
<<<sep_out_sample>>>
lea (%r8,%rcx,2),%eax
add %eax,%edi
add %edi,%edx
add %esi,%edx
add %r8d,%edx
add %ecx,%edx
add %r8d,%esi
imul %r8d,%esi
imul %r8d,%esi
add %edx,%esi
imul %ecx,%ecx
add $0x1,%ecx
imul %ecx,%r8d
lea 0x1(%rsi,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = ((a5 + a2) * a5) * a5;
    v7 = a5 + a4 * a4 * a5;
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        if (a2 < a4)
        {
            v8 += a4 + a2 * a3;
        }
        else
        {
            v8 += a3 - a1;
        }
    }
    v10 = (a4 + a5) + a4;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 19
3 19
4 19
5 19
6 19
7 4
8 4
9 4
10 19
11 5
12 5
13 5
14 19
15 20
<<<sep_out_sample>>>
mov %ecx,%eax
sub %edx,%eax
cmp %ecx,%edi
jge 10 <func1+0x10>
mov %esi,%eax
imul %edx,%eax
lea (%rax,%rcx,2),%eax
mov %ecx,%r9d
sub %edx,%r9d
mov %esi,%r10d
imul %esi,%r10d
cmp %esi,%edi
cmovg %r10d,%r9d
add %edi,%edx
add %edx,%esi
add %r8d,%esi
add %esi,%ecx
add %ecx,%eax
add %r8d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a1 < a4)
    {
        v6 = a4 + a2 * a3 + a4;
    }
    else
    {
        v6 = a4 - a3;
    }
    if (a1 < a1)
    {
        v7 = (a3 - a1 - a3) * a1;
    }
    else
    {
        v7 = a5 - a1 + a1;
    }
    if (a2 < a1)
    {
        v8 = a2 * a2;
    }
    else
    {
        v8 = a4 - a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 4
4 4
5 6
6 6
7 6
8 26
9 26
10 22
11 22
12 22
13 22
14 28
15 28
16 28
17 28
18 28
19 28
20 28
21 29
<<<sep_out_sample>>>
lea (%r8,%rdi,1),%r10d
cmp %ecx,%esi
jl 13 <func1+0x13>
lea 0x1(%rsi),%r10d
imul %edx,%r10d
sub %ecx,%r10d
cmp %edx,%r8d
jge 28 <func1+0x28>
lea (%rcx,%rdi,1),%r9d
mov %esi,%r11d
imul %r8d,%r11d
sub %r11d,%r9d
jmp 36 <func1+0x36>
mov %esi,%eax
imul %ecx,%eax
mov %edx,%r9d
sub %eax,%r9d
add %edi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a2 < a4)
    {
        v6 = ((a5 - a1) + a1) + a1;
    }
    else
    {
        v6 = a3 + a2 * a3 - a4;
    }
    if (a5 < a3)
    {
        v7 = (a4 + a1) - a2 * a5;
    }
    else
    {
        v7 = (a3 - a2 * a4) + a1;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 4
3 4
4 10
5 10
6 10
7 12
8 12
9 14
10 14
11 14
12 14
13 14
14 18
15 18
16 18
17 18
18 18
19 20
20 20
21 20
22 20
23 20
24 20
25 21
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
mov %edx,%r9d
imul %esi,%r9d
add %r9d,%eax
imul %edi,%esi
add %ecx,%esi
imul %esi,%edi
add %edi,%eax
imul %ecx,%edx
imul %edx,%ecx
add %ecx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a3 * a2;
    v7 = (a1 * a2 + a4) * a1;
    v8 = (a4 * a3 * a4) + a5;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 7
2 7
3 7
4 7
5 4
6 4
7 7
8 5
9 5
10 5
11 7
12 6
13 6
14 6
15 7
16 8
<<<sep_out_sample>>>
test %ecx,%ecx
jle b <func1+0xb>
mov %edi,%eax
imul %ecx,%eax
jmp 12 <func1+0x12>
mov %edi,%eax
sub %esi,%eax
imul %ecx,%eax
lea 0x2(%rdi,%rdx,1),%edx
add %edx,%esi
add %r8d,%esi
add %esi,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    if (v6 < a4)
    {
        v6 = a1 * a4;
    }
    else
    {
        v6 = a4 * (a1 - a2);
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += (a4 - a1) + a3;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        if (a2 < a3)
        {
            v9 += a5 - a2 - a1;
        }
        else
        {
            v9 += a4 - a2;
        }
    }
    v11 = 0;
    for (v12 = 0; v12++; v12<a5)
    {
        if (v7 < a5)
        {
            v11 += a3 * a3 * a5;
        }
        else
        {
            v11 += a2 - a4 + a2;
        }
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 41
10 41
11 41
12 41
13 41
14 42
<<<sep_out_sample>>>
test %r8d,%r8d
jle 14 <func1+0x14>
mov %edi,%r9d
imul %r8d,%r9d
sub %ecx,%r9d
add %esi,%r9d
jmp 1b <func1+0x1b>
mov %esi,%r9d
imul %esi,%r9d
cmp %edx,%esi
jge 2f <func1+0x2f>
lea (%rdi,%rcx,1),%eax
mov %r8d,%r11d
sub %eax,%r11d
mov %r11d,%eax
add %esi,%eax
jmp 38 <func1+0x38>
mov %ecx,%eax
sub %edx,%eax
add %ecx,%eax
sub %r8d,%eax
mov %esi,%r10d
sub %edx,%r10d
mov %edx,%r11d
imul %ecx,%r11d
sub %r11d,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (v6 < a5)
    {
        v6 = a1 * a5 - a4 + a2;
    }
    else
    {
        v6 = a2 * a2;
    }
    if (a2 < a3)
    {
        v7 = a5 - (a1 + a4) + a2;
    }
    else
    {
        v7 = (a4 - a3 + a4) - a5;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        if (v6 < a4)
        {
            v8 += (a5 * a2) - a4;
        }
        else
        {
            v8 += a5 * (a2 - a2);
        }
    }
    v10 = a2 - a3 - a3 * a4;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 12
11 12
12 14
13 14
14 14
15 14
16 14
17 14
18 18
19 18
20 18
21 18
22 32
23 32
24 32
25 32
26 32
27 33
28 33
29 33
30 33
31 33
32 33
33 33
34 34
<<<sep_out_sample>>>
lea (%rcx,%rcx,1),%eax
cmp %edi,%esi
jge c <func1+0xc>
lea (%rdi,%rcx,1),%eax
add %esi,%eax
add %edx,%edi
add %edi,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (a2 < a2)
        {
            v6 += a5 - a3;
        }
        else
        {
            v6 += a3 - (a3 - a4);
        }
    }
    if (a2 < a1)
    {
        v8 = (a1 + a4) + a2;
    }
    else
    {
        v8 = a3 - (a3 - (a4 + a4));
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 22
2 16
3 16
4 18
5 18
6 24
7 24
8 24
9 24
10 24
11 25
<<<sep_out_sample>>>
cmp %esi,%ecx
jle 11 <func1+0x11>
mov %r8d,%eax
sub %edx,%eax
imul %esi,%eax
imul %edx,%eax
jmp 19 <func1+0x19>
mov %esi,%eax
sub %edi,%eax
add %esi,%eax
add %edx,%eax
add %edi,%edx
add %esi,%edx
add %r8d,%edx
lea 0x1(%rcx,%rdx,1),%edx
add %edx,%eax
imul %esi,%ecx
sub $0x1,%ecx
imul %ecx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (a4 < a5)
        {
            v6 += a2 - a1 - a4;
        }
        else
        {
            v6 += a4 * (a4 + a4);
        }
    }
    if (a2 < a4)
    {
        v8 = a3 * ((a5 - a3) * a2);
    }
    else
    {
        v8 = (a2 - a1 + a2) + a3;
    }
    v9 = a4 * a2 * a5 - a5;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 18
7 18
8 22
9 22
10 22
11 22
12 25
13 25
14 25
15 25
16 25
17 24
18 24
19 24
20 25
21 26
<<<sep_out_sample>>>
lea (%rdi,%rsi,1),%eax
imul %r8d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a3 - a3;
    v7 = a5 * (a1 + a2);
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 5
2 5
3 6
4 6
5 6
6 6
7 6
8 7
<<<sep_out_sample>>>
lea (%rdx,%rcx,1),%eax
mov %edi,%r9d
sub %ecx,%r9d
test %esi,%esi
cmovle %r9d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a3 + a2;
    }
    if (v6 < a2)
    {
        v8 = a3 + a4;
    }
    else
    {
        v8 = a1 - a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 11
5 11
6 17
7 17
8 17
9 17
10 17
11 18
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %r8d,%edx
add %edx,%ecx
mov %esi,%eax
sub %edi,%eax
imul %r8d,%eax
add %eax,%ecx
lea (%rdi,%rsi,2),%eax
lea (%rax,%r8,1),%eax
lea 0x1(%rcx,%rax,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = (a2 - a1) * a5;
    v7 = (a1 + a2) + a5 + a2;
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += a2 + a4 + a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 11
5 4
6 4
7 4
8 11
9 5
10 5
11 11
12 12
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%r9d
add %esi,%r9d
add %r8d,%r9d
add %ecx,%r9d
lea 0x1(%rdi),%eax
imul %edi,%eax
add %r9d,%eax
mov %ecx,%r10d
sub %edx,%r10d
add %r10d,%eax
sub %r8d,%esi
imul %esi,%edi
add %edi,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a1 + a1 * a1;
    v7 = a4 - a3;
    v8 = (a2 - a5) * a1 + a4;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 7
2 7
3 7
4 7
5 4
6 4
7 7
8 5
9 5
10 7
11 6
12 6
13 6
14 7
15 8
<<<sep_out_sample>>>
lea (%rdi,%rdi,1),%eax
test %esi,%esi
jle e <func1+0xe>
lea (%rsi,%rdi,1),%eax
sub %edx,%eax
add %ecx,%eax
lea (%rdi,%rdx,1),%r9d
add %esi,%r9d
add %r8d,%r9d
add %ecx,%r9d
add %r9d,%eax
imul %r8d,%edi
lea (%rdi,%rdx,2),%edx
add %edx,%eax
add %ecx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (v6 < a2)
    {
        v6 = ((a2 + a1) - a3) + a4;
    }
    else
    {
        v6 = a1 + a1;
    }
    v7 = (a3 + a3) + a5 * a1;
    v8 = a4 + a2;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 6
7 14
8 14
9 14
10 14
11 14
12 12
13 12
14 14
15 13
16 14
17 15
<<<sep_out_sample>>>
lea (%rdx,%rdi,1),%eax
lea (%rax,%rsi,1),%r9d
add %r8d,%r9d
add %ecx,%r9d
imul %ecx,%eax
add %eax,%edx
lea 0x1(%r9,%rdx,1),%eax
imul %r8d,%edi
add %edi,%ecx
add %ecx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a3 + (a3 + a1) * a4;
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        if (a3 < a5)
        {
            v7 += (a4 - a4) - a3;
        }
        else
        {
            v7 += a1 + a1 * a1;
        }
    }
    v9 = a2 + (a4 + a5 * a1);
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 18
3 18
4 18
5 4
6 4
7 18
8 17
9 17
10 17
11 18
12 19
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
imul %edi,%edx
add $0x1,%edx
imul %edx,%esi
lea 0x1(%rax,%rsi,1),%eax
imul %r8d,%ecx
sub %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = (a3 * a1 * a2) + a2;
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += a1 + a5 - a1;
    }
    v9 = a4 - (a4 + (a4 * a5));
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 11
5 4
6 4
7 4
8 11
9 10
10 11
11 12
<<<sep_out_sample>>>
add %edi,%edx
add %edx,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%edx
lea 0x1(%r8),%eax
imul %eax,%r8d
sub %edi,%r8d
lea (%rdx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a4 + a3 - a4;
    }
    v8 = (a5 * a5) + a5 - a1;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 9
6 9
7 9
8 10
9 11
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%r9d
add %esi,%r9d
add %r8d,%r9d
add %ecx,%r9d
lea (%rdx,%r8,2),%eax
lea (%rsi,%r9,1),%edx
lea (%rdx,%rax,1),%eax
imul %ecx,%r8d
sub %r8d,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a2 + a2;
    v7 = (a5 + a3) + a5 - a2;
    v8 = a1 - a5 * a4;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 7
2 7
3 7
4 7
5 5
6 5
7 7
8 6
9 6
10 7
11 8
<<<sep_out_sample>>>
cmp %esi,%ecx
jge 12 <func1+0x12>
lea (%rdx,%rcx,1),%r9d
mov %esi,%eax
imul %esi,%eax
add %r9d,%eax
jmp 1b <func1+0x1b>
mov %ecx,%eax
imul %edx,%eax
add %esi,%eax
add %ecx,%eax
add %edi,%edx
add %edx,%esi
add %r8d,%esi
add %esi,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a4 < a2)
    {
        v6 = (a3 + a4) + (a2 * a2);
    }
    else
    {
        v6 = a4 + (a2 + a4 * a3);
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += a1 + a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 17
13 17
14 17
15 17
16 17
17 18
<<<sep_out_sample>>>
lea (%r8,%rsi,1),%eax
cmp %esi,%ecx
jl 10 <func1+0x10>
lea 0x1(%rsi),%eax
imul %esi,%eax
sub %ecx,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a4 < a2)
    {
        v6 = a5 + a2;
    }
    else
    {
        v6 = ((a2 * a2) + a2) - a4;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        if (v7 < a5)
        {
            v7 += a5 * a1 * a3;
        }
        else
        {
            v7 += (a1 + a3) * a3;
        }
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a1)
    {
        v9 += a1 + a4 - a2;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 4
3 4
4 10
5 10
6 10
7 29
8 29
9 29
10 29
11 29
12 30
<<<sep_out_sample>>>
add %edx,%edi
add %esi,%edi
add %r8d,%edi
lea 0x1(%rcx,%rdi,1),%eax
imul %r8d,%edx
imul %edx,%ecx
sub %ecx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a5 * a1 + a1;
    }
    v8 = a2 - ((a5 * a3) * a4);
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 9
6 9
7 9
8 10
9 11
<<<sep_out_sample>>>
mov %esi,%eax
cmp %esi,%r8d
jge 10 <func1+0x10>
lea 0x1(%r8),%eax
imul %ecx,%eax
add %esi,%eax
add %edi,%edx
add %esi,%edx
add %r8d,%edx
add %edx,%ecx
add %ecx,%eax
lea (%r8,%rdi,2),%edx
imul %edx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a5 < a2)
    {
        v6 = a4 + (a5 * a4) + a2;
    }
    else
    {
        v6 = a2 + a1 - a1;
    }
    v7 = (a5 + (a1 + a1)) * a2;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 6
7 13
8 13
9 13
10 13
11 13
12 12
13 12
14 13
15 14
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %edx,%r8d
lea (%rsi,%rcx,2),%eax
lea 0x1(%r8,%rax,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a2 - ((a3 - a4) - a3);
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += (a2 + a5) + a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 4
5 10
6 11
<<<sep_out_sample>>>
cmp %r8d,%esi
jge 10 <func1+0x10>
mov %r8d,%r9d
neg %r9d
sub %ecx,%r9d
jmp 1c <func1+0x1c>
lea (%rsi,%rdi,1),%r9d
mov %ecx,%eax
imul %edi,%eax
add %eax,%r9d
test %esi,%esi
jle 26 <func1+0x26>
mov %esi,%eax
sub %edx,%eax
jmp 31 <func1+0x31>
mov %esi,%eax
imul %ecx,%eax
imul %edi,%eax
sub %r8d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a2 < a5)
    {
        v6 = a3 - a5 - a3 - a4;
    }
    else
    {
        v6 = a2 + a1 + a4 * a1;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        if (a1 < a4)
        {
            v7 += a3 - a4 * a1;
        }
        else
        {
            v7 += a5 * a1;
        }
    }
    if (v7 < a2)
    {
        v9 = a2 - a3;
    }
    else
    {
        v9 = ((a2 * a4) * a1) - a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 10
11 24
12 24
13 26
14 26
15 26
16 30
17 30
18 30
19 30
20 32
21 32
22 32
23 32
24 32
25 32
26 33
<<<sep_out_sample>>>
lea 0x1(%r8),%r10d
imul %edx,%r10d
add %r8d,%r10d
cmp %esi,%r8d
jle 1e <func1+0x1e>
lea (%r8,%rdx,1),%r9d
mov %ecx,%eax
imul %edx,%eax
add %eax,%r9d
jmp 2c <func1+0x2c>
mov %r8d,%r9d
imul %r8d,%r9d
add %edi,%r9d
imul %r8d,%r9d
lea 0x1(%rdi,%rdx,1),%edx
add %esi,%edx
add %r8d,%edx
add %ecx,%edx
add %r10d,%edx
add %r9d,%edx
sub %r8d,%edi
imul %ecx,%esi
sub %esi,%edi
lea (%rdx,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a3 + (a3 * a5) + a5;
    if (a2 < a5)
    {
        v7 = a5 + a3 + a4 * a3;
    }
    else
    {
        v7 = a5 * (a1 + a5 * a5);
    }
    v8 = a1 - a5 - a4 * a2;
    v9 = 0;
    for (v10 = 0; v10++; v10<a1)
    {
        v9 += a5 * a4;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 5
5 5
6 7
7 7
8 7
9 7
10 7
11 11
12 11
13 11
14 11
15 19
16 19
17 19
18 19
19 19
20 19
21 13
22 13
23 13
24 19
25 20
<<<sep_out_sample>>>
cmp %ecx,%r8d
jge e <func1+0xe>
mov %edi,%eax
sub %esi,%eax
sub %r8d,%eax
jmp 14 <func1+0x14>
mov %r8d,%eax
imul %edi,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a5 < a4)
    {
        v6 = a1 - a2 - a5;
    }
    else
    {
        v6 = ((a5 - a4) + a4) * a1;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += a3 * (a3 * a4);
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        v9 += a5 * a1 - a2;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 22
10 22
11 22
12 22
13 22
14 23
<<<sep_out_sample>>>
mov %ecx,%eax
sub %esi,%eax
add %r8d,%eax
cmp %edi,%ecx
jge 15 <func1+0x15>
lea 0x1(%r8),%eax
imul %r8d,%eax
add %edx,%eax
lea 0x2(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a2 - (a2 * a2);
    }
    if (a4 < a1)
    {
        v8 = (a5 * a5 + a5) + a3;
    }
    else
    {
        v8 = a4 - a2 + a5;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        v9 += (a1 - a4) - a1;
    }
    v11 = 0;
    for (v12 = 0; v12++; v12<a3)
    {
        v11 += a2 * a3 * a3;
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 15
2 15
3 15
4 9
5 9
6 11
7 11
8 11
9 27
10 27
11 27
12 27
13 27
14 28
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (v6 < a4)
        {
            v6 += (a5 * a3) * a3;
        }
        else
        {
            v6 += a1 * a1;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += a1 - a3 + a4;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a1)
    {
        v10 += (a3 * a3) - a5;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 26
2 26
3 26
4 26
5 27
<<<sep_out_sample>>>
mov %r8d,%r10d
sub %edi,%r10d
lea (%r8,%rsi,1),%eax
lea (%rax,%rdi,1),%r9d
imul %r8d,%r9d
cmp %ecx,%edi
jge 1f <func1+0x1f>
mov %edi,%eax
sub %esi,%eax
sub %edx,%eax
sub %r8d,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r10d,%ecx
lea 0x1(%r9,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a5 - a1;
    v7 = (a1 + (a5 + a2)) * a5;
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        if (v9 < a4)
        {
            v8 += a1 - a3;
        }
        else
        {
            v8 += a3 + a2;
        }
    }
    if (a1 < a4)
    {
        v10 = a1 - a2 - a3 - a5;
    }
    else
    {
        v10 = a5 + a2;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 5
4 5
5 5
6 18
7 18
8 20
9 20
10 20
11 20
12 26
13 26
14 26
15 26
16 26
17 26
18 26
19 27
<<<sep_out_sample>>>
add %edx,%edi
add %esi,%edi
add %r8d,%edi
add %ecx,%edi
imul %r8d,%r8d
lea (%r8,%rsi,2),%r8d
add %r8d,%edi
sub %esi,%edx
sub %ecx,%edx
lea (%rdi,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a5 * a5 + (a2 + a2);
    v7 = a3 - a2 - a4;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 4
7 6
8 5
9 5
10 6
11 7
<<<sep_out_sample>>>
mov %r8d,%r11d
sub %ecx,%r11d
sub %ecx,%r11d
add %edi,%r11d
mov %edi,%r10d
sub %ecx,%r10d
mov %ecx,%r9d
imul %r8d,%r9d
mov %edx,%eax
sub %r8d,%eax
cmp %r9d,%edi
jle 28 <func1+0x28>
lea (%rsi,%rdi,1),%eax
add %ecx,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r11d,%ecx
add %r10d,%ecx
add %ecx,%r9d
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a4 < a4)
    {
        v6 = (a2 * a4) * a5 + a4;
    }
    else
    {
        v6 = (a5 - a4) - a4 + a1;
    }
    v7 = (a3 - a3 + a1) - a4;
    v8 = a4 * a5;
    if (v8 < a1)
    {
        v9 = a4 + (a2 + a1);
    }
    else
    {
        v9 = a2 - (a2 + a5) + a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 12
6 12
7 13
8 13
9 20
10 20
11 14
12 14
13 16
14 16
15 22
16 22
17 22
18 22
19 22
20 22
21 22
22 22
23 23
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (v7 < a2)
        {
            v6 += a5 * a3 + a5;
        }
        else
        {
            v6 += a4 - (a3 - a3);
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += a4 + (a1 + a4);
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a4)
    {
        if (a2 < a1)
        {
            v10 += a4 + a1 + a5;
        }
        else
        {
            v10 += (a1 * a4) - a4;
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 33
2 33
3 33
4 33
5 34
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (a5 < a4)
        {
            v6 += (a2 - a3) + a3;
        }
        else
        {
            v6 += a4 * a2 - a5;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += a4 + a3 + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 21
5 22
<<<sep_out_sample>>>
cmp %esi,%ecx
jge 13 <func1+0x13>
mov %esi,%r9d
imul %r8d,%r9d
sub %ecx,%r9d
sub %edx,%r9d
jmp 1f <func1+0x1f>
lea (%rcx,%r8,1),%r9d
imul %edi,%r9d
imul %edx,%r9d
cmp %ecx,%r9d
jge 2d <func1+0x2d>
mov %ecx,%r10d
imul %ecx,%r10d
jmp 36 <func1+0x36>
mov %r8d,%eax
sub %edx,%eax
lea (%rax,%rsi,2),%r10d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
lea (%r9,%r10,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a4 < a2)
    {
        v6 = (a2 * a5 - a4) - a3;
    }
    else
    {
        v6 = (a4 + a5) * a1 * a3;
    }
    if (v6 < a4)
    {
        v7 = a4 * a4;
    }
    else
    {
        v7 = a5 - a3 + a2 + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 12
12 12
13 14
14 14
15 14
16 18
17 18
18 18
19 20
20 20
21 20
22 20
23 20
24 20
25 21
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
mov %ecx,%r9d
imul %edi,%r9d
imul %r8d,%r9d
imul %r9d,%edx
add %eax,%edx
sub %ecx,%r8d
sub %ecx,%r8d
add %r8d,%edi
lea (%rdx,%rdi,1),%eax
lea 0x1(%rcx),%edx
imul %edx,%esi
add %esi,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = (a4 * a1 * a5) * a3;
    v7 = (a5 - a4 - a4) + a1;
    v8 = a2 + a4 * a2 + a4;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 7
2 7
3 7
4 7
5 4
6 4
7 4
8 4
9 7
10 5
11 5
12 5
13 7
14 6
15 6
16 6
17 7
18 8
<<<sep_out_sample>>>
lea (%rdx,%rdi,1),%eax
lea (%rax,%rsi,1),%r9d
add %r9d,%r8d
lea (%r8,%rcx,1),%r9d
imul %ecx,%edi
add %edi,%eax
add %r9d,%eax
mov %ecx,%r8d
imul %esi,%r8d
add $0x1,%r8d
imul %esi,%r8d
add %r8d,%eax
lea (%rax,%rsi,2),%eax
imul %edx,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a1 * a4 + (a3 + a1);
    if (a3 < a3)
    {
        v7 = a2 + a4;
    }
    else
    {
        v7 = (a4 * a2 * a2) + a2;
    }
    v8 = a2 + a2;
    v9 = a4 * a3;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 15
3 15
4 15
5 4
6 4
7 15
8 11
9 11
10 11
11 11
12 15
13 15
14 14
15 15
16 16
<<<sep_out_sample>>>
mov %r8d,%r9d
imul %ecx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %eax,%ecx
mov %edi,%eax
imul %edi,%eax
add %r9d,%eax
add %ecx,%eax
add %r8d,%edi
add %edi,%eax
mov %r8d,%esi
imul %r8d,%esi
add %esi,%eax
imul %r9d,%r8d
sub %r8d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a1 < a1)
    {
        v6 = a2 * a1;
    }
    else
    {
        v6 = a1 * a1 + a5 * a4;
    }
    v7 = ((a2 + a5) + a1) - a2;
    v8 = a5 * a5;
    v9 = a3 - (a4 * a5) * a5;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 15
4 15
5 15
6 15
7 10
8 10
9 10
10 15
11 12
12 15
13 13
14 13
15 15
16 14
17 14
18 15
19 16
<<<sep_out_sample>>>
lea (%rcx,%r8,1),%r9d
test %r8d,%r8d
jle 11 <func1+0x11>
lea (%rdx,%rdx,1),%r9d
imul %esi,%r9d
cmp %edx,%r8d
jge 25 <func1+0x25>
mov $0x1,%r10d
sub %edx,%r10d
imul %edi,%r10d
jmp 34 <func1+0x34>
mov %ecx,%r10d
imul %r8d,%r10d
imul %ecx,%r10d
imul %edi,%r10d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
lea (%r9,%r10,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (v6 < a5)
    {
        v6 = (a3 + a3) * a2;
    }
    else
    {
        v6 = a4 + a5;
    }
    if (a5 < a3)
    {
        v7 = a1 - a3 * a1;
    }
    else
    {
        v7 = (a4 * a5 * a4) * a1;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 12
7 12
8 14
9 14
10 14
11 14
12 18
13 18
14 18
15 18
16 20
17 20
18 20
19 20
20 20
21 20
22 21
<<<sep_out_sample>>>
lea 0x1(%r8),%eax
imul %edx,%eax
sub %esi,%eax
add %edi,%eax
add %edx,%eax
add %eax,%esi
add %r8d,%esi
add %esi,%ecx
mov %r8d,%eax
sub %edi,%eax
add %eax,%r8d
add %r8d,%ecx
mov $0x1,%eax
sub %edx,%eax
imul %eax,%edi
add %edi,%edx
lea 0x1(%rcx,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = (a5 - a1) + a5;
    if (a1 < a1)
    {
        v7 = (a3 + a5) + a1 - a1;
    }
    else
    {
        v7 = a1 - (a1 * a3) + a3;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += (a3 + a4) - a1;
    }
    v10 = a3 + a3 * a5 - a2;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 19
5 19
6 19
7 19
8 19
9 4
10 4
11 4
12 19
13 11
14 11
15 11
16 11
17 19
18 20
<<<sep_out_sample>>>
mov %ecx,%r9d
imul %esi,%r9d
cmp %edx,%esi
jle 17 <func1+0x17>
mov %esi,%eax
imul %edi,%eax
imul %ecx,%eax
add %esi,%eax
jmp 1e <func1+0x1e>
lea (%rdi,%r8,2),%eax
lea (%rax,%rsi,1),%eax
lea (%r8,%rdi,2),%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a4 * a2;
    if (a3 < a2)
    {
        v7 = (a2 * a1) * a4 + a2;
    }
    else
    {
        v7 = a5 + a2 + a1 + a5;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += a4 + a1 * a4;
    }
    v10 = a5 + a1;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 5
4 5
5 7
6 7
7 7
8 7
9 7
10 11
11 11
12 19
13 19
14 19
15 19
16 19
17 19
18 19
19 20
<<<sep_out_sample>>>
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea (%r8,%rcx,1),%esi
mov %ecx,%eax
imul %ecx,%eax
imul %eax,%edi
imul %edi,%ecx
lea 0x1(%rsi,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a5 < a5)
    {
        v6 = a3 + a3 * a1;
    }
    else
    {
        v6 = ((a4 * a4) * a1) * a4;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += a2 - (a1 - a1);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 10
6 10
7 10
8 10
9 17
10 18
<<<sep_out_sample>>>
cmp %edx,%ecx
jge 13 <func1+0x13>
lea (%rcx,%rsi,1),%eax
mov %ecx,%r9d
imul %ecx,%r9d
sub %r9d,%eax
jmp 1a <func1+0x1a>
mov %esi,%eax
imul %edx,%eax
sub %edi,%eax
add %edi,%edx
add %edx,%esi
add %r8d,%esi
add %esi,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a4 < a3)
    {
        v6 = a4 + a2 - a4 * a4;
    }
    else
    {
        v6 = a2 * a3 - a1;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += a3 + a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 17
12 17
13 17
14 17
15 17
16 18
<<<sep_out_sample>>>
lea (%rsi,%rsi,1),%eax
test %r8d,%r8d
cmovg %ecx,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (v6 < a5)
    {
        v6 = (a2 - a2) + a4;
    }
    else
    {
        v6 = a2 + ((a1 + a2) - a1);
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        if (a3 < a3)
        {
            v7 += (a3 - a2) - a2;
        }
        else
        {
            v7 += a1 * a2;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 24
5 24
6 24
7 24
8 24
9 25
<<<sep_out_sample>>>
add %edi,%edx
add %edx,%esi
add %r8d,%esi
mov %ecx,%eax
imul %ecx,%eax
add %eax,%edi
add %edi,%r8d
lea (%rcx,%rsi,2),%eax
lea (%rax,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = (a1 + (a4 * a4)) + a5;
    v7 = (a3 + a1) + a2 + a5;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 5
2 5
3 5
4 4
5 4
6 4
7 4
8 6
9 6
10 7
<<<sep_out_sample>>>
lea 0x2(%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
add %r8d,%ecx
lea 0x1(%rsi,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = a2 - a1 * (a2 - a2);
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a3 + a1 * a2;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        v9 += a5 - a1 - a4;
    }
    v11 = 0;
    for (v12 = 0; v12++; v12<a1)
    {
        if (a5 < a5)
        {
            v11 += a3 * a1 * a5;
        }
        else
        {
            v11 += a2 + a4 + a1;
        }
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 27
2 27
3 27
4 27
5 27
6 28
<<<sep_out_sample>>>
lea (%rsi,%rcx,1),%r10d
lea (%rcx,%rdi,1),%r9d
add %esi,%r9d
cmp %ecx,%esi
jl 1a <func1+0x1a>
lea (%rsi,%rsi,1),%r9d
imul %esi,%r9d
add %r8d,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a5 < a5)
    {
        v6 = (a3 * a5) * (a5 + a3);
    }
    else
    {
        v6 = a2 + a4;
    }
    if (a2 < a4)
    {
        v7 = a2 + (a4 + a1);
    }
    else
    {
        v7 = a5 + (a2 * (a2 + a2));
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 10
2 14
3 14
4 12
5 12
6 18
7 18
8 18
9 20
10 20
11 20
12 20
13 20
14 20
15 21
<<<sep_out_sample>>>
mov %edi,%r9d
imul %edx,%r9d
add %ecx,%r9d
imul %esi,%r9d
cmp $0x1,%ecx
jle 19 <func1+0x19>
mov %esi,%eax
sub %edx,%eax
jmp 2b <func1+0x2b>
mov %edi,%r10d
imul %edi,%r10d
mov $0x1,%eax
sub %r10d,%eax
imul %edi,%eax
add %edx,%edi
add %edi,%esi
add %r8d,%esi
add %esi,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a2 * (a1 * a3 + a4);
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        if (v8 < a1)
        {
            v7 += a1 + a5 * a2;
        }
        else
        {
            v7 += a3 + a2 + a2;
        }
    }
    if (v8 < a4)
    {
        v9 = a2 - a3;
    }
    else
    {
        v9 = a1 - a1 * a1 * a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 17
6 17
7 19
8 19
9 19
10 23
11 23
12 23
13 23
14 23
15 25
16 25
17 25
18 25
19 25
20 25
21 26
<<<sep_out_sample>>>
add %edi,%edx
lea (%rdx,%rsi,1),%eax
add %r8d,%eax
add %eax,%ecx
add %ecx,%edx
add %r8d,%esi
lea (%rdx,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a1 + a3;
    v7 = a5 + a2;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 6
3 6
4 6
5 6
6 5
7 6
8 7
<<<sep_out_sample>>>
mov %r8d,%r11d
imul %edi,%r11d
sub %esi,%r11d
imul %esi,%r11d
mov %edx,%r10d
sub %r8d,%r10d
lea (%r8,%r8,1),%eax
sub %esi,%r10d
cmp %esi,%edi
cmovle %r10d,%eax
mov %eax,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = ((a5 * a1) - a2) * a2;
    if (a2 < a1)
    {
        v7 = a5 + a5;
    }
    else
    {
        v7 = a3 - a5 - a2;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 11
6 11
7 7
8 7
9 7
10 7
11 7
12 13
13 13
14 13
15 13
16 13
17 13
18 14
<<<sep_out_sample>>>
cmp %edx,%esi
jge 2f <func1+0x2f>
mov %edi,%r11d
sub %r8d,%r11d
add %ecx,%r11d
add %edx,%r11d
mov %esi,%r10d
imul %esi,%r10d
mov %r8d,%eax
imul %ecx,%eax
add %eax,%r10d
lea (%rdx,%rdi,1),%r9d
mov %r8d,%eax
imul %edi,%eax
add %eax,%r9d
jmp 50 <func1+0x50>
lea -0x1(%rcx),%r11d
imul %ecx,%r11d
add %r8d,%r11d
mov %esi,%r10d
imul %esi,%r10d
mov %r8d,%eax
imul %ecx,%eax
add %eax,%r10d
mov %r8d,%r9d
sub %edx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a2 < a3)
    {
        v6 = a1 - a5 + a4 + a3;
    }
    else
    {
        v6 = a5 - (a4 - (a4 * a4));
    }
    v7 = a2 * a2 + a5 * a4;
    if (a2 < a3)
    {
        v8 = (a3 + a1) + a5 * a1;
    }
    else
    {
        v8 = a5 - a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 12
8 12
9 12
10 12
11 12
12 15
13 15
14 15
15 15
16 15
17 10
18 10
19 10
20 12
21 12
22 12
23 12
24 12
25 19
26 19
27 21
28 21
29 21
30 21
31 21
32 21
33 21
34 22
<<<sep_out_sample>>>
lea 0x2(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
add %r8d,%ecx
sub %edx,%edi
lea 0x1(%rcx,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = a1 - a3;
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        if (a1 < a2)
        {
            v7 += a1 + a4 - a5;
        }
        else
        {
            v7 += (a2 * a5) * a1;
        }
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        v9 += a3 - (a1 * a1);
    }
    v11 = 0;
    for (v12 = 0; v12++; v12<a3)
    {
        v11 += (a1 * a5) + a3;
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 27
2 27
3 27
4 27
5 4
6 27
7 28
<<<sep_out_sample>>>
cmp %ecx,%esi
jge 14 <func1+0x14>
mov %edx,%r9d
sub %esi,%r9d
mov %edi,%eax
imul %esi,%eax
add %eax,%r9d
jmp 1b <func1+0x1b>
mov %r8d,%r9d
imul %esi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
add %edi,%ecx
imul %edx,%esi
lea (%rcx,%rsi,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a2 < a4)
    {
        v6 = a3 - a2 + (a1 * a2);
    }
    else
    {
        v6 = a5 * a2;
    }
    v7 = a4 + a1 + a2 * a3;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 6
9 10
10 10
11 13
12 13
13 13
14 13
15 13
16 12
17 12
18 12
19 13
20 14
<<<sep_out_sample>>>
push %rbx
cmp %r8d,%esi
jge 10 <func1+0x10>
lea (%rsi,%rcx,2),%r11d
imul %ecx,%r11d
jmp 1e <func1+0x1e>
mov %esi,%eax
imul %ecx,%eax
mov %edx,%r11d
sub %eax,%r11d
add %edi,%r11d
mov %edi,%r10d
sub %r8d,%r10d
imul %r8d,%r10d
add %edx,%r10d
test %ecx,%ecx
jle 44 <func1+0x44>
mov %edx,%ebx
imul %r8d,%ebx
mov $0x1,%r9d
sub %ebx,%r9d
imul %r8d,%r9d
jmp 55 <func1+0x55>
mov $0x1,%r9d
sub %r8d,%r9d
imul %ecx,%r9d
imul %edi,%r9d
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a2 < a5)
    {
        v6 = a4 * (a4 + (a2 + a4));
    }
    else
    {
        v6 = a3 - a2 * a4 + a1;
    }
    v7 = a5 * (a1 - a5) + a3;
    if (v8 < a4)
    {
        v8 = a5 - a5 * (a3 * a5);
    }
    else
    {
        v8 = a1 * (a4 - a4 * a5);
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        v9 += (a3 * a5) * a3;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 4
3 4
4 6
5 6
6 6
7 10
8 10
9 10
10 10
11 10
12 12
13 12
14 12
15 12
16 13
17 13
18 15
19 15
20 15
21 15
22 15
23 15
24 19
25 19
26 19
27 19
28 26
29 26
30 26
31 26
32 26
33 26
34 26
35 27
36 27
<<<sep_out_sample>>>
mov %r8d,%r9d
sub %edx,%r9d
mov $0x0,%eax
cmp %esi,%r8d
jl 18 <func1+0x18>
lea (%rcx,%rcx,1),%eax
imul %ecx,%eax
add %edi,%eax
lea (%rdi,%rdx,1),%r10d
add %r10d,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
add %ecx,%eax
sub %edx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a4 < a4)
    {
        v6 = a4 * ((a5 - a4) * a4);
    }
    else
    {
        v6 = a5 - a3;
    }
    if (a5 < a2)
    {
        v7 = a2 - a2;
    }
    else
    {
        v7 = (a4 + a4) * a4 + a1;
    }
    v8 = a1 - a3;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 14
4 12
5 12
6 18
7 18
8 18
9 21
10 21
11 21
12 21
13 21
14 21
15 20
16 21
17 22
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
lea (%r8,%rcx,1),%eax
imul %ecx,%edx
sub %edi,%edx
imul %edx,%esi
lea 0x1(%rax,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a4 < a4)
    {
        v6 = a3 * a2;
    }
    else
    {
        v6 = (a3 * a4 - a1) * a2;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        if (a4 < a3)
        {
            v7 += a5 + a4;
        }
        else
        {
            v7 += a1 - a2 - a2;
        }
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a1)
    {
        if (v10 < a5)
        {
            v9 += a1 - (a4 - a2);
        }
        else
        {
            v9 += a5 - a1;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 36
2 36
3 36
4 36
5 10
6 10
7 10
8 36
9 37
<<<sep_out_sample>>>
test %r8d,%r8d
jle c <func1+0xc>
lea (%rdi,%rsi,2),%eax
add %esi,%eax
jmp 17 <func1+0x17>
mov %r8d,%eax
imul %r8d,%eax
sub %ecx,%eax
add %edx,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a1 - a4 + a4;
    }
    if (v6 < a5)
    {
        v8 = a2 + a1 + a2 + a2;
    }
    else
    {
        v8 = (a5 * a5 - a4) + a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 15
7 15
8 15
9 15
10 17
11 17
12 17
13 17
14 17
15 18
<<<sep_out_sample>>>
mov %edi,%eax
imul %esi,%eax
mov %edx,%r9d
sub %eax,%r9d
add %edi,%r9d
cmp %r8d,%edi
jle 22 <func1+0x22>
mov %esi,%r10d
imul %r8d,%r10d
add %ecx,%r10d
add %r8d,%r10d
jmp 29 <func1+0x29>
mov %edx,%r10d
imul %r8d,%r10d
lea (%rdi,%rcx,1),%eax
cmp %r9d,%edi
jle 38 <func1+0x38>
mov %ecx,%eax
imul %edi,%eax
add %edx,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
add %r10d,%r9d
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a1 - (a1 * a2 - a3);
    if (a5 < a1)
    {
        v7 = a4 + a2 * a5 + a5;
    }
    else
    {
        v7 = a3 * a5;
    }
    if (v6 < a1)
    {
        v8 = a4 * a1 + a3;
    }
    else
    {
        v8 = a1 + a4;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        v9 += a4 + (a4 * a3);
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 4
6 5
7 5
8 7
9 7
10 7
11 7
12 7
13 11
14 11
15 19
16 13
17 13
18 15
19 15
20 15
21 26
22 26
23 26
24 26
25 26
26 26
27 26
28 27
<<<sep_out_sample>>>
cmp %edi,%esi
jge f <func1+0xf>
mov %edx,%eax
imul %edi,%eax
lea (%rax,%r8,2),%eax
jmp 17 <func1+0x17>
lea (%rsi,%rsi,1),%eax
imul %edi,%eax
sub %edx,%eax
add %edi,%edx
add %esi,%edx
add %edx,%r8d
add %ecx,%r8d
add %r8d,%eax
add %ecx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a2 < a1)
    {
        v6 = a5 + (a5 + a3 * a1);
    }
    else
    {
        v6 = (a1 * (a2 + a2)) - a3;
    }
    if (a1 < a1)
    {
        v7 = a4 - a4 - a3 - a2;
    }
    else
    {
        v7 = a2 + a4;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 20
11 20
12 20
13 20
14 20
15 18
16 20
17 21
<<<sep_out_sample>>>
mov %edx,%eax
sub %ecx,%eax
lea (%rdi,%rdx,2),%r9d
cmp $0x2,%r8d
cmovl %r9d,%eax
mov %ecx,%r9d
imul %esi,%r9d
sub %r9d,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a1 - a4 - a2;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        if (v7 < a1)
        {
            v8 += a3 - a5;
        }
        else
        {
            v8 += a5 * a2;
        }
    }
    if (v9 < a5)
    {
        v10 = (a3 - a5 - a4) + a5;
    }
    else
    {
        v10 = (a3 + a1) + a3;
    }
    v11 = a4 - a4 - a4 * a2;
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 23
2 23
3 23
4 23
5 23
6 29
7 29
8 30
9 30
10 30
11 30
12 30
13 30
14 31
<<<sep_out_sample>>>
test %edx,%edx
jle d <func1+0xd>
mov %edi,%r11d
imul %edi,%r11d
jmp 17 <func1+0x17>
mov %edx,%r11d
imul %ecx,%r11d
add %edi,%r11d
mov %ecx,%r10d
imul %r8d,%r10d
mov %edx,%eax
sub %esi,%eax
imul %eax,%r10d
mov %r8d,%r9d
sub %esi,%r9d
cmp %ecx,%edi
jg 37 <func1+0x37>
mov %edi,%r9d
imul %ecx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
add %edi,%edi
add %r8d,%esi
imul %edi,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (v6 < a3)
    {
        v6 = a4 - (a4 - a1 * a1);
    }
    else
    {
        v6 = a1 + a3 * a4;
    }
    v7 = a4 * a5 * (a3 - a2);
    if (a4 < a1)
    {
        v8 = a5 - a2;
    }
    else
    {
        v8 = a1 * a4;
    }
    v9 = (a1 + a1) * (a5 + a2);
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 12
10 12
11 12
12 12
13 12
14 15
15 15
16 13
17 13
18 19
19 19
20 22
21 22
22 22
23 22
24 22
25 22
26 22
27 21
28 21
29 21
30 22
31 23
<<<sep_out_sample>>>
mov %r8d,%eax
imul %r8d,%eax
add %esi,%eax
sub %edi,%eax
cmp %esi,%ecx
jle 18 <func1+0x18>
mov %r8d,%r9d
imul %ecx,%r9d
jmp 23 <func1+0x23>
lea (%rdi,%r8,1),%r9d
imul %edx,%r9d
add %r8d,%r9d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a5 + a4 + a3;
    }
    if (a4 < a4)
    {
        v8 = (a5 + a3 - a1) * a2;
    }
    else
    {
        v8 = a2 + (a5 * a5) - a1;
    }
    if (a2 < a4)
    {
        v9 = a5 * a4;
    }
    else
    {
        v9 = a5 + (a1 + a5) * a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 15
2 15
3 15
4 15
5 17
6 17
7 19
8 19
9 19
10 23
11 23
12 23
13 25
14 25
15 25
16 25
17 25
18 25
19 26
<<<sep_out_sample>>>
lea (%rdx,%r8,1),%eax
sub %edi,%eax
lea (%rsi,%rdx,1),%r9d
cmp %r8d,%edx
jle 20 <func1+0x20>
mov %ecx,%r9d
imul %esi,%r9d
mov %edi,%r10d
imul %edx,%r10d
sub %r10d,%r9d
cmp %esi,%edi
jge 2d <func1+0x2d>
mov %esi,%r10d
imul %esi,%r10d
jmp 34 <func1+0x34>
mov %edi,%r10d
imul %edi,%r10d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %eax,%ecx
add %ecx,%r9d
lea (%r9,%r10,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = (a3 + a5) - a1;
    if (a5 < a3)
    {
        v7 = a4 * a2 - (a1 * a3);
    }
    else
    {
        v7 = a2 + a3;
    }
    if (a1 < a2)
    {
        v8 = a2 * a2;
    }
    else
    {
        v8 = a1 * a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 11
4 5
5 5
6 7
7 7
8 7
9 7
10 7
11 13
12 13
13 15
14 15
15 15
16 19
17 19
18 21
19 21
20 21
21 21
22 21
23 21
24 21
25 22
<<<sep_out_sample>>>
add %edx,%edi
add %esi,%edi
add %edi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %edx,%esi
imul %esi,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (a2 < a3)
        {
            v6 += a3 + a3;
        }
        else
        {
            v6 += a1 + a1 * a4;
        }
    }
    v8 = (a3 + a2) * a3;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 16
6 16
7 17
8 18
<<<sep_out_sample>>>
lea (%rdx,%rdi,1),%r10d
cmp %ecx,%r8d
jg 15 <func1+0x15>
lea (%rdx,%r8,1),%r10d
imul %edx,%r10d
imul %r8d,%r10d
lea (%rsi,%rsi,1),%eax
mov %esi,%r9d
imul %ecx,%r9d
sub %r9d,%eax
mov %edx,%r9d
sub %ecx,%r9d
lea (%rdi,%r8,1),%r11d
test %esi,%esi
cmovle %r11d,%r9d
add %r9d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %r10d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (v7 < a5)
        {
            v6 += (a5 - a1) * a2;
        }
        else
        {
            v6 += a3 + a4 * a1;
        }
    }
    if (a4 < a5)
    {
        v8 = a3 + a1;
    }
    else
    {
        v8 = (a3 + a5) * a3 * a5;
    }
    v9 = a2 + a2 - a2 * a4;
    if (v10 < a2)
    {
        v10 = a3 + a5 - a4 - a5;
    }
    else
    {
        v10 = a1 + a5;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 16
3 16
4 22
5 22
6 22
7 24
8 24
9 24
10 24
11 27
12 27
13 27
14 27
15 27
16 33
17 33
18 33
19 33
20 33
21 33
22 33
23 34
<<<sep_out_sample>>>
cmp %edx,%ecx
jge d <func1+0xd>
lea (%r8,%rdi,1),%r10d
add %edx,%r10d
jmp 1b <func1+0x1b>
mov %ecx,%r10d
imul %r8d,%r10d
imul %esi,%r10d
add %edi,%r10d
cmp %edi,%edx
jge 2e <func1+0x2e>
mov %edi,%r9d
sub %edx,%r9d
imul %ecx,%r9d
add %r8d,%r9d
jmp 35 <func1+0x35>
mov %r8d,%r9d
imul %ecx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
sub %ecx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a4 < a3)
    {
        v6 = a5 + a1 + a3;
    }
    else
    {
        v6 = a4 * a5 * a2 + a1;
    }
    if (a3 < a1)
    {
        v7 = ((a1 - a3) * a4) + a5;
    }
    else
    {
        v7 = a5 * a4 - a1 + a1;
    }
    if (a3 < a3)
    {
        v8 = a3 + (a2 * (a1 + a1));
    }
    else
    {
        v8 = a2 - (a4 - a1) - a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 10
10 12
11 12
12 14
13 14
14 14
15 14
16 14
17 18
18 18
19 28
20 28
21 28
22 28
23 28
24 28
25 26
26 28
27 29
<<<sep_out_sample>>>
cmp %ecx,%r8d
jge e <func1+0xe>
mov %ecx,%eax
imul %edx,%eax
add %esi,%eax
jmp 19 <func1+0x19>
mov %r8d,%eax
sub %edx,%eax
imul %esi,%eax
add %r8d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (a5 < a2)
        {
            v6 += a3 * a2;
        }
        else
        {
            v6 += a3 + (a2 * a1);
        }
    }
    if (a5 < a4)
    {
        v8 = a2 + a4 * a3;
    }
    else
    {
        v8 = a5 + (a5 - a3) * a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 18
7 22
8 22
9 22
10 22
11 24
12 24
13 24
14 24
15 24
16 25
<<<sep_out_sample>>>
mov %edi,%r9d
sub %ecx,%r9d
lea (%rcx,%rdi,1),%eax
cmp %edx,%ecx
jg 1b <func1+0x1b>
mov %esi,%r10d
imul %r8d,%r10d
lea (%rdx,%rsi,1),%eax
imul %r10d,%eax
lea (%r8,%rcx,1),%r10d
mov %esi,%r11d
imul %edx,%r11d
sub %r11d,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a1 - a4;
    if (a3 < a4)
    {
        v7 = a4 + a1;
    }
    else
    {
        v7 = a2 * a5 * (a3 + a2);
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        if (a4 < a4)
        {
            v8 += a5 * a4 + a1;
        }
        else
        {
            v8 += a3 * a1;
        }
    }
    v10 = a5 + a4 - (a2 * a3);
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 7
4 5
5 5
6 11
7 11
8 11
9 11
10 25
11 25
12 25
13 25
14 26
15 26
16 26
17 26
18 26
19 26
20 26
21 27
<<<sep_out_sample>>>
cmp %esi,%edx
jge 14 <func1+0x14>
mov %edi,%r9d
imul %ecx,%r9d
imul %edx,%r9d
sub %ecx,%r9d
jmp 23 <func1+0x23>
mov %ecx,%eax
imul %r8d,%eax
imul %edx,%eax
mov %r8d,%r9d
sub %eax,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
sub %esi,%eax
sub %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a3 < a2)
    {
        v6 = a1 * a4 * a3 - a4;
    }
    else
    {
        v6 = a5 - (a4 * a5) * a3;
    }
    v7 = (a1 - (a1 + a2)) - a1;
    v8 = a1 - a3;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 10
13 14
14 14
15 14
16 14
17 14
18 12
19 14
20 15
<<<sep_out_sample>>>
cmp %ecx,%edx
jge 14 <func1+0x14>
mov $0x1,%eax
sub %r8d,%eax
imul %edi,%eax
imul %edx,%eax
jmp 23 <func1+0x23>
mov %edi,%eax
sub %r8d,%eax
mov %esi,%r9d
imul %edx,%r9d
sub %r9d,%eax
cmp %esi,%eax
jge 37 <func1+0x37>
lea (%rsi,%rcx,1),%r10d
mov %esi,%r9d
imul %edi,%r9d
add %r10d,%r9d
jmp 3e <func1+0x3e>
mov %edx,%r9d
imul %edx,%r9d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%eax
lea 0x1(%r9,%rax,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a3 < a4)
    {
        v6 = (a1 - a1 * a5) * a3;
    }
    else
    {
        v6 = (a1 - a5) - a2 * a3;
    }
    if (v6 < a2)
    {
        v7 = a2 + a4 + (a2 * a1);
    }
    else
    {
        v7 = a3 + a3 * a3 - a3;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        if (v8 < a4)
        {
            v8 += (a4 * a3) * a4;
        }
        else
        {
            v8 += (a2 * a4) + a4;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 10
13 12
14 12
15 14
16 14
17 14
18 14
19 14
20 18
21 18
22 32
23 32
24 32
25 32
26 32
27 32
28 33
<<<sep_out_sample>>>
push %rbx
mov %edx,%ebx
imul %edx,%ebx
mov %edi,%eax
sub %ecx,%eax
add %eax,%ebx
cmp %r8d,%edx
jle 1d <func1+0x1d>
mov %r8d,%r11d
imul %r8d,%r11d
add %edi,%r11d
jmp 2a <func1+0x2a>
mov %edx,%r11d
imul %ecx,%r11d
add %esi,%r11d
sub %ecx,%r11d
lea 0x1(%r8),%r10d
imul %edi,%r10d
add %edx,%r10d
cmp %ecx,%edi
jle 45 <func1+0x45>
mov %edi,%r9d
sub %esi,%r9d
imul %esi,%r9d
jmp 4c <func1+0x4c>
mov %edx,%r9d
imul %r8d,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %ebx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a3 < a3)
    {
        v6 = a1 * (a3 + a5 + a2);
    }
    else
    {
        v6 = a3 * a3 + (a1 - a4);
    }
    if (a5 < a3)
    {
        v7 = a5 * a5 + a1;
    }
    else
    {
        v7 = a3 * a4 + a2 - a4;
    }
    v8 = (a1 + (a1 * a5)) + a3;
    if (a4 < a1)
    {
        v9 = a2 * (a1 - a2);
    }
    else
    {
        v9 = (a5 + a3 * a5) - a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 10
3 10
4 10
5 10
6 10
7 12
8 12
9 14
10 14
11 14
12 14
13 18
14 18
15 18
16 18
17 20
18 20
19 20
20 21
21 21
22 23
23 23
24 23
25 23
26 27
27 27
28 29
29 29
30 29
31 29
32 29
33 29
34 29
35 29
36 30
37 30
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
sub %edi,%esi
add %esi,%eax
imul %r8d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a2 - a1;
    v7 = a5 * a4;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 6
7 5
8 6
9 7
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
lea 0x1(%rcx,%r8,1),%edi
add %edx,%ecx
sub %ecx,%esi
sub %edx,%esi
lea (%rdi,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (v7 < a5)
        {
            v6 += a5 - a2;
        }
        else
        {
            v6 += a2 + a4 * a1;
        }
    }
    v8 = a2 - (a3 + a4) - a3;
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        v9 += a4 * (a1 - a2);
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 22
4 22
5 16
6 16
7 16
8 22
9 23
<<<sep_out_sample>>>
mov %edi,%r9d
sub %edx,%r9d
sub $0x1,%r9d
imul %edx,%r9d
mov %ecx,%r11d
imul %r8d,%r11d
cmp %ecx,%r9d
jge 24 <func1+0x24>
lea (%rcx,%rdx,1),%r10d
imul %ecx,%r10d
jmp 32 <func1+0x32>
mov %edi,%r10d
sub %esi,%r10d
imul %ecx,%r10d
imul %esi,%r10d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
add %r11d,%eax
add %r10d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = ((a1 - a3) * a3) - a3;
    if (a3 < a3)
    {
        v7 = ((a5 * a1) + a5) + a1;
    }
    else
    {
        v7 = a4 * a5;
    }
    if (v6 < a4)
    {
        v8 = a4 * (a4 + a3);
    }
    else
    {
        v8 = (a1 - a2) * a4 * a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 11
6 11
7 13
8 13
9 15
10 15
11 15
12 19
13 19
14 19
15 19
16 21
17 21
18 21
19 21
20 21
21 21
22 21
23 22
<<<sep_out_sample>>>
cmp %esi,%r8d
jle 10 <func1+0x10>
lea (%r8,%rdx,1),%eax
add %edi,%eax
imul %esi,%eax
jmp 1a <func1+0x1a>
mov %r8d,%eax
imul %ecx,%eax
sub %esi,%eax
sub %edi,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %esi,%edx
add %r8d,%edx
lea 0x1(%rcx,%rdx,1),%edx
add %edx,%eax
imul %ecx,%edi
imul %edi,%r8d
imul %r8d,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a4 * (a5 + a4);
    }
    if (a2 < a5)
    {
        v8 = a2 * ((a5 + a3) + a1);
    }
    else
    {
        v8 = (a5 * a4 - a2) - a1;
    }
    v9 = a5 * (a1 * a4) * a2;
    v10 = 0;
    for (v11 = 0; v11++; v11<a3)
    {
        v10 += a4 + (a2 + a4);
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 15
8 15
9 15
10 15
11 23
12 23
13 23
14 23
15 23
16 17
17 17
18 17
19 23
20 24
<<<sep_out_sample>>>
mov %edx,%eax
sub %ecx,%eax
cmp %edi,%edx
jge 10 <func1+0x10>
mov %r8d,%eax
imul %edi,%eax
add %ecx,%eax
add %edi,%edx
add %esi,%edx
add %edx,%r8d
add %ecx,%r8d
add %r8d,%eax
imul %ecx,%esi
sub %esi,%edi
add %edi,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a3 < a1)
    {
        v6 = (a5 * a1) + a4;
    }
    else
    {
        v6 = a3 - a4;
    }
    v7 = a1 - a2 * a4 + a4;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 10
2 10
3 4
4 4
5 6
6 6
7 6
8 13
9 13
10 13
11 13
12 13
13 12
14 12
15 12
16 13
17 14
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (a1 < a1)
        {
            v6 += a2 * a3 - a2;
        }
        else
        {
            v6 += a4 + a1 + a4;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += a2 * (a1 + a1);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 21
5 22
<<<sep_out_sample>>>
lea (%rdi,%rcx,1),%eax
add %r8d,%eax
mov %r8d,%r9d
imul %esi,%r9d
cmp %esi,%ecx
cmovl %r9d,%eax
add %edi,%edx
add %edx,%esi
add %r8d,%esi
add %esi,%ecx
add %ecx,%eax
sub %r8d,%edi
lea 0x1(%rax,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a4 < a2)
    {
        v6 = a5 * a2;
    }
    else
    {
        v6 = a1 + a4 + a5;
    }
    v7 = a1 - a5;
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += a5 * a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 6
4 6
5 6
6 6
7 18
8 18
9 18
10 18
11 18
12 12
13 18
14 19
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a2 + a2;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += a4 - a4 - a2;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a5)
    {
        if (v7 < a2)
        {
            v10 += a4 - a5 - a3;
        }
        else
        {
            v10 += a1 - a2 - a5;
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 26
2 26
3 26
4 26
5 27
<<<sep_out_sample>>>
mov %edi,%eax
imul %edx,%eax
mov %r8d,%r10d
sub %eax,%r10d
add %edi,%r10d
mov %edx,%eax
neg %eax
mov %r8d,%r9d
sub %ecx,%r9d
cmp %esi,%r8d
cmovg %eax,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
imul %r8d,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a1 < a1)
    {
        v6 = a5 * a4;
    }
    else
    {
        v6 = a5 - a1 * a3 + a1;
    }
    if (a2 < a5)
    {
        v7 = a5 - a5 - a3;
    }
    else
    {
        v7 = a5 - a4;
    }
    v8 = a5 * a5;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 10
6 14
7 14
8 14
9 14
10 14
11 14
12 21
13 21
14 21
15 21
16 21
17 21
18 20
19 21
20 22
<<<sep_out_sample>>>
mov %edx,%r9d
imul %r8d,%r9d
mov %r9d,%r10d
sub %esi,%r10d
mov %r8d,%eax
sub %edx,%eax
sub %r9d,%eax
cmp %edi,%esi
jge 24 <func1+0x24>
mov %ecx,%eax
sub %r8d,%eax
sub $0x1,%eax
imul %edi,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r10d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a3 * a5 - a2;
    if (a2 < a1)
    {
        v7 = a1 * (a4 - a5) - a1;
    }
    else
    {
        v7 = a5 - a3 - a5 * a3;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 11
6 11
7 11
8 5
9 5
10 7
11 7
12 7
13 7
14 13
15 13
16 13
17 13
18 13
19 13
20 14
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %edx,%r8d
lea (%rax,%rcx,2),%eax
lea (%rax,%r8,1),%r8d
mov %edi,%eax
sub %ecx,%eax
lea (%r8,%rax,1),%ecx
add %edi,%esi
imul %edx,%edi
sub %edi,%esi
lea (%rcx,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a5 + a3 + a4;
    v7 = a1 - a4;
    v8 = (a1 + a2) - a1 * a3;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 7
2 7
3 7
4 4
5 4
6 7
7 5
8 5
9 7
10 6
11 6
12 6
13 7
14 8
<<<sep_out_sample>>>
mov %r8d,%eax
sub %esi,%eax
cmp %r8d,%edx
jl 11 <func1+0x11>
mov %r8d,%eax
imul %r8d,%eax
lea 0x1(%rdi,%rdx,1),%r9d
add %r9d,%esi
add %esi,%r8d
add %r8d,%ecx
add %eax,%ecx
add %edi,%edx
lea 0x1(%rcx,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    if (a3 < a5)
    {
        v6 = a5 - a2;
    }
    else
    {
        v6 = a5 * a5;
    }
    v7 = a3 + a1;
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        if (v9 < a1)
        {
            v8 += a4 - a4;
        }
        else
        {
            v8 += a4 * a1;
        }
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a4)
    {
        v10 += a5 + a4 * a3;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 6
3 4
4 4
5 10
6 10
7 30
8 30
9 30
10 30
11 30
12 12
13 30
14 31
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
lea 0x1(%rcx,%r8,1),%eax
imul %ecx,%edx
add %edx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a1 - a1 + a1;
    }
    v8 = a2 + a4 * a3;
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        v9 += a2 * a5 + a4;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 15
2 15
3 15
4 15
5 9
6 9
7 15
8 16
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
add %ecx,%esi
imul %ecx,%ecx
add %esi,%ecx
imul %edi,%edx
add $0x1,%edx
imul %edx,%r8d
lea 0x1(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a4 * a4;
    v7 = a5 + a5 * (a1 * a3);
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += a5 - a1 * a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 11
5 4
6 11
7 5
8 5
9 5
10 11
11 12
<<<sep_out_sample>>>
test %ecx,%ecx
jle f <func1+0xf>
mov %ecx,%eax
imul %edi,%eax
add %edx,%eax
sub %edi,%eax
jmp 16 <func1+0x16>
lea 0x1(%rdx,%rcx,1),%eax
imul %edi,%eax
add %edx,%edi
add %edi,%esi
add %r8d,%esi
add %esi,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (v6 < a4)
    {
        v6 = a3 + a4 * a1 - a1;
    }
    else
    {
        v6 = a1 + (a3 + a4) * a1;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += a5 - a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 17
11 17
12 17
13 17
14 17
15 18
<<<sep_out_sample>>>
lea (%rcx,%rdx,1),%r9d
sub %r8d,%r9d
cmp %edx,%ecx
jle 18 <func1+0x18>
mov %esi,%eax
sub %r8d,%eax
imul %ecx,%eax
add %r8d,%eax
jmp 1e <func1+0x1e>
mov %r8d,%eax
imul %ecx,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = a4 + a3 - a5;
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += (a4 * a2) - a2;
    }
    if (a3 < a4)
    {
        v9 = ((a2 - a5) * a4) + a5;
    }
    else
    {
        v9 = a5 * a4;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a4)
    {
        if (v7 < a2)
        {
            v10 += (a4 * a2) * a2;
        }
        else
        {
            v10 += a1 + a1 - a4;
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 10
4 10
5 12
6 12
7 12
8 12
9 12
10 16
11 16
12 30
13 30
14 30
15 30
16 30
17 30
18 31
<<<sep_out_sample>>>
lea (%rdx,%r8,1),%eax
test %edi,%edi
jg f <func1+0xf>
mov %edx,%eax
imul %esi,%eax
neg %eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (v6 < a1)
    {
        v6 = a3 + a5;
    }
    else
    {
        v6 = (a4 - a3 * a2) - a4;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += a1 * a5 - a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 6
2 4
3 4
4 10
5 10
6 10
7 17
8 17
9 17
10 17
11 17
12 18
<<<sep_out_sample>>>
test %ecx,%ecx
jle f <func1+0xf>
mov %r8d,%r9d
sub %edx,%r9d
sub %edx,%r9d
jmp 19 <func1+0x19>
lea (%rcx,%r8,1),%r9d
add %edx,%r9d
add %edi,%r9d
cmp $0x1,%r8d
jle 2a <func1+0x2a>
mov %esi,%eax
sub %ecx,%eax
imul %ecx,%eax
add %edi,%eax
jmp 32 <func1+0x32>
lea (%rsi,%r8,1),%eax
sub %edx,%eax
sub %edi,%eax
add %r9d,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a4 * (a5 * a5);
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        if (v9 < a4)
        {
            v8 += a2 * a4;
        }
        else
        {
            v8 += a1 - a1 + a2;
        }
    }
    if (v10 < a4)
    {
        v10 = (a5 - a3) - a3;
    }
    else
    {
        v10 = a1 + (a4 + a5 + a3);
    }
    if (v9 < a5)
    {
        v11 = (a2 - a4) * a4 + a1;
    }
    else
    {
        v11 = (a2 + a5 - a3) - a1;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 23
4 23
5 23
6 23
7 27
8 27
9 27
10 29
11 29
12 31
13 31
14 31
15 31
16 31
17 35
18 35
19 35
20 37
21 37
22 37
23 37
24 37
25 37
26 38
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
add %ecx,%esi
imul %ecx,%edi
add %edi,%r8d
imul %r8d,%ecx
lea 0x1(%rsi,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a4 * (a1 * a4 + a5);
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        if (v7 < a2)
        {
            v7 += a3 * a3 - a1;
        }
        else
        {
            v7 += (a1 + a5) * a2;
        }
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        v9 += a2 - a2 * a2;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 22
4 22
5 4
6 4
7 4
8 22
9 23
<<<sep_out_sample>>>
lea (%rsi,%rcx,1),%r9d
add %edx,%r9d
imul %edi,%r9d
lea (%rdx,%rsi,1),%eax
lea (%rdi,%rdx,1),%r10d
add %edi,%eax
cmp %edi,%ecx
cmovl %r10d,%eax
add %r10d,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = (a2 + a4 + a3) * a1;
    if (a4 < a1)
    {
        v7 = a1 + a3;
    }
    else
    {
        v7 = a3 + a2 + a1;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 11
5 7
6 7
7 7
8 7
9 13
10 13
11 13
12 13
13 13
14 14
<<<sep_out_sample>>>
lea (%rdx,%r8,1),%r9d
mov $0x1,%r11d
sub %r9d,%r11d
imul %r8d,%r11d
mov %r8d,%eax
imul %r8d,%eax
mov %ecx,%r10d
sub %eax,%r10d
sub %edi,%r10d
cmp %esi,%ecx
jle 35 <func1+0x35>
mov %r8d,%r9d
imul %esi,%r9d
imul %r8d,%r9d
sub %edx,%r9d
jmp 44 <func1+0x44>
mov %edi,%r9d
imul %esi,%r9d
imul %edi,%r9d
imul %edi,%r9d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea (%r11,%rcx,1),%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a3 - a3;
    v7 = a5 - ((a3 + a5) * a5);
    v8 = a4 - a5 * a5 - a1;
    if (a2 < a4)
    {
        v9 = ((a5 * a2) * a5) - a3;
    }
    else
    {
        v9 = (a1 * a2 * a1) * a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 5
2 5
3 5
4 5
5 6
6 6
7 6
8 6
9 6
10 7
11 7
12 9
13 9
14 9
15 9
16 9
17 13
18 13
19 13
20 13
21 15
22 15
23 15
24 15
25 15
26 15
27 15
28 16
<<<sep_out_sample>>>
cmp %r8d,%edx
jge 18 <func1+0x18>
mov $0x1,%r9d
sub %ecx,%r9d
imul %esi,%r9d
imul %edi,%r9d
jmp 22 <func1+0x22>
lea (%rdi,%rdx,1),%r9d
sub %ecx,%r9d
sub %ecx,%r9d
lea (%rsi,%rdi,2),%eax
cmp %edi,%esi
jge 2f <func1+0x2f>
lea (%rdx,%r8,1),%eax
add %edi,%eax
add %edi,%edx
add %edx,%esi
add %r8d,%esi
add %esi,%ecx
add %r9d,%ecx
add %ecx,%eax
imul %r8d,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a3 < a5)
    {
        v6 = (a2 - a2 * a4) * a1;
    }
    else
    {
        v6 = a1 + a3 - a4 - a4;
    }
    if (a2 < a1)
    {
        v7 = a3 + a5 + a1;
    }
    else
    {
        v7 = (a1 + a1) + a2;
    }
    if (a2 < a2)
    {
        v8 = (a1 * a2) - a1 * a4;
    }
    else
    {
        v8 = a1 * a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 18
12 12
13 12
14 14
15 14
16 28
17 28
18 28
19 28
20 28
21 28
22 26
23 28
24 29
<<<sep_out_sample>>>
mov %esi,%r10d
imul %r8d,%r10d
imul %esi,%r10d
sub %edx,%r10d
cmp %edi,%edx
jle 23 <func1+0x23>
mov %ecx,%r9d
imul %edi,%r9d
imul %ecx,%r9d
imul %ecx,%r9d
jmp 30 <func1+0x30>
mov %edx,%r9d
imul %r8d,%r9d
sub %esi,%r9d
add %r8d,%r9d
mov %edi,%eax
sub %edx,%eax
cmp %edi,%r9d
jge 49 <func1+0x49>
lea (%rsi,%r8,1),%r11d
mov $0x1,%eax
sub %r11d,%eax
imul %r8d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r10d,%ecx
add %ecx,%r9d
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = (a2 * a5) * a2 - a3;
    if (a1 < a3)
    {
        v7 = a4 * a1 * a4 * a4;
    }
    else
    {
        v7 = a3 * a5 - a2 + a5;
    }
    if (v7 < a1)
    {
        v8 = a5 - (a2 + a5) * a5;
    }
    else
    {
        v8 = a1 - a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 5
6 5
7 7
8 7
9 7
10 7
11 7
12 11
13 11
14 11
15 11
16 19
17 19
18 13
19 13
20 15
21 15
22 15
23 15
24 21
25 21
26 21
27 21
28 21
29 21
30 21
31 22
<<<sep_out_sample>>>
mov %edi,%eax
imul %esi,%eax
lea (%rdi,%rdx,1),%r9d
add %esi,%r9d
add %r8d,%r9d
add %ecx,%r9d
imul %eax,%esi
add %r8d,%esi
add %r9d,%esi
add %esi,%eax
imul %ecx,%edx
add %edx,%r8d
add %r8d,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a1 * a2 * a2 + a5;
    v7 = a2 * a1;
    v8 = (a4 * a3) + a5 + a1;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 7
4 7
5 7
6 7
7 4
8 4
9 7
10 7
11 6
12 6
13 6
14 7
15 8
<<<sep_out_sample>>>
mov %ecx,%eax
imul %r8d,%eax
sub %esi,%eax
sub %ecx,%eax
lea 0x1(%rdi,%rax,1),%eax
add %eax,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
lea (%rcx,%rdi,2),%eax
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (v6 < a5)
        {
            v6 += (a2 + a3) - a4;
        }
        else
        {
            v6 += (a3 * a3) * a5;
        }
    }
    v8 = a1 + a4 + a1;
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        v9 += a4 * a1;
    }
    v11 = (a4 * a5) - a2 - a4;
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 22
4 22
5 23
6 23
7 23
8 23
9 23
10 16
11 23
12 24
<<<sep_out_sample>>>
mov %edx,%r10d
imul %ecx,%r10d
imul %edx,%r10d
imul %edi,%r10d
mov %esi,%r9d
sub %r8d,%r9d
cmp %edi,%edx
jg 26 <func1+0x26>
mov %esi,%r9d
sub %r8d,%r9d
imul %r8d,%r9d
sub %edx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = (a3 * a4) * a3 * a1;
    if (a1 < a3)
    {
        v7 = a2 - a5;
    }
    else
    {
        v7 = a5 * (a2 - a5) - a3;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 7
6 7
7 5
8 5
9 11
10 11
11 11
12 11
13 13
14 13
15 13
16 13
17 13
18 13
19 14
<<<sep_out_sample>>>
mov %esi,%r9d
imul %esi,%r9d
add %r8d,%r9d
sub %edx,%r9d
mov $0x0,%eax
mov %ecx,%r10d
imul %r8d,%r10d
test %edx,%edx
cmovle %r10d,%eax
cmp %edi,%esi
jle 31 <func1+0x31>
mov %r8d,%r10d
sub %edi,%r10d
add %edx,%r10d
add %esi,%r10d
jmp 3b <func1+0x3b>
mov %edi,%r10d
neg %r10d
imul %edi,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %r9d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a5 * a3 - a5;
    }
    v8 = a2 * a2 + a5 - a3;
    if (v9 < a3)
    {
        v9 = a2 - (a1 + a2) + a1;
    }
    else
    {
        v9 = a3 - a3 + a4 * a5;
    }
    if (a1 < a2)
    {
        v10 = a5 - a1 + a3 + a2;
    }
    else
    {
        v10 = a1 * (a5 - (a5 + a1));
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 9
4 9
5 12
6 16
7 16
8 16
9 16
10 18
11 18
12 20
13 20
14 20
15 20
16 20
17 24
18 24
19 24
20 26
21 26
22 26
23 26
24 26
25 26
26 26
27 27
<<<sep_out_sample>>>
cmp %ecx,%r8d
jle 12 <func1+0x12>
mov %ecx,%eax
imul %r8d,%eax
imul %edx,%eax
sub %esi,%eax
jmp 1d <func1+0x1d>
mov %edx,%eax
imul %r8d,%eax
imul %esi,%eax
add %ecx,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a5 * a3;
    }
    if (a4 < a5)
    {
        v8 = (a3 * (a4 * a5)) - a2;
    }
    else
    {
        v8 = a3 * a5 * a2 + a4;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        v9 += a5 - a3 + a3;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 11
8 15
9 15
10 15
11 15
12 22
13 22
14 22
15 22
16 22
17 23
<<<sep_out_sample>>>
lea (%rdx,%r8,1),%eax
mov %esi,%r10d
sub %ecx,%r10d
cmp %edx,%edi
cmovl %eax,%r10d
mov %r8d,%eax
neg %eax
sub %r8d,%eax
cmp %esi,%r8d
jge 24 <func1+0x24>
mov %esi,%eax
sub %edx,%eax
imul %esi,%eax
lea (%rdi,%rdx,1),%r9d
add %esi,%r9d
add %r8d,%r9d
add %ecx,%r9d
add %r10d,%r9d
add %r9d,%eax
mov %esi,%r11d
sub %r8d,%r11d
imul %r11d,%edi
add %edi,%eax
add %ecx,%edx
imul %esi,%edx
imul %edx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a1 < a3)
    {
        v6 = a3 + a5;
    }
    else
    {
        v6 = a2 - a4;
    }
    if (a5 < a2)
    {
        v7 = (a2 * a2) - a3 * a2;
    }
    else
    {
        v7 = a5 - a5 - a5 - a5;
    }
    v8 = a1 * (a2 - a5);
    v9 = (a4 + a3) * a2 * a2;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 6
6 18
7 18
8 18
9 12
10 12
11 14
12 14
13 14
14 22
15 22
16 22
17 22
18 22
19 22
20 20
21 20
22 20
23 22
24 21
25 21
26 21
27 22
28 23
<<<sep_out_sample>>>
cmp %edi,%esi
jge a <func1+0xa>
lea (%r8,%r8,1),%eax
jmp 15 <func1+0x15>
mov %ecx,%eax
sub %r8d,%eax
imul %r8d,%eax
add %edi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %eax,%ecx
lea 0x1(%rcx,%rdx,2),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a2 < a1)
    {
        v6 = a5 + a5;
    }
    else
    {
        v6 = a1 + (a4 - a5) * a5;
    }
    v7 = a3 + a3;
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += a4 + a3 - a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 10
6 10
7 10
8 10
9 18
10 18
11 18
12 18
13 18
14 18
15 19
<<<sep_out_sample>>>
lea (%rdx,%rcx,1),%r10d
test %esi,%esi
jg f <func1+0xf>
mov %edx,%r10d
imul %ecx,%r10d
cmp %edx,%esi
jle 1d <func1+0x1d>
lea 0x1(%rdx),%r9d
imul %edi,%r9d
jmp 26 <func1+0x26>
mov %esi,%eax
imul %esi,%eax
lea (%rax,%rcx,2),%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (v6 < a2)
    {
        v6 = a3 + a4;
    }
    else
    {
        v6 = a4 - (a4 - a3 * a4);
    }
    if (a3 < a2)
    {
        v7 = a1 + a1 * a3;
    }
    else
    {
        v7 = a4 + a4 + a2 * a2;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 4
3 4
4 10
5 10
6 12
7 12
8 14
9 14
10 14
11 18
12 18
13 18
14 20
15 20
16 20
17 20
18 20
19 20
20 21
<<<sep_out_sample>>>
cmp %edi,%r8d
jge a <func1+0xa>
lea (%rsi,%rsi,1),%eax
jmp 13 <func1+0x13>
lea (%rdx,%rdi,1),%eax
imul %edi,%eax
imul %esi,%eax
add %edi,%edx
add %esi,%edx
add %edx,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
imul %ecx,%ecx
add %ecx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a3 + a3 + a5;
    }
    if (a5 < a1)
    {
        v8 = a2 + a2;
    }
    else
    {
        v8 = ((a3 + a1) * a1) * a2;
    }
    v9 = a2 + (a4 * a4);
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 15
6 15
7 15
8 18
9 18
10 18
11 18
12 18
13 17
14 17
15 18
16 19
<<<sep_out_sample>>>
cmp %ecx,%esi
jge a <func1+0xa>
lea (%r8,%r8,1),%r9d
jmp 18 <func1+0x18>
mov %edx,%r9d
imul %ecx,%r9d
imul %edx,%r9d
add %edi,%r9d
mov %edi,%r11d
sub %esi,%r11d
cmp %edi,%r9d
mov $0x0,%eax
cmovl %eax,%r11d
cmp %edi,%edx
jge 37 <func1+0x37>
mov %ecx,%r10d
imul %edi,%r10d
jmp 41 <func1+0x41>
mov %esi,%r10d
sub %ecx,%r10d
imul %edi,%r10d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
add %r11d,%eax
add %r10d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a2 < a4)
    {
        v6 = a5 + a5;
    }
    else
    {
        v6 = a1 + (a3 * a4 * a3);
    }
    if (v6 < a1)
    {
        v7 = a1 - a1;
    }
    else
    {
        v7 = a1 - a2;
    }
    if (a3 < a1)
    {
        v8 = a4 * a1;
    }
    else
    {
        v8 = (a2 * a1) - a4 * a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 10
6 10
7 10
8 10
9 18
10 18
11 18
12 18
13 18
14 20
15 20
16 22
17 22
18 22
19 26
20 26
21 26
22 28
23 28
24 28
25 28
26 28
27 28
28 28
29 29
<<<sep_out_sample>>>
lea (%r8,%r8,1),%eax
mov %eax,%r9d
sub %ecx,%eax
cmp %edi,%ecx
cmovg %r9d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (a4 < a4)
        {
            v6 += a1 * a3;
        }
        else
        {
            v6 += a4 - a2 - a2;
        }
    }
    if (a1 < a4)
    {
        v8 = a5 + a5;
    }
    else
    {
        v8 = (a5 + a5) - a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 22
2 18
3 18
4 18
5 18
6 24
7 24
8 24
9 24
10 24
11 25
<<<sep_out_sample>>>
lea (%r8,%rsi,1),%r9d
sub %edi,%r9d
imul %ecx,%r9d
test %esi,%esi
jle 1a <func1+0x1a>
mov %edi,%eax
imul %edi,%eax
add %edx,%eax
add %edi,%eax
jmp 20 <func1+0x20>
lea 0x1(%rdx),%eax
imul %esi,%eax
add %r9d,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (a3 < a1)
        {
            v6 += a4 * a1;
        }
        else
        {
            v6 += a5 - a4 * a2;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        if (v8 < a4)
        {
            v8 += a2 - (a1 * a3);
        }
        else
        {
            v8 += (a2 * a1) + a3;
        }
    }
    v10 = (a5 + a2 - a1) * a4;
    if (v6 < a2)
    {
        v11 = a3 + (a1 * a1) + a1;
    }
    else
    {
        v11 = a2 + a2 * a3;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 28
2 28
3 28
4 29
5 29
6 31
7 31
8 31
9 31
10 31
11 35
12 35
13 37
14 37
15 37
16 37
17 37
18 37
19 38
<<<sep_out_sample>>>
mov %esi,%eax
imul %r8d,%eax
imul %esi,%eax
imul %edi,%eax
lea (%rsi,%rdi,2),%r9d
lea (%r9,%rdx,1),%r9d
add %r9d,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a1 * (a4 + a4);
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += a1 + a4;
    }
    v10 = (a2 * a5) * a2 * a1;
    v11 = ((a1 + a3) + a2) + a1;
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 14
2 14
3 14
4 14
5 15
6 15
7 16
8 16
9 16
10 16
11 16
12 16
13 17
<<<sep_out_sample>>>
mov %esi,%eax
imul %ecx,%eax
mov %eax,%r10d
imul %edx,%r10d
imul %edx,%r10d
add %esi,%eax
lea (%rdx,%rcx,1),%r9d
test %r8d,%r8d
cmovg %eax,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
lea 0x1(%rsi,%rcx,1),%edx
imul %edx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = ((a2 * a4) * a3) * a3;
    if (v7 < a5)
    {
        v7 = a2 + a2 * a4;
    }
    else
    {
        v7 = a4 - a5 + a3 + a5;
    }
    v8 = ((a4 + a2) * a5) + a5;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 4
6 7
7 7
8 7
9 7
10 14
11 14
12 14
13 14
14 14
15 14
16 13
17 13
18 14
19 15
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
imul %edx,%edi
mov %esi,%ecx
sub %edi,%ecx
add %ecx,%eax
imul %r8d,%esi
add %r8d,%edx
add %esi,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a2 < a2)
    {
        v6 = a5 - a4 - a5 * a5;
    }
    else
    {
        v6 = (a2 - a1 * a3) - a4;
    }
    v7 = a2 * a5 + (a3 + a5);
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 13
2 13
3 13
4 10
5 10
6 10
7 13
8 12
9 12
10 12
11 13
12 14
<<<sep_out_sample>>>
mov %r8d,%r11d
sub %edi,%r11d
mov %ecx,%eax
imul %esi,%eax
mov %edx,%r10d
sub %eax,%r10d
add %r8d,%r10d
lea (%r8,%rsi,1),%r9d
cmp %edx,%r8d
jl 2b <func1+0x2b>
mov %edi,%r9d
imul %edi,%r9d
imul %edi,%r9d
sub %esi,%r9d
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a4 - a4 - a1 + a5;
    v7 = (a3 - (a4 * a2)) + a5;
    if (a5 < a3)
    {
        v8 = a5 + a2;
    }
    else
    {
        v8 = (a1 * a1) * a1 - a2;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        v9 += a2 + (a5 * a3);
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 5
4 5
5 5
6 5
7 5
8 8
9 6
10 6
11 12
12 12
13 12
14 12
15 19
16 19
17 19
18 19
19 19
20 19
21 19
22 20
<<<sep_out_sample>>>
lea (%rsi,%rdi,1),%r9d
mov $0x0,%eax
cmp %ecx,%edi
jg 17 <func1+0x17>
mov %ecx,%eax
imul %r8d,%eax
add %edx,%eax
add %edi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a2 + a1;
    if (a4 < a1)
    {
        v7 = a1 - a1;
    }
    else
    {
        v7 = a3 + a4 * a5 + a1;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += a3 - (a5 * a3);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 7
3 5
4 5
5 11
6 11
7 11
8 11
9 18
10 18
11 18
12 18
13 18
14 18
15 19
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
lea 0x1(%rcx,%r8,1),%eax
sub %edi,%ecx
add %ecx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += (a3 + a2) + a4;
    }
    v8 = a2 - (a1 - a4);
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        v9 += a3 - a1;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 15
2 15
3 15
4 15
5 9
6 9
7 15
8 16
<<<sep_out_sample>>>
mov %r8d,%eax
sub %ecx,%eax
cmp %esi,%ecx
jl 15 <func1+0x15>
mov %esi,%r9d
sub %edi,%r9d
lea (%rsi,%rdx,1),%eax
add %r9d,%eax
lea 0x1(%rdi,%rdx,1),%r9d
add %r9d,%esi
add %esi,%r8d
add %r8d,%ecx
add %eax,%ecx
lea (%rdx,%rdi,2),%eax
lea 0x1(%rcx,%rax,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    if (a4 < a2)
    {
        v6 = a5 - a4;
    }
    else
    {
        v6 = a2 - a1 + (a2 + a3);
    }
    v7 = a1 + a3 + a1;
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += a2 + a3 + a1;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a4)
    {
        v10 += a2 - (a3 - a4);
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 6
3 4
4 4
5 10
6 10
7 10
8 10
9 23
10 23
11 23
12 23
13 23
14 12
15 23
16 24
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
mov %r8d,%r9d
sub %edx,%r9d
add %r9d,%eax
sub %esi,%edi
sub %ecx,%r8d
add %r8d,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a5 - a3;
    v7 = a1 - a2 - (a4 - a5);
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 4
7 6
8 5
9 5
10 5
11 6
12 7
<<<sep_out_sample>>>
cmp %ecx,%r8d
jge 1e <func1+0x1e>
mov %ecx,%eax
sub %r8d,%eax
imul %edx,%eax
imul %r8d,%eax
mov %r8d,%r9d
imul %ecx,%r9d
imul %r9d,%r9d
jmp 37 <func1+0x37>
mov %ecx,%eax
sub %edi,%eax
imul %ecx,%eax
sub %r8d,%eax
mov %edi,%r9d
imul %esi,%r9d
imul %edx,%r9d
imul %ecx,%r9d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a3 * a2;
    }
    if (a5 < a4)
    {
        v8 = (a4 - a5) * a3 * a5;
    }
    else
    {
        v8 = ((a4 - a1) * a4) - a5;
    }
    if (a5 < a4)
    {
        v9 = a5 * (a5 * a4) * a4;
    }
    else
    {
        v9 = (a3 * (a1 * a2)) * a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 19
8 19
9 19
10 19
11 15
12 15
13 15
14 15
15 23
16 23
17 23
18 23
19 25
20 25
21 25
22 25
23 25
24 25
25 26
<<<sep_out_sample>>>
lea (%rcx,%rcx,1),%r9d
test %edx,%edx
jle 16 <func1+0x16>
mov %r8d,%eax
imul %ecx,%eax
imul %esi,%eax
add %r8d,%eax
jmp 27 <func1+0x27>
mov %esi,%eax
imul %ecx,%eax
add %r8d,%eax
mov %ecx,%r10d
sub %eax,%r10d
mov %r10d,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    if (a4 < a4)
    {
        v6 = a1 - (a3 + a1);
    }
    else
    {
        v6 = a4 + a4;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a5 * a1 + a3;
    }
    if (v9 < a3)
    {
        v9 = (a5 * a4) * a2 + a5;
    }
    else
    {
        v9 = a4 - (a2 * a4 + a5);
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a2)
    {
        v10 += (a2 * a4) + a2;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 17
3 17
4 19
5 19
6 19
7 19
8 19
9 23
10 23
11 23
12 23
13 23
14 23
15 30
16 30
17 30
18 30
19 30
20 30
21 31
<<<sep_out_sample>>>
lea (%rdi,%rcx,1),%eax
mov %r8d,%r11d
sub %eax,%r11d
imul %r8d,%r11d
test %edi,%edi
jle 1a <func1+0x1a>
mov %esi,%r10d
imul %edi,%r10d
jmp 2a <func1+0x2a>
mov %r8d,%eax
imul %r8d,%eax
imul %edx,%eax
mov %esi,%r10d
sub %eax,%r10d
cmp %edx,%edi
jge 34 <func1+0x34>
lea (%r8,%r8,1),%r9d
jmp 42 <func1+0x42>
mov %esi,%r9d
imul %r8d,%r9d
imul %edi,%r9d
sub %ecx,%r9d
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = (a5 - (a1 + a4)) * a5;
    if (v7 < a1)
    {
        v7 = a2 * a1;
    }
    else
    {
        v7 = a2 - a5 * a5 * a3;
    }
    if (a1 < a3)
    {
        v8 = a5 + a5;
    }
    else
    {
        v8 = a2 * a5 * a1 - a4;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        if (a1 < a4)
        {
            v9 += a2 + a5;
        }
        else
        {
            v9 += a4 - a2;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 5
6 5
7 7
8 7
9 7
10 11
11 11
12 11
13 11
14 11
15 13
16 13
17 15
18 15
19 19
20 19
21 19
22 19
23 33
24 33
25 33
26 33
27 33
28 33
29 33
30 34
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %eax,%ecx
mov %esi,%eax
sub %edi,%eax
add %esi,%eax
imul %edx,%eax
add %eax,%ecx
add %r8d,%edx
add %edx,%esi
lea 0x1(%rcx,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = (a2 - a1 + a2) * a3;
    v7 = a2 + (a3 + a5);
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += a5 - a4;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a2)
    {
        v10 += a3 + a5;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 16
4 16
5 4
6 4
7 4
8 4
9 16
10 5
11 5
12 16
13 17
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %r8d,%esi
add %ecx,%esi
mov %edx,%eax
sub %ecx,%eax
imul %eax,%r8d
imul %r8d,%edx
lea 0x1(%rsi,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = ((a3 - a4) * a5) * a3;
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += (a2 + a5) * a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 4
6 4
7 4
8 4
9 10
10 11
<<<sep_out_sample>>>
lea (%r8,%r8,1),%eax
cmp %edx,%esi
jge 10 <func1+0x10>
lea -0x1(%rdx),%eax
imul %ecx,%eax
add %esi,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a2 < a3)
    {
        v6 = a3 * a4 - a4 + a2;
    }
    else
    {
        v6 = a5 + a5;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += a5 + a2 * a4;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        if (v7 < a3)
        {
            v9 += a1 - a1 + a5;
        }
        else
        {
            v9 += a1 * a4 - a4;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 6
7 29
8 29
9 29
10 29
11 29
12 30
<<<sep_out_sample>>>
lea 0x2(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
sub %edi,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (a1 < a4)
        {
            v6 += (a2 + a3) - a4;
        }
        else
        {
            v6 += a2 * a5;
        }
    }
    v8 = a4 - a1;
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        v9 += a3 * (a1 - a4);
    }
    v11 = 0;
    for (v12 = 0; v12++; v12<a5)
    {
        v11 += a4 + a1 - a5;
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 27
2 27
3 27
4 27
5 16
6 27
7 28
<<<sep_out_sample>>>
mov %ecx,%r11d
imul %ecx,%r11d
lea (%rsi,%r8,2),%r10d
sub %ecx,%r10d
mov %ecx,%r9d
sub %edx,%r9d
cmp %edi,%esi
jl 25 <func1+0x25>
mov %edi,%r9d
sub %ecx,%r9d
imul %edx,%r9d
sub %edi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a2 < a2)
    {
        v6 = a2 + (a4 - a4) - a5;
    }
    else
    {
        v6 = a4 * a4;
    }
    v7 = ((a5 - a4) + a5) + a2;
    if (a2 < a1)
    {
        v8 = a4 - a3;
    }
    else
    {
        v8 = a3 * (a1 - a4) - a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 12
4 12
5 15
6 15
7 13
8 13
9 19
10 19
11 19
12 19
13 21
14 21
15 21
16 21
17 21
18 21
19 21
20 22
<<<sep_out_sample>>>
test %esi,%esi
jle d <func1+0xd>
mov %edi,%r9d
imul %esi,%r9d
jmp 14 <func1+0x14>
mov %ecx,%r9d
imul %r8d,%r9d
mov %r8d,%eax
sub %edx,%eax
cmp %r8d,%ecx
jle 27 <func1+0x27>
mov %edx,%r10d
imul %ecx,%r10d
jmp 31 <func1+0x31>
lea (%rdi,%rdi,1),%r10d
sub %esi,%r10d
sub %ecx,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (v6 < a2)
    {
        v6 = a1 * a2;
    }
    else
    {
        v6 = a4 * a5;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += a4 * a4;
    }
    v9 = a5 - a3;
    if (a5 < a4)
    {
        v10 = a3 * a4;
    }
    else
    {
        v10 = (a1 + a1) - a2 - a4;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 17
9 17
10 18
11 18
12 20
13 20
14 20
15 24
16 24
17 24
18 26
19 26
20 26
21 26
22 26
23 26
24 26
25 27
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
lea 0x1(%rcx,%rax,1),%eax
sub %r8d,%edi
imul %edx,%esi
add %esi,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a2 - a2 * a5;
    }
    v8 = a1 - a5 + a2 * a3;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 9
6 9
7 9
8 10
9 11
<<<sep_out_sample>>>
mov $0x0,%eax
cmp %ecx,%esi
jge 19 <func1+0x19>
mov %ecx,%eax
imul %edx,%eax
mov %r8d,%r9d
sub %eax,%r9d
mov %r9d,%eax
add %ecx,%eax
add %edi,%edx
add %esi,%edx
add %edx,%r8d
add %r8d,%ecx
add %ecx,%eax
mov $0x1,%edx
sub %edi,%edx
imul %edx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a2 < a4)
    {
        v6 = a5 - a4 * a3 + a4;
    }
    else
    {
        v6 = (a3 * (a5 - a5)) * a1;
    }
    v7 = a2 - a2 * a1;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 6
7 6
8 6
9 6
10 13
11 13
12 13
13 13
14 13
15 12
16 12
17 12
18 13
19 14
<<<sep_out_sample>>>
test %esi,%esi
jle 11 <func1+0x11>
mov %edi,%eax
sub %esi,%eax
add $0x1,%eax
imul %r8d,%eax
jmp 19 <func1+0x19>
mov %edx,%eax
imul %r8d,%eax
add %esi,%eax
lea 0x2(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (a5 < a5)
        {
            v6 += a3 - a4;
        }
        else
        {
            v6 += (a4 * a4) - a3;
        }
    }
    if (v8 < a2)
    {
        v8 = (a1 - a2) * a5 + a5;
    }
    else
    {
        v8 = a3 * a5 + a2;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a1)
    {
        v9 += a4 + a1;
    }
    v11 = 0;
    for (v12 = 0; v12++; v12<a1)
    {
        v11 += a4 + a3;
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 18
7 18
8 22
9 22
10 22
11 34
12 34
13 34
14 34
15 34
16 35
<<<sep_out_sample>>>
add %edi,%edx
add %edx,%esi
add %r8d,%esi
add %esi,%ecx
imul %r8d,%edi
lea 0x1(%rcx,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a1 * a5;
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        if (a4 < a2)
        {
            v7 += a3 - a4;
        }
        else
        {
            v7 += a1 * a1 * a1;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 4
6 17
7 18
<<<sep_out_sample>>>
lea (%r8,%rdx,1),%r9d
cmp %edi,%r9d
jge 1c <func1+0x1c>
mov $0x1,%r10d
sub %ecx,%r10d
imul %esi,%r10d
imul %ecx,%r10d
jmp 29 <func1+0x29>
mov %edx,%r10d
sub %edi,%r10d
sub %edi,%r10d
imul %r8d,%r10d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
lea (%r9,%r10,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a3 < a3)
    {
        v6 = a1 * a3 * a3 + a5;
    }
    else
    {
        v6 = a5 + a3;
    }
    if (v6 < a1)
    {
        v7 = (a2 - (a2 * a4)) * a4;
    }
    else
    {
        v7 = (a3 - a1 - a1) * a5;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 10
2 12
3 12
4 14
5 14
6 14
7 14
8 14
9 18
10 18
11 18
12 18
13 20
14 20
15 20
16 20
17 20
18 20
19 21
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
imul %edi,%edi
add %edi,%ecx
sub %ecx,%r8d
add %eax,%r8d
add %esi,%edx
imul %edx,%esi
lea 0x1(%r8,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a4 < a4)
    {
        v6 = (a1 - a2) - a5 + a5;
    }
    else
    {
        v6 = a5 - (a1 * a1 + a4);
    }
    v7 = (a3 + a2) * a2;
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        if (a2 < a3)
        {
            v8 += a2 + (a3 - a5);
        }
        else
        {
            v8 += a1 - a4 * a4;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 25
2 25
3 25
4 25
5 10
6 10
7 10
8 25
9 12
10 12
11 25
12 26
<<<sep_out_sample>>>
mov %r8d,%eax
sub %edi,%eax
cmp %ecx,%edx
jge 12 <func1+0x12>
mov %esi,%eax
imul %edi,%eax
sub %ecx,%eax
sub %edx,%eax
mov %edx,%r9d
imul %edx,%r9d
mov %edi,%r10d
sub %r9d,%r10d
lea (%r8,%rdi,1),%r9d
cmp %esi,%ecx
cmovge %esi,%r9d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %ecx,%r8d
add %r8d,%eax
add %r10d,%eax
add %r9d,%eax
add %ecx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a3 < a4)
    {
        v6 = ((a2 * a1) - a4) - a3;
    }
    else
    {
        v6 = a5 - a1;
    }
    if (a3 < a3)
    {
        v7 = a5 * a3;
    }
    else
    {
        v7 = a1 - (a3 * a3);
    }
    if (a4 < a2)
    {
        v8 = a5 + a1;
    }
    else
    {
        v8 = a1 + a2 - a1;
    }
    v9 = a4 + a1;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 4
4 4
5 6
6 6
7 6
8 6
9 18
10 18
11 18
12 18
13 22
14 22
15 22
16 29
17 29
18 29
19 29
20 29
21 29
22 29
23 28
24 29
25 30
<<<sep_out_sample>>>
lea (%r8,%rcx,1),%eax
test %r8d,%r8d
jle f <func1+0xf>
lea (%rcx,%rdi,1),%eax
imul %edx,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a4 - a4 + a4;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        if (a5 < a4)
        {
            v8 += (a2 + a4) + a3;
        }
        else
        {
            v8 += a4 * a2 * a5;
        }
    }
    if (v10 < a5)
    {
        v10 = a3 * (a4 + a1);
    }
    else
    {
        v10 = a5 + (a1 - a1 + a4);
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 27
2 21
3 21
4 23
5 23
6 29
7 29
8 29
9 29
10 29
11 30
<<<sep_out_sample>>>
mov %ecx,%r11d
imul %edx,%r11d
sub $0x1,%r11d
imul %edi,%r11d
lea (%rcx,%r8,1),%r10d
imul %esi,%r10d
sub %edx,%r10d
mov %esi,%r9d
imul %r8d,%r9d
imul %esi,%r9d
sub %edi,%r9d
test %r8d,%r8d
jle 3b <func1+0x3b>
mov %r8d,%eax
imul %edi,%eax
imul %r8d,%eax
sub %esi,%eax
jmp 45 <func1+0x45>
mov $0x1,%eax
sub %edx,%eax
imul %edx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r11d,%ecx
add %r10d,%ecx
add %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = (a4 * a3 * a1) - a1;
    v7 = ((a4 + a5) * a2) - a3;
    v8 = (a2 * a5) * a2 - a1;
    if (v9 < a5)
    {
        v9 = (a5 * a1 * a5) - a2;
    }
    else
    {
        v9 = a3 - a3 * a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 5
6 5
7 5
8 6
9 6
10 6
11 6
12 7
13 7
14 9
15 9
16 9
17 9
18 9
19 13
20 13
21 13
22 15
23 15
24 15
25 15
26 15
27 15
28 15
29 15
30 16
<<<sep_out_sample>>>
mov $0x0,%eax
cmp %r8d,%ecx
jge 17 <func1+0x17>
mov %esi,%eax
imul %r8d,%eax
lea (%rcx,%r8,1),%r9d
sub %r9d,%eax
lea (%rdi,%rdx,1),%r9d
add %esi,%r9d
add %r8d,%r9d
add %r9d,%ecx
add %ecx,%eax
lea (%rsi,%rdi,1),%ecx
mov %r8d,%r9d
sub %ecx,%r9d
add %edx,%r9d
add %r9d,%eax
imul %edi,%esi
sub $0x1,%esi
imul %r8d,%esi
add %esi,%eax
sub %edi,%r8d
add %r8d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a4 < a5)
    {
        v6 = a2 * a5 - (a4 + a5);
    }
    else
    {
        v6 = a3 - a3;
    }
    v7 = a3 - (a2 + a1 - a5);
    v8 = a5 * (a1 * a2) - a5;
    v9 = a5 - a1 + a3;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 6
7 6
8 15
9 15
10 15
11 15
12 15
13 12
14 12
15 12
16 12
17 15
18 13
19 13
20 13
21 15
22 14
23 14
24 15
25 16
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
lea (%r8,%rcx,1),%eax
add %ecx,%edx
imul %edx,%esi
lea 0x1(%rax,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a4 * a2 + a2 * a3;
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        if (v6 < a3)
        {
            v7 += a5 - a4;
        }
        else
        {
            v7 += a4 - (a1 * a1);
        }
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        v9 += a5 + a5;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 22
4 22
5 4
6 4
7 22
8 23
<<<sep_out_sample>>>
push %rbx
cmp %edx,%ecx
jge b <func1+0xb>
mov %edx,%ebx
neg %ebx
jmp 14 <func1+0x14>
mov %esi,%ebx
sub %edx,%ebx
imul %edi,%ebx
sub %edx,%ebx
lea (%rcx,%rcx,1),%r11d
cmp %edi,%edx
jle 2e <func1+0x2e>
mov $0x1,%r10d
sub %r8d,%r10d
imul %r8d,%r10d
sub %esi,%r10d
jmp 3b <func1+0x3b>
mov %ecx,%r10d
imul %ecx,%r10d
add %r8d,%r10d
sub %esi,%r10d
cmp %esi,%edx
jge 48 <func1+0x48>
mov %ecx,%r9d
imul %r8d,%r9d
jmp 4f <func1+0x4f>
mov %r8d,%r9d
imul %edi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %ebx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a4 < a3)
    {
        v6 = a2 * (a1 - a1) - a3;
    }
    else
    {
        v6 = ((a2 - a3) * a1) - a3;
    }
    v7 = a4 + a4;
    if (a1 < a3)
    {
        v8 = (a5 - a5 * a5) - a2;
    }
    else
    {
        v8 = a5 + a4 * a4 - a2;
    }
    if (a3 < a2)
    {
        v9 = a4 * a5;
    }
    else
    {
        v9 = a5 * a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 4
3 4
4 6
5 6
6 6
7 10
8 10
9 10
10 10
11 12
12 13
13 13
14 15
15 15
16 15
17 15
18 15
19 19
20 19
21 19
22 19
23 21
24 21
25 23
26 23
27 23
28 27
29 27
30 29
31 29
32 29
33 29
34 29
35 29
36 29
37 29
38 30
39 30
<<<sep_out_sample>>>
mov %ecx,%r9d
cmp %r8d,%edi
jl 14 <func1+0x14>
mov %edx,%r9d
sub %ecx,%r9d
sub %ecx,%r9d
add %edi,%r9d
cmp %edx,%r8d
jle 26 <func1+0x26>
mov %r8d,%r10d
imul %r8d,%r10d
imul %edi,%r10d
jmp 35 <func1+0x35>
mov %r8d,%eax
imul %esi,%eax
imul %edi,%eax
mov %esi,%r10d
sub %eax,%r10d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
lea (%r9,%r10,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a1 < a5)
    {
        v6 = a4 + (a3 - a3);
    }
    else
    {
        v6 = ((a3 - a4) - a4) + a1;
    }
    if (a3 < a5)
    {
        v7 = a5 * a5 * a1;
    }
    else
    {
        v7 = a2 - a5 * a2 * a1;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 4
3 4
4 10
5 10
6 10
7 10
8 12
9 12
10 14
11 14
12 14
13 14
14 18
15 18
16 18
17 18
18 18
19 20
20 20
21 20
22 20
23 20
24 20
25 21
<<<sep_out_sample>>>
cmp %ecx,%edi
jge 13 <func1+0x13>
mov %ecx,%r10d
sub %esi,%r10d
sub %r8d,%r10d
imul %edx,%r10d
jmp 1f <func1+0x1f>
mov %esi,%r10d
sub %edi,%r10d
sub %edx,%r10d
add %r8d,%r10d
mov $0x0,%eax
cmp %edx,%edi
jle 33 <func1+0x33>
mov %edx,%eax
sub %r8d,%eax
add $0x1,%eax
imul %edx,%eax
lea (%rcx,%rcx,1),%r9d
sub %edx,%r9d
cmp %r8d,%esi
jle 4c <func1+0x4c>
mov %r8d,%r9d
imul %edi,%r9d
sub %edx,%r9d
add %esi,%r9d
add %edi,%edx
add %esi,%edx
add %edx,%r8d
add %r8d,%ecx
add %r10d,%ecx
add %ecx,%eax
add %eax,%r9d
imul %edi,%edi
sub %esi,%edi
lea (%r9,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a1 < a4)
    {
        v6 = ((a4 - a2) - a5) * a3;
    }
    else
    {
        v6 = (a2 - a1) - a3 + a5;
    }
    if (a3 < a1)
    {
        v7 = a3 - ((a5 - a3) * a3);
    }
    else
    {
        v7 = a3 - a3;
    }
    if (a5 < a2)
    {
        v8 = a5 * a1 - a3 + a2;
    }
    else
    {
        v8 = a4 + a4 - a3;
    }
    v9 = a1 * a1 - a2;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 18
13 12
14 12
15 14
16 14
17 14
18 14
19 26
20 26
21 20
22 20
23 22
24 22
25 22
26 22
27 29
28 29
29 29
30 29
31 29
32 29
33 29
34 28
35 28
36 29
37 30
<<<sep_out_sample>>>
cmp %esi,%ecx
jge 13 <func1+0x13>
mov %esi,%eax
sub %r8d,%eax
imul %r8d,%eax
imul %r8d,%eax
jmp 20 <func1+0x20>
mov %r8d,%eax
imul %r8d,%eax
sub %esi,%eax
imul %r8d,%eax
add %edi,%edx
add %esi,%edx
add %edx,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
imul %esi,%edi
sub $0x1,%edi
imul %edi,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a4 < a2)
    {
        v6 = (a2 - a5) * a5 * a5;
    }
    else
    {
        v6 = (a5 * a5 - a2) * a5;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        if (v8 < a2)
        {
            v7 += a1 - a3 + a3;
        }
        else
        {
            v7 += a5 + a4;
        }
    }
    v9 = ((a1 * a2) * a2) - a2;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 25
13 25
14 25
15 25
16 25
17 24
18 24
19 24
20 25
21 26
<<<sep_out_sample>>>
cmp %ecx,%edi
jge a <func1+0xa>
lea (%rsi,%rsi,1),%r10d
jmp 19 <func1+0x19>
mov %ecx,%r10d
imul %edx,%r10d
imul %ecx,%r10d
imul %esi,%r10d
mov %esi,%eax
sub %r8d,%eax
mov %ecx,%r9d
sub %esi,%r9d
cmp %esi,%edi
cmovg %eax,%r9d
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
add %ecx,%esi
add %r10d,%esi
add %r9d,%esi
sub %edx,%edi
sub %ecx,%edi
sub %r8d,%edi
lea (%rsi,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a1 < a4)
    {
        v6 = (a4 - a4 + a2) + a2;
    }
    else
    {
        v6 = a2 * ((a4 * a3) * a4);
    }
    if (a2 < a1)
    {
        v7 = (a2 - (a5 + a2)) + a2;
    }
    else
    {
        v7 = a4 - a2;
    }
    v8 = a1 - a3 - a4 - a5;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 10
6 10
7 10
8 10
9 14
10 14
11 14
12 14
13 14
14 14
15 21
16 21
17 21
18 21
19 21
20 21
21 20
22 20
23 20
24 21
25 22
<<<sep_out_sample>>>
add %edx,%edi
add %esi,%edi
add %edi,%r8d
add %r8d,%ecx
add %edx,%esi
imul %esi,%edx
lea 0x1(%rcx,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = (a3 * a2) + a3 * a3;
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        if (a2 < a2)
        {
            v7 += a2 * a3 * a1;
        }
        else
        {
            v7 += (a1 - a3) * a3;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 4
6 4
7 17
8 18
<<<sep_out_sample>>>
lea (%rsi,%rdx,1),%r10d
sub %r8d,%r10d
sub %ecx,%r10d
mov %edi,%r9d
imul %r8d,%r9d
test %edi,%edi
jle 23 <func1+0x23>
mov %edx,%eax
sub %r8d,%eax
imul %r8d,%eax
imul %edi,%eax
jmp 32 <func1+0x32>
mov %edx,%r11d
imul %edx,%r11d
mov %r8d,%eax
sub %edi,%eax
add %r11d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r10d,%ecx
add %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = (a2 + a3 - a5) - a4;
    v7 = a1 * a5;
    if (v8 < a1)
    {
        v8 = (a5 * (a3 - a5)) * a1;
    }
    else
    {
        v8 = (a3 * a3) + (a5 - a1);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 5
5 5
6 6
7 6
8 8
9 8
10 8
11 8
12 8
13 12
14 12
15 12
16 12
17 12
18 14
19 14
20 14
21 14
22 14
23 14
24 14
25 15
<<<sep_out_sample>>>
test %edx,%edx
jle 11 <func1+0x11>
mov %edi,%eax
sub %edx,%eax
add $0x1,%eax
imul %r8d,%eax
jmp 16 <func1+0x16>
mov %edx,%eax
imul %ecx,%eax
mov %ecx,%r9d
sub %esi,%r9d
sub %edi,%r9d
cmp %r8d,%edx
jle 32 <func1+0x32>
mov %esi,%r9d
imul %ecx,%r9d
add %edi,%r9d
imul %r8d,%r9d
lea 0x1(%r9,%rdi,1),%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a3 + a4 * a1;
    }
    if (v8 < a3)
    {
        v8 = ((a1 - a3) * a5) + a5;
    }
    else
    {
        v8 = a3 * a4;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        v9 += a3 - a3;
    }
    if (a5 < a3)
    {
        v11 = (a1 + a2 * a4) * a5;
    }
    else
    {
        v11 = a4 - a2 - a1;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 11
8 15
9 15
10 28
11 28
12 28
13 22
14 22
15 24
16 24
17 24
18 24
19 30
20 30
21 30
22 30
23 30
24 30
25 31
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a4 * a1 - a2;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        if (a1 < a5)
        {
            v8 += a5 + a3 - a2;
        }
        else
        {
            v8 += a2 * a3;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 21
5 22
<<<sep_out_sample>>>
mov $0x0,%eax
mov %edi,%r9d
imul %r8d,%r9d
cmp %r8d,%esi
cmovge %r9d,%eax
test %ecx,%ecx
jle 2a <func1+0x2a>
mov %edx,%r9d
imul %r8d,%r9d
mov %esi,%r10d
sub %r9d,%r10d
imul %edx,%r10d
jmp 37 <func1+0x37>
mov %esi,%r10d
sub %ecx,%r10d
add %esi,%r10d
imul %ecx,%r10d
mov %esi,%r9d
sub %edx,%r9d
cmp %edi,%esi
jge 4e <func1+0x4e>
mov %ecx,%r9d
imul %edi,%r9d
add %r8d,%r9d
add %ecx,%r9d
add %r9d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%eax
lea 0x1(%r10,%rax,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a2 < a5)
    {
        v6 = (a2 + a3 - a3) - a2;
    }
    else
    {
        v6 = a1 * a5;
    }
    if (v7 < a4)
    {
        v7 = (a2 - (a3 * a5)) * a3;
    }
    else
    {
        v7 = ((a2 - a4) + a2) * a4;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += (a3 - a3) * a5;
    }
    if (a2 < a1)
    {
        v10 = a4 * a1 + a5 + a4;
    }
    else
    {
        v10 = a2 - a3;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 10
3 10
4 10
5 10
6 12
7 12
8 14
9 14
10 14
11 14
12 14
13 14
14 18
15 18
16 18
17 18
18 31
19 31
20 25
21 25
22 27
23 27
24 27
25 27
26 33
27 33
28 33
29 33
30 33
31 33
32 33
33 34
<<<sep_out_sample>>>
test %edx,%edx
jle d <func1+0xd>
lea (%rdx,%rcx,2),%eax
imul %r8d,%eax
jmp 12 <func1+0x12>
lea (%rdi,%rcx,2),%eax
sub %edx,%eax
add %edx,%edi
add %esi,%edi
add %edi,%r8d
add %r8d,%ecx
add %ecx,%eax
lea 0x1(%rsi),%ecx
imul %ecx,%esi
add %esi,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (v6 < a3)
    {
        v6 = a5 * (a4 + (a4 + a3));
    }
    else
    {
        v6 = a4 + a4 + a1 - a3;
    }
    v7 = a2 * a2 + a2 + a3;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 13
9 13
10 13
11 13
12 13
13 12
14 12
15 12
16 13
17 14
<<<sep_out_sample>>>
add %edi,%edx
add %edx,%esi
add %r8d,%esi
add %esi,%ecx
imul %edi,%edi
imul %edi,%r8d
lea 0x1(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a1 * a1 * a5;
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += (a4 - a2) - a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 4
6 4
7 10
8 11
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %edx,%r8d
add $0x1,%edi
imul %edi,%esi
lea (%r8,%rcx,2),%eax
lea 0x1(%rax,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (a5 < a5)
        {
            v6 += a2 * a1 * a2;
        }
        else
        {
            v6 += a2 + a4;
        }
    }
    v8 = a1 * a2 + a2 + a4;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 16
5 16
6 16
7 17
8 18
<<<sep_out_sample>>>
mov %edx,%r10d
imul %edi,%r10d
add %ecx,%r10d
add %esi,%r10d
mov %edi,%eax
sub %esi,%eax
cmp %r8d,%edx
jge 1f <func1+0x1f>
mov %edx,%eax
sub %ecx,%eax
add %esi,%eax
add %r8d,%eax
lea (%rdi,%rdx,1),%r9d
add %esi,%r9d
add %r8d,%r9d
add %ecx,%r9d
add %r10d,%r9d
add %r9d,%eax
lea (%r8,%rdx,1),%r9d
add %r9d,%esi
imul %edi,%esi
add %esi,%eax
imul %ecx,%edx
sub %edx,%r8d
add %r8d,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a2 + (a4 + a3 * a1);
    if (a3 < a5)
    {
        v7 = a5 - (a4 - a3 - a2);
    }
    else
    {
        v7 = a5 + a1 - a2 - a5;
    }
    v8 = a1 * (a5 + a3 + a2);
    v9 = a1 - (a3 * a4 - a5);
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 11
6 11
7 5
8 5
9 7
10 7
11 7
12 7
13 15
14 15
15 15
16 15
17 15
18 15
19 13
20 13
21 13
22 15
23 14
24 14
25 14
26 15
27 16
<<<sep_out_sample>>>
mov $0x0,%eax
cmp $0x1,%ecx
jg 1b <func1+0x1b>
mov %edi,%eax
imul %r8d,%eax
mov %edx,%r10d
sub %eax,%r10d
mov %r10d,%eax
add %esi,%eax
lea (%rsi,%rdi,2),%r9d
add %r9d,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%esi
add %esi,%eax
add %edx,%edi
sub %ecx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a2 + a4 - a5;
    }
    if (v7 < a4)
    {
        v8 = a2 - (a2 - a1) - a1;
    }
    else
    {
        v8 = a3 - a1 * a5 + a2;
    }
    v9 = (a3 + a1) - a4;
    if (a4 < a4)
    {
        v10 = a5 * (a3 * a2) + a1;
    }
    else
    {
        v10 = a1 + (a2 - a3);
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 9
3 9
4 15
5 15
6 15
7 15
8 15
9 15
10 26
11 26
12 26
13 26
14 26
15 17
16 17
17 26
18 27
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %r8d,%esi
add %ecx,%esi
lea (%rsi,%rcx,2),%eax
imul %edx,%r8d
add %r8d,%ecx
sub %edx,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a4 + a4;
    if (a1 < a1)
    {
        v7 = a1 * a2 - (a4 + a4);
    }
    else
    {
        v7 = a4 + a3 * a5 - a3;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += a1 * a4 - a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 18
5 18
6 11
7 11
8 11
9 18
10 19
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
add %ecx,%esi
sub %edi,%ecx
lea (%rcx,%r8,2),%eax
lea 0x1(%rsi,%rax,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = (a4 - a1) + a5 + a5;
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        if (v8 < a5)
        {
            v7 += a5 * (a1 - a1);
        }
        else
        {
            v7 += a3 - a5 - a2;
        }
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        v9 += a3 * (a3 + a3);
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 22
4 22
5 4
6 4
7 22
8 23
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
mov %esi,%edx
imul %esi,%edx
imul %ecx,%edx
add %edx,%r8d
add %r8d,%eax
mov $0x1,%edx
sub %ecx,%edx
imul %edx,%edi
add %edi,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = ((a2 * a2) * a4) + a5;
    v7 = (a1 - a4 * a1) + a2;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 4
7 4
8 4
9 6
10 5
11 5
12 5
13 5
14 6
15 7
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
add %ecx,%esi
sub %edx,%ecx
add %ecx,%edi
imul %edi,%r8d
lea 0x1(%rsi,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = (a4 - a3 + a1) * a5;
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += a3 * a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 4
6 4
7 4
8 10
9 11
<<<sep_out_sample>>>
mov $0x0,%eax
cmp %r8d,%esi
jl 15 <func1+0x15>
mov %r8d,%eax
imul %ecx,%eax
sub %edi,%eax
add %r8d,%eax
lea 0x1(%rax,%rdi,1),%eax
add %eax,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a3 - a1 + a4;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        if (v7 < a2)
        {
            v8 += a3 + a4 * a2;
        }
        else
        {
            v8 += a5 * a2 - a5;
        }
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a5)
    {
        v10 += a4 * a5 - a1;
    }
    if (a2 < a5)
    {
        v12 = a5 * (a2 * (a1 - a1));
    }
    else
    {
        v12 = a5 + (a5 * a4 - a1);
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 28
2 26
3 26
4 32
5 32
6 32
7 32
8 34
9 34
10 34
11 34
12 34
13 35
<<<sep_out_sample>>>
lea (%rdx,%rdi,1),%eax
lea (%rdx,%rcx,1),%r9d
cmp %esi,%edx
cmovge %r9d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a3 < a2)
    {
        v6 = a3 + a1;
    }
    else
    {
        v6 = (a3 + a5 - a5) + a4;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += a1 - a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 17
6 17
7 17
8 17
9 17
10 18
<<<sep_out_sample>>>
mov %r8d,%eax
imul %r8d,%eax
lea 0x1(%rdi,%rax,1),%eax
add %eax,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rdi,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (a3 < a5)
        {
            v6 += a2 * (a1 + a5);
        }
        else
        {
            v6 += (a3 - a4) * a1;
        }
    }
    v8 = a1 - a4;
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        v9 += a5 * a2;
    }
    v11 = a5 * a5;
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 23
4 23
5 23
6 23
7 23
8 24
<<<sep_out_sample>>>
mov %ecx,%r9d
imul %ecx,%r9d
lea (%r8,%rdi,1),%eax
imul %eax,%r9d
mov $0x0,%eax
cmp %esi,%ecx
jle 22 <func1+0x22>
mov %ecx,%eax
imul %edx,%eax
imul %edx,%eax
add %edi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a5 < a5)
    {
        v6 = a5 - (a1 * a5) * a2;
    }
    else
    {
        v6 = a4 * a4 * (a5 + a1);
    }
    if (a2 < a4)
    {
        v7 = (a4 * a3 * a3) + a1;
    }
    else
    {
        v7 = a5 - a5;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 18
6 12
7 12
8 14
9 14
10 14
11 14
12 20
13 20
14 20
15 20
16 20
17 20
18 21
<<<sep_out_sample>>>
lea (%rsi,%r8,1),%r10d
cmp %esi,%edx
jl f <func1+0xf>
lea (%r8,%rcx,2),%r10d
sub %edi,%r10d
lea (%rcx,%rdi,1),%r9d
cmp %r8d,%edx
cmovl %ecx,%r9d
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
add %r8d,%edx
imul %edx,%esi
imul %esi,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a3 < a2)
    {
        v6 = (a2 - a4 + a4) + a5;
    }
    else
    {
        v6 = a5 + a4 + a4 - a1;
    }
    if (a3 < a5)
    {
        v7 = a4 - a1 + a1;
    }
    else
    {
        v7 = a4 + a1;
    }
    v8 = (a2 * (a3 + a5)) * a1;
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        v9 += (a2 + a5) - a3;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 4
3 4
4 10
5 10
6 18
7 18
8 18
9 26
10 26
11 26
12 26
13 26
14 26
15 20
16 20
17 20
18 26
19 27
<<<sep_out_sample>>>
mov %ecx,%r9d
imul %edi,%r9d
lea (%rcx,%rdi,1),%eax
cmp %r8d,%edi
jl 15 <func1+0x15>
mov %ecx,%eax
imul %r8d,%eax
mov %edi,%r10d
sub %edx,%r10d
imul %edx,%r10d
sub %ecx,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a4 * a1;
    if (a1 < a5)
    {
        v7 = (a4 + a2) - a2 + a1;
    }
    else
    {
        v7 = a4 * a5;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        if (v8 < a1)
        {
            v8 += a3 + a4;
        }
        else
        {
            v8 += a3 * a4;
        }
    }
    v10 = (a3 * (a1 - a3)) - a4;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 7
4 5
5 5
6 11
7 11
8 25
9 25
10 25
11 25
12 26
13 26
14 26
15 26
16 26
17 26
18 26
19 27
<<<sep_out_sample>>>
cmp %r8d,%edi
jle 15 <func1+0x15>
mov %esi,%r9d
imul %r8d,%r9d
imul %edi,%r9d
add %edx,%r9d
jmp 1c <func1+0x1c>
lea (%rdx,%rcx,2),%r9d
add %esi,%r9d
cmp %esi,%edi
jge 28 <func1+0x28>
lea (%rcx,%rsi,2),%eax
sub %r8d,%eax
jmp 35 <func1+0x35>
mov %edi,%eax
imul %r8d,%eax
imul %ecx,%eax
imul %r8d,%eax
add %r9d,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (a4 < a1)
        {
            v6 += (a2 - a3) + a1;
        }
        else
        {
            v6 += a2 * a5;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += a2 * (a3 - a4);
    }
    if (a5 < a1)
    {
        v10 = (a2 * a5 * a1) + a3;
    }
    else
    {
        v10 = a4 + (a3 + a4) + a2;
    }
    if (a1 < a2)
    {
        v11 = a4 + a2 + a2 - a5;
    }
    else
    {
        v11 = (a1 * a5) * a4 * a5;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 23
4 23
5 23
6 23
7 23
8 27
9 27
10 29
11 29
12 31
13 31
14 31
15 35
16 35
17 35
18 35
19 37
20 37
21 37
22 37
23 37
24 37
25 38
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
add %ecx,%esi
imul %r8d,%ecx
imul %edi,%ecx
add %esi,%ecx
mov %edi,%eax
sub %edx,%eax
imul %eax,%edi
add %edi,%edx
lea 0x1(%rcx,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = a4 * a5 * a1;
    if (a2 < a2)
    {
        v7 = (a1 * a1 - a2) * a4;
    }
    else
    {
        v7 = a3 - (a3 - a1) * a1;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += (a1 + a1) - a3;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a3)
    {
        if (a4 < a5)
        {
            v10 += a1 * (a4 - a4);
        }
        else
        {
            v10 += (a5 - a4) + a2;
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 30
2 30
3 30
4 30
5 4
6 4
7 30
8 11
9 11
10 11
11 11
12 30
13 31
<<<sep_out_sample>>>
cmp %r8d,%edx
jle 14 <func1+0x14>
lea (%rdi,%rdx,1),%eax
mov %edx,%r9d
imul %ecx,%r9d
sub %r9d,%eax
jmp 1d <func1+0x1d>
lea -0x1(%rdi),%eax
imul %edi,%eax
imul %esi,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a4 * a3 + a4;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        if (v8 < a2)
        {
            v8 += a4 * (a4 * a5);
        }
        else
        {
            v8 += a1 - (a5 - a1);
        }
    }
    if (a5 < a3)
    {
        v10 = (a1 + a3) - a3 * a4;
    }
    else
    {
        v10 = (a1 * a1 - a1) * a2;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 23
4 23
5 23
6 23
7 23
8 27
9 27
10 27
11 29
12 29
13 29
14 29
15 29
16 30
<<<sep_out_sample>>>
mov %esi,%eax
imul %edi,%eax
mov %edx,%r9d
sub %eax,%r9d
sub %r8d,%r9d
cmp %r9d,%edx
jle 25 <func1+0x25>
mov $0x1,%r11d
sub %r8d,%r11d
imul %edi,%r11d
add %esi,%r11d
jmp 2c <func1+0x2c>
mov %edi,%r11d
imul %edx,%r11d
cmp %ecx,%r9d
jge 3d <func1+0x3d>
lea (%rdi,%rdi,1),%r10d
sub %ecx,%r10d
sub %esi,%r10d
jmp 48 <func1+0x48>
mov %ecx,%r10d
imul %r8d,%r10d
imul %r10d,%r10d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
add %r11d,%eax
add %r10d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a3 - (a2 * a1) - a5;
    if (v6 < a3)
    {
        v7 = (a1 - a5 * a1) + a2;
    }
    else
    {
        v7 = a3 * ((a1 - a3) + a3);
    }
    if (v6 < a4)
    {
        v8 = (a1 + a1 - a4) - a2;
    }
    else
    {
        v8 = a5 * (a4 * a4 * a5);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 4
6 5
7 5
8 7
9 7
10 7
11 7
12 7
13 11
14 11
15 13
16 13
17 15
18 15
19 15
20 15
21 19
22 19
23 19
24 21
25 21
26 21
27 21
28 21
29 21
30 21
31 22
<<<sep_out_sample>>>
push %rbx
mov %ecx,%r10d
imul %edi,%r10d
cmp %edx,%r10d
jge 16 <func1+0x16>
lea (%rsi,%rdx,2),%r9d
sub %r8d,%r9d
jmp 1d <func1+0x1d>
mov %edi,%r9d
imul %edi,%r9d
mov %esi,%ebx
sub %edx,%ebx
cmp %edx,%r9d
mov $0x0,%eax
cmovge %eax,%ebx
cmp %esi,%edi
jle 3f <func1+0x3f>
mov %edx,%r11d
sub %ecx,%r11d
imul %edx,%r11d
sub %edi,%r11d
jmp 4b <func1+0x4b>
mov %edi,%r11d
sub %ecx,%r11d
sub %edx,%r11d
add %edi,%r11d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
add %ebx,%eax
add %r11d,%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a4 * a1;
    if (v6 < a3)
    {
        v7 = (a2 + a3) + a3 - a5;
    }
    else
    {
        v7 = a1 * a1;
    }
    if (v7 < a3)
    {
        v8 = a2 - a3;
    }
    else
    {
        v8 = a1 - a1;
    }
    if (a2 < a1)
    {
        v9 = (a3 * (a3 - a4)) - a1;
    }
    else
    {
        v9 = ((a1 - a4) - a3) + a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 4
3 4
4 5
5 5
6 7
7 7
8 7
9 11
10 11
11 15
12 15
13 15
14 15
15 15
16 21
17 21
18 23
19 23
20 23
21 23
22 23
23 27
24 27
25 27
26 27
27 29
28 29
29 29
30 29
31 29
32 29
33 29
34 29
35 30
36 30
<<<sep_out_sample>>>
mov %edx,%r9d
sub %edi,%r9d
cmp %esi,%r9d
jge 1a <func1+0x1a>
mov %edi,%r10d
sub %ecx,%r10d
add %r8d,%r10d
imul %ecx,%r10d
jmp 27 <func1+0x27>
lea (%rdi,%r8,1),%r10d
mov %edx,%eax
imul %r8d,%eax
add %eax,%r10d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
lea (%r9,%r10,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a3 - a1;
    if (v6 < a2)
    {
        v7 = (a1 - a4 + a5) * a4;
    }
    else
    {
        v7 = a1 + a5 + a3 * a5;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 5
4 5
5 7
6 7
7 7
8 7
9 7
10 11
11 11
12 11
13 11
14 13
15 13
16 13
17 13
18 13
19 13
20 14
<<<sep_out_sample>>>
add %edx,%edi
add %esi,%edi
add %r8d,%edi
lea 0x1(%rcx,%rdi,1),%ecx
mov %r8d,%eax
sub %esi,%eax
add %ecx,%eax
imul %edx,%r8d
sub %r8d,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a1 - a3;
    }
    if (a5 < a5)
    {
        v8 = (a2 - a5 * a3) - a4;
    }
    else
    {
        v8 = a3 - a2 - a3 + a5;
    }
    if (a2 < a2)
    {
        v9 = (a3 * a4) - a1 * a3;
    }
    else
    {
        v9 = a2 - a3 * a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 25
2 25
3 25
4 25
5 15
6 15
7 25
8 23
9 23
10 25
11 26
<<<sep_out_sample>>>
mov $0x1,%r10d
sub %esi,%r10d
imul %r8d,%r10d
cmp %edi,%esi
jge 1a <func1+0x1a>
mov %edx,%r9d
imul %r8d,%r9d
jmp 26 <func1+0x26>
mov %edi,%r9d
sub %esi,%r9d
add %edi,%r9d
add %edx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a5 - a2 * a5;
    if (a2 < a1)
    {
        v7 = a3 * a5;
    }
    else
    {
        v7 = a1 - a2 + a1 + a3;
    }
    v8 = (a5 - a5) * a1;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 5
5 5
6 7
7 7
8 7
9 11
10 11
11 11
12 11
13 14
14 14
15 14
16 14
17 14
18 14
19 15
<<<sep_out_sample>>>
mov %ecx,%r10d
imul %edx,%r10d
cmp %r8d,%edx
jle 1b <func1+0x1b>
mov %esi,%r9d
imul %r8d,%r9d
add %edi,%r9d
sub %esi,%r9d
jmp 25 <func1+0x25>
mov %ecx,%eax
imul %r8d,%eax
lea (%rax,%rdx,2),%r9d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a1 + a1;
    }
    v8 = a4 * a3;
    if (a5 < a3)
    {
        v9 = a1 + a2 * a5 - a2;
    }
    else
    {
        v9 = a4 * a5 + (a3 + a3);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 10
4 10
5 12
6 12
7 12
8 12
9 12
10 16
11 16
12 16
13 18
14 18
15 18
16 18
17 18
18 18
19 19
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
add %ecx,%esi
imul %ecx,%edi
imul %edi,%edx
imul %edx,%r8d
add %esi,%r8d
lea (%r8,%rcx,2),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a1 * a4 * a3 * a5;
    v7 = a4 + a4;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 4
7 4
8 6
9 6
10 7
<<<sep_out_sample>>>
mov $0x1,%eax
sub %edx,%eax
imul %r8d,%eax
lea (%rcx,%rdi,1),%r9d
cmp %eax,%edx
jg 1b <func1+0x1b>
lea (%rcx,%rdx,1),%r9d
imul %ecx,%r9d
lea 0x1(%rdi,%rdx,1),%edi
add %edi,%esi
add %r8d,%esi
add %esi,%ecx
add %ecx,%eax
add %r9d,%eax
sub %edx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a5 - a3 * a5;
    if (v6 < a3)
    {
        v7 = a4 + a1;
    }
    else
    {
        v7 = (a4 * a4) + a3 * a4;
    }
    v8 = a5 - a3;
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        v9 += a2 + a5;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 7
5 5
6 5
7 11
8 11
9 19
10 19
11 19
12 19
13 19
14 19
15 13
16 19
17 20
<<<sep_out_sample>>>
lea (%rdi,%rcx,1),%r9d
mov %ecx,%eax
imul %edi,%eax
sub %eax,%r9d
cmp %r8d,%edi
jge 18 <func1+0x18>
mov %edx,%eax
imul %esi,%eax
jmp 21 <func1+0x21>
lea -0x1(%rsi),%eax
imul %r8d,%eax
sub %edx,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    if (a2 < a2)
    {
        v6 = a4 + a4;
    }
    else
    {
        v6 = a1 + a4 - (a4 * a1);
    }
    if (a1 < a5)
    {
        v7 = a3 * a2;
    }
    else
    {
        v7 = (a5 * a2 - a5) - a3;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        if (a1 < a4)
        {
            v8 += a2 - a1 - a2;
        }
        else
        {
            v8 += a5 - a5;
        }
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a3)
    {
        v10 += a1 + a5;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 12
6 12
7 14
8 14
9 14
10 18
11 18
12 18
13 37
14 37
15 37
16 37
17 37
18 37
19 38
<<<sep_out_sample>>>
cmp %edi,%edx
jge e <func1+0xe>
mov %ecx,%eax
sub %r8d,%eax
lea (%rax,%rsi,2),%eax
jmp 16 <func1+0x16>
lea (%rdx,%r8,1),%eax
sub %esi,%eax
add %edx,%eax
lea (%rdi,%rdx,1),%r9d
add %esi,%r9d
add %r9d,%r8d
add %ecx,%r8d
add %eax,%r8d
imul %esi,%edi
imul %edi,%edx
sub %ecx,%edx
lea 0x1(%r8,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a3 < a1)
    {
        v6 = a2 + (a4 - a5 + a2);
    }
    else
    {
        v6 = (a3 + a5 - a2) + a3;
    }
    v7 = a1 * a2 * a3 - a4;
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += a5 * a3 + a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 18
11 18
12 18
13 18
14 18
15 12
16 12
17 12
18 18
19 19
<<<sep_out_sample>>>
cmp %r8d,%esi
jge c <func1+0xc>
mov %edx,%eax
imul %ecx,%eax
jmp 19 <func1+0x19>
lea (%rcx,%r8,1),%r9d
mov %r8d,%eax
imul %edi,%eax
add %r9d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a2 < a5)
    {
        v6 = a3 * a4;
    }
    else
    {
        v6 = a4 + a5 + a5 * a1;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += (a4 * a1) - a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 10
10 17
11 17
12 17
13 17
14 17
15 18
<<<sep_out_sample>>>
test %edx,%edx
jle 14 <func1+0x14>
mov %ecx,%r9d
imul %edx,%r9d
imul %edi,%r9d
add %esi,%r9d
jmp 20 <func1+0x20>
lea (%rdi,%rcx,1),%r9d
mov %edi,%eax
imul %edi,%eax
add %eax,%r9d
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
imul %r8d,%esi
add %esi,%eax
add %r8d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (v6 < a3)
    {
        v6 = (a1 * (a4 * a3)) + a2;
    }
    else
    {
        v6 = (a1 + a4) + (a1 * a1);
    }
    v7 = (a4 + a5 - a4) * a2;
    if (a3 < a3)
    {
        v8 = a5 * a4 - a2 * a5;
    }
    else
    {
        v8 = a5 + a3;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        v9 += a4 + a4;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 26
13 26
14 26
15 26
16 26
17 12
18 26
19 19
20 26
21 27
<<<sep_out_sample>>>
mov %ecx,%r9d
imul %ecx,%r9d
add %edx,%r9d
imul %esi,%r9d
cmp %edi,%r9d
jge 1a <func1+0x1a>
mov %esi,%eax
imul %esi,%eax
jmp 1f <func1+0x1f>
mov %ecx,%eax
imul %edi,%eax
add %edx,%edi
add %edi,%esi
add %r8d,%esi
add %esi,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = ((a4 * a4) + a3) * a2;
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += a5 + a5;
    }
    if (v6 < a1)
    {
        v9 = a2 * a2;
    }
    else
    {
        v9 = a4 * a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 10
6 10
7 12
8 12
9 12
10 16
11 16
12 18
13 18
14 18
15 18
16 18
17 18
18 19
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
imul %edx,%ecx
imul %ecx,%edi
add %edi,%eax
sub %edx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a1 * (a3 * a4);
    v7 = a5 - a3;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 4
7 6
8 5
9 6
10 7
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea (%r8,%rcx,1),%esi
sub %edx,%ecx
lea 0x1(%rsi,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a4 - a3;
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        if (a4 < a1)
        {
            v7 += a3 * a3;
        }
        else
        {
            v7 += a3 - a3 * a3;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 4
6 17
7 18
<<<sep_out_sample>>>
lea (%r8,%rcx,1),%r9d
cmp %esi,%ecx
jge 16 <func1+0x16>
mov %r8d,%r9d
imul %esi,%r9d
imul %edi,%r9d
sub %ecx,%r9d
mov %edx,%eax
sub %edi,%eax
mov %ecx,%r10d
imul %ecx,%r10d
cmp %esi,%ecx
cmovg %r10d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a4 < a2)
    {
        v6 = (a5 * a2) * a1 - a4;
    }
    else
    {
        v6 = a5 + a4;
    }
    if (a2 < a4)
    {
        v7 = (a4 + a1 - a1) * a4;
    }
    else
    {
        v7 = a3 - a1;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 6
7 6
8 18
9 18
10 14
11 14
12 14
13 14
14 20
15 20
16 20
17 20
18 20
19 20
20 21
<<<sep_out_sample>>>
lea (%rdi,%rdi,1),%r9d
imul %ecx,%r9d
add %r8d,%r9d
test %esi,%esi
jle 1a <func1+0x1a>
lea (%rcx,%rsi,1),%eax
imul %r8d,%eax
sub %edx,%eax
jmp 23 <func1+0x23>
mov %esi,%eax
sub %edx,%eax
imul %edx,%eax
sub %edi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a5 + a4 * (a1 + a1);
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += a4 * a4;
    }
    if (v9 < a2)
    {
        v9 = (a4 + a2) * a5 - a3;
    }
    else
    {
        v9 = (a2 - a3) * a3 - a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 10
5 10
6 12
7 12
8 12
9 12
10 16
11 16
12 16
13 16
14 18
15 18
16 18
17 18
18 18
19 18
20 19
<<<sep_out_sample>>>
mov $0x1,%eax
sub %edi,%eax
imul %r8d,%eax
sub %ecx,%eax
cmp %eax,%edi
jle 1f <func1+0x1f>
mov %r8d,%r9d
sub %esi,%r9d
add %r8d,%r9d
add %ecx,%r9d
jmp 26 <func1+0x26>
mov %edi,%r9d
imul %edx,%r9d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %ecx,%r8d
add %r8d,%eax
add %r9d,%eax
sub %edi,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a5 - a1 * a5 - a4;
    if (v6 < a1)
    {
        v7 = a4 - (a2 - a5 - a5);
    }
    else
    {
        v7 = a1 * a3;
    }
    if (a5 < a5)
    {
        v8 = (a2 * a2) * a2 + a3;
    }
    else
    {
        v8 = a4 - (a1 - a5 + a5);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 5
6 5
7 7
8 7
9 7
10 7
11 7
12 11
13 11
14 21
15 21
16 21
17 21
18 21
19 21
20 19
21 21
22 22
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a5 - a5 + a2;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += (a2 + a2) + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 14
2 14
3 14
4 14
5 15
<<<sep_out_sample>>>
mov %esi,%eax
sub %edx,%eax
cmp %edx,%esi
jge d <func1+0xd>
lea (%rsi,%rdi,2),%eax
add %esi,%eax
lea (%rdi,%rdx,1),%r9d
add %r9d,%esi
add %r8d,%esi
add %ecx,%esi
add %esi,%eax
add %ecx,%edi
imul %edi,%ecx
sub %edx,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a2 < a3)
    {
        v6 = (a1 + a2 + a1) + a2;
    }
    else
    {
        v6 = a2 - a3;
    }
    if (a4 < a4)
    {
        v7 = a5 + a1 - a2;
    }
    else
    {
        v7 = (a4 + a1) * a4 - a3;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        if (a3 < a5)
        {
            v8 += a2 - (a2 * a5);
        }
        else
        {
            v8 += a5 - a3;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 4
4 4
5 6
6 6
7 32
8 32
9 32
10 32
11 32
12 18
13 18
14 18
15 32
16 33
<<<sep_out_sample>>>
cmp %edx,%r8d
jge a <func1+0xa>
lea (%rcx,%rcx,1),%eax
jmp 12 <func1+0x12>
lea -0x1(%rsi),%eax
imul %edi,%eax
sub %ecx,%eax
lea (%rcx,%rdx,1),%r9d
lea (%rdi,%rdx,1),%r10d
add %r10d,%esi
add %r8d,%esi
add %ecx,%esi
add %esi,%eax
imul %ecx,%edx
add %edx,%eax
add %r9d,%eax
sub %r8d,%r9d
add %r9d,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a5 < a3)
    {
        v6 = a4 + a4;
    }
    else
    {
        v6 = (a1 * a2 - a1) - a4;
    }
    v7 = a3 * a4;
    v8 = a4 + a3;
    v9 = ((a4 + a3) - a5) + a1;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 10
6 10
7 10
8 13
9 15
10 15
11 15
12 15
13 15
14 12
15 15
16 15
17 14
18 14
19 15
20 16
<<<sep_out_sample>>>
cmp %r8d,%esi
jge e <func1+0xe>
lea (%rsi,%rcx,1),%eax
lea (%rax,%r8,2),%eax
jmp 17 <func1+0x17>
mov %edx,%eax
sub %edi,%eax
sub %r8d,%eax
sub %edi,%eax
add %edi,%edx
add %esi,%edx
add %r8d,%edx
add %edx,%ecx
add %eax,%ecx
add $0x1,%r8d
imul %r8d,%esi
imul %esi,%edi
lea 0x1(%rcx,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a2 < a5)
    {
        v6 = a5 + (a2 + a4 + a5);
    }
    else
    {
        v6 = a3 - a1 - a5 - a1;
    }
    if (a3 < a3)
    {
        v7 = (a1 * a5) * a1 - a5;
    }
    else
    {
        v7 = a1 * (a2 + (a2 * a5));
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += a5 + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 10
10 25
11 25
12 25
13 25
14 25
15 18
16 18
17 18
18 25
19 26
<<<sep_out_sample>>>
test %ecx,%ecx
jle 11 <func1+0x11>
mov $0x1,%eax
sub %esi,%eax
imul %r8d,%eax
jmp 19 <func1+0x19>
lea -0x1(%rdi),%eax
imul %edx,%eax
sub %esi,%eax
lea (%rdi,%rdx,1),%r9d
add %esi,%r9d
add %r9d,%r8d
add %r8d,%ecx
add %ecx,%eax
lea (%rdi,%rsi,2),%r9d
add %r9d,%eax
mov $0x1,%ecx
sub %edx,%ecx
mov %ecx,%edx
imul %esi,%edx
imul %edx,%edi
add %edi,%eax
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (v6 < a4)
    {
        v6 = a5 - a2 * a5;
    }
    else
    {
        v6 = (a3 * a1 - a3) - a2;
    }
    v7 = (a1 + a2) + a2;
    v8 = (a2 - a3 * a2) * a1;
    v9 = a2 + a3 - a3;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 15
11 15
12 15
13 15
14 15
15 12
16 15
17 13
18 13
19 13
20 13
21 13
22 15
23 15
24 16
<<<sep_out_sample>>>
test %r8d,%r8d
jle c <func1+0xc>
lea (%rdx,%rsi,2),%eax
add %edx,%eax
jmp 1e <func1+0x1e>
mov %ecx,%eax
imul %esi,%eax
mov %r8d,%r9d
sub %eax,%r9d
mov %r9d,%eax
imul %r8d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (v6 < a5)
    {
        v6 = a3 + (a3 + a2 + a2);
    }
    else
    {
        v6 = a5 * (a5 - a4 * a2);
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        if (a4 < a4)
        {
            v7 += (a3 + a4) - a4;
        }
        else
        {
            v7 += (a4 * a5) * a3;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 10
10 10
11 10
12 24
13 24
14 24
15 24
16 24
17 25
<<<sep_out_sample>>>
cmp %edi,%edx
jge 10 <func1+0x10>
mov %ecx,%eax
sub %r8d,%eax
sub %r8d,%eax
add %edi,%eax
jmp 22 <func1+0x22>
mov %edx,%eax
imul %edx,%eax
imul %r8d,%eax
mov %esi,%r9d
sub %eax,%r9d
mov %r9d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a3 < a1)
    {
        v6 = a4 - a5 - a5 + a1;
    }
    else
    {
        v6 = a2 - a3 * a3 * a5;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a1 * a3 + a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 10
13 10
14 17
15 17
16 17
17 17
18 17
19 18
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
lea 0x1(%rcx,%r8,1),%ecx
imul %edx,%esi
lea (%rsi,%rdi,2),%eax
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a4 * a5 - a3;
    }
    v8 = (a1 + a1) + a2 * a3;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 9
6 9
7 10
8 11
<<<sep_out_sample>>>
mov %r8d,%eax
sub %esi,%eax
cmp %r8d,%edx
jge 14 <func1+0x14>
mov %edi,%eax
imul %edi,%eax
sub %edx,%eax
imul %esi,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a3 < a5)
    {
        v6 = (a1 * a1 - a3) * a2;
    }
    else
    {
        v6 = a5 + a3 - a2 - a3;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += a2 - a3 - a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 4
4 4
5 6
6 6
7 6
8 6
9 17
10 17
11 17
12 17
13 17
14 18
<<<sep_out_sample>>>
mov %esi,%r9d
sub %r8d,%r9d
mov %r9d,%r10d
cmp %edi,%r8d
jle 1b <func1+0x1b>
mov %r8d,%eax
imul %r8d,%eax
mov %edx,%r10d
sub %eax,%r10d
cmp %ecx,%esi
jge 2d <func1+0x2d>
mov %edx,%r11d
sub %esi,%r11d
sub %edi,%r11d
sub %edi,%r11d
jmp 39 <func1+0x39>
mov %r8d,%r11d
sub %ecx,%r11d
sub %edx,%r11d
add %edi,%r11d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
add %r9d,%r10d
lea (%r10,%r11,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a2 + (a4 - a4 - a5);
    if (a1 < a5)
    {
        v7 = a3 - a5 * a5;
    }
    else
    {
        v7 = a2 - a5;
    }
    if (a2 < a4)
    {
        v8 = (a3 - a2 - a1) - a1;
    }
    else
    {
        v8 = a5 - a4 - a3 + a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 11
4 5
5 5
6 7
7 7
8 7
9 7
10 13
11 13
12 15
13 15
14 15
15 15
16 15
17 19
18 19
19 19
20 19
21 21
22 21
23 21
24 21
25 21
26 21
27 21
28 22
<<<sep_out_sample>>>
cmp %esi,%r8d
jge 11 <func1+0x11>
mov %edi,%eax
imul %ecx,%eax
imul %ecx,%eax
sub %edi,%eax
jmp 21 <func1+0x21>
mov %edi,%eax
imul %edi,%eax
add %ecx,%eax
mov %r8d,%r10d
sub %eax,%r10d
mov %r10d,%eax
mov %edx,%r9d
imul %r8d,%r9d
add %r9d,%edi
add %edi,%edx
add %esi,%edx
add %r8d,%edx
add %ecx,%edx
lea 0x1(%rax,%rdx,1),%eax
imul %ecx,%r8d
add %r8d,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a5 < a2)
    {
        v6 = a1 * a4 * a4 - a1;
    }
    else
    {
        v6 = a5 - ((a1 * a1) + a4);
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += a5 + a5;
    }
    if (a3 < a3)
    {
        v9 = a4 + a4 * a4 * a2;
    }
    else
    {
        v9 = (a4 * a5) + a2;
    }
    v10 = a3 * a5;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 10
13 10
14 25
15 25
16 26
17 26
18 26
19 26
20 26
21 26
22 23
23 23
24 26
25 27
<<<sep_out_sample>>>
test %edx,%edx
jle 10 <func1+0x10>
lea (%rdx,%r8,1),%r9d
add %esi,%r9d
add %ecx,%r9d
jmp 1c <func1+0x1c>
mov %esi,%r9d
sub %edi,%r9d
add %esi,%r9d
add %r8d,%r9d
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
add %ecx,%esi
add %r9d,%esi
add %ecx,%edx
add %edx,%edi
sub %r8d,%edi
lea (%rsi,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (v6 < a3)
    {
        v6 = a2 + (a3 + a5) + a4;
    }
    else
    {
        v6 = ((a2 - a1) + a2) + a5;
    }
    v7 = a4 + a3 + a1 - a5;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 10
11 13
12 13
13 13
14 13
15 13
16 12
17 12
18 12
19 13
20 14
<<<sep_out_sample>>>
lea 0x2(%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%eax
add %r8d,%ecx
imul %edi,%r8d
add %r8d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (a4 < a3)
        {
            v6 += a4 + a4 * a3;
        }
        else
        {
            v6 += a1 - (a5 - a1);
        }
    }
    v8 = (a4 + a5) + a5 * a1;
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        v9 += a5 + a4 + a1;
    }
    v11 = 0;
    for (v12 = 0; v12++; v12<a3)
    {
        v11 += a1 - a3;
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 27
2 27
3 27
4 27
5 16
6 16
7 16
8 27
9 28
<<<sep_out_sample>>>
mov %esi,%r9d
imul %r8d,%r9d
mov %esi,%eax
sub %edx,%eax
add %r9d,%eax
lea (%rdx,%r8,1),%r9d
sub %ecx,%r9d
cmp %ecx,%eax
jge 24 <func1+0x24>
mov %r8d,%r9d
imul %ecx,%r9d
imul %edi,%r9d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%eax
lea 0x1(%r9,%rax,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a3 < a3)
    {
        v6 = a4 - a3;
    }
    else
    {
        v6 = a2 * a5 + (a2 - a3);
    }
    if (v6 < a4)
    {
        v7 = a5 * a4 * a1;
    }
    else
    {
        v7 = a3 + a5 - a4;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        if (a5 < a5)
        {
            v8 += a4 + a2;
        }
        else
        {
            v8 += a2 + a4 + a1;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 10
6 18
7 18
8 12
9 12
10 14
11 14
12 14
13 32
14 32
15 32
16 32
17 32
18 32
19 33
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
add %esi,%edx
mov %r8d,%eax
imul %edi,%eax
imul %eax,%edi
add %edi,%r8d
lea (%rdx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a3 - a4;
    v7 = a5 + a5 * a1 * a1;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 5
6 5
7 5
8 5
9 6
10 7
<<<sep_out_sample>>>
mov %r8d,%r9d
imul %edi,%r9d
imul %edi,%r9d
imul %edi,%r9d
lea (%rcx,%rcx,1),%eax
cmp %esi,%edi
jge 1c <func1+0x1c>
lea (%rdi,%rdx,1),%eax
imul %edx,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a5 * a1 * a1 * a1;
    if (a1 < a2)
    {
        v7 = a3 * (a1 + a3);
    }
    else
    {
        v7 = a4 + a4;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 11
6 5
7 5
8 7
9 7
10 13
11 13
12 13
13 13
14 13
15 13
16 14
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %edx,%r8d
lea 0x1(%rcx,%r8,1),%eax
sub %esi,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a5 * a2;
    }
    v8 = a1 - a2;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 9
6 10
7 11
<<<sep_out_sample>>>
mov %edx,%eax
imul %edx,%eax
lea (%rax,%rsi,2),%r10d
cmp %ecx,%esi
jge 1d <func1+0x1d>
mov %ecx,%eax
imul %edx,%eax
mov %esi,%r9d
sub %eax,%r9d
sub %edi,%r9d
jmp 25 <func1+0x25>
lea (%rdi,%rsi,1),%r9d
imul %edi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a2 + a3 * a3 + a2;
    if (a2 < a4)
    {
        v7 = (a2 - a4 * a3) - a1;
    }
    else
    {
        v7 = a1 * (a1 + a2);
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 5
5 5
6 7
7 7
8 7
9 7
10 7
11 7
12 11
13 11
14 13
15 13
16 13
17 13
18 13
19 13
20 14
<<<sep_out_sample>>>
lea (%rcx,%rdx,1),%eax
cmp %ecx,%esi
jl c <func1+0xc>
mov %ecx,%eax
imul %ecx,%eax
lea 0x2(%rdi,%rdx,1),%edx
add %edx,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a2 * a5 - a4;
    }
    if (a2 < a4)
    {
        v8 = (a1 - a1 + a4) + a3;
    }
    else
    {
        v8 = a4 * a4 + a1 - a1;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        v9 += (a4 + a5) + a3;
    }
    v11 = 0;
    for (v12 = 0; v12++; v12<a5)
    {
        v11 += a1 - a5;
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 9
3 9
4 15
5 15
6 27
7 27
8 27
9 27
10 27
11 28
<<<sep_out_sample>>>
lea (%r8,%r8,1),%r9d
test %edx,%edx
jle 16 <func1+0x16>
mov %edx,%eax
imul %edi,%eax
sub %r8d,%eax
imul %r8d,%eax
jmp 20 <func1+0x20>
mov $0x1,%eax
sub %edi,%eax
imul %edx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a5 + a5;
    if (v7 < a3)
    {
        v7 = a5 * (a3 * a1 - a5);
    }
    else
    {
        v7 = a3 - a3 * a1;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 5
3 5
4 7
5 7
6 7
7 7
8 7
9 11
10 11
11 11
12 13
13 13
14 13
15 13
16 13
17 13
18 14
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
mov %esi,%edx
sub %edi,%edx
add %edx,%eax
mov %esi,%edx
imul %esi,%edx
add %edx,%eax
mov %esi,%edx
sub %ecx,%edx
add %edx,%eax
sub %r8d,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a2 - a1;
    v7 = a2 * a2;
    if (a4 < a4)
    {
        v8 = a1 + (a2 - a1) * a5;
    }
    else
    {
        v8 = a2 - (a4 + a2 - a2);
    }
    v9 = a2 - a5;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 15
2 15
3 15
4 15
5 4
6 4
7 15
8 5
9 5
10 15
11 12
12 12
13 15
14 14
15 15
16 16
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
lea (%rcx,%r8,2),%eax
lea (%rax,%rsi,1),%eax
imul %r8d,%ecx
imul %ecx,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a5 + a3 * (a2 - a2);
    if (a5 < a5)
    {
        v7 = (a5 + a2 - a2) * a5;
    }
    else
    {
        v7 = (a4 * a5) * a5 * a4;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 13
2 13
3 13
4 13
5 11
6 11
7 13
8 14
<<<sep_out_sample>>>
lea (%rcx,%rcx,1),%r9d
cmp %edi,%ecx
jle 16 <func1+0x16>
mov %edx,%eax
imul %edi,%eax
imul %esi,%eax
imul %r8d,%eax
jmp 21 <func1+0x21>
mov %edx,%eax
imul %edi,%eax
imul %esi,%eax
imul %esi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a4 + a4;
    if (a1 < a4)
    {
        v7 = a2 * (a3 * a1) * a5;
    }
    else
    {
        v7 = (a2 * (a3 * a1)) * a2;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        if (a3 < a5)
        {
            v8 += a1 * (a3 * a5);
        }
        else
        {
            v8 += a3 - a5;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 5
3 5
4 7
5 7
6 7
7 7
8 7
9 11
10 11
11 11
12 11
13 25
14 25
15 25
16 25
17 25
18 25
19 26
<<<sep_out_sample>>>
lea (%r8,%rcx,1),%r9d
test %ecx,%ecx
jle e <func1+0xe>
mov %ecx,%eax
sub %edx,%eax
jmp 15 <func1+0x15>
lea 0x1(%rdi,%rcx,1),%eax
imul %edx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a5 + a4;
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        if (a1 < a3)
        {
            v7 += a3 + a5;
        }
        else
        {
            v7 += a4 + a5;
        }
    }
    if (v9 < a4)
    {
        v9 = a4 - (a3 + (a5 - a5));
    }
    else
    {
        v9 = a3 + (a4 + a1) * a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 17
3 17
4 19
5 19
6 19
7 23
8 23
9 25
10 25
11 25
12 25
13 25
14 25
15 26
<<<sep_out_sample>>>
mov %r8d,%eax
neg %eax
sub %esi,%eax
cmp %esi,%edx
jge 18 <func1+0x18>
lea (%rdi,%rdx,1),%eax
mov %r8d,%r9d
imul %esi,%r9d
sub %r9d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a3 < a2)
    {
        v6 = a1 + a3 - a5 * a2;
    }
    else
    {
        v6 = (a4 - a4 - a5) - a2;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        if (a5 < a1)
        {
            v7 += a1 * a1 * a3;
        }
        else
        {
            v7 += a2 + a4;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 4
5 4
6 6
7 6
8 6
9 6
10 24
11 24
12 24
13 24
14 24
15 25
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
imul %r8d,%esi
add %esi,%eax
sub %edx,%ecx
lea (%rcx,%rdi,2),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = ((a4 + a5) - a4) * a2;
    v7 = a4 - a3 + a1 + a1;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 6
7 5
8 5
9 6
10 7
<<<sep_out_sample>>>
lea (%rsi,%rsi,1),%r10d
mov %edi,%r9d
sub %ecx,%r9d
cmp %r8d,%edx
jl 1b <func1+0x1b>
lea 0x1(%rdx),%r9d
imul %ecx,%r9d
imul %edx,%r9d
add %edx,%edi
add %esi,%edi
add %edi,%r8d
add %ecx,%r8d
add %r10d,%r8d
add %r9d,%r8d
sub %edx,%ecx
sub %esi,%ecx
lea (%r8,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a2 + a2;
    if (a3 < a5)
    {
        v7 = a1 - a4;
    }
    else
    {
        v7 = (a4 + a4 * a3) * a3;
    }
    v8 = a4 - a3 - a2;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 7
3 7
4 5
5 5
6 11
7 11
8 11
9 14
10 14
11 14
12 14
13 14
14 14
15 13
16 13
17 14
18 15
<<<sep_out_sample>>>
mov %edx,%r9d
sub %esi,%r9d
mov %edx,%eax
imul %ecx,%eax
lea (%r9,%rdi,2),%edi
lea (%rdi,%rax,1),%eax
add %eax,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a4 - a5 - a1;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        if (a5 < a2)
        {
            v8 += a2 + a5;
        }
        else
        {
            v8 += (a4 * a5) - a3;
        }
    }
    v10 = a3 - a2;
    v11 = a3 * a4 + a1;
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 22
4 22
5 23
6 23
7 23
8 23
9 23
10 23
11 24
<<<sep_out_sample>>>
cmp %r8d,%edi
jge f <func1+0xf>
mov %edx,%eax
sub %edi,%eax
lea (%rax,%r8,2),%eax
jmp 18 <func1+0x18>
lea (%rcx,%rdx,1),%eax
sub %r8d,%eax
imul %ecx,%eax
mov %edx,%r9d
neg %r9d
sub %ecx,%r9d
lea 0x1(%rdi,%r9,1),%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += (a3 + a4) + a4;
    }
    if (a1 < a5)
    {
        v8 = (a3 - a1) + a5 + a5;
    }
    else
    {
        v8 = a4 * ((a4 + a3) - a5);
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a1)
    {
        if (a1 < a1)
        {
            v9 += (a5 + a2) - a1;
        }
        else
        {
            v9 += a4 - a5;
        }
    }
    v11 = (a5 - a3) - a4 - a5;
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 15
8 15
9 15
10 29
11 29
12 29
13 30
14 30
15 30
16 30
17 30
18 30
19 31
<<<sep_out_sample>>>
cmp %esi,%edx
jge 12 <func1+0x12>
lea (%rcx,%rdi,1),%r10d
mov %ecx,%eax
imul %ecx,%eax
add %eax,%r10d
jmp 20 <func1+0x20>
mov %edx,%r10d
imul %edx,%r10d
sub %esi,%r10d
imul %ecx,%r10d
cmp %r8d,%ecx
jle 35 <func1+0x35>
mov %edi,%r9d
imul %edi,%r9d
imul %r8d,%r9d
sub %esi,%r9d
jmp 3d <func1+0x3d>
mov %edx,%eax
sub %edi,%eax
lea (%rax,%rsi,2),%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a3 < a2)
    {
        v6 = a4 + a1 + a4 * a4;
    }
    else
    {
        v6 = a4 * ((a3 * a3) - a2);
    }
    if (a5 < a4)
    {
        v7 = (a1 * a1 * a5) - a2;
    }
    else
    {
        v7 = a2 - (a1 - a3 - a2);
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 12
13 12
14 14
15 14
16 14
17 14
18 14
19 18
20 18
21 18
22 20
23 20
24 20
25 20
26 20
27 20
28 21
<<<sep_out_sample>>>
mov %r8d,%eax
sub %esi,%eax
cmp %edi,%r8d
jge 19 <func1+0x19>
mov %edi,%r9d
imul %r8d,%r9d
sub %edx,%r9d
sub %r8d,%r9d
jmp 20 <func1+0x20>
mov %r8d,%r9d
imul %r8d,%r9d
lea 0x1(%r9,%rdi,1),%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (a2 < a4)
        {
            v6 += (a2 - a4) + a5;
        }
        else
        {
            v6 += a2 + a2;
        }
    }
    v8 = a5 - a2;
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        v9 += (a5 - a4) + a3;
    }
    if (a5 < a1)
    {
        v11 = ((a1 * a5) - a3) - a5;
    }
    else
    {
        v11 = a5 * a5;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 22
4 22
5 24
6 24
7 24
8 24
9 24
10 28
11 28
12 30
13 30
14 30
15 30
16 30
17 30
18 31
<<<sep_out_sample>>>
mov %ecx,%eax
imul %edi,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%eax
lea (%rax,%rdi,2),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = (a4 * a1 - a2) + a2;
    v7 = a1 + a1;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 6
9 7
<<<sep_out_sample>>>
mov %edi,%eax
sub %ecx,%eax
test %esi,%esi
jle 14 <func1+0x14>
lea (%rdx,%rcx,1),%r9d
mov %edx,%eax
imul %edx,%eax
add %r9d,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %r8d,%esi
add %esi,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (v6 < a2)
    {
        v6 = a3 + a4 + (a3 * a3);
    }
    else
    {
        v6 = a1 - a4;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        if (v7 < a5)
        {
            v7 += a1 * a2 * a1;
        }
        else
        {
            v7 += a2 + a3 * a5;
        }
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        v9 += a5 * a2 * a5;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 4
4 4
5 6
6 6
7 6
8 6
9 29
10 29
11 29
12 29
13 29
14 30
<<<sep_out_sample>>>
mov %ecx,%r9d
sub %esi,%r9d
mov %r8d,%eax
imul %edx,%eax
sub %eax,%r9d
cmp $0x1,%esi
jle 1c <func1+0x1c>
lea (%rsi,%r8,1),%eax
sub %ecx,%eax
jmp 26 <func1+0x26>
lea (%rcx,%rcx,1),%eax
lea (%rsi,%rdx,1),%r10d
sub %r10d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a4 - a2 - a5 * a3;
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += a4 + a4;
    }
    if (v8 < a2)
    {
        v9 = (a2 + a5) - a4;
    }
    else
    {
        v9 = (a4 + a4) - (a2 + a3);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 4
6 10
7 10
8 12
9 12
10 12
11 16
12 16
13 16
14 18
15 18
16 18
17 18
18 18
19 18
20 19
<<<sep_out_sample>>>
cmp $0x1,%ecx
jle 11 <func1+0x11>
mov %esi,%eax
imul %esi,%eax
imul %ecx,%eax
sub %edx,%eax
jmp 18 <func1+0x18>
lea -0x1(%r8),%eax
imul %edi,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a1 + a1;
    }
    if (v7 < a4)
    {
        v8 = a2 * a2 * a4 - a3;
    }
    else
    {
        v8 = a5 * a1 - a1;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        v9 += (a1 * a4) * a3;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 11
8 15
9 15
10 22
11 22
12 22
13 22
14 22
15 23
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (a1 < a5)
        {
            v6 += (a2 - a5) * a1;
        }
        else
        {
            v6 += a3 + a5 * a1;
        }
    }
    v8 = ((a5 - a5) + a3) - a3;
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        if (v8 < a3)
        {
            v9 += a2 * a1;
        }
        else
        {
            v9 += a4 * a3;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 29
2 29
3 29
4 29
5 30
<<<sep_out_sample>>>
mov %ecx,%eax
sub %edx,%eax
cmp %edi,%edx
jge f <func1+0xf>
mov %ecx,%eax
sub %edi,%eax
sub %r8d,%eax
cmp %ecx,%edx
jle 24 <func1+0x24>
lea (%rsi,%rcx,1),%r10d
mov %esi,%r9d
imul %edx,%r9d
imul %r10d,%r9d
jmp 37 <func1+0x37>
mov %ecx,%r9d
imul %r8d,%r9d
mov %edi,%r11d
sub %r9d,%r11d
mov %r11d,%r9d
add %ecx,%r9d
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%eax
lea 0x1(%r9,%rax,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    if (a3 < a1)
    {
        v6 = a4 - a1 - a5;
    }
    else
    {
        v6 = a4 - a3;
    }
    if (a4 < a3)
    {
        v7 = (a2 + a4) * (a2 * a3);
    }
    else
    {
        v7 = (a1 - (a4 * a5)) + a4;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += a4 - (a2 * a1);
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a4)
    {
        v10 += a4 * a1 * a5;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 4
4 4
5 6
6 6
7 6
8 12
9 12
10 14
11 14
12 14
13 14
14 14
15 18
16 18
17 18
18 18
19 18
20 18
21 30
22 30
23 30
24 30
25 30
26 30
27 31
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
lea 0x1(%rcx,%r8,1),%eax
imul %esi,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += (a2 + a1) * a3;
    }
    v8 = a1 * ((a4 + a2) - a4);
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        v9 += (a4 - a4) + a2;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 15
2 15
3 15
4 15
5 9
6 15
7 16
<<<sep_out_sample>>>
lea 0x1(%rsi,%rdi,2),%eax
add %eax,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = (a2 - a2) - a3 + a3;
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += (a5 + a4) - a2;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        v9 += a2 - a1 * a4;
    }
    v11 = a2 - (a3 - a3) + a1;
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 16
4 16
5 16
6 17
<<<sep_out_sample>>>
mov %edi,%r9d
imul %r8d,%r9d
test %esi,%esi
jle 16 <func1+0x16>
mov %edx,%eax
imul %ecx,%eax
add %esi,%eax
add %edx,%eax
jmp 1b <func1+0x1b>
mov %ecx,%eax
imul %edx,%eax
add %r9d,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (a1 < a3)
        {
            v6 += a3 + a1;
        }
        else
        {
            v6 += (a4 - a2) + a1;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        if (v7 < a3)
        {
            v8 += a4 * (a4 - a5);
        }
        else
        {
            v8 += a5 + a5 - a5;
        }
    }
    if (a1 < a1)
    {
        v10 = a5 * a4 - a1 - a1;
    }
    else
    {
        v10 = a1 * a5;
    }
    if (v11 < a2)
    {
        v11 = a2 + (a3 * a4) + a3;
    }
    else
    {
        v11 = a4 * a3;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 34
2 34
3 36
4 36
5 38
6 38
7 38
8 38
9 38
10 42
11 42
12 44
13 44
14 44
15 44
16 44
17 44
18 45
<<<sep_out_sample>>>
mov %r8d,%r9d
sub %edx,%r9d
mov %esi,%eax
imul %edi,%eax
sub %eax,%r9d
cmp %r9d,%r8d
jle 1e <func1+0x1e>
mov %edi,%r10d
neg %r10d
sub %r8d,%r10d
jmp 29 <func1+0x29>
mov %r8d,%r10d
imul %ecx,%r10d
imul %edx,%r10d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
lea (%r9,%r10,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a5 - a3 - a2 * a1;
    if (v6 < a5)
    {
        v7 = (a3 - a1 - a3) - a5;
    }
    else
    {
        v7 = (a5 * a4) * a3;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 4
6 5
7 5
8 7
9 7
10 7
11 7
12 11
13 11
14 11
15 13
16 13
17 13
18 13
19 13
20 13
21 14
<<<sep_out_sample>>>
lea (%rdx,%rsi,1),%eax
cmp $0x1,%esi
jg 12 <func1+0x12>
mov %r8d,%eax
imul %edi,%eax
add %ecx,%eax
add %esi,%eax
lea 0x1(%r8,%rdi,2),%r9d
add %r9d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a4 + a1 - a2;
    }
    if (v7 < a2)
    {
        v8 = a3 + a2;
    }
    else
    {
        v8 = a2 + (a5 * a1 + a4);
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        if (v7 < a1)
        {
            v9 += a1 - a2 - a5;
        }
        else
        {
            v9 += (a5 + a4) * a4;
        }
    }
    v11 = (a1 + a1) + a5;
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 9
3 9
4 15
5 15
6 15
7 15
8 30
9 30
10 30
11 30
12 30
13 30
14 30
15 31
<<<sep_out_sample>>>
mov %esi,%eax
sub %edx,%eax
mov %eax,%r9d
add %ecx,%eax
cmp %edx,%edi
cmovl %r9d,%eax
add %edx,%edi
add %esi,%edi
add %r8d,%edi
add %ecx,%edi
lea 0x1(%rax,%rdi,1),%eax
sub %r8d,%edx
sub %esi,%edx
add %edx,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a1 < a3)
    {
        v6 = a2 - a3;
    }
    else
    {
        v6 = (a2 - a3) + a4;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += a3 * a1 - a4;
    }
    v9 = (a3 - a5) - a2 + a4;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 6
4 6
5 6
6 6
7 18
8 18
9 18
10 18
11 18
12 17
13 17
14 17
15 18
16 19
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %ecx,%edx
add %esi,%edi
add %edi,%edx
add %edx,%eax
imul %r8d,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = (a4 + a3) + (a2 + a1);
    v7 = a5 * ((a2 - a2) + a5);
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 4
7 4
8 6
9 5
10 6
11 7
<<<sep_out_sample>>>
mov %edx,%eax
imul %esi,%eax
imul %edi,%eax
mov %ecx,%r9d
sub %eax,%r9d
lea 0x1(%rdi,%r9,1),%eax
add %eax,%edx
add %esi,%edx
add %edx,%r8d
lea (%r8,%rcx,1),%edx
mov %ecx,%eax
sub %esi,%eax
sub $0x1,%eax
imul %eax,%ecx
lea 0x1(%rdx,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    if (a5 < a5)
    {
        v6 = a4 + a3 * a3 - a4;
    }
    else
    {
        v6 = a4 * (a4 - a2) - a4;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        if (a2 < a2)
        {
            v7 += a2 * a2;
        }
        else
        {
            v7 += a5 + (a4 - a4);
        }
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        if (v9 < a5)
        {
            v9 += a3 + (a1 - a4);
        }
        else
        {
            v9 += (a2 * a5) * a1;
        }
    }
    v11 = a4 - (a3 * a2 * a1);
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 36
2 36
3 36
4 36
5 36
6 37
7 37
8 37
9 37
10 37
11 10
12 10
13 10
14 10
15 37
16 38
<<<sep_out_sample>>>
mov %ecx,%eax
imul %r8d,%eax
lea (%rax,%rdx,2),%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (v6 < a3)
        {
            v6 += a5 + a3;
        }
        else
        {
            v6 += a1 * a5 + a2;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        if (v9 < a5)
        {
            v8 += a1 - a5 + a1;
        }
        else
        {
            v8 += a3 - a1;
        }
    }
    if (a3 < a3)
    {
        v10 = a3 + a3 * a2 * a2;
    }
    else
    {
        v10 = a5 - a5;
    }
    v11 = (a3 + a4 * a5) + a3;
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 36
2 36
3 36
4 37
5 37
6 37
7 37
8 37
9 38
<<<sep_out_sample>>>
lea (%rcx,%r8,2),%eax
cmp %edx,%esi
jl 12 <func1+0x12>
mov $0x1,%eax
sub %ecx,%eax
imul %ecx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a2 < a3)
    {
        v6 = (a5 + a4) + a5;
    }
    else
    {
        v6 = a4 - (a4 * a4);
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        if (a2 < a5)
        {
            v7 += a2 - (a3 + a1);
        }
        else
        {
            v7 += a3 * a4 * a2;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 6
2 4
3 4
4 10
5 10
6 10
7 24
8 24
9 24
10 24
11 24
12 25
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %eax,%edx
add %r8d,%esi
imul %edi,%r8d
add %r8d,%esi
lea (%rdx,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a2 < a2)
    {
        v6 = a4 - a3 - a3 + a4;
    }
    else
    {
        v6 = (a3 - a3 + a3) - a4;
    }
    if (a5 < a5)
    {
        v7 = a4 - a1;
    }
    else
    {
        v7 = (a5 + a2) + a5 * a1;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 20
2 20
3 20
4 20
5 18
6 18
7 18
8 20
9 21
<<<sep_out_sample>>>
mov %ecx,%eax
sub %edx,%eax
cmp %esi,%edx
jge 13 <func1+0x13>
mov %r8d,%eax
sub %ecx,%eax
imul %r8d,%eax
add %ecx,%eax
add %edi,%edx
add %esi,%edx
add %edx,%r8d
add %ecx,%r8d
add %r8d,%eax
mov %ecx,%edx
sub %esi,%edx
imul %edx,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a3 < a2)
    {
        v6 = (a5 - a4) * a5 + a4;
    }
    else
    {
        v6 = ((a4 - a3) + a1) - a1;
    }
    v7 = (a4 - a2) * a4;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 10
2 10
3 4
4 4
5 6
6 6
7 6
8 6
9 13
10 13
11 13
12 13
13 13
14 12
15 12
16 12
17 13
18 14
<<<sep_out_sample>>>
cmp %esi,%ecx
jle 15 <func1+0x15>
mov %edx,%r10d
imul %r8d,%r10d
mov %edx,%eax
sub %edi,%eax
imul %eax,%r10d
jmp 20 <func1+0x20>
lea 0x1(%r8),%r10d
imul %ecx,%r10d
sub %r8d,%r10d
cmp %edi,%r8d
jle 31 <func1+0x31>
mov %r8d,%r9d
imul %edi,%r9d
sub %esi,%r9d
jmp 3b <func1+0x3b>
mov %esi,%r9d
imul %r8d,%r9d
add %edx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
sub %edx,%eax
add %r10d,%eax
add %r9d,%eax
sub %r8d,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a4 - a3 - a4;
    if (a2 < a4)
    {
        v7 = a3 * a5 * (a3 - a1);
    }
    else
    {
        v7 = a5 * a4 + a4 - a5;
    }
    if (a1 < a5)
    {
        v8 = a5 * a1 - a2;
    }
    else
    {
        v8 = a2 * a5 + a3;
    }
    v9 = a1 - (a4 + a5 - a4);
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 5
2 5
3 7
4 7
5 7
6 7
7 7
8 7
9 11
10 11
11 11
12 13
13 13
14 15
15 15
16 15
17 15
18 19
19 19
20 19
21 22
22 22
23 22
24 22
25 22
26 22
27 22
28 21
29 22
30 23
<<<sep_out_sample>>>
lea 0x2(%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
add %esi,%ecx
imul %r8d,%edx
imul %edx,%edi
lea 0x1(%rcx,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = a1 * (a3 * a5);
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += (a3 - a5) - a3;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a1)
    {
        if (a5 < a4)
        {
            v9 += a3 * a3;
        }
        else
        {
            v9 += a3 - a1;
        }
    }
    v11 = 0;
    for (v12 = 0; v12++; v12<a1)
    {
        if (v8 < a2)
        {
            v11 += a5 * a3 * a5;
        }
        else
        {
            v11 += a5 + a5 - a4;
        }
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 34
2 34
3 34
4 34
5 4
6 4
7 34
8 35
<<<sep_out_sample>>>
lea 0x2(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12, v13 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a2 + a5;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += a1 + (a1 - a3);
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a1)
    {
        v10 += a4 - a4 - a2;
    }
    v12 = 0;
    for (v13 = 0; v13++; v13<a2)
    {
        v12 += a4 * (a1 * a5);
    }
    return v12+v13+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 24
2 24
3 24
4 24
5 25
<<<sep_out_sample>>>
test %ecx,%ecx
jle 13 <func1+0x13>
mov %esi,%r9d
sub %ecx,%r9d
add %esi,%r9d
imul %r8d,%r9d
jmp 21 <func1+0x21>
mov %ecx,%r9d
imul %esi,%r9d
imul %esi,%r9d
add %r8d,%r9d
lea (%rdx,%rcx,1),%eax
mov %edx,%r10d
imul %edi,%r10d
cmp %r8d,%esi
cmovg %r10d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (v6 < a4)
    {
        v6 = a5 * (a2 + (a2 - a4));
    }
    else
    {
        v6 = (a2 * (a4 * a2)) + a5;
    }
    if (a5 < a2)
    {
        v7 = (a1 + a3 * a1) - a1;
    }
    else
    {
        v7 = a3 + a4;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 18
13 14
14 14
15 14
16 14
17 20
18 20
19 20
20 20
21 20
22 20
23 21
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
imul %esi,%ecx
sub %ecx,%eax
sub %r8d,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = (a1 - (a1 + a4)) * a2;
    v7 = a2 - a5;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 6
7 5
8 6
9 7
<<<sep_out_sample>>>
mov %ecx,%r9d
sub %edx,%r9d
add %r8d,%r9d
sub %edi,%r9d
mov %r8d,%eax
sub %ecx,%eax
cmp %r9d,%edx
jle 20 <func1+0x20>
mov %esi,%eax
imul %edi,%eax
add %r8d,%eax
sub %ecx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = (a5 + (a4 - a3)) - a1;
    if (v6 < a3)
    {
        v7 = ((a2 * a1) + a5) - a4;
    }
    else
    {
        v7 = a5 - a4;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 11
6 11
7 5
8 5
9 7
10 7
11 7
12 7
13 13
14 13
15 13
16 13
17 13
18 13
19 14
<<<sep_out_sample>>>
cmp %edx,%esi
jge 11 <func1+0x11>
mov %edi,%r10d
imul %edx,%r10d
imul %r10d,%r10d
jmp 21 <func1+0x21>
mov $0x1,%r10d
sub %r8d,%r10d
imul %edx,%r10d
sub %edi,%r10d
lea (%rsi,%r8,1),%r9d
cmp %r8d,%esi
jl 3a <func1+0x3a>
mov %r8d,%eax
imul %esi,%eax
mov %edx,%r9d
sub %eax,%r9d
imul %edi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
mov %ecx,%r9d
imul %esi,%r9d
imul %r8d,%r9d
add %r9d,%edi
add %edi,%eax
imul %ecx,%edx
imul %edx,%esi
add %esi,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a2 < a3)
    {
        v6 = (a1 * a3) * a1 * a3;
    }
    else
    {
        v6 = a3 - (a5 * a3) - a1;
    }
    if (a2 < a5)
    {
        v7 = a2 - (a3 - a3 - a5);
    }
    else
    {
        v7 = a1 * (a3 - a5 * a2);
    }
    v8 = a1 + a4 * a2 * a5;
    v9 = a5 + a3 * a4 * a2;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 10
11 14
12 12
13 12
14 18
15 18
16 18
17 18
18 18
19 22
20 22
21 22
22 22
23 22
24 22
25 20
26 20
27 20
28 20
29 22
30 21
31 21
32 21
33 22
34 23
<<<sep_out_sample>>>
mov %r8d,%eax
sub %edx,%eax
cmp %r8d,%edx
jge 12 <func1+0x12>
mov %edi,%eax
imul %edx,%eax
sub %r8d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a3 < a5)
    {
        v6 = (a1 * a3) - a5;
    }
    else
    {
        v6 = a5 - a3;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        if (v7 < a1)
        {
            v7 += a5 * a2;
        }
        else
        {
            v7 += a1 - a4 * a2;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 4
4 4
5 6
6 6
7 6
8 24
9 24
10 24
11 24
12 24
13 25
<<<sep_out_sample>>>
cmp %edi,%edx
jge 13 <func1+0x13>
mov %edx,%r9d
sub %ecx,%r9d
add %r8d,%r9d
imul %r8d,%r9d
jmp 1f <func1+0x1f>
lea -0x1(%rdx),%r9d
imul %edx,%r9d
imul %edi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
imul %esi,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a3 < a1)
    {
        v6 = a5 * ((a3 - a4) + a5);
    }
    else
    {
        v6 = (a3 * a3 - a3) * a1;
    }
    v7 = a5 * a2;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 13
12 13
13 13
14 13
15 13
16 12
17 13
18 14
<<<sep_out_sample>>>
mov %edx,%eax
imul %edx,%eax
add %edi,%eax
add %edx,%eax
add %eax,%esi
add %r8d,%esi
add %ecx,%esi
mov %edi,%eax
imul %ecx,%eax
mov %edx,%r9d
sub %eax,%r9d
mov %r9d,%eax
sub %edi,%eax
lea 0x1(%rsi,%rax,1),%esi
imul %r8d,%edx
add %edx,%edi
sub %ecx,%edi
lea (%rsi,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = (a3 - a1 * a4) - a1;
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        if (a5 < a3)
        {
            v7 += a2 * a5 * a2;
        }
        else
        {
            v7 += a2 * a4 * a3;
        }
    }
    v9 = a1 + a5 * a3 - a4;
    v10 = a3 * a3;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 19
4 19
5 19
6 19
7 19
8 4
9 4
10 4
11 4
12 4
13 4
14 19
15 17
16 17
17 17
18 19
19 20
<<<sep_out_sample>>>
lea (%rdi,%r8,1),%r9d
cmp %edi,%esi
jl 1a <func1+0x1a>
mov %edi,%eax
imul %esi,%eax
mov $0x1,%r9d
sub %eax,%r9d
imul %esi,%r9d
cmp %edx,%esi
jge 23 <func1+0x23>
lea (%rcx,%rcx,1),%eax
jmp 2f <func1+0x2f>
mov $0x1,%eax
sub %edi,%eax
imul %esi,%eax
add %edx,%eax
add %r8d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a2 < a1)
    {
        v6 = (a5 - a5 + a1) + a5;
    }
    else
    {
        v6 = a2 - (a1 * a2 * a2);
    }
    if (a2 < a3)
    {
        v7 = a4 + a4 + a1 - a1;
    }
    else
    {
        v7 = a2 - a2 * a1 + a3;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        if (a3 < a3)
        {
            v8 += a4 - (a2 - a3);
        }
        else
        {
            v8 += a1 - a2;
        }
    }
    v10 = (a5 - a4) + a4;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 4
3 4
4 10
5 10
6 10
7 10
8 10
9 12
10 12
11 14
12 14
13 18
14 18
15 18
16 18
17 33
18 33
19 33
20 33
21 33
22 33
23 33
24 34
<<<sep_out_sample>>>
lea (%rdi,%rdx,2),%eax
sub %ecx,%eax
add %eax,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (a1 < a1)
        {
            v6 += a3 - a2 * a4;
        }
        else
        {
            v6 += a3 - a5;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        if (a4 < a3)
        {
            v8 += a3 * a3 - a3;
        }
        else
        {
            v8 += a4 - a5;
        }
    }
    v10 = a3 - a4;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 29
2 29
3 29
4 29
5 29
6 30
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a4 + a5 + a1;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += a5 + a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 14
2 14
3 14
4 14
5 15
<<<sep_out_sample>>>
mov %r8d,%r9d
imul %edx,%r9d
add %esi,%r9d
sub %edi,%r9d
lea (%r8,%rsi,1),%eax
cmp %edi,%edx
jl 1f <func1+0x1f>
mov %ecx,%eax
imul %edi,%eax
add %edx,%eax
add %r8d,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = a5 * a3 + a2 - a1;
    if (a3 < a1)
    {
        v7 = a5 + a2;
    }
    else
    {
        v7 = (a3 + a4 * a1) + a5;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        if (a2 < a5)
        {
            v8 += a1 * a5 * a4;
        }
        else
        {
            v8 += a2 * a3 * a1;
        }
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a2)
    {
        v10 += a2 + (a2 * a5);
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 7
6 5
7 5
8 11
9 11
10 11
11 11
12 30
13 30
14 30
15 30
16 30
17 30
18 31
<<<sep_out_sample>>>
lea (%rsi,%rcx,1),%r9d
imul %esi,%r9d
imul %edx,%r9d
lea (%rdx,%rdi,1),%eax
add %esi,%eax
imul %r8d,%eax
add %r9d,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (a1 < a2)
        {
            v6 += (a1 + a5) * a5;
        }
        else
        {
            v6 += a4 * a2;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        if (a4 < a2)
        {
            v8 += (a1 + a3) - a3;
        }
        else
        {
            v8 += a1 - a2 + a5;
        }
    }
    v10 = a3 * (a2 * (a2 + a4));
    v11 = (a2 + (a3 + a1)) * a5;
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 28
2 28
3 28
4 29
5 29
6 29
7 30
8 30
9 30
10 30
11 30
12 30
13 31
<<<sep_out_sample>>>
cmp %r8d,%ecx
jge d <func1+0xd>
mov %ecx,%r10d
sub %edx,%r10d
jmp 1a <func1+0x1a>
mov %edi,%r10d
sub %ecx,%r10d
imul %edi,%r10d
add %ecx,%r10d
mov %edx,%r11d
imul %edi,%r11d
mov $0x1,%r9d
sub %r11d,%r9d
imul %edx,%r9d
test %edi,%edi
jle 3a <func1+0x3a>
mov %edi,%r11d
sub %edx,%r11d
jmp 45 <func1+0x45>
lea (%rdi,%rdi,1),%r11d
sub %esi,%r11d
imul %ecx,%r11d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea (%rcx,%r10,1),%eax
add %r9d,%eax
add %r11d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a4 < a5)
    {
        v6 = a4 - a3;
    }
    else
    {
        v6 = a4 - (a4 - a1) * a1;
    }
    v7 = a3 - a3 * a1 * a3;
    if (v8 < a1)
    {
        v8 = a1 - a3 + a1 - a1;
    }
    else
    {
        v8 = ((a1 + a1) - a2) * a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 10
10 12
11 12
12 12
13 12
14 12
15 13
16 13
17 15
18 15
19 15
20 19
21 19
22 19
23 21
24 21
25 21
26 21
27 21
28 21
29 21
30 22
<<<sep_out_sample>>>
cmp %edx,%edi
jge 12 <func1+0x12>
mov %edx,%r9d
sub %edi,%r9d
sub %edi,%r9d
sub %esi,%r9d
jmp 1f <func1+0x1f>
mov %r8d,%r9d
imul %r8d,%r9d
sub %esi,%r9d
add %edx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
mov %edi,%edx
sub %ecx,%edx
imul %edx,%ecx
imul %ecx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a1 < a3)
    {
        v6 = a3 - a1 - a1 - a2;
    }
    else
    {
        v6 = (a5 * a5 - a2) + a3;
    }
    v7 = a1 * ((a1 - a4) * a4);
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 13
13 13
14 13
15 13
16 13
17 12
18 12
19 12
20 12
21 13
22 14
<<<sep_out_sample>>>
mov %ecx,%r11d
imul %edx,%r11d
add %esi,%r11d
lea (%rsi,%rdx,1),%r10d
mov $0x0,%r9d
cmp %esi,%edx
jle 23 <func1+0x23>
lea 0x1(%rdx),%r9d
imul %esi,%r9d
sub %edx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a2 + a4 * a3;
    v7 = (a4 + a2 + a3) - a4;
    if (a2 < a3)
    {
        v8 = a3 * a2 + a2 - a3;
    }
    else
    {
        v8 = a2 - a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 5
5 12
6 6
7 6
8 8
9 8
10 8
11 14
12 14
13 14
14 14
15 14
16 14
17 14
18 15
<<<sep_out_sample>>>
mov %edi,%r10d
sub %edx,%r10d
lea (%rsi,%rsi,1),%r9d
cmp %esi,%r8d
cmovge %edx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a1 - a3;
    if (a5 < a2)
    {
        v7 = a2 + a2;
    }
    else
    {
        v7 = a3 - (a2 - a2);
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 7
4 7
5 7
6 13
7 13
8 13
9 13
10 13
11 13
12 14
<<<sep_out_sample>>>
mov %esi,%r9d
sub %edi,%r9d
test %edi,%edi
jle 11 <func1+0x11>
mov %esi,%eax
imul %edx,%eax
jmp 18 <func1+0x18>
lea 0x1(%r8),%eax
imul %edx,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a2 - a1;
    if (v7 < a1)
    {
        v7 = a2 * a3;
    }
    else
    {
        v7 = a3 + a3 * a5;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 5
4 5
5 7
6 7
7 7
8 11
9 11
10 13
11 13
12 13
13 13
14 13
15 13
16 14
<<<sep_out_sample>>>
lea (%rdi,%r8,1),%eax
mov %edi,%r9d
sub %esi,%r9d
cmp %esi,%edx
cmovge %r9d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a3 < a2)
    {
        v6 = a1 + a5;
    }
    else
    {
        v6 = a1 - a2;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += a4 * a4 + a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 6
6 17
7 17
8 17
9 17
10 17
11 18
<<<sep_out_sample>>>
mov %esi,%r11d
sub %ecx,%r11d
imul %esi,%r11d
add %r8d,%r11d
cmp %edi,%r8d
jle 1f <func1+0x1f>
lea (%r8,%rsi,1),%r10d
imul %esi,%r10d
add %r8d,%r10d
jmp 2d <func1+0x2d>
mov %edi,%r10d
sub %ecx,%r10d
add $0x1,%r10d
imul %r8d,%r10d
cmp %ecx,%esi
jle 3c <func1+0x3c>
mov %edi,%r9d
sub %r8d,%r9d
add %edx,%r9d
jmp 43 <func1+0x43>
mov %esi,%r9d
imul %edi,%r9d
add %edx,%edi
add %esi,%edi
add %r8d,%edi
add %ecx,%edi
add %r11d,%edi
add %r10d,%edi
add %r9d,%edi
sub %r8d,%esi
add %esi,%edx
sub %ecx,%edx
lea (%rdi,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a5 - (a4 - a2) * a2;
    if (a1 < a5)
    {
        v7 = (a2 * (a5 + a2)) + a5;
    }
    else
    {
        v7 = a5 + (a1 - a4) * a5;
    }
    if (a4 < a2)
    {
        v8 = a1 - a5 + a3;
    }
    else
    {
        v8 = a2 * a1;
    }
    v9 = (a2 - a5) + a3 - a4;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 5
6 5
7 7
8 7
9 7
10 7
11 11
12 11
13 11
14 11
15 13
16 13
17 15
18 15
19 15
20 15
21 19
22 19
23 22
24 22
25 22
26 22
27 22
28 22
29 22
30 21
31 21
32 21
33 22
34 23
<<<sep_out_sample>>>
mov %edi,%r9d
sub %r8d,%r9d
test %edi,%edi
jle 18 <func1+0x18>
mov %ecx,%eax
imul %esi,%eax
imul %ecx,%eax
mov %r8d,%r9d
sub %eax,%r9d
cmp %edi,%ecx
jle 25 <func1+0x25>
mov %ecx,%r10d
imul %esi,%r10d
jmp 32 <func1+0x32>
mov %edx,%r10d
imul %ecx,%r10d
sub %r8d,%r10d
add %edi,%r10d
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %eax,%r9d
lea (%r9,%r10,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (a3 < a4)
        {
            v6 += a2 - a1 - a2;
        }
        else
        {
            v6 += (a3 - a3) * a2;
        }
    }
    if (v6 < a1)
    {
        v8 = a5 - a4 * a2 * a4;
    }
    else
    {
        v8 = a5 - (a5 - a1 + a5);
    }
    if (a1 < a4)
    {
        v9 = a4 * a2;
    }
    else
    {
        v9 = a1 + ((a3 * a4) - a5);
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a4)
    {
        if (a3 < a3)
        {
            v10 += (a4 + a4) + a2;
        }
        else
        {
            v10 += a3 + a2 * a5;
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 16
4 16
5 18
6 18
7 18
8 18
9 18
10 24
11 24
12 26
13 26
14 26
15 30
16 30
17 30
18 30
19 44
20 44
21 44
22 44
23 44
24 44
25 45
<<<sep_out_sample>>>
mov %esi,%r10d
imul %edx,%r10d
lea (%rsi,%rcx,1),%r9d
cmp %edi,%edx
jg 23 <func1+0x23>
mov %edx,%r11d
imul %edi,%r11d
mov $0x1,%r9d
sub %r11d,%r9d
imul %edi,%r9d
test %ecx,%ecx
jle 2f <func1+0x2f>
mov %esi,%r11d
sub %r8d,%r11d
jmp 3f <func1+0x3f>
mov $0x1,%r11d
sub %edi,%r11d
imul %esi,%r11d
add %r8d,%r11d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea (%rcx,%r10,1),%eax
add %r9d,%eax
add %r11d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a2 * a3;
    if (a1 < a3)
    {
        v7 = ((a1 - a1) + a2) + a4;
    }
    else
    {
        v7 = a1 - a3 * a1 * a1;
    }
    if (v8 < a4)
    {
        v8 = a2 - a5;
    }
    else
    {
        v8 = a5 - (a2 * a1 - a2);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 7
4 5
5 5
6 11
7 11
8 11
9 11
10 11
11 13
12 13
13 15
14 15
15 15
16 19
17 19
18 19
19 19
20 21
21 21
22 21
23 21
24 21
25 21
26 21
27 22
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add $0x1,%r8d
imul %edi,%r8d
imul %r8d,%ecx
add %ecx,%eax
add %esi,%edx
imul %edx,%edi
sub %edi,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = ((a5 * a1) + a1) * a4;
    v7 = a2 - a1 * (a2 + a3);
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 4
7 4
8 6
9 5
10 5
11 5
12 6
13 7
<<<sep_out_sample>>>
lea (%rdi,%r8,1),%r10d
mov $0x0,%eax
cmp %esi,%r8d
jg 15 <func1+0x15>
mov %esi,%eax
neg %eax
sub %r8d,%eax
mov %r8d,%r9d
sub %edi,%r9d
cmp %esi,%r8d
jl 2c <func1+0x2c>
mov %r8d,%r9d
sub %esi,%r9d
add %edi,%r9d
sub %ecx,%r9d
add %edx,%edi
add %esi,%edi
add %r8d,%edi
add %edi,%ecx
add %r10d,%ecx
add %ecx,%eax
add %r9d,%eax
imul %esi,%edx
sub %edx,%r8d
add %r8d,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a5 + a4 - (a4 - a1);
    if (a2 < a5)
    {
        v7 = a2 - a2;
    }
    else
    {
        v7 = a3 - (a3 + a2 + a5);
    }
    if (a5 < a2)
    {
        v8 = a5 - ((a5 + a1) - a5);
    }
    else
    {
        v8 = (a1 + (a5 - a2)) - a4;
    }
    v9 = (a5 - a3 * a2) + a2;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 7
3 5
4 5
5 11
6 11
7 11
8 15
9 15
10 13
11 13
12 19
13 19
14 19
15 19
16 22
17 22
18 22
19 22
20 22
21 22
22 22
23 21
24 21
25 21
26 22
27 23
<<<sep_out_sample>>>
lea (%rsi,%r8,1),%r9d
cmp %r8d,%edx
jl 13 <func1+0x13>
lea (%rcx,%rdx,1),%r9d
sub %esi,%r9d
add %edi,%r9d
mov $0x0,%eax
mov %ecx,%r10d
imul %edi,%r10d
cmp %esi,%edx
cmovl %r10d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %ecx,%r8d
add %r9d,%r8d
add %r8d,%eax
lea (%rax,%rcx,2),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a3 < a5)
    {
        v6 = (a2 + a4 + a5) - a4;
    }
    else
    {
        v6 = a4 + a3 - a2 + a1;
    }
    if (a3 < a2)
    {
        v7 = a4 * a1;
    }
    else
    {
        v7 = a1 * a5 - a1 * a5;
    }
    v8 = a4 + a4;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 6
2 4
3 4
4 10
5 10
6 10
7 18
8 14
9 14
10 14
11 14
12 21
13 21
14 21
15 21
16 21
17 21
18 21
19 22
<<<sep_out_sample>>>
test %esi,%esi
jle 12 <func1+0x12>
lea (%rsi,%rcx,1),%eax
mov %r8d,%r10d
sub %eax,%r10d
sub %ecx,%r10d
jmp 20 <func1+0x20>
mov %ecx,%r10d
imul %edi,%r10d
imul %esi,%r10d
sub %r8d,%r10d
cmp %edx,%edi
jge 34 <func1+0x34>
mov %edi,%eax
imul %esi,%eax
imul %edi,%eax
mov %esi,%r9d
sub %eax,%r9d
jmp 41 <func1+0x41>
mov %edi,%r9d
imul %ecx,%r9d
sub %r8d,%r9d
sub %r8d,%r9d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (a2 < a5)
        {
            v6 += a1 - a4;
        }
        else
        {
            v6 += (a3 * a3) * a1;
        }
    }
    if (v6 < a2)
    {
        v8 = (a5 - (a2 + a4)) - a4;
    }
    else
    {
        v8 = a4 * a1 * a2 - a5;
    }
    if (a1 < a3)
    {
        v9 = a2 - (a1 * a2) * a1;
    }
    else
    {
        v9 = ((a1 * a4) - a5) - a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 18
7 18
8 22
9 22
10 22
11 22
12 24
13 24
14 26
15 26
16 26
17 26
18 26
19 26
20 30
21 30
22 30
23 30
24 32
25 32
26 32
27 32
28 32
29 32
30 33
<<<sep_out_sample>>>
mov %esi,%r9d
imul %r8d,%r9d
imul %ecx,%r9d
add %esi,%r9d
test %edx,%edx
jle 18 <func1+0x18>
mov %edx,%eax
sub %ecx,%eax
jmp 23 <func1+0x23>
mov %esi,%eax
imul %esi,%eax
imul %esi,%eax
imul %edx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a2 * a5 * a4 + a2;
    if (v7 < a3)
    {
        v7 = a3 - a4;
    }
    else
    {
        v7 = (a2 * a2) * a2 * a3;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 5
6 5
7 7
8 7
9 7
10 11
11 11
12 11
13 11
14 13
15 13
16 13
17 13
18 13
19 13
20 14
<<<sep_out_sample>>>
test %edx,%edx
jle 14 <func1+0x14>
mov %edi,%r9d
imul %ecx,%r9d
imul %esi,%r9d
add %ecx,%r9d
jmp 1e <func1+0x1e>
lea (%rcx,%r8,1),%r9d
add %edi,%r9d
add %edx,%r9d
lea (%r8,%rdi,1),%eax
cmp %esi,%edx
jle 30 <func1+0x30>
mov %esi,%eax
imul %r8d,%eax
sub %edi,%eax
sub %edx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (v6 < a3)
    {
        v6 = a1 * a4 * a2 + a4;
    }
    else
    {
        v6 = ((a4 + a5) + a1) + a3;
    }
    if (a2 < a3)
    {
        v7 = (a2 * a5 - a1) - a3;
    }
    else
    {
        v7 = a5 + a1;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 18
12 12
13 12
14 14
15 14
16 14
17 14
18 20
19 20
20 20
21 20
22 20
23 20
24 21
<<<sep_out_sample>>>
mov $0x0,%eax
test %edi,%edi
jg 13 <func1+0x13>
mov %edx,%eax
imul %esi,%eax
imul %ecx,%eax
sub %edx,%eax
add %edi,%edx
add %edx,%esi
add %r8d,%esi
add %esi,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (v6 < a1)
    {
        v6 = a1 - a1;
    }
    else
    {
        v6 = ((a3 * a2) * a4) - a3;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += a5 + a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 6
2 4
3 4
4 10
5 10
6 10
7 10
8 17
9 17
10 17
11 17
12 17
13 18
<<<sep_out_sample>>>
mov %edi,%r9d
sub %esi,%r9d
cmp $0x1,%edx
mov $0x0,%eax
cmovle %r9d,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (a4 < a3)
        {
            v6 += a2 + a5 + a5;
        }
        else
        {
            v6 += a3 + a2 - a5;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += a4 * (a1 + a3);
    }
    if (v7 < a3)
    {
        v10 = a5 - a5;
    }
    else
    {
        v10 = a1 - a2;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 27
2 27
3 27
4 27
5 27
6 29
7 29
8 29
9 29
10 29
11 30
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (a2 < a3)
        {
            v6 += a4 + a1 * a1;
        }
        else
        {
            v6 += a5 + a1 - a5;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        if (v8 < a2)
        {
            v8 += a1 - (a3 * a3);
        }
        else
        {
            v8 += (a3 * a5) + a3;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 28
2 28
3 28
4 28
5 29
<<<sep_out_sample>>>
mov $0x1,%r10d
sub %edx,%r10d
imul %ecx,%r10d
sub %edi,%r10d
cmp %esi,%r8d
jge 24 <func1+0x24>
mov %edx,%r9d
sub %edi,%r9d
add %ecx,%r9d
imul %esi,%r9d
jmp 30 <func1+0x30>
mov %r8d,%r9d
sub %edi,%r9d
add %edx,%r9d
sub %ecx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
imul %r8d,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a4 - a3 * a4 - a1;
    if (a5 < a2)
    {
        v7 = a2 * ((a3 - a1) + a4);
    }
    else
    {
        v7 = a3 - (a1 - a5) - a4;
    }
    v8 = a5 * a5;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 5
6 5
7 7
8 7
9 7
10 7
11 7
12 11
13 11
14 11
15 11
16 14
17 14
18 14
19 14
20 14
21 14
22 13
23 14
24 15
<<<sep_out_sample>>>
lea (%rdi,%rcx,1),%r9d
lea (%rdi,%r9,1),%eax
add %edx,%eax
add %eax,%esi
add %esi,%r8d
lea (%rdx,%rcx,2),%eax
lea 0x1(%r8,%rax,1),%edx
imul %r9d,%ecx
sub %edi,%ecx
lea (%rdx,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a4 + a3;
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a2 * a3 - a1;
    }
    v9 = (a1 + a4) * a4 - a1;
    v10 = a1 + a4;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 12
3 12
4 12
5 12
6 4
7 12
8 10
9 10
10 12
11 13
<<<sep_out_sample>>>
lea (%r8,%rdx,1),%eax
mov %esi,%r9d
sub %eax,%r9d
mov %r9d,%eax
cmp %ecx,%r8d
jge 19 <func1+0x19>
mov %ecx,%eax
sub %esi,%eax
imul %esi,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a5 < a4)
    {
        v6 = a4 * a2 - a2 * a2;
    }
    else
    {
        v6 = a2 - (a5 + a3);
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        if (a2 < a4)
        {
            v7 += a4 + (a5 + a3);
        }
        else
        {
            v7 += a2 * a3;
        }
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        if (v6 < a4)
        {
            v9 += a3 + (a1 - a1);
        }
        else
        {
            v9 += a3 * a2;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 4
6 4
7 6
8 6
9 6
10 36
11 36
12 36
13 36
14 36
15 37
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%r9d
add %esi,%r9d
add %r8d,%r9d
add %ecx,%r9d
mov %edx,%eax
imul %ecx,%eax
imul %edi,%eax
imul %r8d,%eax
add %r9d,%eax
mov %ecx,%r10d
sub %r8d,%r10d
add %r10d,%eax
imul %edi,%edx
imul %esi,%ecx
add %ecx,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a2 < a2)
    {
        v6 = ((a1 - a4) - a4) + a3;
    }
    else
    {
        v6 = a3 * a4 * a1 * a5;
    }
    v7 = (a3 + a4) - a5 - a3;
    v8 = a1 * a3 + a2 * a4;
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        if (a3 < a2)
        {
            v9 += a2 + a2 - a2;
        }
        else
        {
            v9 += a1 + a4;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 26
2 26
3 26
4 26
5 10
6 10
7 10
8 10
9 26
10 12
11 12
12 26
13 13
14 13
15 13
16 26
17 27
<<<sep_out_sample>>>
test %edx,%edx
jle c <func1+0xc>
mov %esi,%r9d
sub %r8d,%r9d
jmp 18 <func1+0x18>
mov %esi,%r9d
sub %edx,%r9d
add %ecx,%r9d
add %edi,%r9d
lea (%rdx,%rsi,1),%eax
test %ecx,%ecx
jg 24 <func1+0x24>
mov %edx,%eax
imul %esi,%eax
cmp %edi,%edx
jge 38 <func1+0x38>
mov %edi,%r10d
imul %edx,%r10d
add %r8d,%r10d
imul %edx,%r10d
jmp 46 <func1+0x46>
mov %edi,%r10d
sub %r8d,%r10d
imul %ecx,%r10d
imul %edi,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (v6 < a3)
    {
        v6 = a2 - a5;
    }
    else
    {
        v6 = (a2 - a3 + a4) + a1;
    }
    if (v7 < a4)
    {
        v7 = a3 + a2;
    }
    else
    {
        v7 = a3 * a2;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += (a5 - a5) * a1;
    }
    if (a3 < a1)
    {
        v10 = a3 * (a1 * a3 + a5);
    }
    else
    {
        v10 = ((a1 - a5) * a4) * a1;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 10
10 14
11 12
12 12
13 18
14 18
15 25
16 25
17 27
18 27
19 27
20 27
21 27
22 31
23 31
24 31
25 31
26 33
27 33
28 33
29 33
30 33
31 33
32 33
33 34
<<<sep_out_sample>>>
test %ecx,%ecx
jle 15 <func1+0x15>
mov %edi,%r9d
imul %r8d,%r9d
sub $0x1,%r9d
imul %edx,%r9d
jmp 24 <func1+0x24>
mov %ecx,%r9d
imul %esi,%r9d
add $0x1,%r9d
imul %esi,%r9d
cmp %esi,%r9d
jge 30 <func1+0x30>
mov %edx,%eax
imul %ecx,%eax
jmp 39 <func1+0x39>
mov %ecx,%eax
imul %esi,%eax
sub %edx,%eax
add %edi,%eax
lea (%r8,%rdi,1),%r10d
cmp $0x1,%r8d
jle 51 <func1+0x51>
mov %edi,%r10d
sub %r8d,%r10d
imul %edx,%r10d
imul %edx,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (v6 < a4)
    {
        v6 = a3 * (a1 * a5) - a3;
    }
    else
    {
        v6 = a2 * (a4 * a2) + a2;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += a3 - a2;
    }
    if (v6 < a2)
    {
        v9 = a3 * a4;
    }
    else
    {
        v9 = a4 * a2 - a3 + a1;
    }
    if (v8 < a5)
    {
        v10 = (a1 - a5) * a3 * a3;
    }
    else
    {
        v10 = a5 + a1;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 17
13 17
14 19
15 19
16 19
17 23
18 23
19 23
20 23
21 31
22 25
23 25
24 27
25 27
26 27
27 27
28 33
29 33
30 33
31 33
32 33
33 33
34 33
35 34
<<<sep_out_sample>>>
cmp %ecx,%esi
jge b <func1+0xb>
mov %edx,%eax
imul %edx,%eax
jmp 16 <func1+0x16>
mov %ecx,%eax
imul %r8d,%eax
imul %edi,%eax
add %ecx,%eax
test %r8d,%r8d
jle 2d <func1+0x2d>
lea (%r8,%rsi,1),%r9d
add %edi,%r9d
mov %edx,%r11d
sub %r9d,%r11d
mov %r11d,%r9d
jmp 31 <func1+0x31>
lea (%rcx,%r8,2),%r9d
cmp %ecx,%edi
jle 42 <func1+0x42>
lea 0x1(%rsi),%r10d
imul %esi,%r10d
add %edx,%r10d
jmp 4c <func1+0x4c>
lea (%rdx,%r8,1),%r10d
add %edi,%r10d
add %esi,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a2 + (a1 + a2);
    }
    if (a2 < a4)
    {
        v8 = a3 * a3;
    }
    else
    {
        v8 = a4 + a4 * a5 * a1;
    }
    if (v6 < a5)
    {
        v9 = a3 - (a5 + a2 + a1);
    }
    else
    {
        v9 = a4 + a5 + a5;
    }
    if (a4 < a1)
    {
        v10 = a2 * a2 + a2 + a3;
    }
    else
    {
        v10 = a3 + a5 + a1 + a2;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 15
7 15
8 15
9 15
10 17
11 17
12 19
13 19
14 19
15 19
16 19
17 19
18 23
19 25
20 25
21 27
22 27
23 27
24 27
25 31
26 31
27 31
28 33
29 33
30 33
31 33
32 33
33 33
34 33
35 34
<<<sep_out_sample>>>
mov %r8d,%r11d
imul %edi,%r11d
imul %ecx,%r11d
imul %r8d,%r11d
cmp %edx,%edi
jle 1f <func1+0x1f>
mov %ecx,%r10d
sub %r8d,%r10d
imul %edx,%r10d
jmp 2d <func1+0x2d>
mov %edx,%r10d
imul %r8d,%r10d
imul %edi,%r10d
sub %ecx,%r10d
cmp %edx,%ecx
jle 3c <func1+0x3c>
mov %esi,%r9d
sub %edx,%r9d
add %r9d,%r9d
jmp 45 <func1+0x45>
mov %esi,%eax
imul %esi,%eax
lea (%rax,%r8,2),%r9d
add %edi,%edx
add %esi,%edx
add %r8d,%edx
add %ecx,%edx
add %r11d,%edx
add %r10d,%edx
add %r9d,%edx
add %edi,%ecx
imul %r8d,%r8d
sub %r8d,%ecx
lea (%rdx,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = ((a5 * a1) * a4) * a5;
    if (a3 < a1)
    {
        v7 = a3 * a4 - a5 * a3;
    }
    else
    {
        v7 = a3 * a5 * a1 - a4;
    }
    if (a3 < a4)
    {
        v8 = a2 - (a3 - a2) - a3;
    }
    else
    {
        v8 = a5 + a2 * a2 + a5;
    }
    v9 = (a1 + a4) - a5 * a5;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 5
6 5
7 7
8 7
9 7
10 7
11 11
12 11
13 11
14 11
15 13
16 13
17 15
18 15
19 15
20 15
21 19
22 19
23 19
24 22
25 22
26 22
27 22
28 22
29 22
30 22
31 21
32 21
33 21
34 22
35 23
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (a3 < a5)
        {
            v6 += a4 - a2 + a4;
        }
        else
        {
            v6 += a4 - a1 + a3;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        if (a1 < a5)
        {
            v8 += a5 + a3;
        }
        else
        {
            v8 += a2 - a2 + a3;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 28
2 28
3 28
4 28
5 29
<<<sep_out_sample>>>
mov %r8d,%r10d
imul %r8d,%r10d
lea (%rdi,%rsi,1),%eax
mov %ecx,%r9d
sub %esi,%r9d
test %esi,%esi
cmovg %eax,%r9d
cmp %edx,%ecx
jle 25 <func1+0x25>
mov %esi,%eax
imul %r8d,%eax
lea (%rax,%rcx,2),%eax
jmp 2b <func1+0x2b>
mov %r8d,%eax
imul %edi,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (v7 < a1)
        {
            v6 += a2 * a1;
        }
        else
        {
            v6 += a4 + a5 - a1;
        }
    }
    v8 = a5 * a5;
    if (v9 < a2)
    {
        v9 = a4 - a4 + a1 + a2;
    }
    else
    {
        v9 = a4 - a2 + a2 - a2;
    }
    if (a3 < a4)
    {
        v10 = (a2 * a5) + (a4 + a4);
    }
    else
    {
        v10 = a5 * a1 - (a3 - a3);
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 19
4 19
5 19
6 19
7 19
8 25
9 25
10 27
11 27
12 27
13 27
14 31
15 31
16 33
17 33
18 33
19 33
20 33
21 33
22 33
23 34
<<<sep_out_sample>>>
mov %ecx,%r9d
sub %edx,%r9d
imul %esi,%r9d
mov %edi,%eax
sub %ecx,%eax
cmp %r8d,%edx
jle 1a <func1+0x1a>
mov %ecx,%eax
imul %ecx,%eax
sub %edx,%eax
test %r8d,%r8d
jle 2b <func1+0x2b>
mov %edi,%r10d
imul %ecx,%r10d
neg %r10d
jmp 36 <func1+0x36>
mov %edx,%r10d
imul %r8d,%r10d
imul %ecx,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %r9d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (a2 < a4)
        {
            v6 += a3 - a4 * a4;
        }
        else
        {
            v6 += a4 + (a1 + a2);
        }
    }
    v8 = (a4 - a3) * a2;
    if (a5 < a3)
    {
        v9 = (a4 * a4) - a3;
    }
    else
    {
        v9 = a1 - a4;
    }
    if (v6 < a5)
    {
        v10 = a5 - a5 - a1 * a4;
    }
    else
    {
        v10 = a3 * a5 * a4;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 16
4 23
5 23
6 17
7 17
8 19
9 19
10 19
11 25
12 25
13 27
14 27
15 27
16 27
17 31
18 31
19 31
20 33
21 33
22 33
23 33
24 33
25 33
26 33
27 34
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
lea (%r8,%rcx,1),%eax
sub %esi,%eax
sub %ecx,%esi
add %esi,%edx
lea 0x1(%rax,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = a1 - (a1 + a1 + a2);
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        if (a3 < a2)
        {
            v7 += a1 * a3 + a4;
        }
        else
        {
            v7 += a2 + a5;
        }
    }
    v9 = a2 - a4 + a3 + a1;
    v10 = 0;
    for (v11 = 0; v11++; v11<a3)
    {
        if (v6 < a3)
        {
            v10 += a4 + (a1 + a3);
        }
        else
        {
            v10 += a1 - a2;
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 30
2 30
3 30
4 30
5 4
6 17
7 17
8 30
9 31
<<<sep_out_sample>>>
lea 0x2(%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
add %esi,%ecx
imul %r8d,%r8d
lea 0x1(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = (a5 + (a4 - a4)) * a5;
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += a3 - (a4 + a3);
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        if (v6 < a5)
        {
            v9 += a1 * a1 + a3;
        }
        else
        {
            v9 += a1 * a5;
        }
    }
    v11 = 0;
    for (v12 = 0; v12++; v12<a5)
    {
        v11 += a2 * a1;
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 27
2 27
3 27
4 27
5 4
6 27
7 28
<<<sep_out_sample>>>
cmp %edi,%ecx
jle 10 <func1+0x10>
mov %r8d,%eax
sub %ecx,%eax
imul %edi,%eax
sub %esi,%eax
jmp 18 <func1+0x18>
lea -0x1(%rsi),%eax
imul %edx,%eax
add %ecx,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a4 * a4;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += a2 - a4;
    }
    if (a1 < a4)
    {
        v10 = (a1 * (a5 - a4)) - a2;
    }
    else
    {
        v10 = a4 - (a3 - a2 * a3);
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 14
2 14
3 16
4 16
5 16
6 16
7 16
8 20
9 20
10 20
11 22
12 22
13 22
14 22
15 22
16 23
<<<sep_out_sample>>>
mov %edi,%r10d
sub %edx,%r10d
add %esi,%r10d
imul %edx,%r10d
lea (%rdi,%r8,1),%r9d
cmp %edx,%edi
jge 21 <func1+0x21>
mov %edx,%r9d
sub %edi,%r9d
add %esi,%r9d
add %r8d,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a3 * (a1 - a3 + a2);
    if (a1 < a3)
    {
        v7 = a2 + (a3 - a1) + a5;
    }
    else
    {
        v7 = a1 - (a4 - a4) + a5;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 11
6 5
7 5
8 7
9 7
10 7
11 7
12 13
13 13
14 13
15 13
16 13
17 13
18 14
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %r8d,%edx
add %edx,%ecx
mov $0x1,%eax
sub %r8d,%eax
imul %esi,%eax
add %eax,%r8d
add %r8d,%ecx
lea (%rcx,%rsi,2),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a5 - (a5 * a2 - a2);
    v7 = a2 + a2;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 4
7 4
8 4
9 6
10 6
11 7
<<<sep_out_sample>>>
cmp %esi,%edi
jge 10 <func1+0x10>
mov %ecx,%eax
imul %edi,%eax
imul %ecx,%eax
add %edx,%eax
jmp 19 <func1+0x19>
mov %esi,%eax
not %eax
imul %ecx,%eax
add %esi,%eax
add %edx,%edi
add %edi,%esi
add %r8d,%esi
add %esi,%ecx
add %eax,%ecx
lea 0x1(%rcx,%r8,2),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a1 < a2)
    {
        v6 = a3 + ((a4 * a1) * a4);
    }
    else
    {
        v6 = a2 - (a4 + a4 * a2);
    }
    if (a4 < a4)
    {
        v7 = (a5 * a5 + a4) - a5;
    }
    else
    {
        v7 = a5 + a5;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += a3 - a4 - a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 25
13 25
14 25
15 25
16 25
17 25
18 26
<<<sep_out_sample>>>
cmp %edi,%esi
jge b <func1+0xb>
lea (%rsi,%rdi,2),%eax
add %edx,%eax
jmp 14 <func1+0x14>
mov %edi,%eax
sub %edx,%eax
sub %ecx,%eax
imul %edi,%eax
add %edi,%edx
add %esi,%edx
add %r8d,%edx
add %edx,%ecx
lea 0x1(%rax,%rcx,1),%edx
lea 0x1(%rsi),%eax
imul %eax,%r8d
sub %esi,%r8d
lea (%rdx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a2 < a1)
    {
        v6 = ((a1 + a2) + a1) + a3;
    }
    else
    {
        v6 = (a1 - a3 - a4) * a1;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += (a1 * a5) * a3;
    }
    v9 = (a5 + a2 * a5) - a2;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 10
10 18
11 18
12 18
13 18
14 18
15 17
16 17
17 17
18 18
19 19
<<<sep_out_sample>>>
mov %ecx,%eax
sub %edi,%eax
cmp %esi,%edi
jge 11 <func1+0x11>
lea (%rdx,%r8,1),%eax
sub %esi,%eax
imul %edx,%eax
lea (%rdi,%rdx,1),%r9d
add %r9d,%esi
add %esi,%r8d
add %ecx,%r8d
lea 0x1(%rax,%r8,1),%esi
imul %edi,%ecx
imul %ecx,%edi
sub %edx,%edi
lea (%rsi,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a1 < a2)
    {
        v6 = (a3 + a5 - a2) * a3;
    }
    else
    {
        v6 = a2 - (a1 + a2) + a4;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        if (v6 < a5)
        {
            v7 += a5 + a5 + a3;
        }
        else
        {
            v7 += a3 * a2 - a5;
        }
    }
    v9 = a1 * a4 * a1 - a3;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 4
4 4
5 6
6 6
7 6
8 25
9 25
10 25
11 25
12 25
13 24
14 24
15 24
16 25
17 26
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a2 + a3 * a2;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        if (a3 < a4)
        {
            v8 += a3 - a5;
        }
        else
        {
            v8 += (a2 - a2) + a3;
        }
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a3)
    {
        v10 += a5 - a5;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 26
2 26
3 26
4 26
5 27
<<<sep_out_sample>>>
lea 0x1(%rdi),%r9d
imul %edi,%r9d
add %r8d,%r9d
mov %ecx,%eax
sub %r8d,%eax
cmp %ecx,%esi
jge 1b <func1+0x1b>
lea (%rsi,%rdx,1),%eax
sub %edi,%eax
sub %edi,%eax
test %ecx,%ecx
jle 2f <func1+0x2f>
mov %ecx,%r11d
imul %edi,%r11d
lea (%rdx,%rcx,1),%r10d
add %r11d,%r10d
jmp 3c <func1+0x3c>
mov %esi,%r10d
imul %edx,%r10d
sub %ecx,%r10d
add %r8d,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a5 + (a1 + a1 * a1);
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += a3 - a5 - a2;
    }
    if (a2 < a4)
    {
        v9 = (a2 + a3 - a1) - a1;
    }
    else
    {
        v9 = a4 - a5;
    }
    if (v10 < a4)
    {
        v10 = a4 * a1 + (a3 + a4);
    }
    else
    {
        v10 = ((a2 * a3) - a4) + a5;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 16
5 16
6 10
7 10
8 12
9 12
10 12
11 18
12 18
13 20
14 20
15 20
16 20
17 20
18 24
19 24
20 24
21 24
22 26
23 26
24 26
25 26
26 26
27 26
28 26
29 27
<<<sep_out_sample>>>
mov %ecx,%eax
sub %r8d,%eax
lea (%rax,%rdx,2),%r9d
cmp $0x1,%ecx
jle 16 <func1+0x16>
lea 0x1(%rdx),%eax
imul %edx,%eax
jmp 24 <func1+0x24>
mov %r8d,%r10d
imul %ecx,%r10d
mov %edx,%eax
sub %esi,%eax
add %r10d,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
lea (%rcx,%r8,2),%eax
lea (%rax,%rsi,1),%eax
lea 0x1(%r9,%rax,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a2 - a2 + a5;
    v7 = a3 + (a4 - a5 + a3);
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        if (v8 < a2)
        {
            v8 += a2 - a2 + a5;
        }
        else
        {
            v8 += a1 - a5 + a5;
        }
    }
    if (v9 < a4)
    {
        v10 = a3 + (a3 * a3);
    }
    else
    {
        v10 = a5 * a4 + (a3 - a2);
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 5
2 5
3 5
4 18
5 18
6 20
7 20
8 20
9 24
10 24
11 24
12 24
13 24
14 26
15 26
16 26
17 26
18 26
19 26
20 27
<<<sep_out_sample>>>
lea (%rcx,%rdi,1),%r9d
mov %edi,%eax
sub %edx,%eax
cmp %edi,%r8d
jge 16 <func1+0x16>
lea 0x1(%rdx),%eax
imul %r8d,%eax
sub %ecx,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a1 + (a5 - (a5 - a4));
    if (a5 < a1)
    {
        v7 = (a5 * a3) + a5 - a4;
    }
    else
    {
        v7 = a1 - a3;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += a5 + a3 + a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 11
3 11
4 5
5 5
6 7
7 7
8 7
9 18
10 18
11 18
12 18
13 18
14 18
15 19
<<<sep_out_sample>>>
lea (%rdi,%rcx,2),%eax
add %edx,%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
mov %esi,%r9d
imul %esi,%r9d
sub %r9d,%edi
add %edi,%esi
add %eax,%esi
sub %ecx,%edx
sub %ecx,%r8d
add %r8d,%edx
lea 0x1(%rsi,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a3 < a3)
    {
        v6 = ((a1 - a5) * a4) * a3;
    }
    else
    {
        v6 = a1 - a2 * a2 + a2;
    }
    v7 = a3 - a4 - (a4 - a5);
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += (a1 + a4) + a2;
    }
    if (a2 < a2)
    {
        v10 = a3 - a5;
    }
    else
    {
        v10 = a4 + a4 - a5 + a5;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 26
2 26
3 26
4 26
5 26
6 10
7 10
8 10
9 10
10 26
11 12
12 12
13 12
14 26
15 27
<<<sep_out_sample>>>
mov %r8d,%eax
sub %edi,%eax
cmp %esi,%ecx
jle 18 <func1+0x18>
mov %r8d,%r9d
sub %ecx,%r9d
mov %r8d,%eax
imul %esi,%eax
add %r9d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (a5 < a4)
        {
            v6 += (a5 - a1) * a2;
        }
        else
        {
            v6 += (a4 - a5) + a1;
        }
    }
    if (a2 < a4)
    {
        v8 = a5 - a4 + a5 * a2;
    }
    else
    {
        v8 = a5 - a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 22
2 22
3 16
4 16
5 18
6 18
7 18
8 18
9 18
10 24
11 24
12 24
13 24
14 24
15 25
<<<sep_out_sample>>>
mov %edx,%eax
imul %esi,%eax
add %ecx,%eax
add %r8d,%eax
lea (%rdi,%rdx,1),%r9d
cmp $0x1,%ecx
jle 1d <func1+0x1d>
lea (%rdx,%rcx,2),%r10d
imul %edx,%r10d
jmp 23 <func1+0x23>
mov $0x0,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (v7 < a5)
        {
            v6 += (a5 * a3) - a4;
        }
        else
        {
            v6 += (a5 * a4) - a5;
        }
    }
    if (a4 < a4)
    {
        v8 = a4 + a1;
    }
    else
    {
        v8 = (a3 * a2) + a4 + a5;
    }
    v9 = a1 + a3;
    if (v7 < a4)
    {
        v10 = (a4 + a3 + a4) * a3;
    }
    else
    {
        v10 = a4 - a4;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 22
4 22
5 24
6 25
7 25
8 27
9 27
10 27
11 31
12 33
13 33
14 33
15 33
16 33
17 33
18 33
19 34
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%eax
add %r8d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a1 - a4 + a1;
    }
    v8 = a3 + a5;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 9
6 10
7 11
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (a3 < a5)
        {
            v6 += a5 - a1 + a3;
        }
        else
        {
            v6 += a2 - a2;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        if (a1 < a3)
        {
            v8 += a1 * a3 + a3;
        }
        else
        {
            v8 += a5 + a4;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 28
2 28
3 28
4 28
5 29
<<<sep_out_sample>>>
lea 0x1(%rdi),%r9d
imul %ecx,%r9d
cmp %r9d,%ecx
jle 1d <func1+0x1d>
mov %esi,%r10d
imul %edx,%r10d
imul %edx,%r10d
add %edi,%r10d
jmp 2a <func1+0x2a>
mov %edi,%r10d
sub %edx,%r10d
imul %edi,%r10d
add %esi,%r10d
add %edx,%edi
add %edi,%esi
add %r8d,%esi
add %esi,%ecx
add %ecx,%r9d
lea (%r9,%r10,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a4 + a1 * a4;
    if (v6 < a4)
    {
        v7 = (a2 * a3 * a3) + a1;
    }
    else
    {
        v7 = (a1 * (a1 - a3)) + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 5
4 5
5 7
6 7
7 7
8 7
9 7
10 11
11 11
12 11
13 11
14 13
15 13
16 13
17 13
18 13
19 13
20 14
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %r8d,%edx
add %ecx,%edx
imul %r8d,%r8d
add %ecx,%r8d
sub %edi,%r8d
lea 0x1(%rdx,%r8,1),%edx
sub %ecx,%edi
sub %esi,%edi
lea (%rdx,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = (a4 + a5 * a5) - a1;
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += a2 * a3;
    }
    v9 = (a1 - a4) - a2;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 11
5 4
6 4
7 4
8 11
9 10
10 10
11 11
12 12
<<<sep_out_sample>>>
cmp %edi,%edx
jle 13 <func1+0x13>
lea (%r8,%rcx,1),%eax
mov %edx,%r9d
sub %eax,%r9d
add %edx,%r9d
jmp 21 <func1+0x21>
mov %edx,%r9d
sub %r8d,%r9d
imul %ecx,%r9d
imul %edi,%r9d
mov %esi,%eax
sub %edx,%eax
cmp %ecx,%r8d
jge 38 <func1+0x38>
lea (%r8,%r8,1),%eax
mov %edi,%r10d
imul %edi,%r10d
sub %r10d,%eax
add %r9d,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (v6 < a5)
        {
            v6 += a5 - a3 - a2;
        }
        else
        {
            v6 += a5 * a3 - a1;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += a4 - a2 * a4;
    }
    if (a1 < a3)
    {
        v10 = a3 - (a5 + a4) + a3;
    }
    else
    {
        v10 = a4 * (a3 - a5) * a1;
    }
    if (a5 < a4)
    {
        v11 = a5 + a5 - a1 * a1;
    }
    else
    {
        v11 = a2 - a3;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 23
4 23
5 23
6 23
7 23
8 27
9 27
10 27
11 27
12 35
13 35
14 29
15 29
16 31
17 31
18 31
19 31
20 37
21 37
22 37
23 37
24 37
25 37
26 38
<<<sep_out_sample>>>
cmp %r8d,%edx
jge e <func1+0xe>
mov %edx,%r10d
imul %esi,%r10d
jmp 15 <func1+0x15>
mov %esi,%r10d
imul %ecx,%r10d
lea (%r8,%rdx,1),%r9d
test %esi,%esi
jle 2c <func1+0x2c>
mov %edx,%r11d
sub %esi,%r11d
sub %esi,%r11d
imul %edx,%r11d
jmp 36 <func1+0x36>
lea (%rcx,%rsi,1),%r11d
add %edx,%r11d
add %edi,%r11d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea (%rcx,%r10,1),%eax
add %r9d,%eax
add %r11d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a3 < a5)
    {
        v6 = a3 * a2;
    }
    else
    {
        v6 = a2 * a4;
    }
    v7 = a5 + a3;
    if (v8 < a2)
    {
        v8 = (a3 - a2 - a2) * a3;
    }
    else
    {
        v8 = ((a4 + a2) + a3) + a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 12
9 13
10 13
11 15
12 15
13 15
14 15
15 15
16 19
17 19
18 19
19 21
20 21
21 21
22 21
23 21
24 21
25 21
26 22
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a2 - a5 * a5;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        if (a4 < a2)
        {
            v8 += a3 * a4 * a2;
        }
        else
        {
            v8 += a2 * a1;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 21
5 22
<<<sep_out_sample>>>
lea (%rcx,%rsi,1),%eax
imul %edi,%eax
mov %esi,%r9d
sub %eax,%r9d
cmp $0x1,%ecx
jle 25 <func1+0x25>
mov %edi,%eax
imul %r8d,%eax
mov %esi,%r11d
sub %eax,%r11d
mov %r11d,%eax
add %r8d,%eax
jmp 33 <func1+0x33>
lea (%rsi,%r8,1),%eax
mov %edx,%r10d
imul %r8d,%r10d
sub %r10d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a2 - (a4 + a2) * a1;
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += (a3 - a4) - a2;
    }
    if (v8 < a4)
    {
        v9 = a2 - a1 * a5 + a5;
    }
    else
    {
        v9 = (a2 + a5) - a3 * a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 10
6 10
7 12
8 12
9 12
10 12
11 12
12 12
13 12
14 16
15 16
16 16
17 16
18 18
19 18
20 18
21 18
22 18
23 18
24 19
<<<sep_out_sample>>>
lea (%r8,%rdi,1),%eax
cmp %ecx,%eax
jge 11 <func1+0x11>
lea (%rdx,%rdi,2),%r9d
sub %r8d,%r9d
jmp 1e <func1+0x1e>
mov %r8d,%r9d
imul %r8d,%r9d
add %esi,%r9d
add %edi,%r9d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %ecx,%r8d
add %r8d,%eax
add %r9d,%eax
lea (%rdx,%rcx,2),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a5 + a1;
    if (v6 < a4)
    {
        v7 = a1 + a3 - a5 + a1;
    }
    else
    {
        v7 = a5 * a5 + a2 + a1;
    }
    v8 = a3 + (a4 + a4);
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 5
3 5
4 7
5 7
6 7
7 11
8 11
9 11
10 11
11 14
12 14
13 14
14 14
15 14
16 14
17 13
18 14
19 15
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %r8d,%edx
add %edx,%ecx
imul %r8d,%esi
lea 0x1(%rcx,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a2 < a2)
    {
        v6 = a2 * a2;
    }
    else
    {
        v6 = a2 * a5;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += (a3 + a1) + a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 10
6 17
7 18
<<<sep_out_sample>>>
push %rbx
cmp %edi,%edx
jge 12 <func1+0x12>
lea (%rcx,%rdi,1),%r9d
imul %edi,%r9d
add %r8d,%r9d
jmp 19 <func1+0x19>
mov %esi,%r9d
imul %ecx,%r9d
cmp %edi,%r9d
jge 2a <func1+0x2a>
lea (%r8,%rdx,1),%r11d
add %esi,%r11d
add %edi,%r11d
jmp 33 <func1+0x33>
mov %edx,%r11d
sub %edi,%r11d
add %edx,%r11d
test %edi,%edi
jle 42 <func1+0x42>
mov %ecx,%r10d
neg %r10d
sub %esi,%r10d
jmp 54 <func1+0x54>
mov %esi,%ebx
imul %ecx,%ebx
mov $0x1,%r10d
sub %ebx,%r10d
imul %edi,%r10d
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
add %r11d,%eax
add %r10d,%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a3 < a1)
    {
        v6 = (a4 + a1) * a1 + a5;
    }
    else
    {
        v6 = a2 * a4;
    }
    if (v6 < a1)
    {
        v7 = a5 + a3 + a2 + a1;
    }
    else
    {
        v7 = a3 - a1 + a3;
    }
    if (v8 < a1)
    {
        v8 = (a3 - a4) - a2 - a3;
    }
    else
    {
        v8 = a1 - (a1 * (a2 * a4));
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a1)
    {
        if (v6 < a3)
        {
            v9 += a4 + a5;
        }
        else
        {
            v9 += a2 * a2;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 4
3 4
4 6
5 6
6 6
7 6
8 10
9 10
10 12
11 12
12 14
13 14
14 14
15 14
16 18
17 18
18 18
19 20
20 20
21 22
22 22
23 22
24 22
25 26
26 26
27 26
28 26
29 26
30 40
31 40
32 40
33 40
34 40
35 40
36 40
37 41
38 41
<<<sep_out_sample>>>
cmp %r8d,%esi
jge e <func1+0xe>
mov %r8d,%r9d
imul %r8d,%r9d
jmp 18 <func1+0x18>
mov %r8d,%eax
imul %ecx,%eax
lea (%rax,%rdx,2),%r9d
mov %r8d,%eax
imul %edx,%eax
cmp %ecx,%esi
jge 2b <func1+0x2b>
mov %edi,%r10d
imul %esi,%r10d
jmp 35 <func1+0x35>
mov %ecx,%r10d
imul %ecx,%r10d
neg %r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a2 < a5)
    {
        v6 = a5 * a5;
    }
    else
    {
        v6 = a3 + (a3 + a5 * a4);
    }
    v7 = a5 * a3;
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += a5 + a2;
    }
    if (a2 < a4)
    {
        v10 = a1 * a2;
    }
    else
    {
        v10 = (a5 - a4 * a4) - a5;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 12
10 12
11 18
12 18
13 20
14 20
15 20
16 24
17 24
18 24
19 26
20 26
21 26
22 26
23 26
24 26
25 26
26 27
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%eax
imul %r8d,%ecx
sub %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (a1 < a3)
        {
            v6 += a2 - a4 - a3;
        }
        else
        {
            v6 += a1 + a2;
        }
    }
    v8 = a4 - (a5 * a4) - a4;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 16
6 17
7 18
<<<sep_out_sample>>>
test %edi,%edi
jle 10 <func1+0x10>
lea (%r8,%r8,1),%eax
imul %edi,%eax
imul %edi,%eax
jmp 1b <func1+0x1b>
mov %esi,%eax
imul %r8d,%eax
sub %edi,%eax
add %r8d,%eax
mov %edx,%r9d
imul %ecx,%r9d
imul %edi,%r9d
add %r9d,%edi
add %edi,%edx
add %esi,%edx
add %r8d,%edx
lea 0x1(%rcx,%rdx,1),%edx
add %edx,%eax
add %r8d,%esi
imul %esi,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a4 - a5 + a1;
    }
    if (v6 < a1)
    {
        v8 = (a5 + a5) * a1 * a1;
    }
    else
    {
        v8 = a5 - (a1 - a2 * a5);
    }
    v9 = a5 * (a2 + a5);
    v10 = (a3 * a4) * a1;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 15
8 15
9 15
10 15
11 18
12 18
13 18
14 19
15 19
16 19
17 19
18 19
19 19
20 17
21 17
22 19
23 20
<<<sep_out_sample>>>
mov %esi,%eax
sub %ecx,%eax
sub %r8d,%eax
cmp %ecx,%edi
jge 15 <func1+0x15>
mov %edx,%eax
sub %r8d,%eax
imul %ecx,%edx
sub %edx,%eax
lea (%rsi,%rdi,2),%edx
add %r8d,%edx
add %ecx,%edx
add %edx,%eax
imul %edi,%ecx
imul %ecx,%edi
add %edi,%r8d
lea 0x1(%rax,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a1 < a4)
    {
        v6 = (a3 - a5) - a4 * a3;
    }
    else
    {
        v6 = a2 - a4 - a5;
    }
    v7 = a5 + (a4 * a1 * a1);
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        if (v7 < a4)
        {
            v8 += a1 + a1;
        }
        else
        {
            v8 += (a3 - a3) * a1;
        }
    }
    if (a3 < a3)
    {
        v10 = a2 - a5;
    }
    else
    {
        v10 = a1 - a3;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 4
5 4
6 6
7 6
8 6
9 6
10 33
11 33
12 33
13 33
14 12
15 12
16 12
17 33
18 34
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
mov %esi,%r9d
sub %edi,%r9d
imul %ecx,%edx
add %r9d,%edx
add %edx,%eax
add %esi,%ecx
imul %r8d,%edi
add %edi,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a2 - a1 + (a3 * a4);
    v7 = a4 + a2 + a5 * a1;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 4
7 4
8 4
9 6
10 5
11 5
12 5
13 6
14 7
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%eax
sub %ecx,%r8d
imul %r8d,%edx
add %edx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (a2 < a2)
        {
            v6 += a2 * a1;
        }
        else
        {
            v6 += a1 * a2;
        }
    }
    v8 = a3 * (a5 - a4) + a1;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 16
6 16
7 16
8 17
9 18
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
lea (%rcx,%rdi,2),%edi
add %edi,%eax
add %esi,%edx
add %r8d,%ecx
add %ecx,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = (a1 + a1) + a4;
    v7 = a3 + a2 + (a5 + a4);
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 6
7 5
8 5
9 5
10 6
11 7
<<<sep_out_sample>>>
cmp $0x1,%edx
jle 11 <func1+0x11>
mov %esi,%r9d
sub %edx,%r9d
imul %esi,%r9d
jmp 1e <func1+0x1e>
mov %r8d,%r9d
sub %edx,%r9d
imul %edi,%r9d
add %esi,%r9d
mov %edx,%eax
sub %esi,%eax
add %edx,%eax
add %r8d,%eax
add %r9d,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (a4 < a5)
        {
            v6 += (a3 * a3) * a3;
        }
        else
        {
            v6 += a4 - a3 * a3;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += (a1 + a2) - a1;
    }
    if (v9 < a3)
    {
        v10 = a2 * a2 - a2 * a3;
    }
    else
    {
        v10 = a2 - (a3 - a5) * a1;
    }
    v11 = a5 + (a3 - (a2 - a3));
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 23
4 23
5 23
6 23
7 27
8 27
9 27
10 27
11 29
12 29
13 29
14 29
15 30
16 30
17 30
18 30
19 30
20 30
21 31
<<<sep_out_sample>>>
test %edi,%edi
jle 18 <func1+0x18>
mov %r8d,%eax
imul %edx,%eax
mov %esi,%r10d
sub %eax,%r10d
mov %r10d,%eax
add %r8d,%eax
jmp 24 <func1+0x24>
mov $0x1,%eax
sub %edx,%eax
imul %ecx,%eax
add %edi,%eax
mov %edi,%r9d
sub %edx,%r9d
sub %r8d,%r9d
imul %ecx,%r9d
add %r9d,%edi
add %edi,%edx
add %edx,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%edx
add %edx,%eax
imul %ecx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (a2 < a3)
        {
            v6 += a5 * (a2 + a1);
        }
        else
        {
            v6 += a2 * a2 + a4;
        }
    }
    if (v8 < a1)
    {
        v8 = a5 - ((a5 * a3) - a2);
    }
    else
    {
        v8 = a4 - a4 * a3 + a1;
    }
    v9 = a4 * a5;
    v10 = ((a1 - a3) - a5) * a4;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 18
7 18
8 18
9 18
10 22
11 22
12 22
13 22
14 25
15 25
16 25
17 25
18 26
19 26
20 26
21 26
22 26
23 26
24 24
25 26
26 27
<<<sep_out_sample>>>
cmp %r8d,%ecx
jge e <func1+0xe>
mov %edi,%r9d
imul %edi,%r9d
jmp 1b <func1+0x1b>
mov %esi,%r9d
sub %edx,%r9d
add %ecx,%r9d
imul %esi,%r9d
mov %r8d,%eax
sub %esi,%eax
cmp %r8d,%ecx
jle 33 <func1+0x33>
mov %ecx,%eax
sub %edx,%eax
mov %esi,%r10d
imul %esi,%r10d
sub %r10d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a4 < a5)
    {
        v6 = a1 * a1;
    }
    else
    {
        v6 = a2 * (a4 + (a2 - a3));
    }
    if (a5 < a4)
    {
        v7 = a4 - a3 - a2 * a2;
    }
    else
    {
        v7 = a5 - a2;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 10
10 18
11 18
12 12
13 12
14 14
15 14
16 14
17 14
18 14
19 20
20 20
21 20
22 20
23 20
24 20
25 21
<<<sep_out_sample>>>
mov %esi,%r9d
sub %edi,%r9d
cmp %edi,%edx
jge 16 <func1+0x16>
mov %esi,%r9d
sub %r8d,%r9d
add %esi,%r9d
sub %edi,%r9d
cmp %edx,%r9d
jge 28 <func1+0x28>
lea 0x1(%rdx),%r11d
imul %esi,%r11d
sub %edx,%r11d
jmp 35 <func1+0x35>
mov %edi,%r11d
sub %esi,%r11d
imul %ecx,%r11d
add %edi,%r11d
cmp %esi,%edx
jle 48 <func1+0x48>
mov %edx,%r10d
imul %ecx,%r10d
sub %esi,%r10d
sub %edx,%r10d
jmp 54 <func1+0x54>
mov %edi,%r10d
sub %esi,%r10d
sub %edx,%r10d
sub %edx,%r10d
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
add %r11d,%eax
add %r10d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a3 < a1)
    {
        v6 = a2 - a5 + a2 - a1;
    }
    else
    {
        v6 = a2 - a1;
    }
    if (v6 < a3)
    {
        v7 = (a2 + a3 * a2) - a3;
    }
    else
    {
        v7 = (a1 - a2) * a4 + a1;
    }
    if (a2 < a3)
    {
        v8 = ((a3 * a4) - a2) - a3;
    }
    else
    {
        v8 = a1 - a2 - a3 - a3;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        if (v7 < a3)
        {
            v9 += a3 + a5 + a4;
        }
        else
        {
            v9 += a5 + a2 - a1;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 4
4 4
5 6
6 6
7 6
8 6
9 12
10 12
11 14
12 14
13 14
14 14
15 18
16 18
17 18
18 18
19 20
20 20
21 22
22 22
23 22
24 22
25 22
26 26
27 26
28 26
29 26
30 40
31 40
32 40
33 40
34 40
35 40
36 40
37 41
<<<sep_out_sample>>>
test %edx,%edx
jle 11 <func1+0x11>
mov %ecx,%r9d
imul %edx,%r9d
imul %edx,%r9d
jmp 18 <func1+0x18>
mov %edi,%r9d
imul %edx,%r9d
lea (%rdi,%rcx,1),%r10d
cmp %r8d,%r9d
jl 28 <func1+0x28>
mov %edx,%r10d
imul %r8d,%r10d
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %eax,%r9d
lea (%r9,%r10,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += (a4 * a2) * a1;
    }
    if (v8 < a3)
    {
        v8 = (a4 * a3) * a3;
    }
    else
    {
        v8 = a1 * a3;
    }
    if (v8 < a5)
    {
        v9 = (a5 + a1 + a4) - a5;
    }
    else
    {
        v9 = a3 * a5;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a1)
    {
        if (a1 < a1)
        {
            v10 += (a3 * a1) * a5;
        }
        else
        {
            v10 += a1 * a1;
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 15
8 15
9 19
10 17
11 17
12 23
13 23
14 37
15 37
16 37
17 37
18 37
19 37
20 38
<<<sep_out_sample>>>
lea (%r8,%rdi,2),%r11d
imul %ecx,%r11d
lea -0x1(%r8),%r10d
imul %edi,%r10d
add %esi,%r10d
cmp %edi,%r8d
jle 25 <func1+0x25>
mov %edi,%eax
imul %esi,%eax
mov %r8d,%r9d
sub %eax,%r9d
jmp 32 <func1+0x32>
mov $0x1,%r9d
sub %edx,%r9d
imul %esi,%r9d
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = (a1 + (a5 + a1)) * a4;
    v7 = (a5 * a1) - a1 + a2;
    if (a1 < a5)
    {
        v8 = a5 - a1 * a2;
    }
    else
    {
        v8 = a2 - (a3 * a2);
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        v9 += a3 + a1 * a3;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 5
4 5
5 5
6 6
7 6
8 8
9 8
10 8
11 8
12 8
13 12
14 12
15 12
16 19
17 19
18 19
19 19
20 19
21 19
22 19
23 20
<<<sep_out_sample>>>
lea (%r8,%r8,1),%eax
mov %ecx,%r10d
sub %edx,%r10d
mov %esi,%r11d
sub %edi,%r11d
cmp %esi,%eax
mov $0x0,%r9d
cmovge %r11d,%r9d
add %edx,%edi
add %esi,%edi
add %r8d,%edi
add %edi,%ecx
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
imul %r8d,%edx
imul %edx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a5 + a5;
    v7 = a4 - a3;
    if (v6 < a2)
    {
        v8 = a1 + (a3 - a1) - a3;
    }
    else
    {
        v8 = a2 - a1;
    }
    v9 = a3 * a5 * a2;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 5
3 5
4 12
5 12
6 12
7 12
8 12
9 15
10 15
11 15
12 15
13 15
14 15
15 15
16 14
17 14
18 15
19 16
<<<sep_out_sample>>>
lea (%rdi,%rdi,1),%r9d
sub %esi,%r9d
add %ecx,%r9d
test %esi,%esi
jle 16 <func1+0x16>
lea (%rcx,%rdi,1),%eax
sub %r8d,%eax
jmp 23 <func1+0x23>
mov %esi,%eax
imul %r8d,%eax
imul %ecx,%eax
imul %r8d,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = a1 + a1 - a2 + a4;
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += a4 * a4 - a1;
    }
    if (v7 < a2)
    {
        v9 = a4 + a1 - a5;
    }
    else
    {
        v9 = ((a2 * a5) * a4) * a5;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a2)
    {
        if (a4 < a5)
        {
            v10 += a5 + a3 - a4;
        }
        else
        {
            v10 += a4 * a3 - a4;
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 10
5 10
6 12
7 12
8 12
9 16
10 16
11 16
12 16
13 30
14 30
15 30
16 30
17 30
18 30
19 31
<<<sep_out_sample>>>
cmp %r8d,%edi
jge 13 <func1+0x13>
lea -0x1(%rcx),%r9d
imul %edi,%r9d
imul %edx,%r9d
jmp 21 <func1+0x21>
mov %esi,%r9d
imul %ecx,%r9d
sub %r8d,%r9d
imul %edx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
sub %ecx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a1 < a5)
    {
        v6 = a3 * (a4 * a1 - a1);
    }
    else
    {
        v6 = ((a2 * a4) - a5) * a3;
    }
    v7 = a2 - a4;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 10
11 13
12 13
13 13
14 13
15 13
16 12
17 13
18 14
<<<sep_out_sample>>>
mov %esi,%eax
imul %edi,%eax
add %edi,%eax
add %eax,%edx
add %edx,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%edx
lea (%rcx,%rdi,2),%eax
sub %r8d,%eax
add %edx,%eax
sub %ecx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a1 + (a4 * a5);
    }
    v8 = (a1 + a1 + a4) - a5;
    v9 = a5 + a2 - a2 - a4;
    v10 = a2 * a1;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 12
4 12
5 12
6 12
7 12
8 9
9 9
10 12
11 10
12 12
13 13
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%r9d
add %esi,%r9d
add %r8d,%r9d
add %ecx,%r9d
lea (%rcx,%rdx,1),%eax
sub %edi,%eax
imul %esi,%eax
add %r9d,%eax
sub %r8d,%esi
add %esi,%ecx
sub %edx,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = (a4 + a3 - a1) * a2;
    v7 = ((a2 - a5) + a4) - a3;
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += (a2 * a3) * a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 11
5 4
6 4
7 4
8 11
9 5
10 5
11 5
12 11
13 12
<<<sep_out_sample>>>
lea -0x1(%rdi),%r11d
imul %edx,%r11d
add %r8d,%r11d
mov %r8d,%r10d
imul %r8d,%r10d
imul %r8d,%r10d
sub %edi,%r10d
cmp %esi,%r8d
jle 2e <func1+0x2e>
mov %edi,%r9d
imul %esi,%r9d
mov %edi,%eax
sub %edx,%eax
add %eax,%r9d
jmp 39 <func1+0x39>
lea 0x1(%r8),%r9d
imul %r8d,%r9d
add %edi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = (a1 * a3 - a3) + a5;
    v7 = a5 * a5 * a5 - a1;
    if (a2 < a5)
    {
        v8 = (a1 * a2) - (a3 - a1);
    }
    else
    {
        v8 = (a5 * a5) + a5 + a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 5
5 5
6 5
7 5
8 6
9 6
10 8
11 8
12 8
13 8
14 8
15 8
16 12
17 12
18 12
19 14
20 14
21 14
22 14
23 14
24 14
25 14
26 15
<<<sep_out_sample>>>
mov %edi,%eax
sub %ecx,%eax
add %edx,%eax
cmp %r8d,%esi
jge 15 <func1+0x15>
mov %edx,%eax
sub %r8d,%eax
sub %r8d,%eax
sub %esi,%eax
add %edx,%edi
add %esi,%edi
add %edi,%r8d
add %ecx,%r8d
add %r8d,%eax
imul %esi,%edx
sub %edx,%ecx
imul %ecx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a2 < a5)
    {
        v6 = (a3 - a5 - a5) - a2;
    }
    else
    {
        v6 = a1 - a4 + a3;
    }
    v7 = (a4 - a3 * a2) * a2;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 4
5 4
6 6
7 6
8 6
9 6
10 13
11 13
12 13
13 13
14 13
15 12
16 12
17 12
18 13
19 14
<<<sep_out_sample>>>
mov %edx,%r9d
imul %ecx,%r9d
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%eax
lea (%r9,%rax,1),%ecx
imul %r8d,%edi
imul %edi,%edx
sub %r8d,%edx
lea (%rcx,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a3 * a2;
    }
    v8 = a5 - (a5 - a3 * a4);
    v9 = ((a5 * a1) * a3) - a5;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 11
8 10
9 10
10 10
11 11
12 12
<<<sep_out_sample>>>
mov %edi,%r11d
sub %esi,%r11d
test %edi,%edi
jle 17 <func1+0x17>
lea -0x1(%r8),%r9d
imul %edi,%r9d
sub %edx,%r9d
jmp 21 <func1+0x21>
mov %esi,%eax
imul %r8d,%eax
lea (%rax,%r8,2),%r9d
cmp %esi,%r9d
jge 35 <func1+0x35>
mov %edi,%r10d
imul %edx,%r10d
add %r8d,%r10d
sub %edi,%r10d
jmp 41 <func1+0x41>
lea (%r8,%rcx,1),%r10d
mov %esi,%eax
imul %ecx,%eax
add %eax,%r10d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r11d,%ecx
add %ecx,%r9d
lea (%r9,%r10,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a1 - a2;
    if (v7 < a1)
    {
        v7 = a1 * a5 - a1 - a3;
    }
    else
    {
        v7 = (a2 * a5) + (a5 + a5);
    }
    if (v7 < a2)
    {
        v8 = a5 + a1 * a3 - a1;
    }
    else
    {
        v8 = a5 + a4 + a2 * a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 5
4 5
5 7
6 7
7 7
8 7
9 11
10 11
11 11
12 13
13 13
14 15
15 15
16 15
17 15
18 15
19 19
20 19
21 19
22 19
23 21
24 21
25 21
26 21
27 21
28 21
29 21
30 22
<<<sep_out_sample>>>
lea (%rdx,%r8,1),%r9d
cmp $0x1,%edx
jle 16 <func1+0x16>
lea (%rsi,%rdx,1),%r10d
lea (%rdi,%r8,1),%eax
add %r10d,%eax
jmp 1e <func1+0x1e>
lea (%r8,%rdi,1),%eax
sub %ecx,%eax
sub %edx,%eax
add %r9d,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a1 + a4 - a2;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += (a1 - a1) - a5;
    }
    if (a4 < a4)
    {
        v10 = a2 * (a2 - a5 + a2);
    }
    else
    {
        v10 = a4 - a4 + a3 + a5;
    }
    if (v9 < a3)
    {
        v11 = a2 + a3 + (a1 + a5);
    }
    else
    {
        v11 = a5 + a1 - a4 - a3;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 20
2 22
3 22
4 24
5 24
6 24
7 24
8 28
9 28
10 28
11 30
12 30
13 30
14 30
15 30
16 30
17 31
<<<sep_out_sample>>>
push %rbx
lea (%rcx,%rdi,1),%eax
lea (%rax,%rdx,2),%ebx
mov %edx,%r11d
sub %esi,%r11d
mov %edi,%eax
imul %esi,%eax
add %eax,%r11d
cmp %esi,%edi
jle 26 <func1+0x26>
mov %esi,%r10d
imul %esi,%r10d
lea (%rsi,%r8,1),%r9d
jmp 2e <func1+0x2e>
lea (%rcx,%r8,1),%r10d
lea (%r8,%rsi,1),%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %ebx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = (a4 + a1) + a3 + a3;
    v7 = a3 - a2 + a1 * a2;
    if (a2 < a1)
    {
        v8 = a2 * a2;
    }
    else
    {
        v8 = a4 + a5;
    }
    if (a2 < a1)
    {
        v9 = a2 + a5;
    }
    else
    {
        v9 = a5 + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 4
3 4
4 5
5 5
6 5
7 5
8 5
9 6
10 6
11 8
12 8
13 16
14 16
15 12
16 20
17 22
18 22
19 22
20 22
21 22
22 22
23 22
24 22
25 23
26 23
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
imul %ecx,%edi
imul %r8d,%edi
sub %edi,%edx
add %edx,%eax
add %r8d,%esi
add %esi,%eax
add %ecx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a3 - (a4 * a1) * a5;
    v7 = a2 + a5;
    if (a1 < a1)
    {
        v8 = a2 * (a1 + a5) + a3;
    }
    else
    {
        v8 = a4 + a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 14
2 14
3 14
4 14
5 4
6 4
7 4
8 14
9 5
10 14
11 12
12 14
13 15
<<<sep_out_sample>>>
lea (%rdx,%rcx,1),%eax
cmp %esi,%r8d
jl e <func1+0xe>
mov %edi,%eax
neg %eax
sub %edx,%eax
mov %ecx,%r9d
sub %esi,%r9d
cmp %r8d,%eax
jge 21 <func1+0x21>
lea (%rdx,%rdi,2),%r9d
imul %edx,%r9d
add %edx,%edi
add %esi,%edi
add %edi,%r8d
add %ecx,%r8d
add %r8d,%eax
add %eax,%r9d
add %ecx,%edx
sub %esi,%edx
imul %edx,%ecx
lea (%r9,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a5 < a2)
    {
        v6 = a3 + a4;
    }
    else
    {
        v6 = (a4 - a1 - a4) - a3;
    }
    if (v6 < a5)
    {
        v7 = a3 * (a1 + a3 + a1);
    }
    else
    {
        v7 = a3 - a2 - (a3 - a4);
    }
    v8 = (a4 + a3 - a2) * a4;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 6
2 4
3 4
4 10
5 10
6 10
7 18
8 18
9 12
10 12
11 14
12 14
13 21
14 21
15 21
16 21
17 21
18 21
19 20
20 20
21 20
22 21
23 22
<<<sep_out_sample>>>
lea (%rdx,%rsi,1),%eax
cmp %edx,%edi
jge d <func1+0xd>
lea (%rdi,%rsi,1),%eax
imul %edx,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %r8d,%esi
add %ecx,%esi
lea 0x1(%rax,%rsi,1),%edx
mov %edi,%eax
sub %ecx,%eax
imul %eax,%edi
sub %r8d,%edi
lea (%rdx,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    if (a1 < a3)
    {
        v6 = (a1 + a2) * a3;
    }
    else
    {
        v6 = a3 + a2;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        if (a5 < a3)
        {
            v7 += a3 * a2 + a3;
        }
        else
        {
            v7 += a5 * a4 + a5;
        }
    }
    v9 = a1 * (a1 - a4) - a5;
    v10 = 0;
    for (v11 = 0; v11++; v11<a2)
    {
        if (a2 < a1)
        {
            v10 += a2 - a5 - a1;
        }
        else
        {
            v10 += (a3 - a3) * a1;
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 37
7 37
8 37
9 37
10 37
11 24
12 24
13 24
14 24
15 37
16 38
<<<sep_out_sample>>>
add %edx,%edi
add %esi,%edi
add %r8d,%edi
add %ecx,%edi
lea (%rdx,%rcx,2),%esi
sub %r8d,%esi
add %edi,%esi
lea 0x1(%rsi,%rdx,2),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = (a4 + a3 + a4) - a5;
    v7 = a3 + a3;
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += a1 - a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 11
5 4
6 4
7 11
8 11
9 12
<<<sep_out_sample>>>
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea (%r8,%rcx,1),%esi
lea (%rcx,%rcx,1),%eax
imul %eax,%edi
imul %edi,%ecx
lea 0x1(%rsi,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a2 < a2)
    {
        v6 = a5 + a5 * a4;
    }
    else
    {
        v6 = a4 * ((a4 + a4) * a1);
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        if (a5 < a2)
        {
            v7 += a5 * a5 + a2;
        }
        else
        {
            v7 += a2 + a4 - a4;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 24
2 24
3 24
4 24
5 10
6 10
7 10
8 24
9 25
<<<sep_out_sample>>>
cmp %r8d,%ecx
jge 14 <func1+0x14>
mov %r8d,%r9d
sub %edi,%r9d
imul %esi,%r9d
add %edx,%r9d
jmp 20 <func1+0x20>
mov %edx,%r9d
sub %edi,%r9d
sub %esi,%r9d
add %r8d,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
imul %esi,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a4 < a5)
    {
        v6 = (a2 * (a5 - a1)) + a3;
    }
    else
    {
        v6 = a5 + (a3 - a1 - a2);
    }
    v7 = a2 * a2;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 13
13 13
14 13
15 13
16 13
17 12
18 13
19 14
<<<sep_out_sample>>>
cmp %edx,%edi
jge 11 <func1+0x11>
mov %r8d,%eax
imul %r8d,%eax
sub %ecx,%eax
add %edi,%eax
jmp 1c <func1+0x1c>
mov %edx,%eax
imul %ecx,%eax
imul %r8d,%eax
add %ecx,%eax
add %edi,%edx
add %edx,%esi
add %r8d,%esi
add %ecx,%esi
lea 0x1(%rax,%rsi,1),%eax
sub %r8d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a1 < a3)
    {
        v6 = a1 + (a5 * a5 - a4);
    }
    else
    {
        v6 = a4 + a3 * a4 * a5;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += (a1 - a1) - a1;
    }
    v9 = a4 - a5;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 18
13 18
14 18
15 18
16 18
17 17
18 18
19 19
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (v6 < a5)
        {
            v6 += (a2 * a4) * a5;
        }
        else
        {
            v6 += (a2 * a3) - a1;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += a5 * a2 - a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 21
5 22
<<<sep_out_sample>>>
mov %edi,%eax
neg %eax
cmp %esi,%edx
jge 11 <func1+0x11>
mov %r8d,%eax
sub %edx,%eax
add %ecx,%eax
sub %edi,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%eax
imul %edi,%edi
lea 0x1(%rax,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    if (a3 < a2)
    {
        v6 = a4 - (a3 - a5) - a1;
    }
    else
    {
        v6 = ((a3 - a3) * a3) - a1;
    }
    v7 = a1 * a1;
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += (a4 + a5) - a5;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a2)
    {
        v10 += a4 - a2;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 4
4 4
5 6
6 6
7 6
8 6
9 23
10 23
11 23
12 23
13 23
14 12
15 23
16 24
<<<sep_out_sample>>>
lea (%rdi,%rsi,1),%r10d
test %edx,%edx
jle 17 <func1+0x17>
lea (%rdx,%r8,1),%eax
mov %esi,%r9d
sub %eax,%r9d
add %ecx,%r9d
jmp 24 <func1+0x24>
mov %edx,%r9d
sub %edi,%r9d
imul %r8d,%r9d
sub %esi,%r9d
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
add %ecx,%r8d
lea (%r10,%r8,1),%eax
add %r9d,%eax
imul %ecx,%edi
imul %edi,%ecx
add %ecx,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a4 + a2 - a4 - a2;
    v7 = a1 + a2;
    if (v8 < a3)
    {
        v8 = a2 - (a3 + a5) + a4;
    }
    else
    {
        v8 = a5 * (a3 - a1) - a2;
    }
    v9 = a3 + a1 * a4 * a4;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 5
2 6
3 6
4 8
5 8
6 8
7 8
8 8
9 12
10 12
11 12
12 12
13 15
14 15
15 15
16 15
17 15
18 15
19 14
20 14
21 14
22 15
23 16
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %r8d,%edx
imul %ecx,%edi
imul %esi,%edi
lea (%rdx,%rcx,2),%eax
lea (%rax,%rdi,1),%edx
mov %esi,%eax
sub %r8d,%eax
lea (%rax,%rsi,2),%eax
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a4 + a2 * (a1 * a4);
    v7 = a2 - a5 + a2 + a2;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 4
5 4
6 4
7 6
8 5
9 5
10 5
11 6
12 7
<<<sep_out_sample>>>
add %edx,%edi
mov %r8d,%eax
sub %esi,%eax
mov %edx,%r9d
imul %edx,%r9d
cmp %ecx,%edx
cmovl %r9d,%eax
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a3 + a1;
    if (a3 < a4)
    {
        v7 = a3 * a3;
    }
    else
    {
        v7 = a5 - a2;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 11
3 11
4 7
5 7
6 7
7 7
8 13
9 13
10 13
11 13
12 13
13 14
<<<sep_out_sample>>>
mov %r8d,%eax
sub %edx,%eax
test %esi,%esi
jle 12 <func1+0x12>
lea -0x1(%rsi),%eax
imul %r8d,%eax
add %edi,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a5 - a4;
    }
    if (v8 < a2)
    {
        v8 = a1 + (a5 * a2 - a5);
    }
    else
    {
        v8 = a5 - a3 - a4 + a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 15
2 15
3 9
4 9
5 11
6 11
7 11
8 17
9 17
10 17
11 17
12 17
13 18
<<<sep_out_sample>>>
lea (%rcx,%rdi,1),%eax
lea (%rcx,%rcx,1),%r11d
cmp %edi,%edx
cmovl %eax,%r11d
lea (%r8,%rsi,1),%r10d
cmp %ecx,%edx
jle 24 <func1+0x24>
mov $0x1,%r9d
sub %esi,%r9d
imul %edx,%r9d
jmp 30 <func1+0x30>
mov %edi,%r9d
sub %esi,%r9d
sub %edx,%r9d
sub %r8d,%r9d
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a3 < a1)
    {
        v6 = a4 + a1;
    }
    else
    {
        v6 = a4 - a5 + a5 + a4;
    }
    v7 = a5 + a3 - a3 + a2;
    if (a4 < a3)
    {
        v8 = a3 - a2 * a3;
    }
    else
    {
        v8 = (a1 - a2) - a3 - a5;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        v9 += a2 + (a4 - a4);
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 12
6 13
7 13
8 15
9 15
10 15
11 15
12 19
13 19
14 19
15 19
16 26
17 26
18 26
19 26
20 26
21 26
22 26
23 27
<<<sep_out_sample>>>
cmp %esi,%edi
jge d <func1+0xd>
mov %edi,%r9d
imul %r8d,%r9d
jmp 1b <func1+0x1b>
mov %edx,%r9d
sub %esi,%r9d
sub $0x1,%r9d
imul %ecx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
lea (%rdx,%rcx,1),%esi
add %esi,%r8d
add %r8d,%eax
mov %ecx,%esi
sub %edi,%esi
imul %esi,%edx
add %edx,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a1 < a2)
    {
        v6 = a1 * a5;
    }
    else
    {
        v6 = (a3 - a2) * a4 - a4;
    }
    v7 = a5 + (a3 + a4);
    v8 = a3 * (a4 - a1) + a4;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 10
10 14
11 14
12 14
13 14
14 14
15 12
16 12
17 14
18 13
19 13
20 13
21 13
22 14
23 15
<<<sep_out_sample>>>
mov %r8d,%r9d
imul %edi,%r9d
add %edx,%r9d
sub %r8d,%r9d
mov %esi,%eax
sub %r8d,%eax
cmp %esi,%edx
cmovg %r8d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = (a5 * a1) + a3 - a5;
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += a3 - a4;
    }
    if (a2 < a3)
    {
        v9 = a3 * (a4 - a4) + a5;
    }
    else
    {
        v9 = a2 - a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 16
6 16
7 16
8 16
9 18
10 18
11 18
12 18
13 18
14 18
15 19
<<<sep_out_sample>>>
test %esi,%esi
jle d <func1+0xd>
mov %esi,%r10d
imul %r8d,%r10d
jmp 13 <func1+0x13>
mov $0x0,%r10d
mov %edx,%r9d
sub %r8d,%r9d
imul %edi,%r9d
sub %r8d,%r9d
lea 0x1(%rdi,%r9,1),%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %r10d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += (a5 - a1) - a4;
    }
    if (v6 < a2)
    {
        v8 = a2 * a5;
    }
    else
    {
        v8 = a3 - a3;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        v9 += (a1 + a4) - a1;
    }
    if (a4 < a4)
    {
        v11 = (a1 + (a4 + a3)) - a3;
    }
    else
    {
        v11 = (a3 - a5) * a1 - a5;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 15
7 28
8 28
9 28
10 28
11 30
12 30
13 30
14 30
15 30
16 30
17 31
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
add %ecx,%esi
add %eax,%esi
imul %ecx,%edi
add %edi,%r8d
sub %edx,%r8d
lea (%rsi,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a3 < a3)
    {
        v6 = (a3 * a1) - a1;
    }
    else
    {
        v6 = a1 + a3;
    }
    if (a3 < a3)
    {
        v7 = ((a2 * a4) + a4) + a2;
    }
    else
    {
        v7 = a1 * a4 + a5 - a3;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 10
2 20
3 20
4 20
5 20
6 18
7 18
8 18
9 20
10 21
<<<sep_out_sample>>>
lea 0x2(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12, v13 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a4 * a5 * a2;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        if (v7 < a2)
        {
            v8 += a3 + a2 + a2;
        }
        else
        {
            v8 += (a5 + a5) + a5;
        }
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a4)
    {
        v10 += a3 * a2 + a2;
    }
    v12 = 0;
    for (v13 = 0; v13++; v13<a3)
    {
        v12 += a3 + a2;
    }
    return v12+v13+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 31
2 31
3 31
4 31
5 32
<<<sep_out_sample>>>
mov %esi,%eax
imul %ecx,%eax
imul %ecx,%eax
add %esi,%eax
add %edi,%eax
add %edx,%eax
add %eax,%esi
add %r8d,%esi
add %ecx,%esi
mov %r8d,%eax
imul %edx,%eax
sub %edi,%eax
add %r8d,%eax
add %eax,%esi
imul %ecx,%r8d
add %r8d,%edx
sub %ecx,%edx
lea 0x1(%rsi,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a2 < a2)
    {
        v6 = a3 * a1 * a3 + a2;
    }
    else
    {
        v6 = (a5 * a3 - a1) + a5;
    }
    v7 = (a4 * a5) + a3 - a4;
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += (a5 + a4) + a3;
    }
    v10 = (a2 * a4 * a4) + a2;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 18
5 19
6 19
7 19
8 19
9 19
10 10
11 10
12 10
13 10
14 19
15 12
16 12
17 12
18 19
19 20
<<<sep_out_sample>>>
mov %edx,%eax
sub %edi,%eax
add %esi,%eax
add %ecx,%eax
mov %edx,%r9d
sub %edi,%r9d
cmp %eax,%edi
jle 19 <func1+0x19>
lea (%r8,%rdx,1),%r9d
add %ecx,%r9d
lea (%rdi,%rdx,1),%r10d
add %r10d,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%eax
add %r9d,%eax
sub %edx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a3 - a1 + a2 + a4;
    if (v6 < a1)
    {
        v7 = a4 + (a5 + a3);
    }
    else
    {
        v7 = a5 - a1 + a3 - a5;
    }
    v8 = a1 - a3;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 11
6 11
7 5
8 5
9 7
10 7
11 14
12 14
13 14
14 14
15 14
16 14
17 13
18 14
19 15
<<<sep_out_sample>>>
lea (%rsi,%r8,1),%r9d
cmp %edi,%r8d
jge 16 <func1+0x16>
mov %edi,%eax
imul %ecx,%eax
imul %r8d,%eax
add %esi,%eax
jmp 1b <func1+0x1b>
lea (%rdi,%rdx,1),%eax
sub %ecx,%eax
mov %ecx,%r10d
neg %r10d
lea (%r9,%rdi,1),%r11d
cmp $0x2,%edi
cmovl %r11d,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a2 + a5;
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        if (a4 < a1)
        {
            v7 += a3 * a2;
        }
        else
        {
            v7 += (a5 * a5) * a4;
        }
    }
    if (a5 < a1)
    {
        v9 = (a1 * a4 * a5) + a2;
    }
    else
    {
        v9 = a1 + a3 - a4;
    }
    if (v8 < a1)
    {
        v10 = a5 - a4 - a5;
    }
    else
    {
        v10 = a2 + a5 + a1;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 17
3 17
4 19
5 19
6 19
7 19
8 19
9 23
10 23
11 27
12 27
13 27
14 27
15 27
16 33
17 33
18 33
19 33
20 33
21 33
22 33
23 34
<<<sep_out_sample>>>
mov %esi,%eax
imul %esi,%eax
imul %esi,%eax
add %ecx,%eax
cmp %edi,%esi
jle 17 <func1+0x17>
mov %esi,%r9d
imul %r8d,%r9d
jmp 1f <func1+0x1f>
lea 0x1(%rdx),%r9d
imul %ecx,%r9d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = (a2 - a2) * a1 * a5;
    v7 = a4 + (a2 * a2) * a2;
    if (a1 < a2)
    {
        v8 = a2 * a5;
    }
    else
    {
        v8 = a4 * a3 + a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 5
2 5
3 5
4 5
5 6
6 6
7 8
8 8
9 8
10 12
11 12
12 14
13 14
14 14
15 14
16 14
17 14
18 15
<<<sep_out_sample>>>
lea (%r8,%rdx,1),%eax
test %r8d,%r8d
jle f <func1+0xf>
mov %edi,%eax
neg %eax
sub %esi,%eax
add %edi,%edx
add %edx,%esi
add %r8d,%esi
add %esi,%ecx
lea 0x1(%rax,%rcx,1),%eax
imul %edi,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (v6 < a5)
    {
        v6 = (a2 - (a1 + a2)) - a2;
    }
    else
    {
        v6 = a5 + a3;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        if (a4 < a1)
        {
            v7 += a3 - a1;
        }
        else
        {
            v7 += a5 + a1 - a4;
        }
    }
    v9 = a1 * a5;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 6
7 25
8 25
9 25
10 25
11 25
12 24
13 25
14 26
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
add %r8d,%ecx
imul %edx,%edi
lea 0x1(%rcx,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a1 * a3;
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += (a3 + a4) + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 4
6 10
7 11
<<<sep_out_sample>>>
lea (%r8,%rdx,1),%eax
imul %edi,%eax
lea (%rsi,%rcx,1),%r9d
lea (%rdx,%rsi,2),%r10d
cmp $0x2,%esi
cmovl %r10d,%r9d
lea 0x1(%r9,%rdi,1),%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = a5 * a1 + a3 * a1;
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        if (a3 < a2)
        {
            v7 += a4 - a1 + a5;
        }
        else
        {
            v7 += a4 + a3 - a1;
        }
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        v9 += a2 - a2 + a5;
    }
    if (v10 < a2)
    {
        v11 = a2 + a4;
    }
    else
    {
        v11 = a3 + (a2 + a2);
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 24
4 24
5 24
6 24
7 30
8 30
9 30
10 30
11 30
12 30
13 31
<<<sep_out_sample>>>
test %r8d,%r8d
jle d <func1+0xd>
mov %r8d,%r9d
sub %edx,%r9d
jmp 14 <func1+0x14>
mov %edi,%r9d
imul %edi,%r9d
lea (%rsi,%rcx,1),%eax
test %ecx,%ecx
jle 24 <func1+0x24>
lea (%rdx,%r8,1),%eax
imul %esi,%eax
add %edi,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %r9d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (v6 < a4)
        {
            v6 += a3 + a1;
        }
        else
        {
            v6 += a1 * a1 - a2;
        }
    }
    if (v6 < a5)
    {
        v8 = (a5 + a5 - a3) - a5;
    }
    else
    {
        v8 = a1 * a1;
    }
    if (v9 < a4)
    {
        v9 = a2 * (a3 + a5) + a1;
    }
    else
    {
        v9 = a2 + a4;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a5)
    {
        v10 += (a2 + a1) + a1;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 22
7 22
8 30
9 24
10 24
11 26
12 26
13 26
14 37
15 37
16 37
17 37
18 37
19 37
20 38
<<<sep_out_sample>>>
cmp %ecx,%edi
jge e <func1+0xe>
mov %ecx,%eax
sub %r8d,%eax
lea (%rax,%rdi,2),%eax
jmp 1b <func1+0x1b>
lea (%r8,%rdi,1),%r9d
mov %edi,%eax
imul %r8d,%eax
add %r9d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a5 - a2;
    }
    if (a1 < a4)
    {
        v8 = (a1 - (a5 - a4)) + a1;
    }
    else
    {
        v8 = (a5 + a1) + a1 * a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 15
8 15
9 15
10 15
11 17
12 17
13 17
14 17
15 17
16 18
<<<sep_out_sample>>>
mov %esi,%eax
sub %edx,%eax
lea (%rax,%rcx,2),%r9d
mov %ecx,%eax
sub %edx,%eax
add %r8d,%eax
cmp %r8d,%esi
jle 23 <func1+0x23>
mov %ecx,%r10d
imul %edx,%r10d
mov %edi,%eax
imul %esi,%eax
add %r10d,%eax
lea 0x1(%rax,%rdi,1),%eax
add %eax,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = (a2 - a3) + a4 + a4;
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        if (v7 < a1)
        {
            v7 += (a3 * a3) - a3;
        }
        else
        {
            v7 += a5 * a2;
        }
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        v9 += a3 * (a1 * a4);
    }
    if (a5 < a2)
    {
        v11 = (a4 * a3) + a1 * a2;
    }
    else
    {
        v11 = a5 - (a3 - a4);
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 28
5 28
6 28
7 22
8 22
9 24
10 24
11 24
12 24
13 24
14 30
15 30
16 30
17 30
18 30
19 30
20 31
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
imul %edi,%edx
imul %edx,%esi
lea (%r8,%rcx,2),%eax
sub %esi,%eax
sub %ecx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a4 - a3 * a1 * a2;
    v7 = a1 - a4;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 4
5 4
6 4
7 6
8 5
9 6
10 7
<<<sep_out_sample>>>
lea (%r8,%rdi,2),%eax
sub %ecx,%eax
add %edi,%eax
add %edx,%eax
add %esi,%eax
add %eax,%r8d
lea 0x1(%rcx,%r8,1),%eax
lea (%rdi,%rsi,1),%r8d
imul %edx,%ecx
lea (%r8,%rcx,1),%edx
add %eax,%edx
imul %edi,%edi
sub %esi,%edi
lea (%rdx,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a4 * a5 - a1;
    }
    v8 = a1 + a2 + a3 * a4;
    v9 = (a1 * a1) - a2;
    v10 = (a1 + a5 + a1) - a4;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 12
4 12
5 12
6 12
7 12
8 9
9 9
10 9
11 12
12 10
13 10
14 12
15 13
<<<sep_out_sample>>>
cmp $0x1,%esi
jle b <func1+0xb>
mov %ecx,%eax
sub %edi,%eax
jmp 15 <func1+0x15>
mov %edi,%eax
sub %ecx,%eax
imul %edx,%eax
add %r8d,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (v7 < a4)
        {
            v6 += (a3 * a4) + a3;
        }
        else
        {
            v6 += a1 * a2;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += a5 - a3 + a5;
    }
    if (v9 < a2)
    {
        v10 = a4 - a1;
    }
    else
    {
        v10 = (a3 * (a1 - a4)) + a5;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 23
4 23
5 23
6 27
7 27
8 27
9 27
10 29
11 29
12 29
13 29
14 29
15 30
<<<sep_out_sample>>>
mov %esi,%r10d
imul %ecx,%r10d
add %edi,%r10d
mov %edi,%r9d
imul %r8d,%r9d
imul %edx,%r9d
imul %esi,%r9d
lea (%rsi,%rdx,1),%eax
cmp %edi,%esi
jge 28 <func1+0x28>
lea (%rdx,%rcx,1),%eax
sub %r8d,%eax
add %esi,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %ecx,%r8d
add %r10d,%r8d
add %r9d,%r8d
add %r8d,%eax
lea (%rcx,%rcx,2),%edx
add %edx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = (a2 * a4) + a1;
    v7 = (a1 * a5 * a3) * a2;
    if (a2 < a1)
    {
        v8 = a2 + ((a3 + a4) - a5);
    }
    else
    {
        v8 = a2 + a3;
    }
    v9 = ((a4 + a4) + a4) + a1;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 5
5 5
6 5
7 5
8 12
9 6
10 6
11 8
12 8
13 8
14 15
15 15
16 15
17 15
18 15
19 15
20 15
21 14
22 14
23 15
24 16
<<<sep_out_sample>>>
test %esi,%esi
jle f <func1+0xf>
mov %ecx,%eax
sub %esi,%eax
imul %edi,%eax
add %esi,%eax
jmp 18 <func1+0x18>
mov %esi,%eax
imul %edx,%eax
sub %ecx,%eax
add %esi,%eax
add %edx,%edi
add %edi,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (a3 < a1)
        {
            v6 += a4 + (a4 * a1);
        }
        else
        {
            v6 += a2 - a4 * a2;
        }
    }
    if (v6 < a2)
    {
        v8 = a2 + (a4 - a2) * a1;
    }
    else
    {
        v8 = (a2 * a3) - a4 + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 18
7 18
8 22
9 22
10 22
11 22
12 24
13 24
14 24
15 24
16 24
17 25
<<<sep_out_sample>>>
mov $0x0,%eax
test %r8d,%r8d
jg 13 <func1+0x13>
lea (%rcx,%rdi,1),%eax
sub %r8d,%eax
imul %edx,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (a1 < a2)
        {
            v6 += (a5 - a4) - a1;
        }
        else
        {
            v6 += a1 * a4 + a4;
        }
    }
    if (v8 < a5)
    {
        v8 = (a3 - a4 - a3) + a4;
    }
    else
    {
        v8 = (a4 + a1 - a5) * a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 18
2 16
3 16
4 22
5 22
6 22
7 24
8 24
9 24
10 24
11 24
12 25
<<<sep_out_sample>>>
cmp %edi,%ecx
jge 12 <func1+0x12>
mov %esi,%r9d
sub %edx,%r9d
sub %edi,%r9d
add %esi,%r9d
jmp 20 <func1+0x20>
mov %edx,%r9d
sub %esi,%r9d
mov %edx,%eax
imul %edi,%eax
add %eax,%r9d
test %esi,%esi
jle 32 <func1+0x32>
mov %ecx,%eax
imul %esi,%eax
add $0x1,%eax
imul %r8d,%eax
jmp 39 <func1+0x39>
lea (%rdx,%rcx,1),%eax
lea (%rax,%r8,2),%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a4 < a1)
    {
        v6 = a2 + (a2 - a3 - a1);
    }
    else
    {
        v6 = (a3 - a2) + a3 * a1;
    }
    if (v7 < a2)
    {
        v7 = (a4 * a2 * a5) + a5;
    }
    else
    {
        v7 = a5 + a5 + (a3 + a4);
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 10
13 12
14 12
15 14
16 14
17 14
18 14
19 14
20 18
21 18
22 20
23 20
24 20
25 20
26 20
27 20
28 21
<<<sep_out_sample>>>
lea 0x1(%r8),%eax
imul %edi,%eax
lea 0x1(%rdi,%rax,1),%eax
add %eax,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a3 - a3;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        if (a2 < a3)
        {
            v8 += a1 * a5;
        }
        else
        {
            v8 += a2 + a3 * a4;
        }
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a2)
    {
        if (a2 < a3)
        {
            v10 += a1 * a1;
        }
        else
        {
            v10 += a1 + a3 * a2;
        }
    }
    v12 = a1 * a5 + a1;
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 33
2 33
3 34
4 34
5 34
6 34
7 34
8 35
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
add %r8d,%ecx
imul %esi,%edx
add %ecx,%edx
sub %edi,%esi
lea 0x1(%rdx,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a3 * a2;
    v7 = a2 - (a4 - a4 + a1);
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += a3 - a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 11
5 4
6 11
7 5
8 11
9 12
<<<sep_out_sample>>>
add %edx,%edi
lea (%r8,%rsi,2),%eax
lea 0x1(%rax,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (v6 < a2)
        {
            v6 += (a3 + a3) * a1;
        }
        else
        {
            v6 += (a5 - a5) * a1;
        }
    }
    v8 = a2 - a4;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 18
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
imul %edx,%ecx
add %ecx,%esi
imul %esi,%edi
add %edi,%eax
imul %edx,%edx
lea (%rdx,%r8,2),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a1 * (a3 * a4 + a2);
    v7 = (a5 + a3 * a3) + a5;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 4
7 4
8 6
9 5
10 5
11 6
12 7
<<<sep_out_sample>>>
cmp %esi,%edx
jge f <func1+0xf>
lea -0x1(%r8),%eax
imul %edx,%eax
add %esi,%eax
jmp 17 <func1+0x17>
mov %esi,%eax
sub %edx,%eax
add %ecx,%eax
add %edi,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a5 - a5;
    }
    if (a3 < a2)
    {
        v8 = a3 * a5 - a3 + a2;
    }
    else
    {
        v8 = ((a2 - a3) + a4) + a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 15
8 15
9 15
10 15
11 17
12 17
13 17
14 17
15 17
16 18
<<<sep_out_sample>>>
mov %edi,%r10d
imul %edi,%r10d
imul %ecx,%r10d
imul %esi,%r10d
lea 0x1(%r8),%eax
imul %esi,%eax
mov %eax,%r9d
imul %r8d,%r9d
cmp %ecx,%edi
jle 2c <func1+0x2c>
mov %edx,%eax
imul %edi,%eax
sub %esi,%eax
add %edi,%eax
jmp 31 <func1+0x31>
sub %esi,%eax
lea (%rax,%rdi,2),%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r10d,%ecx
lea 0x1(%r9,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a1 * a1 * a4 * a2;
    v7 = (a2 + a2 * a5) * a5;
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        if (a3 < a1)
        {
            v8 += (a3 - a2) * a5;
        }
        else
        {
            v8 += a3 + a2 - a3;
        }
    }
    if (a4 < a1)
    {
        v10 = a1 - (a2 - (a3 * a1));
    }
    else
    {
        v10 = a1 + a1 + a5 * a2;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 5
6 5
7 5
8 5
9 18
10 18
11 20
12 20
13 20
14 20
15 20
16 24
17 24
18 26
19 26
20 26
21 26
22 26
23 26
24 26
25 27
<<<sep_out_sample>>>
lea (%rdx,%r8,1),%eax
cmp %edi,%r8d
jl 12 <func1+0x12>
mov %ecx,%eax
imul %r8d,%eax
lea (%rax,%rsi,2),%eax
lea (%rdi,%rdx,1),%r9d
add %r9d,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%ecx
add %eax,%ecx
sub %r8d,%edx
add %edx,%edi
sub %r8d,%edi
lea (%rcx,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a5 + (a4 - a2);
    }
    if (a5 < a1)
    {
        v8 = a3 + a5;
    }
    else
    {
        v8 = a2 + a2 + a4 * a5;
    }
    if (a2 < a2)
    {
        v9 = a4 + a1 + (a1 - a5);
    }
    else
    {
        v9 = a3 - a5 + a1 - a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 9
3 9
4 15
5 15
6 15
7 25
8 25
9 25
10 25
11 25
12 23
13 23
14 23
15 25
16 26
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
lea (%rax,%r8,2),%eax
imul %edx,%edi
add %edi,%eax
imul %ecx,%edx
add %edx,%esi
imul %esi,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a5 - a4;
    v7 = a1 * a3;
    v8 = (a2 + a4 * a3) * a4;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 7
2 7
3 7
4 5
5 7
6 6
7 6
8 6
9 7
10 8
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
mov %edi,%esi
sub %edx,%esi
mov %esi,%edx
sub %ecx,%edx
add %edx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (a3 < a4)
        {
            v6 += (a2 + a4) * a2;
        }
        else
        {
            v6 += (a5 + a4) - a3;
        }
    }
    v8 = a1 - a3 - a4 + a1;
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        if (a2 < a1)
        {
            v9 += (a5 + a4) - a4;
        }
        else
        {
            v9 += (a1 + a1) + a4;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 29
2 29
3 29
4 29
5 16
6 16
7 16
8 16
9 16
10 29
11 30
<<<sep_out_sample>>>
mov %edx,%r9d
sub %r8d,%r9d
mov %edi,%eax
imul %edi,%eax
add %eax,%r9d
cmp %ecx,%edx
jle 1e <func1+0x1e>
mov %edi,%eax
imul %ecx,%eax
imul %edi,%eax
sub %edx,%eax
jmp 23 <func1+0x23>
mov %edx,%eax
imul %edi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a3 - a5 + a1 * a1;
    if (a4 < a3)
    {
        v7 = a1 * a4 * a1 - a3;
    }
    else
    {
        v7 = a3 * a1;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += a2 + a3 * a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 4
6 5
7 5
8 7
9 7
10 7
11 7
12 7
13 11
14 11
15 18
16 18
17 18
18 18
19 18
20 18
21 19
<<<sep_out_sample>>>
cmp %edi,%ecx
jge 12 <func1+0x12>
mov %ecx,%eax
imul %edi,%eax
imul %ecx,%eax
imul %r8d,%eax
jmp 17 <func1+0x17>
mov %ecx,%eax
imul %edx,%eax
lea (%rdx,%rdx,1),%r9d
imul %esi,%r9d
mov %ecx,%r10d
sub %r9d,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a4 < a1)
    {
        v6 = a4 * (a4 * a1) * a5;
    }
    else
    {
        v6 = a4 * a3;
    }
    v7 = a1 - a5 + a5 - a1;
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += a3 - a3;
    }
    v10 = a4 - a2 * (a3 + a3);
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 18
11 18
12 18
13 18
14 19
15 19
16 19
17 19
18 19
19 19
20 20
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
lea (%rsi,%rcx,2),%ecx
lea 0x1(%rcx,%r8,1),%eax
sub %edi,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (a2 < a3)
        {
            v6 += a4 * a5;
        }
        else
        {
            v6 += a5 * a3;
        }
    }
    v8 = a2 + a4;
    if (a5 < a5)
    {
        v9 = a5 + (a2 * a5 * a1);
    }
    else
    {
        v9 = a3 - a1;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a4)
    {
        v10 += a3 + a3 - a4;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 30
2 30
3 30
4 16
5 30
6 23
7 30
8 31
<<<sep_out_sample>>>
cmp %esi,%r8d
jge 11 <func1+0x11>
mov %edx,%eax
sub %edi,%eax
sub $0x1,%eax
imul %ecx,%eax
jmp 1e <func1+0x1e>
lea (%rdx,%rcx,1),%eax
mov %edx,%r9d
imul %edx,%r9d
sub %r9d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a5 < a2)
    {
        v6 = a4 * (a3 - a1) - a4;
    }
    else
    {
        v6 = a3 + a4 - a3 * a3;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        if (a3 < a1)
        {
            v7 += a4 * (a5 * a4);
        }
        else
        {
            v7 += a1 * a1;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 24
13 24
14 24
15 24
16 24
17 25
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
lea 0x1(%rcx,%rax,1),%eax
imul %r8d,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (a4 < a4)
        {
            v6 += a2 * a4 - a4;
        }
        else
        {
            v6 += a5 - a5 - a2;
        }
    }
    v8 = a5 * a2;
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        if (a2 < a3)
        {
            v9 += a1 + a4 * a4;
        }
        else
        {
            v9 += (a3 + a3) + a5;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 29
2 29
3 29
4 29
5 16
6 29
7 30
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
lea (%r8,%rcx,1),%eax
sub %esi,%ecx
add %eax,%ecx
mov %esi,%eax
sub %edx,%eax
add %eax,%esi
sub %edi,%esi
lea (%rcx,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a4 - a2;
    if (a3 < a3)
    {
        v7 = a5 + (a3 * a4) - a4;
    }
    else
    {
        v7 = (a2 - a3 + a2) - a1;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 13
2 13
3 13
4 13
5 4
6 13
7 11
8 11
9 11
10 11
11 13
12 14
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
add %esi,%ecx
lea (%rcx,%r8,2),%ecx
lea (%rdi,%r8,2),%eax
sub %edx,%eax
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a4 < a4)
    {
        v6 = a2 + a1 * (a2 + a4);
    }
    else
    {
        v6 = a5 + a5;
    }
    v7 = (a5 + a1) - a3 + a5;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 13
2 13
3 13
4 13
5 13
6 12
7 12
8 13
9 14
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %r8d,%edx
lea 0x1(%rcx,%rdx,1),%edx
mov %esi,%eax
sub %r8d,%eax
add %edx,%eax
add %ecx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (v7 < a3)
        {
            v6 += a5 - a5;
        }
        else
        {
            v6 += a1 * a4;
        }
    }
    v8 = a2 - a5;
    v9 = a4 + a2;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 18
5 16
6 16
7 18
8 17
9 18
10 19
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
lea (%rcx,%rsi,2),%r9d
lea (%r9,%r8,1),%r8d
add %r8d,%eax
add %edi,%ecx
lea (%rcx,%rsi,2),%ecx
add %ecx,%eax
sub %edx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a4 + a2 + a5 + a2;
    v7 = (a2 + a2) + (a1 + a4);
    v8 = a2 - (a3 + a1 - a1);
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 7
2 7
3 7
4 7
5 4
6 4
7 7
8 5
9 5
10 7
11 6
12 7
13 8
<<<sep_out_sample>>>
cmp %r8d,%edi
jge 1b <func1+0x1b>
mov %r8d,%r9d
sub %esi,%r9d
mov %esi,%eax
sub %edi,%eax
mov %esi,%r10d
imul %edx,%r10d
sub %r10d,%eax
jmp 3b <func1+0x3b>
lea (%rdx,%rdi,1),%eax
mov %r8d,%r9d
sub %eax,%r9d
imul %esi,%r9d
mov %r8d,%eax
imul %r8d,%eax
imul %ecx,%eax
mov %esi,%r11d
sub %eax,%r11d
mov %r11d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a1 < a5)
    {
        v6 = a5 - a2;
    }
    else
    {
        v6 = (a5 - (a3 + a1)) * a2;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        if (a2 < a4)
        {
            v7 += a4 * a2;
        }
        else
        {
            v7 += a3 * a4 - a5;
        }
    }
    if (a1 < a5)
    {
        v9 = (a2 - a1) - a2 * a3;
    }
    else
    {
        v9 = a2 - a5 * a5 * a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 26
6 26
7 26
8 26
9 26
10 26
11 10
12 10
13 10
14 10
15 30
16 30
17 30
18 30
19 30
20 30
21 32
22 32
23 32
24 32
25 32
26 32
27 33
<<<sep_out_sample>>>
lea (%rsi,%rcx,1),%r10d
cmp %ecx,%edx
jl 16 <func1+0x16>
mov %edi,%eax
imul %edi,%eax
mov %r8d,%r10d
sub %eax,%r10d
add %ecx,%r10d
lea (%rsi,%rdx,1),%eax
mov %ecx,%r9d
sub %eax,%r9d
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
add %ecx,%r8d
add %r10d,%r8d
lea (%rcx,%rdx,1),%eax
sub %edi,%eax
sub %edi,%eax
add %r8d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a3 < a4)
    {
        v6 = a2 + a4;
    }
    else
    {
        v6 = (a5 - a1 * a1) + a4;
    }
    v7 = (a4 + a3) - a1 - a1;
    v8 = (a2 - a2 + a4) - a4;
    v9 = a4 - (a2 + a3);
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 4
3 4
4 10
5 10
6 10
7 10
8 10
9 14
10 14
11 14
12 15
13 15
14 15
15 15
16 15
17 12
18 12
19 12
20 15
21 15
22 16
<<<sep_out_sample>>>
push %rbx
cmp %esi,%ecx
jge f <func1+0xf>
lea (%rdx,%r8,1),%ebx
sub %esi,%ebx
sub %ecx,%ebx
jmp 18 <func1+0x18>
mov %esi,%ebx
sub %ecx,%ebx
add %r8d,%ebx
add %esi,%ebx
mov %edi,%eax
imul %ecx,%eax
mov %eax,%r11d
imul %esi,%r11d
add %edx,%r11d
cmp %r8d,%ecx
jge 3b <func1+0x3b>
mov %esi,%r10d
sub %r8d,%r10d
add %esi,%r10d
imul %ecx,%r10d
jmp 41 <func1+0x41>
add %edx,%eax
lea (%rax,%rcx,1),%r10d
cmp %edi,%ecx
jle 4e <func1+0x4e>
lea (%rsi,%rsi,1),%r9d
sub %r8d,%r9d
jmp 5c <func1+0x5c>
mov %r8d,%r9d
imul %r8d,%r9d
imul %r8d,%r9d
add %edx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %ebx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a4 < a2)
    {
        v6 = (a3 + a5) - a2 - a4;
    }
    else
    {
        v6 = a2 - (a4 - a2 - a5);
    }
    v7 = a1 * a4 * a2 + a3;
    if (a4 < a5)
    {
        v8 = a4 * ((a2 - a5) + a2);
    }
    else
    {
        v8 = a4 + (a3 + a1 * a4);
    }
    if (a1 < a4)
    {
        v9 = (a2 + a2) - a5;
    }
    else
    {
        v9 = (a5 * a5 * a5) + a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 4
3 4
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 12
13 12
14 12
15 12
16 12
17 13
18 13
19 15
20 15
21 15
22 15
23 15
24 19
25 19
26 21
27 21
28 23
29 23
30 23
31 27
32 27
33 27
34 27
35 29
36 29
37 29
38 29
39 29
40 29
41 29
42 29
43 30
44 30
<<<sep_out_sample>>>
test %edx,%edx
jle 14 <func1+0x14>
mov %ecx,%eax
imul %edi,%eax
mov %esi,%r10d
sub %eax,%r10d
add %edi,%r10d
jmp 1e <func1+0x1e>
mov %ecx,%r10d
imul %esi,%r10d
add %edx,%r10d
lea (%rcx,%rdx,1),%r9d
cmp %esi,%ecx
jl 33 <func1+0x33>
mov %ecx,%r9d
imul %edx,%r9d
add %esi,%r9d
add %r8d,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (v6 < a3)
    {
        v6 = a2 - a4 * a1 + a1;
    }
    else
    {
        v6 = a4 * a2 + a3;
    }
    if (a4 < a2)
    {
        v7 = (a2 - a2 + a4) + a3;
    }
    else
    {
        v7 = (a4 * a3) + a2 + a5;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 6
9 10
10 10
11 10
12 14
13 12
14 12
15 18
16 18
17 18
18 18
19 20
20 20
21 20
22 20
23 20
24 20
25 21
<<<sep_out_sample>>>
cmp %edi,%r8d
jge 13 <func1+0x13>
lea -0x1(%rcx),%r9d
imul %esi,%r9d
imul %edi,%r9d
jmp 20 <func1+0x20>
mov %edx,%r9d
sub %r8d,%r9d
imul %edx,%r9d
add %r8d,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
mov %r8d,%edi
imul %r8d,%edi
add %ecx,%edi
add %edi,%eax
add %r8d,%ecx
sub %edx,%ecx
sub %edx,%ecx
add %eax,%ecx
lea (%rcx,%r8,2),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a5 < a1)
    {
        v6 = a1 * (a2 * a4 - a2);
    }
    else
    {
        v6 = (a3 * (a3 - a5)) + a5;
    }
    v7 = a4 + a5 * a5;
    v8 = a4 + a5 - a3 - a3;
    v9 = a5 + a5;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 10
11 15
12 15
13 15
14 15
15 15
16 12
17 12
18 12
19 15
20 13
21 13
22 13
23 15
24 15
25 16
<<<sep_out_sample>>>
lea 0x1(%rsi),%r9d
imul %r8d,%r9d
imul %edi,%r9d
lea (%rdx,%rdx,1),%eax
test %edx,%edx
jle 1b <func1+0x1b>
mov %edi,%eax
sub %r8d,%eax
imul %esi,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = (a2 * a5 + a5) * a1;
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        if (a3 < a1)
        {
            v7 += (a4 * a3) + a3;
        }
        else
        {
            v7 += a4 + a2;
        }
    }
    if (v7 < a3)
    {
        v9 = a2 * (a1 - a5);
    }
    else
    {
        v9 = (a3 + a3) - (a5 - a5);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 23
5 17
6 17
7 19
8 19
9 19
10 25
11 25
12 25
13 25
14 25
15 25
16 26
<<<sep_out_sample>>>
add %edi,%edx
add %edx,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%eax
imul %edi,%edi
sub %r8d,%edi
imul %edi,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += (a1 - a3) - a4;
    }
    v8 = a5 * ((a1 * a1) - a5);
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 9
6 9
7 9
8 10
9 11
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
lea (%r8,%rsi,2),%edx
lea 0x1(%rdx,%rax,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a5 + a4 * a3;
    }
    v8 = a2 - a4;
    v9 = 0;
    for (v10 = 0; v10++; v10<a1)
    {
        v9 += (a1 - a4) * a5;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 15
2 15
3 15
4 16
<<<sep_out_sample>>>
push %rbx
mov %edx,%r10d
imul %esi,%r10d
lea (%rcx,%rdi,1),%ebx
add %esi,%ebx
imul %edi,%ebx
cmp %r8d,%r10d
jge 22 <func1+0x22>
mov %r8d,%r9d
imul %r8d,%r9d
imul %edi,%r9d
jmp 30 <func1+0x30>
mov %ecx,%r9d
sub %edi,%r9d
imul %edi,%r9d
imul %edi,%r9d
cmp %esi,%r9d
jge 42 <func1+0x42>
mov %esi,%eax
imul %ecx,%eax
mov %edi,%r11d
sub %eax,%r11d
jmp 50 <func1+0x50>
mov %edx,%eax
imul %edi,%eax
mov %r8d,%r11d
sub %eax,%r11d
add %r8d,%r11d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r10d
add %ebx,%r10d
add %r10d,%r9d
lea (%r9,%r11,1),%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a2 - a2 + a3 * a2;
    v7 = a1 * (a4 + a1 + a2);
    if (v6 < a5)
    {
        v8 = a1 * (a5 * a5);
    }
    else
    {
        v8 = ((a4 - a1) * a1) * a1;
    }
    if (v8 < a2)
    {
        v9 = a1 - a2 * a4;
    }
    else
    {
        v9 = a5 - (a3 * a1) + a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 4
3 4
4 5
5 5
6 5
7 6
8 6
9 8
10 8
11 8
12 8
13 12
14 12
15 12
16 12
17 14
18 14
19 16
20 16
21 16
22 16
23 16
24 20
25 20
26 20
27 20
28 20
29 22
30 22
31 22
32 22
33 22
34 22
35 22
36 22
37 23
38 23
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (a5 < a2)
        {
            v6 += a4 - a1;
        }
        else
        {
            v6 += a2 - a4;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += a3 + (a2 + a2);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 21
5 22
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
sub %r8d,%esi
add %esi,%eax
imul %edx,%r8d
add %r8d,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = ((a2 - a1) - a5) + a1;
    v7 = a5 * a3 + a1;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 6
7 5
8 5
9 6
10 7
<<<sep_out_sample>>>
push %rbx
mov %edx,%eax
imul %esi,%eax
imul %edi,%eax
mov %ecx,%ebx
sub %eax,%ebx
lea (%rdx,%r8,1),%r11d
cmp %r8d,%esi
jl 20 <func1+0x20>
lea (%rdx,%rdi,1),%r11d
sub %r8d,%r11d
sub %ecx,%r11d
mov %ecx,%r10d
sub %r8d,%r10d
mov %edx,%r9d
imul %r8d,%r9d
sub %r9d,%r10d
lea (%rcx,%rdi,1),%r9d
cmp %ecx,%edx
jg 41 <func1+0x41>
mov %ecx,%eax
imul %ecx,%eax
lea (%rax,%rsi,2),%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %ebx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a4 - a3 * a2 * a1;
    if (a2 < a5)
    {
        v7 = a1 + ((a3 - a1) + a5);
    }
    else
    {
        v7 = (a3 + a1) - a5 - a4;
    }
    v8 = a4 - a5 - a3 * a5;
    if (a4 < a3)
    {
        v9 = a4 + a1;
    }
    else
    {
        v9 = a2 + a2 + a4 * a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 4
3 4
4 4
5 4
6 4
7 7
8 5
9 5
10 11
11 11
12 11
13 13
14 13
15 13
16 13
17 13
18 16
19 14
20 14
21 20
22 20
23 20
24 22
25 22
26 22
27 22
28 22
29 22
30 22
31 22
32 23
33 23
<<<sep_out_sample>>>
lea (%rcx,%rdi,1),%eax
cmp $0x1,%ecx
jg 11 <func1+0x11>
lea -0x1(%rdi),%eax
imul %r8d,%eax
sub %edi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (v7 < a3)
        {
            v6 += (a4 - a4) - a2;
        }
        else
        {
            v6 += a4 * a5 * a3;
        }
    }
    if (v7 < a4)
    {
        v8 = a3 - (a3 - (a4 + a1));
    }
    else
    {
        v8 = a5 * a1 - a5 - a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 18
2 16
3 16
4 22
5 22
6 22
7 24
8 24
9 24
10 24
11 24
12 25
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
mov %esi,%r9d
sub %ecx,%r9d
sub %edx,%edi
add %r9d,%edi
lea 0x1(%rax,%rdi,1),%edi
sub %ecx,%r8d
add %r8d,%esi
sub %edx,%esi
lea (%rdi,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = (a2 - a4) - (a3 - a1);
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += a4 + a5 * a4;
    }
    v9 = (a2 + (a5 - a4)) - a3;
    v10 = 0;
    for (v11 = 0; v11++; v11<a2)
    {
        v10 += a4 * a5 + a4;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 16
4 16
5 4
6 4
7 4
8 4
9 16
10 10
11 10
12 10
13 16
14 17
<<<sep_out_sample>>>
mov %edx,%r9d
imul %esi,%r9d
mov %r8d,%eax
imul %r8d,%eax
add %eax,%r9d
mov %ecx,%eax
sub %esi,%eax
test %edi,%edi
jg 24 <func1+0x24>
mov %edi,%eax
sub %edx,%eax
imul %r8d,%eax
imul %ecx,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a3 * a2 + a5 * a5;
    if (v7 < a1)
    {
        v7 = a3 - a3 - a2 + a4;
    }
    else
    {
        v7 = (a1 - a3) * a5 * a4;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += a2 * a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 4
6 7
7 7
8 5
9 5
10 11
11 11
12 11
13 11
14 18
15 18
16 18
17 18
18 18
19 18
20 19
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
sub %edi,%esi
add %edx,%esi
lea (%r8,%rsi,1),%eax
imul %ecx,%edx
lea 0x1(%rax,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = (a3 - (a1 - a2)) - a4;
    v7 = a4 * a3;
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        if (a5 < a1)
        {
            v8 += a4 - a3;
        }
        else
        {
            v8 += a5 * a5;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 4
5 4
6 18
7 5
8 18
9 19
<<<sep_out_sample>>>
mov %esi,%r9d
sub %edi,%r9d
mov %ecx,%eax
imul %r8d,%eax
test %edi,%edi
cmovg %eax,%r9d
cmp %esi,%r9d
jge 24 <func1+0x24>
lea -0x1(%r8),%r11d
imul %esi,%r11d
add %edx,%r11d
jmp 2b <func1+0x2b>
mov %esi,%r11d
imul %ecx,%r11d
test %edx,%edx
jle 3b <func1+0x3b>
lea (%rdx,%rdx,1),%r10d
sub %edi,%r10d
add %esi,%r10d
jmp 45 <func1+0x45>
mov %edx,%r10d
neg %r10d
imul %ecx,%r10d
add %edi,%edx
add %edx,%esi
add %r8d,%esi
add %ecx,%esi
add %esi,%r9d
add %r11d,%r9d
add %r10d,%r9d
imul %edi,%r8d
add %r8d,%ecx
sub %edi,%ecx
lea (%r9,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (v6 < a1)
    {
        v6 = a4 * a5;
    }
    else
    {
        v6 = a2 - a1;
    }
    if (v6 < a2)
    {
        v7 = a5 * a2 - a2 + a3;
    }
    else
    {
        v7 = a2 * a4;
    }
    if (v8 < a3)
    {
        v8 = (a3 + a3 - a1) + a2;
    }
    else
    {
        v8 = a4 * ((a4 - a4) - a3);
    }
    v9 = a1 * a5 + a4 - a1;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 6
4 6
5 6
6 6
7 12
8 12
9 14
10 14
11 14
12 14
13 18
14 18
15 20
16 20
17 22
18 22
19 22
20 22
21 26
22 26
23 26
24 29
25 29
26 29
27 29
28 29
29 29
30 29
31 28
32 28
33 28
34 29
35 30
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
lea 0x1(%rcx,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a3 < a3)
    {
        v6 = a1 + (a4 * a1 + a4);
    }
    else
    {
        v6 = (a5 - a5) - a5;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        if (a5 < a1)
        {
            v7 += (a3 * a5) * a3;
        }
        else
        {
            v7 += (a1 * a2) + a2;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 24
2 24
3 24
4 25
<<<sep_out_sample>>>
mov %ecx,%eax
imul %esi,%eax
mov %eax,%r9d
sub %edx,%r9d
sub %esi,%r9d
cmp %ecx,%edi
jge 1e <func1+0x1e>
mov %r8d,%eax
sub %edi,%eax
lea (%rcx,%rsi,1),%r10d
sub %r10d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %r9d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a1 + a1 - a1;
    }
    v8 = a4 * a2 - a3 - a2;
    if (a1 < a4)
    {
        v9 = a5 - a1 - (a4 + a2);
    }
    else
    {
        v9 = a2 * a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 9
4 9
5 9
6 10
7 10
8 12
9 12
10 12
11 12
12 18
13 18
14 18
15 18
16 18
17 18
18 19
<<<sep_out_sample>>>
mov $0x1,%r9d
sub %r8d,%r9d
imul %edx,%r9d
sub %edi,%r9d
lea (%rdx,%r8,1),%eax
add %ecx,%eax
mov %edx,%r10d
imul %ecx,%r10d
cmp %edi,%edx
cmovl %r10d,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %r9d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (a2 < a2)
        {
            v6 += (a1 - a3) + a1;
        }
        else
        {
            v6 += a4 * a3 - a1;
        }
    }
    v8 = a3 - a5 * a3 - a1;
    if (a3 < a1)
    {
        v9 = (a1 + a3 * a4) - a1;
    }
    else
    {
        v9 = a4 + (a3 + a5);
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a1)
    {
        if (a1 < a4)
        {
            v10 += a5 - a2 - a2;
        }
        else
        {
            v10 += a1 - a2 + a5;
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 16
4 16
5 23
6 23
7 19
8 19
9 19
10 19
11 37
12 37
13 37
14 37
15 37
16 37
17 38
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %eax,%ecx
imul %edi,%esi
mov %edx,%eax
imul %edx,%eax
add %eax,%esi
lea 0x1(%rcx,%rsi,1),%eax
sub %edx,%r8d
imul %r8d,%edx
add %edx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a3 < a3)
    {
        v6 = a2 * a1;
    }
    else
    {
        v6 = (a1 * a2) + a3 * a3;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        if (a2 < a4)
        {
            v7 += (a2 * a2) - a4;
        }
        else
        {
            v7 += (a4 * a1) * a3;
        }
    }
    v9 = (a3 * (a5 - a3)) + a1;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 25
2 25
3 25
4 25
5 10
6 10
7 10
8 10
9 25
10 24
11 24
12 24
13 25
14 26
<<<sep_out_sample>>>
test %ecx,%ecx
jle 10 <func1+0x10>
lea (%rdi,%rdx,1),%r9d
add %esi,%r9d
add %r8d,%r9d
jmp 1d <func1+0x1d>
mov %r8d,%r9d
sub %ecx,%r9d
sub %ecx,%r9d
imul %edi,%r9d
cmp %r8d,%edx
jge 34 <func1+0x34>
mov %ecx,%eax
imul %edi,%eax
mov %edx,%r10d
sub %eax,%r10d
mov %r10d,%eax
sub %esi,%eax
jmp 3d <func1+0x3d>
lea 0x1(%rcx),%eax
imul %r8d,%eax
sub %edx,%eax
add %edi,%edx
add %esi,%edx
add %edx,%r8d
add %r8d,%ecx
add %r9d,%ecx
add %ecx,%eax
imul %esi,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (v6 < a4)
    {
        v6 = a5 + (a1 + a3 + a2);
    }
    else
    {
        v6 = ((a5 - a4) - a4) * a1;
    }
    if (a3 < a5)
    {
        v7 = a3 - a4 * a1 - a2;
    }
    else
    {
        v7 = (a5 + a4 * a5) - a3;
    }
    v8 = a2 * a1;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 10
11 12
12 12
13 14
14 14
15 14
16 14
17 14
18 14
19 14
20 18
21 18
22 18
23 21
24 21
25 21
26 21
27 21
28 21
29 20
30 21
31 22
<<<sep_out_sample>>>
lea (%rsi,%rcx,1),%eax
lea (%rdx,%rdi,2),%r9d
add %r9d,%edx
add %edx,%esi
add %r8d,%esi
add %esi,%ecx
imul %eax,%r8d
imul %r8d,%edi
lea 0x1(%rcx,%rdi,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a1 * ((a2 + a4) * a5);
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += a2 + a1 * a4;
    }
    v9 = a4 + a2;
    v10 = a3 + a1 - a4 + a4;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 12
3 12
4 12
5 12
6 12
7 4
8 4
9 12
10 12
11 13
<<<sep_out_sample>>>
test %r8d,%r8d
jle e <func1+0xe>
mov %ecx,%eax
imul %edi,%eax
add %esi,%eax
jmp 17 <func1+0x17>
lea -0x1(%rdi),%eax
imul %r8d,%eax
sub %ecx,%eax
mov %r8d,%r10d
imul %r8d,%r10d
lea (%rsi,%rdx,1),%r9d
cmp %ecx,%eax
jl 36 <func1+0x36>
mov %esi,%r9d
imul %r8d,%r9d
mov %edi,%r11d
sub %r9d,%r11d
mov %r11d,%r9d
add %edi,%edx
add %esi,%edx
add %r8d,%edx
add %ecx,%edx
add %edx,%eax
add %r10d,%eax
add %r9d,%eax
add %ecx,%esi
imul %esi,%ecx
sub %ecx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (v6 < a5)
    {
        v6 = a4 * a1 + a2;
    }
    else
    {
        v6 = a1 * a5 - a5 - a4;
    }
    v7 = a5 * a5;
    if (v6 < a4)
    {
        v8 = (a2 - a1) + a1 + a3;
    }
    else
    {
        v8 = a1 - (a2 * a5);
    }
    v9 = a5 - a4 * (a2 + a4);
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 12
11 12
12 15
13 13
14 13
15 19
16 19
17 19
18 19
19 19
20 22
21 22
22 22
23 22
24 22
25 22
26 22
27 21
28 21
29 21
30 22
31 23
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
imul %esi,%edi
add %edx,%edi
mov %r8d,%r9d
sub %edi,%r9d
add %r9d,%eax
imul %edx,%r8d
imul %edx,%r8d
mov %ecx,%edi
sub %r8d,%edi
add %edi,%eax
sub %edx,%ecx
sub %edx,%ecx
add %ecx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a5 - (a3 + a2 * a1);
    v7 = a4 - a5 * a3 * a3;
    v8 = ((a4 - a3) - a3) + a2;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 7
2 7
3 7
4 7
5 4
6 4
7 4
8 4
9 7
10 5
11 5
12 5
13 5
14 7
15 6
16 6
17 6
18 7
19 8
<<<sep_out_sample>>>
lea (%rdi,%rdx,2),%eax
lea 0x1(%rax,%rsi,2),%eax
add %eax,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (a5 < a2)
        {
            v6 += a3 - a2;
        }
        else
        {
            v6 += (a2 * a4) * a5;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += a3 - a4 * a2;
    }
    v10 = a2 + a3;
    v11 = 0;
    for (v12 = 0; v12++; v12<a1)
    {
        if (a2 < a4)
        {
            v11 += a5 * a5;
        }
        else
        {
            v11 += (a2 * a3) * a3;
        }
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 34
2 34
3 34
4 34
5 35
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
sub %edi,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += (a4 - a3) + a4;
    }
    v8 = a3 - a1;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 9
6 10
7 11
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %edx,%r8d
lea (%r8,%rcx,1),%edx
sub %esi,%ecx
lea 0x1(%rdx,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a4 - (a4 + a2) + a4;
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += a1 * a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 4
6 10
7 11
<<<sep_out_sample>>>
lea (%rcx,%rcx,1),%eax
lea (%rax,%rsi,2),%r9d
test %edi,%edi
jle 17 <func1+0x17>
mov %edi,%eax
imul %edx,%eax
imul %edx,%eax
sub %edi,%eax
jmp 1c <func1+0x1c>
mov %ecx,%eax
imul %edx,%eax
add %edx,%edi
add %edi,%esi
add %r8d,%esi
add %esi,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a2 + a2 + (a4 + a4);
    if (v7 < a1)
    {
        v7 = a1 * a3 * a3 - a1;
    }
    else
    {
        v7 = a4 * a3;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += a1 * a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 5
4 5
5 7
6 7
7 7
8 7
9 7
10 11
11 11
12 18
13 18
14 18
15 18
16 18
17 18
18 19
<<<sep_out_sample>>>
lea 0x2(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12, v13 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += (a2 + a4) + a4;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += a3 + a5 * a5;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a1)
    {
        if (a3 < a2)
        {
            v10 += a2 - a2;
        }
        else
        {
            v10 += a5 * a5;
        }
    }
    v12 = 0;
    for (v13 = 0; v13++; v13<a2)
    {
        if (v9 < a3)
        {
            v12 += a4 * a3;
        }
        else
        {
            v12 += (a3 * a5) * a4;
        }
    }
    return v12+v13+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 38
2 38
3 38
4 38
5 39
<<<sep_out_sample>>>
cmp %ecx,%r8d
jge e <func1+0xe>
mov %esi,%r9d
imul %edx,%r9d
jmp 15 <func1+0x15>
mov %edx,%r9d
imul %r8d,%r9d
test %ecx,%ecx
jle 25 <func1+0x25>
lea (%rdx,%rdi,1),%r11d
add %r8d,%r11d
add %esi,%r11d
jmp 32 <func1+0x32>
mov %edi,%r11d
imul %ecx,%r11d
add %esi,%r11d
add %edi,%r11d
cmp %r8d,%r9d
jge 40 <func1+0x40>
mov %ecx,%r10d
imul %edi,%r10d
jmp 4b <func1+0x4b>
lea (%rcx,%r8,1),%r10d
add %edx,%r10d
imul %edi,%r10d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
add %r11d,%eax
add %r10d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a5 < a4)
    {
        v6 = (a2 - a2) + a2 * a3;
    }
    else
    {
        v6 = a3 * a5;
    }
    if (v7 < a4)
    {
        v7 = a3 + a1 + a5 + a2;
    }
    else
    {
        v7 = a2 + (a1 * a4) + a1;
    }
    if (v6 < a5)
    {
        v8 = a4 * a1;
    }
    else
    {
        v8 = ((a4 + a5) + a3) * a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 12
9 12
10 14
11 14
12 14
13 14
14 18
15 18
16 18
17 18
18 20
19 20
20 22
21 22
22 22
23 26
24 26
25 26
26 28
27 28
28 28
29 28
30 28
31 28
32 28
33 29
<<<sep_out_sample>>>
mov %r8d,%r9d
sub %edi,%r9d
cmp %r8d,%edi
jle 18 <func1+0x18>
mov %edx,%r9d
imul %r8d,%r9d
add %ecx,%r9d
add %edx,%r9d
mov %edi,%r10d
imul %edi,%r10d
lea (%r8,%rdx,2),%eax
test %ecx,%ecx
jg 31 <func1+0x31>
lea 0x1(%rsi),%eax
imul %r8d,%eax
imul %ecx,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %eax,%r9d
lea (%r9,%r10,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (a4 < a2)
        {
            v6 += a1 + a1;
        }
        else
        {
            v6 += a4 + a4;
        }
    }
    if (a5 < a1)
    {
        v8 = ((a3 * a5) + a4) + a3;
    }
    else
    {
        v8 = a5 - a1;
    }
    v9 = a1 * a1;
    if (v6 < a4)
    {
        v10 = a3 + a5 + a3;
    }
    else
    {
        v10 = a4 * (a5 + a5 * a2);
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 16
4 16
5 18
6 18
7 18
8 18
9 24
10 24
11 27
12 25
13 25
14 31
15 31
16 31
17 33
18 33
19 33
20 33
21 33
22 33
23 33
24 34
<<<sep_out_sample>>>
cmp %ecx,%r8d
jge 11 <func1+0x11>
lea (%r8,%rcx,1),%r9d
add %edi,%r9d
sub %esi,%r9d
jmp 1d <func1+0x1d>
mov %ecx,%r9d
sub %esi,%r9d
sub %edi,%r9d
add %ecx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
lea (%rdx,%rcx,2),%ecx
imul %ecx,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a5 < a4)
    {
        v6 = a5 + a4 + a1 - a2;
    }
    else
    {
        v6 = ((a4 - a2) - a1) + a4;
    }
    v7 = ((a3 + a4) + a4) * a3;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 10
11 13
12 13
13 13
14 13
15 13
16 12
17 12
18 13
19 14
<<<sep_out_sample>>>
lea (%rcx,%r8,1),%eax
cmp %r8d,%ecx
jge 11 <func1+0x11>
mov %esi,%eax
sub %ecx,%eax
sub %ecx,%eax
sub %ecx,%eax
add %edi,%edx
add %esi,%edx
add %r8d,%edx
lea 0x1(%rcx,%rdx,1),%edx
add %edx,%eax
imul %esi,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a4 * a2;
    }
    if (a4 < a5)
    {
        v8 = a2 - a4 - a4 - a4;
    }
    else
    {
        v8 = a4 + a5;
    }
    v9 = a2 * a5;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 15
2 9
3 9
4 11
5 11
6 11
7 11
8 18
9 18
10 18
11 18
12 18
13 17
14 18
15 19
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%eax
imul %ecx,%edi
sub %edx,%r8d
add %edi,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a2 * a1;
    }
    v8 = a1 * a4 - (a3 - a5);
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        v9 += a5 * (a5 * a1);
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 15
2 15
3 15
4 15
5 9
6 9
7 9
8 15
9 16
<<<sep_out_sample>>>
cmp %ecx,%edx
jle 16 <func1+0x16>
mov %ecx,%eax
imul %r8d,%eax
mov %edx,%r9d
imul %edi,%r9d
sub %r9d,%eax
jmp 1c <func1+0x1c>
lea (%rdi,%rsi,2),%eax
lea (%rax,%rdx,1),%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a3 - a5 - a1;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += (a4 + a3) - a1;
    }
    if (a4 < a3)
    {
        v10 = a4 * a5 - a3 * a1;
    }
    else
    {
        v10 = (a2 + a1 + a3) + a2;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 14
2 14
3 16
4 16
5 16
6 16
7 16
8 16
9 20
10 20
11 22
12 22
13 22
14 22
15 22
16 23
<<<sep_out_sample>>>
mov %edx,%r9d
imul %edi,%r9d
test %esi,%esi
jle 18 <func1+0x18>
mov %edi,%eax
imul %esi,%eax
imul %r8d,%eax
add %ecx,%eax
jmp 21 <func1+0x21>
lea (%rcx,%rcx,1),%eax
imul %ecx,%eax
add %r8d,%eax
add %r9d,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a1 * a5 + a5;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += a1 - a2 + a2;
    }
    v10 = a3 * a1;
    if (v11 < a2)
    {
        v11 = a5 * (a1 * a2) + a4;
    }
    else
    {
        v11 = ((a4 + a4) * a4) + a5;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 14
2 14
3 15
4 15
5 17
6 17
7 17
8 17
9 17
10 21
11 21
12 21
13 23
14 23
15 23
16 23
17 23
18 23
19 24
<<<sep_out_sample>>>
mov %edx,%eax
sub %ecx,%eax
imul %edi,%eax
lea 0x1(%r8,%rax,1),%eax
add %edi,%eax
add %eax,%edx
add %esi,%edx
add %r8d,%edx
add %ecx,%edx
imul %ecx,%edi
imul %edi,%esi
add %esi,%r8d
lea 0x1(%rdx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    if (a2 < a2)
    {
        v6 = (a5 - a4 * a5) - a5;
    }
    else
    {
        v6 = a5 + ((a4 * a1) * a2);
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += (a1 + a3) - a1;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        v9 += a4 * (a4 - a5);
    }
    v11 = (a3 - a4) * a1 + a5;
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 22
4 23
5 23
6 23
7 23
8 23
9 23
10 10
11 10
12 10
13 23
14 24
<<<sep_out_sample>>>
cmp %r8d,%esi
jge 14 <func1+0x14>
lea (%rdi,%r8,1),%r10d
mov %r8d,%r9d
neg %r9d
sub %esi,%r9d
jmp 29 <func1+0x29>
mov %r8d,%r10d
imul %r8d,%r10d
mov %r8d,%r9d
imul %ecx,%r9d
imul %r8d,%r9d
add %edx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a2 < a5)
    {
        v6 = a1 + a5;
    }
    else
    {
        v6 = a5 * a5;
    }
    if (a2 < a5)
    {
        v7 = (a1 - (a5 + a1)) - a2;
    }
    else
    {
        v7 = a3 + (a5 * a4) * a5;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 14
5 14
6 14
7 14
8 10
9 10
10 18
11 18
12 18
13 18
14 20
15 20
16 20
17 20
18 20
19 20
20 21
<<<sep_out_sample>>>
mov %r8d,%r11d
sub %edi,%r11d
imul %r8d,%r11d
imul %ecx,%r11d
cmp %edi,%r8d
jge 1c <func1+0x1c>
mov %r8d,%r10d
imul %edi,%r10d
jmp 2b <func1+0x2b>
mov %r8d,%r10d
imul %esi,%r10d
imul %esi,%r10d
imul %edx,%r10d
mov $0x0,%r9d
cmp %esi,%r8d
jge 41 <func1+0x41>
lea -0x1(%r8),%r9d
imul %esi,%r9d
sub %edx,%r9d
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a4 * ((a5 - a1) * a5);
    if (a5 < a1)
    {
        v7 = a5 * a1;
    }
    else
    {
        v7 = a5 * a2 * a2 * a3;
    }
    if (a5 < a2)
    {
        v8 = a5 * a2 - a2 - a3;
    }
    else
    {
        v8 = a3 - a3;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        v9 += (a2 + a3) + a3;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 5
6 5
7 7
8 7
9 7
10 11
11 11
12 11
13 11
14 19
15 13
16 13
17 15
18 15
19 15
20 26
21 26
22 26
23 26
24 26
25 26
26 26
27 27
<<<sep_out_sample>>>
mov %edx,%r9d
imul %r8d,%r9d
mov %ecx,%eax
sub %r8d,%eax
cmp %ecx,%r8d
jle 18 <func1+0x18>
lea -0x1(%rdi,%rdx,1),%eax
imul %esi,%eax
add %edi,%edx
add %esi,%edx
add %r8d,%edx
add %ecx,%edx
add %r9d,%edx
add %edx,%eax
imul %edi,%esi
sub $0x1,%esi
imul %esi,%edi
add %edi,%eax
add %ecx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a3 * a5;
    if (a4 < a5)
    {
        v7 = a2 * (a1 + a3) - a2;
    }
    else
    {
        v7 = a4 - a5;
    }
    v8 = (a1 * a2) * a1 - a1;
    v9 = (a2 + a4 - a2) + a5;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 11
4 11
5 5
6 5
7 7
8 7
9 15
10 15
11 15
12 15
13 15
14 15
15 13
16 13
17 13
18 15
19 14
20 15
21 16
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %eax,%ecx
lea (%r8,%r8,2),%eax
imul %eax,%edx
lea (%rcx,%rdx,1),%eax
lea (%rdi,%r8,1),%r9d
add %r9d,%eax
imul %edi,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a4 < a4)
    {
        v6 = (a4 * a4) * a5;
    }
    else
    {
        v6 = a3 * (a5 + a5 + a5);
    }
    v7 = a1 + a5;
    v8 = a5 * a1;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 14
2 14
3 14
4 14
5 10
6 10
7 14
8 12
9 14
10 13
11 14
12 15
<<<sep_out_sample>>>
lea (%rsi,%rsi,1),%r10d
cmp %edx,%esi
jle 17 <func1+0x17>
mov %edx,%r9d
sub %ecx,%r9d
imul %esi,%r9d
sub %edx,%r9d
jmp 1f <func1+0x1f>
lea (%rdx,%rcx,1),%r9d
imul %r8d,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
imul %esi,%esi
sub %esi,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a4 < a4)
    {
        v6 = a2 - (a2 * a3) - a1;
    }
    else
    {
        v6 = a2 + a2;
    }
    if (a3 < a2)
    {
        v7 = (a3 - a4) * a2 - a3;
    }
    else
    {
        v7 = (a3 + a4) * a5;
    }
    v8 = a5 - a2 * a2;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 12
3 12
4 14
5 14
6 14
7 14
8 14
9 18
10 18
11 21
12 21
13 21
14 21
15 21
16 21
17 20
18 20
19 21
20 22
<<<sep_out_sample>>>
mov %edx,%eax
imul %r8d,%eax
add %esi,%eax
sub %edi,%eax
mov %ecx,%r10d
imul %ecx,%r10d
imul %r8d,%r10d
imul %edx,%r10d
cmp %ecx,%esi
jge 26 <func1+0x26>
lea (%r8,%r8,2),%r9d
add %ecx,%r9d
jmp 2d <func1+0x2d>
mov %edi,%r9d
imul %ecx,%r9d
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = (a3 * a5 + a2) - a1;
    v7 = a3 * (a5 * (a4 * a4));
    if (a2 < a4)
    {
        v8 = a5 + a5 + a5 + a4;
    }
    else
    {
        v8 = a1 * a4;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        v9 += a2 + a4;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 5
6 5
7 5
8 5
9 6
10 6
11 8
12 8
13 8
14 12
15 12
16 19
17 19
18 19
19 19
20 19
21 19
22 19
23 20
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea (%r8,%rcx,1),%esi
lea 0x1(%rsi,%rcx,2),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = (a4 - a4) * a3 * a1;
    v7 = a4 + a4;
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        if (a5 < a4)
        {
            v8 += a1 * a5;
        }
        else
        {
            v8 += (a1 + a1) - a1;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 18
5 18
6 19
<<<sep_out_sample>>>
cmp %edx,%r8d
jge 15 <func1+0x15>
mov %ecx,%eax
imul %ecx,%eax
mov %edx,%r9d
sub %eax,%r9d
mov %r9d,%eax
jmp 1f <func1+0x1f>
mov %edx,%eax
sub %ecx,%eax
imul %edi,%eax
add %r8d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a4 + a4;
    }
    if (a5 < a3)
    {
        v8 = a3 - (a4 * a4);
    }
    else
    {
        v8 = a5 - (a4 - a3) * a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 11
8 11
9 15
10 15
11 15
12 15
13 17
14 17
15 17
16 17
17 17
18 18
<<<sep_out_sample>>>
lea 0x2(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12, v13 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += (a1 * a1) + a1;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        if (v9 < a2)
        {
            v8 += a5 - a3 - a1;
        }
        else
        {
            v8 += a1 * a5;
        }
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a3)
    {
        if (a5 < a5)
        {
            v10 += a4 + a2;
        }
        else
        {
            v10 += a5 + (a1 - a3);
        }
    }
    v12 = 0;
    for (v13 = 0; v13++; v13<a4)
    {
        if (v11 < a2)
        {
            v12 += a1 + a4;
        }
        else
        {
            v12 += a4 * (a1 - a4);
        }
    }
    return v12+v13+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 45
2 45
3 45
4 45
5 46
<<<sep_out_sample>>>
lea (%rsi,%rdi,1),%eax
cmp %esi,%edi
jge 11 <func1+0x11>
mov %edx,%eax
imul %ecx,%eax
add %esi,%eax
imul %edi,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (a1 < a5)
        {
            v6 += a2 - a3;
        }
        else
        {
            v6 += (a5 - a3) * a3;
        }
    }
    if (a1 < a2)
    {
        v8 = a1 * (a3 * a4 + a2);
    }
    else
    {
        v8 = a2 + a1;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        if (v9 < a3)
        {
            v9 += a5 + a4;
        }
        else
        {
            v9 += a1 * (a3 + a1);
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 16
3 16
4 18
5 18
6 18
7 18
8 36
9 36
10 36
11 36
12 36
13 37
<<<sep_out_sample>>>
cmp %edx,%ecx
jge 10 <func1+0x10>
mov %r8d,%r9d
imul %esi,%r9d
add %ecx,%r9d
jmp 17 <func1+0x17>
mov %edi,%r9d
imul %edi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
add $0x1,%esi
imul %esi,%r8d
sub %ecx,%r8d
lea 0x1(%rax,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a4 < a3)
    {
        v6 = a4 + a5 * a2;
    }
    else
    {
        v6 = a1 * a1;
    }
    v7 = (a5 * a2 + a5) - a4;
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        if (a2 < a3)
        {
            v8 += a4 * a2;
        }
        else
        {
            v8 += a1 + a5 * a4;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 25
10 25
11 25
12 25
13 25
14 12
15 12
16 12
17 25
18 26
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%r9d
imul %r8d,%r9d
mov %edx,%eax
imul %ecx,%eax
cmp %r8d,%edx
jle 1e <func1+0x1e>
lea (%rcx,%rdx,1),%r10d
add %esi,%r10d
add %r8d,%r10d
jmp 2a <func1+0x2a>
lea (%rcx,%r8,1),%r10d
imul %edx,%r10d
imul %esi,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a5 * (a1 + a3);
    v7 = a3 * a4;
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += a1 + a3 + a1;
    }
    if (a5 < a3)
    {
        v10 = a4 + a3 + a2 + a5;
    }
    else
    {
        v10 = a3 * (a4 + a5) * a2;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 5
4 5
5 11
6 11
7 13
8 13
9 13
10 13
11 17
12 17
13 17
14 19
15 19
16 19
17 19
18 19
19 19
20 19
21 20
<<<sep_out_sample>>>
lea (%rcx,%r8,1),%eax
cmp %edx,%esi
jge 12 <func1+0x12>
lea (%r8,%rsi,1),%eax
imul %esi,%eax
imul %edi,%eax
add %edi,%edx
add %esi,%edx
add %edx,%r8d
add %ecx,%r8d
add %r8d,%eax
imul %edi,%esi
sub %ecx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a2 < a3)
    {
        v6 = a2 * (a5 + a2) * a1;
    }
    else
    {
        v6 = a4 + a5;
    }
    v7 = a1 * a2 - a4;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 6
7 13
8 13
9 13
10 13
11 13
12 12
13 12
14 13
15 14
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
lea (%r8,%rcx,1),%esi
imul %esi,%edx
add %r8d,%edx
add %edx,%eax
sub %edi,%ecx
imul %ecx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = (a5 + a4) * a3 + a5;
    v7 = a5 * a4 - a5 * a1;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 4
7 4
8 6
9 5
10 5
11 6
12 7
<<<sep_out_sample>>>
mov %esi,%eax
sub %edi,%eax
mov %edi,%r9d
imul %r8d,%r9d
sub %r9d,%eax
lea (%rdi,%rdx,1),%r9d
cmp %eax,%edi
jg 21 <func1+0x21>
lea 0x1(%rsi),%r9d
imul %edx,%r9d
add %edi,%r9d
lea 0x1(%r9,%rdi,1),%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = a2 - a1 - a1 * a5;
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += a3 - a5;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        if (a4 < a4)
        {
            v9 += a2 + a4 + a4;
        }
        else
        {
            v9 += a1 + (a3 + a1);
        }
    }
    if (v6 < a1)
    {
        v11 = a1 + a3;
    }
    else
    {
        v11 = (a3 + a2 * a3) + a1;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 4
6 24
7 22
8 22
9 28
10 28
11 28
12 30
13 30
14 30
15 30
16 30
17 30
18 31
<<<sep_out_sample>>>
add %edx,%edi
add %esi,%edi
add %r8d,%edi
imul %edx,%r8d
lea (%rdi,%rcx,2),%eax
sub %r8d,%eax
imul %esi,%ecx
imul %edx,%ecx
imul %ecx,%edx
lea 0x1(%rax,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a2 < a2)
    {
        v6 = a1 + a2 + a5 - a5;
    }
    else
    {
        v6 = a4 - (a3 * a5);
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += a4 - a2;
    }
    if (a4 < a4)
    {
        v9 = ((a5 + a5) - a1) + a4;
    }
    else
    {
        v9 = (a4 * a2 * a3) * a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 25
2 25
3 25
4 10
5 10
6 25
7 23
8 23
9 23
10 25
11 26
<<<sep_out_sample>>>
mov %ecx,%r11d
imul %ecx,%r11d
lea (%rdx,%rdx,1),%r10d
mov %edi,%r9d
imul %ecx,%r9d
sub %r9d,%r10d
cmp %edx,%ecx
jle 29 <func1+0x29>
mov %edi,%r9d
imul %edx,%r9d
imul %edi,%r9d
add %esi,%r9d
jmp 34 <func1+0x34>
lea (%rcx,%rdx,1),%r9d
imul %edi,%r9d
sub %ecx,%r9d
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a4 * a4;
    if (a5 < a5)
    {
        v7 = a4 * a5 - a4;
    }
    else
    {
        v7 = a3 + a3 - (a1 * a4);
    }
    if (a3 < a4)
    {
        v8 = (a1 * a3) * a1 + a2;
    }
    else
    {
        v8 = (a1 * (a4 + a3)) - a4;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        v9 += a4 + a4;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 11
4 11
5 11
6 11
7 13
8 13
9 15
10 15
11 15
12 15
13 15
14 19
15 19
16 19
17 26
18 26
19 26
20 26
21 26
22 26
23 26
24 27
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %r8d,%edx
add %ecx,%edx
lea 0x1(%rsi),%eax
imul %eax,%ecx
sub %edi,%ecx
lea (%rdx,%rcx,1),%eax
add %r8d,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a4 + (a4 * a2) - a1;
    v7 = ((a2 + a1) + a5) - a1;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 4
7 4
8 6
9 5
10 6
11 7
<<<sep_out_sample>>>
mov %esi,%r9d
sub %r8d,%r9d
mov %r8d,%eax
imul %r8d,%eax
cmp %esi,%edx
cmovl %eax,%r9d
lea (%rdi,%rdx,1),%eax
cmp %r8d,%esi
jge 29 <func1+0x29>
mov %edi,%r10d
imul %edx,%r10d
mov %esi,%eax
sub %ecx,%eax
add %r10d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a3 < a2)
    {
        v6 = a5 * a5;
    }
    else
    {
        v6 = a2 - a5;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += (a2 - a3) - a3;
    }
    if (a2 < a5)
    {
        v9 = a1 * a3 - (a4 - a2);
    }
    else
    {
        v9 = a1 + a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 6
4 6
5 6
6 6
7 23
8 17
9 17
10 19
11 19
12 19
13 19
14 19
15 25
16 25
17 25
18 25
19 25
20 25
21 26
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
imul %edx,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a4 + a1 + a1;
    }
    v8 = a3 * a3;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 9
6 10
7 11
<<<sep_out_sample>>>
lea 0x2(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
add %r8d,%ecx
sub %edi,%edx
lea 0x1(%rcx,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = a3 - a1;
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        if (v7 < a3)
        {
            v7 += a1 + a1 - a2;
        }
        else
        {
            v7 += a3 - a3 * a3;
        }
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        if (a1 < a2)
        {
            v9 += a3 + a1;
        }
        else
        {
            v9 += a3 + a3 * a1;
        }
    }
    v11 = 0;
    for (v12 = 0; v12++; v12<a2)
    {
        if (a1 < a3)
        {
            v11 += a3 - a2;
        }
        else
        {
            v11 += a5 - a2;
        }
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 41
2 41
3 41
4 41
5 4
6 41
7 42
<<<sep_out_sample>>>
mov %esi,%r9d
sub %ecx,%r9d
add %edx,%r9d
imul %edx,%r9d
cmp %r9d,%esi
jle 1e <func1+0x1e>
mov %esi,%r10d
sub %edi,%r10d
imul %edi,%r10d
jmp 25 <func1+0x25>
lea (%r8,%rdi,2),%r10d
add %edi,%r10d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
lea (%r9,%r10,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = (a2 - a4 + a3) * a3;
    if (v6 < a2)
    {
        v7 = a1 * (a2 - a1);
    }
    else
    {
        v7 = a5 + a1 + a1 + a1;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 5
6 5
7 7
8 7
9 7
10 7
11 11
12 11
13 13
14 13
15 13
16 13
17 13
18 13
19 14
<<<sep_out_sample>>>
test %edi,%edi
jle 13 <func1+0x13>
mov $0x1,%eax
sub %r8d,%eax
imul %edx,%eax
add %ecx,%eax
jmp 1c <func1+0x1c>
mov %r8d,%eax
imul %edi,%eax
imul %esi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (v6 < a1)
    {
        v6 = (a3 - a3 * a5) + a4;
    }
    else
    {
        v6 = a2 * (a5 * a1);
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += a1 - (a5 - a5);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 17
12 17
13 17
14 17
15 17
16 18
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %r8d,%esi
add %ecx,%esi
sub %r8d,%ecx
lea 0x1(%rsi,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = ((a2 - a5) - a2) + a4;
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += (a1 + a1) + a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 4
6 10
7 11
<<<sep_out_sample>>>
cmp %ecx,%edi
jle 17 <func1+0x17>
mov %edx,%eax
imul %edx,%eax
mov %ecx,%r9d
sub %eax,%r9d
mov %r9d,%eax
imul %edi,%eax
jmp 1c <func1+0x1c>
lea (%rdx,%rdi,2),%eax
add %esi,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %r8d,%esi
lea 0x2(%rcx,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a5 - a1;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += (a4 + a1) - a5;
    }
    if (a4 < a1)
    {
        v10 = a1 * (a4 - a3 * a3);
    }
    else
    {
        v10 = (a1 + a3) + a1 + a2;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 14
2 14
3 16
4 16
5 16
6 16
7 16
8 16
9 16
10 20
11 20
12 22
13 22
14 22
15 22
16 22
17 23
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%r9d
add %esi,%r9d
add %r8d,%r9d
add %ecx,%r9d
add %r8d,%edx
sub %esi,%edx
add %r9d,%edx
mov %ecx,%eax
imul %r8d,%eax
imul %eax,%r8d
sub %esi,%r8d
add %edx,%r8d
mov %edi,%eax
imul %edi,%eax
imul %eax,%ecx
sub %edi,%ecx
lea (%r8,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = (a3 + a5) - a2;
    v7 = (a4 * a5 * a5) - a2;
    v8 = (a1 * a1 * a4) - a1;
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        v9 += a4 * a5;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 12
2 12
3 12
4 12
5 4
6 4
7 12
8 5
9 5
10 5
11 5
12 12
13 6
14 6
15 6
16 6
17 12
18 13
<<<sep_out_sample>>>
mov %esi,%eax
sub %edx,%eax
mov %esi,%r9d
sub %edi,%r9d
test %edi,%edi
cmovg %eax,%r9d
mov %ecx,%eax
imul %edi,%eax
cmp %eax,%esi
jle 24 <func1+0x24>
mov %ecx,%r10d
sub %edi,%r10d
add %ecx,%r10d
jmp 2c <func1+0x2c>
lea (%rcx,%rsi,1),%r10d
imul %esi,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %r8d,%esi
add %esi,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (v6 < a1)
    {
        v6 = a2 - a3;
    }
    else
    {
        v6 = a2 - a1;
    }
    v7 = a4 * a1;
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += a4 * a4;
    }
    if (v7 < a2)
    {
        v10 = a4 - a1 + a4;
    }
    else
    {
        v10 = (a2 * a4) + a2 * a2;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 6
6 6
7 12
8 12
9 18
10 18
11 20
12 20
13 20
14 20
15 24
16 24
17 26
18 26
19 26
20 26
21 26
22 26
23 26
24 27
<<<sep_out_sample>>>
cmp %r8d,%esi
jge 13 <func1+0x13>
mov %esi,%r10d
sub %edx,%r10d
sub %edi,%r10d
sub %edx,%r10d
jmp 1e <func1+0x1e>
lea -0x1(%rdx),%r10d
imul %edx,%r10d
sub %esi,%r10d
lea (%r8,%rsi,1),%r9d
test %ecx,%ecx
jg 34 <func1+0x34>
mov %r8d,%r9d
imul %edi,%r9d
imul %edi,%r9d
add %edx,%r9d
lea (%rdi,%rdx,1),%eax
mov %edi,%r11d
neg %r11d
cmp %edi,%r8d
cmovge %r11d,%eax
add %edi,%edx
add %esi,%edx
add %edx,%r8d
add %ecx,%r8d
add %r10d,%r8d
add %r9d,%r8d
add %r8d,%eax
add %ecx,%edi
imul %edi,%ecx
add %ecx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a2 < a5)
    {
        v6 = a2 - a3 - a1 - a3;
    }
    else
    {
        v6 = a3 * a3 - a3 - a2;
    }
    if (v7 < a4)
    {
        v7 = a5 + a2;
    }
    else
    {
        v7 = a5 * a1 * a1 + a3;
    }
    if (a5 < a1)
    {
        v8 = (a1 + a4 + a3) - a4;
    }
    else
    {
        v8 = a5 - a1 - a5;
    }
    v9 = (a1 + a4) * a4 + a2;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 14
12 12
13 12
14 18
15 18
16 18
17 18
18 22
19 22
20 22
21 22
22 22
23 29
24 29
25 29
26 29
27 29
28 29
29 29
30 28
31 28
32 28
33 29
34 30
<<<sep_out_sample>>>
cmp %edx,%edi
jge d <func1+0xd>
mov %edx,%r11d
imul %esi,%r11d
jmp 14 <func1+0x14>
lea (%rdx,%rdx,1),%r11d
sub %ecx,%r11d
test %r8d,%r8d
jle 29 <func1+0x29>
mov %edx,%r10d
imul %edx,%r10d
sub %ecx,%r10d
imul %ecx,%r10d
jmp 38 <func1+0x38>
mov %esi,%r10d
imul %edi,%r10d
imul %edi,%r10d
imul %ecx,%r10d
mov %esi,%eax
sub %ecx,%eax
mov %edx,%r9d
sub %r8d,%r9d
cmp %r8d,%edi
cmovl %eax,%r9d
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a1 < a3)
    {
        v6 = a3 * a2;
    }
    else
    {
        v6 = (a3 + a3) - a4;
    }
    if (v7 < a5)
    {
        v7 = a4 * (a3 * a3 - a4);
    }
    else
    {
        v7 = a2 * a1 * a1 * a4;
    }
    if (a1 < a5)
    {
        v8 = ((a5 - a4) - a5) + a2;
    }
    else
    {
        v8 = a3 - a5;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        v9 += a3 + a5;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 12
9 12
10 14
11 14
12 14
13 14
14 14
15 18
16 18
17 18
18 18
19 22
20 22
21 22
22 22
23 22
24 22
25 33
26 33
27 33
28 33
29 33
30 33
31 33
32 34
<<<sep_out_sample>>>
mov %ecx,%eax
sub %edx,%eax
cmp %edx,%esi
jge 16 <func1+0x16>
mov %esi,%eax
imul %esi,%eax
mov %r8d,%r10d
sub %eax,%r10d
mov %r10d,%eax
cmp %ecx,%esi
jle 29 <func1+0x29>
mov %edx,%r9d
sub %esi,%r9d
add %edx,%r9d
imul %esi,%r9d
jmp 37 <func1+0x37>
mov %ecx,%r9d
imul %r8d,%r9d
add %edi,%r9d
imul %esi,%r9d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%eax
lea 0x1(%r9,%rax,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a2 < a3)
    {
        v6 = a5 - (a2 * a2);
    }
    else
    {
        v6 = a4 - a3;
    }
    if (a4 < a2)
    {
        v7 = (a3 + (a3 - a2)) * a2;
    }
    else
    {
        v7 = (a1 + a4 * a5) * a2;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        if (a3 < a4)
        {
            v8 += a5 + a1;
        }
        else
        {
            v8 += (a5 + a2) * a1;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 4
4 4
5 6
6 6
7 6
8 6
9 6
10 12
11 12
12 14
13 14
14 14
15 14
16 14
17 18
18 18
19 18
20 18
21 32
22 32
23 32
24 32
25 32
26 32
27 33
<<<sep_out_sample>>>
cmp %ecx,%edx
jge 14 <func1+0x14>
mov %edx,%eax
imul %edi,%eax
mov %esi,%r9d
sub %eax,%r9d
add %r8d,%r9d
jmp 23 <func1+0x23>
mov %esi,%r9d
imul %r8d,%r9d
imul %ecx,%r9d
imul %edx,%r9d
lea (%rcx,%r8,1),%eax
lea 0x1(%rdi,%rdx,1),%r10d
add %esi,%r10d
add %r8d,%r10d
add %r10d,%ecx
add %r9d,%ecx
imul %edi,%r8d
sub %r8d,%edx
imul %edx,%esi
add %ecx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a3 < a4)
    {
        v6 = a2 - (a3 * a1) + a5;
    }
    else
    {
        v6 = (a2 * a5) * a4 * a3;
    }
    if (a1 < a1)
    {
        v7 = a4 * (a3 * a5) + a4;
    }
    else
    {
        v7 = (a3 - (a5 * a1)) * a2;
    }
    v8 = (a4 + a5 + a1) - a1;
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        v9 += a1 - (a5 * a4);
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 6
9 10
10 10
11 10
12 10
13 20
14 26
15 26
16 26
17 26
18 26
19 18
20 18
21 18
22 26
23 26
24 27
<<<sep_out_sample>>>
lea (%rdx,%rcx,2),%r9d
add %esi,%r9d
mov %edx,%eax
sub %ecx,%eax
add %edi,%eax
cmp %r8d,%esi
jle 1d <func1+0x1d>
mov %r8d,%eax
imul %edx,%eax
add %esi,%eax
imul %ecx,%eax
add %edx,%edi
add %esi,%edi
add %edi,%r8d
add %r8d,%ecx
add %r9d,%ecx
add %ecx,%eax
add %edx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = ((a4 + a3) + a4) + a2;
    if (a5 < a2)
    {
        v7 = (a2 + a5 * a3) * a4;
    }
    else
    {
        v7 = a1 + (a3 - a4);
    }
    if (a5 < a5)
    {
        v8 = a2 - a5 * (a4 + a1);
    }
    else
    {
        v8 = a1 + a2 + a3 - a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 11
4 11
5 11
6 5
7 5
8 7
9 7
10 7
11 7
12 21
13 21
14 21
15 21
16 21
17 21
18 19
19 21
20 22
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea (%r8,%rcx,1),%esi
mov %ecx,%eax
imul %ecx,%eax
imul %eax,%ecx
lea 0x1(%rsi,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a4 * a4 * a4;
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        if (a5 < a1)
        {
            v7 += (a1 * a3) * a2;
        }
        else
        {
            v7 += (a1 + a5) - a3;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 4
6 4
7 4
8 17
9 18
<<<sep_out_sample>>>
lea 0x2(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
lea 0x1(%rcx,%rax,1),%eax
imul %ecx,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a2 - (a2 - a3);
    }
    v8 = a4 * a3 + a2 + a5;
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        v9 += (a4 + a4) * a2;
    }
    v11 = 0;
    for (v12 = 0; v12++; v12<a1)
    {
        if (a3 < a2)
        {
            v11 += a2 - (a1 + a5);
        }
        else
        {
            v11 += (a1 * a4) * a1;
        }
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 27
2 27
3 27
4 27
5 9
6 9
7 9
8 27
9 28
<<<sep_out_sample>>>
mov %esi,%eax
sub %edx,%eax
lea 0x1(%rcx,%rax,1),%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (a1 < a2)
        {
            v6 += a1 * a5;
        }
        else
        {
            v6 += a5 + (a5 * a5);
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        if (a1 < a3)
        {
            v8 += a5 * (a4 * a4);
        }
        else
        {
            v8 += a2 * a5;
        }
    }
    if (a5 < a5)
    {
        v10 = ((a2 * a2) - a5) + a5;
    }
    else
    {
        v10 = a2 - a3 + a4;
    }
    v11 = 0;
    for (v12 = 0; v12++; v12<a4)
    {
        v11 += (a5 - a1) + a3;
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 34
2 34
3 41
4 41
5 41
6 41
7 41
8 41
9 42
<<<sep_out_sample>>>
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea (%rdi,%rcx,2),%eax
lea 0x1(%rax,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += (a3 - a4) * a1;
    }
    v8 = a4 + a1;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 9
5 10
6 11
<<<sep_out_sample>>>
add %edi,%edx
add %edx,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%eax
imul %r8d,%edi
add %edi,%ecx
imul %ecx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a5 + (a3 + a4);
    }
    v8 = (a1 * a5 + a4) * a5;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 9
6 9
7 9
8 10
9 11
<<<sep_out_sample>>>
test %edi,%edi
jle d <func1+0xd>
mov %edi,%r10d
imul %edx,%r10d
jmp 14 <func1+0x14>
mov %esi,%r10d
imul %edi,%r10d
cmp %r8d,%esi
jle 28 <func1+0x28>
mov %edx,%r9d
imul %ecx,%r9d
add %r8d,%r9d
sub %edi,%r9d
jmp 35 <func1+0x35>
lea (%r8,%rsi,1),%r9d
mov %ecx,%eax
imul %r8d,%eax
add %eax,%r9d
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (a2 < a4)
        {
            v6 += (a5 * a2) * a4;
        }
        else
        {
            v6 += a4 - a2;
        }
    }
    if (v6 < a1)
    {
        v8 = a1 * a3;
    }
    else
    {
        v8 = a2 * a1;
    }
    if (a5 < a2)
    {
        v9 = a5 + a3 * a4 - a1;
    }
    else
    {
        v9 = a5 + a2 + a4 * a5;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a1)
    {
        if (v11 < a4)
        {
            v10 += (a3 + a1) + a3;
        }
        else
        {
            v10 += a2 * a5 - a5;
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 22
7 22
8 24
9 24
10 26
11 26
12 26
13 26
14 26
15 30
16 30
17 30
18 30
19 44
20 44
21 44
22 44
23 44
24 44
25 45
<<<sep_out_sample>>>
test %esi,%esi
jle f <func1+0xf>
lea (%r8,%rcx,1),%eax
imul %edi,%eax
add %ecx,%eax
jmp 14 <func1+0x14>
mov %edx,%eax
imul %edx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (a1 < a1)
        {
            v6 += (a1 - a2) * a4;
        }
        else
        {
            v6 += a1 * a1 - a2;
        }
    }
    if (v8 < a2)
    {
        v8 = (a5 + a4) * a1 + a4;
    }
    else
    {
        v8 = a3 * a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 18
7 22
8 22
9 24
10 24
11 24
12 24
13 24
14 25
<<<sep_out_sample>>>
lea (%rdi,%rcx,1),%r9d
mov %edi,%eax
cmp %ecx,%edi
jle 18 <func1+0x18>
mov %esi,%r10d
sub %edi,%r10d
mov %r8d,%eax
sub %edx,%eax
add %r10d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a1 + a4;
    if (a4 < a1)
    {
        v7 = (a2 - a1) + (a5 - a3);
    }
    else
    {
        v7 = a3 + a1 - a3;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 11
3 5
4 5
5 7
6 7
7 7
8 7
9 7
10 13
11 13
12 13
13 13
14 13
15 13
16 14
<<<sep_out_sample>>>
cmp %edx,%ecx
jge 13 <func1+0x13>
mov %esi,%r9d
imul %edx,%r9d
add %ecx,%r9d
sub %edi,%r9d
jmp 1b <func1+0x1b>
lea (%r8,%rdx,1),%r9d
imul %esi,%r9d
cmp %edi,%ecx
jge 2c <func1+0x2c>
mov %esi,%eax
imul %r8d,%eax
imul %edx,%eax
add %edi,%eax
jmp 37 <func1+0x37>
mov %esi,%eax
imul %ecx,%eax
imul %edx,%eax
add %r8d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a4 < a3)
    {
        v6 = a2 * a3 + a4 - a1;
    }
    else
    {
        v6 = a2 * a5 + a2 * a3;
    }
    if (a4 < a1)
    {
        v7 = a1 + ((a2 * a5) * a3);
    }
    else
    {
        v7 = a5 + (a2 * a4) * a3;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        if (v8 < a3)
        {
            v8 += a2 * a3;
        }
        else
        {
            v8 += a2 - a2;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 12
11 12
12 14
13 14
14 14
15 14
16 14
17 18
18 18
19 18
20 18
21 32
22 32
23 32
24 32
25 32
26 32
27 33
<<<sep_out_sample>>>
mov %r8d,%r10d
sub %ecx,%r10d
cmp %ecx,%r8d
jle 14 <func1+0x14>
lea (%rdi,%rcx,2),%r9d
sub %r8d,%r9d
jmp 1b <func1+0x1b>
lea (%r8,%rsi,2),%r9d
add %r8d,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a5 - a4;
    if (a4 < a5)
    {
        v7 = (a4 - a5) + a1 + a4;
    }
    else
    {
        v7 = a5 + a2 + a2 + a5;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 5
4 5
5 7
6 7
7 7
8 11
9 11
10 13
11 13
12 13
13 13
14 13
15 13
16 14
<<<sep_out_sample>>>
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
imul %edi,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a1 + a3 * a5;
    }
    v8 = a1 * a1;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 9
6 10
7 11
<<<sep_out_sample>>>
lea (%rsi,%rcx,1),%eax
add %edi,%eax
add %edx,%eax
add %esi,%eax
add %eax,%r8d
lea (%r8,%rcx,1),%eax
imul %esi,%ecx
add %eax,%ecx
sub %esi,%edx
sub %esi,%edx
sub %edi,%edx
lea 0x1(%rcx,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a5 < a5)
    {
        v6 = (a3 * a5 + a4) + a1;
    }
    else
    {
        v6 = a4 * a2;
    }
    if (a1 < a1)
    {
        v7 = a1 * (a3 - a3) + a4;
    }
    else
    {
        v7 = (a3 - a2 - a2) - a1;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += a1 * a1 - a5;
    }
    v10 = a2 + a4;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 25
2 26
3 26
4 26
5 26
6 26
7 10
8 26
9 18
10 18
11 18
12 26
13 27
<<<sep_out_sample>>>
mov %edi,%r9d
sub %ecx,%r9d
mov %edx,%eax
imul %esi,%eax
add %eax,%r9d
test %r8d,%r8d
jle 1c <func1+0x1c>
mov %edx,%r10d
imul %edx,%r10d
jmp 30 <func1+0x30>
mov %ecx,%r11d
imul %ecx,%r11d
mov $0x1,%r10d
sub %r11d,%r10d
imul %ecx,%r10d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %r9d,%eax
add %r10d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += (a5 * a4) * a3;
    }
    v8 = (a1 - a4) + a3 * a2;
    if (v6 < a5)
    {
        v9 = a3 * a3;
    }
    else
    {
        v9 = a4 - (a4 * a4 * a4);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 9
4 9
5 9
6 10
7 10
8 12
9 12
10 12
11 16
12 16
13 16
14 16
15 16
16 18
17 18
18 18
19 18
20 18
21 18
22 19
<<<sep_out_sample>>>
cmp %edi,%esi
jge e <func1+0xe>
lea (%rsi,%rdx,2),%r9d
imul %esi,%r9d
jmp 1c <func1+0x1c>
mov %edi,%eax
imul %esi,%eax
imul %edi,%eax
mov %ecx,%r9d
sub %eax,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
lea (%r8,%rcx,2),%edx
add %edx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a2 < a1)
    {
        v6 = a2 * ((a2 + a3) + a3);
    }
    else
    {
        v6 = a4 - a1 * a2 * a1;
    }
    v7 = a1 + (a5 + a4 + a4);
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 10
10 10
11 13
12 13
13 13
14 13
15 13
16 12
17 12
18 13
19 14
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
sub %esi,%edx
sub %ecx,%edx
imul %esi,%edx
add %eax,%edx
sub %r8d,%edi
sub %esi,%edi
sub %r8d,%edi
lea (%rdx,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = ((a3 - a2) - a4) * a2;
    v7 = (a1 - a5 - a2) - a5;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 4
7 4
8 6
9 5
10 5
11 5
12 6
13 7
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
imul %edx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (a5 < a2)
        {
            v6 += a3 + a2 * a4;
        }
        else
        {
            v6 += a4 - a1 + a5;
        }
    }
    v8 = a1 * a3;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 16
6 17
7 18
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (v7 < a4)
        {
            v6 += a4 * a1;
        }
        else
        {
            v6 += a1 + (a3 - a3);
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += (a2 - a3) - a1;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a4)
    {
        v10 += a1 - a1 * a2;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 26
2 26
3 26
4 26
5 27
<<<sep_out_sample>>>
add %edx,%edi
add %esi,%edi
add %edi,%r8d
lea (%r8,%rcx,1),%edi
add %edx,%esi
imul %ecx,%ecx
sub %ecx,%esi
lea 0x1(%rdi,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a3 + a2 - a4 * a4;
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += a1 + (a1 + a5);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 4
6 4
7 4
8 10
9 11
<<<sep_out_sample>>>
cmp %r8d,%ecx
jge 16 <func1+0x16>
mov %edi,%r10d
imul %edx,%r10d
imul %esi,%r10d
imul %edi,%r10d
jmp 1f <func1+0x1f>
mov %ecx,%r10d
sub %r8d,%r10d
sub %edi,%r10d
cmp %edi,%ecx
jge 32 <func1+0x32>
mov %edi,%r9d
sub %esi,%r9d
sub %r8d,%r9d
imul %ecx,%r9d
jmp 40 <func1+0x40>
mov %r8d,%r9d
imul %r8d,%r9d
add %edx,%r9d
imul %esi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a4 < a5)
    {
        v6 = (a1 * a3) * a2 * a1;
    }
    else
    {
        v6 = (a4 - a5) - a1;
    }
    if (a4 < a1)
    {
        v7 = a4 * (a1 - a2 - a5);
    }
    else
    {
        v7 = ((a5 * a5) + a3) * a2;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 12
12 12
13 14
14 14
15 14
16 14
17 14
18 18
19 18
20 18
21 18
22 20
23 20
24 20
25 20
26 20
27 20
28 21
<<<sep_out_sample>>>
lea (%rsi,%rcx,1),%r11d
mov %esi,%r10d
neg %r10d
sub %edx,%r10d
cmp %edi,%edx
jge 20 <func1+0x20>
mov %edx,%r9d
imul %edx,%r9d
add %ecx,%r9d
add %esi,%r9d
jmp 2c <func1+0x2c>
mov %ecx,%r9d
sub %r8d,%r9d
add %edi,%r9d
sub %r8d,%r9d
add %edx,%edi
add %esi,%edi
add %r8d,%edi
add %ecx,%edi
add %r11d,%edi
add %r10d,%edi
add %r9d,%edi
imul %r8d,%edx
imul %ecx,%esi
sub %esi,%edx
lea (%rdi,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = (a4 + a3 + a2) - a3;
    v7 = (a1 - (a1 + a2)) - a3;
    if (a3 < a1)
    {
        v8 = ((a3 * a3) + a4) + a2;
    }
    else
    {
        v8 = a4 - a5 + a1 - a5;
    }
    v9 = a3 * a5 - (a4 * a2);
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 5
3 5
4 5
5 6
6 6
7 8
8 8
9 8
10 8
11 8
12 12
13 12
14 12
15 12
16 15
17 15
18 15
19 15
20 15
21 15
22 15
23 14
24 14
25 14
26 15
27 16
<<<sep_out_sample>>>
mov %esi,%eax
imul %esi,%eax
mov %ecx,%r10d
sub %eax,%r10d
test %edx,%edx
jle 1f <func1+0x1f>
mov %ecx,%r9d
imul %r8d,%r9d
imul %esi,%r9d
sub %r8d,%r9d
jmp 2b <func1+0x2b>
lea (%r8,%rdx,1),%r9d
imul %esi,%r9d
imul %ecx,%r9d
cmp $0x1,%esi
jle 3c <func1+0x3c>
mov %r8d,%eax
imul %edx,%eax
add %ecx,%eax
add %edx,%eax
jmp 44 <func1+0x44>
mov %edx,%eax
sub %edi,%eax
add %edx,%eax
sub %ecx,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a1 + a4;
    }
    v8 = a4 - (a2 * a2);
    if (v9 < a3)
    {
        v9 = (a2 * (a4 * a5)) - a5;
    }
    else
    {
        v9 = ((a5 + a3) * a2) * a4;
    }
    if (v7 < a2)
    {
        v10 = (a4 + a5 * a3) + a3;
    }
    else
    {
        v10 = a3 - (a1 - a3) - a4;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 9
4 9
5 10
6 10
7 12
8 12
9 12
10 12
11 12
12 16
13 16
14 16
15 18
16 18
17 20
18 20
19 20
20 20
21 20
22 24
23 24
24 24
25 24
26 26
27 26
28 26
29 26
30 26
31 26
32 26
33 27
<<<sep_out_sample>>>
mov %r8d,%eax
sub %ecx,%eax
test %r8d,%r8d
jg 11 <func1+0x11>
mov %edx,%eax
imul %esi,%eax
add %ecx,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (v6 < a5)
    {
        v6 = a1 - a4 - a1 + a5;
    }
    else
    {
        v6 = a4 + a3 * a2;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += a4 * a2 + a1;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a1)
    {
        v9 += (a5 + a2) * a1;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 6
3 4
4 4
5 10
6 10
7 10
8 22
9 22
10 22
11 22
12 22
13 23
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += (a3 * a2) * a1;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += a5 * (a5 + a1);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 14
2 14
3 14
4 14
5 15
<<<sep_out_sample>>>
cmp %edi,%edx
jge 12 <func1+0x12>
lea (%rdx,%rsi,1),%r10d
imul %ecx,%r10d
imul %ecx,%r10d
jmp 21 <func1+0x21>
mov %esi,%eax
imul %esi,%eax
mov %edi,%r10d
sub %eax,%r10d
imul %edi,%r10d
cmp %esi,%edx
jle 32 <func1+0x32>
lea (%r8,%rcx,1),%eax
lea (%rdi,%rdx,1),%r9d
sub %r9d,%eax
jmp 3d <func1+0x3d>
mov %ecx,%eax
imul %r8d,%eax
imul %edx,%eax
sub %edi,%eax
lea (%rdi,%rcx,1),%r9d
cmp %r8d,%edi
jg 57 <func1+0x57>
lea (%rsi,%rsi,1),%r9d
imul %edi,%r9d
mov %edx,%r11d
sub %r9d,%r11d
mov %r11d,%r9d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r10d,%ecx
add %ecx,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a3 < a1)
    {
        v6 = a4 * ((a3 + a2) * a4);
    }
    else
    {
        v6 = (a1 - a2 * a2) * a1;
    }
    if (a2 < a3)
    {
        v7 = (a5 + a4) - (a1 + a3);
    }
    else
    {
        v7 = (a4 * a5) * a3 - a1;
    }
    if (a5 < a1)
    {
        v8 = a1 + a4;
    }
    else
    {
        v8 = a3 - (a1 * (a2 + a2));
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 10
11 10
12 12
13 12
14 14
15 14
16 14
17 14
18 18
19 18
20 18
21 18
22 22
23 20
24 20
25 26
26 26
27 26
28 26
29 26
30 28
31 28
32 28
33 28
34 28
35 28
36 28
37 29
<<<sep_out_sample>>>
mov %esi,%r10d
imul %edi,%r10d
cmp %edx,%esi
jge 1b <func1+0x1b>
mov %ecx,%eax
imul %esi,%eax
mov %r8d,%r9d
sub %eax,%r9d
sub %edx,%r9d
jmp 29 <func1+0x29>
mov %edi,%r9d
imul %edi,%r9d
imul %r8d,%r9d
add %esi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a2 * a1;
    if (a2 < a3)
    {
        v7 = (a5 - (a4 * a2)) - a3;
    }
    else
    {
        v7 = (a1 * a1 * a5) + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 5
4 5
5 7
6 7
7 7
8 7
9 7
10 7
11 11
12 11
13 11
14 11
15 13
16 13
17 13
18 13
19 13
20 13
21 14
<<<sep_out_sample>>>
mov %edi,%r9d
imul %r8d,%r9d
mov %r9d,%r10d
sub %esi,%r10d
sub %edi,%r10d
lea (%rcx,%rcx,1),%eax
cmp %edx,%esi
jge 20 <func1+0x20>
imul %r8d,%r9d
mov %edi,%eax
sub %r9d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r10d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = ((a1 * a5) - a2) - a1;
    if (a2 < a3)
    {
        v7 = a1 - (a1 * a5) * a5;
    }
    else
    {
        v7 = a4 + a4;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 4
6 11
7 5
8 5
9 7
10 7
11 7
12 13
13 13
14 13
15 13
16 13
17 13
18 14
<<<sep_out_sample>>>
test %esi,%esi
jle c <func1+0xc>
lea 0x1(%rdx),%eax
imul %esi,%eax
jmp 12 <func1+0x12>
lea (%rdx,%rsi,2),%eax
sub %r8d,%eax
lea (%rdi,%rdx,1),%r9d
add %r9d,%esi
add %r8d,%esi
add %ecx,%esi
add %esi,%eax
add %ecx,%edx
sub %edi,%edx
imul %edx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (v6 < a2)
    {
        v6 = a2 + (a3 * a2);
    }
    else
    {
        v6 = a2 - a5 + a2 + a3;
    }
    v7 = ((a3 + a4) - a1) * a5;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 13
9 13
10 13
11 13
12 13
13 12
14 12
15 12
16 13
17 14
<<<sep_out_sample>>>
cmp %r8d,%esi
jge c <func1+0xc>
imul %edx,%esi
sub %ecx,%esi
jmp 16 <func1+0x16>
mov %edx,%esi
sub %edi,%esi
mov %ecx,%eax
sub %edi,%eax
add %eax,%esi
add %edi,%edx
add %r8d,%edx
lea 0x1(%rcx,%rdx,1),%eax
add %esi,%eax
imul %edi,%edi
imul %edi,%r8d
add %r8d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a2 + a2 - a5;
    }
    if (a2 < a5)
    {
        v8 = a3 * a2 - a4;
    }
    else
    {
        v8 = a3 - a1 + (a4 - a1);
    }
    if (a1 < a1)
    {
        v9 = (a1 - (a5 * a4)) + a1;
    }
    else
    {
        v9 = a1 * a1 * a5 + a4;
    }
    v10 = (a5 - a5) * a4 - a2;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 15
7 15
8 15
9 15
10 15
11 26
12 26
13 26
14 26
15 23
16 23
17 23
18 26
19 27
<<<sep_out_sample>>>
mov %r8d,%r9d
sub %ecx,%r9d
cmp %edx,%r8d
jge 12 <func1+0x12>
lea (%rcx,%rdx,2),%r9d
sub %r8d,%r9d
add %edi,%edx
mov %ecx,%eax
sub %edx,%eax
imul %esi,%eax
add %esi,%edx
add %edx,%r8d
add %r8d,%ecx
add %ecx,%r9d
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a5 < a3)
    {
        v6 = a3 + a3 - a5 + a4;
    }
    else
    {
        v6 = a1 - a4 - a1 + a5;
    }
    v7 = a1 - a1;
    v8 = a2 * (a4 - (a1 + a3));
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 4
4 4
5 6
6 6
7 13
8 13
9 13
10 13
11 14
12 14
13 14
14 14
15 14
16 15
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
lea 0x1(%rcx,%r8,1),%ecx
sub %esi,%edx
add %edx,%edi
sub %esi,%edi
lea (%rcx,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a4 - (a4 - a5);
    }
    v8 = (a1 + (a3 - a2)) - a2;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 9
6 9
7 9
8 10
9 11
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%eax
sub %ecx,%edi
imul %edi,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (a5 < a2)
        {
            v6 += (a1 * a5) * a4;
        }
        else
        {
            v6 += a4 + a4 + a1;
        }
    }
    v8 = a5 * a1 - a5 * a4;
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        v9 += (a2 * a2) - a4;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 22
4 22
5 16
6 16
7 22
8 23
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
add %esi,%ecx
mov %edi,%eax
imul %edi,%eax
sub %eax,%r8d
sub %edi,%r8d
lea 0x1(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = (a5 - a1 * a1) - a1;
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        if (v7 < a3)
        {
            v7 += a5 * a5;
        }
        else
        {
            v7 += a3 + a2 + a2;
        }
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        v9 += a4 - a1 * a3;
    }
    v11 = a5 - a5;
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 23
2 23
3 23
4 23
5 4
6 4
7 4
8 4
9 23
10 24
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a1 - a3 + a3;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        if (a2 < a3)
        {
            v8 += a5 - a4 - a5;
        }
        else
        {
            v8 += a5 * a2 * a3;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 21
5 22
<<<sep_out_sample>>>
mov %esi,%eax
sub %edx,%eax
mov %r8d,%r9d
imul %ecx,%r9d
cmp %esi,%edi
cmovl %r9d,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (v7 < a3)
        {
            v6 += a5 + a3 + a1;
        }
        else
        {
            v6 += a5 - (a4 - a5);
        }
    }
    if (a1 < a2)
    {
        v8 = a5 * a4;
    }
    else
    {
        v8 = a2 - a3;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        v9 += (a3 - a3) * a4;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 18
4 18
5 18
6 18
7 29
8 29
9 29
10 29
11 29
12 30
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
mov %edi,%esi
imul %edi,%esi
add %edx,%esi
add %esi,%edi
add %eax,%edi
imul %ecx,%edx
lea (%rdi,%rcx,2),%eax
sub %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a4 + a3 - a1;
    }
    v8 = a1 * a1 + a3 + a1;
    v9 = a4 + a4 - (a4 * a3);
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 11
5 9
6 9
7 9
8 9
9 11
10 10
11 10
12 11
13 12
<<<sep_out_sample>>>
cmp %edx,%r8d
jge 14 <func1+0x14>
lea (%rdi,%r8,1),%r9d
mov %r8d,%eax
sub %edx,%eax
imul %eax,%r9d
jmp 23 <func1+0x23>
mov %r8d,%eax
imul %edi,%eax
imul %edx,%eax
mov %edi,%r9d
sub %eax,%r9d
lea (%rdx,%rdi,1),%eax
sub %esi,%eax
cmp %esi,%r8d
jle 3d <func1+0x3d>
mov %esi,%eax
imul %edx,%eax
add %edi,%eax
mov %ecx,%r10d
sub %eax,%r10d
mov %r10d,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    if (a5 < a3)
    {
        v6 = (a1 + a5) * (a5 - a3);
    }
    else
    {
        v6 = a1 - a5 * a1 * a3;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        if (a3 < a1)
        {
            v7 += (a3 - a2) - a1;
        }
        else
        {
            v7 += a4 * a1 * a3;
        }
    }
    if (a2 < a5)
    {
        v9 = a4 - (a2 * a3 + a1);
    }
    else
    {
        v9 = a3 + a1 - a2;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a4)
    {
        if (v8 < a1)
        {
            v10 += (a3 + a5) - a3;
        }
        else
        {
            v10 += a5 - a2 - a3;
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 10
13 30
14 30
15 24
16 24
17 26
18 26
19 26
20 26
21 26
22 26
23 44
24 44
25 44
26 44
27 44
28 44
29 45
<<<sep_out_sample>>>
mov %edx,%r9d
cmp %edi,%edx
jge 12 <func1+0x12>
mov %r8d,%r9d
imul %ecx,%r9d
imul %edx,%r9d
lea 0x1(%rsi),%eax
imul %r8d,%eax
sub %edi,%eax
mov %edi,%r10d
neg %r10d
cmp %edi,%edx
jle 2e <func1+0x2e>
mov %ecx,%r10d
neg %r10d
sub %r8d,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a3 < a1)
    {
        v6 = a5 * a4 * a3;
    }
    else
    {
        v6 = a5 + (a3 - a5);
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += a3 + a2;
    }
    v9 = a2 * a5 + a5 - a1;
    if (a1 < a3)
    {
        v10 = ((a2 - a4) - a2) - a5;
    }
    else
    {
        v10 = (a2 - a1) - a2;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 6
7 17
8 17
9 17
10 24
11 24
12 18
13 18
14 20
15 20
16 20
17 26
18 26
19 26
20 26
21 26
22 26
23 26
24 27
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
mov %ecx,%r9d
imul %ecx,%r9d
sub %r9d,%eax
mov %r8d,%r10d
sub %edx,%r10d
add %r10d,%eax
lea (%rax,%rsi,2),%eax
imul %edi,%ecx
mov $0x1,%edx
sub %ecx,%edx
imul %edx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = (a1 - a4 - a1) * a4;
    v7 = a5 - a3;
    if (a2 < a2)
    {
        v8 = a2 - a4;
    }
    else
    {
        v8 = a2 + a2;
    }
    v9 = a5 - a1 * a4 * a5;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 15
2 15
3 15
4 15
5 4
6 4
7 15
8 5
9 5
10 15
11 15
12 14
13 14
14 14
15 14
16 15
17 16
<<<sep_out_sample>>>
lea (%r8,%rsi,1),%eax
add %edi,%eax
add %edx,%eax
add %esi,%eax
add %eax,%r8d
add %r8d,%ecx
sub %edi,%esi
mov %edx,%eax
imul %edi,%eax
add %eax,%esi
add %esi,%ecx
add %edx,%edi
lea 0x1(%rcx,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a2 - a1 + a3 * a1;
    v7 = a3 + a1;
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += a1 * a1;
    }
    v10 = a5 + a2 + a1 - a1;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 12
3 12
4 12
5 12
6 12
7 4
8 4
9 4
10 4
11 12
12 5
13 12
14 13
<<<sep_out_sample>>>
lea (%rdi,%rdx,2),%r10d
add %r8d,%r10d
cmp %ecx,%edx
jle 17 <func1+0x17>
mov %ecx,%eax
imul %r8d,%eax
lea (%rax,%rsi,2),%r9d
jmp 1e <func1+0x1e>
mov %edx,%r9d
imul %r8d,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
imul %r8d,%ecx
sub $0x1,%ecx
imul %ecx,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a3 < a3)
    {
        v6 = a1 + a4 * a4 + a4;
    }
    else
    {
        v6 = a3 + a3 + a1 + a5;
    }
    if (a4 < a3)
    {
        v7 = a4 * a5 + a2 + a2;
    }
    else
    {
        v7 = a3 * a5;
    }
    if (a3 < a3)
    {
        v8 = (a2 * a3) * (a3 * a2);
    }
    else
    {
        v8 = (a5 * a4 * a3) - a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 12
4 12
5 14
6 14
7 14
8 14
9 18
10 18
11 28
12 28
13 28
14 28
15 28
16 28
17 26
18 26
19 26
20 28
21 29
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%r9d
cmp %esi,%ecx
jl 15 <func1+0x15>
mov %r8d,%r9d
sub %edx,%r9d
imul %ecx,%r9d
add %edi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
lea (%rsi,%rdi,1),%edx
add %edx,%eax
mov %esi,%edx
sub %edi,%edx
add %edx,%ecx
add %ecx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a4 < a2)
    {
        v6 = a1 + a3;
    }
    else
    {
        v6 = a1 + (a5 - a3) * a4;
    }
    v7 = a1 + (a2 + a4 - a4);
    v8 = (a2 - a1 + a4) + a2;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 6
2 4
3 4
4 10
5 10
6 10
7 10
8 14
9 14
10 14
11 14
12 14
13 12
14 14
15 13
16 13
17 13
18 13
19 14
20 15
<<<sep_out_sample>>>
cmp %edi,%ecx
jge 10 <func1+0x10>
mov %ecx,%r10d
imul %ecx,%r10d
sub %r8d,%r10d
jmp 19 <func1+0x19>
mov %r8d,%r10d
sub %ecx,%r10d
add %r10d,%r10d
cmp %esi,%ecx
jle 2c <func1+0x2c>
mov %ecx,%r9d
imul %edi,%r9d
add %r8d,%r9d
add %edi,%r9d
jmp 3b <func1+0x3b>
mov %edi,%r9d
imul %ecx,%r9d
imul %esi,%r9d
imul %edx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a4 < a1)
    {
        v6 = a4 * a4 - a5;
    }
    else
    {
        v6 = (a5 - (a4 - a5)) - a4;
    }
    if (a2 < a4)
    {
        v7 = a1 + ((a4 * a1) + a5);
    }
    else
    {
        v7 = a1 * a4 * a2 * a3;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 12
11 12
12 14
13 14
14 14
15 14
16 14
17 18
18 18
19 18
20 18
21 20
22 20
23 20
24 20
25 20
26 20
27 21
<<<sep_out_sample>>>
lea 0x2(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
imul %r8d,%esi
imul %esi,%ecx
imul %ecx,%edx
lea 0x1(%rax,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = (a4 * (a5 * a2)) * a3;
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a4 - a4 + a3;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        if (v6 < a3)
        {
            v9 += a3 + a3;
        }
        else
        {
            v9 += a2 - a3;
        }
    }
    v11 = 0;
    for (v12 = 0; v12++; v12<a5)
    {
        v11 += a1 * (a2 + a2);
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 27
2 27
3 27
4 27
5 4
6 4
7 4
8 27
9 28
<<<sep_out_sample>>>
lea (%r8,%rdi,1),%eax
mov %edx,%r9d
sub %esi,%r9d
cmp %r8d,%edx
cmovl %eax,%r9d
cmp %r8d,%r9d
jge 23 <func1+0x23>
mov %edi,%r10d
imul %ecx,%r10d
imul %r8d,%r10d
jmp 2a <func1+0x2a>
mov %edx,%r10d
imul %esi,%r10d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
lea (%r9,%r10,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a3 < a5)
    {
        v6 = a3 + (a5 + a1) - a3;
    }
    else
    {
        v6 = a3 - a2;
    }
    if (v6 < a5)
    {
        v7 = a5 * (a1 * a4);
    }
    else
    {
        v7 = a3 * a2;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 6
6 12
7 12
8 14
9 14
10 14
11 14
12 18
13 18
14 20
15 20
16 20
17 20
18 20
19 20
20 21
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %edx,%r8d
add $0x1,%esi
imul %esi,%edi
lea 0x1(%r8,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a1 < a1)
    {
        v6 = a2 * a1 + a4;
    }
    else
    {
        v6 = (a1 + a1 * a2) - a4;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        if (a5 < a3)
        {
            v7 += a3 + a1;
        }
        else
        {
            v7 += a5 * a2;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 24
2 24
3 24
4 10
5 10
6 24
7 25
<<<sep_out_sample>>>
lea (%rdx,%rsi,2),%eax
cmp %ecx,%esi
jl d <func1+0xd>
lea (%rdi,%rcx,2),%eax
imul %esi,%eax
mov %r8d,%r10d
imul %r8d,%r10d
mov $0x1,%r9d
sub %r10d,%r9d
imul %r8d,%r9d
lea 0x1(%rdi,%r9,1),%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    if (a2 < a4)
    {
        v6 = a2 + (a2 + a3);
    }
    else
    {
        v6 = ((a4 + a4) + a1) * a2;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += a5 + a4 - a2;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        v9 += a3 * a2;
    }
    v11 = a5 - (a5 * a5) * a5;
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 4
3 4
4 10
5 10
6 22
7 22
8 22
9 22
10 22
11 23
12 23
13 23
14 23
15 23
16 23
17 24
<<<sep_out_sample>>>
cmp %edi,%edx
jge b <func1+0xb>
mov %edx,%eax
imul %esi,%eax
jmp 11 <func1+0x11>
mov %edi,%eax
imul %r8d,%eax
add %edx,%edi
add %edi,%esi
add %r8d,%esi
add %ecx,%esi
lea 0x1(%rax,%rsi,1),%eax
imul %ecx,%edx
imul %edx,%r8d
imul %r8d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a3 < a1)
    {
        v6 = a3 * a2;
    }
    else
    {
        v6 = ((a1 + a3) - a3) * a5;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        if (v7 < a3)
        {
            v7 += a5 - a3;
        }
        else
        {
            v7 += a4 * a2;
        }
    }
    v9 = a5 * (a4 * a3) * a4;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 25
9 25
10 25
11 25
12 25
13 24
14 24
15 24
16 25
17 26
<<<sep_out_sample>>>
mov %edi,%r9d
sub %r8d,%r9d
cmp %ecx,%edi
jle 16 <func1+0x16>
mov %r8d,%eax
sub %edi,%eax
imul %edi,%eax
add %edx,%eax
jmp 1e <func1+0x1e>
lea -0x1(%rdx),%eax
imul %edi,%eax
add %esi,%eax
mov %ecx,%r10d
imul %esi,%r10d
lea (%r10,%rdi,2),%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = (a1 - a3) - (a5 - a3);
    if (a4 < a1)
    {
        v7 = a3 + a1 * (a5 - a1);
    }
    else
    {
        v7 = a2 + ((a3 * a1) - a1);
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        if (a4 < a5)
        {
            v8 += a5 + a5 * a1;
        }
        else
        {
            v8 += a4 * (a4 - a3);
        }
    }
    v10 = a1 + a4 * a2;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 5
4 5
5 7
6 7
7 7
8 7
9 7
10 11
11 11
12 11
13 25
14 25
15 26
16 26
17 26
18 26
19 26
20 26
21 26
22 27
<<<sep_out_sample>>>
mov %r8d,%r10d
imul %ecx,%r10d
sub %esi,%r10d
add %edx,%r10d
lea (%r8,%rdx,1),%eax
mov %ecx,%r9d
sub %esi,%r9d
cmp %edi,%r8d
cmovg %eax,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a2 < a2)
    {
        v6 = a3 + a2 - a5;
    }
    else
    {
        v6 = a3 - (a2 - a5 * a4);
    }
    if (a1 < a5)
    {
        v7 = a5 + a3;
    }
    else
    {
        v7 = a4 - ((a2 + a2) - a2);
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 14
6 14
7 14
8 14
9 14
10 20
11 20
12 20
13 20
14 20
15 20
16 21
<<<sep_out_sample>>>
cmp %edx,%ecx
jge e <func1+0xe>
lea 0x1(%rcx),%eax
imul %esi,%eax
sub %edi,%eax
jmp 1e <func1+0x1e>
mov %edi,%eax
imul %r8d,%eax
mov %esi,%r9d
imul %edx,%r9d
sub %r9d,%eax
mov %r8d,%r9d
imul %esi,%r9d
imul %edi,%r9d
add %esi,%r9d
add %edi,%r9d
add %r9d,%edx
add %esi,%edx
add %r8d,%edx
add %edx,%ecx
add %eax,%ecx
add %esi,%edi
imul %edi,%esi
imul %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a4 < a3)
    {
        v6 = (a2 + a2 * a4) - a1;
    }
    else
    {
        v6 = a1 * a5 - a2 * a3;
    }
    v7 = (a1 + a2) * a2 * a5;
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        if (a5 < a3)
        {
            v8 += a5 + a3 * a1;
        }
        else
        {
            v8 += a3 + (a3 - a4);
        }
    }
    v10 = a2 + (a1 * (a5 * a2));
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 10
11 10
12 25
13 25
14 25
15 25
16 26
17 26
18 26
19 26
20 26
21 26
22 12
23 12
24 12
25 26
26 27
<<<sep_out_sample>>>
mov %edi,%eax
sub %esi,%eax
lea (%rcx,%rcx,1),%r9d
cmp %ecx,%edx
cmovge %r9d,%eax
add %edx,%edi
add %edi,%esi
lea (%rcx,%r8,2),%edx
lea (%rdx,%rsi,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a2 - a2 + a5;
    if (a3 < a4)
    {
        v7 = a1 - a2;
    }
    else
    {
        v7 = (a1 - a1 + a4) + a4;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 7
2 7
3 7
4 7
5 7
6 13
7 13
8 13
9 13
10 13
11 14
<<<sep_out_sample>>>
lea (%rdx,%rdi,2),%eax
lea 0x1(%rax,%rcx,1),%eax
add %eax,%edx
add %esi,%edx
add %r8d,%edx
lea 0x1(%rcx,%rdx,1),%eax
add %r8d,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (v6 < a1)
        {
            v6 += a3 + a4 + a5;
        }
        else
        {
            v6 += a4 * a2;
        }
    }
    v8 = a2 - a2 + (a2 + a5);
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        v9 += a2 * a3 * a3;
    }
    v11 = a3 + (a4 + a1);
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 23
2 23
3 23
4 23
5 23
6 23
7 16
8 23
9 24
<<<sep_out_sample>>>
mov %esi,%eax
imul %r8d,%eax
sub %ecx,%eax
lea (%rdi,%rdx,2),%edx
lea (%rdx,%rax,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a3 - a2 - a4;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        if (v7 < a1)
        {
            v8 += a4 + a5 + a5;
        }
        else
        {
            v8 += a5 * a1 + a4;
        }
    }
    v10 = a2 * a5 - a4 + a3;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 22
5 22
6 22
7 22
8 22
9 23
<<<sep_out_sample>>>
mov %ecx,%eax
sub %edx,%eax
lea (%rsi,%rdx,1),%r9d
cmp %esi,%ecx
cmovl %eax,%r9d
lea (%rdx,%rsi,2),%eax
sub %ecx,%eax
add %r9d,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (a3 < a4)
        {
            v6 += (a3 * a4) - a5;
        }
        else
        {
            v6 += (a1 * a3) * a3;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += (a5 * a5) * a3;
    }
    if (a4 < a2)
    {
        v10 = a4 - a3;
    }
    else
    {
        v10 = a2 + a3;
    }
    v11 = a2 + ((a2 - a4) + a3);
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 23
2 23
3 23
4 23
5 23
6 29
7 29
8 30
9 30
10 30
11 30
12 30
13 30
14 31
<<<sep_out_sample>>>
mov %edx,%r9d
sub %edi,%r9d
lea (%rdi,%rcx,1),%eax
sub %eax,%r9d
mov %r8d,%eax
neg %eax
sub %ecx,%eax
cmp %esi,%edi
jle 20 <func1+0x20>
mov %edi,%eax
imul %esi,%eax
add %ecx,%eax
add %edx,%eax
mov %esi,%r10d
imul %edi,%r10d
imul %esi,%r10d
imul %edx,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a2 < a2)
    {
        v6 = a2 + a5;
    }
    else
    {
        v6 = a3 - a1 - (a1 + a4);
    }
    if (a2 < a1)
    {
        v7 = (a1 * a2) + a4 + a3;
    }
    else
    {
        v7 = a2 - (a5 + a2) - a4;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        if (v7 < a4)
        {
            v8 += a4 - a5;
        }
        else
        {
            v8 += a3 * a4 - a2;
        }
    }
    v10 = a2 * (a2 * a1) * a3;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 18
6 18
7 18
8 12
9 12
10 14
11 14
12 14
13 14
14 32
15 32
16 32
17 32
18 33
19 33
20 33
21 33
22 33
23 33
24 33
25 34
<<<sep_out_sample>>>
cmp %edi,%ecx
jle f <func1+0xf>
lea (%rdi,%r8,1),%eax
sub %edx,%eax
imul %edi,%eax
jmp 14 <func1+0x14>
mov %esi,%eax
imul %edi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += (a3 * a4) * a5;
    }
    if (a1 < a4)
    {
        v8 = a1 * (a1 + a5 - a3);
    }
    else
    {
        v8 = a2 * a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 15
8 15
9 17
10 17
11 17
12 17
13 17
14 18
<<<sep_out_sample>>>
test %r8d,%r8d
jle d <func1+0xd>
lea (%rdi,%r8,2),%eax
sub %esi,%eax
jmp 1b <func1+0x1b>
mov %edx,%eax
sub %ecx,%eax
mov %edi,%r9d
imul %r8d,%r9d
sub %r9d,%eax
lea (%rdx,%rdi,2),%r9d
add %edx,%r9d
add %esi,%r9d
add %r8d,%r9d
add %r9d,%ecx
add %eax,%ecx
imul %edi,%edx
add %edx,%esi
sub %r8d,%esi
lea 0x1(%rcx,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (v6 < a5)
    {
        v6 = ((a5 + a1) - a2) + a5;
    }
    else
    {
        v6 = (a3 - a4) - a1 * a5;
    }
    v7 = ((a1 * a3) + a2) - a5;
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += a3 - a4 + a4;
    }
    v10 = a5 + a1 - a5 + a3;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 10
10 10
11 19
12 19
13 19
14 19
15 19
16 19
17 12
18 12
19 12
20 19
21 20
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%eax
imul %r8d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a4 - a4 * a2;
    }
    v8 = (a5 - a5) + a5 * a3;
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        if (v6 < a2)
        {
            v9 += a3 + a4;
        }
        else
        {
            v9 += a5 + a5 - a2;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 22
4 22
5 9
6 22
7 23
<<<sep_out_sample>>>
mov %edi,%r9d
sub %ecx,%r9d
sub %r8d,%r9d
imul %r8d,%r9d
cmp %r9d,%edi
jle 20 <func1+0x20>
lea (%r8,%rdx,1),%r10d
mov %edx,%eax
imul %edi,%eax
add %eax,%r10d
jmp 2b <func1+0x2b>
lea 0x1(%rdx),%r10d
imul %edi,%r10d
add %edx,%r10d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
lea (%r9,%r10,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = (a1 - a4 - a5) * a5;
    if (v6 < a1)
    {
        v7 = (a5 + a3) + a3 * a1;
    }
    else
    {
        v7 = (a1 + (a3 * a1)) + a3;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 5
6 5
7 7
8 7
9 7
10 7
11 7
12 11
13 11
14 11
15 13
16 13
17 13
18 13
19 13
20 13
21 14
<<<sep_out_sample>>>
mov %r8d,%r10d
imul %edx,%r10d
add %esi,%r10d
mov %ecx,%eax
sub %edx,%eax
mov %edi,%r9d
sub %edx,%r9d
cmp %ecx,%r8d
cmovl %eax,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a2 < a2)
    {
        v6 = a4 * (a2 * a1) * a2;
    }
    else
    {
        v6 = a2 + a5 * a3;
    }
    if (a5 < a4)
    {
        v7 = a4 - a3;
    }
    else
    {
        v7 = a1 - a3;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 14
5 14
6 14
7 14
8 14
9 14
10 20
11 20
12 20
13 20
14 20
15 20
16 21
<<<sep_out_sample>>>
push %rbx
test %ecx,%ecx
jle 11 <func1+0x11>
mov %edx,%ebx
sub %edi,%ebx
add %esi,%ebx
imul %r8d,%ebx
jmp 1b <func1+0x1b>
mov %esi,%ebx
sub %ecx,%ebx
mov %esi,%eax
sub %edx,%eax
add %eax,%ebx
lea (%r8,%rdx,1),%r11d
lea (%rsi,%rdi,1),%eax
imul %eax,%r11d
cmp %edi,%ecx
jge 32 <func1+0x32>
mov %edx,%r10d
sub %edi,%r10d
jmp 39 <func1+0x39>
lea (%r8,%rdi,1),%r10d
sub %edx,%r10d
cmp %r8d,%edi
jge 49 <func1+0x49>
mov %r8d,%r9d
neg %r9d
sub %ecx,%r9d
jmp 57 <func1+0x57>
mov %edi,%r9d
imul %r8d,%r9d
imul %edi,%r9d
add %edx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %ebx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (v6 < a4)
    {
        v6 = (a2 - (a1 - a3)) * a5;
    }
    else
    {
        v6 = (a2 - a4) - (a3 - a2);
    }
    v7 = (a5 + a3) * (a2 + a1);
    if (a4 < a1)
    {
        v8 = a4 + a3 - a1 - a4;
    }
    else
    {
        v8 = (a5 + a1) - a3;
    }
    if (a1 < a5)
    {
        v9 = (a1 - a5 - a1) - a4;
    }
    else
    {
        v9 = a1 * a5 * a1 + a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 4
3 4
4 6
5 6
6 6
7 6
8 6
9 10
10 10
11 10
12 10
13 10
14 12
15 12
16 12
17 13
18 13
19 15
20 15
21 15
22 19
23 19
24 21
25 21
26 23
27 23
28 23
29 23
30 27
31 27
32 27
33 27
34 29
35 29
36 29
37 29
38 29
39 29
40 29
41 29
42 30
43 30
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %r8d,%esi
add %ecx,%esi
imul %ecx,%ecx
imul %ecx,%r8d
add %r8d,%edx
lea 0x1(%rsi,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a3 + a4 * a4 * a5;
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += a5 * a3 * a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 4
6 4
7 4
8 10
9 11
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
lea 0x1(%r8,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a3 - (a4 + a3);
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a4 - (a3 * a4);
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        v9 += a2 * (a4 + a5);
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 15
2 15
3 15
4 16
<<<sep_out_sample>>>
cmp %r8d,%edx
jge 14 <func1+0x14>
mov %esi,%r9d
imul %esi,%r9d
add %edx,%r9d
add %r8d,%r9d
jmp 1f <func1+0x1f>
lea -0x1(%rcx),%r9d
imul %edi,%r9d
add %edx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
add %r8d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a3 < a5)
    {
        v6 = a3 + a2 * a2 + a5;
    }
    else
    {
        v6 = (a1 * a4 - a1) + a3;
    }
    v7 = a5 + a3;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 13
12 13
13 13
14 13
15 13
16 12
17 13
18 14
<<<sep_out_sample>>>
cmp %edi,%r8d
jge 11 <func1+0x11>
lea (%rsi,%r8,1),%r10d
sub %edx,%r10d
sub %ecx,%r10d
jmp 18 <func1+0x18>
mov %edi,%r10d
imul %esi,%r10d
test %edi,%edi
jle 2b <func1+0x2b>
mov %r8d,%r9d
imul %edx,%r9d
sub %edi,%r9d
add %r8d,%r9d
jmp 35 <func1+0x35>
mov %r8d,%r9d
imul %r8d,%r9d
sub %edi,%r9d
mov %r8d,%eax
neg %eax
sub %edx,%eax
cmp %edx,%r9d
jge 4b <func1+0x4b>
mov $0x1,%eax
sub %ecx,%eax
imul %esi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r10d,%ecx
add %ecx,%r9d
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a5 < a1)
    {
        v6 = a2 + a5 - a3 - a4;
    }
    else
    {
        v6 = a2 - a2 + (a1 * a2);
    }
    if (v7 < a1)
    {
        v7 = a5 - (a1 - a5 * a3);
    }
    else
    {
        v7 = (a5 * a5) - a1;
    }
    if (v7 < a3)
    {
        v8 = a2 - a4 * a2;
    }
    else
    {
        v8 = ((a3 - a3) - a5) - a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 12
10 12
11 14
12 14
13 14
14 14
15 14
16 18
17 18
18 18
19 26
20 26
21 26
22 20
23 20
24 22
25 22
26 22
27 28
28 28
29 28
30 28
31 28
32 28
33 28
34 29
<<<sep_out_sample>>>
test %ecx,%ecx
jle a <func1+0xa>
lea (%r8,%r8,1),%eax
jmp 11 <func1+0x11>
mov %r8d,%eax
sub %esi,%eax
add %edi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rdx,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = (a3 - a4) + a4;
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        if (v7 < a4)
        {
            v7 += a4 - a3 * a1;
        }
        else
        {
            v7 += a1 - a5;
        }
    }
    if (v7 < a4)
    {
        v9 = (a5 + (a3 - a3)) + a5;
    }
    else
    {
        v9 = a5 - a2 + a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 17
2 17
3 19
4 19
5 23
6 23
7 23
8 25
9 25
10 25
11 25
12 25
13 25
14 26
<<<sep_out_sample>>>
push %rbx
mov %ecx,%ebx
sub %edx,%ebx
mov %r8d,%eax
imul %r8d,%eax
add %eax,%ebx
lea (%r8,%rcx,1),%r11d
add %edx,%r11d
mov %esi,%r10d
sub %ecx,%r10d
mov %ecx,%r9d
sub %edi,%r9d
cmp %edi,%esi
jle 33 <func1+0x33>
mov %r8d,%r9d
imul %edx,%r9d
add %esi,%r9d
imul %esi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %ebx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a4 - a3 + a5 * a5;
    v7 = a5 + a4 + a3;
    v8 = a2 - a4;
    if (a1 < a2)
    {
        v9 = ((a5 * a3) + a2) * a2;
    }
    else
    {
        v9 = (a4 - a1 - a4) + a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 4
3 4
4 4
5 4
6 4
7 5
8 5
9 6
10 6
11 13
12 13
13 7
14 7
15 9
16 9
17 9
18 9
19 15
20 15
21 15
22 15
23 15
24 15
25 15
26 15
27 16
28 16
<<<sep_out_sample>>>
lea 0x2(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12, v13 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (a1 < a3)
        {
            v6 += a1 * a1 - a1;
        }
        else
        {
            v6 += a4 + a4 - a1;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        if (v7 < a2)
        {
            v8 += a4 * a4 + a2;
        }
        else
        {
            v8 += a3 - a4 + a1;
        }
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a1)
    {
        v10 += a5 + a1;
    }
    v12 = 0;
    for (v13 = 0; v13++; v13<a3)
    {
        v12 += a2 + a4;
    }
    return v12+v13+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 38
2 38
3 38
4 38
5 39
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%esi
mov %edi,%eax
imul %ecx,%eax
add %esi,%eax
sub %ecx,%edx
sub %ecx,%edi
add %edi,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (a2 < a2)
        {
            v6 += a3 + a3 - a4;
        }
        else
        {
            v6 += a5 * a4 - a4;
        }
    }
    if (a4 < a4)
    {
        v8 = ((a4 + a1) + a4) * a1;
    }
    else
    {
        v8 = a1 * a4;
    }
    v9 = a3 - a4 - (a4 - a1);
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 25
2 25
3 25
4 25
5 22
6 22
7 25
8 24
9 24
10 24
11 25
12 26
<<<sep_out_sample>>>
lea 0x2(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12, v13 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a3 + (a3 + a5);
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += a5 + a3 * a4;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a3)
    {
        v10 += (a5 - a4) + a4;
    }
    v12 = 0;
    for (v13 = 0; v13++; v13<a5)
    {
        v12 += a4 - a2 * a2;
    }
    return v12+v13+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 24
2 24
3 24
4 24
5 25
<<<sep_out_sample>>>
mov %esi,%eax
sub %r8d,%eax
cmp %edx,%eax
jge 18 <func1+0x18>
mov %r8d,%r9d
imul %edi,%r9d
add %esi,%r9d
add %ecx,%r9d
jmp 23 <func1+0x23>
mov %r8d,%r9d
imul %ecx,%r9d
imul %r8d,%r9d
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %ecx,%r8d
add %r8d,%eax
add %r9d,%eax
imul %edi,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a5 < a5)
    {
        v6 = ((a5 + a1) - a2) * a5;
    }
    else
    {
        v6 = a2 - a5;
    }
    if (v6 < a3)
    {
        v7 = a4 + (a2 + a5 * a1);
    }
    else
    {
        v7 = a5 * a4 * a5;
    }
    v8 = a1 * a4;
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        if (v8 < a5)
        {
            v9 += (a1 - a5) - a5;
        }
        else
        {
            v9 += a3 - a3;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 12
4 12
5 14
6 14
7 14
8 14
9 14
10 18
11 18
12 18
13 33
14 33
15 33
16 33
17 33
18 33
19 20
20 33
21 34
<<<sep_out_sample>>>
test %edi,%edi
jle b <func1+0xb>
mov %ecx,%eax
imul %edi,%eax
jmp 15 <func1+0x15>
mov $0x1,%eax
sub %ecx,%eax
imul %edx,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %r8d,%esi
lea 0x2(%rcx,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (a3 < a1)
        {
            v6 += a2 * a4;
        }
        else
        {
            v6 += (a5 - a3) * a2;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        if (a5 < a1)
        {
            v8 += a3 - a2 * a2;
        }
        else
        {
            v8 += a2 - a1;
        }
    }
    if (v10 < a1)
    {
        v10 = a4 * a1;
    }
    else
    {
        v10 = a3 - (a3 * a4);
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 28
2 28
3 30
4 30
5 30
6 34
7 34
8 34
9 36
10 36
11 36
12 36
13 36
14 37
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %r8d,%edx
add %ecx,%edx
sub %r8d,%ecx
imul %ecx,%esi
imul %esi,%r8d
lea 0x1(%rdx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = ((a4 - a5) * a2) * a5;
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += a5 + (a5 * a1);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 4
6 4
7 4
8 10
9 11
<<<sep_out_sample>>>
mov %r8d,%eax
sub %esi,%eax
lea (%rax,%rdx,2),%r10d
lea (%rcx,%rdx,1),%eax
lea (%rsi,%rdx,1),%r9d
cmp %eax,%esi
jle 25 <func1+0x25>
mov %edx,%r11d
imul %r8d,%r11d
mov %edx,%r9d
sub %edi,%r9d
imul %r11d,%r9d
add %r9d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %r10d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (v6 < a4)
        {
            v6 += a1 * (a5 - a3);
        }
        else
        {
            v6 += a4 - a1;
        }
    }
    v8 = a3 - (a2 - a5 - a3);
    v9 = a4 + a3;
    if (v9 < a2)
    {
        v10 = (a3 * a5) * (a3 - a1);
    }
    else
    {
        v10 = a2 + a3;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 16
4 17
5 24
6 18
7 18
8 20
9 20
10 20
11 20
12 20
13 26
14 26
15 26
16 26
17 26
18 26
19 26
20 27
<<<sep_out_sample>>>
cmp $0x1,%edi
jle 10 <func1+0x10>
mov %esi,%eax
sub %ecx,%eax
sub %edi,%eax
add %r8d,%eax
jmp 22 <func1+0x22>
mov %edx,%eax
imul %esi,%eax
imul %r8d,%eax
mov %ecx,%r10d
sub %eax,%r10d
mov %r10d,%eax
lea (%r8,%rsi,1),%r10d
mov %r8d,%r9d
sub %esi,%r9d
sub %edi,%r9d
mov %r8d,%r11d
imul %esi,%r11d
cmp %ecx,%r8d
cmovg %r11d,%r9d
add %r9d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
add %r10d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (a1 < a3)
        {
            v6 += a5 - a3 + a4;
        }
        else
        {
            v6 += a4 * a4 * a3;
        }
    }
    if (v7 < a1)
    {
        v8 = a5 - (a4 - a2 + a1);
    }
    else
    {
        v8 = a4 - a5 * (a3 * a2);
    }
    v9 = a5 + a2;
    if (a4 < a5)
    {
        v10 = a2 * a5 + a2 - a2;
    }
    else
    {
        v10 = a5 - a2 - a1;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 18
7 18
8 22
9 22
10 22
11 22
12 22
13 22
14 24
15 31
16 31
17 31
18 27
19 27
20 27
21 27
22 33
23 33
24 33
25 33
26 33
27 33
28 33
29 34
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %edx,%r8d
lea 0x1(%rcx,%r8,1),%eax
sub %esi,%ecx
imul %ecx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a2 * a1 * a5;
    }
    v8 = a1 * a4 - a2 * a1;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 9
6 9
7 10
8 11
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
lea 0x1(%rcx,%r8,1),%r8d
imul %ecx,%edx
sub %edi,%edx
sub %esi,%edx
lea (%r8,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (a3 < a2)
        {
            v6 += a3 * a5;
        }
        else
        {
            v6 += a4 - (a3 - a2);
        }
    }
    v8 = (a4 * a3) - a1 - a2;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 16
6 16
7 16
8 17
9 18
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
lea (%r8,%rcx,1),%eax
mov %edi,%r8d
imul %edi,%r8d
imul %r8d,%edx
imul %edx,%ecx
add %ecx,%eax
add %esi,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a5 < a5)
    {
        v6 = a5 * a5;
    }
    else
    {
        v6 = a1 * a1 * a3 * a4;
    }
    v7 = a2 + a1;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 13
2 13
3 13
4 13
5 10
6 10
7 10
8 10
9 13
10 12
11 13
12 14
<<<sep_out_sample>>>
lea 0x1(%r8),%r10d
imul %edi,%r10d
cmp %esi,%edi
jle 1a <func1+0x1a>
mov %ecx,%r9d
sub %edx,%r9d
sub %edx,%r9d
add %edi,%r9d
jmp 21 <func1+0x21>
lea (%rdi,%rsi,1),%eax
lea (%rax,%rcx,2),%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = (a1 * a5) + a1;
    if (a2 < a1)
    {
        v7 = a1 - ((a3 - a4) + a3);
    }
    else
    {
        v7 = a1 + a2 + a4 + a4;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 5
4 5
5 7
6 7
7 7
8 7
9 7
10 11
11 11
12 13
13 13
14 13
15 13
16 13
17 13
18 14
<<<sep_out_sample>>>
lea (%rsi,%rdi,1),%r11d
test %esi,%esi
jle 10 <func1+0x10>
mov %edi,%r10d
sub %ecx,%r10d
jmp 1a <func1+0x1a>
mov %ecx,%r10d
imul %edx,%r10d
add %esi,%r10d
lea (%rdi,%rdi,1),%r9d
cmp %edx,%ecx
jle 2c <func1+0x2c>
mov %esi,%r9d
imul %r8d,%r9d
add %edx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a1 < a1)
    {
        v6 = a4 + a1 * a4 + a4;
    }
    else
    {
        v6 = a2 + a1;
    }
    if (v7 < a2)
    {
        v7 = a1 - a4;
    }
    else
    {
        v7 = a2 + a4 * a3;
    }
    if (a3 < a4)
    {
        v8 = a2 * a5 + a3;
    }
    else
    {
        v8 = a1 + a5 + a1 - a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 12
3 12
4 14
5 14
6 14
7 18
8 18
9 18
10 26
11 20
12 20
13 22
14 22
15 22
16 28
17 28
18 28
19 28
20 28
21 28
22 28
23 29
<<<sep_out_sample>>>
mov %esi,%eax
sub %edx,%eax
cmp %r8d,%esi
cmovg %edi,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (v6 < a4)
        {
            v6 += a2 - a4 * a3;
        }
        else
        {
            v6 += a2 + (a4 * a1);
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += a3 - a1 + a1;
    }
    if (a5 < a2)
    {
        v10 = a1 + a1 - a1;
    }
    else
    {
        v10 = (a5 - a5) - a3 + a2;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 27
2 27
3 27
4 27
5 29
6 29
7 29
8 29
9 29
10 30
<<<sep_out_sample>>>
cmp %edi,%esi
jle c <func1+0xc>
mov %r8d,%r10d
sub %edi,%r10d
jmp 1a <func1+0x1a>
mov %esi,%eax
imul %ecx,%eax
imul %esi,%eax
mov %ecx,%r10d
sub %eax,%r10d
lea (%rdi,%rdi,1),%eax
mov %r8d,%r9d
sub %ecx,%r9d
cmp %edx,%edi
cmovg %eax,%r9d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (a5 < a5)
        {
            v6 += a5 * a3 - a4;
        }
        else
        {
            v6 += a5 + a2;
        }
    }
    if (a1 < a2)
    {
        v8 = (a3 + a5 - a3) - a1;
    }
    else
    {
        v8 = a4 - (a2 * a4 * a2);
    }
    if (a3 < a1)
    {
        v9 = a1 + a1;
    }
    else
    {
        v9 = a3 + (a5 - a3) - a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 22
7 22
8 22
9 22
10 22
11 26
12 26
13 26
14 26
15 26
16 32
17 32
18 32
19 32
20 32
21 32
22 33
<<<sep_out_sample>>>
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea (%r8,%rcx,1),%eax
add %edi,%edi
sub %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = (a1 - (a1 + a1)) - a1;
    if (a3 < a3)
    {
        v7 = a1 - a4;
    }
    else
    {
        v7 = a1 - a1;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 13
2 13
3 13
4 13
5 4
6 13
7 14
<<<sep_out_sample>>>
lea (%rsi,%rcx,1),%r10d
lea (%rcx,%rdx,1),%eax
lea (%rdx,%rdi,1),%r9d
cmp %edi,%esi
cmovg %eax,%r9d
test %esi,%esi
jle 1f <func1+0x1f>
mov %ecx,%eax
imul %edi,%eax
imul %esi,%eax
jmp 27 <func1+0x27>
lea (%rsi,%rsi,1),%eax
imul %edx,%eax
sub %edi,%eax
add %edx,%edi
add %edi,%esi
add %r8d,%esi
add %esi,%ecx
sub %r10d,%ecx
add %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a5 - ((a2 + a4) + a5);
    if (a1 < a2)
    {
        v7 = a4 + a3;
    }
    else
    {
        v7 = a3 + a1;
    }
    if (v8 < a2)
    {
        v8 = (a4 * a1) * a2;
    }
    else
    {
        v8 = ((a2 + a2) * a3) - a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 7
3 7
4 7
5 7
6 13
7 13
8 15
9 15
10 15
11 15
12 19
13 19
14 19
15 21
16 21
17 21
18 21
19 21
20 21
21 21
22 22
<<<sep_out_sample>>>
push %rbx
lea (%rcx,%rsi,1),%r9d
cmp %r9d,%esi
jle 11 <func1+0x11>
mov %r8d,%ebx
sub %esi,%ebx
jmp 1b <func1+0x1b>
mov %edx,%ebx
imul %edx,%ebx
add %esi,%ebx
imul %ecx,%ebx
mov %esi,%r11d
imul %edx,%r11d
cmp %edi,%esi
jge 2c <func1+0x2c>
lea (%rcx,%rcx,1),%r10d
jmp 3a <func1+0x3a>
mov %ecx,%r10d
imul %esi,%r10d
imul %esi,%r10d
add %edi,%r10d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
add %ebx,%eax
add %r11d,%eax
add %r10d,%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a5 < a5)
    {
        v6 = a5 * a2 * a3 + a2;
    }
    else
    {
        v6 = a4 + a2;
    }
    if (v6 < a2)
    {
        v7 = (a5 - a2 - a2) + a2;
    }
    else
    {
        v7 = a4 * (a3 * a3 + a2);
    }
    v8 = a2 * a3 - a3 + a3;
    if (a2 < a1)
    {
        v9 = a4 + a4;
    }
    else
    {
        v9 = a1 + a4 * a2 * a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 10
3 12
4 12
5 14
6 14
7 14
8 18
9 18
10 18
11 18
12 20
13 20
14 21
15 21
16 23
17 23
18 27
19 27
20 27
21 27
22 29
23 29
24 29
25 29
26 29
27 29
28 29
29 29
30 30
31 30
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
lea (%rdx,%rcx,2),%edx
lea (%rdx,%r8,1),%eax
imul %esi,%edi
add %edi,%ecx
imul %ecx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a3 + a4;
    v7 = (a4 + a2 * a1) * a2;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 4
5 6
6 5
7 5
8 5
9 6
10 7
<<<sep_out_sample>>>
cmp %r8d,%ecx
jge 16 <func1+0x16>
mov %edi,%r9d
imul %edx,%r9d
add $0x1,%r9d
imul %r8d,%r9d
jmp 1d <func1+0x1d>
mov %r8d,%r9d
imul %edx,%r9d
lea (%rdi,%rdi,1),%eax
cmp %esi,%r8d
jle 2f <func1+0x2f>
mov %edx,%eax
sub %ecx,%eax
imul %esi,%eax
imul %edi,%eax
lea (%rdi,%rdx,1),%r10d
add %esi,%r10d
add %r8d,%r10d
add %r10d,%ecx
add %r9d,%ecx
add %ecx,%eax
imul %r8d,%edi
imul %esi,%edi
mov %edx,%ecx
sub %edi,%ecx
add %ecx,%eax
add %r8d,%esi
imul %esi,%edx
imul %edx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a4 < a5)
    {
        v6 = a5 + a5 * (a1 * a3);
    }
    else
    {
        v6 = a5 * a3;
    }
    if (a2 < a5)
    {
        v7 = (a2 * (a3 - a4)) * a1;
    }
    else
    {
        v7 = a1 + a1;
    }
    if (a4 < a4)
    {
        v8 = a2 - a4 + a4 * a3;
    }
    else
    {
        v8 = a3 - a1 * a5 * a2;
    }
    v9 = ((a2 + a5) * a3) * a5;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 18
11 12
12 12
13 14
14 14
15 14
16 14
17 29
18 29
19 29
20 29
21 29
22 29
23 26
24 26
25 26
26 26
27 29
28 28
29 28
30 28
31 29
32 30
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
lea 0x1(%rcx,%rax,1),%eax
mov %r8d,%r9d
imul %edx,%r9d
imul %edx,%r9d
imul %r9d,%esi
add %eax,%esi
imul %edi,%r8d
imul %r8d,%ecx
sub %edx,%ecx
lea (%rsi,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a2 + a3 * a1;
    }
    v8 = (a5 * a3 * a3) * a2;
    v9 = a4 * (a5 * a1) - a3;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 11
5 9
6 9
7 9
8 9
9 11
10 10
11 10
12 10
13 11
14 12
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
add %r8d,%ecx
imul %edi,%edi
lea 0x1(%rcx,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a1 * a1;
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        if (a2 < a1)
        {
            v7 += (a1 * a1) + a1;
        }
        else
        {
            v7 += a3 + a4;
        }
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        if (a5 < a1)
        {
            v9 += a2 - a4 * a4;
        }
        else
        {
            v9 += a5 * a3;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 29
2 29
3 29
4 29
5 4
6 29
7 30
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
cmp %ecx,%r8d
jge 12 <func1+0x12>
mov %ecx,%eax
imul %ecx,%eax
add %r8d,%eax
add %esi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = (a5 - a5) * (a2 + a1);
    if (a5 < a4)
    {
        v7 = (a4 * a4) + a5 + a2;
    }
    else
    {
        v7 = a1 + a3;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += a3 * a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 5
3 5
4 7
5 7
6 7
7 7
8 18
9 18
10 18
11 18
12 18
13 19
<<<sep_out_sample>>>
cmp %edi,%edx
jge d <func1+0xd>
mov %esi,%r9d
imul %ecx,%r9d
jmp 14 <func1+0x14>
mov %edx,%r9d
imul %r8d,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
imul %esi,%r8d
mov %edx,%ecx
imul %edx,%ecx
add %ecx,%r8d
add %r8d,%eax
mov %edx,%r9d
sub %edi,%r9d
add %r9d,%eax
sub %edx,%esi
sub %edx,%esi
add %esi,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a3 < a1)
    {
        v6 = a2 * a4;
    }
    else
    {
        v6 = a3 * a5;
    }
    v7 = (a2 * a5) + a3 * a3;
    v8 = a3 - a1;
    if (a4 < a4)
    {
        v9 = (a3 - a2) + a5;
    }
    else
    {
        v9 = a2 - a3 - a3 + a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 22
9 22
10 22
11 22
12 22
13 12
14 12
15 12
16 12
17 22
18 13
19 13
20 22
21 20
22 20
23 20
24 22
25 23
<<<sep_out_sample>>>
test %edx,%edx
jle b <func1+0xb>
mov %edx,%eax
imul %edi,%eax
jmp 10 <func1+0x10>
mov %esi,%eax
imul %ecx,%eax
add %edx,%edi
add %edi,%esi
add %r8d,%esi
add %esi,%ecx
add %eax,%ecx
lea 0x1(%rcx,%rdx,2),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (v6 < a3)
    {
        v6 = a3 * a1;
    }
    else
    {
        v6 = a2 * a4;
    }
    v7 = a3 + a3;
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        if (a4 < a5)
        {
            v8 += (a5 - a5) - a4;
        }
        else
        {
            v8 += a1 * a3;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 25
9 25
10 25
11 25
12 25
13 25
14 26
<<<sep_out_sample>>>
lea (%r8,%rdi,1),%eax
test %r8d,%r8d
jle 10 <func1+0x10>
mov %edx,%eax
imul %ecx,%eax
neg %eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a3 < a3)
    {
        v6 = a3 - a4 + a3 - a3;
    }
    else
    {
        v6 = a4 - a4;
    }
    if (v7 < a5)
    {
        v7 = a2 - (a3 * a4) - a2;
    }
    else
    {
        v7 = a5 + a1 + a4 - a4;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 18
2 12
3 12
4 14
5 14
6 14
7 20
8 20
9 20
10 20
11 20
12 21
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a5 - a2;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += (a5 + a2) - a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 14
2 14
3 14
4 14
5 15
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %r8d,%esi
add %esi,%ecx
add %r8d,%edx
lea 0x1(%rcx,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a3 + a5;
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        if (a2 < a4)
        {
            v7 += a5 * a2;
        }
        else
        {
            v7 += (a4 + a4) + a4;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 4
6 17
7 18
<<<sep_out_sample>>>
cmp %r8d,%edi
jge f <func1+0xf>
mov %edx,%eax
imul %ecx,%eax
add %r8d,%eax
jmp 17 <func1+0x17>
mov %ecx,%eax
imul %edx,%eax
sub %r8d,%eax
add %edx,%edi
add %esi,%edi
add %r8d,%edi
add %edi,%ecx
add %ecx,%eax
mov %edx,%ecx
sub %esi,%ecx
mov %ecx,%esi
imul %edx,%esi
add %esi,%eax
lea (%rdx,%r8,1),%ecx
imul %ecx,%r8d
add %r8d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a1 < a5)
    {
        v6 = (a3 * a4) + a5;
    }
    else
    {
        v6 = (a4 * a3) - a5;
    }
    if (a4 < a4)
    {
        v7 = a4 * (a1 - a1);
    }
    else
    {
        v7 = a3 * a3 - a3 * a2;
    }
    v8 = ((a3 + a5) * a5) + a3;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 21
11 21
12 21
13 21
14 21
15 18
16 18
17 18
18 18
19 21
20 20
21 20
22 20
23 21
24 22
<<<sep_out_sample>>>
push %rbx
cmp %r8d,%esi
jge 17 <func1+0x17>
mov %esi,%r10d
imul %r8d,%r10d
sub $0x1,%r10d
imul %edi,%r10d
jmp 1e <func1+0x1e>
mov %ecx,%r10d
imul %r8d,%r10d
mov %r8d,%r9d
sub %ecx,%r9d
mov %r8d,%eax
imul %edx,%eax
test %ecx,%ecx
cmovg %eax,%r9d
cmp %ecx,%r10d
jge 3e <func1+0x3e>
mov %esi,%ebx
sub %r8d,%ebx
sub %ecx,%ebx
jmp 45 <func1+0x45>
mov %edx,%ebx
neg %ebx
imul %esi,%ebx
cmp %r8d,%esi
jge 56 <func1+0x56>
lea (%r8,%r8,1),%r11d
sub %edi,%r11d
add %r8d,%r11d
jmp 5d <func1+0x5d>
mov %edx,%r11d
imul %ecx,%r11d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
add %ebx,%eax
add %r11d,%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a2 < a5)
    {
        v6 = a2 * a5 * a1 - a1;
    }
    else
    {
        v6 = a4 * a5 + a2 - a2;
    }
    if (v7 < a4)
    {
        v7 = a5 * a3;
    }
    else
    {
        v7 = a5 - a4;
    }
    if (v6 < a4)
    {
        v8 = (a2 - a5) - a4;
    }
    else
    {
        v8 = a2 - (a3 * a2 + a2);
    }
    if (a2 < a5)
    {
        v9 = (a5 + a5 - a1) + a5;
    }
    else
    {
        v9 = (a3 * a4 + a4) - a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 4
3 4
4 6
5 6
6 6
7 6
8 6
9 10
10 10
11 18
12 18
13 14
14 14
15 14
16 14
17 20
18 20
19 22
20 22
21 22
22 22
23 26
24 26
25 26
26 28
27 28
28 30
29 30
30 30
31 30
32 34
33 34
34 36
35 36
36 36
37 36
38 36
39 36
40 36
41 36
42 37
43 37
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
add %r8d,%ecx
mov %edi,%eax
sub %edx,%eax
add $0x1,%eax
imul %eax,%edi
lea 0x1(%rcx,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a1 + ((a1 - a3) * a1);
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        if (v6 < a1)
        {
            v7 += (a2 - a3) * a5;
        }
        else
        {
            v7 += a1 * a2 * a5;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 4
6 4
7 4
8 4
9 17
10 18
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
lea 0x1(%rcx,%r8,1),%eax
imul %edi,%edi
imul %edx,%esi
imul %esi,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a2 - (a4 + a3);
    }
    v8 = (a1 * a1) * (a3 * a2);
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 9
6 9
7 9
8 10
9 11
<<<sep_out_sample>>>
lea -0x1(%rdi),%r9d
imul %edi,%r9d
add %r8d,%r9d
lea (%rcx,%rsi,1),%eax
cmp %esi,%r8d
jge 1d <func1+0x1d>
mov %esi,%eax
imul %esi,%eax
add %edi,%eax
imul %ecx,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = (a1 * a1) - a1 + a5;
    if (a5 < a2)
    {
        v7 = (a2 * a2 + a1) * a4;
    }
    else
    {
        v7 = a4 + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 11
5 5
6 5
7 7
8 7
9 7
10 7
11 13
12 13
13 13
14 13
15 13
16 13
17 14
<<<sep_out_sample>>>
mov %r8d,%r9d
imul %r8d,%r9d
add %edi,%r9d
add %esi,%r9d
lea (%rcx,%rcx,1),%eax
cmp %edx,%esi
jge 1e <func1+0x1e>
lea (%rdi,%rsi,1),%eax
imul %edi,%eax
imul %r8d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a2 + (a1 + (a5 * a5));
    if (a2 < a3)
    {
        v7 = a5 * ((a1 + a2) * a1);
    }
    else
    {
        v7 = a4 + a4;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 11
6 5
7 5
8 7
9 7
10 7
11 13
12 13
13 13
14 13
15 13
16 13
17 14
<<<sep_out_sample>>>
test %edx,%edx
jle 12 <func1+0x12>
mov %esi,%eax
imul %r8d,%eax
imul %edi,%eax
add %r8d,%eax
jmp 1e <func1+0x1e>
lea (%rsi,%rcx,2),%eax
mov %r8d,%r11d
sub %eax,%r11d
mov %r11d,%eax
lea (%rcx,%rdx,1),%r9d
mov %r8d,%r10d
sub %r9d,%r10d
mov %r10d,%r9d
add %esi,%r9d
add %edi,%r9d
add %edx,%r9d
add %esi,%r9d
add %r8d,%r9d
lea 0x1(%rcx,%r9,1),%ecx
add %ecx,%eax
add %esi,%edx
imul %edx,%edi
add %edi,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a4 - a2 + a3;
    }
    if (v6 < a3)
    {
        v8 = (a2 * a5 * a1) + a5;
    }
    else
    {
        v8 = a5 - ((a2 + a4) + a4);
    }
    v9 = a5 + a1 * (a2 + a3);
    v10 = a5 - (a4 + a3) + a2;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 11
8 15
9 15
10 15
11 15
12 18
13 18
14 18
15 18
16 18
17 19
18 19
19 19
20 19
21 19
22 19
23 17
24 17
25 17
26 19
27 20
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
lea (%rdx,%r8,2),%ecx
lea (%rcx,%rax,1),%ecx
lea (%rsi,%rdx,2),%eax
sub %edi,%eax
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a3 < a3)
    {
        v6 = a3 * (a4 + a2 - a5);
    }
    else
    {
        v6 = a5 + a3 - a4;
    }
    v7 = a3 + a2 + a3 - a1;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 13
2 13
3 10
4 13
5 12
6 12
7 13
8 14
<<<sep_out_sample>>>
cmp %edx,%edi
jge f <func1+0xf>
mov %edx,%eax
imul %edi,%eax
sub %esi,%eax
add %ecx,%eax
jmp 14 <func1+0x14>
mov %ecx,%eax
imul %edx,%eax
lea (%rsi,%r8,1),%r10d
cmp %edx,%eax
jl 27 <func1+0x27>
mov %edx,%r10d
imul %r8d,%r10d
imul %r10d,%r10d
lea (%rcx,%rsi,1),%r9d
cmp %r8d,%edx
jl 37 <func1+0x37>
mov %esi,%r9d
imul %edi,%r9d
add %edi,%edx
add %esi,%edx
add %r8d,%edx
add %edx,%ecx
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
sub %esi,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a1 < a3)
    {
        v6 = ((a3 * a1) - a2) + a4;
    }
    else
    {
        v6 = a4 * a3;
    }
    if (v6 < a3)
    {
        v7 = a2 + a5;
    }
    else
    {
        v7 = a3 * (a3 * a5 * a5);
    }
    if (a3 < a5)
    {
        v8 = a1 - a1 + a4 + a2;
    }
    else
    {
        v8 = a2 * a1;
    }
    v9 = a5 + a5 - a5 - a2;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 14
11 12
12 12
13 18
14 18
15 18
16 22
17 20
18 20
19 26
20 26
21 29
22 29
23 29
24 29
25 29
26 29
27 29
28 28
29 29
30 30
<<<sep_out_sample>>>
lea 0x1(%rcx),%r9d
imul %edx,%r9d
mov $0x0,%eax
cmp %esi,%edi
jl 20 <func1+0x20>
mov %r8d,%eax
imul %edi,%eax
mov %edx,%r10d
sub %eax,%r10d
mov %r10d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a3 * a4 + a3;
    if (a1 < a2)
    {
        v7 = a2 - a2;
    }
    else
    {
        v7 = a3 - a5 * a1;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 7
4 5
5 5
6 11
7 11
8 11
9 11
10 11
11 13
12 13
13 13
14 13
15 13
16 13
17 14
<<<sep_out_sample>>>
lea (%r8,%rcx,1),%eax
cmp %esi,%edi
jl 16 <func1+0x16>
mov %ecx,%r9d
sub %esi,%r9d
mov %esi,%eax
imul %edx,%eax
add %r9d,%eax
add %edi,%edx
add %edx,%esi
add %r8d,%esi
add %ecx,%esi
lea 0x1(%rax,%rsi,1),%edx
add %ecx,%r8d
imul %r8d,%ecx
sub %edi,%ecx
lea (%rdx,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a1 < a2)
    {
        v6 = a5 + a4;
    }
    else
    {
        v6 = a4 - a2 + a2 * a3;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        if (v7 < a3)
        {
            v7 += a2 + a4;
        }
        else
        {
            v7 += a4 - a1 + a4;
        }
    }
    v9 = (a4 + a5) * a4 - a1;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 4
3 4
4 10
5 10
6 10
7 10
8 10
9 25
10 25
11 25
12 25
13 25
14 24
15 24
16 24
17 25
18 26
<<<sep_out_sample>>>
mov %ecx,%r9d
sub %esi,%r9d
add %ecx,%r9d
add %r8d,%r9d
lea (%rsi,%r8,1),%eax
cmp %edi,%edx
jge 2a <func1+0x2a>
mov %edi,%r10d
imul %esi,%r10d
imul %edx,%r10d
mov %r8d,%r11d
sub %r10d,%r11d
mov %r11d,%r10d
jmp 36 <func1+0x36>
lea (%rcx,%rsi,1),%r10d
imul %edi,%r10d
imul %r8d,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a5 - (a2 - a4 - a4);
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a4 * (a5 - a2);
    }
    v9 = a2 + a5;
    if (a3 < a1)
    {
        v10 = a5 - a1 * a2 * a3;
    }
    else
    {
        v10 = ((a4 + a2) * a1) * a5;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 10
6 11
7 11
8 13
9 13
10 13
11 13
12 13
13 13
14 13
15 17
16 17
17 17
18 19
19 19
20 19
21 19
22 19
23 19
24 19
25 20
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add $0x1,%ecx
imul %ecx,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (a3 < a4)
        {
            v6 += a1 - a3;
        }
        else
        {
            v6 += a2 + a5;
        }
    }
    v8 = a4 * a3 + a3;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 16
6 16
7 17
8 18
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %esi,%edx
sub %r8d,%edx
lea (%rax,%rcx,2),%eax
lea (%rax,%rdx,1),%eax
imul %edi,%esi
add %eax,%esi
sub %edi,%ecx
sub %r8d,%ecx
lea (%rsi,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a2 + a3 - a5 + a4;
    v7 = a1 * a2;
    v8 = (a4 - a1) - a5;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 7
2 7
3 7
4 4
5 4
6 4
7 7
8 5
9 7
10 6
11 6
12 7
13 8
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a2 + (a5 + a1);
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        if (v7 < a3)
        {
            v8 += a5 * a3 + a5;
        }
        else
        {
            v8 += a2 - a4 - a4;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 21
5 22
<<<sep_out_sample>>>
mov %ecx,%eax
sub %edx,%eax
cmp %ecx,%edi
jle 12 <func1+0x12>
mov %r8d,%eax
imul %edi,%eax
sub %esi,%eax
sub %esi,%eax
mov %edi,%r9d
imul %edi,%r9d
add %r9d,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a3 - a2 * a1;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += (a5 * a1) * a5;
    }
    if (a4 < a1)
    {
        v10 = a5 * a1 - a2 - a2;
    }
    else
    {
        v10 = a4 - a3;
    }
    v11 = a1 * a1;
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 20
2 20
3 14
4 14
5 16
6 16
7 16
8 16
9 22
10 22
11 23
12 23
13 23
14 23
15 23
16 23
17 24
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
lea 0x1(%rcx,%rax,1),%eax
imul %edx,%esi
add %esi,%r8d
sub %r8d,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a5 - a1 - a4;
    }
    v8 = a1 - (a5 + (a3 * a2));
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 9
6 9
7 9
8 10
9 11
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %r8d,%edx
lea (%r8,%rcx,2),%eax
lea 0x1(%rdx,%rax,1),%eax
sub %ecx,%esi
add $0x1,%esi
imul %esi,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a4 + a5;
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += (a4 - a4) - a1;
    }
    v9 = (a4 * (a2 - a4)) + a4;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 4
5 11
6 10
7 10
8 10
9 11
10 12
<<<sep_out_sample>>>
mov %r8d,%eax
sub %esi,%eax
lea 0x1(%rdi,%rdx,1),%edi
add %edi,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%ecx
imul %edx,%r8d
lea (%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a5 + (a2 * a2);
    }
    v8 = a5 * a3;
    v9 = a4 + ((a5 - a2) - a4);
    v10 = 0;
    for (v11 = 0; v11++; v11<a5)
    {
        if (a4 < a5)
        {
            v10 += a5 + a1;
        }
        else
        {
            v10 += a2 * a4 - a5;
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 23
4 23
5 23
6 23
7 9
8 23
9 23
10 24
<<<sep_out_sample>>>
cmp $0x1,%edx
jle f <func1+0xf>
mov %r8d,%eax
sub %edi,%eax
add %r8d,%eax
jmp 15 <func1+0x15>
lea (%rdi,%r8,2),%eax
sub %edx,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a5 + a3;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += a2 + a2 + a1;
    }
    if (v9 < a3)
    {
        v10 = a5 - a1 + a5;
    }
    else
    {
        v10 = ((a5 + a1) + a5) - a3;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 14
2 14
3 16
4 16
5 16
6 16
7 20
8 20
9 22
10 22
11 22
12 22
13 22
14 23
<<<sep_out_sample>>>
mov %ecx,%r9d
sub %esi,%r9d
sub $0x1,%r9d
imul %esi,%r9d
cmp %edx,%ecx
jle 1d <func1+0x1d>
mov %edi,%eax
sub %edx,%eax
add %edi,%eax
imul %edi,%eax
jmp 23 <func1+0x23>
mov %r8d,%eax
imul %edi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = (a2 * (a4 - a2)) - a2;
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a1 + a3 - a4;
    }
    if (a3 < a4)
    {
        v9 = ((a1 - a3) + a1) * a1;
    }
    else
    {
        v9 = a5 * a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 10
6 10
7 12
8 12
9 12
10 12
11 12
12 16
13 16
14 18
15 18
16 18
17 18
18 18
19 18
20 19
<<<sep_out_sample>>>
add %edx,%edi
add %esi,%edi
add %edi,%r8d
add %r8d,%ecx
sub %esi,%edx
lea 0x1(%rcx,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a4 - (a2 + a4) + a3;
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += a1 * a1 * a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 4
6 10
7 11
<<<sep_out_sample>>>
cmp %edi,%ecx
jge e <func1+0xe>
lea -0x1(%rsi),%eax
imul %edx,%eax
add %ecx,%eax
jmp 1d <func1+0x1d>
lea (%rdx,%rsi,1),%eax
mov %edi,%r9d
sub %eax,%r9d
mov %r9d,%eax
sub %r8d,%eax
add %edi,%edx
add %esi,%edx
add %r8d,%edx
add %edx,%ecx
add %eax,%ecx
lea (%rdi,%rsi,2),%eax
sub %r8d,%eax
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a4 < a1)
    {
        v6 = (a3 * a2 - a3) + a4;
    }
    else
    {
        v6 = a1 - (a3 + a2) - a5;
    }
    v7 = a2 + a1 + a2 - a5;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 10
11 10
12 13
13 13
14 13
15 13
16 13
17 12
18 12
19 13
20 14
<<<sep_out_sample>>>
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rdi,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a1 - a4;
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += a2 * a2 - a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 11
<<<sep_out_sample>>>
cmp %r8d,%edi
jle c <func1+0xc>
mov %esi,%eax
imul %ecx,%eax
jmp 14 <func1+0x14>
lea 0x1(%rdi),%eax
imul %esi,%eax
sub %edi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (a3 < a1)
        {
            v6 += a5 - a1;
        }
        else
        {
            v6 += a2 - a3 - a4;
        }
    }
    if (a5 < a1)
    {
        v8 = a2 * a4;
    }
    else
    {
        v8 = (a2 + a1 * a2) - a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 22
7 22
8 22
9 24
10 24
11 24
12 24
13 24
14 25
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%eax
add $0x1,%r8d
imul %r8d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a3 * (a5 - a4);
    }
    if (a2 < a2)
    {
        v8 = ((a1 - a5) * a5) - a1;
    }
    else
    {
        v8 = a5 * a4 + a4;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        if (a5 < a2)
        {
            v9 += (a4 * a1) + a4;
        }
        else
        {
            v9 += a2 * a2 - a3;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 29
2 29
3 29
4 29
5 15
6 15
7 29
8 30
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
lea (%r8,%rcx,1),%eax
mov %edx,%edi
imul %ecx,%edi
add %edi,%eax
imul %esi,%edx
add %edx,%eax
imul %ecx,%ecx
add %ecx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a3 * a4;
    v7 = a2 * a3;
    v8 = a4 * a4 + a2;
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        v9 += (a3 - a5) * a4;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 12
2 12
3 12
4 12
5 4
6 4
7 12
8 5
9 12
10 6
11 6
12 12
13 13
<<<sep_out_sample>>>
test %esi,%esi
jle f <func1+0xf>
lea 0x1(%rdx),%eax
imul %edi,%eax
add %r8d,%eax
jmp 17 <func1+0x17>
lea 0x1(%rsi),%eax
imul %ecx,%eax
sub %edx,%eax
lea 0x1(%rdi,%rdx,1),%r9d
add %esi,%r9d
add %r9d,%r8d
add %ecx,%r8d
add %r8d,%eax
imul %ecx,%edx
add %esi,%edx
add %ecx,%edx
add %edx,%eax
imul %edi,%esi
sub %esi,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (v6 < a2)
    {
        v6 = (a1 + a1 * a3) + a5;
    }
    else
    {
        v6 = (a4 + a4 * a2) - a3;
    }
    v7 = a4 * a3 + a2 + a4;
    v8 = a4 - a2 * a1;
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        v9 += (a4 - a1) * a5;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 19
11 19
12 19
13 19
14 19
15 12
16 12
17 12
18 19
19 13
20 13
21 19
22 20
<<<sep_out_sample>>>
add %edx,%edi
add %esi,%edi
add %r8d,%edi
add %ecx,%edi
mov %edx,%eax
sub %esi,%eax
sub %esi,%eax
add %edi,%eax
lea (%r8,%r8,2),%edi
add %edx,%edi
add %edi,%eax
imul %ecx,%esi
sub %r8d,%esi
add %esi,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a3 - a2 - a2;
    v7 = (a5 + (a5 + a5)) + a3;
    v8 = a4 * a2 - a5 + a3;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 7
2 7
3 7
4 7
5 4
6 4
7 4
8 7
9 5
10 5
11 7
12 6
13 6
14 6
15 7
16 8
<<<sep_out_sample>>>
push %rbx
lea (%rsi,%r8,1),%eax
imul %r8d,%eax
mov %edx,%ebx
sub %eax,%ebx
cmp %edx,%r8d
jle 1a <func1+0x1a>
mov %edx,%r11d
sub %esi,%r11d
jmp 27 <func1+0x27>
mov %ecx,%r11d
imul %ecx,%r11d
add %r8d,%r11d
add %ecx,%r11d
cmp %edi,%edx
jge 34 <func1+0x34>
mov %esi,%r10d
imul %esi,%r10d
jmp 3c <func1+0x3c>
lea 0x2(%rsi),%r10d
imul %edx,%r10d
mov %edx,%r9d
sub %esi,%r9d
cmp %edi,%ecx
mov $0x0,%eax
cmovle %eax,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %ebx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a3 - (a2 + a5) * a5;
    if (a3 < a5)
    {
        v7 = a3 - a2;
    }
    else
    {
        v7 = a4 * a4 + a5 + a4;
    }
    if (a3 < a1)
    {
        v8 = a2 * a2;
    }
    else
    {
        v8 = a3 + (a3 * a2) + a3;
    }
    if (a1 < a4)
    {
        v9 = a3 - a5 + a5 - a2;
    }
    else
    {
        v9 = a2 - a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 4
3 4
4 4
5 4
6 5
7 5
8 7
9 7
10 7
11 11
12 11
13 11
14 11
15 13
16 13
17 15
18 15
19 15
20 19
21 19
22 23
23 23
24 23
25 23
26 23
27 29
28 29
29 29
30 29
31 29
32 29
33 29
34 29
35 30
36 30
<<<sep_out_sample>>>
cmp %edi,%edx
jle 10 <func1+0x10>
lea -0x1(%rsi),%eax
imul %edi,%eax
imul %r8d,%eax
jmp 19 <func1+0x19>
mov %esi,%eax
imul %ecx,%eax
sub %edx,%eax
sub %esi,%eax
lea 0x1(%rax,%rdi,1),%eax
add %eax,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a5 + a5 + a2;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        if (a2 < a5)
        {
            v8 += a3 * a3 + a3;
        }
        else
        {
            v8 += a5 + a3 * a4;
        }
    }
    if (a1 < a3)
    {
        v10 = (a1 * a2 - a1) * a5;
    }
    else
    {
        v10 = (a2 * a4 - a3) - a2;
    }
    v11 = 0;
    for (v12 = 0; v12++; v12<a3)
    {
        v11 += a4 * a1 * a4;
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 23
4 23
5 23
6 23
7 27
8 27
9 27
10 27
11 34
12 34
13 34
14 34
15 34
16 35
<<<sep_out_sample>>>
mov %esi,%r9d
sub %ecx,%r9d
add $0x1,%r9d
imul %edx,%r9d
test %r8d,%r8d
jle 22 <func1+0x22>
lea (%rdi,%r8,1),%eax
mov %ecx,%r10d
sub %eax,%r10d
add %ecx,%r10d
jmp 2f <func1+0x2f>
mov %edx,%r10d
imul %r8d,%r10d
sub %ecx,%r10d
add %r8d,%r10d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %r9d,%eax
add %r10d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (a1 < a2)
        {
            v6 += a1 + a2;
        }
        else
        {
            v6 += a5 - a5;
        }
    }
    v8 = ((a2 - a4) * a3) + a3;
    if (v9 < a5)
    {
        v9 = a4 - (a1 + a5) + a4;
    }
    else
    {
        v9 = ((a3 * a5) - a4) + a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 16
4 16
5 17
6 17
7 19
8 19
9 19
10 19
11 19
12 23
13 23
14 23
15 23
16 25
17 25
18 25
19 25
20 25
21 25
22 26
<<<sep_out_sample>>>
push %rbx
mov %edx,%ebx
sub %ecx,%ebx
cmp %ecx,%edx
jle 12 <func1+0x12>
lea (%rcx,%rsi,1),%r11d
add %r8d,%r11d
jmp 19 <func1+0x19>
lea (%rdx,%rsi,2),%r11d
add %r8d,%r11d
mov %esi,%r9d
imul %ecx,%r9d
sub %edx,%r9d
imul %esi,%r9d
lea (%rdx,%rcx,1),%r10d
cmp %r9d,%esi
jg 41 <func1+0x41>
mov $0x1,%r10d
sub %r8d,%r10d
imul %r8d,%r10d
imul %ecx,%r10d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %ebx,%eax
add %r11d,%eax
add %eax,%r9d
lea (%r9,%r10,1),%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a3 - a4;
    if (a4 < a3)
    {
        v7 = a4 + a2 + a5;
    }
    else
    {
        v7 = a5 + (a3 + a2 + a2);
    }
    v8 = (a2 * a4 - a3) * a2;
    if (v8 < a2)
    {
        v9 = a3 + a4 - a2 + a2;
    }
    else
    {
        v9 = (a5 - a5 * a5) * a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 4
3 4
4 5
5 5
6 7
7 7
8 7
9 11
10 11
11 13
12 13
13 13
14 13
15 16
16 14
17 14
18 20
19 20
20 20
21 20
22 22
23 22
24 22
25 22
26 22
27 22
28 22
29 22
30 23
31 23
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
add %ecx,%esi
sub $0x1,%ecx
imul %ecx,%r8d
sub %edx,%r8d
lea 0x1(%rsi,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a4 * a5 - a5 - a3;
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += a5 - a2 + a5;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a1)
    {
        if (a1 < a3)
        {
            v9 += (a5 + a4) + a1;
        }
        else
        {
            v9 += (a4 - a4) - a4;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 22
4 22
5 4
6 4
7 4
8 22
9 23
<<<sep_out_sample>>>
lea (%rsi,%rcx,1),%eax
imul %r8d,%eax
imul %edi,%eax
add %edi,%eax
add %eax,%edx
add %edx,%esi
add %r8d,%esi
add %ecx,%esi
mov %ecx,%eax
imul %edi,%eax
imul %edi,%eax
add %r8d,%eax
lea 0x1(%rsi,%rax,1),%edx
add %r8d,%edi
imul %ecx,%r8d
sub %r8d,%edi
lea (%rdx,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a5 + a1 * (a4 * a1);
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        if (a3 < a3)
        {
            v7 += (a1 * a1) + a5;
        }
        else
        {
            v7 += a5 * a4;
        }
    }
    v9 = a5 + a1 - (a5 * a4);
    v10 = a1 * (a5 * (a2 + a4));
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 19
5 19
6 19
7 19
8 19
9 4
10 4
11 4
12 4
13 19
14 17
15 17
16 17
17 19
18 20
<<<sep_out_sample>>>
cmp %esi,%r8d
jle f <func1+0xf>
lea 0x1(%r8),%eax
imul %r8d,%eax
jmp 15 <func1+0x15>
lea 0x2(%rdi),%eax
imul %ecx,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a2 + (a5 + a4);
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        if (a4 < a4)
        {
            v8 += a2 * (a4 + a3);
        }
        else
        {
            v8 += (a5 + a5) * a5;
        }
    }
    if (a2 < a5)
    {
        v10 = a5 + (a5 * a5);
    }
    else
    {
        v10 = a4 + a4 * a1 + a4;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 23
4 23
5 23
6 27
7 27
8 29
9 29
10 29
11 29
12 29
13 30
<<<sep_out_sample>>>
mov %esi,%eax
sub %r8d,%eax
cmp %edi,%ecx
jle 19 <func1+0x19>
mov %ecx,%r9d
imul %edi,%r9d
mov %ecx,%eax
imul %esi,%eax
imul %r9d,%eax
lea 0x1(%rax,%rdi,1),%eax
add %eax,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += (a4 - a1) - a5;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        if (a3 < a3)
        {
            v8 += (a1 * a4) * a1;
        }
        else
        {
            v8 += a1 * a4;
        }
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a5)
    {
        v10 += a3 * a2;
    }
    if (a1 < a4)
    {
        v12 = a4 * a1 * (a4 * a2);
    }
    else
    {
        v12 = a2 - a5;
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 32
2 32
3 26
4 26
5 28
6 28
7 28
8 28
9 28
10 34
11 34
12 34
13 34
14 34
15 35
<<<sep_out_sample>>>
lea (%rdi,%rcx,1),%eax
cmp %esi,%edi
jge c <func1+0xc>
lea (%rdi,%rdi,2),%eax
add %ecx,%eax
lea (%rdi,%rdx,1),%r9d
add %esi,%r9d
add %r8d,%r9d
add %r9d,%ecx
add %ecx,%eax
imul %esi,%edi
imul %edi,%edx
add %edx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a1 < a2)
    {
        v6 = a1 + a1 + a1 + a4;
    }
    else
    {
        v6 = (a4 - a5 + a1) + a5;
    }
    v7 = (a1 * a2 * a3) + a5;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 13
7 13
8 13
9 13
10 13
11 12
12 12
13 12
14 13
15 14
<<<sep_out_sample>>>
mov %esi,%eax
sub %edi,%eax
add %edx,%edi
add %edi,%esi
add %r8d,%esi
add %esi,%ecx
imul %eax,%r8d
add %r8d,%edx
add %ecx,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a5 * (a2 - a1) + a3;
    if (a5 < a5)
    {
        v7 = a5 + ((a3 - a5) - a1);
    }
    else
    {
        v7 = a2 - (a4 - a4) - a1;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 13
4 13
5 13
6 13
7 4
8 4
9 13
10 13
11 14
<<<sep_out_sample>>>
add %edx,%edi
add %esi,%edi
add %edi,%r8d
add %r8d,%ecx
sub %esi,%edx
lea 0x1(%rcx,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a3 - a2;
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += (a1 + a4) * a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 4
6 10
7 11
<<<sep_out_sample>>>
lea (%rdi,%r8,1),%eax
add %edx,%eax
add %esi,%eax
add %r8d,%eax
mov %edi,%r9d
sub %esi,%r9d
mov %r9d,%esi
sub %r8d,%esi
lea (%rax,%rcx,2),%eax
lea 0x1(%rsi,%rax,1),%eax
imul %edi,%edi
add %edx,%r8d
add %r8d,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = ((a1 - a2) - a5) + a4;
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += a3 - a4;
    }
    v9 = a1 * a1 + (a5 + a3);
    v10 = ((a2 - a2) * a2) + a5;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 12
2 12
3 12
4 12
5 4
6 4
7 4
8 4
9 4
10 12
11 10
12 10
13 10
14 12
15 13
<<<sep_out_sample>>>
mov %edx,%r9d
sub %esi,%r9d
test %edi,%edi
jle 11 <func1+0x11>
mov %edx,%eax
imul %edx,%eax
jmp 19 <func1+0x19>
lea -0x1(%rdx),%eax
imul %edi,%eax
sub %esi,%eax
add %edi,%edx
add %edx,%esi
add %r8d,%esi
add %esi,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a3 - a2;
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += a3 * a3;
    }
    if (v7 < a1)
    {
        v9 = a3 * a3;
    }
    else
    {
        v9 = ((a1 * a3) - a1) - a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 10
4 10
5 12
6 12
7 12
8 16
9 16
10 16
11 18
12 18
13 18
14 18
15 18
16 18
17 19
<<<sep_out_sample>>>
mov %r8d,%eax
imul %ecx,%eax
imul %ecx,%eax
mov %edx,%r10d
sub %eax,%r10d
mov %edi,%r9d
neg %r9d
sub %r8d,%r9d
test %r8d,%r8d
jle 2a <func1+0x2a>
mov %edi,%eax
sub %r8d,%eax
imul %edx,%eax
add %r8d,%eax
jmp 34 <func1+0x34>
mov %edi,%eax
imul %edi,%eax
add %edx,%eax
imul %edx,%eax
add %edi,%edx
add %esi,%edx
add %edx,%r8d
add %r8d,%ecx
add %r10d,%ecx
add %r9d,%ecx
add %eax,%ecx
lea (%rcx,%rsi,2),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a3 - (a5 * a4 * a4);
    v7 = a4 - (a4 + a1 + a5);
    if (v8 < a5)
    {
        v8 = a5 + (a3 * (a1 - a5));
    }
    else
    {
        v8 = a3 * (a3 + a1 * a1);
    }
    v9 = (a2 - a4) + a4 + a2;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 4
6 5
7 5
8 5
9 6
10 6
11 8
12 8
13 8
14 8
15 8
16 12
17 12
18 12
19 12
20 15
21 15
22 15
23 15
24 15
25 15
26 15
27 15
28 16
<<<sep_out_sample>>>
mov %r8d,%eax
imul %ecx,%eax
mov %edx,%r10d
sub %eax,%r10d
imul %r8d,%r10d
cmp %ecx,%esi
jle 21 <func1+0x21>
lea -0x1(%rdx),%r9d
imul %edi,%r9d
sub %esi,%r9d
jmp 2e <func1+0x2e>
mov %edi,%r9d
sub %edx,%r9d
add %r8d,%r9d
imul %edi,%r9d
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (a2 < a3)
        {
            v6 += a5 - a4;
        }
        else
        {
            v6 += a2 * a4 + a4;
        }
    }
    if (a3 < a3)
    {
        v8 = (a2 + (a1 - a3)) - a3;
    }
    else
    {
        v8 = (a3 - (a5 * a4)) * a5;
    }
    if (a4 < a2)
    {
        v9 = (a3 * a1 - a1) - a2;
    }
    else
    {
        v9 = ((a1 - a3) + a5) * a1;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a1)
    {
        v10 += a4 + a1 - a3;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 22
4 22
5 22
6 24
7 24
8 26
9 26
10 26
11 26
12 30
13 30
14 30
15 30
16 37
17 37
18 37
19 37
20 37
21 37
22 38
<<<sep_out_sample>>>
mov %edx,%r9d
sub %ecx,%r9d
test %esi,%esi
jle 15 <func1+0x15>
mov %r8d,%eax
imul %r8d,%eax
sub %esi,%eax
jmp 17 <func1+0x17>
mov %edx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a3 - a4;
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        if (v8 < a4)
        {
            v7 += a2 * a1 - a1;
        }
        else
        {
            v7 += a4 * a4 * a3;
        }
    }
    if (v9 < a2)
    {
        v9 = a5 * a5 - a2;
    }
    else
    {
        v9 = a3 + (a3 - a3);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 17
4 17
5 19
6 19
7 19
8 19
9 23
10 25
11 25
12 25
13 25
14 25
15 25
16 26
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %r8d,%edx
add %ecx,%edx
imul %ecx,%ecx
add %ecx,%esi
sub %r8d,%esi
lea 0x1(%rdx,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a4 * a4 + a2 - a5;
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        if (a2 < a5)
        {
            v7 += a4 * (a4 + a1);
        }
        else
        {
            v7 += a1 + a2 - a4;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 4
6 4
7 4
8 17
9 18
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%r9d
add %esi,%r9d
add %r8d,%r9d
add %ecx,%r9d
mov %edx,%eax
imul %edx,%eax
sub %r8d,%eax
sub %edx,%eax
add %r9d,%eax
sub %r8d,%edi
imul %edi,%esi
imul %edx,%esi
add %esi,%eax
sub %ecx,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a3 < a3)
    {
        v6 = a5 + a4 * a1;
    }
    else
    {
        v6 = a3 * a3 - a5 - a3;
    }
    v7 = a3 * (a2 * (a1 - a5));
    v8 = a3 - a4;
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        if (v9 < a2)
        {
            v9 += a1 * a3;
        }
        else
        {
            v9 += a5 + (a1 - a3);
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 26
2 26
3 26
4 26
5 10
6 10
7 10
8 10
9 26
10 12
11 12
12 12
13 26
14 13
15 26
16 27
<<<sep_out_sample>>>
add %edx,%edi
lea (%rdi,%rsi,1),%eax
add %r8d,%eax
add %ecx,%eax
add %eax,%edi
imul %esi,%ecx
sub %edx,%ecx
imul %r8d,%ecx
add %ecx,%edi
lea (%r8,%rsi,2),%eax
sub %edx,%eax
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a3 + a1;
    v7 = (a2 * a4 - a3) * a5;
    v8 = a2 + a2 + a5 - a3;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 7
3 7
4 7
5 7
6 5
7 5
8 5
9 7
10 6
11 6
12 7
13 8
<<<sep_out_sample>>>
add %edi,%edx
add %edx,%esi
add %r8d,%esi
add %ecx,%esi
add %r8d,%ecx
sub %edi,%ecx
sub %edi,%ecx
lea 0x1(%rsi,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = (a4 + a5 - a1) - a1;
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a1 + a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 4
6 4
7 4
8 10
9 11
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %esi,%edi
lea (%rax,%rdi,1),%esi
imul %ecx,%edx
imul %edx,%r8d
imul %r8d,%ecx
lea 0x1(%rsi,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = (a1 - a3 + a2) + a3;
    v7 = (a3 * a4 * a5) * a4;
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += a2 * a5 + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 11
5 4
6 11
7 5
8 5
9 5
10 11
11 12
<<<sep_out_sample>>>
mov %edi,%eax
test %r8d,%r8d
jg 13 <func1+0x13>
mov $0x1,%eax
sub %edi,%eax
imul %edx,%eax
add %ecx,%eax
lea (%rdi,%rdx,1),%r9d
add %r9d,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%eax
mov %edi,%ecx
imul %edi,%ecx
imul %ecx,%edi
sub %edi,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (v6 < a5)
    {
        v6 = a1 - a3 + a3;
    }
    else
    {
        v6 = a3 - a3 * a1 + a4;
    }
    v7 = a3 - a1 * (a1 * a1);
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 4
3 4
4 10
5 10
6 10
7 10
8 13
9 13
10 13
11 13
12 13
13 12
14 12
15 12
16 12
17 13
18 14
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %eax,%ecx
lea (%rdx,%rsi,1),%eax
add %eax,%r8d
imul %edi,%r8d
lea (%rcx,%r8,1),%eax
imul %esi,%esi
add %esi,%edi
sub %edi,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a1 * (a3 + a2 + a5);
    v7 = a3 - (a1 + a2 * a2);
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 4
7 4
8 6
9 5
10 5
11 5
12 6
13 7
<<<sep_out_sample>>>
cmp %edx,%ecx
jge 11 <func1+0x11>
mov %esi,%eax
imul %ecx,%eax
add $0x1,%eax
imul %edx,%eax
jmp 1c <func1+0x1c>
mov %ecx,%eax
imul %esi,%eax
sub $0x1,%eax
imul %ecx,%eax
mov %esi,%edi
imul %ecx,%edi
mov %r8d,%r9d
sub %edi,%r9d
mov %r9d,%edi
add %edx,%edi
add %esi,%edi
add %edi,%r8d
add %ecx,%r8d
add %eax,%r8d
imul %edx,%ecx
imul %ecx,%edx
add %edx,%esi
lea 0x1(%r8,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a4 < a3)
    {
        v6 = a2 * a4 * a3 + a3;
    }
    else
    {
        v6 = a4 * (a4 * a2) - a4;
    }
    v7 = a2 + a4 * a3 * a3;
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += a4 - a2 - a1;
    }
    v10 = a5 - a1 - a2 * a4;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 18
13 18
14 19
15 19
16 19
17 19
18 19
19 19
20 19
21 19
22 12
23 12
24 12
25 19
26 20
<<<sep_out_sample>>>
mov %r8d,%eax
imul %edi,%eax
imul %esi,%eax
imul %r8d,%eax
add %edi,%eax
add %edx,%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
imul %ecx,%edx
sub %esi,%edx
sub %esi,%edx
add %eax,%edx
sub %ecx,%r8d
lea 0x1(%rdx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a4 * a3 - a2 - a2;
    v7 = a5 - a4;
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += a1 + a1 - a3;
    }
    v10 = (a5 * a1 * a2) * a5;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 11
5 12
6 12
7 12
8 12
9 12
10 4
11 4
12 4
13 12
14 5
15 12
16 13
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a1 * a4;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        if (v6 < a2)
        {
            v8 += a5 + a5;
        }
        else
        {
            v8 += (a3 + a5) * a4;
        }
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a5)
    {
        if (v10 < a5)
        {
            v10 += a4 + a1 * a2;
        }
        else
        {
            v10 += a5 + a2 + a3;
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 33
2 33
3 33
4 33
5 34
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %r8d,%edx
lea 0x1(%rcx,%rdx,1),%eax
sub %r8d,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a1 - (a2 - a1);
    }
    v8 = a2 - a5;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 9
6 10
7 11
<<<sep_out_sample>>>
cmp $0x1,%esi
jle b <func1+0xb>
lea (%rdi,%rdi,1),%r10d
jmp 19 <func1+0x19>
lea (%rdx,%rdx,1),%r10d
mov %r8d,%r9d
imul %edi,%r9d
sub %r9d,%r10d
cmp %ecx,%edi
jge 2c <func1+0x2c>
lea (%rcx,%rdi,1),%r9d
mov %edi,%eax
imul %r8d,%eax
add %eax,%r9d
jmp 33 <func1+0x33>
lea (%rdi,%rdx,2),%r9d
sub %ecx,%r9d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += (a3 * a3) - a2;
    }
    if (v7 < a2)
    {
        v8 = a1 + a1;
    }
    else
    {
        v8 = a3 + a3 - a5 * a1;
    }
    if (a1 < a4)
    {
        v9 = a4 + a1 + a1 * a5;
    }
    else
    {
        v9 = (a1 + a3 - a4) + a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 15
6 15
7 15
8 15
9 17
10 17
11 19
12 19
13 19
14 19
15 19
16 23
17 23
18 25
19 25
20 25
21 25
22 25
23 25
24 26
<<<sep_out_sample>>>
test %esi,%esi
jle f <func1+0xf>
lea 0x1(%r8),%eax
imul %esi,%eax
add %ecx,%eax
jmp 17 <func1+0x17>
lea (%rdi,%rdx,1),%eax
imul %edi,%eax
add %esi,%eax
lea (%r8,%rcx,1),%r9d
imul %edx,%r9d
imul %edx,%r9d
lea 0x1(%rdi,%r9,1),%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    if (v6 < a2)
    {
        v6 = a4 + ((a5 * a2) + a2);
    }
    else
    {
        v6 = a2 + ((a1 + a3) * a1);
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += a4 + (a5 - a1);
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a1)
    {
        v9 += a1 * (a1 + a2);
    }
    v11 = (a5 + a4) * a3 * a3;
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 22
11 22
12 22
13 23
14 23
15 23
16 23
17 23
18 23
19 24
<<<sep_out_sample>>>
test %r8d,%r8d
jle 13 <func1+0x13>
mov $0x1,%eax
sub %edi,%eax
imul %edx,%eax
add %edi,%eax
jmp 1a <func1+0x1a>
mov %edi,%eax
neg %eax
imul %esi,%eax
lea 0x1(%rdi,%rdx,1),%r9d
add %r9d,%esi
add %esi,%r8d
add %ecx,%r8d
add %eax,%r8d
imul %ecx,%edx
add %edi,%edx
imul %edx,%edi
lea 0x1(%r8,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    if (v6 < a5)
    {
        v6 = a1 - (a1 * a3 - a3);
    }
    else
    {
        v6 = ((a3 - a1) - a3) * a2;
    }
    v7 = a1 * ((a3 * a4) + a1);
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        if (v6 < a4)
        {
            v8 += a5 + (a1 - a4);
        }
        else
        {
            v8 += a2 - a3 - a5;
        }
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a4)
    {
        if (v10 < a5)
        {
            v10 += (a3 - a3) - a2;
        }
        else
        {
            v10 += a1 - (a4 - a4);
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 37
12 37
13 37
14 37
15 37
16 12
17 12
18 12
19 37
20 38
<<<sep_out_sample>>>
mov %r8d,%r9d
imul %esi,%r9d
mov %edx,%r10d
sub %esi,%r10d
cmp %ecx,%r8d
jle 1f <func1+0x1f>
mov %r8d,%r10d
sub %esi,%r10d
add %edi,%r10d
imul %ecx,%r10d
mov %edx,%r11d
sub %esi,%r11d
cmp %ecx,%r9d
cmovge %edi,%r11d
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
add %r9d,%r10d
lea (%r10,%r11,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a5 * a2;
    if (a4 < a5)
    {
        v7 = a4 * ((a5 - a2) + a1);
    }
    else
    {
        v7 = ((a1 + a3) - a1) - a2;
    }
    if (v6 < a4)
    {
        v8 = a3 - a2;
    }
    else
    {
        v8 = a2 + (a1 - a2);
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a1)
    {
        if (a1 < a3)
        {
            v9 += (a4 - a2) * a1;
        }
        else
        {
            v9 += a1 + a4;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 11
4 11
5 5
6 5
7 7
8 7
9 7
10 7
11 15
12 15
13 15
14 15
15 33
16 33
17 33
18 33
19 33
20 33
21 33
22 34
<<<sep_out_sample>>>
mov %esi,%eax
imul %ecx,%eax
add %r8d,%eax
mov %ecx,%r11d
sub %eax,%r11d
mov %esi,%r9d
sub %edx,%r9d
mov %ecx,%eax
imul %r8d,%eax
test %edi,%edi
cmovg %eax,%r9d
cmp %edi,%ecx
jle 35 <func1+0x35>
mov %edx,%r10d
imul %r8d,%r10d
imul %edi,%r10d
imul %edx,%r10d
jmp 42 <func1+0x42>
mov %edx,%r10d
sub %edi,%r10d
add %ecx,%r10d
imul %edx,%r10d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r11d,%ecx
add %ecx,%r9d
lea (%r9,%r10,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a2 < a2)
    {
        v6 = a5 + a1 + a3 + a1;
    }
    else
    {
        v6 = a4 - (a2 * a4 + a5);
    }
    if (v7 < a1)
    {
        v7 = a4 * a5;
    }
    else
    {
        v7 = a2 - a3;
    }
    if (a1 < a4)
    {
        v8 = (a3 * a5 * a1) * a3;
    }
    else
    {
        v8 = (a3 - a1 + a4) * a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 10
6 18
7 18
8 14
9 14
10 14
11 14
12 20
13 20
14 22
15 22
16 22
17 22
18 22
19 26
20 26
21 26
22 26
23 28
24 28
25 28
26 28
27 28
28 28
29 28
30 29
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea (%r8,%rcx,1),%esi
imul %ecx,%ecx
lea (%rdi,%rsi,1),%eax
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = a1 + a1;
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += (a1 * a3) * a2;
    }
    v9 = a4 * a4 - a1;
    v10 = 0;
    for (v11 = 0; v11++; v11<a4)
    {
        v10 += (a4 + a1) * a5;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 16
4 16
5 10
6 10
7 16
8 17
<<<sep_out_sample>>>
lea (%rdi,%rcx,1),%r10d
mov $0x1,%eax
sub %ecx,%eax
imul %r8d,%eax
sub %esi,%eax
mov $0x0,%r9d
cmp %eax,%r8d
jg 28 <func1+0x28>
mov %edi,%r9d
sub %esi,%r9d
sub %edx,%r9d
sub %ecx,%r9d
add %r9d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r10d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a4 + ((a1 - a3) + a3);
    v7 = a5 - a4 * a5 - a2;
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += (a2 * a2) + a4;
    }
    if (v7 < a5)
    {
        v10 = a4 - a4;
    }
    else
    {
        v10 = ((a1 - a2) - a3) - a4;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 5
3 5
4 5
5 5
6 13
7 11
8 11
9 17
10 17
11 17
12 17
13 19
14 19
15 19
16 19
17 19
18 19
19 19
20 20
<<<sep_out_sample>>>
cmp %edi,%esi
jge 13 <func1+0x13>
mov %edi,%r10d
imul %edx,%r10d
mov %r8d,%r9d
sub %esi,%r9d
jmp 2e <func1+0x2e>
mov %r8d,%r10d
imul %edx,%r10d
imul %edx,%r10d
imul %esi,%r10d
lea 0x1(%r8),%r9d
imul %esi,%r9d
imul %ecx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a2 < a1)
    {
        v6 = a1 * a3;
    }
    else
    {
        v6 = (a3 * (a5 * a3)) * a2;
    }
    if (a2 < a1)
    {
        v7 = a5 - a2;
    }
    else
    {
        v7 = a4 * (a5 * a2 + a2);
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 14
6 14
7 14
8 10
9 10
10 10
11 10
12 18
13 18
14 18
15 20
16 20
17 20
18 20
19 20
20 20
21 21
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
imul %edi,%edx
imul %edx,%ecx
imul %ecx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a3 - a3 * a4;
    }
    if (a4 < a4)
    {
        v8 = a1 - a1 - a4 + a5;
    }
    else
    {
        v8 = a3 * a1 * a4 * a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 15
6 15
7 15
8 17
9 18
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a1 * (a1 - a4);
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        if (v6 < a3)
        {
            v8 += (a4 - a5) - a2;
        }
        else
        {
            v8 += a1 - a5 - a3;
        }
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a5)
    {
        v10 += a5 + a3 + a5;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 26
2 26
3 26
4 26
5 27
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %edx,%r8d
add %r8d,%eax
mov %ecx,%r9d
imul %esi,%r9d
imul %esi,%r9d
imul %edi,%r9d
add %r9d,%eax
imul %edx,%edi
imul %edi,%ecx
imul %ecx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a5 + a3;
    if (a3 < a3)
    {
        v7 = ((a4 * a2) + a4) * a1;
    }
    else
    {
        v7 = a1 * (a4 * a2 * a2);
    }
    v8 = a3 * a1 * a4 * a2;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 14
2 14
3 14
4 14
5 4
6 14
7 11
8 11
9 11
10 11
11 14
12 13
13 13
14 13
15 14
16 15
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (a3 < a1)
        {
            v6 += a1 - a1;
        }
        else
        {
            v6 += a5 * a4 - a1;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += a1 + (a4 - a1);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 21
5 22
<<<sep_out_sample>>>
mov %ecx,%eax
sub %edx,%eax
lea (%rax,%rdi,2),%edi
lea (%rdx,%rsi,2),%edx
lea 0x1(%rdx,%rdi,1),%edx
add %edx,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a2 * a4 - a4;
    }
    v8 = a4 + (a1 - (a1 + a3));
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        v9 += (a2 + a3) * a3;
    }
    v11 = a2 - (a3 - a4 - a1);
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 16
4 16
5 16
6 16
7 16
8 16
9 17
<<<sep_out_sample>>>
mov %esi,%r9d
imul %ecx,%r9d
cmp $0x1,%r8d
jle 16 <func1+0x16>
mov %r8d,%r10d
imul %esi,%r10d
jmp 25 <func1+0x25>
mov %r8d,%r10d
imul %ecx,%r10d
add $0x1,%r10d
imul %edx,%r10d
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %r9d,%eax
add %r10d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (v6 < a3)
        {
            v6 += a1 * (a4 * a3);
        }
        else
        {
            v6 += (a4 + a1) + a2;
        }
    }
    if (a5 < a5)
    {
        v8 = (a1 + a1) + a5 + a1;
    }
    else
    {
        v8 = a2 * a4;
    }
    if (v7 < a5)
    {
        v9 = a5 * a2;
    }
    else
    {
        v9 = a3 + a3 * (a5 * a4);
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a2)
    {
        v10 += a4 + (a1 * a3);
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 24
4 24
5 26
6 26
7 26
8 30
9 30
10 30
11 30
12 37
13 37
14 37
15 37
16 37
17 37
18 38
<<<sep_out_sample>>>
cmp %r8d,%esi
jge f <func1+0xf>
mov %ecx,%eax
sub %edi,%eax
lea (%rax,%rsi,2),%r10d
jmp 16 <func1+0x16>
lea (%r8,%rdx,2),%r10d
add %edx,%r10d
mov %esi,%eax
imul %ecx,%eax
lea (%rax,%rdi,2),%r9d
test %ecx,%ecx
jle 2d <func1+0x2d>
lea (%rsi,%rdx,1),%r11d
imul %ecx,%r11d
jmp 35 <func1+0x35>
lea (%rdx,%rdx,1),%r11d
imul %esi,%r11d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea (%rcx,%r10,1),%eax
add %r9d,%eax
add %r11d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a2 < a5)
    {
        v6 = a2 + ((a4 - a1) + a2);
    }
    else
    {
        v6 = (a5 + a3) + a3 + a3;
    }
    v7 = a1 + a2 * a4 + a1;
    if (v8 < a4)
    {
        v8 = (a2 + a3) * a4;
    }
    else
    {
        v8 = (a2 * a3) + (a3 * a2);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 12
10 12
11 12
12 13
13 13
14 15
15 15
16 15
17 19
18 19
19 21
20 21
21 21
22 21
23 21
24 21
25 21
26 22
<<<sep_out_sample>>>
lea (%rdx,%rsi,1),%r9d
imul %ecx,%r9d
add %edx,%r9d
cmp %r9d,%ecx
jle 1b <func1+0x1b>
lea -0x1(%rdx,%rcx,1),%r10d
imul %edi,%r10d
jmp 26 <func1+0x26>
lea (%rdi,%rdi,1),%r10d
imul %esi,%r10d
add %edi,%r10d
add %edi,%edx
add %edx,%esi
add %r8d,%esi
add %esi,%ecx
add %ecx,%r9d
lea (%r9,%r10,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = ((a3 + a2) * a4) + a3;
    if (v6 < a4)
    {
        v7 = ((a4 + a3) * a1) - a1;
    }
    else
    {
        v7 = a1 + (a1 + a1) * a2;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 5
5 5
6 7
7 7
8 7
9 11
10 11
11 11
12 13
13 13
14 13
15 13
16 13
17 13
18 14
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
imul %edx,%r8d
add %r8d,%ecx
sub %edi,%ecx
lea 0x1(%rax,%rcx,1),%eax
sub %esi,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a4 + a5 * a3 - a1;
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += a3 + a1;
    }
    if (a4 < a4)
    {
        v9 = a3 - a1;
    }
    else
    {
        v9 = (a3 - a1) - (a2 - a1);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 18
5 4
6 4
7 4
8 18
9 16
10 18
11 19
<<<sep_out_sample>>>
mov %esi,%r10d
sub %edi,%r10d
imul %edi,%r10d
mov %edx,%r9d
sub %r8d,%r9d
cmp %r8d,%edi
jl 23 <func1+0x23>
mov %r8d,%r9d
imul %ecx,%r9d
imul %edi,%r9d
add %esi,%r9d
add %ecx,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a3 * a2 + a3;
    }
    v8 = a1 * (a2 - a1);
    if (a1 < a5)
    {
        v9 = a3 - a5;
    }
    else
    {
        v9 = (a1 * (a5 * a4)) + a2;
    }
    v10 = a2 * (a5 - a5) + a4;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 9
4 12
5 12
6 10
7 10
8 16
9 16
10 16
11 16
12 19
13 19
14 19
15 19
16 19
17 19
18 19
19 20
<<<sep_out_sample>>>
cmp $0x1,%r8d
jle c <func1+0xc>
mov %edi,%eax
sub %edx,%eax
jmp 12 <func1+0x12>
lea (%rdi,%rsi,1),%eax
lea (%rax,%rdx,2),%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a5 * a5 * a2;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        if (a1 < a4)
        {
            v8 += a4 * a2 + a4;
        }
        else
        {
            v8 += (a1 * a1) * a2;
        }
    }
    if (v9 < a5)
    {
        v10 = a1 - a3;
    }
    else
    {
        v10 = (a3 + (a1 + a2)) + a3;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 23
4 23
5 23
6 27
7 27
8 29
9 29
10 29
11 29
12 29
13 30
<<<sep_out_sample>>>
lea (%rdi,%r8,1),%eax
add %ecx,%eax
cmp %edi,%esi
jle 12 <func1+0x12>
mov %edi,%eax
sub %edx,%eax
lea (%rax,%r8,2),%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a4 - a2 * a1;
    }
    if (a1 < a2)
    {
        v8 = a5 + (a1 - a3 + a5);
    }
    else
    {
        v8 = (a1 + a5) + a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 15
2 15
3 9
4 9
5 11
6 11
7 11
8 17
9 17
10 17
11 17
12 17
13 18
<<<sep_out_sample>>>
cmp %ecx,%r8d
jge 15 <func1+0x15>
mov %esi,%r9d
imul %esi,%r9d
imul %esi,%r9d
sub %ecx,%r9d
jmp 1f <func1+0x1f>
lea (%rdx,%rsi,1),%r9d
sub %r8d,%r9d
add %ecx,%r9d
mov $0x0,%r10d
cmp %edi,%r9d
jge 34 <func1+0x34>
mov %ecx,%r10d
sub %r8d,%r10d
imul %esi,%r10d
cmp %edi,%edx
jle 48 <func1+0x48>
mov %ecx,%r11d
imul %edi,%r11d
sub %r8d,%r11d
imul %ecx,%r11d
jmp 4f <func1+0x4f>
mov %esi,%r11d
imul %ecx,%r11d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
add %r9d,%r10d
lea (%r10,%r11,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a5 < a4)
    {
        v6 = (a2 * (a2 * a2)) - a4;
    }
    else
    {
        v6 = a4 + ((a3 + a2) - a5);
    }
    if (v6 < a1)
    {
        v7 = a2 * a4 - (a5 * a2);
    }
    else
    {
        v7 = a3 - a3;
    }
    if (a1 < a3)
    {
        v8 = (a4 * a1 - a5) * a4;
    }
    else
    {
        v8 = a2 * a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 18
12 12
13 12
14 14
15 14
16 14
17 20
18 20
19 22
20 22
21 22
22 22
23 22
24 26
25 26
26 28
27 28
28 28
29 28
30 28
31 28
32 28
33 29
<<<sep_out_sample>>>
mov %ecx,%r9d
imul %edx,%r9d
cmp %ecx,%edx
cmovl %edi,%r9d
cmp %esi,%edx
jge 1d <func1+0x1d>
mov %esi,%eax
imul %ecx,%eax
imul %esi,%eax
add %ecx,%eax
jmp 2c <func1+0x2c>
mov %r8d,%eax
sub %edx,%eax
mov %ecx,%r10d
imul %edx,%r10d
sub %r10d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a3 < a4)
    {
        v6 = a1 - (a5 - a5);
    }
    else
    {
        v6 = a2 + a4 * a3 - a2;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a2 * a1;
    }
    if (a3 < a2)
    {
        v9 = a4 + a2 * a4 * a2;
    }
    else
    {
        v9 = a5 - a3 - a4 * a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 17
6 17
7 19
8 19
9 19
10 19
11 19
12 23
13 23
14 23
15 23
16 23
17 25
18 25
19 25
20 25
21 25
22 25
23 26
<<<sep_out_sample>>>
add %edi,%edx
add %edx,%esi
add %r8d,%esi
add %esi,%ecx
add %r8d,%edi
lea 0x1(%rcx,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a5 + a1;
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += (a4 + a5) - a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 4
6 10
7 11
<<<sep_out_sample>>>
cmp $0x1,%edx
jle c <func1+0xc>
mov %edx,%eax
imul %esi,%eax
jmp 12 <func1+0x12>
mov %edx,%eax
neg %eax
sub %esi,%eax
add %edi,%edx
add %edx,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a2 - a2 + a1;
    }
    if (v7 < a3)
    {
        v8 = a3 * ((a3 - a3) + a2);
    }
    else
    {
        v8 = (a2 - a2) - a3 - a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 15
7 15
8 15
9 17
10 17
11 17
12 17
13 17
14 18
<<<sep_out_sample>>>
lea (%rdx,%r8,1),%r9d
cmp %edx,%ecx
jle 17 <func1+0x17>
lea (%rdi,%rdx,1),%eax
mov %esi,%r10d
imul %ecx,%r10d
sub %r10d,%eax
jmp 1d <func1+0x1d>
mov %esi,%eax
imul %r8d,%eax
mov %edi,%r10d
imul %edi,%r10d
add %r8d,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = (a4 + a3) - a4 + a5;
    if (a3 < a4)
    {
        v7 = (a1 + a3) - a2 * a4;
    }
    else
    {
        v7 = a2 * a5;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += a3 - a2 * a1;
    }
    v10 = (a1 * a1) + a5;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 5
3 5
4 7
5 7
6 7
7 7
8 7
9 11
10 11
11 18
12 18
13 18
14 19
15 19
16 19
17 19
18 19
19 19
20 19
21 20
<<<sep_out_sample>>>
lea 0x2(%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
sub %esi,%edi
sub %esi,%edi
lea 0x1(%r8,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (a2 < a5)
        {
            v6 += (a2 - a5) - a2;
        }
        else
        {
            v6 += a1 - a2;
        }
    }
    v8 = (a1 - a2 - a2) - a4;
    v9 = 0;
    for (v10 = 0; v10++; v10<a1)
    {
        v9 += a5 + a3 * a4;
    }
    v11 = 0;
    for (v12 = 0; v12++; v12<a2)
    {
        v11 += a1 * a4;
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 27
2 27
3 27
4 16
5 16
6 27
7 28
<<<sep_out_sample>>>
cmp %esi,%edx
jge d <func1+0xd>
lea (%rcx,%rcx,1),%eax
sub %esi,%eax
sub %edi,%eax
jmp 18 <func1+0x18>
mov %ecx,%eax
imul %ecx,%eax
imul %r8d,%eax
add %edi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (a4 < a1)
        {
            v6 += (a5 * a3) + a2;
        }
        else
        {
            v6 += a5 * a3;
        }
    }
    if (a3 < a2)
    {
        v8 = a4 + a4 - a2 - a1;
    }
    else
    {
        v8 = a4 * a4 * a5 + a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 18
7 22
8 22
9 22
10 22
11 24
12 24
13 24
14 24
15 24
16 25
<<<sep_out_sample>>>
cmp %ecx,%edx
jge d <func1+0xd>
mov %esi,%eax
imul %ecx,%eax
add %edx,%eax
jmp 1b <func1+0x1b>
mov %esi,%r9d
sub %edi,%r9d
mov %edi,%eax
imul %esi,%eax
add %r9d,%eax
add %edi,%edx
add %edx,%esi
add %r8d,%esi
add %esi,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a3 < a4)
    {
        v6 = a3 + a2 * a4;
    }
    else
    {
        v6 = a2 - a1 + a1 * a2;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += (a2 * a1) + a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 10
11 10
12 17
13 17
14 17
15 17
16 17
17 18
<<<sep_out_sample>>>
test %r8d,%r8d
jle d <func1+0xd>
mov %ecx,%eax
neg %eax
sub %edx,%eax
jmp 12 <func1+0x12>
mov %edx,%eax
imul %ecx,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (v6 < a1)
        {
            v6 += a2 * (a1 - a4);
        }
        else
        {
            v6 += (a4 - a2) * a1;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += a2 - (a4 * a5);
    }
    if (v6 < a5)
    {
        v10 = (a5 - a5 - a4) - a3;
    }
    else
    {
        v10 = a3 * a4;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 23
4 23
5 23
6 23
7 27
8 27
9 29
10 29
11 29
12 29
13 29
14 30
<<<sep_out_sample>>>
cmp %esi,%ecx
jge d <func1+0xd>
lea (%rcx,%rsi,1),%r9d
add %edx,%r9d
jmp 1a <func1+0x1a>
mov %ecx,%r9d
imul %edi,%r9d
add %r8d,%r9d
add %ecx,%r9d
mov %esi,%eax
sub %edi,%eax
mov %esi,%r10d
imul %r8d,%r10d
cmp %edx,%esi
cmovg %r10d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a4 < a2)
    {
        v6 = a4 + a2 + a3;
    }
    else
    {
        v6 = a4 * a1 + a5 + a4;
    }
    if (a3 < a2)
    {
        v7 = a2 * a5;
    }
    else
    {
        v7 = a2 - a1;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 10
10 18
11 18
12 14
13 14
14 14
15 14
16 20
17 20
18 20
19 20
20 20
21 20
22 21
<<<sep_out_sample>>>
test %r8d,%r8d
jle 12 <func1+0x12>
mov %edi,%eax
sub %edx,%eax
imul %r8d,%eax
imul %edi,%eax
jmp 1e <func1+0x1e>
mov %edi,%eax
imul %r8d,%eax
imul %edi,%eax
imul %esi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (v6 < a5)
    {
        v6 = (a1 - a3) * a5 * a1;
    }
    else
    {
        v6 = a1 * a5 * a1 * a2;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += a4 - a1 - a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 17
13 17
14 17
15 17
16 17
17 18
<<<sep_out_sample>>>
lea -0x1(%rsi),%r9d
imul %edi,%r9d
mov %edi,%eax
sub %ecx,%eax
lea (%rcx,%rdx,1),%r10d
add %edx,%eax
cmp %edx,%r9d
cmovl %r10d,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = a2 * a1 - a1;
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        if (a4 < a3)
        {
            v7 += a2 + a2;
        }
        else
        {
            v7 += a2 - a4;
        }
    }
    if (v6 < a3)
    {
        v9 = a4 + a3;
    }
    else
    {
        v9 = a3 - (a4 - a1);
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a4)
    {
        v10 += a2 - a4 - a5;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 23
4 23
5 19
6 19
7 19
8 19
9 30
10 30
11 30
12 30
13 30
14 30
15 31
<<<sep_out_sample>>>
push %rbx
mov %ecx,%eax
sub %r8d,%eax
mov %r8d,%ebx
sub %edi,%ebx
test %r8d,%r8d
cmovg %eax,%ebx
mov %edi,%r11d
sub %esi,%r11d
imul %edi,%r11d
sub %r8d,%r11d
mov %edx,%r9d
sub %edi,%r9d
mov %r8d,%eax
imul %esi,%eax
cmp %esi,%ecx
cmovg %eax,%r9d
cmp %ecx,%r9d
jge 43 <func1+0x43>
lea (%rcx,%rsi,1),%eax
mov %edi,%r10d
sub %eax,%r10d
sub %edx,%r10d
jmp 4e <func1+0x4e>
lea -0x1(%rdx),%r10d
imul %r8d,%r10d
add %ecx,%r10d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %ebx,%eax
add %r11d,%eax
add %eax,%r9d
lea (%r9,%r10,1),%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (v6 < a5)
    {
        v6 = a4 - a5;
    }
    else
    {
        v6 = a5 + (a1 - a1) - a1;
    }
    v7 = (a1 - a2) * a1 - a5;
    if (a2 < a4)
    {
        v8 = a5 * a2;
    }
    else
    {
        v8 = a3 - a1;
    }
    if (v8 < a4)
    {
        v9 = a1 - (a4 + a2) - a3;
    }
    else
    {
        v9 = a4 - (a5 - a3 * a5);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 6
3 6
4 6
5 6
6 6
7 6
8 12
9 12
10 12
11 12
12 19
13 19
14 15
15 15
16 15
17 15
18 21
19 21
20 23
21 23
22 23
23 23
24 23
25 27
26 27
27 27
28 29
29 29
30 29
31 29
32 29
33 29
34 29
35 29
36 30
37 30
<<<sep_out_sample>>>
lea (%rsi,%r8,1),%eax
mov %edi,%r9d
sub %edx,%r9d
lea (%rcx,%rdx,1),%r10d
lea (%r9,%rax,1),%r9d
mov %ecx,%r11d
sub %edx,%r11d
add %edx,%r10d
cmp %ecx,%r9d
cmovl %r11d,%r10d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
add %r10d,%eax
imul %r8d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = (a2 + a5 - a3) + a1;
    if (v6 < a4)
    {
        v7 = a4 - a3;
    }
    else
    {
        v7 = a4 + a3 + a3;
    }
    v8 = a4 * a5;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 11
5 5
6 7
7 7
8 7
9 7
10 7
11 14
12 14
13 14
14 14
15 14
16 14
17 13
18 14
19 15
<<<sep_out_sample>>>
lea (%rdi,%r8,2),%eax
lea (%rax,%rsi,1),%eax
lea 0x2(%rcx,%rax,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (a4 < a3)
        {
            v6 += a4 - a1 - a1;
        }
        else
        {
            v6 += a2 + a4;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += (a4 * a4) - a3;
    }
    v10 = a5 + (a5 - a3) - a5;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 22
4 23
<<<sep_out_sample>>>
mov %esi,%r10d
sub %edi,%r10d
cmp %r8d,%edx
jge 16 <func1+0x16>
mov %r8d,%r9d
sub %esi,%r9d
add %ecx,%r9d
jmp 1d <func1+0x1d>
mov %r8d,%r9d
imul %edx,%r9d
lea (%rcx,%rsi,1),%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a1 * a3 * a1;
    }
    v8 = a2 - a1;
    if (a3 < a5)
    {
        v9 = a4 - (a2 - a5);
    }
    else
    {
        v9 = a5 * a3;
    }
    if (a2 < a2)
    {
        v10 = a1 - a2 + a5 - a5;
    }
    else
    {
        v10 = a4 + a2;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 10
4 10
5 12
6 12
7 12
8 12
9 16
10 16
11 24
12 26
13 26
14 26
15 26
16 26
17 26
18 26
19 27
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
lea 0x1(%rcx,%r8,1),%r8d
lea (%rsi,%rcx,2),%eax
lea (%rax,%rdx,1),%eax
lea (%r8,%rax,1),%edx
imul %edi,%ecx
imul %ecx,%edi
sub %esi,%edi
lea (%rdx,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a2 * a3;
    }
    v8 = a2 + a4 + a3 + a4;
    v9 = (a4 * a1) * a1 - a2;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 11
5 9
6 9
7 11
8 10
9 10
10 10
11 11
12 12
<<<sep_out_sample>>>
cmp %edi,%ecx
jge 9 <func1+0x9>
lea (%rsi,%rsi,1),%eax
jmp 12 <func1+0x12>
mov %esi,%eax
imul %edx,%eax
sub %ecx,%eax
sub %edi,%eax
cmp %ecx,%eax
jge 25 <func1+0x25>
mov %edi,%r9d
imul %edx,%r9d
sub %r8d,%r9d
add %ecx,%r9d
jmp 30 <func1+0x30>
lea (%rdi,%r8,1),%r9d
add %ecx,%r9d
imul %ecx,%r9d
add %edx,%edi
add %esi,%edi
add %r8d,%edi
add %ecx,%edi
add %edi,%eax
add %r9d,%eax
imul %esi,%r8d
add %eax,%r8d
imul %ecx,%esi
add %esi,%edx
sub %ecx,%edx
lea (%r8,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a4 < a1)
    {
        v6 = a2 + a2;
    }
    else
    {
        v6 = a2 * a3 - a4 - a1;
    }
    if (v6 < a4)
    {
        v7 = a4 + (a1 * a3 - a5);
    }
    else
    {
        v7 = a4 * (a1 + a5 + a4);
    }
    v8 = a2 * a5;
    v9 = ((a4 * a2) + a3) - a4;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 10
6 10
7 10
8 10
9 12
10 12
11 14
12 14
13 14
14 14
15 14
16 18
17 18
18 18
19 22
20 22
21 22
22 22
23 22
24 22
25 20
26 22
27 21
28 21
29 21
30 22
31 23
<<<sep_out_sample>>>
lea (%rdx,%rdx,1),%r10d
lea (%rsi,%rsi,1),%eax
sub %ecx,%eax
sub %edi,%eax
mov %r8d,%r9d
sub %edi,%r9d
cmp %ecx,%esi
jge 21 <func1+0x21>
mov %esi,%r9d
sub %edi,%r9d
add %esi,%r9d
sub %edx,%r9d
add %r9d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %r10d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a1 - a3;
    }
    v8 = a3 + a3;
    v9 = (a2 + a2) - a4 - a1;
    if (a2 < a4)
    {
        v10 = (a2 - a1 + a2) - a3;
    }
    else
    {
        v10 = a5 - a1;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 10
3 10
4 10
5 17
6 17
7 11
8 11
9 13
10 13
11 13
12 13
13 19
14 19
15 19
16 19
17 19
18 19
19 19
20 20
<<<sep_out_sample>>>
mov %esi,%eax
sub %r8d,%eax
lea (%rsi,%rcx,1),%r9d
cmp %edx,%ecx
cmovge %r9d,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a4 * a1 * a4;
    }
    if (a4 < a3)
    {
        v8 = a2 - a5;
    }
    else
    {
        v8 = a4 + (a2 + a5) - a5;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        v9 += a1 * a5;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 11
5 11
6 22
7 22
8 22
9 22
10 22
11 23
<<<sep_out_sample>>>
mov %r8d,%r9d
sub %ecx,%r9d
test %esi,%esi
jg 12 <func1+0x12>
lea (%rcx,%r8,2),%r9d
imul %r8d,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
add %ecx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (v6 < a2)
    {
        v6 = (a2 - (a4 - a5)) - a2;
    }
    else
    {
        v6 = (a4 + a5 + a5) * a5;
    }
    v7 = (a4 + a5) - a5 + a2;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 4
4 4
5 10
6 10
7 13
8 13
9 13
10 13
11 13
12 12
13 13
14 14
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %edx,%r8d
lea 0x1(%rcx,%r8,1),%eax
sub %edi,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (v7 < a4)
        {
            v6 += a1 * (a4 - a5);
        }
        else
        {
            v6 += a1 * a4;
        }
    }
    v8 = a2 - a1;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 16
6 17
7 18
<<<sep_out_sample>>>
cmp %edx,%esi
jge d <func1+0xd>
lea (%rdi,%r8,2),%eax
add %r8d,%eax
jmp 13 <func1+0x13>
mov %r8d,%eax
imul %edx,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (a2 < a1)
        {
            v6 += a5 + a4 - a4;
        }
        else
        {
            v6 += a1 - a3;
        }
    }
    if (a2 < a3)
    {
        v8 = a5 + (a5 + a1) + a5;
    }
    else
    {
        v8 = a5 * a3;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        v9 += (a5 + a4) + a5;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 22
7 22
8 29
9 29
10 29
11 29
12 29
13 30
<<<sep_out_sample>>>
mov %edi,%r9d
neg %r9d
sub %ecx,%r9d
lea (%rdx,%rsi,1),%eax
test %esi,%esi
jle 1a <func1+0x1a>
mov %ecx,%eax
imul %ecx,%eax
imul %ecx,%eax
add %esi,%eax
add %edx,%edi
add %edi,%esi
add %r8d,%esi
add %esi,%ecx
add %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a1 < a1)
    {
        v6 = a1 * a1 * a3 - a1;
    }
    else
    {
        v6 = a1 - a1 - a1 - a4;
    }
    if (v7 < a2)
    {
        v7 = a4 * a4 * a4 + a2;
    }
    else
    {
        v7 = a3 + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 18
5 12
6 12
7 14
8 14
9 14
10 14
11 20
12 20
13 20
14 20
15 20
16 20
17 21
<<<sep_out_sample>>>
lea 0x1(%rsi),%eax
imul %esi,%eax
imul %r8d,%eax
mov %ecx,%r9d
imul %esi,%r9d
test %edx,%edx
jle 23 <func1+0x23>
lea 0x1(%rdi),%r10d
imul %ecx,%r10d
imul %esi,%r10d
jmp 30 <func1+0x30>
mov %edx,%r10d
imul %esi,%r10d
add %ecx,%r10d
add %r8d,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (v7 < a3)
        {
            v6 += a5 - a5 * a3;
        }
        else
        {
            v6 += a4 + a1;
        }
    }
    if (a2 < a2)
    {
        v8 = (a1 + a3) - a2 - a3;
    }
    else
    {
        v8 = (a2 + a2 * a2) * a5;
    }
    v9 = a4 * a2;
    if (v6 < a3)
    {
        v10 = a2 * (a4 + a1 * a4);
    }
    else
    {
        v10 = (a4 + (a3 * a2)) + a5;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 22
4 24
5 24
6 25
7 25
8 27
9 27
10 27
11 27
12 31
13 31
14 31
15 31
16 33
17 33
18 33
19 33
20 33
21 33
22 33
23 34
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %r8d,%edx
add %ecx,%edx
imul %r8d,%ecx
sub %ecx,%esi
add %esi,%edi
lea 0x1(%rdx,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a2 - (a4 * a5) + a1;
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        if (a5 < a3)
        {
            v7 += a4 - a4 + a4;
        }
        else
        {
            v7 += a3 * (a2 - a2);
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 4
6 4
7 4
8 17
9 18
<<<sep_out_sample>>>
mov %ecx,%eax
imul %r8d,%eax
mov %ecx,%r9d
test %edx,%edx
jg 20 <func1+0x20>
mov %esi,%r9d
imul %r8d,%r9d
mov %ecx,%r10d
sub %r9d,%r10d
mov %r10d,%r9d
sub %esi,%r9d
lea 0x1(%r9,%rdi,1),%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a1 + (a3 + a3);
    }
    v8 = a4 * a5;
    v9 = 0;
    for (v10 = 0; v10++; v10<a1)
    {
        if (a5 < a3)
        {
            v9 += a4 * a4;
        }
        else
        {
            v9 += a1 * a5 + a2;
        }
    }
    if (v11 < a3)
    {
        v11 = (a4 - a5) + a5;
    }
    else
    {
        v11 = a4 - a2 * a5 - a2;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 24
4 22
5 22
6 28
7 28
8 28
9 28
10 28
11 28
12 30
13 30
14 30
15 30
16 30
17 30
18 31
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %r8d,%esi
lea (%r8,%rcx,2),%eax
lea 0x1(%rsi,%rax,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a4 - (a2 - a2) + a5;
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        if (a1 < a2)
        {
            v7 += (a1 + a5) * a1;
        }
        else
        {
            v7 += a1 - (a3 * a2);
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 4
5 17
6 18
<<<sep_out_sample>>>
lea 0x1(%r8),%eax
imul %ecx,%eax
lea (%rax,%rsi,1),%r9d
cmp %r9d,%r8d
jle 18 <func1+0x18>
sub %ecx,%eax
lea (%rax,%r8,2),%eax
jmp 20 <func1+0x20>
mov %edi,%eax
imul %edx,%eax
lea (%rax,%rsi,2),%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a4 + (a5 * a4) + a2;
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        if (v7 < a1)
        {
            v7 += a5 * a5 - a1;
        }
        else
        {
            v7 += a3 + a1;
        }
    }
    if (v6 < a5)
    {
        v9 = a5 + a5 + (a5 * a4);
    }
    else
    {
        v9 = a2 + a1 * a3 + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 17
5 17
6 19
7 19
8 19
9 23
10 23
11 23
12 25
13 25
14 25
15 25
16 25
17 25
18 26
<<<sep_out_sample>>>
add %edi,%edx
add %edx,%esi
add %r8d,%esi
add %ecx,%esi
mov %edi,%eax
sub %ecx,%eax
imul %eax,%r8d
imul %ecx,%r8d
lea 0x1(%rsi,%r8,1),%eax
add %edx,%ecx
add %ecx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a4 * ((a1 - a4) * a5);
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        if (v8 < a1)
        {
            v7 += a4 + a1;
        }
        else
        {
            v7 += (a4 * a2) * a2;
        }
    }
    v9 = ((a1 + a3) + a4) + a1;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 17
2 18
3 18
4 18
5 4
6 4
7 4
8 4
9 18
10 17
11 17
12 18
13 19
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
lea 0x1(%rcx,%rax,1),%ecx
imul %edx,%esi
add %esi,%edi
sub %r8d,%edi
lea (%rcx,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += (a3 * a5) * a5;
    }
    v8 = (a2 * a3) + a1 - a5;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 9
6 9
7 9
8 10
9 11
<<<sep_out_sample>>>
mov %ecx,%eax
imul %edx,%eax
imul %esi,%eax
lea (%r8,%rcx,1),%r9d
test %ecx,%ecx
jle 18 <func1+0x18>
mov %edi,%r10d
sub %edx,%r10d
jmp 26 <func1+0x26>
mov %ecx,%r10d
imul %r8d,%r10d
sub %edi,%r10d
imul %esi,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (v6 < a4)
        {
            v6 += a2 + a3 * a3;
        }
        else
        {
            v6 += (a2 + a2) * a2;
        }
    }
    v8 = a4 * a3 * a2;
    v9 = a5 + a4;
    if (v6 < a4)
    {
        v10 = a1 - a3;
    }
    else
    {
        v10 = ((a4 * a5) - a1) * a2;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 16
4 17
5 18
6 18
7 20
8 20
9 20
10 24
11 24
12 24
13 24
14 26
15 26
16 26
17 26
18 26
19 26
20 26
21 27
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (a3 < a1)
        {
            v6 += (a3 - a1) * a1;
        }
        else
        {
            v6 += (a2 * a1) * a2;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += a4 * (a5 - a1);
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a3)
    {
        if (v6 < a1)
        {
            v10 += a2 + a2;
        }
        else
        {
            v10 += a3 * a2;
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 33
2 33
3 33
4 33
5 34
<<<sep_out_sample>>>
mov %r8d,%eax
cmp %edx,%edi
jge d <func1+0xd>
lea 0x2(%rdi),%eax
imul %edx,%eax
mov %esi,%r9d
sub %edi,%r9d
add %edx,%r9d
cmp %edx,%edi
jle 27 <func1+0x27>
mov %esi,%r9d
imul %edi,%r9d
add %ecx,%r9d
add %edx,%r9d
add %edx,%edi
add %esi,%edi
add %r8d,%edi
add %ecx,%edi
add %edi,%eax
add %r9d,%eax
add $0x2,%ecx
imul %ecx,%esi
add %esi,%eax
imul %edx,%edx
mov %r8d,%ecx
sub %edx,%ecx
imul %ecx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a1 < a3)
    {
        v6 = a1 * a3 + a3 + a3;
    }
    else
    {
        v6 = a1 - a1 + a5;
    }
    if (a3 < a1)
    {
        v7 = a2 * a1 + a4 + a3;
    }
    else
    {
        v7 = (a2 - a1) + a3;
    }
    v8 = (a4 * a2) + a2 + a2;
    v9 = a5 * (a5 - a3 * a3);
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 18
7 18
8 18
9 12
10 12
11 14
12 14
13 14
14 14
15 22
16 22
17 22
18 22
19 22
20 22
21 20
22 20
23 22
24 21
25 21
26 21
27 21
28 22
29 23
<<<sep_out_sample>>>
cmp %esi,%edx
jle 10 <func1+0x10>
mov %esi,%eax
imul %edx,%eax
imul %esi,%eax
sub %ecx,%eax
jmp 15 <func1+0x15>
mov %edx,%eax
imul %edx,%eax
add %edi,%edx
add %edx,%esi
add %r8d,%esi
lea (%rax,%rcx,2),%eax
lea 0x1(%rax,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (a5 < a1)
        {
            v6 += a3 - a5;
        }
        else
        {
            v6 += (a5 * a2) * a1;
        }
    }
    if (a2 < a3)
    {
        v8 = ((a2 * a3) * a2) - a4;
    }
    else
    {
        v8 = a3 * a3;
    }
    v9 = a2 - a2 + a4;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 18
7 18
8 22
9 22
10 25
11 25
12 25
13 25
14 25
15 26
<<<sep_out_sample>>>
cmp %edx,%r8d
jle e <func1+0xe>
mov %ecx,%eax
neg %eax
imul %ecx,%eax
jmp 18 <func1+0x18>
mov %edi,%eax
imul %r8d,%eax
add %esi,%eax
sub %ecx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (v7 < a4)
        {
            v6 += (a1 + a1) - a1;
        }
        else
        {
            v6 += a1 * a5 * a5;
        }
    }
    if (a3 < a5)
    {
        v8 = a4 - a4 * a4 - a4;
    }
    else
    {
        v8 = a2 + (a1 * a5) - a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 18
7 22
8 22
9 22
10 22
11 24
12 24
13 24
14 24
15 24
16 25
<<<sep_out_sample>>>
cmp %esi,%r8d
jge f <func1+0xf>
mov %r8d,%eax
imul %esi,%eax
sub %edx,%eax
jmp 19 <func1+0x19>
mov %ecx,%eax
sub %edx,%eax
sub %esi,%eax
imul %r8d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a5 < a2)
    {
        v6 = a5 * a2 - a3;
    }
    else
    {
        v6 = a5 * (a4 - a3 - a2);
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += a1 * a2 + a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 10
11 17
12 17
13 17
14 17
15 17
16 18
<<<sep_out_sample>>>
test %edi,%edi
jle 14 <func1+0x14>
mov %esi,%eax
imul %ecx,%eax
mov %r8d,%r9d
sub %eax,%r9d
mov %r9d,%eax
jmp 1b <func1+0x1b>
mov %ecx,%eax
imul %esi,%eax
add %edx,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += (a4 + a1) + a3;
    }
    if (v6 < a1)
    {
        v8 = a5 - (a2 * a4);
    }
    else
    {
        v8 = a3 + a4 * a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 11
8 11
9 15
10 15
11 15
12 17
13 17
14 17
15 17
16 17
17 18
<<<sep_out_sample>>>
mov %esi,%eax
neg %eax
sub %r8d,%eax
cmp %r8d,%edi
jge 1a <func1+0x1a>
lea (%rsi,%rdx,1),%eax
mov %edi,%r9d
sub %eax,%r9d
mov %r9d,%eax
sub %edx,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a1 < a5)
    {
        v6 = a1 - (a2 + a3) - a3;
    }
    else
    {
        v6 = a1 - a5 - a2 - a1;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += a3 + (a4 + a2);
    }
    v9 = a2 - a2;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 4
5 4
6 6
7 6
8 6
9 6
10 6
11 18
12 18
13 18
14 18
15 18
16 19
<<<sep_out_sample>>>
cmp %ecx,%r8d
jge 13 <func1+0x13>
mov %edi,%r9d
sub %esi,%r9d
add %r8d,%r9d
add %ecx,%r9d
jmp 1d <func1+0x1d>
mov %esi,%r9d
neg %r9d
imul %edx,%r9d
cmp %esi,%r8d
jge 2e <func1+0x2e>
mov %ecx,%eax
imul %edx,%eax
imul %edx,%eax
add %edi,%eax
jmp 38 <func1+0x38>
mov %r8d,%eax
imul %edi,%eax
sub %ecx,%eax
sub %edx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a5 < a4)
    {
        v6 = (a1 - a2) + a5 + a4;
    }
    else
    {
        v6 = a3 - a3 * a2 - a3;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        if (v7 < a5)
        {
            v7 += a2 + a3;
        }
        else
        {
            v7 += a5 - a3 - a1;
        }
    }
    if (a5 < a2)
    {
        v9 = ((a4 * a3) * a3) + a1;
    }
    else
    {
        v9 = (a5 * a1) - a4 - a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 24
12 24
13 26
14 26
15 26
16 26
17 26
18 30
19 30
20 30
21 30
22 32
23 32
24 32
25 32
26 32
27 32
28 33
<<<sep_out_sample>>>
mov %esi,%eax
imul %edx,%eax
mov %ecx,%r9d
sub %eax,%r9d
mov %r9d,%eax
imul %edx,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a4 + a3 * a3;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        if (v7 < a1)
        {
            v8 += a4 - a5 * a1;
        }
        else
        {
            v8 += (a1 - a4) - a1;
        }
    }
    v10 = (a4 - (a2 * a3)) * a3;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 21
5 21
6 21
7 22
8 22
9 22
10 22
11 22
12 23
<<<sep_out_sample>>>
mov %edi,%eax
imul %edx,%eax
mov %r8d,%ecx
sub %edx,%ecx
lea 0x1(%rcx,%rax,1),%eax
add %eax,%edi
add %edx,%edi
add %edi,%esi
lea 0x1(%rcx,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = a1 - (a3 + a1 + a4);
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        if (a3 < a5)
        {
            v7 += a2 * a1;
        }
        else
        {
            v7 += a3 - a4 * a4;
        }
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        if (v10 < a3)
        {
            v9 += a2 + a1;
        }
        else
        {
            v9 += a5 - a1;
        }
    }
    v11 = (a1 * a3) + a5 - a3;
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 29
2 29
3 29
4 29
5 30
6 30
7 30
8 30
9 30
10 31
<<<sep_out_sample>>>
lea (%rdi,%rcx,1),%eax
mov %ecx,%r9d
imul %esi,%r9d
cmp %ecx,%edx
cmovl %r9d,%eax
lea (%rdi,%rdx,1),%r9d
add %esi,%r9d
add %r8d,%r9d
add %ecx,%r9d
add %r9d,%eax
imul %edi,%esi
sub %esi,%r8d
add %r8d,%eax
mov %edi,%esi
sub %edx,%esi
add %esi,%ecx
imul %ecx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a3 < a4)
    {
        v6 = a4 * a2;
    }
    else
    {
        v6 = (a1 + (a4 - a2)) + a2;
    }
    v7 = a5 - (a2 * a1);
    if (a4 < a4)
    {
        v8 = a4 - a4 + a3 * a2;
    }
    else
    {
        v8 = (a1 - a3 + a4) * a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 6
3 6
4 6
5 6
6 21
7 21
8 21
9 21
10 21
11 12
12 12
13 21
14 19
15 19
16 19
17 19
18 21
19 22
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a3 + a5;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += a4 + (a3 - a5);
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a5)
    {
        v10 += a3 - a2 - a1;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 19
2 19
3 19
4 19
5 20
<<<sep_out_sample>>>
lea (%rdi,%rdx,2),%eax
add %esi,%eax
lea 0x1(%rcx,%rax,1),%r9d
imul %ecx,%ecx
sub %ecx,%r8d
sub %edi,%r8d
add %r9d,%r8d
add $0x1,%edi
imul %edi,%edx
sub %esi,%edx
lea (%r8,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a4 - a4 + a5;
    }
    if (a2 < a2)
    {
        v8 = (a5 * a4) - a1 + a3;
    }
    else
    {
        v8 = a5 - (a4 * a4) - a1;
    }
    v9 = (a3 * a1 + a3) - a2;
    v10 = a1 + a3 - a1 - a5;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 19
2 19
3 19
4 15
5 15
6 15
7 19
8 17
9 17
10 17
11 19
12 20
<<<sep_out_sample>>>
mov %edx,%r10d
imul %edi,%r10d
cmp %r8d,%ecx
jge 16 <func1+0x16>
lea -0x2(%r8),%r9d
imul %ecx,%r9d
jmp 23 <func1+0x23>
mov %ecx,%r9d
imul %r8d,%r9d
lea (%rcx,%rsi,1),%eax
add %eax,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a3 * a1;
    if (a4 < a5)
    {
        v7 = (a5 * a4 - a4) - a4;
    }
    else
    {
        v7 = a4 * a5 + (a4 + a2);
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 5
4 5
5 7
6 7
7 7
8 11
9 11
10 11
11 11
12 13
13 13
14 13
15 13
16 13
17 13
18 14
<<<sep_out_sample>>>
cmp %esi,%r8d
jle f <func1+0xf>
lea (%rdx,%rcx,1),%eax
sub %r8d,%eax
add %esi,%eax
jmp 1b <func1+0x1b>
lea (%rdx,%rdi,2),%eax
mov %edx,%r9d
sub %eax,%r9d
mov %r9d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a3 - a5;
    }
    if (a2 < a5)
    {
        v8 = (a3 + a4) - a5 + a2;
    }
    else
    {
        v8 = a3 - (a1 + a3 + a1);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 15
8 15
9 15
10 15
11 17
12 17
13 17
14 17
15 17
16 18
<<<sep_out_sample>>>
test %esi,%esi
jle 18 <func1+0x18>
mov %edi,%eax
imul %edi,%eax
sub $0x1,%eax
imul %esi,%eax
mov %edx,%r9d
imul %edi,%r9d
jmp 25 <func1+0x25>
mov %r8d,%eax
sub %esi,%eax
imul %ecx,%eax
add %edi,%eax
mov %r8d,%r9d
lea 0x1(%r9,%rdi,1),%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += (a1 * a3) * a1;
    }
    if (v6 < a2)
    {
        v8 = (a2 * (a1 * a1)) - a2;
    }
    else
    {
        v8 = a1 + (a5 - a2) * a4;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        v9 += (a2 - a3) + a4;
    }
    if (v11 < a2)
    {
        v11 = a3 * a1 - (a2 - a2);
    }
    else
    {
        v11 = a2 - a2 + a5;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 24
8 24
9 24
10 15
11 15
12 15
13 15
14 28
15 30
16 30
17 30
18 30
19 30
20 30
21 31
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (a3 < a3)
        {
            v6 += a2 - a5 * a2;
        }
        else
        {
            v6 += a1 + (a4 + a3);
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        if (a2 < a5)
        {
            v8 += (a2 - a3) * a1;
        }
        else
        {
            v8 += a3 - a4 * a3;
        }
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a5)
    {
        v10 += (a4 - a5) + a5;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 33
2 33
3 33
4 33
5 34
<<<sep_out_sample>>>
lea (%r8,%rsi,1),%eax
mov %ecx,%r9d
sub %eax,%r9d
sub %r8d,%r9d
lea (%rcx,%rcx,1),%eax
cmp %edi,%edx
jge 1e <func1+0x1e>
mov %esi,%eax
imul %edx,%eax
add %ecx,%eax
add %r8d,%eax
lea (%rcx,%rdx,1),%r10d
imul %esi,%r10d
mov %ecx,%r11d
sub %r10d,%r11d
add %r11d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a4 - (a5 + a2) - a5;
    if (a3 < a1)
    {
        v7 = a2 * a3 + a4 + a5;
    }
    else
    {
        v7 = a4 + a4;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += a5 * a1 + a5;
    }
    v10 = a4 - ((a4 + a3) * a2);
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 11
6 5
7 5
8 7
9 7
10 7
11 7
12 18
13 18
14 18
15 18
16 19
17 19
18 19
19 19
20 19
21 19
22 19
23 20
<<<sep_out_sample>>>
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea (%r8,%rcx,1),%esi
sub %edi,%ecx
lea 0x1(%rsi,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a5 < a5)
    {
        v6 = (a2 * a5) - a1 + a5;
    }
    else
    {
        v6 = a1 + a4 - (a1 + a1);
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        if (a3 < a3)
        {
            v7 += a5 + a4 + a1;
        }
        else
        {
            v7 += (a2 - a4) + a4;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 24
2 24
3 24
4 24
5 10
6 24
7 25
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (v6 < a4)
        {
            v6 += (a5 + a5) * a4;
        }
        else
        {
            v6 += a4 * a3;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += a1 - a5 - a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 21
5 22
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a4 * a2 + a5;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += a4 + a2 - a3;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a4)
    {
        v10 += (a4 - a3) * a1;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 19
2 19
3 19
4 19
5 20
<<<sep_out_sample>>>
cmp %edx,%esi
jge 12 <func1+0x12>
mov %edx,%eax
imul %r8d,%eax
imul %edi,%eax
imul %edi,%eax
jmp 17 <func1+0x17>
mov %edi,%eax
imul %esi,%eax
lea 0x2(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (a1 < a2)
        {
            v6 += a1 * a5;
        }
        else
        {
            v6 += a2 - a3 - a3;
        }
    }
    if (a2 < a3)
    {
        v8 = (a3 * a5) * a1 * a1;
    }
    else
    {
        v8 = a1 * a2;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        v9 += a5 - a1 * a1;
    }
    v11 = 0;
    for (v12 = 0; v12++; v12<a2)
    {
        v11 += a4 * (a1 * a1);
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 18
7 18
8 22
9 22
10 34
11 34
12 34
13 34
14 34
15 35
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (v7 < a2)
        {
            v6 += a3 - a1 - a4;
        }
        else
        {
            v6 += a4 - a4;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        if (a4 < a5)
        {
            v8 += a1 + (a5 * a3);
        }
        else
        {
            v8 += a5 * a1 * a5;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 28
2 28
3 28
4 28
5 29
<<<sep_out_sample>>>
mov %esi,%eax
sub %edx,%eax
lea (%rdx,%rdi,1),%r9d
cmp $0x2,%ecx
cmovl %r9d,%eax
add %r9d,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a4 + a2 + a2;
    }
    if (v7 < a4)
    {
        v8 = a2 - a3;
    }
    else
    {
        v8 = a3 + a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 11
5 11
6 17
7 17
8 17
9 17
10 18
<<<sep_out_sample>>>
mov %esi,%r11d
sub %edx,%r11d
imul %esi,%r11d
lea (%rdx,%rcx,1),%r10d
sub %edi,%r10d
imul %ecx,%r10d
cmp %r8d,%edx
jle 24 <func1+0x24>
lea (%rdx,%rsi,1),%r9d
imul %edi,%r9d
jmp 2c <func1+0x2c>
lea (%r8,%rdx,1),%eax
lea (%rax,%rdi,2),%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
sub %edx,%edi
imul %r8d,%ecx
add %ecx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = (a2 - a3) * a2;
    v7 = (a3 + a4 - a1) * a4;
    if (a5 < a3)
    {
        v8 = a3 * a1 + a2 * a1;
    }
    else
    {
        v8 = a1 + (a5 + a3) + a1;
    }
    v9 = (a1 - a3) + a4 * a5;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 5
5 5
6 5
7 6
8 6
9 8
10 8
11 8
12 12
13 12
14 15
15 15
16 15
17 15
18 15
19 15
20 15
21 14
22 14
23 14
24 15
25 16
<<<sep_out_sample>>>
add %edx,%edi
add %esi,%edi
add %r8d,%edi
add %edi,%ecx
add %edx,%esi
lea 0x1(%rcx,%rsi,1),%eax
imul %r8d,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a2 + a3;
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += a5 * a2 * a2;
    }
    v9 = a5 * a5;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 11
5 4
6 11
7 10
8 11
9 12
<<<sep_out_sample>>>
test %edx,%edx
jle c <func1+0xc>
mov %ecx,%r9d
sub %edi,%r9d
jmp 13 <func1+0x13>
mov %esi,%r9d
imul %esi,%r9d
mov %esi,%eax
sub %edx,%eax
cmp %r8d,%esi
jge 29 <func1+0x29>
lea (%rsi,%rcx,1),%r10d
mov %r8d,%eax
imul %ecx,%eax
add %r10d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (v6 < a3)
    {
        v6 = a4 - a1;
    }
    else
    {
        v6 = a2 * a2;
    }
    if (a2 < a5)
    {
        v7 = a2 + a4 + a5 * a4;
    }
    else
    {
        v7 = a2 - a3;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 18
9 18
10 12
11 12
12 14
13 14
14 14
15 14
16 20
17 20
18 20
19 20
20 20
21 20
22 21
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
lea 0x1(%rcx,%rax,1),%ecx
lea (%rsi,%rdi,1),%eax
add %ecx,%eax
add %r8d,%edx
imul %esi,%edi
add %edi,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a3 * a1;
    }
    v8 = a2 + a1;
    v9 = (a5 + a3) + a1 * a2;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 11
5 9
6 11
7 10
8 10
9 10
10 11
11 12
<<<sep_out_sample>>>
push %rbx
test %esi,%esi
jle 14 <func1+0x14>
mov %esi,%r9d
sub %r8d,%r9d
sub %ecx,%r9d
imul %r8d,%r9d
jmp 1e <func1+0x1e>
lea (%r8,%rcx,1),%r9d
add %edi,%r9d
sub %esi,%r9d
test %r8d,%r8d
jle 31 <func1+0x31>
mov %ecx,%ebx
sub %edi,%ebx
mov %esi,%eax
imul %r8d,%eax
add %eax,%ebx
jmp 3d <func1+0x3d>
mov %esi,%ebx
imul %esi,%ebx
imul %esi,%ebx
imul %r8d,%ebx
cmp %edi,%esi
jge 4f <func1+0x4f>
mov %r8d,%r11d
sub %ecx,%r11d
sub %ecx,%r11d
add %edi,%r11d
jmp 56 <func1+0x56>
mov %ecx,%r11d
imul %edi,%r11d
cmp %r8d,%r9d
jge 64 <func1+0x64>
mov %ecx,%r10d
imul %esi,%r10d
jmp 6c <func1+0x6c>
lea -0x1(%rdx),%r10d
imul %ecx,%r10d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
add %ebx,%eax
add %r11d,%eax
add %r10d,%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (v6 < a2)
    {
        v6 = ((a2 - a5) - a4) * a5;
    }
    else
    {
        v6 = a5 + a4 + a1 - a2;
    }
    if (v7 < a5)
    {
        v7 = a4 - a1 + a2 * a5;
    }
    else
    {
        v7 = (a2 * a2) * a2 * a5;
    }
    if (a2 < a1)
    {
        v8 = a1 - (a4 - (a5 - a4));
    }
    else
    {
        v8 = a4 * a1;
    }
    if (v6 < a5)
    {
        v9 = a4 * a2;
    }
    else
    {
        v9 = a4 * a3 - a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 4
3 4
4 6
5 6
6 6
7 6
8 6
9 10
10 10
11 10
12 12
13 12
14 14
15 14
16 14
17 14
18 14
19 14
20 18
21 18
22 18
23 18
24 20
25 20
26 22
27 22
28 22
29 22
30 22
31 26
32 26
33 28
34 28
35 30
36 30
37 30
38 34
39 34
40 36
41 36
42 36
43 36
44 36
45 36
46 36
47 36
48 37
49 37
<<<sep_out_sample>>>
lea (%rdx,%r8,1),%eax
cmp %esi,%edx
jl 14 <func1+0x14>
mov %esi,%eax
imul %r8d,%eax
imul %edi,%eax
imul %ecx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (a3 < a5)
        {
            v6 += a5 - a3;
        }
        else
        {
            v6 += (a5 * a1) * a3;
        }
    }
    if (a3 < a2)
    {
        v8 = a3 + a5;
    }
    else
    {
        v8 = a2 * a5 * a1 * a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 18
2 16
3 16
4 22
5 22
6 22
7 22
8 24
9 24
10 24
11 24
12 24
13 25
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
lea -0x1(%rcx),%r9d
imul %r8d,%r9d
add %r9d,%eax
imul %esi,%ecx
sub %ecx,%r8d
lea 0x1(%rax,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a4 * a5 - a5;
    if (a3 < a3)
    {
        v7 = a3 - a2;
    }
    else
    {
        v7 = a5 - (a2 * a4);
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        if (a1 < a1)
        {
            v8 += a4 * a5;
        }
        else
        {
            v8 += a1 + a2;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 25
2 25
3 25
4 25
5 4
6 4
7 25
8 11
9 11
10 25
11 26
<<<sep_out_sample>>>
mov %r8d,%r11d
sub %ecx,%r11d
sub %edx,%r11d
imul %r8d,%r11d
cmp %ecx,%r8d
jle 21 <func1+0x21>
mov %edi,%r10d
imul %edi,%r10d
add %edx,%r10d
sub %edi,%r10d
jmp 2b <func1+0x2b>
mov %edi,%r10d
sub %esi,%r10d
imul %edx,%r10d
lea (%rdx,%rdi,1),%eax
lea (%rsi,%rdx,1),%r9d
cmp %esi,%edi
cmovl %eax,%r9d
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = ((a5 - a4) - a3) * a5;
    if (a4 < a5)
    {
        v7 = a3 + a1 * a1 - a1;
    }
    else
    {
        v7 = a3 * (a1 - a2);
    }
    if (a1 < a2)
    {
        v8 = a3 + a1;
    }
    else
    {
        v8 = a2 + a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 5
6 5
7 7
8 7
9 7
10 7
11 7
12 11
13 11
14 11
15 15
16 15
17 15
18 15
19 21
20 21
21 21
22 21
23 21
24 21
25 22
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
add %ecx,%esi
add %r8d,%ecx
add %edi,%edi
sub %edi,%ecx
lea (%rsi,%rcx,1),%eax
imul %edx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a2 < a2)
    {
        v6 = (a1 * a3) * a3 - a5;
    }
    else
    {
        v6 = a5 + a4 - (a1 + a1);
    }
    v7 = a5 * a3;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 13
2 13
3 13
4 13
5 10
6 10
7 10
8 13
9 12
10 13
11 14
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
lea (%rdi,%r8,2),%edx
lea (%rdx,%rsi,1),%r9d
add %r9d,%eax
add %ecx,%edi
add %edi,%r8d
add %r8d,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a2 < a2)
    {
        v6 = a1 + a4;
    }
    else
    {
        v6 = (a5 + a1) + (a5 + a2);
    }
    v7 = a1 + a4 + a5 + a2;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 13
2 13
3 13
4 13
5 10
6 10
7 13
8 12
9 12
10 12
11 13
12 14
<<<sep_out_sample>>>
mov %edi,%eax
sub %ecx,%eax
mov %edx,%r9d
sub %ecx,%r9d
cmp %esi,%ecx
cmovl %eax,%r9d
mov %r8d,%r10d
sub %edi,%r10d
cmp %ecx,%r9d
jl 25 <func1+0x25>
mov %edx,%r10d
imul %edx,%r10d
add %edi,%r10d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
lea (%r9,%r10,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a4 < a2)
    {
        v6 = a1 - a4;
    }
    else
    {
        v6 = a3 - a4;
    }
    if (v6 < a4)
    {
        v7 = a5 - a1;
    }
    else
    {
        v7 = a1 + a3 * a3;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 6
6 6
7 14
8 14
9 12
10 12
11 18
12 18
13 18
14 20
15 20
16 20
17 20
18 20
19 20
20 21
<<<sep_out_sample>>>
cmp %esi,%edi
jge d <func1+0xd>
mov %edi,%r9d
imul %edx,%r9d
jmp 1b <func1+0x1b>
mov %edi,%r9d
imul %edi,%r9d
imul %edx,%r9d
add %esi,%r9d
mov %ecx,%eax
imul %edi,%eax
mov %r8d,%r10d
sub %eax,%r10d
imul %esi,%r10d
add %r10d,%edi
add %edi,%edx
add %esi,%edx
add %edx,%r8d
add %ecx,%r8d
add %r9d,%r8d
imul %eax,%ecx
imul %ecx,%esi
lea 0x1(%r8,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a1 < a2)
    {
        v6 = a3 * (a5 - (a5 - a1));
    }
    else
    {
        v6 = (a1 * a1 * a3) + a2;
    }
    v7 = a2 * ((a4 * a1) * a4);
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        if (a4 < a5)
        {
            v8 += a5 * a2 * a2;
        }
        else
        {
            v8 += a1 - a2 - a3;
        }
    }
    v10 = (a5 - a1 * a4) * a2;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 10
10 12
11 12
12 25
13 25
14 25
15 26
16 26
17 26
18 26
19 26
20 26
21 12
22 12
23 26
24 27
<<<sep_out_sample>>>
test %r8d,%r8d
jle 11 <func1+0x11>
mov %r8d,%eax
imul %esi,%eax
add %ecx,%eax
sub %edi,%eax
jmp 17 <func1+0x17>
mov %esi,%eax
sub %edi,%eax
add %eax,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (a4 < a5)
        {
            v6 += a5 - (a5 + a5);
        }
        else
        {
            v6 += a1 + a4 + a3;
        }
    }
    if (v6 < a5)
    {
        v8 = a4 + a5 * a2 - a1;
    }
    else
    {
        v8 = (a2 - a1) - a1 + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 18
7 18
8 22
9 22
10 22
11 24
12 24
13 24
14 24
15 24
16 25
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (a5 < a5)
        {
            v6 += (a2 + a3) - a4;
        }
        else
        {
            v6 += a4 + (a4 - a3);
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        if (v9 < a3)
        {
            v8 += (a4 + a2) - a3;
        }
        else
        {
            v8 += a5 + a1 * a2;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 28
2 28
3 28
4 28
5 29
<<<sep_out_sample>>>
test %edx,%edx
jle c <func1+0xc>
mov %edx,%eax
neg %eax
sub %esi,%eax
jmp 11 <func1+0x11>
mov %esi,%eax
imul %edi,%eax
test %esi,%esi
jle 1f <func1+0x1f>
lea (%rsi,%rdi,2),%r9d
lea (%r9,%rdx,1),%r9d
jmp 2c <func1+0x2c>
mov %esi,%r9d
sub %ecx,%r9d
imul %r8d,%r9d
sub %esi,%r9d
lea 0x1(%r9,%rdi,1),%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    if (v6 < a3)
    {
        v6 = (a1 - a3 - a1) - a2;
    }
    else
    {
        v6 = a2 * a1 + a5 - a5;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += (a4 + a5) + a5;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        if (a2 < a4)
        {
            v9 += a5 * (a3 + a1);
        }
        else
        {
            v9 += a2 + a3 + a4;
        }
    }
    if (v7 < a2)
    {
        v11 = a1 + ((a1 + a3) + a2);
    }
    else
    {
        v11 = ((a2 - a4) * a5) - a2;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 29
10 29
11 31
12 31
13 31
14 35
15 35
16 35
17 35
18 37
19 37
20 37
21 37
22 37
23 37
24 38
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (v7 < a4)
        {
            v6 += (a4 + a1) + a2;
        }
        else
        {
            v6 += a5 - a4;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += a1 - (a2 * a2);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 21
5 22
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
add %ecx,%esi
imul %edx,%edi
mov %ecx,%eax
sub %edi,%eax
add %eax,%edx
lea 0x1(%rsi,%rdx,1),%eax
add %r8d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a4 - a3 * a1 + a3;
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        if (a5 < a5)
        {
            v7 += a1 - a1;
        }
        else
        {
            v7 += a5 + a3;
        }
    }
    v9 = (a4 + a1 - a1) + a5;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 18
5 4
6 4
7 4
8 4
9 18
10 17
11 18
12 19
<<<sep_out_sample>>>
lea (%rdi,%r8,1),%eax
lea (%r8,%rsi,1),%r10d
cmp %ecx,%edx
cmovl %eax,%r10d
lea (%r8,%r8,1),%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
imul %r8d,%edi
add %edi,%eax
add %r9d,%esi
add %esi,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a3 < a4)
    {
        v6 = (a4 - a4) + a1 + a5;
    }
    else
    {
        v6 = a5 - (a5 - a5 - a2);
    }
    v7 = a5 + a5;
    v8 = a1 * a5;
    v9 = a5 + (a5 + a5 + a2);
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 12
6 15
7 15
8 15
9 15
10 15
11 15
12 13
13 15
14 14
15 14
16 15
17 16
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (v7 < a1)
        {
            v6 += a5 + a2 + a5;
        }
        else
        {
            v6 += a5 + a2;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += (a1 + a1) - a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 21
5 22
<<<sep_out_sample>>>
mov %edx,%eax
sub %esi,%eax
lea 0x1(%rdi,%rax,1),%eax
add %eax,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (v7 < a1)
        {
            v6 += (a1 + a4) - a2;
        }
        else
        {
            v6 += a1 + a3 * a2;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += a2 - a1;
    }
    v10 = (a3 + a1 - a1) - a2;
    v11 = 0;
    for (v12 = 0; v12++; v12<a4)
    {
        v11 += a3 * (a3 - a2);
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 27
4 27
5 27
6 27
7 27
8 28
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a4 - a2 * a4;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += (a1 + a5) + a1;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a3)
    {
        if (v6 < a1)
        {
            v10 += a2 + a4;
        }
        else
        {
            v10 += a4 - a1;
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 26
2 26
3 26
4 26
5 27
<<<sep_out_sample>>>
mov $0x0,%eax
cmp %ecx,%r8d
jge 11 <func1+0x11>
mov %esi,%eax
imul %edx,%eax
sub %ecx,%eax
lea (%rdi,%rdx,1),%r9d
add %esi,%r9d
add %r8d,%r9d
add %ecx,%r9d
add %r9d,%eax
mov %esi,%r9d
imul %ecx,%r9d
imul %r9d,%r8d
imul %edi,%r8d
add %eax,%r8d
add %edx,%edx
sub %ecx,%edx
sub %esi,%edx
lea (%r8,%rdx,1),%eax
sub %edi,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a5 < a4)
    {
        v6 = a2 * a3 - a4;
    }
    else
    {
        v6 = a1 + (a5 - a1 - a5);
    }
    v7 = (a2 * a4) * a5 * a1;
    v8 = (a3 + a3 - a4) - a2;
    v9 = a4 - a1;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 6
7 15
8 15
9 15
10 15
11 15
12 12
13 12
14 12
15 12
16 15
17 13
18 13
19 13
20 15
21 14
22 15
23 16
<<<sep_out_sample>>>
cmp %r8d,%ecx
jge 14 <func1+0x14>
mov %edx,%r11d
sub %esi,%r11d
add %ecx,%r11d
imul %r8d,%r11d
jmp 20 <func1+0x20>
lea (%rsi,%rcx,1),%r11d
imul %r8d,%r11d
imul %ecx,%r11d
test %edi,%edi
jle 2e <func1+0x2e>
lea (%rsi,%r8,2),%eax
lea (%rax,%rcx,1),%r10d
jmp 3b <func1+0x3b>
mov %r8d,%r10d
imul %ecx,%r10d
add %esi,%r10d
sub %ecx,%r10d
cmp %edi,%ecx
jge 4f <func1+0x4f>
mov %edx,%eax
imul %esi,%eax
mov %r8d,%r9d
sub %eax,%r9d
add %r8d,%r9d
jmp 5d <func1+0x5d>
mov %edi,%r9d
imul %esi,%r9d
add %ecx,%r9d
imul %r8d,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a4 < a5)
    {
        v6 = (a3 - a2 + a4) * a5;
    }
    else
    {
        v6 = ((a2 + a4) * a5) * a4;
    }
    if (v7 < a1)
    {
        v7 = (a4 + a5 + a2) + a5;
    }
    else
    {
        v7 = a2 + a5 * a4 - a4;
    }
    if (a4 < a1)
    {
        v8 = a5 + (a5 - a3 * a2);
    }
    else
    {
        v8 = ((a1 * a2) + a4) * a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 12
12 12
13 14
14 14
15 14
16 18
17 18
18 18
19 18
20 20
21 20
22 22
23 22
24 22
25 22
26 22
27 22
28 26
29 26
30 26
31 26
32 28
33 28
34 28
35 28
36 28
37 28
38 28
39 29
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a1 - (a1 + a3);
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        if (v8 < a2)
        {
            v8 += (a1 - a4) + a2;
        }
        else
        {
            v8 += a3 - a2;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 21
5 22
<<<sep_out_sample>>>
add %edx,%edi
add %esi,%edi
add %r8d,%edi
add %ecx,%edi
imul %r8d,%edx
lea 0x1(%rdi,%rdx,1),%eax
imul %ecx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = (a3 + a3 * a5) - a3;
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        if (a2 < a4)
        {
            v7 += a5 + a2 - a2;
        }
        else
        {
            v7 += a1 * a5 - a4;
        }
    }
    v9 = a2 * a4;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 18
5 4
6 18
7 17
8 18
9 19
<<<sep_out_sample>>>
cmp %esi,%edx
jge 11 <func1+0x11>
lea 0x1(%rcx),%r9d
imul %r8d,%r9d
add %esi,%r9d
jmp 18 <func1+0x18>
mov %edi,%r9d
imul %esi,%r9d
lea (%rcx,%rdi,1),%eax
test %r8d,%r8d
jg 2f <func1+0x2f>
mov %edx,%r10d
imul %edi,%r10d
lea (%r8,%rsi,1),%eax
imul %r10d,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    if (a3 < a2)
    {
        v6 = a2 + (a5 + (a4 * a5));
    }
    else
    {
        v6 = a1 * a2;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += a2 + a4 + a1;
    }
    if (v7 < a5)
    {
        v9 = a4 + a1;
    }
    else
    {
        v9 = a3 * a1 * (a5 + a2);
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a5)
    {
        v10 += a4 - a4 * a4;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 19
10 17
11 17
12 23
13 23
14 23
15 23
16 30
17 30
18 30
19 30
20 30
21 30
22 31
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%eax
lea (%rdi,%r8,1),%esi
imul %edi,%edi
add %esi,%edi
add %eax,%edi
sub %edx,%r8d
sub %ecx,%r8d
lea (%rdi,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += (a1 * a5) * a5;
    }
    v8 = a1 + a5 + a1 * a1;
    if (a4 < a4)
    {
        v9 = (a2 + a3 * a3) - a2;
    }
    else
    {
        v9 = a5 - a3 - a4;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a3)
    {
        if (v6 < a1)
        {
            v10 += a1 * a4;
        }
        else
        {
            v10 += a2 - a4 - a2;
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 30
2 30
3 30
4 30
5 9
6 9
7 9
8 30
9 16
10 16
11 30
12 31
<<<sep_out_sample>>>
cmp %esi,%edx
jge 15 <func1+0x15>
mov %edi,%r9d
imul %edx,%r9d
imul %esi,%r9d
imul %esi,%r9d
jmp 20 <func1+0x20>
lea (%rsi,%rcx,1),%r9d
add %edx,%r9d
imul %edi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
imul %edi,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a3 < a2)
    {
        v6 = ((a1 * a3) * a2) * a2;
    }
    else
    {
        v6 = a1 * ((a2 + a4) + a3);
    }
    v7 = a1 * ((a3 + a4) - a4);
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 13
12 13
13 13
14 13
15 13
16 12
17 13
18 14
<<<sep_out_sample>>>
lea (%r8,%rdx,1),%r11d
imul %edi,%r11d
imul %ecx,%r11d
cmp %edi,%r8d
jle 1a <func1+0x1a>
lea (%rcx,%rdx,2),%r10d
add %r8d,%r10d
jmp 28 <func1+0x28>
mov %esi,%eax
imul %r8d,%eax
add %edi,%eax
mov %esi,%r10d
sub %eax,%r10d
cmp %esi,%ecx
jle 35 <func1+0x35>
lea (%rsi,%rcx,2),%r9d
sub %edx,%r9d
jmp 42 <func1+0x42>
mov %r8d,%r9d
imul %edx,%r9d
add %edi,%r9d
add %ecx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a4 < a4)
    {
        v6 = a5 - a2 - a3 - a3;
    }
    else
    {
        v6 = ((a5 + a3) * a1) * a4;
    }
    if (a1 < a5)
    {
        v7 = (a4 + a3) + a3 + a5;
    }
    else
    {
        v7 = a2 - (a1 + a2 * a5);
    }
    if (a2 < a4)
    {
        v8 = ((a4 - a3) + a2) + a4;
    }
    else
    {
        v8 = a5 * a3 + a1 + a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 12
5 12
6 14
7 14
8 14
9 18
10 18
11 18
12 18
13 18
14 20
15 20
16 22
17 22
18 22
19 26
20 26
21 26
22 26
23 28
24 28
25 28
26 28
27 28
28 28
29 28
30 29
<<<sep_out_sample>>>
lea (%rdi,%rdx,2),%r9d
sub %esi,%r9d
lea (%r8,%rdi,1),%eax
mov %esi,%r10d
imul %edx,%r10d
cmp %r8d,%esi
cmovl %r10d,%eax
mov %esi,%r10d
imul %ecx,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = (a3 + a1 + a3) - a2;
    if (a2 < a5)
    {
        v7 = a2 * a3;
    }
    else
    {
        v7 = a5 + a1;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += (a4 + a2) * a5;
    }
    v10 = a4 * (a5 - (a5 - a2));
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 11
4 7
5 7
6 7
7 7
8 18
9 18
10 19
11 19
12 19
13 19
14 19
15 19
16 19
17 20
<<<sep_out_sample>>>
test %edx,%edx
jle 13 <func1+0x13>
mov %edi,%r10d
imul %ecx,%r10d
sub %r8d,%r10d
sub %esi,%r10d
jmp 22 <func1+0x22>
mov %edx,%r10d
imul %edx,%r10d
imul %esi,%r10d
imul %ecx,%r10d
cmp %ecx,%edi
jge 33 <func1+0x33>
mov %ecx,%r9d
imul %edi,%r9d
imul %edi,%r9d
jmp 40 <func1+0x40>
lea (%rdi,%rcx,1),%r9d
mov %r8d,%eax
imul %esi,%eax
add %eax,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (v6 < a3)
    {
        v6 = ((a1 * a4) - a5) - a2;
    }
    else
    {
        v6 = a4 * (a3 * a3 * a2);
    }
    if (a1 < a4)
    {
        v7 = a4 * a1 * a1;
    }
    else
    {
        v7 = (a1 + a4) + a5 * a2;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 12
13 12
14 14
15 14
16 14
17 14
18 18
19 18
20 18
21 18
22 20
23 20
24 20
25 20
26 20
27 20
28 21
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
add %esi,%ecx
imul %r8d,%edi
lea 0x1(%rcx,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = a5 * a1;
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        if (a3 < a1)
        {
            v7 += a1 - a5 + a3;
        }
        else
        {
            v7 += (a3 * a5) + a2;
        }
    }
    v9 = a5 - a5 + a2 - a2;
    v10 = 0;
    for (v11 = 0; v11++; v11<a2)
    {
        v10 += (a3 + a1) - a4;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 23
2 23
3 23
4 23
5 4
6 23
7 24
<<<sep_out_sample>>>
mov %esi,%eax
sub %ecx,%eax
cmp %esi,%ecx
jge 17 <func1+0x17>
mov %edi,%eax
imul %edi,%eax
mov %edx,%r9d
imul %edx,%r9d
sub %r9d,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %r8d,%esi
lea 0x2(%rcx,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a4 * a5 + a5;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += a4 * a1 - a2;
    }
    if (a4 < a2)
    {
        v10 = a1 * a1 - a3 * a3;
    }
    else
    {
        v10 = a2 - a4;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 20
2 20
3 14
4 14
5 16
6 16
7 16
8 16
9 16
10 22
11 22
12 22
13 22
14 22
15 23
<<<sep_out_sample>>>
mov %edx,%r9d
imul %edi,%r9d
mov $0x0,%eax
test %esi,%esi
jg 19 <func1+0x19>
lea (%rdx,%rdx,1),%eax
imul %esi,%eax
imul %edi,%eax
add %edx,%edi
add %edi,%esi
add %r8d,%esi
add %esi,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a3 < a3)
    {
        v6 = (a5 - a1 - a2) * a1;
    }
    else
    {
        v6 = a3 * a1;
    }
    if (v7 < a2)
    {
        v7 = a3 - a3;
    }
    else
    {
        v7 = (a3 + a3) * a2 * a1;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        if (v7 < a4)
        {
            v8 += (a5 + a5) + a3;
        }
        else
        {
            v8 += (a1 - a4) * a1;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 14
4 12
5 12
6 18
7 18
8 18
9 32
10 32
11 32
12 32
13 32
14 32
15 33
<<<sep_out_sample>>>
push %rbx
mov %edx,%r9d
imul %esi,%r9d
lea (%r9,%rcx,1),%r10d
imul %r8d,%r10d
test %edi,%edi
jle 1c <func1+0x1c>
mov %r8d,%ebx
imul %edi,%ebx
jmp 26 <func1+0x26>
mov %ecx,%ebx
imul %edx,%ebx
add %esi,%ebx
sub %r8d,%ebx
lea (%rdx,%rsi,1),%r11d
cmp %edi,%r10d
jl 36 <func1+0x36>
lea (%rdi,%rdx,2),%r11d
add %edx,%r11d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
add %ebx,%eax
add %r11d,%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = (a3 * a2 + a4) * a5;
    if (a1 < a1)
    {
        v7 = (a1 * (a2 * a1)) + a4;
    }
    else
    {
        v7 = a3 * a2;
    }
    if (v8 < a1)
    {
        v8 = a5 * a1;
    }
    else
    {
        v8 = a2 + a4 * a3 - a5;
    }
    if (v6 < a1)
    {
        v9 = a3 + a2;
    }
    else
    {
        v9 = a3 + (a3 + a1) + a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 4
3 4
4 4
5 4
6 13
7 13
8 15
9 15
10 15
11 19
12 19
13 19
14 19
15 23
16 21
17 21
18 27
19 27
20 29
21 29
22 29
23 29
24 29
25 29
26 29
27 29
28 30
29 30
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %r8d,%edx
lea 0x1(%rcx,%rdx,1),%eax
add %edi,%r8d
imul %esi,%r8d
add %eax,%r8d
imul %ecx,%edi
lea (%r8,%rsi,2),%eax
sub %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (a5 < a5)
        {
            v6 += a3 * a4 - a1;
        }
        else
        {
            v6 += (a1 + a4) + a4;
        }
    }
    v8 = (a5 + a1) * a2;
    v9 = a2 - (a4 * a1) + a2;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 18
5 16
6 16
7 18
8 17
9 17
10 18
11 19
<<<sep_out_sample>>>
cmp %edi,%ecx
jge f <func1+0xf>
mov %esi,%eax
imul %edx,%eax
lea (%rax,%r8,2),%eax
jmp 1f <func1+0x1f>
mov %ecx,%eax
imul %ecx,%eax
mov %edx,%r9d
sub %eax,%r9d
mov %r9d,%eax
sub %ecx,%eax
add %edx,%edi
add %esi,%edi
add %r8d,%edi
add %edi,%ecx
lea 0x1(%rax,%rcx,1),%eax
add %r8d,%esi
imul %esi,%edx
add %edx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a4 < a1)
    {
        v6 = (a5 + a5) + a2 * a3;
    }
    else
    {
        v6 = (a3 - a4 * a4) - a4;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += a1 - a3;
    }
    v9 = ((a2 + a5) * a3) + a5;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 10
11 10
12 10
13 18
14 18
15 18
16 18
17 18
18 17
19 17
20 17
21 18
22 19
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%eax
add %r8d,%edi
imul %edx,%r8d
lea (%rdi,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a1 - a4;
    }
    v8 = a5 + a1 + a5 * a3;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 9
6 9
7 9
8 10
9 11
<<<sep_out_sample>>>
mov %esi,%eax
sub %edx,%eax
add %edx,%edi
add %edi,%esi
add %r8d,%esi
add %ecx,%esi
sub $0x1,%ecx
imul %ecx,%r8d
add %r8d,%edx
add %esi,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = ((a4 * a5) - a5) + a3;
    v7 = a2 - a3 - a3 + a3;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 5
2 5
3 6
4 6
5 6
6 6
7 4
8 4
9 4
10 6
11 6
12 7
<<<sep_out_sample>>>
cmp %esi,%edx
jle 12 <func1+0x12>
mov %r8d,%eax
imul %edx,%eax
imul %r8d,%eax
add %ecx,%eax
jmp 21 <func1+0x21>
lea (%rcx,%r8,1),%eax
mov %esi,%r9d
sub %eax,%r9d
mov %r9d,%eax
sub %edx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (a5 < a3)
        {
            v6 += a1 + a5 * a3;
        }
        else
        {
            v6 += a3 * a2 * a3;
        }
    }
    if (a2 < a3)
    {
        v8 = a5 * a3 * a5 + a4;
    }
    else
    {
        v8 = a2 - (a4 + a5) - a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 18
7 18
8 22
9 22
10 22
11 22
12 22
13 24
14 24
15 24
16 24
17 24
18 25
<<<sep_out_sample>>>
mov %ecx,%eax
sub %edi,%eax
cmp %ecx,%esi
jl f <func1+0xf>
lea (%rdi,%rcx,1),%eax
sub %edx,%eax
sub %esi,%eax
add %edx,%edi
add %edi,%esi
add %r8d,%esi
add %esi,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a2 < a4)
    {
        v6 = a4 - a1;
    }
    else
    {
        v6 = a1 + a4 - a3 - a2;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += a3 - a4 + a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 6
2 6
3 4
4 4
5 10
6 10
7 10
8 17
9 17
10 17
11 17
12 17
13 18
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
mov %r8d,%esi
sub %ecx,%esi
lea 0x1(%rsi),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (a2 < a1)
        {
            v6 += (a1 - a2) - a2;
        }
        else
        {
            v6 += a2 - a3 * a4;
        }
    }
    v8 = a2 - (a4 + a4 + a2);
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        v9 += a5 * a5;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 22
4 16
5 16
6 22
7 23
<<<sep_out_sample>>>
lea (%rdi,%rsi,1),%eax
lea (%rax,%rdi,1),%r9d
add %r8d,%r9d
lea (%r8,%rcx,1),%r10d
cmp %esi,%edi
cmovl %r10d,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = (a1 + a2 + a1) + a5;
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        if (a5 < a5)
        {
            v7 += a5 - a4;
        }
        else
        {
            v7 += a1 + (a1 - a5);
        }
    }
    if (a1 < a2)
    {
        v9 = a4 + a2 - a2 + a5;
    }
    else
    {
        v9 = a2 + a1;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a5)
    {
        v10 += a5 - a1 * a2;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 19
5 19
6 19
7 30
8 30
9 30
10 30
11 30
12 30
13 31
<<<sep_out_sample>>>
test %esi,%esi
jle c <func1+0xc>
mov %r8d,%r11d
sub %ecx,%r11d
jmp 13 <func1+0x13>
lea (%rsi,%rcx,1),%r11d
neg %r11d
mov %ecx,%r10d
imul %ecx,%r10d
add $0x1,%r10d
imul %edx,%r10d
lea (%rdi,%r8,1),%r9d
cmp %edi,%edx
jg 37 <func1+0x37>
mov %edi,%r9d
imul %edi,%r9d
add %edx,%r9d
sub %esi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (v6 < a2)
    {
        v6 = (a4 - a4) + a5 - a4;
    }
    else
    {
        v6 = a4 - a4 - (a2 + a4);
    }
    v7 = a3 * (a4 * a4) + a3;
    if (a1 < a3)
    {
        v8 = ((a1 - a1) + a1) + a5;
    }
    else
    {
        v8 = a1 * a1 + a3 - a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 12
9 12
10 12
11 12
12 15
13 13
14 13
15 19
16 19
17 19
18 19
19 21
20 21
21 21
22 21
23 21
24 21
25 21
26 22
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
imul %edi,%edx
sub $0x1,%edx
imul %edx,%ecx
add %eax,%ecx
lea -0x1(%r8),%eax
imul %eax,%r8d
sub %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = (a1 * a3) * a4 - a4;
    v7 = (a5 * a5 - a5) - a2;
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        if (v9 < a5)
        {
            v8 += a2 - a4 * a2;
        }
        else
        {
            v8 += a3 * a3 * a2;
        }
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a5)
    {
        v10 += a4 + (a4 - a2);
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 23
2 23
3 23
4 23
5 4
6 4
7 4
8 23
9 5
10 5
11 5
12 23
13 24
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea (%r8,%rcx,1),%esi
mov $0x1,%eax
sub %edi,%eax
imul %eax,%ecx
add %ecx,%edi
lea 0x1(%rsi,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a4 - a1 * a4 + a1;
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += (a5 * a1) * a2;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        v9 += a1 + (a2 - a3);
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 15
2 15
3 15
4 15
5 4
6 4
7 4
8 4
9 15
10 16
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (a3 < a1)
        {
            v6 += a4 - a1 + a4;
        }
        else
        {
            v6 += a3 - a2;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        if (a5 < a3)
        {
            v8 += a4 * a1;
        }
        else
        {
            v8 += a2 - a4 - a2;
        }
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a2)
    {
        v10 += (a2 * a3) + a3;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 33
2 33
3 33
4 33
5 34
<<<sep_out_sample>>>
add %edi,%edx
add %edx,%esi
add %r8d,%esi
add %esi,%ecx
imul %r8d,%edi
lea 0x1(%rcx,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a5 * a1;
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a3 - (a3 * a1);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 4
6 10
7 11
<<<sep_out_sample>>>
test %edi,%edi
jle 10 <func1+0x10>
mov %edx,%eax
sub %r8d,%eax
imul %esi,%eax
sub %edx,%eax
jmp 1c <func1+0x1c>
lea (%rdx,%rcx,2),%eax
mov %ecx,%r10d
sub %eax,%r10d
mov %r10d,%eax
mov %esi,%r9d
sub %r8d,%r9d
add %r9d,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (a5 < a5)
        {
            v6 += a4 - a4;
        }
        else
        {
            v6 += (a2 * a5) * a4;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += a3 * a2 - a5;
    }
    if (v10 < a1)
    {
        v10 = (a3 - a5) * a2 - a3;
    }
    else
    {
        v10 = a4 - ((a4 + a4) + a3);
    }
    v11 = (a2 - (a5 + a5)) + a5;
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 23
4 23
5 23
6 23
7 23
8 27
9 27
10 27
11 27
12 29
13 29
14 30
15 30
16 30
17 30
18 30
19 30
20 31
<<<sep_out_sample>>>
mov %r8d,%r11d
sub %ecx,%r11d
imul %edi,%r11d
mov %edx,%r10d
sub %ecx,%r10d
mov %edi,%eax
imul %edi,%eax
add %eax,%r10d
cmp %edi,%ecx
jge 29 <func1+0x29>
mov %esi,%r9d
imul %ecx,%r9d
imul %r8d,%r9d
jmp 34 <func1+0x34>
lea (%rcx,%rdx,1),%r9d
add %edi,%r9d
imul %esi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a1 * a5 - a4 * a1;
    v7 = a3 - a4 + a1 * a1;
    if (a4 < a1)
    {
        v8 = (a2 * a4) * a5;
    }
    else
    {
        v8 = a2 * ((a4 + a3) + a1);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 5
5 5
6 5
7 5
8 5
9 6
10 6
11 8
12 8
13 8
14 8
15 12
16 12
17 12
18 14
19 14
20 14
21 14
22 14
23 14
24 14
25 15
<<<sep_out_sample>>>
mov %ecx,%eax
sub %edx,%eax
mov %edx,%r9d
imul %ecx,%r9d
cmp %r8d,%edx
cmovl %r9d,%eax
cmp %esi,%r8d
jle 25 <func1+0x25>
lea -0x1(%rdi),%r9d
imul %ecx,%r9d
imul %ecx,%r9d
jmp 32 <func1+0x32>
mov %esi,%r9d
imul %r8d,%r9d
sub %edx,%r9d
sub %edx,%r9d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %ecx,%r8d
add %r8d,%eax
add %r9d,%eax
lea (%rax,%rcx,2),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a3 < a5)
    {
        v6 = a4 * ((a3 + a5) - a5);
    }
    else
    {
        v6 = a4 - a3;
    }
    if (a2 < a5)
    {
        v7 = (a4 * a1 - a4) * a4;
    }
    else
    {
        v7 = (a2 * a5) - a3 - a3;
    }
    v8 = a4 + a4;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 6
4 6
5 6
6 6
7 12
8 12
9 14
10 14
11 14
12 14
13 18
14 18
15 18
16 18
17 21
18 21
19 21
20 21
21 21
22 21
23 21
24 22
<<<sep_out_sample>>>
cmp %esi,%edi
jge e <func1+0xe>
mov %edx,%eax
imul %r8d,%eax
add %esi,%eax
jmp 14 <func1+0x14>
mov %r8d,%eax
imul %edi,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a1 < a2)
    {
        v6 = a2 + a3 * a5;
    }
    else
    {
        v6 = a5 * a1;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += (a3 + a2) - a4;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        v9 += a2 * (a2 + a1);
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 22
10 22
11 22
12 22
13 22
14 23
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%eax
lea (%rax,%r8,2),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (a2 < a3)
        {
            v6 += (a3 - a3) * a2;
        }
        else
        {
            v6 += a4 - a5;
        }
    }
    if (a5 < a5)
    {
        v8 = a2 - a3;
    }
    else
    {
        v8 = a5 + a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 24
2 24
3 24
4 24
5 24
6 25
<<<sep_out_sample>>>
test %r8d,%r8d
jle d <func1+0xd>
mov %r8d,%eax
imul %ecx,%eax
jmp 18 <func1+0x18>
mov %edi,%eax
imul %ecx,%eax
imul %edi,%eax
imul %edx,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (v6 < a5)
    {
        v6 = (a4 * a5) + a4 - a4;
    }
    else
    {
        v6 = (a1 * a4) * a1 * a3;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += a4 * a5 - a1;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        if (v10 < a2)
        {
            v9 += a2 - a5 - a2;
        }
        else
        {
            v9 += a2 * a1 + a5;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 10
10 29
11 29
12 29
13 29
14 29
15 30
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
imul %r8d,%esi
imul %esi,%edx
add %edx,%eax
imul %edi,%edi
sub %edi,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a5 < a5)
    {
        v6 = ((a1 * a1) + a2) - a2;
    }
    else
    {
        v6 = (a2 * a5) * a3;
    }
    v7 = a4 - (a1 * a1);
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 13
2 13
3 13
4 13
5 10
6 10
7 13
8 12
9 12
10 13
11 14
<<<sep_out_sample>>>
mov %esi,%r10d
sub %edx,%r10d
add %edi,%r10d
cmp %ecx,%edi
jle 19 <func1+0x19>
lea (%rdx,%r8,1),%r9d
add %edi,%r9d
sub %ecx,%r9d
jmp 20 <func1+0x20>
mov %r8d,%r9d
imul %r8d,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a2 - a3 + a1;
    if (a4 < a1)
    {
        v7 = a1 + (a3 + a5) - a4;
    }
    else
    {
        v7 = a5 * a5;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 5
5 5
6 7
7 7
8 7
9 7
10 11
11 11
12 13
13 13
14 13
15 13
16 13
17 13
18 14
<<<sep_out_sample>>>
cmp %esi,%edx
jge 9 <func1+0x9>
lea (%rcx,%rcx,1),%eax
jmp 11 <func1+0x11>
mov %ecx,%eax
sub %edi,%eax
sub %edx,%eax
add %ecx,%eax
add %edi,%edx
add %edx,%esi
add %r8d,%esi
add %esi,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a3 < a2)
    {
        v6 = a4 + a4;
    }
    else
    {
        v6 = a4 - a1 - a3 + a4;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a4 - a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 10
6 10
7 10
8 10
9 17
10 17
11 17
12 17
13 17
14 18
<<<sep_out_sample>>>
lea (%rsi,%rdi,2),%eax
test %ecx,%ecx
jg 17 <func1+0x17>
mov %ecx,%eax
imul %esi,%eax
mov %r8d,%r9d
sub %eax,%r9d
mov %r9d,%eax
sub %ecx,%eax
add %edi,%edx
add %esi,%edx
add %edx,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
imul %esi,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (v6 < a2)
        {
            v6 += a1 - a2;
        }
        else
        {
            v6 += (a4 * a2) - a2;
        }
    }
    if (v6 < a4)
    {
        v8 = a1 + a1 + a2;
    }
    else
    {
        v8 = a5 - a4 * a2 - a4;
    }
    v9 = a2 * a2;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 16
3 16
4 22
5 22
6 22
7 22
8 22
9 22
10 25
11 25
12 25
13 25
14 25
15 24
16 25
17 26
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %r8d,%edx
add %ecx,%edx
lea 0x1(%rcx),%eax
imul %r8d,%eax
lea 0x1(%rdx,%rax,1),%edx
sub %ecx,%r8d
imul %esi,%ecx
sub %ecx,%r8d
lea (%rdx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a3 < a3)
    {
        v6 = (a1 + a4) * a3 - a4;
    }
    else
    {
        v6 = a5 + a5 * a4;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a3 * a1 - a2;
    }
    v9 = (a5 - a4) - a2 * a4;
    v10 = (a2 * a5) * (a1 - a1);
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 19
2 19
3 19
4 19
5 10
6 10
7 19
8 17
9 17
10 17
11 19
12 20
<<<sep_out_sample>>>
mov %r8d,%r10d
sub %edx,%r10d
mov %edx,%r9d
neg %r9d
mov %r9d,%eax
sub %esi,%eax
lea (%rdx,%rdx,1),%r11d
mov %eax,%r9d
cmp %ecx,%r8d
mov %r11d,%eax
cmovle %r9d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r10d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a5 - a3;
    if (a4 < a5)
    {
        v7 = (a3 + a3) + a4 - a4;
    }
    else
    {
        v7 = a4 - (a4 + a3) - a2;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 11
4 11
5 11
6 11
7 7
8 7
9 7
10 7
11 7
12 13
13 13
14 13
15 13
16 13
17 13
18 14
<<<sep_out_sample>>>
test %edx,%edx
jle 13 <func1+0x13>
mov $0x1,%eax
sub %edi,%eax
imul %esi,%eax
imul %esi,%eax
jmp 1b <func1+0x1b>
lea 0x1(%rcx),%eax
imul %ecx,%eax
add %edi,%eax
mov %ecx,%r9d
sub %edi,%r9d
mov %r8d,%r10d
sub %esi,%r10d
cmp %r8d,%eax
cmovge %r10d,%r9d
add %edi,%edx
add %esi,%edx
add %r8d,%edx
add %ecx,%edx
add %edx,%eax
lea (%rax,%r9,1),%edx
sub %r8d,%ecx
imul %ecx,%esi
sub %edi,%esi
lea (%rdx,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (v6 < a3)
    {
        v6 = (a2 - a2 * a1) * a2;
    }
    else
    {
        v6 = a4 + (a4 * a4) + a1;
    }
    if (v6 < a5)
    {
        v7 = a4 - a1;
    }
    else
    {
        v7 = a5 - a2;
    }
    v8 = a2 * (a4 - a5) - a1;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 14
12 14
13 14
14 14
15 14
16 14
17 21
18 21
19 21
20 21
21 21
22 21
23 20
24 20
25 20
26 21
27 22
<<<sep_out_sample>>>
cmp %esi,%r8d
jge d <func1+0xd>
mov %ecx,%r10d
sub %esi,%r10d
jmp 1a <func1+0x1a>
mov %edx,%r10d
sub %r8d,%r10d
add %edx,%r10d
imul %esi,%r10d
lea 0x1(%r8),%eax
imul %ecx,%eax
add %edi,%eax
cmp %eax,%edi
jle 33 <func1+0x33>
lea (%r8,%rsi,1),%r9d
add %edx,%r9d
add %ecx,%r9d
jmp 3b <func1+0x3b>
lea (%rdi,%rcx,1),%r9d
imul %r8d,%r9d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r10d,%ecx
add %ecx,%eax
add %r9d,%eax
lea (%rax,%rdx,2),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a5 < a2)
    {
        v6 = (a5 + a4) - a5 - a2;
    }
    else
    {
        v6 = ((a3 - a5) + a3) * a2;
    }
    v7 = a1 + (a4 + a4 * a5);
    if (v7 < a1)
    {
        v8 = (a5 + a2 + a3) + a4;
    }
    else
    {
        v8 = a1 * a5 + (a4 * a5);
    }
    v9 = a3 + a3;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 10
10 12
11 12
12 12
13 13
14 13
15 15
16 15
17 15
18 15
19 19
20 19
21 22
22 22
23 22
24 22
25 22
26 22
27 22
28 22
29 23
<<<sep_out_sample>>>
lea (%rcx,%rdi,2),%eax
add %eax,%edx
add %esi,%edx
add %r8d,%edx
lea 0x1(%rcx,%rdx,1),%eax
lea -0x1(%rsi),%edx
imul %ecx,%edx
add %edx,%esi
add %esi,%eax
add %r8d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (a4 < a2)
        {
            v6 += a2 - a2 * a1;
        }
        else
        {
            v6 += a1 - a4 - a4;
        }
    }
    if (a2 < a2)
    {
        v8 = a4 * (a5 - (a4 - a4));
    }
    else
    {
        v8 = a4 * a2 - a4 + a2;
    }
    v9 = a4 + a5;
    v10 = a1 + a4;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 26
2 26
3 26
4 26
5 26
6 22
7 22
8 22
9 26
10 24
11 26
12 27
<<<sep_out_sample>>>
lea (%rdi,%r8,1),%eax
sub %ecx,%eax
add %edx,%eax
cmp %edx,%edi
jle 18 <func1+0x18>
mov %edx,%r9d
imul %r8d,%r9d
add %ecx,%r9d
jmp 23 <func1+0x23>
lea 0x1(%rdi),%r9d
imul %esi,%r9d
add %edx,%r9d
add %r9d,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (a2 < a4)
        {
            v6 += a4 + a1;
        }
        else
        {
            v6 += (a3 - a4) + a4;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += (a1 + a1) - a5;
    }
    v10 = a3 + (a1 + a5 - a4);
    if (a3 < a1)
    {
        v11 = a4 + a3 * a5;
    }
    else
    {
        v11 = a1 * a2 + a2 + a3;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 22
5 22
6 24
7 24
8 24
9 24
10 28
11 28
12 28
13 30
14 30
15 30
16 30
17 30
18 30
19 31
<<<sep_out_sample>>>
mov %esi,%r9d
imul %r8d,%r9d
mov %r8d,%eax
imul %r8d,%eax
add %edi,%eax
add %edx,%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
sub %r8d,%ecx
imul %ecx,%esi
add %esi,%edx
lea 0x1(%rax,%rdx,1),%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = (a4 - a5) * a2 + a3;
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += (a2 - a3) - a5;
    }
    v9 = a2 * a5 + a4 - a4;
    v10 = a5 * a5 + (a4 - a4);
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 11
4 11
5 12
6 12
7 12
8 12
9 12
10 4
11 4
12 4
13 12
14 12
15 13
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
mov %edx,%r9d
sub %r8d,%r9d
add %r9d,%eax
sub %r8d,%esi
add %esi,%edx
add %edx,%eax
lea (%r8,%r8,2),%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a3 - a5;
    v7 = a3 + (a2 - a5);
    v8 = a5 + a5 + a5;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 7
2 7
3 7
4 7
5 4
6 4
7 7
8 5
9 5
10 7
11 6
12 7
13 8
<<<sep_out_sample>>>
mov %edx,%r9d
imul %ecx,%r9d
mov $0x1,%eax
sub %r9d,%eax
imul %ecx,%eax
lea 0x1(%rdi,%rax,1),%eax
add %eax,%edx
add %esi,%edx
add %edx,%r8d
add %r8d,%ecx
imul %esi,%edi
lea 0x1(%rcx,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = a1 * a2;
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        if (v6 < a5)
        {
            v7 += a5 + a1;
        }
        else
        {
            v7 += a1 * a3 + a3;
        }
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        v9 += (a3 + a5) - a3;
    }
    v11 = a4 - (a3 * a4) * a4;
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 22
4 22
5 22
6 23
7 23
8 23
9 23
10 23
11 4
12 23
13 24
<<<sep_out_sample>>>
lea (%rsi,%rdi,1),%eax
mov %r8d,%r11d
sub %ecx,%r11d
test %ecx,%ecx
cmovg %eax,%r11d
lea (%rdx,%r8,1),%r10d
cmp %esi,%ecx
mov $0x0,%eax
cmovl %eax,%r10d
cmp %edx,%esi
jle 32 <func1+0x32>
mov %esi,%r9d
sub %ecx,%r9d
sub $0x1,%r9d
imul %edi,%r9d
jmp 3f <func1+0x3f>
mov %edi,%r9d
sub %r8d,%r9d
imul %r8d,%r9d
add %ecx,%r9d
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (v6 < a4)
    {
        v6 = a2 + a1;
    }
    else
    {
        v6 = a5 - a4;
    }
    if (a4 < a2)
    {
        v7 = a1 - a1;
    }
    else
    {
        v7 = ((a3 + a5) + a2) - a2;
    }
    if (a3 < a2)
    {
        v8 = (a2 - a4) * a1 - a1;
    }
    else
    {
        v8 = a4 - (a5 - a1) * a5;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        v9 += a3 + a2 + a4;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 6
6 18
7 18
8 18
9 18
10 20
11 20
12 22
13 22
14 22
15 22
16 22
17 26
18 26
19 26
20 26
21 33
22 33
23 33
24 33
25 33
26 33
27 33
28 34
<<<sep_out_sample>>>
mov %r8d,%eax
imul %esi,%eax
mov %edi,%r9d
sub %eax,%r9d
add %edi,%r9d
mov %ecx,%r10d
sub %r8d,%r10d
test %edx,%edx
mov $0x0,%eax
cmovg %r10d,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %r8d,%esi
lea (%r8,%rcx,2),%eax
lea (%rax,%rsi,1),%eax
lea 0x1(%r9,%rax,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = ((a4 + a5) + a1) - a1;
    v7 = a1 - a5 * a2 + a1;
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        if (a5 < a5)
        {
            v8 += a4 - a2;
        }
        else
        {
            v8 += a5 + (a3 * a1);
        }
    }
    if (v10 < a3)
    {
        v10 = a4 - a5;
    }
    else
    {
        v10 = a2 - a2;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 5
2 5
3 5
4 5
5 5
6 20
7 20
8 20
9 20
10 20
11 26
12 26
13 26
14 26
15 26
16 26
17 26
18 27
<<<sep_out_sample>>>
lea (%rsi,%rsi,1),%eax
test %edx,%edx
jle 12 <func1+0x12>
mov %edi,%eax
imul %edi,%eax
imul %esi,%eax
imul %edx,%eax
add %edx,%edi
add %esi,%edi
add %r8d,%edi
add %ecx,%edi
lea 0x1(%rax,%rdi,1),%eax
imul %esi,%edx
imul %edx,%ecx
sub %ecx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (v6 < a3)
    {
        v6 = (a1 * a1) * a2 * a3;
    }
    else
    {
        v6 = a3 + a2 - a3 + a2;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        if (a5 < a4)
        {
            v7 += (a2 - a1) * a3;
        }
        else
        {
            v7 += a2 - a4 + a4;
        }
    }
    v9 = a2 - (a3 * a2) * a4;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 6
7 6
8 25
9 25
10 25
11 25
12 25
13 24
14 24
15 24
16 25
17 26
<<<sep_out_sample>>>
test %edi,%edi
jle d <func1+0xd>
mov %esi,%r9d
imul %r8d,%r9d
jmp 18 <func1+0x18>
mov %edx,%r9d
imul %edi,%r9d
imul %esi,%r9d
cmp $0x1,%esi
jle 2d <func1+0x2d>
mov %esi,%r10d
sub %edi,%r10d
imul %ecx,%r10d
imul %ecx,%r10d
jmp 34 <func1+0x34>
mov %esi,%r10d
imul %r8d,%r10d
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %r9d,%eax
add %r10d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a4 * a3 + a4;
    }
    if (v8 < a1)
    {
        v8 = ((a2 * a5) + a1) - a1;
    }
    else
    {
        v8 = a3 * a1 * a2;
    }
    if (v7 < a2)
    {
        v9 = ((a2 - a1) * a4) * a4;
    }
    else
    {
        v9 = a2 * a5;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a5)
    {
        v10 += (a1 - a5) - a5;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 15
7 15
8 15
9 17
10 17
11 19
12 19
13 19
14 19
15 19
16 23
17 23
18 30
19 30
20 30
21 30
22 30
23 30
24 31
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x1(%rdx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a5 - a4 - a5 + a3;
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        if (a5 < a2)
        {
            v7 += (a3 + a5) - a2;
        }
        else
        {
            v7 += a4 * (a3 + a5);
        }
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a1)
    {
        if (a1 < a5)
        {
            v9 += (a3 * a3) * a4;
        }
        else
        {
            v9 += (a5 + a5) * a2;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 29
2 29
3 29
4 29
5 30
<<<sep_out_sample>>>
lea (%r8,%rdi,2),%eax
add %eax,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (v6 < a1)
        {
            v6 += a2 + a5 - a5;
        }
        else
        {
            v6 += a2 + a4;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += a5 + a2;
    }
    v10 = a5 + a1;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 22
4 22
5 22
6 23
<<<sep_out_sample>>>
mov %edi,%r11d
imul %r8d,%r11d
imul %edi,%r11d
mov %edi,%r9d
sub %r8d,%r9d
mov %r8d,%r10d
sub %esi,%r10d
cmp %esi,%r9d
mov $0x0,%eax
cmovge %eax,%r10d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea (%r11,%rcx,2),%eax
lea (%rax,%r8,1),%eax
add %eax,%r9d
lea (%r9,%r10,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a4 + a1 * (a1 * a5);
    v7 = (a4 + a1 - a4) - a5;
    if (v7 < a2)
    {
        v8 = (a5 + (a5 - a5)) - a2;
    }
    else
    {
        v8 = a4 - a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 5
5 5
6 8
7 8
8 8
9 8
10 8
11 14
12 14
13 14
14 14
15 14
16 14
17 14
18 15
<<<sep_out_sample>>>
mov %edx,%eax
imul %r8d,%eax
sub %ecx,%eax
lea 0x1(%rdx,%rax,1),%eax
add %eax,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%eax
imul %edi,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a2 - a2 - a3;
    }
    v8 = a1 * a5;
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        if (a1 < a4)
        {
            v9 += a4 + a1 + a5;
        }
        else
        {
            v9 += a1 + a4 * a3;
        }
    }
    v11 = (a3 * a5 - a1) - a4;
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 22
4 23
5 23
6 23
7 23
8 9
9 23
10 24
<<<sep_out_sample>>>
mov %r8d,%r10d
sub %ecx,%r10d
imul %r8d,%r10d
imul %edi,%r10d
cmp %esi,%edx
jge 1b <func1+0x1b>
mov %r8d,%r9d
imul %edx,%r9d
jmp 22 <func1+0x22>
mov %edx,%r9d
imul %ecx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a5 * (a5 - a4) * a1;
    if (a3 < a2)
    {
        v7 = a5 * a3;
    }
    else
    {
        v7 = a3 * a4;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 5
6 5
7 7
8 7
9 7
10 11
11 11
12 13
13 13
14 13
15 13
16 13
17 13
18 14
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += (a4 + a2) - a5;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += (a5 - a5) + a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 14
2 14
3 14
4 14
5 15
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%eax
sub %r8d,%edx
imul %edx,%r8d
add %r8d,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a1 * a1;
    }
    if (a1 < a1)
    {
        v8 = a1 - a2;
    }
    else
    {
        v8 = a1 - (a5 - a3) * a5;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a1)
    {
        if (a5 < a4)
        {
            v9 += a2 - a2 + a5;
        }
        else
        {
            v9 += a2 + a1;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 29
2 29
3 29
4 29
5 15
6 15
7 15
8 29
9 30
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
imul %ecx,%edi
sub %edi,%edx
lea 0x1(%r8,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a3 - (a1 * a4) - a4;
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += (a2 - a4) * a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 4
5 4
6 10
7 11
<<<sep_out_sample>>>
mov %esi,%eax
neg %eax
cmp %ecx,%r8d
jge 10 <func1+0x10>
mov %edi,%eax
neg %eax
sub %r8d,%eax
mov %r8d,%r9d
imul %edx,%r9d
add %edi,%edx
add %esi,%edx
add %r8d,%edx
add %edx,%ecx
add %ecx,%eax
lea (%rax,%r9,1),%ecx
mov %edi,%eax
sub %esi,%eax
add %edi,%eax
sub %r8d,%eax
add %ecx,%eax
add %edi,%r8d
add %r8d,%r9d
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a5 < a4)
    {
        v6 = a3 - a3 - a1 - a5;
    }
    else
    {
        v6 = a4 - a4 - a2;
    }
    v7 = a5 * a3;
    v8 = (a1 - a2 + a1) - a5;
    v9 = a5 + a1 + a3 * a5;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 4
4 4
5 6
6 6
7 6
8 12
9 12
10 15
11 15
12 15
13 15
14 15
15 15
16 13
17 13
18 13
19 13
20 15
21 14
22 14
23 15
24 16
<<<sep_out_sample>>>
push %rbx
mov %r8d,%ebx
imul %edx,%ebx
imul %edi,%ebx
add %r8d,%ebx
mov %edi,%r11d
sub %esi,%r11d
lea (%rcx,%r8,1),%r10d
add %edi,%r10d
sub %edx,%r10d
lea (%rdx,%rdx,1),%r9d
cmp %ecx,%r8d
jle 2d <func1+0x2d>
lea (%rsi,%rdi,2),%r9d
add %edx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %ebx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a1 * (a5 * a3) + a5;
    v7 = (a1 + (a5 - a5)) - a2;
    v8 = a4 + a5 + a1 - a3;
    if (a4 < a5)
    {
        v9 = ((a1 + a2) + a1) + a3;
    }
    else
    {
        v9 = a3 + a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 4
3 4
4 4
5 4
6 5
7 5
8 6
9 6
10 6
11 13
12 7
13 7
14 9
15 9
16 15
17 15
18 15
19 15
20 15
21 15
22 15
23 15
24 16
25 16
<<<sep_out_sample>>>
cmp %r8d,%edi
jge 14 <func1+0x14>
mov $0x1,%r10d
sub %edx,%r10d
imul %r8d,%r10d
jmp 1e <func1+0x1e>
mov %edi,%r10d
imul %edi,%r10d
add %edx,%r10d
cmp %esi,%edi
jle 2b <func1+0x2b>
lea (%rsi,%r8,1),%eax
imul %ecx,%eax
jmp 30 <func1+0x30>
lea (%rcx,%rcx,1),%eax
sub %edx,%eax
cmp %edx,%eax
jge 3a <func1+0x3a>
lea (%rdx,%rdx,1),%r9d
jmp 4a <func1+0x4a>
mov %esi,%r9d
sub %r8d,%r9d
mov %esi,%r11d
imul %edx,%r11d
sub %r11d,%r9d
add %edx,%edi
add %esi,%edi
add %r8d,%edi
add %ecx,%edi
add %r10d,%edi
add %edi,%eax
add %r9d,%eax
sub %ecx,%r8d
sub %esi,%r8d
add %r8d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a1 < a5)
    {
        v6 = a5 - a5 * a3;
    }
    else
    {
        v6 = (a1 * a1) + a3;
    }
    if (a2 < a1)
    {
        v7 = a4 * (a2 + a5);
    }
    else
    {
        v7 = a4 + a4 - a3;
    }
    if (v7 < a3)
    {
        v8 = a3 + a3;
    }
    else
    {
        v8 = a2 - a5 - a2 * a3;
    }
    v9 = a3 - ((a4 - a5) + a2);
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 12
11 12
12 14
13 14
14 14
15 18
16 18
17 20
18 20
19 22
20 22
21 26
22 26
23 26
24 26
25 26
26 29
27 29
28 29
29 29
30 29
31 29
32 29
33 28
34 28
35 28
36 29
37 30
<<<sep_out_sample>>>
mov %r8d,%r9d
imul %edi,%r9d
mov %edx,%eax
imul %esi,%eax
mov %esi,%r10d
imul %edi,%r10d
test %esi,%esi
cmovg %r8d,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a5 * a1;
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        if (a4 < a3)
        {
            v7 += a1 * (a2 + a2);
        }
        else
        {
            v7 += a2 + (a3 * a2);
        }
    }
    v9 = a3 * a2;
    if (v7 < a2)
    {
        v10 = a5 - (a5 - a5) * a3;
    }
    else
    {
        v10 = a2 * a1;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 17
4 17
5 24
6 24
7 24
8 24
9 26
10 26
11 26
12 26
13 26
14 26
15 26
16 27
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a2 * a5;
    }
    v8 = a4 - a4;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 11
<<<sep_out_sample>>>
cmp %edx,%ecx
jge d <func1+0xd>
lea (%rdi,%rsi,1),%eax
sub %ecx,%eax
sub %edx,%eax
jmp 15 <func1+0x15>
lea (%rcx,%rsi,1),%eax
sub %edx,%eax
imul %edi,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %esi,%edx
add %r8d,%edx
lea 0x1(%rcx,%rdx,1),%edx
add %eax,%edx
imul %esi,%r8d
imul %r8d,%ecx
sub %esi,%ecx
lea (%rdx,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += (a2 * a5) * a1;
    }
    if (a4 < a3)
    {
        v8 = (a1 + a2 - a4) - a3;
    }
    else
    {
        v8 = a1 * ((a4 + a2) - a3);
    }
    v9 = a5 * a2 * a4 - a2;
    v10 = 0;
    for (v11 = 0; v11++; v11<a4)
    {
        if (v11 < a2)
        {
            v10 += a5 + a1;
        }
        else
        {
            v10 += a3 + (a3 - a1);
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 15
8 15
9 15
10 30
11 30
12 30
13 30
14 30
15 17
16 17
17 17
18 30
19 31
<<<sep_out_sample>>>
cmp %edx,%r8d
jge f <func1+0xf>
lea (%rsi,%rdi,1),%eax
add %ecx,%eax
add %r8d,%eax
jmp 17 <func1+0x17>
lea (%rdx,%rcx,1),%eax
imul %edx,%eax
sub %ecx,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %esi,%edx
add %r8d,%edx
add %ecx,%edx
add %edx,%eax
add %esi,%eax
imul %r8d,%ecx
mov %esi,%edx
sub %ecx,%edx
imul %edx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a5 < a3)
    {
        v6 = (a2 + a1 + a4) + a5;
    }
    else
    {
        v6 = a3 * (a3 + a4) - a4;
    }
    v7 = a3 - a3 + a2;
    v8 = (a2 - a4 * a5) * a2;
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        v9 += a2 - a4;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 19
11 19
12 19
13 19
14 19
15 19
16 13
17 13
18 13
19 13
20 19
21 20
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%r9d
add %esi,%r9d
add %r8d,%r9d
add %ecx,%r9d
mov $0x1,%eax
sub %ecx,%eax
imul %edi,%eax
sub %edx,%eax
add %r9d,%eax
lea (%rax,%rcx,2),%eax
imul %esi,%r8d
add %edx,%r8d
add %r8d,%edi
add %edi,%eax
add %esi,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a1 - a1 * a4 - a3;
    v7 = a4 + a4;
    v8 = a3 + a2 * a5 + a1;
    v9 = a2 + a3;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 8
2 8
3 8
4 8
5 4
6 4
7 4
8 4
9 8
10 8
11 6
12 6
13 6
14 8
15 7
16 8
17 9
<<<sep_out_sample>>>
mov %edi,%eax
sub %edx,%eax
mov %esi,%r9d
sub %r8d,%r9d
cmp %r8d,%edx
cmovge %r9d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a3 < a5)
    {
        v6 = a1 - a3;
    }
    else
    {
        v6 = (a1 + a2) - a5 - a1;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += (a4 + a1) - a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 6
6 6
7 17
8 17
9 17
10 17
11 17
12 18
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
lea (%r8,%rcx,1),%eax
sub %edi,%esi
imul %ecx,%ecx
sub %ecx,%esi
lea 0x1(%rax,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = (a2 - a1) - a4 * a4;
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        if (a5 < a5)
        {
            v7 += (a2 - a2) + a2;
        }
        else
        {
            v7 += a1 * a5 - a5;
        }
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        v9 += a4 + a4;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 22
4 22
5 4
6 4
7 4
8 22
9 23
<<<sep_out_sample>>>
push %rbx
mov %r8d,%r9d
cmp %ecx,%r8d
jge 16 <func1+0x16>
mov %ecx,%r9d
imul %ecx,%r9d
add %edx,%r9d
add %edi,%r9d
lea (%r8,%rdx,1),%eax
lea (%r8,%rdi,1),%ebx
test %edi,%edi
cmovg %eax,%ebx
cmp %ecx,%r8d
jge 37 <func1+0x37>
mov %esi,%r11d
sub %ecx,%r11d
lea (%rdx,%rdi,1),%eax
imul %eax,%r11d
jmp 3e <func1+0x3e>
mov %edi,%r11d
imul %edi,%r11d
mov %esi,%eax
sub %r8d,%eax
mov %ecx,%r10d
sub %edx,%r10d
cmp %esi,%r8d
cmovg %eax,%r10d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
add %ebx,%eax
add %r11d,%eax
add %r10d,%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a5 < a4)
    {
        v6 = (a4 * a4) + a3 + a1;
    }
    else
    {
        v6 = (a4 - a4) + a5;
    }
    if (v7 < a1)
    {
        v7 = a5 + a3;
    }
    else
    {
        v7 = a5 + a1;
    }
    if (a5 < a4)
    {
        v8 = (a2 - a4) * (a3 + a1);
    }
    else
    {
        v8 = a1 * a1;
    }
    if (a2 < a5)
    {
        v9 = a2 - a5;
    }
    else
    {
        v9 = (a2 + a4) - a3 - a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 10
3 4
4 4
5 6
6 6
7 6
8 6
9 14
10 14
11 14
12 14
13 20
14 20
15 22
16 22
17 22
18 22
19 22
20 26
21 26
22 30
23 30
24 30
25 30
26 30
27 30
28 36
29 36
30 36
31 36
32 36
33 36
34 36
35 36
36 37
37 37
<<<sep_out_sample>>>
push %rbx
cmp %ecx,%edi
jge 10 <func1+0x10>
mov %edi,%eax
imul %edx,%eax
lea (%rax,%rcx,2),%r10d
jmp 1b <func1+0x1b>
lea (%rdi,%r8,1),%r10d
mov %ecx,%eax
sub %edx,%eax
add %eax,%r10d
cmp %r8d,%r10d
jge 28 <func1+0x28>
mov %ecx,%ebx
neg %ebx
sub %esi,%ebx
jmp 2f <func1+0x2f>
lea (%rsi,%r8,1),%ebx
imul %esi,%ebx
mov %esi,%r9d
sub %r8d,%r9d
imul %r8d,%r9d
imul %ecx,%r9d
mov %edx,%r11d
sub %r8d,%r11d
cmp %r9d,%edx
jg 56 <func1+0x56>
mov %r8d,%r11d
imul %r8d,%r11d
add %esi,%r11d
imul %edx,%r11d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r10d
add %ebx,%r10d
add %r10d,%r9d
lea (%r9,%r11,1),%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a1 < a4)
    {
        v6 = a1 * a3 + a4 + a4;
    }
    else
    {
        v6 = a1 + a5 + (a4 - a3);
    }
    if (v6 < a5)
    {
        v7 = (a3 - a3) - a4 - a2;
    }
    else
    {
        v7 = (a2 + a5) * a2;
    }
    v8 = (a5 * (a2 - a5)) * a4;
    if (v8 < a3)
    {
        v9 = ((a5 - a5) - a5) + a3;
    }
    else
    {
        v9 = a3 * (a5 * a5 + a2);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 4
3 4
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 12
13 12
14 14
15 14
16 14
17 14
18 18
19 18
20 20
21 20
22 20
23 20
24 23
25 23
26 21
27 21
28 27
29 27
30 27
31 27
32 29
33 29
34 29
35 29
36 29
37 29
38 29
39 29
40 30
41 30
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
lea (%rdi,%r8,2),%ecx
lea (%rcx,%rdx,1),%r8d
add %r8d,%eax
mov %edi,%esi
sub %edx,%esi
add %esi,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a2 < a2)
    {
        v6 = a2 + a5;
    }
    else
    {
        v6 = a3 + a5 + (a5 + a1);
    }
    v7 = a1 - a3 + a1;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 13
2 13
3 13
4 13
5 10
6 10
7 13
8 12
9 12
10 12
11 13
12 14
<<<sep_out_sample>>>
cmp %edi,%esi
jge f <func1+0xf>
mov %ecx,%eax
sub %esi,%eax
sub %edx,%eax
imul %edi,%eax
jmp 17 <func1+0x17>
mov %edi,%eax
sub %ecx,%eax
imul %r8d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a2 < a1)
    {
        v6 = (a4 - a2 - a3) * a1;
    }
    else
    {
        v6 = a1 * a5 - a5 * a4;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        if (v7 < a4)
        {
            v7 += a2 + a2 - a4;
        }
        else
        {
            v7 += (a5 - a3) + a1;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 24
12 24
13 24
14 24
15 24
16 25
<<<sep_out_sample>>>
cmp %edi,%edx
jle f <func1+0xf>
mov %esi,%eax
imul %esi,%eax
imul %r8d,%eax
jmp 18 <func1+0x18>
mov %ecx,%eax
imul %esi,%eax
sub %edi,%eax
sub %edx,%eax
lea (%rdi,%rsi,2),%r9d
cmp %ecx,%r8d
jl 2c <func1+0x2c>
lea -0x1(%rdx),%r9d
imul %r8d,%r9d
add %esi,%r9d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (v6 < a3)
        {
            v6 += a1 - a5;
        }
        else
        {
            v6 += (a5 + a4) - a5;
        }
    }
    if (a1 < a3)
    {
        v8 = a5 * (a2 * a2);
    }
    else
    {
        v8 = a4 * a2 - a1 - a3;
    }
    if (a5 < a4)
    {
        v9 = (a1 + a2) + a2;
    }
    else
    {
        v9 = ((a3 * a5) - a5) + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 18
7 22
8 22
9 22
10 22
11 26
12 24
13 24
14 30
15 30
16 30
17 32
18 32
19 32
20 32
21 32
22 32
23 33
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (a3 < a4)
        {
            v6 += (a4 * a5) - a5;
        }
        else
        {
            v6 += (a5 + a3) * a4;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        if (a4 < a4)
        {
            v8 += (a3 + a5) * a2;
        }
        else
        {
            v8 += a1 + a3;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 28
2 28
3 28
4 28
5 29
<<<sep_out_sample>>>
lea (%rsi,%rcx,1),%r10d
add %r8d,%r10d
add %edx,%r10d
cmp %ecx,%esi
jle 1c <func1+0x1c>
mov %r8d,%eax
imul %ecx,%eax
imul %edi,%eax
imul %ecx,%eax
jmp 21 <func1+0x21>
mov %ecx,%eax
imul %edi,%eax
mov %edi,%r9d
cmp %ecx,%eax
jge 36 <func1+0x36>
mov %ecx,%r9d
imul %edi,%r9d
sub %r8d,%r9d
imul %edi,%r9d
add %r9d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r10d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a2 + a4 + a5 + a3;
    if (a4 < a2)
    {
        v7 = (a5 * a4 * a1) * a4;
    }
    else
    {
        v7 = a4 * a1;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += (a5 - a4) + a3;
    }
    if (v7 < a4)
    {
        v10 = (a4 * a1 - a5) * a1;
    }
    else
    {
        v10 = (a1 + a3) - a3;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 5
5 5
6 7
7 7
8 7
9 7
10 7
11 11
12 11
13 24
14 18
15 18
16 20
17 20
18 20
19 20
20 26
21 26
22 26
23 26
24 26
25 26
26 26
27 27
<<<sep_out_sample>>>
mov %edi,%r10d
imul %ecx,%r10d
imul %esi,%r10d
add %ecx,%r10d
cmp %r8d,%ecx
jle 20 <func1+0x20>
mov %r8d,%r9d
imul %edi,%r9d
imul %esi,%r9d
jmp 30 <func1+0x30>
mov %ecx,%r9d
sub %edi,%r9d
mov %ecx,%r11d
imul %esi,%r11d
sub %r11d,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a4 + ((a1 * a4) * a2);
    if (a5 < a4)
    {
        v7 = (a5 * a1) * a2;
    }
    else
    {
        v7 = a4 - a1 - a4 * a2;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 5
6 5
7 7
8 7
9 7
10 7
11 11
12 11
13 11
14 11
15 11
16 13
17 13
18 13
19 13
20 13
21 13
22 14
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a1 * a4 * a4;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        if (a4 < a4)
        {
            v8 += a1 * a3;
        }
        else
        {
            v8 += (a3 - a5) - a2;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 21
5 22
<<<sep_out_sample>>>
mov %esi,%r10d
sub %edx,%r10d
add %edi,%r10d
mov %edi,%r9d
sub %ecx,%r9d
cmp %edi,%edx
jg 1a <func1+0x1a>
mov %r8d,%r9d
imul %r8d,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = (a2 - a3) + a1;
    if (a1 < a3)
    {
        v7 = a1 - a4;
    }
    else
    {
        v7 = a5 * a5;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 7
5 7
6 5
7 5
8 11
9 11
10 13
11 13
12 13
13 13
14 13
15 13
16 14
<<<sep_out_sample>>>
mov %esi,%eax
sub %r8d,%eax
cmp %ecx,%r8d
jl 17 <func1+0x17>
lea (%rdx,%rdi,1),%r9d
mov %r8d,%eax
imul %esi,%eax
add %r9d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a5 < a4)
    {
        v6 = (a5 - a5 + a2) - a5;
    }
    else
    {
        v6 = a3 + a1 + a5 * a2;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += a5 + a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 6
2 6
3 4
4 4
5 10
6 10
7 10
8 10
9 17
10 17
11 17
12 17
13 17
14 18
<<<sep_out_sample>>>
lea -0x1(%rdx),%eax
imul %ecx,%eax
add %r8d,%eax
lea (%rcx,%rsi,1),%r9d
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (v7 < a5)
        {
            v6 += a3 + a5;
        }
        else
        {
            v6 += a2 - (a1 - a4);
        }
    }
    v8 = (a4 * a3) - a4 + a5;
    if (v7 < a5)
    {
        v9 = a4 + a2;
    }
    else
    {
        v9 = (a2 - a2) + a4 + a2;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a5)
    {
        v10 += (a5 * a1) * a5;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 16
4 23
5 30
6 30
7 30
8 30
9 30
10 30
11 31
<<<sep_out_sample>>>
cmp %edi,%edx
jge b <func1+0xb>
lea (%rdx,%rsi,2),%eax
sub %edi,%eax
jmp 18 <func1+0x18>
mov $0x1,%eax
sub %esi,%eax
imul %edi,%eax
add %r8d,%eax
lea (%rdi,%rcx,1),%r9d
mov %r8d,%r10d
sub %r9d,%r10d
lea 0x1(%rsi,%r10,1),%r9d
add %r9d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    if (a3 < a1)
    {
        v6 = a2 + a3 + a2 - a1;
    }
    else
    {
        v6 = (a1 - (a2 * a1)) + a5;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        if (a1 < a2)
        {
            v7 += (a2 - a4) - a4;
        }
        else
        {
            v7 += a1 + a1 + a5;
        }
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        v9 += a4 * a5;
    }
    v11 = (a5 - (a1 + a4)) + a2;
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 10
10 29
11 29
12 29
13 30
14 30
15 30
16 30
17 30
18 30
19 30
20 31
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
add %ecx,%r8d
add %esi,%edx
imul %ecx,%esi
sub %esi,%edx
lea (%r8,%rdx,1),%eax
imul %edi,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a3 + a2 - a4 * a2;
    v7 = a4 * a1;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 4
7 4
8 6
9 5
10 6
11 7
<<<sep_out_sample>>>
lea (%rdi,%rcx,1),%r9d
sub %r8d,%r9d
add %edx,%r9d
lea (%rdx,%rsi,1),%eax
sub %edi,%eax
add %edx,%eax
cmp %eax,%esi
jle 24 <func1+0x24>
mov %ecx,%r10d
imul %edx,%r10d
sub %r8d,%r10d
sub %edi,%r10d
jmp 37 <func1+0x37>
mov %esi,%r10d
imul %esi,%r10d
mov %edx,%r11d
sub %r10d,%r11d
mov %r11d,%r10d
sub %ecx,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a1 + a4 - a5 + a3;
    if (a5 < a5)
    {
        v7 = a2 - a5;
    }
    else
    {
        v7 = a3 + a2 - a1 + a3;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        if (v7 < a5)
        {
            v8 += (a1 + a3) + a3;
        }
        else
        {
            v8 += a1 - a4;
        }
    }
    if (v7 < a2)
    {
        v10 = (a4 * a3 - a5) - a1;
    }
    else
    {
        v10 = (a3 - a2 * a2) - a4;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 11
5 11
6 11
7 25
8 25
9 27
10 27
11 27
12 27
13 27
14 31
15 31
16 31
17 31
18 31
19 31
20 33
21 33
22 33
23 33
24 33
25 33
26 33
27 34
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
lea (%r8,%rcx,1),%eax
imul %ecx,%esi
imul %esi,%edi
add %edx,%edi
add %edi,%eax
sub %ecx,%edx
add $0x1,%edx
imul %edx,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = (a4 * a2 * a1) + a3;
    v7 = (a3 - a4) * a4 + a4;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 4
7 4
8 6
9 5
10 5
11 5
12 6
13 7
<<<sep_out_sample>>>
mov %edx,%r9d
imul %edx,%r9d
test %esi,%esi
jle 18 <func1+0x18>
lea (%rcx,%rdi,1),%r10d
imul %edx,%r10d
add %ecx,%r10d
jmp 1e <func1+0x1e>
mov $0x0,%r10d
add %edi,%edx
add %edx,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%eax
add %r9d,%eax
add %r10d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (v6 < a4)
        {
            v6 += a2 - a2 + a2;
        }
        else
        {
            v6 += a1 + a4 + a1;
        }
    }
    v8 = a3 * a3;
    if (v9 < a2)
    {
        v9 = (a3 * (a4 + a1)) + a4;
    }
    else
    {
        v9 = a4 - a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 17
4 17
5 19
6 19
7 19
8 19
9 23
10 25
11 25
12 25
13 25
14 25
15 25
16 26
<<<sep_out_sample>>>
lea (%rcx,%r8,1),%eax
cmp %edi,%esi
jge f <func1+0xf>
mov %edx,%eax
neg %eax
sub %r8d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a2 < a1)
    {
        v6 = a1 - (a3 + a1) - a5;
    }
    else
    {
        v6 = a3 + ((a4 - a3) + a5);
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += a2 + a1 - a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 6
7 17
8 17
9 17
10 17
11 17
12 18
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %r8d,%esi
add %ecx,%esi
imul %r8d,%ecx
lea (%rcx,%r8,2),%eax
lea 0x1(%rsi,%rax,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a5 + a5 + a5 * a4;
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += a3 - (a5 - a1);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 4
6 4
7 10
8 11
<<<sep_out_sample>>>
test %ecx,%ecx
jle c <func1+0xc>
mov %esi,%eax
imul %r8d,%eax
jmp 19 <func1+0x19>
lea (%rsi,%rcx,1),%r9d
mov %edx,%eax
imul %r8d,%eax
add %r9d,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += (a2 + a5) * a5;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        if (a5 < a5)
        {
            v8 += a5 * a2 - a1;
        }
        else
        {
            v8 += a1 + (a3 * a1);
        }
    }
    if (v8 < a4)
    {
        v10 = a2 * a5 + a1 - a1;
    }
    else
    {
        v10 = a2 + a4 + (a3 * a5);
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 23
4 23
5 23
6 27
7 27
8 27
9 27
10 29
11 29
12 29
13 29
14 29
15 30
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%eax
imul %r8d,%edx
sub %edx,%ecx
add %ecx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (a5 < a4)
        {
            v6 += (a3 * a4) - a5;
        }
        else
        {
            v6 += a1 - a3 * a5;
        }
    }
    v8 = a4 - (a3 * a5) + a5;
    v9 = 0;
    for (v10 = 0; v10++; v10<a1)
    {
        v9 += a1 + a2 * a1;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 22
4 22
5 16
6 16
7 16
8 22
9 23
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
mov %r8d,%r9d
sub %edx,%r9d
add %r9d,%eax
add %r8d,%edx
add %edi,%edx
imul %edx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a5 - a3;
    v7 = a1 * ((a5 + a3) + a1);
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 4
7 6
8 5
9 5
10 5
11 6
12 7
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
lea (%r8,%rcx,1),%eax
sub %edx,%esi
sub %edx,%esi
add %esi,%edi
add %eax,%edi
imul %ecx,%edx
lea 0x1(%rdi,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    if (a2 < a2)
    {
        v6 = (a5 + a4 + a4) + a1;
    }
    else
    {
        v6 = a1 + ((a2 - a3) - a3);
    }
    if (a3 < a3)
    {
        v7 = a5 - a3 - (a3 + a4);
    }
    else
    {
        v7 = a3 * a4;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += a1 - a2 * a5;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a4)
    {
        if (v9 < a1)
        {
            v10 += (a2 - a3) * a1;
        }
        else
        {
            v10 += a2 + (a4 - a2);
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 37
2 37
3 37
4 37
5 10
6 10
7 10
8 37
9 18
10 37
11 38
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
lea 0x1(%rcx,%rax,1),%eax
add %edx,%edi
add %edi,%eax
imul %r8d,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (a5 < a2)
        {
            v6 += (a2 * a2) + a2;
        }
        else
        {
            v6 += (a4 - a1) - a5;
        }
    }
    v8 = a1 + a3;
    v9 = a2 * a5;
    v10 = 0;
    for (v11 = 0; v11++; v11<a3)
    {
        if (a4 < a4)
        {
            v10 += a3 + a2 * a1;
        }
        else
        {
            v10 += (a4 - a3) * a4;
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 30
2 30
3 30
4 30
5 16
6 30
7 17
8 30
9 31
<<<sep_out_sample>>>
lea (%r8,%rcx,1),%eax
mov %r8d,%r9d
imul %edi,%r9d
sub %r9d,%eax
lea 0x1(%rdi,%rax,1),%eax
add %eax,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rcx,%rdi,2),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = a1 + a1;
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a3 * a2 * a4;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        if (a4 < a1)
        {
            v9 += a3 * a5 * a4;
        }
        else
        {
            v9 += a4 + a2 - a3;
        }
    }
    v11 = a5 + a4 - a5 * a1;
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 22
4 22
5 23
6 23
7 23
8 23
9 23
10 23
11 24
<<<sep_out_sample>>>
add %edx,%edi
lea 0x1(%rsi,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = ((a5 - a5) - a4) - a5;
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += a2 + a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 11
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %r8d,%edx
add %ecx,%edx
imul %esi,%edi
imul %edi,%ecx
add %ecx,%r8d
lea 0x1(%rdx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a5 + (a2 * a1 * a4);
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        if (v7 < a4)
        {
            v7 += a4 + a1 - a3;
        }
        else
        {
            v7 += a2 - (a2 - a2);
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 4
6 4
7 4
8 17
9 18
<<<sep_out_sample>>>
cmp %edi,%esi
jge d <func1+0xd>
mov %esi,%eax
imul %esi,%eax
neg %eax
jmp 14 <func1+0x14>
mov %edi,%eax
sub %esi,%eax
imul %edi,%eax
lea (%rdi,%rdx,1),%r9d
add %esi,%r9d
add %r9d,%r8d
add %r8d,%ecx
add %eax,%ecx
imul %esi,%esi
imul %esi,%edx
add %edx,%edi
lea 0x1(%rcx,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a2 < a1)
    {
        v6 = a4 - a2 * a2 - a4;
    }
    else
    {
        v6 = (a1 - a2) * a1;
    }
    if (a3 < a3)
    {
        v7 = a5 * a5;
    }
    else
    {
        v7 = a1 + a2 * a2 * a3;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += (a3 + a3) * a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 25
11 25
12 25
13 25
14 25
15 18
16 18
17 18
18 25
19 26
<<<sep_out_sample>>>
cmp %edi,%ecx
jge 14 <func1+0x14>
lea (%rsi,%rsi,1),%r10d
mov %esi,%r9d
imul %esi,%r9d
sub %r9d,%r10d
jmp 1b <func1+0x1b>
mov %esi,%r10d
imul %ecx,%r10d
cmp %r8d,%ecx
jle 30 <func1+0x30>
mov %esi,%eax
imul %edx,%eax
imul %esi,%eax
mov %edx,%r9d
sub %eax,%r9d
jmp 3a <func1+0x3a>
mov %edi,%r9d
imul %edx,%r9d
add %r8d,%r9d
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
add %esi,%ecx
add %r10d,%ecx
add %r9d,%ecx
imul %edi,%edi
sub %edi,%edx
sub %r8d,%edx
lea (%rcx,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a4 < a1)
    {
        v6 = a2 + a2 - a2 * a2;
    }
    else
    {
        v6 = a2 * a4;
    }
    if (a5 < a4)
    {
        v7 = a3 - (a2 * a3 * a2);
    }
    else
    {
        v7 = a1 * a3 + a5;
    }
    v8 = (a3 - a1 * a1) - a5;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 12
11 12
12 14
13 14
14 14
15 14
16 14
17 14
18 18
19 18
20 18
21 21
22 21
23 21
24 21
25 21
26 21
27 20
28 20
29 20
30 21
31 22
<<<sep_out_sample>>>
mov %esi,%r9d
sub %r8d,%r9d
test %r8d,%r8d
mov $0x0,%eax
cmovle %eax,%r9d
mov %ecx,%eax
neg %eax
sub %esi,%eax
cmp %ecx,%edx
jge 25 <func1+0x25>
mov %esi,%eax
imul %ecx,%eax
imul %r8d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (v6 < a5)
    {
        v6 = a2 - a5;
    }
    else
    {
        v6 = a4 - a4;
    }
    if (a3 < a4)
    {
        v7 = a2 * a4 * a5;
    }
    else
    {
        v7 = (a5 - a4) - a5 - a2;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 6
6 18
7 18
8 18
9 12
10 12
11 14
12 14
13 14
14 20
15 20
16 20
17 20
18 20
19 20
20 21
<<<sep_out_sample>>>
cmp %edi,%edx
jge 9 <func1+0x9>
lea (%rcx,%rcx,1),%eax
jmp 15 <func1+0x15>
mov %r8d,%eax
imul %r8d,%eax
imul %esi,%eax
add %edi,%eax
add %edi,%edx
add %esi,%edx
add %edx,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
add %ecx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (a3 < a1)
        {
            v6 += a4 - a5 - a5;
        }
        else
        {
            v6 += a2 - a4;
        }
    }
    if (a3 < a1)
    {
        v8 = a3 + a4 - (a3 - a4);
    }
    else
    {
        v8 = (a5 * a5) * a2 + a1;
    }
    v9 = a2 + a4;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 22
6 22
7 22
8 22
9 25
10 25
11 25
12 25
13 25
14 24
15 25
16 26
<<<sep_out_sample>>>
cmp %r8d,%esi
jle 13 <func1+0x13>
mov %r8d,%eax
imul %ecx,%eax
sub $0x1,%eax
imul %edx,%eax
jmp 19 <func1+0x19>
lea (%rcx,%rdi,1),%eax
imul %esi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a1 * a2;
    }
    if (a5 < a2)
    {
        v8 = (a5 * a4 * a3) - a3;
    }
    else
    {
        v8 = a4 * a2 + a2 * a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 11
8 15
9 15
10 17
11 17
12 17
13 17
14 17
15 18
<<<sep_out_sample>>>
add %edx,%edi
add %esi,%edi
add %r8d,%edi
lea 0x1(%rcx,%rdi,1),%eax
add %esi,%r8d
add %eax,%r8d
imul %esi,%edx
add %edx,%ecx
sub %esi,%ecx
lea (%r8,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (a5 < a1)
        {
            v6 += a3 - a3 - a2;
        }
        else
        {
            v6 += a5 - a3 * a2;
        }
    }
    v8 = a2 + a5;
    if (a1 < a1)
    {
        v9 = (a3 * a2) * a2;
    }
    else
    {
        v9 = (a4 + a2 * a3) - a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 25
2 25
3 25
4 25
5 16
6 25
7 23
8 23
9 23
10 25
11 26
<<<sep_out_sample>>>
mov %ecx,%r9d
imul %ecx,%r9d
add %edi,%r9d
imul %edi,%r9d
test %esi,%esi
jle 1b <func1+0x1b>
lea (%r8,%rdi,2),%eax
imul %ecx,%eax
jmp 22 <func1+0x22>
mov %esi,%eax
imul %ecx,%eax
add %edx,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = (a1 + a4 * a4) * a1;
    if (v7 < a2)
    {
        v7 = ((a5 + a1) + a1) * a4;
    }
    else
    {
        v7 = a3 + (a2 * a4);
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 5
6 5
7 7
8 7
9 7
10 11
11 11
12 11
13 13
14 13
15 13
16 13
17 13
18 13
19 14
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
lea (%r8,%rcx,1),%eax
add %esi,%edi
add %edi,%ecx
sub %edx,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a4 + (a1 + a2) - a3;
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += a3 + a1;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        if (a1 < a4)
        {
            v9 += a2 - a4 + a2;
        }
        else
        {
            v9 += (a3 + a4) - a2;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 22
4 22
5 4
6 4
7 4
8 22
9 23
<<<sep_out_sample>>>
mov %ecx,%r10d
imul %edi,%r10d
sub %esi,%r10d
sub %r8d,%r10d
mov %edx,%eax
sub %edi,%eax
lea (%rsi,%rdx,1),%r9d
cmp %r8d,%ecx
cmovg %eax,%r9d
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
lea (%rcx,%r8,2),%edx
add %edx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = (a4 * a1 - a2) - a5;
    if (a5 < a4)
    {
        v7 = (a2 - (a2 - a3)) - a1;
    }
    else
    {
        v7 = a2 + a3;
    }
    v8 = (a4 + (a5 + a5)) + a2;
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        if (v9 < a2)
        {
            v9 += a5 * a5 + a2;
        }
        else
        {
            v9 += a3 - a1 + a4;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 7
6 7
7 7
8 7
9 7
10 26
11 26
12 26
13 26
14 26
15 26
16 13
17 13
18 26
19 27
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += (a5 - a5) + a2;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        if (a3 < a5)
        {
            v8 += a1 + a3;
        }
        else
        {
            v8 += (a5 - a3) - a3;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 21
5 22
<<<sep_out_sample>>>
mov %r8d,%r10d
sub %ecx,%r10d
test %r8d,%r8d
jle 1b <func1+0x1b>
mov %edi,%r9d
sub %r8d,%r9d
imul %ecx,%r9d
imul %esi,%r9d
jmp 2a <func1+0x2a>
mov %edi,%r9d
imul %edi,%r9d
imul %edi,%r9d
imul %esi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
sub %r8d,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = ((a3 + a5) - a3) - a4;
    if (v7 < a5)
    {
        v7 = a4 * (a1 - a5) * a2;
    }
    else
    {
        v7 = (a1 * (a1 * a1)) * a2;
    }
    v8 = a1 - a5;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 5
4 5
5 7
6 7
7 7
8 7
9 7
10 11
11 11
12 11
13 11
14 14
15 14
16 14
17 14
18 14
19 14
20 13
21 14
22 15
<<<sep_out_sample>>>
test %edi,%edi
jle 9 <func1+0x9>
lea (%rdi,%rdi,1),%eax
jmp 14 <func1+0x14>
mov %edi,%eax
imul %esi,%eax
imul %edi,%eax
imul %ecx,%eax
mov %r8d,%r10d
sub %esi,%r10d
mov %r8d,%r9d
imul %r8d,%r9d
add %r10d,%r9d
add %edi,%r9d
add %r9d,%edx
add %edx,%esi
add %esi,%r8d
add %ecx,%r8d
lea 0x1(%rax,%r8,1),%eax
add $0x2,%edi
imul %edi,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (v6 < a1)
    {
        v6 = a1 + a1;
    }
    else
    {
        v6 = a4 * (a1 * (a1 * a2));
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += (a1 - a4) * a1;
    }
    v9 = a4 + (a1 * a4) + a4;
    v10 = a5 - a2 + a5 * a5;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 10
6 10
7 10
8 10
9 18
10 18
11 18
12 18
13 18
14 19
15 19
16 19
17 19
18 19
19 19
20 17
21 17
22 19
23 20
<<<sep_out_sample>>>
lea (%rcx,%rdi,1),%eax
lea (%rdi,%r8,1),%r9d
add %edx,%eax
cmp %ecx,%edx
cmovl %r9d,%eax
lea 0x1(%rdi,%rdx,1),%edi
add %esi,%edi
add %edi,%r8d
lea 0x1(%rcx,%r8,1),%edi
add %edi,%eax
add $0x1,%edx
imul %edx,%ecx
imul %ecx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a3 + a5 - a4;
    }
    if (a3 < a4)
    {
        v8 = (a1 + a5) - (a3 - a3);
    }
    else
    {
        v8 = (a4 + a1) + a3;
    }
    v9 = a2 * (a4 + a4 * a3);
    v10 = 0;
    for (v11 = 0; v11++; v11<a3)
    {
        if (v9 < a1)
        {
            v10 += a4 + a3;
        }
        else
        {
            v10 += (a2 * a1) + a2;
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 15
2 11
3 11
4 11
5 11
6 30
7 30
8 30
9 30
10 30
11 17
12 17
13 17
14 30
15 31
<<<sep_out_sample>>>
mov %edi,%r9d
imul %r8d,%r9d
sub %esi,%r9d
add %edi,%r9d
cmp %esi,%r8d
jle 1c <func1+0x1c>
lea (%r8,%rdi,1),%eax
sub %edx,%eax
sub %edx,%eax
jmp 27 <func1+0x27>
mov %ecx,%eax
imul %esi,%eax
imul %edi,%eax
imul %edx,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = a1 * a5 - a2 + a1;
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += a2 + (a3 - a3);
    }
    if (a2 < a5)
    {
        v9 = ((a5 + a1) - a3) - a3;
    }
    else
    {
        v9 = a4 * a2 * a1 * a3;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a2)
    {
        v10 += (a4 - a1) - a2;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 10
6 10
7 12
8 12
9 12
10 12
11 16
12 16
13 16
14 16
15 23
16 23
17 23
18 23
19 23
20 23
21 24
<<<sep_out_sample>>>
lea (%r8,%rdx,1),%r10d
add %ecx,%r10d
add %esi,%r10d
mov %r8d,%eax
sub %esi,%eax
cmp %ecx,%edx
jle 1d <func1+0x1d>
mov %esi,%eax
imul %edi,%eax
imul %ecx,%eax
add %esi,%eax
cmp %esi,%ecx
jle 2f <func1+0x2f>
mov %ecx,%r9d
sub %edx,%r9d
sub %edx,%r9d
sub %esi,%r9d
jmp 3c <func1+0x3c>
lea (%rdx,%rdi,2),%r9d
mov %edx,%r11d
sub %r9d,%r11d
mov %r11d,%r9d
add %edx,%edi
add %esi,%edi
add %r8d,%edi
add %ecx,%edi
add %r10d,%edi
add %edi,%eax
add %r9d,%eax
sub %ecx,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a3 < a3)
    {
        v6 = a1 * a5 - a2 - a4;
    }
    else
    {
        v6 = a5 + a3 + a4 + a2;
    }
    if (a4 < a3)
    {
        v7 = a2 * a1 * a4 + a2;
    }
    else
    {
        v7 = a5 - a2;
    }
    if (a2 < a4)
    {
        v8 = a4 - a3 - a3 - a2;
    }
    else
    {
        v8 = a3 - ((a3 + a1) + a1);
    }
    v9 = a2 + (a3 - a4) + a5;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 18
5 18
6 12
7 12
8 14
9 14
10 14
11 14
12 20
13 20
14 22
15 22
16 22
17 22
18 22
19 26
20 26
21 26
22 26
23 29
24 29
25 29
26 29
27 29
28 29
29 29
30 28
31 28
32 28
33 29
34 30
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (v7 < a2)
        {
            v6 += a3 * a3;
        }
        else
        {
            v6 += a5 + a4 + a1;
        }
    }
    v8 = a2 - a2;
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        v9 += a3 + a4 * a4;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 22
4 22
5 23
<<<sep_out_sample>>>
test %r8d,%r8d
jle 13 <func1+0x13>
mov %edx,%r9d
sub %r8d,%r9d
add %esi,%r9d
sub %r8d,%r9d
jmp 1c <func1+0x1c>
lea -0x1(%rdi,%rsi,1),%r9d
imul %r8d,%r9d
mov %esi,%eax
sub %r8d,%eax
cmp %ecx,%r8d
jge 2f <func1+0x2f>
mov %esi,%eax
imul %edi,%eax
sub %ecx,%eax
sub %edx,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    if (v6 < a5)
    {
        v6 = a3 - a5 + a2 - a5;
    }
    else
    {
        v6 = ((a2 + a1) * a5) - a5;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        if (a5 < a5)
        {
            v7 += a4 + a5 * a4;
        }
        else
        {
            v7 += a3 + a2 - a4;
        }
    }
    if (a5 < a4)
    {
        v9 = a2 * a1 - a4 - a3;
    }
    else
    {
        v9 = a2 - a5;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a3)
    {
        if (v9 < a3)
        {
            v10 += a4 - a2;
        }
        else
        {
            v10 += a3 + a3 - a3;
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 30
11 30
12 24
13 24
14 26
15 26
16 26
17 26
18 44
19 44
20 44
21 44
22 44
23 44
24 45
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
lea 0x1(%rcx,%rax,1),%ecx
lea (%r8,%r8,1),%eax
imul %edx,%eax
sub %esi,%eax
add %ecx,%eax
imul %esi,%edx
imul %edx,%esi
imul %esi,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a4 * a2 + a2;
    }
    if (a4 < a4)
    {
        v8 = a5 - (a4 - a1) * a4;
    }
    else
    {
        v8 = (a3 * (a5 + a5)) - a2;
    }
    v9 = a2 * a3 * a2 * a1;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 18
5 15
6 15
7 15
8 18
9 17
10 17
11 17
12 18
13 19
<<<sep_out_sample>>>
lea (%rsi,%rdi,1),%r10d
imul %edi,%r10d
lea (%rdx,%rdi,1),%r9d
cmp %ecx,%esi
jg 21 <func1+0x21>
mov %r8d,%eax
imul %r8d,%eax
imul %r8d,%eax
mov %edi,%r9d
sub %eax,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = (a1 * a2) + a1 * a1;
    if (a4 < a2)
    {
        v7 = a3 + a1;
    }
    else
    {
        v7 = a1 - ((a5 * a5) * a5);
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 7
4 5
5 5
6 11
7 11
8 11
9 11
10 11
11 13
12 13
13 13
14 13
15 13
16 13
17 14
<<<sep_out_sample>>>
mov %edx,%r11d
sub %esi,%r11d
mov %edx,%eax
imul %ecx,%eax
imul %edx,%eax
mov %esi,%r10d
sub %eax,%r10d
lea (%rcx,%rdi,1),%r9d
cmp %esi,%edx
mov $0x0,%eax
cmovl %eax,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
sub %r8d,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a2 < a2)
    {
        v6 = (a2 * a4) + a1 - a4;
    }
    else
    {
        v6 = a3 - a2;
    }
    v7 = a2 - a3 * a4 * a3;
    if (a3 < a2)
    {
        v8 = a5 - a5;
    }
    else
    {
        v8 = (a4 + a2 - a2) + a1;
    }
    v9 = a2 - a5;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 12
4 12
5 12
6 12
7 12
8 19
9 19
10 19
11 19
12 22
13 22
14 22
15 22
16 22
17 22
18 22
19 21
20 22
21 23
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += (a2 - a5) - a4;
    }
    v8 = a3 - a2 + a2;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 10
6 11
<<<sep_out_sample>>>
mov %edx,%r9d
sub %edi,%r9d
cmp %edi,%ecx
jge 1d <func1+0x1d>
mov %ecx,%eax
imul %r8d,%eax
mov %edx,%r11d
sub %eax,%r11d
mov %r11d,%eax
sub %ecx,%eax
jmp 2d <func1+0x2d>
mov %ecx,%eax
imul %ecx,%eax
mov %r8d,%r10d
sub %eax,%r10d
mov %r10d,%eax
sub %edx,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %r9d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a4 * a5 + a5;
    }
    v8 = a3 - a1;
    if (a4 < a1)
    {
        v9 = a3 - a4 * a5 - a4;
    }
    else
    {
        v9 = a5 - (a4 * a4) - a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 10
4 10
5 12
6 12
7 12
8 12
9 12
10 12
11 12
12 16
13 16
14 16
15 16
16 16
17 16
18 18
19 18
20 18
21 18
22 18
23 18
24 19
<<<sep_out_sample>>>
mov %edx,%eax
imul %edi,%eax
add %esi,%eax
sub %edx,%eax
lea (%rsi,%rsi,1),%r10d
cmp %eax,%esi
jle 1d <func1+0x1d>
mov %edi,%r10d
sub %esi,%r10d
sub %r8d,%r10d
sub %edx,%r10d
lea (%rcx,%rdi,1),%r9d
test %r8d,%r8d
jle 30 <func1+0x30>
lea (%rsi,%rdi,1),%r9d
add %r8d,%r9d
add %edx,%r9d
add %r9d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%eax
lea 0x1(%r10,%rax,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = (a2 + a3 * a1) - a3;
    if (v6 < a2)
    {
        v7 = ((a1 - a2) - a5) - a3;
    }
    else
    {
        v7 = a2 + a2;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += a1 * a2;
    }
    if (v8 < a5)
    {
        v10 = a3 + (a5 + (a2 + a1));
    }
    else
    {
        v10 = a4 + a1;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 11
6 5
7 5
8 7
9 7
10 7
11 7
12 24
13 18
14 18
15 20
16 20
17 20
18 26
19 26
20 26
21 26
22 26
23 26
24 26
25 27
<<<sep_out_sample>>>
lea (%rsi,%rdi,1),%r9d
mov %edi,%eax
imul %edi,%eax
add %eax,%r9d
test %edx,%edx
jle 1c <func1+0x1c>
mov %esi,%eax
imul %edi,%eax
sub %ecx,%eax
sub %r8d,%eax
jmp 27 <func1+0x27>
mov %ecx,%eax
imul %r8d,%eax
imul %esi,%eax
add %edi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a2 + a1 + a1 * a1;
    if (v7 < a3)
    {
        v7 = a2 * a1 - a4 - a5;
    }
    else
    {
        v7 = (a2 * (a4 * a5)) + a1;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 5
6 5
7 7
8 7
9 7
10 7
11 7
12 11
13 11
14 11
15 11
16 13
17 13
18 13
19 13
20 13
21 13
22 14
<<<sep_out_sample>>>
lea 0x2(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea (%r8,%rcx,1),%esi
imul %ecx,%edi
lea 0x1(%rsi,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = a1 * a4;
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += (a1 * a2) * a5;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        if (v9 < a5)
        {
            v9 += (a4 - a5) - a3;
        }
        else
        {
            v9 += a2 - a5 - a2;
        }
    }
    v11 = 0;
    for (v12 = 0; v12++; v12<a2)
    {
        v11 += (a1 * a2) + a2;
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 27
2 27
3 27
4 27
5 4
6 27
7 28
<<<sep_out_sample>>>
lea (%rsi,%rdi,1),%r10d
cmp %edx,%ecx
jl f <func1+0xf>
mov %r8d,%r10d
imul %edi,%r10d
cmp %edi,%esi
jge 1e <func1+0x1e>
mov %edi,%r9d
neg %r9d
sub %r8d,%r9d
jmp 2b <func1+0x2b>
mov $0x1,%r9d
sub %ecx,%r9d
imul %esi,%r9d
cmp %edi,%r9d
jge 38 <func1+0x38>
lea (%rsi,%rsi,2),%eax
add %r8d,%eax
jmp 48 <func1+0x48>
mov %ecx,%eax
imul %edi,%eax
mov %esi,%r11d
sub %eax,%r11d
mov %r11d,%eax
sub %edi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r10d,%ecx
add %ecx,%r9d
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a4 < a3)
    {
        v6 = a2 + a1;
    }
    else
    {
        v6 = a5 * a1;
    }
    if (a2 < a1)
    {
        v7 = (a5 - a5) - a1 - a5;
    }
    else
    {
        v7 = a2 - (a4 * a2);
    }
    if (v7 < a1)
    {
        v8 = a2 + (a2 + a2) + a5;
    }
    else
    {
        v8 = a2 - a4 * a1 - a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 6
2 4
3 4
4 10
5 10
6 12
7 12
8 14
9 14
10 14
11 14
12 18
13 18
14 18
15 20
16 20
17 22
18 22
19 22
20 26
21 26
22 26
23 26
24 26
25 26
26 28
27 28
28 28
29 28
30 28
31 28
32 28
33 29
<<<sep_out_sample>>>
mov %edi,%ecx
imul %esi,%ecx
mov $0x1,%eax
sub %ecx,%eax
imul %esi,%eax
add %edi,%eax
add %eax,%edx
add %edx,%esi
lea (%rsi,%r8,2),%eax
add %r8d,%edi
lea 0x1(%rax,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a5 - a4;
    v7 = a1 + a5;
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += a5 * a2 * a1;
    }
    v10 = a2 - (a1 * a2) * a2;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 11
5 11
6 12
7 12
8 12
9 12
10 5
11 12
12 13
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
imul %esi,%ecx
imul %ecx,%r8d
add %esi,%r8d
add %eax,%r8d
add %edx,%esi
imul %edi,%edx
add %esi,%edx
lea 0x1(%r8,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a5 * (a2 * a4) + a2;
    v7 = a3 + a2 + a1 * a3;
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += a4 - a1 * a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 11
5 4
6 4
7 4
8 11
9 5
10 5
11 5
12 11
13 12
<<<sep_out_sample>>>
mov %edx,%r11d
imul %esi,%r11d
mov %esi,%r9d
imul %r8d,%r9d
add $0x1,%r9d
imul %esi,%r9d
mov %edi,%r10d
sub %r8d,%r10d
imul %edi,%r10d
add %esi,%r10d
mov $0x0,%eax
cmp %r9d,%esi
jle 33 <func1+0x33>
lea (%rdi,%r8,1),%eax
add %edx,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r11d,%ecx
add %ecx,%r9d
add %r10d,%r9d
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a3 * a2;
    v7 = (a2 * a5 * a2) + a2;
    v8 = (a1 * (a1 - a5)) + a2;
    if (v7 < a2)
    {
        v9 = a1 + a5 + a3;
    }
    else
    {
        v9 = (a4 - a4) * a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 5
4 5
5 5
6 5
7 6
8 6
9 6
10 6
11 13
12 7
13 7
14 9
15 9
16 15
17 15
18 15
19 15
20 15
21 15
22 15
23 15
24 16
<<<sep_out_sample>>>
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea (%r8,%rcx,1),%esi
imul %ecx,%edi
lea 0x1(%rsi,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = (a4 * a1) - (a1 - a1);
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        if (v8 < a5)
        {
            v7 += (a2 - a2) + a2;
        }
        else
        {
            v7 += a2 - a5 - a3;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 4
6 17
7 18
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a1 - (a4 * a5);
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        if (a1 < a1)
        {
            v8 += (a5 * a4) * a4;
        }
        else
        {
            v8 += a5 * a5;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 21
5 22
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%eax
add %r8d,%edx
sub %ecx,%edx
imul %edx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a2 * a4 - a1;
    }
    v8 = (a5 + a3 - a4) * a5;
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        v9 += a5 + a1 * a3;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 15
2 15
3 15
4 15
5 9
6 9
7 9
8 15
9 16
<<<sep_out_sample>>>
lea (%rsi,%rsi,1),%r11d
test %esi,%esi
jle 15 <func1+0x15>
lea 0x1(%rcx),%r10d
imul %r8d,%r10d
add %edi,%r10d
jmp 22 <func1+0x22>
mov %esi,%r10d
imul %edx,%r10d
add %edi,%r10d
sub %esi,%r10d
lea (%rdx,%rdx,1),%r9d
cmp %edx,%ecx
jle 38 <func1+0x38>
mov %edi,%eax
imul %edi,%eax
mov %ecx,%r9d
sub %eax,%r9d
add %edx,%r9d
add %r9d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %r11d,%eax
add %r10d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a1 + a5;
    }
    v8 = a2 + a2;
    if (v9 < a2)
    {
        v9 = a1 + (a5 + (a5 * a4));
    }
    else
    {
        v9 = (a1 + a2 * a3) - a2;
    }
    if (a3 < a4)
    {
        v10 = (a4 - (a1 * a1)) + a3;
    }
    else
    {
        v10 = a3 + a3;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 10
3 10
4 12
5 12
6 12
7 12
8 16
9 16
10 16
11 16
12 24
13 18
14 18
15 20
16 20
17 20
18 20
19 20
20 26
21 26
22 26
23 26
24 26
25 26
26 26
27 27
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
lea 0x1(%rcx,%r8,1),%ecx
mov %edi,%eax
imul %esi,%eax
sub %edx,%eax
sub %esi,%eax
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (a2 < a3)
        {
            v6 += a2 - a3 - a4;
        }
        else
        {
            v6 += a2 * a5 * a3;
        }
    }
    v8 = a1 * a2 - a3 - a2;
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        v9 += a3 * a2 - a3;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 22
4 22
5 16
6 16
7 16
8 16
9 22
10 23
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += (a3 - a2) * a5;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += (a2 - a3) * a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 14
2 14
3 14
4 14
5 15
<<<sep_out_sample>>>
mov %esi,%eax
sub %r8d,%eax
add %edi,%edx
add %esi,%edx
add %edx,%r8d
add %r8d,%ecx
add %eax,%ecx
add $0x1,%edi
imul %edi,%esi
lea 0x1(%rcx,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a2 - a5 + a4 - a4;
    v7 = a2 + (a2 * a1);
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += (a5 - a2) - a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 11
4 11
5 11
6 11
7 11
8 5
9 5
10 11
11 12
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %edx,%r8d
lea (%r8,%rcx,1),%eax
sub %esi,%edi
add %edi,%eax
imul %ecx,%ecx
add %ecx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a1 - a2;
    v7 = a2 + a4 * a4;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 6
7 5
8 5
9 6
10 7
<<<sep_out_sample>>>
cmp %ecx,%edi
jge b <func1+0xb>
mov %edi,%eax
imul %esi,%eax
jmp 12 <func1+0x12>
lea 0x1(%rsi),%eax
imul %r8d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += (a3 * a3) * a1;
    }
    if (a1 < a4)
    {
        v8 = a1 * a2;
    }
    else
    {
        v8 = a5 + a5 * a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 15
7 15
8 17
9 17
10 17
11 17
12 17
13 18
<<<sep_out_sample>>>
test %edx,%edx
jle e <func1+0xe>
lea 0x2(%rcx),%r9d
imul %esi,%r9d
jmp 17 <func1+0x17>
mov %r8d,%r9d
sub %edi,%r9d
sub %edx,%r9d
cmp %esi,%ecx
jge 26 <func1+0x26>
mov %ecx,%eax
imul %edi,%eax
add %edx,%eax
add %edi,%eax
jmp 2d <func1+0x2d>
mov %ecx,%eax
imul %ecx,%eax
sub %edi,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    if (v6 < a3)
    {
        v6 = a2 * a4 + a2 + a2;
    }
    else
    {
        v6 = (a5 - a1) - a3;
    }
    if (a4 < a2)
    {
        v7 = a3 + a4 * a1 + a1;
    }
    else
    {
        v7 = (a4 * a4) - a1;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += a4 * (a3 + a1);
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a1)
    {
        v10 += a5 - (a1 + a5);
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 12
10 12
11 14
12 14
13 14
14 14
15 14
16 18
17 18
18 18
19 30
20 30
21 30
22 30
23 30
24 30
25 31
<<<sep_out_sample>>>
mov %ecx,%eax
imul %edi,%eax
lea (%rax,%rsi,2),%r10d
add %edx,%edi
mov %edi,%eax
sub %ecx,%eax
sub %r8d,%eax
mov %ecx,%r9d
sub %esi,%r9d
cmp %r8d,%esi
jle 27 <func1+0x27>
mov %esi,%r9d
sub %ecx,%r9d
imul %edx,%r9d
add %esi,%edi
add %edi,%r8d
add %r8d,%ecx
add %r10d,%ecx
add %ecx,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = (a4 * a1 + a2) + a2;
    v7 = ((a1 + a3) - a4) - a5;
    if (a5 < a2)
    {
        v8 = (a2 * a3) - a3 * a4;
    }
    else
    {
        v8 = a4 - a2 + (a4 - a4);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 5
5 5
6 5
7 5
8 12
9 12
10 6
11 6
12 8
13 8
14 8
15 14
16 14
17 14
18 14
19 14
20 14
21 15
<<<sep_out_sample>>>
cmp $0x1,%esi
jle c <func1+0xc>
mov %r8d,%eax
sub %edx,%eax
jmp 13 <func1+0x13>
lea (%r8,%rdx,1),%eax
lea (%rax,%rcx,2),%eax
lea 0x1(%rax,%rdi,1),%eax
add %eax,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a4 - (a3 + a1);
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += (a5 * a4) - a1;
    }
    if (v9 < a2)
    {
        v10 = a5 - a3;
    }
    else
    {
        v10 = a5 + a3 + a4 + a4;
    }
    v11 = 0;
    for (v12 = 0; v12++; v12<a5)
    {
        v11 += a1 - a1 * a2;
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 14
2 14
3 16
4 16
5 16
6 20
7 20
8 27
9 27
10 27
11 27
12 27
13 28
<<<sep_out_sample>>>
mov %esi,%r9d
imul %edx,%r9d
sub %ecx,%r9d
add %esi,%r9d
mov %edi,%eax
sub %esi,%eax
cmp %r8d,%edx
jge 1f <func1+0x1f>
mov %esi,%eax
imul %esi,%eax
sub %edx,%eax
add %esi,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a2 * a3 - a4 + a2;
    if (a3 < a5)
    {
        v7 = (a2 * a2 - a3) + a2;
    }
    else
    {
        v7 = a1 - a2;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        if (a5 < a5)
        {
            v8 += a5 + a5;
        }
        else
        {
            v8 += (a4 + a4) + a1;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 11
6 11
7 5
8 5
9 7
10 7
11 7
12 7
13 25
14 25
15 25
16 25
17 25
18 25
19 26
<<<sep_out_sample>>>
mov %edx,%r9d
sub %edi,%r9d
mov %ecx,%eax
imul %r8d,%eax
add %eax,%r9d
lea (%rsi,%rdx,1),%eax
cmp $0x1,%esi
jg 26 <func1+0x26>
mov %ecx,%eax
imul %ecx,%eax
mov %edi,%r10d
imul %r8d,%r10d
sub %r10d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a3 - a1 + a4 * a5;
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a3 + a3;
    }
    if (v8 < a2)
    {
        v9 = a3 + a3 + (a2 - a3);
    }
    else
    {
        v9 = (a4 * a4) - a1 * a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 4
6 12
7 10
8 10
9 16
10 16
11 16
12 16
13 16
14 18
15 18
16 18
17 18
18 18
19 18
20 19
<<<sep_out_sample>>>
mov %edx,%eax
sub %esi,%eax
cmp %edx,%esi
jge 12 <func1+0x12>
mov %edi,%eax
imul %edx,%eax
add %r8d,%eax
sub %ecx,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a2 < a3)
    {
        v6 = (a5 + a1 * a3) - a4;
    }
    else
    {
        v6 = a3 - a2;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a2 * a5 + a1;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        v9 += a3 - a4 + a4;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 4
4 4
5 6
6 6
7 6
8 6
9 22
10 22
11 22
12 22
13 22
14 23
<<<sep_out_sample>>>
cmp %ecx,%edx
jge e <func1+0xe>
mov %ecx,%eax
imul %edx,%eax
imul %esi,%eax
jmp 16 <func1+0x16>
mov %edi,%eax
imul %ecx,%eax
imul %eax,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %r8d,%esi
add %esi,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a3 < a4)
    {
        v6 = a2 * (a4 * a3);
    }
    else
    {
        v6 = a4 * ((a1 * a1) * a4);
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += a5 * a3;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        if (v10 < a5)
        {
            v9 += a2 + a1 + a2;
        }
        else
        {
            v9 += a1 - (a1 - a1);
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 29
11 29
12 29
13 29
14 29
15 30
<<<sep_out_sample>>>
mov %edx,%eax
sub %ecx,%eax
sub %r8d,%eax
sub %edi,%eax
lea (%r8,%rdi,1),%r10d
cmp %r8d,%edx
mov $0x0,%r9d
cmovle %r10d,%r9d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = (a3 - a4) - a5 - a1;
    if (a5 < a3)
    {
        v7 = a4 - a4;
    }
    else
    {
        v7 = a5 + a1;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 11
6 11
7 11
8 11
9 13
10 13
11 13
12 13
13 13
14 13
15 14
<<<sep_out_sample>>>
cmp %r8d,%edx
jge e <func1+0xe>
mov %edx,%r11d
imul %ecx,%r11d
jmp 1c <func1+0x1c>
mov %edx,%r11d
sub %r8d,%r11d
imul %esi,%r11d
imul %edi,%r11d
cmp %edi,%r8d
jle 2e <func1+0x2e>
mov %esi,%eax
imul %ecx,%eax
mov %edi,%r10d
sub %eax,%r10d
jmp 3c <func1+0x3c>
mov %ecx,%r10d
imul %r8d,%r10d
imul %ecx,%r10d
sub %r8d,%r10d
cmp %edi,%r8d
jge 4e <func1+0x4e>
lea -0x1(%rcx),%r9d
imul %ecx,%r9d
sub %r8d,%r9d
jmp 55 <func1+0x55>
lea (%rsi,%rdi,2),%r9d
sub %edx,%r9d
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a3 < a5)
    {
        v6 = a3 * (a1 + a4 - a1);
    }
    else
    {
        v6 = a2 * (a3 - a5) * a1;
    }
    if (a1 < a5)
    {
        v7 = a1 - a2 * a4;
    }
    else
    {
        v7 = a4 * a5 * a4 - a5;
    }
    if (a5 < a1)
    {
        v8 = ((a4 * a4) - a4) - a5;
    }
    else
    {
        v8 = a1 - a3 + a2 + a1;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        v9 += a4 + a5 * a3;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 10
10 12
11 12
12 14
13 14
14 14
15 14
16 14
17 18
18 18
19 18
20 18
21 20
22 20
23 22
24 22
25 22
26 22
27 26
28 26
29 33
30 33
31 33
32 33
33 33
34 33
35 33
36 34
<<<sep_out_sample>>>
cmp %r8d,%ecx
jge 10 <func1+0x10>
lea (%rcx,%r8,1),%eax
imul %edx,%eax
sub %edi,%eax
jmp 17 <func1+0x17>
mov %edx,%eax
imul %edi,%eax
sub %esi,%eax
cmp %edi,%eax
jge 2b <func1+0x2b>
lea (%r8,%rcx,1),%r10d
mov %r8d,%r9d
imul %edi,%r9d
add %r9d,%r10d
jmp 32 <func1+0x32>
mov %r8d,%r10d
imul %edx,%r10d
cmp %edi,%edx
jle 40 <func1+0x40>
lea 0x1(%r8),%r9d
imul %esi,%r9d
jmp 4d <func1+0x4d>
mov %edi,%r9d
sub %edx,%r9d
imul %edi,%r9d
sub %edx,%r9d
add %edx,%edi
add %edi,%esi
add %r8d,%esi
add %esi,%ecx
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
lea (%rax,%r8,2),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a4 < a5)
    {
        v6 = (a4 + a5) * a3 - a1;
    }
    else
    {
        v6 = (a3 * a1) - a2;
    }
    if (v6 < a1)
    {
        v7 = a5 + a4 + a5 * a1;
    }
    else
    {
        v7 = a5 * a3;
    }
    if (a1 < a3)
    {
        v8 = a2 + a2 * a5;
    }
    else
    {
        v8 = (a1 - a3) * a1 - a3;
    }
    if (a3 < a3)
    {
        v9 = (a4 * a2) - a1 - a3;
    }
    else
    {
        v9 = a5 + (a2 + a5 - a2);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 12
11 12
12 14
13 14
14 14
15 14
16 14
17 18
18 18
19 20
20 20
21 22
22 22
23 22
24 26
25 26
26 26
27 26
28 36
29 36
30 36
31 36
32 36
33 36
34 36
35 36
36 37
<<<sep_out_sample>>>
mov %esi,%eax
sub %ecx,%eax
sub %r8d,%eax
sub %edi,%eax
mov %ecx,%r9d
imul %r8d,%r9d
mov %esi,%r10d
sub %r9d,%r10d
add %ecx,%r10d
mov $0x0,%r9d
mov %edx,%r11d
imul %ecx,%r11d
cmp %edi,%r8d
cmovl %r11d,%r9d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = (a2 - a4 - a5) - a1;
    v7 = a2 - a4 * a5 + a4;
    if (a5 < a1)
    {
        v8 = a4 - (a4 - a3 * a4);
    }
    else
    {
        v8 = a5 - a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 5
6 5
7 5
8 5
9 5
10 12
11 8
12 8
13 8
14 8
15 14
16 14
17 14
18 14
19 14
20 14
21 14
22 15
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %ecx,%edi
imul %edx,%ecx
add %edi,%ecx
add %eax,%ecx
add %edx,%edx
sub %r8d,%edx
sub %esi,%edx
lea 0x1(%rcx,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a1 + a4 + a4 * a3;
    v7 = ((a3 + a3) - a5) - a2;
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        if (a5 < a4)
        {
            v8 += a2 + a5;
        }
        else
        {
            v8 += (a2 - a3) - a5;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 18
5 4
6 4
7 4
8 18
9 5
10 5
11 5
12 18
13 19
<<<sep_out_sample>>>
lea (%rcx,%r8,1),%r9d
add %esi,%r9d
cmp $0x1,%esi
jle 1d <func1+0x1d>
mov %edi,%r10d
imul %esi,%r10d
mov %edi,%eax
sub %esi,%eax
imul %r10d,%eax
jmp 22 <func1+0x22>
mov %edi,%eax
imul %edx,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a2 + (a4 + a5);
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        if (v7 < a2)
        {
            v7 += a4 * a4 - a3;
        }
        else
        {
            v7 += a2 + a1;
        }
    }
    if (v8 < a2)
    {
        v9 = (a1 * a2) * (a1 - a2);
    }
    else
    {
        v9 = a1 * a3;
    }
    v10 = a1 - a1;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 17
4 17
5 19
6 19
7 19
8 19
9 19
10 19
11 23
12 23
13 26
14 26
15 26
16 26
17 26
18 26
19 27
<<<sep_out_sample>>>
lea (%rcx,%rcx,1),%r9d
cmp %esi,%r8d
jge 17 <func1+0x17>
mov %r8d,%r9d
sub %esi,%r9d
mov %edi,%eax
imul %edx,%eax
sub %eax,%r9d
cmp %ecx,%r9d
jge 23 <func1+0x23>
mov %esi,%eax
imul %edx,%eax
jmp 2d <func1+0x2d>
mov %edx,%eax
sub %r8d,%eax
imul %edx,%eax
add %ecx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a5 < a2)
    {
        v6 = a5 - a2 - a1 * a3;
    }
    else
    {
        v6 = a1 + (a4 - a1) + a4;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += a1 + a1;
    }
    if (v6 < a4)
    {
        v9 = a2 * a3;
    }
    else
    {
        v9 = ((a3 - a5) * a3) + a4;
    }
    v10 = a1 - a1;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 6
7 6
8 6
9 17
10 17
11 19
12 19
13 19
14 23
15 23
16 23
17 23
18 26
19 26
20 26
21 26
22 26
23 26
24 27
<<<sep_out_sample>>>
add %edx,%edi
add %esi,%edi
add %r8d,%edi
lea 0x1(%rcx,%rdi,1),%eax
lea 0x1(%rdx,%r8,1),%edx
imul %edx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += (a3 + a4) * a1;
    }
    v8 = a2 + a2 * (a3 + a5);
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 9
6 9
7 10
8 11
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %edx,%r8d
imul %esi,%esi
sub %edi,%esi
lea (%r8,%rcx,2),%eax
lea 0x1(%rax,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a5 - a3;
    }
    v8 = a2 * a2 - a1 + a4;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 9
5 9
6 9
7 10
8 11
<<<sep_out_sample>>>
mov %ecx,%eax
imul %r8d,%eax
lea (%rsi,%r8,1),%r9d
lea (%rdx,%rax,1),%r10d
cmp %esi,%r8d
cmovle %r10d,%r9d
lea 0x1(%r9,%rdi,1),%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a3 * a5;
    }
    v8 = a4 * a5;
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        v9 += a4 + a4 * a2;
    }
    if (a2 < a5)
    {
        v11 = a2 + a5;
    }
    else
    {
        v11 = a3 + a5 * a4;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 17
4 17
5 17
6 17
7 23
8 23
9 23
10 23
11 23
12 23
13 24
<<<sep_out_sample>>>
mov $0x1,%r10d
sub %ecx,%r10d
imul %ecx,%r10d
sub %r8d,%r10d
mov %r8d,%eax
imul %edx,%eax
mov %esi,%r11d
sub %eax,%r11d
mov %r11d,%eax
add %edi,%eax
mov %edx,%r9d
sub %esi,%r9d
cmp $0x1,%edx
jle 34 <func1+0x34>
lea (%r8,%rcx,1),%r9d
lea (%r9,%rdi,2),%r9d
add %r9d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r10,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a4 - a4 * a4 - a5;
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        if (v7 < a5)
        {
            v7 += a3 * a3 * a5;
        }
        else
        {
            v7 += a3 - a4;
        }
    }
    v9 = a1 - ((a5 * a3) - a2);
    if (v8 < a3)
    {
        v10 = a1 + (a5 + a4) + a1;
    }
    else
    {
        v10 = (a3 - a2) + a1 - a1;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 17
6 17
7 17
8 17
9 17
10 17
11 24
12 24
13 18
14 18
15 20
16 20
17 26
18 26
19 26
20 26
21 26
22 26
23 26
24 27
<<<sep_out_sample>>>
mov %edx,%r10d
imul %ecx,%r10d
test %esi,%esi
jle 1a <func1+0x1a>
mov %edx,%r9d
imul %r8d,%r9d
add %esi,%r9d
sub %ecx,%r9d
jmp 25 <func1+0x25>
lea 0x1(%rcx),%r9d
imul %ecx,%r9d
add %edi,%r9d
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (a4 < a2)
        {
            v6 += a5 - (a1 * a5);
        }
        else
        {
            v6 += a2 * a2 - a2;
        }
    }
    v8 = a3 * a4;
    if (v9 < a2)
    {
        v9 = a2 + a3 * a5 - a4;
    }
    else
    {
        v9 = (a4 + a4 * a4) + a1;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a4)
    {
        if (v10 < a5)
        {
            v10 += a2 - a1;
        }
        else
        {
            v10 += a1 - a4 * a4;
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 17
4 17
5 19
6 19
7 19
8 19
9 19
10 23
11 23
12 23
13 37
14 37
15 37
16 37
17 37
18 37
19 38
<<<sep_out_sample>>>
lea (%rcx,%rsi,1),%r9d
imul %edx,%r9d
sub %r8d,%r9d
mov %edi,%eax
cmp %r8d,%edx
jle 18 <func1+0x18>
lea (%rsi,%rdx,2),%eax
sub %r8d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a2 < a2)
    {
        v6 = a4 + a3;
    }
    else
    {
        v6 = ((a4 + a2) * a3) - a5;
    }
    if (a5 < a3)
    {
        v7 = a2 + ((a3 + a3) - a5);
    }
    else
    {
        v7 = a1 - a2 + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 18
5 12
6 12
7 14
8 14
9 20
10 20
11 20
12 20
13 20
14 20
15 21
<<<sep_out_sample>>>
lea (%rdi,%r8,1),%eax
lea (%r8,%rcx,1),%r9d
cmp %edi,%esi
cmovl %eax,%r9d
add %edi,%edx
sub %r8d,%edi
add %edx,%esi
add %r8d,%esi
add %esi,%ecx
add %r9d,%ecx
add %edx,%r8d
lea (%rcx,%r8,1),%edx
lea (%rdi,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a2 < a1)
    {
        v6 = a1 + a5;
    }
    else
    {
        v6 = a5 + a4;
    }
    v7 = a1 + a3 + a5;
    v8 = a1 - a1;
    v9 = a1 - a5;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 12
6 14
7 15
8 15
9 15
10 15
11 12
12 15
13 15
14 16
<<<sep_out_sample>>>
cmp %ecx,%esi
jge 12 <func1+0x12>
mov %edx,%r9d
sub %edi,%r9d
lea (%rsi,%rdx,1),%eax
add %eax,%r9d
jmp 1a <func1+0x1a>
lea 0x1(%rsi),%r9d
imul %esi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
imul %edx,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a2 < a4)
    {
        v6 = a3 - a1 + (a2 + a3);
    }
    else
    {
        v6 = a2 * a2 + a2;
    }
    v7 = a3 * a4;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 13
11 13
12 13
13 13
14 13
15 12
16 13
17 14
<<<sep_out_sample>>>
lea (%rdx,%r8,1),%r9d
mov %esi,%eax
sub %edi,%eax
test %edx,%edx
jg 15 <func1+0x15>
mov %r8d,%eax
imul %ecx,%eax
imul %ecx,%eax
mov %edi,%r10d
imul %edi,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = (a3 + a5) - (a2 - a2);
    if (v7 < a3)
    {
        v7 = a2 - a5 + a5 - a1;
    }
    else
    {
        v7 = a4 * (a5 * a4);
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += a5 - (a5 - a1);
    }
    v10 = a1 * a1;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 7
3 7
4 5
5 5
6 11
7 11
8 11
9 18
10 18
11 19
12 19
13 19
14 19
15 19
16 19
17 19
18 20
<<<sep_out_sample>>>
add %edx,%edi
add %esi,%edi
add %edi,%r8d
lea (%r8,%rcx,1),%edi
mov %edx,%eax
imul %esi,%eax
imul %esi,%eax
add %eax,%edi
add %ecx,%edx
imul %edx,%esi
imul %esi,%ecx
lea 0x1(%rdi,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a2 * (a3 * a2);
    v7 = ((a3 + a4) * a2) * a4;
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += a4 - (a5 - a3);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 11
5 4
6 4
7 4
8 11
9 5
10 5
11 5
12 11
13 12
<<<sep_out_sample>>>
mov %esi,%eax
cmp %esi,%r8d
jg 14 <func1+0x14>
mov %ecx,%r9d
sub %r8d,%r9d
lea (%rdi,%rdx,1),%eax
imul %r9d,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (a5 < a3)
        {
            v6 += (a2 - a5) + a5;
        }
        else
        {
            v6 += a4 + a1 - a3;
        }
    }
    if (a2 < a5)
    {
        v8 = (a3 - a3) * a5 + a2;
    }
    else
    {
        v8 = (a4 - a5) * (a1 + a3);
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        v9 += (a2 + a4) - a2;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 16
3 16
4 22
5 22
6 22
7 22
8 29
9 29
10 29
11 29
12 29
13 30
<<<sep_out_sample>>>
cmp %r8d,%ecx
jge 10 <func1+0x10>
mov %edi,%r11d
sub %ecx,%r11d
add %edx,%r11d
jmp 18 <func1+0x18>
lea (%rcx,%rdx,1),%r11d
imul %edi,%r11d
lea (%rsi,%rcx,1),%r10d
cmp %esi,%edx
jg 27 <func1+0x27>
mov %edi,%r10d
imul %r8d,%r10d
cmp %esi,%ecx
jle 3a <func1+0x3a>
mov %edi,%r9d
imul %edx,%r9d
add %ecx,%r9d
sub %esi,%r9d
jmp 48 <func1+0x48>
lea (%r8,%rdi,1),%eax
mov %edx,%r9d
sub %eax,%r9d
imul %esi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a4 < a5)
    {
        v6 = a1 - a4 + a3;
    }
    else
    {
        v6 = (a4 * a1) + a1 * a3;
    }
    if (a2 < a3)
    {
        v7 = a2 + a4;
    }
    else
    {
        v7 = a1 * a5;
    }
    if (a2 < a4)
    {
        v8 = (a1 * a3 + a4) - a2;
    }
    else
    {
        v8 = a2 * (a3 - (a5 + a1));
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 14
10 12
11 12
12 18
13 18
14 20
15 20
16 22
17 22
18 22
19 22
20 22
21 26
22 26
23 26
24 26
25 28
26 28
27 28
28 28
29 28
30 28
31 28
32 29
<<<sep_out_sample>>>
mov %edx,%r9d
sub %edi,%r9d
cmp %ecx,%edx
jle 17 <func1+0x17>
mov %edi,%eax
imul %edx,%eax
imul %r8d,%eax
add %ecx,%eax
jmp 1e <func1+0x1e>
mov %ecx,%eax
sub %edx,%eax
imul %esi,%eax
mov %edi,%r10d
sub %ecx,%r10d
mov %esi,%r11d
imul %ecx,%r11d
sub %r11d,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a3 - a1;
    if (a4 < a3)
    {
        v7 = a1 * a3 * a5 + a4;
    }
    else
    {
        v7 = (a4 - a3) * a2;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        if (a3 < a4)
        {
            v8 += (a1 - a4) + a1;
        }
        else
        {
            v8 += (a4 + a2) - a1;
        }
    }
    v10 = a1 - a4 - a2 * a4;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 5
4 5
5 7
6 7
7 7
8 7
9 7
10 11
11 11
12 11
13 25
14 25
15 25
16 25
17 25
18 26
19 26
20 26
21 26
22 26
23 26
24 26
25 27
<<<sep_out_sample>>>
mov %r8d,%eax
sub %edi,%eax
mov %esi,%r9d
sub %r8d,%r9d
cmp %esi,%edi
cmovge %r9d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a1 < a2)
    {
        v6 = a5 - a1;
    }
    else
    {
        v6 = a2 - a5;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += a3 - a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 6
6 6
7 17
8 17
9 17
10 17
11 17
12 18
<<<sep_out_sample>>>
lea (%rcx,%rdx,1),%eax
lea (%r8,%rdi,1),%r9d
cmp %edi,%esi
cmovl %eax,%r9d
mov %ecx,%eax
sub %r8d,%eax
mov %r8d,%r10d
imul %edi,%r10d
cmp %edx,%ecx
cmovl %r10d,%eax
mov %edx,%r10d
sub %ecx,%r10d
add %edi,%r10d
imul %r8d,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a2 < a1)
    {
        v6 = a4 + a3;
    }
    else
    {
        v6 = a5 + a1;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += a4 * a4;
    }
    if (a4 < a3)
    {
        v9 = a5 * a1;
    }
    else
    {
        v9 = a4 - (a5 + a3 - a3);
    }
    v10 = (a3 - a4 + a1) * a5;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 23
6 23
7 19
8 19
9 19
10 19
11 25
12 25
13 25
14 25
15 26
16 26
17 26
18 26
19 26
20 26
21 26
22 27
<<<sep_out_sample>>>
test %r8d,%r8d
jle 15 <func1+0x15>
mov %ecx,%r9d
imul %r8d,%r9d
imul %edx,%r9d
add %r8d,%r9d
jmp 21 <func1+0x21>
lea (%rdx,%r8,1),%r9d
imul %edi,%r9d
imul %edx,%r9d
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
lea (%rdx,%rsi,1),%r9d
imul %esi,%ecx
add %r9d,%ecx
add %eax,%ecx
add %esi,%r8d
sub %edi,%r8d
sub %edx,%r8d
lea (%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (v6 < a5)
    {
        v6 = a5 + a4 * a5 * a3;
    }
    else
    {
        v6 = a3 * (a1 * (a3 + a5));
    }
    v7 = a3 + a2 + a2 * a4;
    v8 = ((a5 + a2) - a1) - a3;
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        v9 += a4 * a3 - a5;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 19
12 19
13 19
14 19
15 19
16 12
17 12
18 12
19 19
20 13
21 13
22 13
23 19
24 20
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %ecx,%eax
sub %edx,%eax
sub %esi,%edi
imul %ecx,%edi
imul %edi,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = (a1 - a5 - a1) - a3;
    v7 = (a4 * (a1 - a2)) * a4;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 4
4 6
5 5
6 5
7 5
8 6
9 7
<<<sep_out_sample>>>
cmp %ecx,%r8d
jge f <func1+0xf>
lea (%rdx,%rsi,1),%eax
add %r8d,%eax
sub %ecx,%eax
jmp 18 <func1+0x18>
lea (%r8,%rsi,1),%eax
imul %edx,%eax
add %esi,%eax
cmp %esi,%edx
jge 25 <func1+0x25>
mov %edi,%r9d
imul %edx,%r9d
jmp 2c <func1+0x2c>
mov %ecx,%r9d
imul %edi,%r9d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a5 < a4)
    {
        v6 = (a3 + a2 + a5) - a4;
    }
    else
    {
        v6 = (a5 + a2) * a3 + a2;
    }
    if (a3 < a2)
    {
        v7 = ((a1 - a1) + a1) * a3;
    }
    else
    {
        v7 = a4 * a1;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 12
11 12
12 14
13 14
14 14
15 18
16 18
17 20
18 20
19 20
20 20
21 20
22 20
23 21
<<<sep_out_sample>>>
lea (%rdx,%rcx,1),%eax
mov %esi,%r9d
imul %edi,%r9d
cmp %esi,%r8d
cmovl %r9d,%eax
add %edx,%edi
add %edi,%esi
add %r8d,%esi
add %esi,%ecx
add %ecx,%eax
imul %edx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a5 < a2)
    {
        v6 = a2 * a1;
    }
    else
    {
        v6 = a4 + a4 + a3 - a4;
    }
    v7 = a5 * a3;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 10
2 6
3 6
4 6
5 6
6 13
7 13
8 13
9 13
10 13
11 12
12 13
13 14
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
mov %ecx,%r9d
imul %edi,%r9d
add %edx,%r9d
lea (%rax,%rcx,2),%eax
sub %r9d,%eax
imul %edi,%esi
add %ecx,%esi
add %r8d,%esi
add %esi,%eax
mov %r8d,%r9d
imul %edi,%r9d
add %r9d,%eax
sub %r8d,%edi
imul %edi,%ecx
add %ecx,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a4 - (a4 * a1 + a3);
    v7 = a4 + (a2 * a1) + a5;
    v8 = a5 * a1;
    v9 = a3 - (a5 - a1) * a4;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 8
2 8
3 8
4 4
5 4
6 4
7 4
8 8
9 5
10 5
11 5
12 8
13 6
14 6
15 8
16 7
17 7
18 7
19 8
20 9
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %r8d,%esi
add %ecx,%esi
imul %r8d,%ecx
sub %edx,%ecx
sub %edx,%ecx
lea 0x1(%rsi,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = (a4 * a5 - a3) - a3;
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += a1 * a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 4
6 4
7 4
8 10
9 11
<<<sep_out_sample>>>
mov %edi,%eax
sub %ecx,%eax
cmp %edx,%r8d
jle 10 <func1+0x10>
mov %edx,%eax
sub %ecx,%eax
lea (%rax,%rsi,2),%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (a4 < a5)
        {
            v6 += a5 * (a3 * a2);
        }
        else
        {
            v6 += a4 - a4;
        }
    }
    if (a3 < a5)
    {
        v8 = a3 - a4 + a2 + a2;
    }
    else
    {
        v8 = a1 - a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 22
2 22
3 16
4 16
5 18
6 18
7 18
8 24
9 24
10 24
11 24
12 24
13 25
<<<sep_out_sample>>>
mov %r8d,%r9d
sub %ecx,%r9d
test %r8d,%r8d
jle 16 <func1+0x16>
lea (%rdx,%rcx,1),%r9d
lea (%rdx,%rdx,1),%eax
imul %eax,%r9d
mov %edi,%eax
imul %esi,%eax
lea (%rcx,%rdx,1),%r10d
cmp %esi,%r8d
jg 2e <func1+0x2e>
mov %r8d,%r10d
imul %eax,%r10d
add %ecx,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
lea 0x1(%rax,%r9,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (v6 < a5)
    {
        v6 = (a3 + a4) * (a3 + a3);
    }
    else
    {
        v6 = a5 - a4;
    }
    if (a2 < a2)
    {
        v7 = a3 - ((a1 * a2) + a3);
    }
    else
    {
        v7 = a1 * a2;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += a5 + a5 - a4;
    }
    if (a2 < a5)
    {
        v10 = a4 + a3;
    }
    else
    {
        v10 = (a2 * a1) * a5 + a4;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 4
4 4
5 6
6 6
7 6
8 18
9 18
10 27
11 25
12 25
13 31
14 31
15 31
16 33
17 33
18 33
19 33
20 33
21 33
22 33
23 34
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += (a1 - a2) * a1;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        if (a4 < a4)
        {
            v8 += a2 * a2 * a1;
        }
        else
        {
            v8 += a5 - a1;
        }
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a5)
    {
        v10 += (a3 * a2) * a2;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 26
2 26
3 26
4 26
5 27
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %eax,%ecx
sub %esi,%edi
sub %edx,%edi
lea (%rcx,%rdi,1),%eax
imul %r8d,%esi
sub %esi,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a1 - a2 - a3;
    v7 = a3 - a5 * a2;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 4
7 6
8 5
9 5
10 6
11 7
<<<sep_out_sample>>>
push %rbx
lea (%rcx,%rdi,1),%ebx
mov %edx,%eax
imul %edx,%eax
add %eax,%ebx
test %edx,%edx
jle 18 <func1+0x18>
mov %esi,%r11d
imul %edi,%r11d
jmp 27 <func1+0x27>
mov %edx,%r11d
imul %ecx,%r11d
mov %edi,%eax
imul %edi,%eax
add %eax,%r11d
cmp %r8d,%esi
jle 49 <func1+0x49>
mov %esi,%r10d
imul %edx,%r10d
add %r8d,%r10d
add %esi,%r10d
mov %edi,%r9d
imul %r8d,%r9d
imul %edx,%r9d
add %edi,%r9d
jmp 64 <func1+0x64>
mov %edx,%r10d
imul %ecx,%r10d
imul %esi,%r10d
sub %r8d,%r10d
mov %edx,%r9d
imul %r8d,%r9d
sub %edi,%r9d
add %r8d,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %ebx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a4 + a1 + a3 * a3;
    if (v7 < a3)
    {
        v7 = (a3 + a2 * a1) - a3;
    }
    else
    {
        v7 = a3 * a4 + (a1 * a1);
    }
    if (a5 < a2)
    {
        v8 = a2 + (a5 + a2 * a3);
    }
    else
    {
        v8 = ((a3 * a4) * a2) - a5;
    }
    if (a5 < a2)
    {
        v9 = a1 + (a1 * a5) * a3;
    }
    else
    {
        v9 = a5 - (a1 - (a3 * a5));
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 4
3 4
4 4
5 4
6 5
7 5
8 7
9 7
10 7
11 11
12 11
13 11
14 11
15 11
16 13
17 13
18 15
19 15
20 15
21 15
22 23
23 23
24 23
25 23
26 23
27 19
28 19
29 19
30 19
31 27
32 27
33 27
34 27
35 29
36 29
37 29
38 29
39 29
40 29
41 29
42 29
43 30
44 30
<<<sep_out_sample>>>
lea (%rdx,%r8,1),%eax
test %edx,%edx
jle 14 <func1+0x14>
lea (%rcx,%rdi,1),%r9d
mov %esi,%eax
imul %edx,%eax
add %r9d,%eax
test %esi,%esi
jle 23 <func1+0x23>
lea 0x1(%rdi,%rcx,1),%r9d
imul %ecx,%r9d
jmp 33 <func1+0x33>
mov %r8d,%r9d
imul %ecx,%r9d
mov %edi,%r10d
sub %r9d,%r10d
mov %r10d,%r9d
add %r9d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a5 - a5;
    if (v7 < a3)
    {
        v7 = (a4 + a1) + a2 * a3;
    }
    else
    {
        v7 = (a3 + a5 - a4) + a4;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += (a3 - a5) * a5;
    }
    if (v6 < a2)
    {
        v10 = ((a1 + a4) * a4) + a4;
    }
    else
    {
        v10 = a1 - a5 * a4;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 5
3 5
4 7
5 7
6 7
7 7
8 18
9 18
10 20
11 20
12 20
13 24
14 24
15 24
16 24
17 24
18 26
19 26
20 26
21 26
22 26
23 26
24 27
<<<sep_out_sample>>>
mov %esi,%r9d
imul %edx,%r9d
imul %esi,%r9d
lea (%rdx,%rsi,2),%eax
sub %ecx,%eax
test %edx,%edx
jle 1d <func1+0x1d>
mov %r8d,%r10d
imul %edi,%r10d
jmp 27 <func1+0x27>
mov %edx,%r10d
imul %edx,%r10d
add %edi,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %r9d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a5 * a5 - a3;
    }
    v8 = a2 * a3 * a2;
    v9 = a2 + (a3 + a2) - a4;
    if (v10 < a3)
    {
        v10 = (a5 * a1) - a3 + a3;
    }
    else
    {
        v10 = a3 * a3 + a1;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 9
4 10
5 10
6 11
7 11
8 13
9 13
10 13
11 17
12 17
13 17
14 19
15 19
16 19
17 19
18 19
19 19
20 19
21 20
<<<sep_out_sample>>>
mov %esi,%r10d
imul %esi,%r10d
test %edx,%edx
jle 18 <func1+0x18>
lea (%rdi,%r8,1),%r9d
sub %esi,%r9d
imul %edx,%r9d
jmp 25 <func1+0x25>
mov %edi,%r9d
sub %r8d,%r9d
imul %edi,%r9d
add %r8d,%r9d
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %eax,%ecx
add %r10d,%ecx
add %r9d,%ecx
mov %edi,%eax
sub %esi,%eax
add %eax,%edi
sub %r8d,%edi
lea (%rcx,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a2 * a2;
    if (v7 < a3)
    {
        v7 = (a1 + a5 - a2) * a3;
    }
    else
    {
        v7 = a5 - (a5 - a1) * a1;
    }
    v8 = (a1 - a2) + a1 - a5;
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        if (a1 < a1)
        {
            v9 += a3 + (a5 - a1);
        }
        else
        {
            v9 += a5 + (a4 * a1);
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 5
4 5
5 7
6 7
7 7
8 7
9 11
10 11
11 11
12 11
13 26
14 26
15 26
16 26
17 26
18 26
19 13
20 13
21 13
22 13
23 26
24 27
<<<sep_out_sample>>>
cmp %ecx,%edi
jge f <func1+0xf>
mov %ecx,%r11d
sub %r8d,%r11d
add %edi,%r11d
jmp 1d <func1+0x1d>
mov %esi,%r11d
sub %r8d,%r11d
imul %esi,%r11d
imul %r8d,%r11d
cmp %r8d,%edi
jge 2a <func1+0x2a>
mov %edi,%r10d
sub %esi,%r10d
jmp 31 <func1+0x31>
mov %esi,%r10d
imul %edx,%r10d
lea (%rdx,%rdx,1),%eax
mov %esi,%r9d
sub %r8d,%r9d
cmp %edx,%ecx
cmovg %eax,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a1 < a4)
    {
        v6 = a4 - a5 + a1;
    }
    else
    {
        v6 = (a2 - a5) * a2 * a5;
    }
    if (a1 < a5)
    {
        v7 = a1 - a2;
    }
    else
    {
        v7 = a2 * a3;
    }
    if (a3 < a4)
    {
        v8 = a3 + (a5 + a3 - a5);
    }
    else
    {
        v8 = a2 - a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 10
11 12
12 12
13 14
14 14
15 14
16 18
17 18
18 22
19 22
20 22
21 22
22 22
23 28
24 28
25 28
26 28
27 28
28 28
29 28
30 29
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a1 + a4 * a2;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        if (v8 < a3)
        {
            v8 += (a2 - a3) * a1;
        }
        else
        {
            v8 += a1 + (a5 + a3);
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 21
5 22
<<<sep_out_sample>>>
push %rbx
mov %esi,%r9d
sub %r8d,%r9d
cmp %esi,%edi
jge 18 <func1+0x18>
mov %esi,%r9d
sub %edx,%r9d
imul %esi,%r9d
add %r8d,%r9d
mov %edi,%r10d
imul %edx,%r10d
mov $0x1,%ebx
sub %r10d,%ebx
imul %edx,%ebx
cmp %r8d,%edi
jle 3c <func1+0x3c>
mov %r8d,%r11d
imul %edx,%r11d
imul %esi,%r11d
jmp 43 <func1+0x43>
mov %r8d,%r11d
imul %ecx,%r11d
lea (%rdx,%r8,1),%eax
mov %esi,%r10d
sub %ecx,%r10d
cmp %r8d,%edi
cmovl %eax,%r10d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
add %ebx,%eax
add %r11d,%eax
add %r10d,%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a1 < a2)
    {
        v6 = a5 + (a2 - a3) * a2;
    }
    else
    {
        v6 = a2 - a5;
    }
    v7 = a3 - ((a1 * a3) * a3);
    if (a5 < a1)
    {
        v8 = a5 * a3 * a2;
    }
    else
    {
        v8 = a5 * a4;
    }
    if (a1 < a5)
    {
        v9 = a3 - a4 + a4 + a5;
    }
    else
    {
        v9 = a2 - a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 10
3 10
4 4
5 4
6 6
7 6
8 6
9 6
10 12
11 12
12 12
13 12
14 12
15 13
16 13
17 15
18 15
19 15
20 15
21 19
22 19
23 23
24 23
25 23
26 23
27 23
28 29
29 29
30 29
31 29
32 29
33 29
34 29
35 29
36 30
37 30
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
add %ecx,%r8d
lea (%rcx,%rdi,1),%eax
imul %edi,%ecx
sub %ecx,%eax
mov %eax,%ecx
add %r8d,%ecx
mov %edx,%eax
sub %esi,%eax
imul %eax,%edx
sub %edi,%edx
lea (%rcx,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = (a4 + a1) - a4 * a1;
    v7 = ((a3 - a2) * a3) - a1;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 4
7 4
8 4
9 6
10 5
11 5
12 5
13 5
14 6
15 7
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %eax,%ecx
imul %esi,%esi
lea (%rcx,%r8,2),%eax
sub %esi,%eax
mov %edx,%ecx
imul %edx,%ecx
imul %ecx,%r8d
imul %r8d,%edx
lea 0x1(%rax,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = a5 + (a5 - (a2 * a2));
    if (a2 < a2)
    {
        v7 = a2 + a4 * a5 * a4;
    }
    else
    {
        v7 = a3 * ((a3 * a3) * a5);
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += a1 - a5 - a2;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a5)
    {
        if (a2 < a3)
        {
            v10 += a2 * a4;
        }
        else
        {
            v10 += a5 + a3 * a3;
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 30
2 30
3 30
4 30
5 4
6 4
7 30
8 11
9 11
10 11
11 11
12 30
13 31
<<<sep_out_sample>>>
mov %ecx,%r9d
imul %ecx,%r9d
mov %edi,%eax
sub %edx,%eax
mov %r8d,%r10d
imul %edi,%r10d
test %edi,%edi
cmovg %r10d,%eax
lea 0x1(%rax,%rdi,1),%eax
add %eax,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = a4 * a4;
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += (a1 + a3) - a2;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        v9 += a4 * (a5 - a2);
    }
    if (v7 < a1)
    {
        v11 = a5 * a1;
    }
    else
    {
        v11 = a1 + (a5 - a5) - a3;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 21
4 21
5 17
6 17
7 17
8 17
9 23
10 23
11 23
12 23
13 23
14 23
15 24
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %edx,%r8d
lea (%r8,%rcx,1),%eax
mov %esi,%edx
sub %edi,%edx
add %edx,%eax
imul %ecx,%esi
sub %esi,%eax
add $0x1,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a2 - a1;
    v7 = (a2 - a2 * a4) - a2;
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += (a4 - a2) + a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 11
5 4
6 4
7 11
8 5
9 11
10 11
11 12
<<<sep_out_sample>>>
mov %ecx,%eax
sub %r8d,%eax
cmp %ecx,%esi
jl f <func1+0xf>
lea (%rcx,%rdx,2),%eax
sub %r8d,%eax
lea (%rdi,%rdx,1),%r9d
add %r9d,%esi
add %r8d,%esi
add %ecx,%esi
add %esi,%eax
imul %r8d,%ecx
imul %ecx,%edi
add %edi,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a2 < a4)
    {
        v6 = a4 - a5;
    }
    else
    {
        v6 = a4 + a3 + a3 - a5;
    }
    v7 = a3 + (a5 * a4 * a1);
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 4
4 4
5 10
6 10
7 13
8 13
9 13
10 13
11 13
12 12
13 12
14 12
15 13
16 14
<<<sep_out_sample>>>
test %edx,%edx
jle 10 <func1+0x10>
mov %esi,%eax
imul %edx,%eax
imul %ecx,%eax
add %edx,%eax
jmp 18 <func1+0x18>
lea (%rdx,%rsi,1),%eax
add %r8d,%eax
sub %edi,%eax
add %edx,%edi
add %esi,%edi
add %r8d,%edi
add %ecx,%edi
add %eax,%edi
sub %edx,%esi
imul %ecx,%edx
sub %edx,%esi
add %edi,%esi
imul %ecx,%ecx
sub %r8d,%ecx
lea (%rsi,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (v6 < a3)
    {
        v6 = (a4 * (a2 * a3)) + a3;
    }
    else
    {
        v6 = (a5 + (a3 + a2)) - a1;
    }
    if (a4 < a4)
    {
        v7 = a4 * a1;
    }
    else
    {
        v7 = a2 - a3 - (a4 * a3);
    }
    if (a5 < a5)
    {
        v8 = a2 - (a5 * a4);
    }
    else
    {
        v8 = a4 * a4 - a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 28
12 28
13 28
14 28
15 28
16 18
17 18
18 18
19 28
20 26
21 26
22 28
23 29
<<<sep_out_sample>>>
cmp %ecx,%edi
jge f <func1+0xf>
lea 0x1(%rdi),%eax
imul %r8d,%eax
add %edx,%eax
jmp 17 <func1+0x17>
lea 0x1(%rcx),%eax
imul %edx,%eax
add %edi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a1 < a4)
    {
        v6 = (a1 * a5) + a5 + a3;
    }
    else
    {
        v6 = (a3 * a4) + a3 + a1;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += a3 - a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 17
11 17
12 17
13 17
14 17
15 18
<<<sep_out_sample>>>
mov %ecx,%r11d
sub %edi,%r11d
cmp %r8d,%edx
mov $0x0,%eax
cmovl %eax,%r11d
cmp %edi,%ecx
jle 26 <func1+0x26>
mov %ecx,%r10d
imul %esi,%r10d
imul %edx,%r10d
sub %edi,%r10d
jmp 31 <func1+0x31>
lea -0x1(%rdi),%r10d
imul %edi,%r10d
add %edx,%r10d
cmp %edi,%edx
jge 3f <func1+0x3f>
lea 0x1(%rdx),%r9d
imul %edi,%r9d
jmp 4d <func1+0x4d>
mov %edx,%r9d
sub %edi,%r9d
imul %ecx,%r9d
imul %esi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a3 < a5)
    {
        v6 = a1 - a1;
    }
    else
    {
        v6 = a4 - (a4 + a1) + a4;
    }
    if (a1 < a4)
    {
        v7 = (a4 * a2 * a3) - a1;
    }
    else
    {
        v7 = a1 * a1 - a1 + a3;
    }
    if (a3 < a1)
    {
        v8 = a1 + a3 * a1;
    }
    else
    {
        v8 = (a4 * (a3 - a1)) * a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 10
6 12
7 12
8 14
9 14
10 14
11 14
12 14
13 18
14 18
15 18
16 20
17 20
18 22
19 22
20 22
21 26
22 26
23 26
24 26
25 28
26 28
27 28
28 28
29 28
30 28
31 28
32 29
<<<sep_out_sample>>>
mov %edx,%r9d
imul %ecx,%r9d
imul %edx,%r9d
lea (%r8,%rsi,1),%eax
cmp %r8d,%ecx
jle 1b <func1+0x1b>
mov %r8d,%eax
sub %edx,%eax
add %ecx,%eax
lea (%rdi,%rdx,2),%r10d
sub %esi,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = (a3 * a4) * a3;
    if (a5 < a4)
    {
        v7 = (a5 - a3) + a4;
    }
    else
    {
        v7 = a5 + a2;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += a5 + (a4 - a1);
    }
    v10 = ((a1 + a3) + a3) - a2;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 11
5 5
6 5
7 7
8 7
9 7
10 18
11 18
12 19
13 19
14 19
15 19
16 19
17 19
18 19
19 20
<<<sep_out_sample>>>
test %edx,%edx
jle f <func1+0xf>
mov %r8d,%eax
sub %ecx,%eax
add %esi,%eax
sub %edi,%eax
jmp 16 <func1+0x16>
mov %edi,%eax
imul %edx,%eax
sub %ecx,%eax
add %edi,%edx
add %esi,%edx
add %edx,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %eax,%edx
add %edi,%ecx
imul %ecx,%esi
sub %edi,%esi
lea (%rdx,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a5 * a2;
    }
    if (v8 < a3)
    {
        v8 = (a5 - a4 + a2) - a1;
    }
    else
    {
        v8 = (a1 * a3) - a4;
    }
    v9 = (a1 + a4) * a2 - a1;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 11
8 15
9 15
10 15
11 18
12 18
13 18
14 18
15 18
16 17
17 17
18 17
19 18
20 19
<<<sep_out_sample>>>
mov %esi,%r9d
sub %edx,%r9d
add %esi,%r9d
add %ecx,%r9d
mov $0x0,%eax
test %r8d,%r8d
jg 22 <func1+0x22>
mov %r8d,%eax
imul %ecx,%eax
imul %edi,%eax
imul %edx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a4 - ((a3 - a2) - a2);
    if (v7 < a5)
    {
        v7 = a3 - a3;
    }
    else
    {
        v7 = a5 * a4 * a1 * a3;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 7
6 5
7 5
8 11
9 11
10 11
11 11
12 13
13 13
14 13
15 13
16 13
17 13
18 14
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a1 - (a5 - a1);
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += a4 * a5 + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 14
2 14
3 14
4 14
5 15
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
lea 0x1(%rsi),%r8d
imul %r8d,%edx
lea (%rax,%rcx,2),%eax
lea (%rax,%rdx,1),%edx
lea (%rdi,%rcx,2),%eax
sub %esi,%eax
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a3 + a3 * a2 + a4;
    v7 = a1 + a4 - a2 + a4;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 4
5 4
6 4
7 6
8 5
9 5
10 6
11 7
<<<sep_out_sample>>>
cmp %r8d,%edi
jge 15 <func1+0x15>
mov %edi,%eax
imul %esi,%eax
imul %esi,%eax
mov %edx,%r9d
sub %eax,%r9d
jmp 1c <func1+0x1c>
lea (%rcx,%rdx,2),%r9d
add %edi,%r9d
mov %edx,%eax
sub %r8d,%eax
cmp %edx,%esi
jl 2d <func1+0x2d>
mov %edx,%eax
imul %ecx,%eax
imul %ecx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a1 < a5)
    {
        v6 = a3 - (a1 * a2) * a2;
    }
    else
    {
        v6 = a3 + a3 + a4 + a1;
    }
    if (a2 < a3)
    {
        v7 = a3 - a5;
    }
    else
    {
        v7 = a3 * a4 * a4;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += a3 * a5 - a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 6
9 10
10 10
11 14
12 14
13 12
14 12
15 18
16 18
17 18
18 25
19 25
20 25
21 25
22 25
23 25
24 26
<<<sep_out_sample>>>
lea (%rcx,%rdx,1),%r9d
cmp %edi,%r8d
jg 10 <func1+0x10>
mov %r8d,%r9d
imul %r8d,%r9d
mov %r8d,%eax
sub %edx,%eax
imul %ecx,%eax
add %edx,%eax
add %r9d,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a5 * (a5 * a4);
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        if (a1 < a4)
        {
            v8 += (a2 + a4) - a5;
        }
        else
        {
            v8 += a4 + a3 + a5;
        }
    }
    if (a1 < a5)
    {
        v10 = a3 + a1 - a1 + a4;
    }
    else
    {
        v10 = a5 * a5;
    }
    v11 = ((a5 - a3) * a4) + a3;
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 23
2 21
3 21
4 27
5 27
6 29
7 29
8 29
9 29
10 30
11 30
12 30
13 30
14 30
15 30
16 31
<<<sep_out_sample>>>
mov %edx,%eax
imul %edi,%eax
mov %ecx,%r9d
sub %edx,%r9d
cmp %edi,%esi
jge 1c <func1+0x1c>
lea (%rcx,%rsi,1),%r10d
sub %edi,%r10d
imul %esi,%r10d
jmp 2c <func1+0x2c>
lea (%rdi,%rdx,1),%r10d
mov %ecx,%r11d
sub %r10d,%r11d
mov %r11d,%r10d
add %r8d,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += (a4 - a2) - a4;
    }
    v8 = a3 * a1;
    v9 = a4 - a3;
    if (a2 < a1)
    {
        v10 = a2 * ((a4 + a2) - a1);
    }
    else
    {
        v10 = a5 - ((a1 + a3) - a4);
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 10
4 10
5 11
6 11
7 13
8 13
9 13
10 13
11 17
12 17
13 17
14 17
15 17
16 19
17 19
18 19
19 19
20 19
21 19
22 19
23 20
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
cmp $0x1,%edi
jg 12 <func1+0x12>
lea (%rdx,%rcx,1),%eax
lea (%rsi,%rsi,1),%r9d
sub %r9d,%eax
mov %ecx,%r9d
sub %edi,%r9d
cmp %edi,%ecx
jg 28 <func1+0x28>
lea 0x1(%rdx),%r9d
imul %ecx,%r9d
imul %r8d,%r9d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += (a5 - a4) + a3;
    }
    if (v7 < a1)
    {
        v8 = a1 + a3;
    }
    else
    {
        v8 = a3 + a4 - (a2 + a2);
    }
    if (a1 < a4)
    {
        v9 = a4 - a1;
    }
    else
    {
        v9 = a5 * (a3 * a4 + a4);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 9
3 9
4 15
5 15
6 15
7 19
8 19
9 17
10 17
11 23
12 23
13 23
14 25
15 25
16 25
17 25
18 25
19 25
20 26
<<<sep_out_sample>>>
push %rbx
lea (%rdx,%rsi,2),%ebx
add %esi,%ebx
mov $0x0,%r9d
cmp %r8d,%ecx
jge 1f <func1+0x1f>
mov %edx,%eax
imul %edx,%eax
mov %edi,%r9d
sub %eax,%r9d
add %ecx,%r9d
lea (%rcx,%r8,2),%r11d
sub %edi,%r11d
mov %r8d,%r10d
sub %ecx,%r10d
cmp %r8d,%ecx
jg 3b <func1+0x3b>
mov %r8d,%r10d
imul %ecx,%r10d
neg %r10d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %ebx,%eax
add %r9d,%eax
add %r11d,%eax
add %r10d,%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = (a2 + a2 + a3) + a2;
    if (a4 < a5)
    {
        v7 = a4 - ((a3 * a3) - a1);
    }
    else
    {
        v7 = a1 * ((a2 - a2) * a2);
    }
    v8 = a5 + a5 + a4 - a1;
    if (a5 < a4)
    {
        v9 = a5 + a2 - a4 - a2;
    }
    else
    {
        v9 = a1 - a1 - a5 * a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 4
3 4
4 11
5 5
6 5
7 7
8 7
9 7
10 7
11 7
12 13
13 13
14 16
15 16
16 14
17 14
18 20
19 20
20 20
21 22
22 22
23 22
24 22
25 22
26 22
27 22
28 22
29 23
30 23
<<<sep_out_sample>>>
add %edx,%edi
add %esi,%edi
add %r8d,%edi
lea 0x1(%rcx,%rdi,1),%eax
imul %r8d,%ecx
add %ecx,%edx
sub %edx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a4 * a3 + a2;
    }
    v8 = a2 - ((a5 * a4) + a3);
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 9
6 9
7 9
8 10
9 11
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%r9d
add %esi,%r9d
add %r8d,%r9d
add %ecx,%r9d
add %esi,%edx
imul %esi,%edi
sub %edi,%edx
lea (%r9,%rdx,1),%eax
imul %r8d,%esi
imul %esi,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a5 < a5)
    {
        v6 = a3 - (a2 * a1 * a1);
    }
    else
    {
        v6 = a2 + a3 - a2 * a1;
    }
    v7 = a5 * a2 * a4;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 13
2 13
3 13
4 13
5 10
6 10
7 10
8 13
9 12
10 12
11 13
12 14
<<<sep_out_sample>>>
mov %ecx,%r10d
imul %r8d,%r10d
add %edx,%r10d
lea (%rcx,%rsi,1),%r9d
cmp %esi,%r8d
jg 20 <func1+0x20>
mov %ecx,%r9d
sub %esi,%r9d
imul %edi,%r9d
add %esi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a3 + a4 * a5;
    if (a2 < a5)
    {
        v7 = a4 + a2;
    }
    else
    {
        v7 = (a4 - a2) * a1 + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 7
5 5
6 5
7 11
8 11
9 11
10 11
11 13
12 13
13 13
14 13
15 13
16 13
17 14
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
mov %esi,%r9d
imul %edi,%r9d
imul %edi,%r9d
lea (%r8,%rcx,2),%eax
lea 0x1(%r9,%rax,1),%eax
add %esi,%edi
imul %edi,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = (a1 * (a2 * a1)) + a4;
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += a3 + a5;
    }
    v9 = a3 * a1 + (a2 * a3);
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 4
5 4
6 4
7 4
8 11
9 10
10 10
11 11
12 12
<<<sep_out_sample>>>
cmp %edi,%r8d
jge 12 <func1+0x12>
lea (%rdx,%rdi,1),%r11d
sub %esi,%r11d
imul %esi,%r11d
jmp 21 <func1+0x21>
mov %esi,%r11d
imul %r8d,%r11d
imul %esi,%r11d
imul %edx,%r11d
mov %ecx,%r10d
sub %esi,%r10d
imul %ecx,%r10d
cmp %ecx,%edx
jge 3b <func1+0x3b>
mov %edx,%r9d
neg %r9d
imul %edi,%r9d
jmp 49 <func1+0x49>
mov %r8d,%r9d
imul %edi,%r9d
imul %ecx,%r9d
add %r8d,%r9d
test %r8d,%r8d
jle 55 <func1+0x55>
lea (%rcx,%rcx,1),%eax
neg %eax
jmp 5d <func1+0x5d>
mov %esi,%eax
imul %r8d,%eax
add %ecx,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r11d,%ecx
add %r10d,%ecx
add %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a5 < a1)
    {
        v6 = a2 * ((a3 + a1) - a2);
    }
    else
    {
        v6 = a3 * (a2 * a5 * a2);
    }
    if (a3 < a3)
    {
        v7 = ((a4 + a5) + a3) * a2;
    }
    else
    {
        v7 = a4 * a4 - a2 * a4;
    }
    if (a3 < a4)
    {
        v8 = ((a5 - a3) - a5) * a1;
    }
    else
    {
        v8 = a5 + (a5 * a1 * a4);
    }
    if (v9 < a5)
    {
        v9 = a1 - a4 - (a1 + a4);
    }
    else
    {
        v9 = a4 + (a2 * a5);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 10
11 18
12 18
13 18
14 20
15 20
16 22
17 22
18 22
19 22
20 26
21 26
22 26
23 26
24 28
25 28
26 30
27 30
28 30
29 34
30 34
31 34
32 36
33 36
34 36
35 36
36 36
37 36
38 36
39 36
40 37
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
sub %edi,%esi
lea (%rsi,%rdx,2),%edx
add %edx,%eax
add %r8d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a2 < a2)
    {
        v6 = a4 - a5;
    }
    else
    {
        v6 = a3 - ((a1 - a2) - a3);
    }
    v7 = a4 + a5;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 13
2 13
3 13
4 13
5 10
6 10
7 13
8 12
9 13
10 14
<<<sep_out_sample>>>
mov %ecx,%r9d
imul %edx,%r9d
mov %esi,%eax
sub %ecx,%eax
cmp %esi,%edx
jge 1d <func1+0x1d>
lea (%rcx,%r8,1),%eax
mov %edi,%r10d
imul %r8d,%r10d
sub %r10d,%eax
add %edx,%edi
add %edi,%esi
add %r8d,%esi
add %ecx,%esi
add %r9d,%esi
add %esi,%eax
add %r8d,%edx
imul %edx,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a4 * a3;
    if (a3 < a2)
    {
        v7 = (a4 + a5) - a1 * a5;
    }
    else
    {
        v7 = a2 - a4;
    }
    if (a1 < a1)
    {
        v8 = a3 + (a4 + a1) - a4;
    }
    else
    {
        v8 = (a4 * a5) + a4 * a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 11
4 11
5 5
6 5
7 7
8 7
9 7
10 7
11 21
12 21
13 21
14 21
15 21
16 21
17 19
18 19
19 21
20 22
<<<sep_out_sample>>>
cmp %r8d,%esi
jge 14 <func1+0x14>
mov %edi,%r9d
sub %edx,%r9d
imul %edx,%r9d
sub %esi,%r9d
jmp 1f <func1+0x1f>
lea 0x1(%rdi),%r9d
imul %r8d,%r9d
add %edi,%r9d
cmp %ecx,%edx
jle 2e <func1+0x2e>
mov %ecx,%eax
sub %esi,%eax
add %edx,%eax
imul %edx,%eax
jmp 3e <func1+0x3e>
mov %edx,%eax
imul %edx,%eax
add %ecx,%eax
mov %r8d,%r11d
sub %eax,%r11d
mov %r11d,%eax
mov %ecx,%r10d
sub %esi,%r10d
sub %r8d,%r10d
add %ecx,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a2 < a5)
    {
        v6 = ((a1 - a3) * a3) - a2;
    }
    else
    {
        v6 = a5 + a1 * a5 + a1;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += a3 - a4 * a1;
    }
    if (a4 < a3)
    {
        v9 = (a3 + (a4 - a2)) * a3;
    }
    else
    {
        v9 = a5 - (a3 * a3 + a4);
    }
    v10 = a4 - (a5 + (a2 - a4));
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 17
12 17
13 19
14 19
15 19
16 19
17 19
18 23
19 23
20 23
21 23
22 23
23 23
24 25
25 25
26 25
27 25
28 26
29 26
30 26
31 26
32 26
33 26
34 26
35 27
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
add %esi,%ecx
mov %edi,%r9d
sub %r8d,%r9d
add %r9d,%ecx
mov %edi,%eax
imul %edi,%eax
sub %r8d,%eax
imul %eax,%edx
lea (%rcx,%rdx,1),%eax
sub %r8d,%eax
sub %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a1 - a5;
    if (a2 < a2)
    {
        v7 = a2 + a1;
    }
    else
    {
        v7 = a3 * (a1 * a1 - a5);
    }
    v8 = a2 - (a1 + (a2 + a5));
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 14
2 14
3 14
4 14
5 4
6 4
7 14
8 11
9 11
10 11
11 11
12 14
13 13
14 14
15 15
<<<sep_out_sample>>>
cmp %ecx,%edi
jge c <func1+0xc>
mov %edi,%eax
imul %r8d,%eax
jmp 15 <func1+0x15>
mov %ecx,%eax
sub %edi,%eax
imul %edi,%eax
add %edx,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a1 < a4)
    {
        v6 = a1 * a5;
    }
    else
    {
        v6 = (a4 - a1) * a1 + a3;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        if (a5 < a3)
        {
            v7 += a3 * a5 * a5;
        }
        else
        {
            v7 += (a4 + a1) * a1;
        }
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        v9 += a3 * a5;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 10
10 29
11 29
12 29
13 29
14 29
15 30
<<<sep_out_sample>>>
lea (%rsi,%rdi,1),%r10d
sub %edx,%r10d
imul %edx,%r10d
mov %esi,%eax
sub %r8d,%eax
lea (%rax,%rcx,1),%r9d
imul %edi,%r9d
add %edx,%edi
cmp %r8d,%edx
jle 28 <func1+0x28>
imul %r8d,%edx
mov %edx,%eax
imul %ecx,%eax
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r10d,%ecx
add %r9d,%ecx
add %ecx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = ((a2 + a1) - a3) * a3;
    v7 = ((a2 - a5) + a4) * a1;
    if (a5 < a5)
    {
        v8 = (a2 + a2) * a4;
    }
    else
    {
        v8 = a1 + a3;
    }
    if (a5 < a3)
    {
        v9 = a5 * a3 * a4;
    }
    else
    {
        v9 = a2 - a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 5
5 5
6 5
7 5
8 12
9 14
10 14
11 16
12 16
13 16
14 22
15 22
16 22
17 22
18 22
19 22
20 22
21 23
<<<sep_out_sample>>>
mov %edx,%r9d
imul %r8d,%r9d
lea (%rsi,%rdx,1),%eax
lea (%rdi,%rsi,1),%r10d
cmp %r8d,%edx
cmovle %r10d,%eax
add %r9d,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += (a3 + a1) - a5;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += a2 * a4 * a2;
    }
    if (a3 < a3)
    {
        v10 = a3 + a3;
    }
    else
    {
        v10 = a3 * a5 - a2 + a2;
    }
    if (a5 < a3)
    {
        v11 = a2 + a3;
    }
    else
    {
        v11 = a1 + a2;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 20
2 20
3 24
4 24
5 24
6 24
7 30
8 30
9 30
10 30
11 30
12 30
13 31
<<<sep_out_sample>>>
test %esi,%esi
jle f <func1+0xf>
mov %ecx,%eax
imul %ecx,%eax
add %edi,%eax
sub %ecx,%eax
jmp 17 <func1+0x17>
mov %ecx,%eax
imul %edi,%eax
add %r8d,%eax
add %edi,%edx
add %edx,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%edx
add %edx,%eax
imul %edi,%ecx
imul %ecx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a5 - a5 * a1;
    }
    if (v8 < a2)
    {
        v8 = a1 + a4 * a4 - a4;
    }
    else
    {
        v8 = a5 + (a4 * a1);
    }
    v9 = a1 * a4 * a5;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 11
8 15
9 15
10 15
11 18
12 18
13 18
14 18
15 18
16 17
17 17
18 18
19 19
<<<sep_out_sample>>>
add %edx,%edi
lea (%rsi,%rdi,1),%eax
add %r8d,%eax
add %eax,%ecx
mov %r8d,%eax
sub %esi,%eax
add %eax,%edx
add %edx,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a5 < a5)
    {
        v6 = (a2 - (a1 + a2)) + a4;
    }
    else
    {
        v6 = a5 - a2 + a3 + a5;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        if (v8 < a2)
        {
            v7 += a3 * (a4 * a5);
        }
        else
        {
            v7 += (a1 - a3) * a3;
        }
    }
    v9 = a1 + a3;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 24
2 25
3 25
4 25
5 10
6 10
7 10
8 10
9 25
10 25
11 26
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
imul %edi,%r8d
add %r8d,%eax
sub %edi,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a5 * a1;
    if (a5 < a5)
    {
        v7 = (a1 * a4) - a3;
    }
    else
    {
        v7 = a3 - a1;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 13
2 13
3 13
4 13
5 4
6 13
7 11
8 13
9 14
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
mov %edi,%ecx
sub %esi,%ecx
lea (%rcx,%rdi,2),%esi
add %esi,%eax
imul %r8d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = (a1 - a2) + a1 + a1;
    v7 = a5 * a3;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 4
7 4
8 6
9 5
10 6
11 7
<<<sep_out_sample>>>
mov %edx,%r9d
sub %ecx,%r9d
cmp %edi,%edx
jl 11 <func1+0x11>
mov %edi,%r9d
imul %esi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
imul %edx,%esi
imul %esi,%r8d
add %r8d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a3 < a1)
    {
        v6 = a3 - a4;
    }
    else
    {
        v6 = a1 * a2;
    }
    v7 = a5 * (a2 * a3) + a3;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 4
4 4
5 10
6 10
7 13
8 13
9 13
10 13
11 13
12 12
13 12
14 12
15 13
16 14
<<<sep_out_sample>>>
cmp %esi,%r8d
jge e <func1+0xe>
lea (%rdx,%rsi,2),%r10d
sub %ecx,%r10d
jmp 15 <func1+0x15>
mov %edi,%r10d
imul %esi,%r10d
cmp %ecx,%esi
jle 2a <func1+0x2a>
mov %r8d,%r9d
sub %edi,%r9d
mov %r8d,%eax
imul %edx,%eax
add %eax,%r9d
jmp 38 <func1+0x38>
mov %esi,%r9d
imul %r8d,%r9d
add %edi,%r9d
imul %ecx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a5 < a2)
    {
        v6 = a2 + a3 - (a4 - a2);
    }
    else
    {
        v6 = a1 * a2;
    }
    if (a4 < a2)
    {
        v7 = a5 - a1 + a5 * a3;
    }
    else
    {
        v7 = (a2 * a5 + a1) * a4;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 12
9 12
10 14
11 14
12 14
13 14
14 14
15 14
16 18
17 18
18 18
19 18
20 20
21 20
22 20
23 20
24 20
25 20
26 21
<<<sep_out_sample>>>
lea (%rdx,%rcx,1),%r11d
add %r8d,%r11d
sub %esi,%r11d
test %edi,%edi
jle 1d <func1+0x1d>
mov %edi,%r10d
sub %esi,%r10d
imul %ecx,%r10d
sub %esi,%r10d
jmp 28 <func1+0x28>
lea (%r8,%rsi,1),%r10d
imul %ecx,%r10d
add %edi,%r10d
cmp %r8d,%edx
jge 38 <func1+0x38>
mov %r8d,%r9d
neg %r9d
sub %edx,%r9d
jmp 48 <func1+0x48>
mov %edi,%r9d
imul %edx,%r9d
mov %ecx,%eax
sub %r8d,%eax
imul %eax,%r9d
add %edi,%edx
add %esi,%edx
add %r8d,%edx
add %ecx,%edx
add %r11d,%edx
add %r10d,%edx
add %r9d,%edx
imul %ecx,%ecx
add %ecx,%esi
sub %r8d,%esi
lea (%rdx,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = (a3 + a4) + a5 - a2;
    if (v7 < a1)
    {
        v7 = ((a1 - a2) * a4) - a2;
    }
    else
    {
        v7 = a1 + ((a5 + a2) * a4);
    }
    if (a3 < a5)
    {
        v8 = (a2 - a5) - a2 - a3;
    }
    else
    {
        v8 = (a1 * a3) * (a4 - a5);
    }
    v9 = (a2 + a4 * a4) - a5;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 5
5 5
6 7
7 7
8 7
9 7
10 7
11 11
12 11
13 11
14 13
15 13
16 15
17 15
18 15
19 15
20 19
21 19
22 19
23 19
24 19
25 22
26 22
27 22
28 22
29 22
30 22
31 22
32 21
33 21
34 21
35 22
36 23
<<<sep_out_sample>>>
mov %edi,%eax
sub %edx,%eax
sub %ecx,%eax
imul %edi,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += (a4 - a3) * a2;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += a4 * a2;
    }
    v10 = (a1 - a3 - a4) * a1;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 14
2 14
3 14
4 14
5 15
6 15
7 15
8 15
9 15
10 16
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a5 - a4 - a4;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        if (a3 < a5)
        {
            v8 += a3 - (a2 * a3);
        }
        else
        {
            v8 += (a4 * a2) - a3;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 21
5 22
<<<sep_out_sample>>>
mov %r8d,%eax
sub %esi,%eax
cmp %r8d,%ecx
jge 14 <func1+0x14>
mov %esi,%eax
sub %ecx,%eax
add $0x1,%eax
imul %edx,%eax
add %edi,%edx
add %esi,%edx
add %edx,%r8d
add %r8d,%ecx
add %ecx,%eax
imul %edi,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a4 < a5)
    {
        v6 = a3 + (a2 - a4) * a3;
    }
    else
    {
        v6 = ((a5 + a5) - a2) - a5;
    }
    v7 = a2 * a1;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 10
2 10
3 4
4 4
5 6
6 6
7 6
8 6
9 13
10 13
11 13
12 13
13 13
14 12
15 13
16 14
<<<sep_out_sample>>>
mov %r8d,%eax
imul %esi,%eax
mov %ecx,%r11d
sub %eax,%r11d
add %esi,%r11d
mov %r8d,%r10d
imul %r8d,%r10d
cmp %esi,%r8d
jle 24 <func1+0x24>
lea (%r8,%rsi,2),%r9d
sub %edx,%r9d
jmp 33 <func1+0x33>
mov %edx,%r9d
imul %r8d,%r9d
imul %edi,%r9d
imul %r8d,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a1 < a1)
    {
        v6 = a3 * a5;
    }
    else
    {
        v6 = a4 - a5 * a2 + a2;
    }
    v7 = a5 * a5;
    if (a2 < a5)
    {
        v8 = (a2 + a2) + a5 - a3;
    }
    else
    {
        v8 = a5 * (a3 * a5 * a1);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 10
6 12
7 12
8 13
9 13
10 15
11 15
12 15
13 19
14 19
15 19
16 19
17 21
18 21
19 21
20 21
21 21
22 21
23 21
24 22
<<<sep_out_sample>>>
mov %esi,%r9d
imul %r8d,%r9d
imul %edi,%r9d
imul %edi,%r9d
test %edi,%edi
jle 1d <func1+0x1d>
lea (%r8,%rsi,1),%eax
sub %ecx,%eax
sub %edx,%eax
jmp 28 <func1+0x28>
mov %esi,%eax
imul %ecx,%eax
sub $0x1,%eax
imul %edi,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = ((a2 * a5) * a1) * a1;
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += a5 - a2 + a1;
    }
    if (v9 < a1)
    {
        v9 = (a5 + a2 - a4) - a3;
    }
    else
    {
        v9 = (a1 * (a2 * a4)) - a1;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a1)
    {
        v10 += a4 + a1;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 10
6 10
7 12
8 12
9 12
10 12
11 16
12 16
13 16
14 16
15 23
16 23
17 23
18 23
19 23
20 23
21 24
<<<sep_out_sample>>>
lea (%rcx,%rdx,1),%r9d
add %edi,%edx
add %esi,%edx
add %edx,%r8d
lea (%r8,%rcx,1),%eax
add %r9d,%eax
mov %ecx,%edi
imul %ecx,%edi
add %edi,%eax
add %esi,%ecx
sub %ecx,%r9d
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a4 + a3;
    v7 = a4 * a4;
    v8 = (a3 + a4) - (a4 + a2);
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 7
3 7
4 7
5 7
6 7
7 5
8 5
9 7
10 6
11 6
12 7
13 8
<<<sep_out_sample>>>
cmp %edi,%edx
jge 11 <func1+0x11>
mov %edi,%eax
imul %edx,%eax
imul %esi,%eax
add %r8d,%eax
jmp 1a <func1+0x1a>
mov %edi,%eax
imul %esi,%eax
add %edx,%eax
add %edi,%eax
mov %r8d,%r9d
imul %r8d,%r9d
add %r9d,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a1 + a3 * a2;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        if (a1 < a4)
        {
            v8 += a3 * a2 - a3;
        }
        else
        {
            v8 += a4 - a5 + a2;
        }
    }
    if (a3 < a1)
    {
        v10 = a5 + (a1 * a3) * a2;
    }
    else
    {
        v10 = a1 * a2 + a3 + a1;
    }
    v11 = a5 * a5;
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 23
4 23
5 23
6 23
7 23
8 27
9 27
10 27
11 27
12 29
13 29
14 30
15 30
16 30
17 30
18 30
19 30
20 31
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
lea (%r8,%rcx,1),%eax
lea (%rax,%rdi,2),%r8d
imul %esi,%ecx
mov %edx,%eax
sub %ecx,%eax
sub %esi,%eax
add %r8d,%eax
mov %edx,%ecx
sub %edi,%ecx
add %ecx,%eax
add %edx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a1 + a1;
    v7 = (a3 - (a4 * a2)) - a2;
    v8 = a3 - a1;
    v9 = a4 + ((a3 - a4) + a1);
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 8
2 8
3 8
4 8
5 8
6 5
7 5
8 5
9 5
10 8
11 6
12 6
13 8
14 7
15 8
16 9
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
imul %esi,%esi
sub %edx,%esi
lea 0x1(%r8,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a2 * a2 - a3 - a4;
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += a5 * a2;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a1)
    {
        if (a1 < a5)
        {
            v9 += a2 + a2 * a2;
        }
        else
        {
            v9 += a2 + a5 * a1;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 22
4 4
5 4
6 22
7 23
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea (%rdi,%rcx,2),%eax
lea 0x1(%rax,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = (a3 - a3) * (a4 - a1);
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += (a1 * a3) + a1;
    }
    if (a3 < a3)
    {
        v9 = a3 + a3 - a5 - a1;
    }
    else
    {
        v9 = a1 + a4;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a2)
    {
        if (v9 < a2)
        {
            v10 += (a5 + a5) + a4;
        }
        else
        {
            v10 += a3 + a3 + a4;
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 30
2 30
3 30
4 16
5 30
6 31
<<<sep_out_sample>>>
test %r8d,%r8d
jle f <func1+0xf>
lea 0x1(%rsi),%eax
imul %edi,%eax
add %ecx,%eax
jmp 19 <func1+0x19>
lea (%r8,%rsi,1),%eax
imul %ecx,%eax
imul %edi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a1 + a2;
    }
    if (v6 < a5)
    {
        v8 = ((a2 * a1) + a1) + a4;
    }
    else
    {
        v8 = ((a5 + a2) * a4) * a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 15
8 15
9 15
10 17
11 17
12 17
13 17
14 17
15 18
<<<sep_out_sample>>>
lea (%rcx,%rcx,1),%r9d
test %r8d,%r8d
jle 11 <func1+0x11>
mov %esi,%r10d
sub %edi,%r10d
jmp 18 <func1+0x18>
mov %edi,%r10d
imul %esi,%r10d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%eax
add %r10d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a4 + a4;
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        if (v8 < a1)
        {
            v7 += a4 * a1 - a5;
        }
        else
        {
            v7 += (a2 * a2) - a1;
        }
    }
    if (v9 < a5)
    {
        v9 = a2 - (a1 - a5 + a5);
    }
    else
    {
        v9 = a1 * a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 17
3 17
4 19
5 19
6 19
7 23
8 23
9 25
10 25
11 25
12 25
13 25
14 25
15 26
<<<sep_out_sample>>>
mov %esi,%eax
sub %r8d,%eax
cmp %r8d,%esi
jge 1c <func1+0x1c>
mov %r8d,%eax
imul %esi,%eax
imul %esi,%eax
mov %edi,%r10d
sub %eax,%r10d
mov %r10d,%eax
cmp %edi,%r8d
jle 2a <func1+0x2a>
mov %r8d,%r9d
imul %edi,%r9d
jmp 37 <func1+0x37>
mov %ecx,%r9d
imul %esi,%r9d
sub %r8d,%r9d
add %ecx,%r9d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%eax
lea 0x1(%r9,%rax,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a2 < a5)
    {
        v6 = a1 - (a5 * a2) * a2;
    }
    else
    {
        v6 = a2 - a5;
    }
    if (a1 < a5)
    {
        v7 = (a1 + a4 - a4) * a5;
    }
    else
    {
        v7 = a4 * a2 - a5 + a4;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        if (a2 < a1)
        {
            v8 += a1 * a3;
        }
        else
        {
            v8 += (a4 + a3) - a2;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 4
4 4
5 6
6 6
7 6
8 6
9 6
10 6
11 12
12 12
13 14
14 14
15 14
16 18
17 18
18 18
19 18
20 32
21 32
22 32
23 32
24 32
25 32
26 33
<<<sep_out_sample>>>
cmp %edx,%r8d
jge 12 <func1+0x12>
lea (%r8,%rsi,1),%r9d
imul %ecx,%r9d
add %edi,%r9d
jmp 1d <func1+0x1d>
mov %ecx,%r9d
imul %edx,%r9d
imul %r8d,%r9d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea (%rcx,%r9,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a5 < a3)
    {
        v6 = (a5 + a2) * a4 + a1;
    }
    else
    {
        v6 = a4 * a3 * a5;
    }
    v7 = a4 - a4;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 13
11 13
12 13
13 13
14 13
15 14
<<<sep_out_sample>>>
mov %r8d,%eax
sub %ecx,%eax
mov %ecx,%r9d
imul %edx,%r9d
cmp %esi,%edx
cmovl %r9d,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %esi,%edx
add %edx,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
add %esi,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (v6 < a3)
        {
            v6 += a1 * a4 - a2;
        }
        else
        {
            v6 += a3 * a1 + a3;
        }
    }
    if (a3 < a2)
    {
        v8 = a4 * a3;
    }
    else
    {
        v8 = a5 - a4;
    }
    v9 = a1 + (a2 - a1 + a4);
    v10 = 0;
    for (v11 = 0; v11++; v11<a2)
    {
        v10 += a1 * (a4 - a5);
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 18
4 18
5 18
6 18
7 30
8 30
9 30
10 30
11 30
12 24
13 30
14 31
<<<sep_out_sample>>>
mov %r8d,%r9d
imul %r8d,%r9d
lea (%r9,%rsi,1),%r10d
lea (%rcx,%rcx,1),%eax
cmp %edx,%esi
jge 1b <func1+0x1b>
mov %r9d,%eax
imul %edi,%eax
add %r8d,%eax
add %edx,%edi
add %esi,%edi
add %r8d,%edi
add %edi,%ecx
add %r10d,%ecx
add %ecx,%eax
imul %esi,%r8d
sub %r8d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = (a5 * a5) + a2;
    if (a2 < a3)
    {
        v7 = a5 + a5 * a5 * a1;
    }
    else
    {
        v7 = a4 + a4 - a2 + a2;
    }
    v8 = a3 - a5 * a2;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 11
5 5
6 5
7 7
8 7
9 7
10 14
11 14
12 14
13 14
14 14
15 14
16 13
17 13
18 14
19 15
<<<sep_out_sample>>>
cmp %r8d,%esi
jge 10 <func1+0x10>
lea (%rsi,%rsi,1),%eax
imul %edi,%eax
sub %r8d,%eax
jmp 1c <func1+0x1c>
mov %edx,%eax
imul %edi,%eax
sub $0x1,%eax
imul %r8d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a2 < a5)
    {
        v6 = ((a2 + a2) * a1) - a5;
    }
    else
    {
        v6 = ((a3 * a1) * a5) - a5;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += a5 + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 10
11 17
12 17
13 17
14 17
15 17
16 18
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a4 + a2;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        if (a5 < a3)
        {
            v8 += a2 * a2 * a3;
        }
        else
        {
            v8 += (a5 * a4) - a3;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 21
5 22
<<<sep_out_sample>>>
cmp %edi,%esi
jge a <func1+0xa>
lea (%rdi,%rdi,1),%r10d
jmp 11 <func1+0x11>
mov %esi,%r10d
imul %ecx,%r10d
lea (%r8,%r8,1),%eax
mov %r8d,%r9d
sub %edx,%r9d
cmp %ecx,%edi
cmovl %eax,%r9d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += (a2 * a1) + a5;
    }
    if (a2 < a1)
    {
        v8 = a1 - a5 + (a1 + a5);
    }
    else
    {
        v8 = a2 * a4;
    }
    if (a1 < a4)
    {
        v9 = a5 + a5;
    }
    else
    {
        v9 = a5 - a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 15
6 15
7 19
8 19
9 19
10 19
11 19
12 25
13 25
14 25
15 25
16 25
17 25
18 26
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
imul %esi,%edi
sub %ecx,%edi
add %edi,%r8d
lea 0x1(%rax,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a5 - (a4 - a2 * a1);
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += (a2 - a1) + a5;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        v9 += a2 * a3;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 15
2 15
3 15
4 15
5 4
6 4
7 4
8 15
9 16
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
lea 0x1(%rcx,%rax,1),%eax
add $0x1,%r8d
imul %r8d,%ecx
add %ecx,%esi
add %eax,%esi
lea (%rsi,%rdx,2),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += (a5 - a2) * a5;
    }
    v8 = ((a4 * a5) + a4) + a2;
    v9 = a3 + a3;
    v10 = 0;
    for (v11 = 0; v11++; v11<a4)
    {
        v10 += a2 + a4 - a3;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 16
4 16
5 9
6 9
7 9
8 16
9 16
10 17
<<<sep_out_sample>>>
add %edx,%edi
add %esi,%edi
add %r8d,%edi
add %ecx,%edi
imul %esi,%edx
lea 0x1(%rdi,%rdx,1),%edx
lea (%rsi,%r8,2),%eax
lea (%rax,%rcx,1),%eax
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a3 * a2;
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += a2 - (a5 * a4);
    }
    v9 = a5 + a4 + (a5 + a2);
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 11
5 4
6 11
7 10
8 10
9 11
10 12
<<<sep_out_sample>>>
lea (%r8,%rsi,1),%r9d
cmp %edx,%esi
jl 13 <func1+0x13>
lea 0x1(%rcx),%r9d
imul %edi,%r9d
sub %esi,%r9d
lea (%r8,%rdi,1),%eax
mov %esi,%r10d
sub %edx,%r10d
cmp %eax,%esi
jg 29 <func1+0x29>
lea (%rsi,%rdi,1),%r10d
imul %esi,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a2 < a3)
    {
        v6 = a5 + a2;
    }
    else
    {
        v6 = a1 * a4 + a1 - a2;
    }
    v7 = a5 + a1;
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        if (a4 < a1)
        {
            v8 += (a2 * a4) * a1;
        }
        else
        {
            v8 += a1 + a2;
        }
    }
    if (v7 < a2)
    {
        v10 = a2 - a3;
    }
    else
    {
        v10 = (a2 * a2) + a2 * a1;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 4
3 4
4 10
5 10
6 10
7 12
8 27
9 27
10 25
11 25
12 31
13 31
14 33
15 33
16 33
17 33
18 33
19 33
20 33
21 34
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a3 + a4;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += (a2 * a1) - a5;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a2)
    {
        if (a2 < a5)
        {
            v10 += a5 - (a2 - a5);
        }
        else
        {
            v10 += (a5 + a3) * a4;
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 26
2 26
3 26
4 26
5 27
<<<sep_out_sample>>>
lea (%rdi,%rcx,1),%eax
lea (%rdi,%rdx,1),%r9d
add %esi,%r9d
add %r9d,%r8d
add %r8d,%ecx
sub $0x1,%edx
imul %edx,%edi
add %edi,%esi
add %esi,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a2 - (a1 - a3 * a1);
    v7 = a3 - a3;
    v8 = a1 + a4;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 6
2 7
3 7
4 7
5 7
6 4
7 4
8 4
9 7
10 7
11 8
<<<sep_out_sample>>>
cmp %ecx,%edi
jge 14 <func1+0x14>
mov %edx,%r9d
sub %edi,%r9d
sub $0x1,%r9d
imul %edx,%r9d
jmp 1e <func1+0x1e>
lea (%rsi,%rsi,1),%r9d
sub %r8d,%r9d
sub %edx,%r9d
cmp %esi,%ecx
jge 31 <func1+0x31>
mov %ecx,%eax
imul %edi,%eax
imul %r8d,%eax
imul %r8d,%eax
jmp 3c <func1+0x3c>
mov %edx,%eax
imul %edi,%eax
imul %edi,%eax
add %r8d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a1 < a4)
    {
        v6 = ((a3 - a1) * a3) - a3;
    }
    else
    {
        v6 = a2 + a2 - a5 - a3;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        if (v8 < a1)
        {
            v7 += a5 * a3;
        }
        else
        {
            v7 += (a2 + a1) * a3;
        }
    }
    if (a4 < a2)
    {
        v9 = (a4 * a1 * a5) * a5;
    }
    else
    {
        v9 = (a3 * a1) * a1 + a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 24
12 24
13 26
14 26
15 26
16 26
17 26
18 30
19 30
20 30
21 30
22 32
23 32
24 32
25 32
26 32
27 32
28 33
<<<sep_out_sample>>>
cmp %r8d,%edx
jge f <func1+0xf>
lea (%rdi,%rcx,1),%eax
add %edx,%eax
imul %edi,%eax
jmp 17 <func1+0x17>
lea 0x1(%rdi),%eax
imul %esi,%eax
sub %ecx,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a3 < a5)
    {
        v6 = a1 * ((a1 + a4) + a3);
    }
    else
    {
        v6 = a2 + a1 * a2 - a4;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        if (a4 < a3)
        {
            v7 += (a5 * a5) * a1;
        }
        else
        {
            v7 += a1 * a3 * a2;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 24
11 24
12 24
13 24
14 24
15 25
<<<sep_out_sample>>>
cmp %edx,%esi
jge f <func1+0xf>
mov %edx,%r9d
sub %esi,%r9d
sub %r8d,%r9d
jmp 1a <func1+0x1a>
lea 0x1(%rdi),%r9d
imul %ecx,%r9d
add %r8d,%r9d
lea (%rsi,%r8,1),%r11d
cmp %edi,%r8d
mov $0x0,%eax
cmovl %eax,%r11d
cmp %esi,%r9d
jge 3d <func1+0x3d>
lea 0x1(%rsi),%r10d
imul %edx,%r10d
imul %edx,%r10d
jmp 45 <func1+0x45>
lea 0x1(%r8),%r10d
imul %r8d,%r10d
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
add %r11d,%eax
add %r10d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a2 < a3)
    {
        v6 = a3 - a2 - a5;
    }
    else
    {
        v6 = a1 * a4 + a4 + a5;
    }
    if (a5 < a1)
    {
        v7 = (a1 + a3 - a1) - a3;
    }
    else
    {
        v7 = a2 + a5;
    }
    if (v6 < a2)
    {
        v8 = a3 * (a3 * a2 + a3);
    }
    else
    {
        v8 = a5 + (a5 * a5);
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        v9 += (a2 * a2) - a3;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 18
11 18
12 18
13 18
14 20
15 20
16 22
17 22
18 22
19 22
20 26
21 26
22 33
23 33
24 33
25 33
26 33
27 33
28 33
29 34
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %edx,%ecx
imul %ecx,%edi
sub %edi,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a2 * a1 - a1;
    }
    v8 = a3 - a1 * (a4 + a3);
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 9
6 9
7 9
8 10
9 11
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
add %esi,%ecx
sub %r8d,%edi
sub %r8d,%edi
sub %r8d,%edi
lea 0x1(%rcx,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a1 - a5 - a5 - a5;
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        if (v6 < a2)
        {
            v7 += a4 - a1;
        }
        else
        {
            v7 += a3 * (a4 + a2);
        }
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        v9 += a1 + a2 * a2;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 22
4 22
5 4
6 4
7 4
8 22
9 23
<<<sep_out_sample>>>
push %rbx
lea (%rcx,%rdi,1),%r10d
mov %esi,%r9d
sub %edi,%r9d
add %esi,%r9d
lea (%rsi,%r8,1),%r11d
mov %ecx,%eax
imul %edi,%eax
add %eax,%r11d
mov %r10d,%eax
cmp %r8d,%r9d
jl 32 <func1+0x32>
mov %ecx,%eax
imul %r8d,%eax
imul %r8d,%eax
mov %edi,%ebx
sub %eax,%ebx
mov %ebx,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r10d
add %r10d,%r9d
add %r11d,%r9d
add %r9d,%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a4 + a1;
    if (a1 < a1)
    {
        v7 = (a2 - (a4 * a5)) - a1;
    }
    else
    {
        v7 = a2 + (a2 - a1);
    }
    v8 = (a2 + a5) + a4 * a1;
    if (v7 < a5)
    {
        v9 = a1 + a4;
    }
    else
    {
        v9 = a1 - (a4 * a5 * a5);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 4
3 11
4 11
5 11
6 13
7 13
8 13
9 13
10 16
11 14
12 14
13 20
14 20
15 20
16 20
17 20
18 20
19 22
20 22
21 22
22 22
23 22
24 22
25 22
26 22
27 23
28 23
<<<sep_out_sample>>>
mov %esi,%eax
sub %ecx,%eax
mov %r8d,%r9d
imul %r8d,%r9d
cmp %ecx,%esi
cmovl %r9d,%eax
add %edi,%eax
add %eax,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a3 * a2 * a4;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += a3 - a1;
    }
    if (a2 < a4)
    {
        v10 = a5 * a5;
    }
    else
    {
        v10 = a2 - a4;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 20
2 20
3 16
4 16
5 16
6 16
7 22
8 22
9 22
10 22
11 22
12 23
<<<sep_out_sample>>>
cmp %esi,%edx
jge f <func1+0xf>
lea -0x1(%rdx,%r8,1),%r9d
imul %r8d,%r9d
jmp 1a <func1+0x1a>
lea (%r8,%rdx,1),%r9d
imul %esi,%r9d
add %r8d,%r9d
mov %edi,%eax
sub %r8d,%eax
cmp %edx,%r9d
jl 33 <func1+0x33>
mov %edi,%eax
sub %r8d,%eax
mov %edx,%r10d
imul %r8d,%r10d
sub %r10d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a3 < a2)
    {
        v6 = a5 * (a3 + a5) - a5;
    }
    else
    {
        v6 = a5 + a2 * (a5 + a3);
    }
    if (v6 < a3)
    {
        v7 = a1 - a5;
    }
    else
    {
        v7 = (a1 - a5) - a3 * a5;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 14
10 14
11 12
12 12
13 18
14 18
15 18
16 18
17 18
18 20
19 20
20 20
21 20
22 20
23 20
24 21
<<<sep_out_sample>>>
mov %ecx,%eax
imul %edx,%eax
add %esi,%eax
sub %edx,%eax
cmp %edx,%ecx
jle 22 <func1+0x22>
mov %edx,%r9d
imul %edx,%r9d
mov %ecx,%r10d
sub %r9d,%r10d
mov %r10d,%r9d
add %r8d,%r9d
jmp 2c <func1+0x2c>
mov %edx,%r9d
sub %r8d,%r9d
imul %ecx,%r9d
lea 0x1(%r9,%rdi,1),%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = ((a4 * a3) + a2) - a3;
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += a3 + a3 * a4;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        if (v7 < a3)
        {
            v9 += a5 * a3 + a5;
        }
        else
        {
            v9 += a5 * a1 - a5;
        }
    }
    if (a3 < a4)
    {
        v11 = (a4 - a3 * a3) + a5;
    }
    else
    {
        v11 = a4 * (a3 - a5);
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 22
6 22
7 24
8 24
9 24
10 24
11 24
12 24
13 24
14 28
15 28
16 28
17 30
18 30
19 30
20 30
21 30
22 30
23 31
<<<sep_out_sample>>>
mov %ecx,%eax
imul %esi,%eax
mov %eax,%r9d
neg %r9d
lea (%rdi,%rsi,1),%r10d
mov %ecx,%r11d
sub %edi,%r11d
cmp %r9d,%ecx
cmovle %r11d,%r10d
cmp %edx,%esi
jle 2c <func1+0x2c>
mov %eax,%r9d
imul %r8d,%r9d
sub %ecx,%r9d
jmp 37 <func1+0x37>
lea 0x1(%rcx),%r9d
imul %edi,%r9d
add %edx,%r9d
add %edi,%edx
add %esi,%edx
add %edx,%r8d
add %r8d,%ecx
sub %eax,%ecx
mov %ecx,%eax
add %r10d,%eax
add %r9d,%eax
imul %edi,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a3 - a4 * a2 - a3;
    if (v6 < a4)
    {
        v7 = a1 + a2;
    }
    else
    {
        v7 = a4 - a1;
    }
    if (a3 < a2)
    {
        v8 = (a2 * a4 * a5) - a4;
    }
    else
    {
        v8 = a1 + a4 * a1 + a3;
    }
    if (a4 < a4)
    {
        v9 = a5 - a5;
    }
    else
    {
        v9 = a2 * a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 7
6 7
7 7
8 7
9 7
10 13
11 13
12 15
13 15
14 15
15 15
16 19
17 19
18 19
19 29
20 29
21 29
22 29
23 29
24 29
25 29
26 29
27 27
28 29
29 30
<<<sep_out_sample>>>
cmp %ecx,%esi
jge 12 <func1+0x12>
lea (%rdi,%r8,1),%r9d
imul %edi,%r9d
imul %ecx,%r9d
jmp 19 <func1+0x19>
lea (%rdi,%rsi,1),%r9d
sub %edx,%r9d
lea (%rdx,%rcx,2),%eax
test %r8d,%r8d
jg 30 <func1+0x30>
lea (%r8,%rsi,1),%r10d
mov $0x1,%eax
sub %r10d,%eax
imul %edi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a2 < a4)
    {
        v6 = ((a1 + a5) * a1) * a4;
    }
    else
    {
        v6 = a1 + a2 - a3;
    }
    if (v7 < a5)
    {
        v7 = (a4 + a4) + a3;
    }
    else
    {
        v7 = a1 - ((a5 + a2) * a1);
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 14
10 12
11 12
12 18
13 18
14 18
15 18
16 20
17 20
18 20
19 20
20 20
21 20
22 21
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%eax
sub %ecx,%r8d
sub %edi,%r8d
imul %r8d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a3 - a1;
    }
    v8 = a4 * (a5 - a4 - a1);
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        v9 += a2 + a3;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 15
2 15
3 15
4 15
5 9
6 9
7 9
8 15
9 16
<<<sep_out_sample>>>
mov %ecx,%eax
imul %edx,%eax
imul %r8d,%eax
mov %ecx,%r9d
sub %eax,%r9d
cmp %r9d,%edx
jle 20 <func1+0x20>
mov %r8d,%eax
imul %r8d,%eax
lea (%rax,%rsi,2),%eax
jmp 28 <func1+0x28>
mov %ecx,%eax
imul %esi,%eax
add %r8d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a4 - ((a4 * a3) * a5);
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        if (a2 < a1)
        {
            v7 += a2 - a4;
        }
        else
        {
            v7 += a2 + a4 - a5;
        }
    }
    if (v6 < a3)
    {
        v9 = a5 * a5 + a2 + a2;
    }
    else
    {
        v9 = a4 * a2 + a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 4
6 17
7 17
8 19
9 19
10 19
11 19
12 23
13 23
14 23
15 25
16 25
17 25
18 25
19 25
20 25
21 26
<<<sep_out_sample>>>
mov %ecx,%eax
sub %esi,%eax
add %r8d,%eax
lea (%rax,%rdi,2),%eax
add %edx,%eax
add %esi,%eax
add %r8d,%eax
add %eax,%ecx
mov %r8d,%eax
sub %esi,%eax
lea 0x1(%rcx,%rax,1),%eax
sub $0x1,%r8d
imul %r8d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a4 < a4)
    {
        v6 = a2 * (a3 * a1) * a4;
    }
    else
    {
        v6 = a2 - a2 + a5 - a2;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += a3 - a4;
    }
    v9 = a5 * a3 - a3;
    v10 = a1 + ((a4 - a2) + a5);
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 19
5 19
6 19
7 19
8 19
9 10
10 10
11 19
12 17
13 17
14 19
15 20
<<<sep_out_sample>>>
lea (%rsi,%rdx,1),%eax
imul %esi,%eax
mov %r8d,%r9d
sub %eax,%r9d
lea (%rcx,%r8,1),%eax
cmp %edi,%r8d
jge 1f <func1+0x1f>
mov %esi,%eax
imul %esi,%eax
add %edx,%eax
sub %r8d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a5 - a2 * (a2 + a3);
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += a3 + (a2 * a4);
    }
    if (a5 < a1)
    {
        v9 = (a3 + a2 * a2) - a5;
    }
    else
    {
        v9 = a4 + a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 16
6 10
7 10
8 12
9 12
10 12
11 12
12 18
13 18
14 18
15 18
16 18
17 18
18 19
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %r8d,%esi
lea (%r8,%rcx,2),%eax
lea (%rax,%rsi,1),%eax
sub %r8d,%ecx
imul %r8d,%r8d
sub %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a4 + a3 + a5 - a3;
    if (a4 < a4)
    {
        v7 = a3 + a2 + (a4 * a4);
    }
    else
    {
        v7 = a4 - a5 - a5 * a5;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += a2 + a2 * a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 4
5 18
6 11
7 11
8 11
9 18
10 19
<<<sep_out_sample>>>
lea (%r8,%r8,1),%eax
cmp %ecx,%esi
cmovge %r8d,%eax
mov $0x0,%r9d
cmp %ecx,%r8d
jl 23 <func1+0x23>
lea (%rdi,%rcx,1),%r9d
mov %ecx,%r10d
imul %ecx,%r10d
sub %r10d,%r9d
lea 0x1(%r9,%rdi,1),%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (a4 < a4)
        {
            v6 += a5 * a4;
        }
        else
        {
            v6 += a5 - (a5 * a2);
        }
    }
    if (a2 < a4)
    {
        v8 = a5 + a5;
    }
    else
    {
        v8 = a2 - a2 + a5;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        v9 += a4 - a4;
    }
    if (a5 < a4)
    {
        v11 = a2 * (a1 - a1) * a4;
    }
    else
    {
        v11 = (a1 + a4) - a4 * a4;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 31
5 29
6 29
7 35
8 35
9 35
10 35
11 37
12 37
13 37
14 37
15 37
16 37
17 38
<<<sep_out_sample>>>
mov %r8d,%r9d
sub %edx,%r9d
cmp %edx,%ecx
mov $0x0,%eax
cmovl %eax,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
imul %ecx,%ecx
sub %ecx,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a4 < a3)
    {
        v6 = a4 - a4;
    }
    else
    {
        v6 = a5 - (a3 + a2 - a2);
    }
    v7 = a3 - (a4 * a4);
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 10
6 13
7 13
8 13
9 13
10 13
11 12
12 12
13 13
14 14
<<<sep_out_sample>>>
mov $0x0,%eax
cmp %edx,%esi
jl f <func1+0xf>
lea (%rcx,%rdx,1),%eax
sub %r8d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a2 < a3)
    {
        v6 = a5 - a5;
    }
    else
    {
        v6 = (a4 + a3) - a5;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += (a3 - a2) * a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 6
2 4
3 4
4 10
5 10
6 17
7 17
8 17
9 17
10 17
11 18
<<<sep_out_sample>>>
mov %edx,%r9d
not %r9d
imul %ecx,%r9d
add %esi,%r9d
mov %edx,%eax
sub %esi,%eax
cmp %r8d,%edx
jge 1d <func1+0x1d>
mov %edi,%eax
imul %edx,%eax
neg %eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a2 - (a4 + (a4 * a3));
    if (a3 < a5)
    {
        v7 = a2 - (a1 * a3) - a2;
    }
    else
    {
        v7 = a3 - a2;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        if (v9 < a2)
        {
            v8 += (a2 + a5) * a2;
        }
        else
        {
            v8 += a1 + a2;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 11
6 11
7 5
8 5
9 7
10 7
11 7
12 25
13 25
14 25
15 25
16 25
17 25
18 26
<<<sep_out_sample>>>
cmp %esi,%ecx
jge 11 <func1+0x11>
mov %r8d,%eax
not %eax
imul %r8d,%eax
add %ecx,%eax
jmp 1b <func1+0x1b>
mov %esi,%eax
imul %esi,%eax
imul %edi,%eax
sub %esi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a4 < a2)
    {
        v6 = a4 - ((a5 * a5) + a5);
    }
    else
    {
        v6 = a1 * (a2 * a2) - a2;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += (a2 + a1) * a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 17
13 17
14 17
15 17
16 17
17 18
<<<sep_out_sample>>>
lea (%rsi,%rcx,1),%eax
cmp %edx,%esi
jl 10 <func1+0x10>
mov %r8d,%eax
sub %ecx,%eax
sub %edx,%eax
sub %ecx,%eax
lea 0x1(%rdi,%rdx,1),%r9d
add %esi,%r9d
add %r9d,%r8d
add %ecx,%r8d
add %r8d,%eax
imul %edx,%edx
add %edx,%ecx
add %ecx,%eax
sub %esi,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a2 < a3)
    {
        v6 = a2 + (a1 + a4) - a1;
    }
    else
    {
        v6 = a5 - a4 - a3 - a4;
    }
    v7 = a4 + a3 * a3;
    v8 = a1 - a2;
    v9 = 0;
    for (v10 = 0; v10++; v10<a1)
    {
        if (a3 < a5)
        {
            v9 += a5 - a1;
        }
        else
        {
            v9 += (a3 - a2) + a1;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 4
3 4
4 10
5 10
6 10
7 10
8 26
9 26
10 26
11 26
12 26
13 12
14 12
15 26
16 13
17 26
18 27
<<<sep_out_sample>>>
cmp %ecx,%r8d
jge f <func1+0xf>
lea 0x1(%rcx),%eax
imul %edi,%eax
add %ecx,%eax
jmp 19 <func1+0x19>
mov %esi,%eax
sub %edi,%eax
imul %edx,%eax
imul %esi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a5 < a4)
    {
        v6 = a1 + a1 * a4 + a4;
    }
    else
    {
        v6 = a3 * (a2 - a1) * a2;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        if (a4 < a4)
        {
            v7 += (a2 * a3) - a3;
        }
        else
        {
            v7 += a1 + a1 + a2;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 10
11 24
12 24
13 24
14 24
15 24
16 25
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %esi,%edi
sub %edx,%edi
imul %r8d,%edi
add %edi,%eax
sub %ecx,%r8d
lea (%r8,%rsi,2),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = (a1 + a2 - a3) * a5;
    v7 = (a2 + (a5 - a4)) + a2;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 4
7 4
8 6
9 5
10 5
11 6
12 7
<<<sep_out_sample>>>
cmp %esi,%ecx
jge 14 <func1+0x14>
mov %r8d,%r9d
sub %edi,%r9d
sub $0x1,%r9d
imul %edx,%r9d
jmp 1d <func1+0x1d>
mov %edx,%r9d
sub %esi,%r9d
sub %edi,%r9d
mov %edx,%eax
sub %r8d,%eax
cmp %edx,%ecx
jle 31 <func1+0x31>
mov %esi,%eax
imul %edx,%eax
add %r8d,%eax
imul %esi,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a4 < a2)
    {
        v6 = a3 * (a5 - a1) - a3;
    }
    else
    {
        v6 = a3 - a2 - a1;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        if (a2 < a1)
        {
            v7 += a5 - (a3 + a4);
        }
        else
        {
            v7 += a1 * a1 + a5;
        }
    }
    if (a3 < a4)
    {
        v9 = a2 * (a2 * a3 + a5);
    }
    else
    {
        v9 = a1 - ((a1 - a3) + a5);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 30
12 30
13 24
14 24
15 26
16 26
17 26
18 26
19 32
20 32
21 32
22 32
23 32
24 32
25 33
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
add %r8d,%ecx
add %esi,%edi
lea 0x1(%rcx,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a1 + a2;
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        if (a5 < a2)
        {
            v7 += (a3 * a1) - a3;
        }
        else
        {
            v7 += a2 * a2 - a5;
        }
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        if (v9 < a4)
        {
            v9 += a2 - a1 * a5;
        }
        else
        {
            v9 += a4 + a1 - a1;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 29
2 29
3 29
4 29
5 4
6 29
7 30
<<<sep_out_sample>>>
lea 0x2(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
sub %esi,%edi
imul %edi,%r8d
lea (%rax,%rcx,2),%eax
lea 0x1(%r8,%rax,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = (a1 - a2) * a5 + a4;
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += (a2 + a5) - a2;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        if (a5 < a4)
        {
            v9 += a1 - a5 - a4;
        }
        else
        {
            v9 += a3 * a4 * a5;
        }
    }
    v11 = 0;
    for (v12 = 0; v12++; v12<a3)
    {
        v11 += a2 - a5 * a2;
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 27
2 27
3 27
4 4
5 4
6 4
7 27
8 28
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
lea (%rdx,%rcx,2),%r9d
lea (%r9,%rax,1),%r9d
imul %edx,%edx
add %esi,%edx
add %edi,%edx
add %edx,%r9d
lea (%r8,%rcx,1),%edx
imul %ecx,%edx
sub %esi,%edx
add %r9d,%edx
imul %r8d,%ecx
add %ecx,%edi
sub %esi,%edi
lea (%rdx,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = (a4 + a4 + a3) - a4;
    v7 = (a3 * a3 + a2) + a1;
    v8 = ((a5 + a4) * a4) - a2;
    v9 = (a1 + (a5 * a4)) - a2;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 8
2 8
3 8
4 4
5 8
6 5
7 5
8 5
9 8
10 6
11 6
12 6
13 8
14 7
15 7
16 7
17 8
18 9
<<<sep_out_sample>>>
mov %edi,%r9d
imul %edi,%r9d
add %ecx,%r9d
mov %edx,%eax
sub %r8d,%eax
cmp $0x1,%r8d
jle 23 <func1+0x23>
lea (%rdx,%r8,1),%eax
mov %esi,%r10d
imul %ecx,%r10d
sub %r10d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %r9d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (a3 < a1)
        {
            v6 += a5 + a1 - a5;
        }
        else
        {
            v6 += a2 * (a2 * a2);
        }
    }
    v8 = a4 + a1 * a1;
    if (v7 < a5)
    {
        v9 = a3 + a5 - a2 * a4;
    }
    else
    {
        v9 = a3 - a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 16
4 23
5 23
6 17
7 17
8 19
9 19
10 19
11 19
12 25
13 25
14 25
15 25
16 25
17 25
18 26
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
mov %edx,%r9d
sub %edi,%r9d
lea (%r8,%rcx,2),%eax
lea (%rax,%r9,1),%eax
add %esi,%esi
imul %esi,%edi
sub %edi,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a3 - a1 + a4;
    v7 = a3 - (a2 + a2) * a1;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 4
5 4
6 4
7 6
8 5
9 5
10 5
11 6
12 7
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = (a4 * (a3 - a3)) * a4;
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += a4 - a4 - a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 11
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea (%r8,%rcx,1),%eax
mov %ecx,%r9d
sub %edi,%r9d
add %r9d,%eax
add %ecx,%edi
add %edi,%eax
mov %edx,%esi
sub %ecx,%esi
imul %esi,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a4 + a4 - a1 - a4;
    v7 = a4 + a1;
    if (a5 < a5)
    {
        v8 = a1 + a2 - a3 - a2;
    }
    else
    {
        v8 = (a3 - a4) * a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 14
2 14
3 14
4 14
5 4
6 4
7 14
8 5
9 14
10 12
11 12
12 12
13 14
14 15
<<<sep_out_sample>>>
cmp %edi,%ecx
jle 10 <func1+0x10>
mov %esi,%eax
imul %edx,%eax
add %r8d,%eax
add %edx,%eax
jmp 15 <func1+0x15>
mov %edi,%eax
imul %edx,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a4 * (a5 * a3);
    }
    if (a1 < a4)
    {
        v8 = a2 * a3 + a5 + a3;
    }
    else
    {
        v8 = a1 * a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 11
8 15
9 15
10 17
11 17
12 17
13 17
14 17
15 18
<<<sep_out_sample>>>
cmp %r8d,%esi
jge f <func1+0xf>
lea (%rcx,%rdi,1),%eax
sub %edx,%eax
imul %esi,%eax
jmp 15 <func1+0x15>
lea (%r8,%rsi,2),%eax
sub %edx,%eax
lea (%rdi,%rcx,1),%r9d
imul %r8d,%r9d
add %edi,%r9d
add %edx,%r9d
add %esi,%r9d
add %r8d,%r9d
add %r9d,%ecx
add %eax,%ecx
imul %esi,%r8d
add %r8d,%edi
sub %edx,%edi
lea 0x1(%rcx,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a2 < a5)
    {
        v6 = ((a4 + a1) - a3) * a2;
    }
    else
    {
        v6 = ((a5 + a2) + a2) - a3;
    }
    v7 = a2 * a5 + a1 - a3;
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        if (a3 < a4)
        {
            v8 += a1 * a1 - a2;
        }
        else
        {
            v8 += a2 * a4;
        }
    }
    if (a5 < a5)
    {
        v10 = a2 + a5;
    }
    else
    {
        v10 = (a5 * a1) + a5 * a4;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 31
10 31
11 33
12 33
13 33
14 33
15 33
16 33
17 12
18 12
19 12
20 33
21 34
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (a3 < a4)
        {
            v6 += a3 - a4 * a4;
        }
        else
        {
            v6 += a3 - a3 - a2;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        if (v8 < a1)
        {
            v8 += a2 + a5 - a5;
        }
        else
        {
            v8 += (a1 - a1) + a1;
        }
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a4)
    {
        if (a1 < a2)
        {
            v10 += a1 + (a4 + a1);
        }
        else
        {
            v10 += a2 - a3;
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 40
2 40
3 40
4 40
5 41
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%eax
imul %r8d,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (a1 < a2)
        {
            v6 += (a3 * a5) * a3;
        }
        else
        {
            v6 += a4 * (a1 + a2);
        }
    }
    v8 = a5 * a5;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 16
6 17
7 18
<<<sep_out_sample>>>
add %edi,%edx
add %edx,%esi
add %r8d,%esi
add %ecx,%esi
add %ecx,%edi
imul %edi,%ecx
sub %ecx,%r8d
lea 0x1(%rsi,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a5 - (a4 + a1) * a4;
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        if (a3 < a3)
        {
            v7 += a3 * a3 + a2;
        }
        else
        {
            v7 += a4 - (a1 * a1);
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 4
6 4
7 4
8 17
9 18
<<<sep_out_sample>>>
lea (%r8,%rdi,1),%r9d
mov %r9d,%r10d
imul %r8d,%r10d
sub %edx,%r10d
lea (%rsi,%rcx,1),%eax
cmp %esi,%r8d
cmovle %eax,%r9d
test %edx,%edx
jle 24 <func1+0x24>
lea (%rcx,%r8,2),%eax
add %edi,%eax
jmp 2b <func1+0x2b>
mov %r8d,%eax
sub %edi,%eax
add %esi,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r10d,%ecx
add %ecx,%r9d
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = ((a5 + a1) * a5) - a3;
    if (a2 < a5)
    {
        v7 = a1 + a5;
    }
    else
    {
        v7 = a2 + a2 + a4 - a2;
    }
    if (v8 < a3)
    {
        v8 = a5 + (a5 + a4) + a1;
    }
    else
    {
        v8 = a2 - (a1 - a5);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 11
6 11
7 11
8 13
9 13
10 15
11 15
12 15
13 19
14 19
15 19
16 21
17 21
18 21
19 21
20 21
21 21
22 21
23 22
<<<sep_out_sample>>>
cmp %r8d,%ecx
jge 10 <func1+0x10>
lea -0x1(%rcx),%eax
imul %ecx,%eax
sub %r8d,%eax
jmp 19 <func1+0x19>
lea (%rsi,%r8,1),%eax
sub %ecx,%eax
imul %esi,%eax
lea 0x1(%rax,%rdi,1),%eax
add %eax,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a2 * a2 - a4;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        if (a2 < a3)
        {
            v8 += a3 + a2;
        }
        else
        {
            v8 += a3 + a2;
        }
    }
    if (a4 < a5)
    {
        v10 = (a4 * a4 - a4) - a5;
    }
    else
    {
        v10 = a2 * ((a2 + a5) - a4);
    }
    v11 = 0;
    for (v12 = 0; v12++; v12<a3)
    {
        v11 += (a3 + a5) + a5;
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 23
4 23
5 23
6 23
7 27
8 27
9 27
10 34
11 34
12 34
13 34
14 34
15 35
<<<sep_out_sample>>>
mov %esi,%eax
sub %ecx,%eax
test %esi,%esi
jle f <func1+0xf>
mov %edx,%eax
imul %edx,%eax
add %esi,%eax
lea (%rdi,%rdx,1),%r9d
add %r9d,%esi
add %r8d,%esi
add %ecx,%esi
add %esi,%eax
sub %r8d,%edi
add %edi,%ecx
imul %ecx,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (v6 < a2)
    {
        v6 = a2 + (a3 * a3);
    }
    else
    {
        v6 = a2 - a4;
    }
    v7 = (a4 - (a5 - a1)) * a3;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 10
2 10
3 4
4 4
5 6
6 6
7 6
8 13
9 13
10 13
11 13
12 13
13 12
14 12
15 12
16 13
17 14
<<<sep_out_sample>>>
test %ecx,%ecx
jle e <func1+0xe>
lea 0x1(%rdi),%eax
imul %edx,%eax
add %esi,%eax
jmp 16 <func1+0x16>
lea 0x1(%rcx),%eax
imul %edi,%eax
sub %edx,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %r8d,%esi
lea 0x2(%rcx,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (v6 < a2)
        {
            v6 += a3 * a1;
        }
        else
        {
            v6 += a3 * a3;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += a5 - a3;
    }
    if (v10 < a4)
    {
        v10 = (a3 * a1 + a3) + a2;
    }
    else
    {
        v10 = a1 + a4 * a1 - a3;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 23
4 23
5 23
6 23
7 27
8 27
9 27
10 29
11 29
12 29
13 29
14 29
15 30
<<<sep_out_sample>>>
lea (%rdx,%rcx,2),%r9d
add %edi,%r9d
cmp %esi,%edi
jle 17 <func1+0x17>
lea (%r8,%rdi,1),%eax
imul %edi,%eax
imul %edx,%eax
jmp 20 <func1+0x20>
lea 0x1(%rdx),%eax
imul %ecx,%eax
imul %esi,%eax
test %edi,%edi
jle 30 <func1+0x30>
mov %edi,%r10d
neg %r10d
imul %edi,%r10d
jmp 3d <func1+0x3d>
mov %edi,%r10d
imul %edi,%r10d
add %r8d,%r10d
add %ecx,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a3 + a4 + a4 + a1;
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        if (a5 < a2)
        {
            v7 += a5 - (a3 - a2);
        }
        else
        {
            v7 += a1 * a2;
        }
    }
    if (a2 < a1)
    {
        v9 = ((a5 + a1) * a1) * a3;
    }
    else
    {
        v9 = (a3 * a4 + a4) * a2;
    }
    if (v10 < a1)
    {
        v10 = (a2 - (a2 + a1)) * a1;
    }
    else
    {
        v10 = a4 + (a1 * a1 + a5);
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 17
4 17
5 19
6 19
7 19
8 19
9 23
10 23
11 23
12 25
13 25
14 27
15 27
16 27
17 27
18 31
19 31
20 31
21 31
22 33
23 33
24 33
25 33
26 33
27 33
28 33
29 34
<<<sep_out_sample>>>
lea 0x2(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12, v13 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (v7 < a5)
        {
            v6 += a4 * a5 + a5;
        }
        else
        {
            v6 += a2 - a2 + a2;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        if (v8 < a1)
        {
            v8 += a2 - a3 - a1;
        }
        else
        {
            v8 += (a3 + a4) * a4;
        }
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a1)
    {
        if (a4 < a2)
        {
            v10 += a4 + a5 - a1;
        }
        else
        {
            v10 += a2 + a5;
        }
    }
    v12 = 0;
    for (v13 = 0; v13++; v13<a4)
    {
        v12 += (a5 * a5) - a1;
    }
    return v12+v13+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 45
2 45
3 45
4 45
5 46
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a2 * a3 * a2;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += a3 * a3 - a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 14
2 14
3 14
4 14
5 15
<<<sep_out_sample>>>
mov %ecx,%eax
sub %edx,%eax
mov %ecx,%r9d
neg %r9d
cmp %edx,%edi
cmovge %r9d,%eax
add %edx,%edi
add %edi,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%ecx
add %ecx,%eax
imul %r8d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a4 - (a1 + a2);
    }
    if (a1 < a3)
    {
        v8 = a4 - a3;
    }
    else
    {
        v8 = a5 - a5 - a4;
    }
    v9 = ((a3 * a5) - a3) + a3;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 11
5 11
6 11
7 18
8 18
9 18
10 18
11 18
12 17
13 18
14 19
<<<sep_out_sample>>>
mov %edi,%eax
sub %r8d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a2 < a3)
    {
        v6 = (a2 - a2) + a1 - a5;
    }
    else
    {
        v6 = a1 - a5;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += a2 * a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 17
4 17
5 17
6 17
7 17
8 18
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
mov %r8d,%r9d
sub %edi,%r9d
add %r9d,%eax
sub %r8d,%edi
add %edi,%eax
lea (%rsi,%rsi,1),%edi
imul %edi,%r8d
imul %esi,%r8d
add %r8d,%eax
add $0x1,%edx
imul %edx,%ecx
add %ecx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = ((a5 - a3) + a3) - a1;
    v7 = a3 - a5 - (a3 - a1);
    v8 = (a2 + a2) * a5 * a2;
    v9 = a2 + (a3 * a4 + a4);
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 8
2 8
3 8
4 8
5 4
6 4
7 8
8 5
9 8
10 6
11 6
12 6
13 8
14 7
15 7
16 7
17 8
18 9
<<<sep_out_sample>>>
mov %r8d,%eax
imul %esi,%eax
mov %edi,%r11d
sub %eax,%r11d
add %edx,%r11d
mov %ecx,%r10d
imul %edi,%r10d
add %edx,%r10d
add %esi,%r10d
mov %r8d,%r9d
sub %ecx,%r9d
cmp $0x1,%edx
jle 33 <func1+0x33>
lea (%r8,%rsi,1),%r9d
mov %edi,%eax
imul %edx,%eax
add %eax,%r9d
add %r9d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %r11d,%eax
add %r10d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a4 + a5;
    }
    v8 = a1 - a5 * a2 + a3;
    v9 = a2 + ((a4 * a1) + a3);
    if (v7 < a3)
    {
        v10 = (a5 + a2) + a1 * a3;
    }
    else
    {
        v10 = (a5 - a4 + a4) - a4;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 9
4 9
5 9
6 10
7 10
8 10
9 10
10 17
11 17
12 11
13 11
14 13
15 13
16 13
17 13
18 19
19 19
20 19
21 19
22 19
23 19
24 19
25 20
<<<sep_out_sample>>>
cmp %r8d,%esi
jge 14 <func1+0x14>
mov %edi,%r9d
sub %esi,%r9d
add %edi,%r9d
imul %r8d,%r9d
jmp 20 <func1+0x20>
lea (%rcx,%rdi,1),%r9d
mov %edi,%eax
imul %esi,%eax
sub %eax,%r9d
mov %edi,%eax
neg %eax
sub %esi,%eax
mov %edi,%r10d
sub %r8d,%r10d
cmp %edx,%edi
jl 37 <func1+0x37>
mov %r8d,%r10d
imul %edi,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a2 < a5)
    {
        v6 = (a1 - (a2 - a1)) * a5;
    }
    else
    {
        v6 = a4 + a1 - a1 * a2;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += a5 - a5 + a4;
    }
    v9 = a2 - a2 - a1 - a2;
    if (a1 < a3)
    {
        v10 = a1 - a5;
    }
    else
    {
        v10 = a5 * a1;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 17
13 17
14 17
15 20
16 20
17 18
18 18
19 24
20 24
21 26
22 26
23 26
24 26
25 26
26 26
27 26
28 27
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea (%r8,%rcx,1),%esi
sub %edx,%ecx
lea 0x1(%rsi,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a4 - a5 + a5 - a3;
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += (a1 * a5) - a2;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        if (v8 < a1)
        {
            v9 += a4 * a5 - a1;
        }
        else
        {
            v9 += (a4 - a4) * a3;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 22
4 22
5 4
6 22
7 23
<<<sep_out_sample>>>
mov $0x0,%eax
mov %edi,%r9d
imul %edi,%r9d
cmp %ecx,%edx
cmovge %r9d,%eax
lea (%rdi,%rdx,1),%r9d
add %esi,%r9d
add %r8d,%r9d
add %ecx,%r9d
add %r9d,%eax
add %esi,%edx
sub %r8d,%edx
add %edx,%edi
add %edi,%eax
add %esi,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a3 < a4)
    {
        v6 = a1 - a1;
    }
    else
    {
        v6 = a1 * a1;
    }
    v7 = (a2 + a3) - a5 + a1;
    v8 = a4 + a2;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 6
2 10
3 10
4 10
5 10
6 14
7 14
8 14
9 14
10 14
11 12
12 12
13 12
14 14
15 13
16 14
17 15
<<<sep_out_sample>>>
lea (%rsi,%rcx,1),%r9d
cmp %r8d,%edx
jl 15 <func1+0x15>
mov %ecx,%r9d
sub %esi,%r9d
add %edx,%r9d
sub %esi,%r9d
mov %r8d,%eax
sub %edi,%eax
cmp %edi,%esi
jle 28 <func1+0x28>
mov %ecx,%eax
sub %edx,%eax
imul %esi,%eax
imul %esi,%eax
add %edx,%edi
add %esi,%edi
add %edi,%r8d
add %ecx,%r8d
add %r9d,%r8d
add %eax,%r8d
sub %edx,%esi
add %esi,%ecx
sub %edx,%ecx
lea (%r8,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a3 < a5)
    {
        v6 = a2 + a3 + a4 - a3;
    }
    else
    {
        v6 = (a4 - a2 + a3) - a2;
    }
    if (a1 < a2)
    {
        v7 = (a2 * (a4 - a3)) * a2;
    }
    else
    {
        v7 = a5 - a1;
    }
    v8 = a4 - (a3 - a2) - a3;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 6
2 4
3 4
4 10
5 10
6 10
7 10
8 18
9 18
10 12
11 12
12 14
13 14
14 14
15 14
16 21
17 21
18 21
19 21
20 21
21 21
22 20
23 20
24 20
25 21
26 22
<<<sep_out_sample>>>
mov %r8d,%r9d
imul %edi,%r9d
mov %esi,%r11d
imul %esi,%r11d
lea (%rdx,%rcx,1),%eax
imul %eax,%r11d
mov %r9d,%r10d
neg %r10d
lea (%rsi,%rcx,1),%eax
cmp %r10d,%r8d
cmovle %r9d,%eax
mov %eax,%r10d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
sub %r9d,%ecx
lea (%rcx,%r11,1),%eax
add %r10d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a3 - (a3 + a5 * a1);
    v7 = a2 * a2 * (a3 + a4);
    if (v6 < a5)
    {
        v8 = a2 + a4;
    }
    else
    {
        v8 = a5 * a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 5
4 5
5 5
6 5
7 4
8 4
9 8
10 8
11 8
12 8
13 14
14 14
15 14
16 14
17 14
18 14
19 14
20 15
<<<sep_out_sample>>>
mov %edx,%r9d
imul %ecx,%r9d
mov %r8d,%eax
imul %edi,%eax
add %eax,%r9d
cmp %r9d,%edi
jle 22 <func1+0x22>
lea (%rsi,%rdi,1),%r10d
imul %ecx,%r10d
add %r8d,%r10d
jmp 29 <func1+0x29>
mov %esi,%r10d
imul %esi,%r10d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %eax,%r9d
lea (%r9,%r10,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (a1 < a2)
        {
            v6 += a5 - a4;
        }
        else
        {
            v6 += (a2 + a2) * a2;
        }
    }
    v8 = a3 * a4 + a5 * a1;
    if (v8 < a1)
    {
        v9 = a5 + (a2 + a1) * a4;
    }
    else
    {
        v9 = a2 * a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 16
4 16
5 16
6 17
7 17
8 19
9 19
10 19
11 19
12 23
13 23
14 25
15 25
16 25
17 25
18 25
19 25
20 26
<<<sep_out_sample>>>
lea (%rcx,%rdi,1),%eax
test %r8d,%r8d
jle 11 <func1+0x11>
mov %ecx,%eax
imul %r8d,%eax
imul %esi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a4 + a1 * a5;
    }
    if (v6 < a5)
    {
        v8 = (a4 * a5) * a2;
    }
    else
    {
        v8 = a4 + a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 15
2 9
3 9
4 11
5 11
6 11
7 17
8 17
9 17
10 17
11 17
12 18
<<<sep_out_sample>>>
test %edi,%edi
jle a <func1+0xa>
lea (%r8,%r8,1),%eax
jmp f <func1+0xf>
mov %edi,%eax
imul %esi,%eax
lea 0x1(%rax,%rdi,1),%eax
add %eax,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a1 * a3;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += a5 * a1 - a4;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a3)
    {
        v10 += (a4 * a4) * a1;
    }
    if (v12 < a1)
    {
        v12 = a5 + (a5 - a1) + a1;
    }
    else
    {
        v12 = a1 * a2;
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 19
2 19
3 21
4 21
5 25
6 25
7 27
8 27
9 27
10 27
11 27
12 28
<<<sep_out_sample>>>
lea (%rdx,%r8,1),%r9d
cmp %esi,%ecx
jl 14 <func1+0x14>
mov %ecx,%r9d
sub %edx,%r9d
sub %esi,%r9d
sub %esi,%r9d
mov $0x0,%eax
cmp %edx,%ecx
jge 26 <func1+0x26>
lea (%rdi,%rdx,1),%eax
add %r8d,%eax
imul %esi,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a4 < a2)
    {
        v6 = a3 - a2 + a5 + a2;
    }
    else
    {
        v6 = a4 - a3 - a2 - a2;
    }
    if (a4 < a3)
    {
        v7 = ((a1 + a3) + a5) * a2;
    }
    else
    {
        v7 = ((a1 - a1) * a3) * a3;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 4
3 4
4 10
5 10
6 10
7 10
8 18
9 12
10 12
11 14
12 14
13 14
14 20
15 20
16 20
17 20
18 20
19 20
20 21
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %r8d,%edx
add %edx,%ecx
lea (%rdi,%r8,1),%eax
imul %edi,%eax
sub %esi,%eax
lea 0x1(%rcx,%rax,1),%eax
imul %esi,%r8d
imul %r8d,%esi
sub %esi,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a1 * (a1 + a5) - a2;
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += a2 - a3 * a3;
    }
    v9 = a1 - (a2 * a5 * a2);
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 11
5 4
6 4
7 4
8 11
9 10
10 10
11 10
12 11
13 12
<<<sep_out_sample>>>
lea 0x2(%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
add %r8d,%ecx
imul %edi,%edi
imul %edi,%edx
add %edx,%esi
lea 0x1(%rcx,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = a1 * a1 * a3 + a2;
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += a5 * a5 + a2;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a1)
    {
        if (a3 < a1)
        {
            v9 += a3 - a5;
        }
        else
        {
            v9 += (a4 * a5) * a2;
        }
    }
    v11 = 0;
    for (v12 = 0; v12++; v12<a2)
    {
        v11 += a1 - a4;
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 27
2 27
3 27
4 27
5 4
6 4
7 4
8 27
9 28
<<<sep_out_sample>>>
lea (%rsi,%rsi,1),%eax
lea (%r8,%rdx,1),%r9d
cmp %esi,%ecx
cmovge %r9d,%eax
lea 0x2(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    if (a4 < a2)
    {
        v6 = a2 + a2;
    }
    else
    {
        v6 = a5 + a3;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        if (v7 < a5)
        {
            v7 += a5 * a1 * a5;
        }
        else
        {
            v7 += a3 * a2 * a5;
        }
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        if (a2 < a5)
        {
            v9 += a3 + (a3 + a2);
        }
        else
        {
            v9 += a2 - a1;
        }
    }
    v11 = 0;
    for (v12 = 0; v12++; v12<a1)
    {
        if (a2 < a3)
        {
            v11 += a2 - a3 * a2;
        }
        else
        {
            v11 += a5 + a3;
        }
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 48
6 48
7 48
8 48
9 48
10 49
<<<sep_out_sample>>>
mov %ecx,%eax
imul %ecx,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a2 < a2)
    {
        v6 = a2 - (a1 + a5);
    }
    else
    {
        v6 = (a4 * a4) + a5 - a5;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a2 + a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 17
4 17
5 17
6 17
7 17
8 18
<<<sep_out_sample>>>
cmp %edx,%ecx
jge f <func1+0xf>
mov %r8d,%r9d
sub %ecx,%r9d
add %edx,%r9d
jmp 19 <func1+0x19>
mov %edx,%r9d
imul %r8d,%r9d
add %edi,%r9d
cmp %edi,%ecx
jle 28 <func1+0x28>
mov %ecx,%eax
sub %edx,%eax
imul %ecx,%eax
add %edx,%eax
jmp 32 <func1+0x32>
lea (%r8,%r8,1),%eax
sub %ecx,%eax
imul %r8d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a4 < a3)
    {
        v6 = a5 - a4 + a3;
    }
    else
    {
        v6 = a1 + a3 * a5;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        if (v8 < a2)
        {
            v7 += a5 * a3 + a5;
        }
        else
        {
            v7 += a2 + a2;
        }
    }
    if (a1 < a4)
    {
        v9 = (a4 * (a4 - a3)) + a3;
    }
    else
    {
        v9 = (a5 + a5 - a4) * a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 24
11 24
12 26
13 26
14 26
15 26
16 26
17 30
18 30
19 30
20 32
21 32
22 32
23 32
24 32
25 32
26 33
<<<sep_out_sample>>>
mov %edi,%eax
imul %esi,%eax
mov %edx,%r9d
sub %edi,%r9d
cmp %ecx,%eax
jl 17 <func1+0x17>
lea 0x1(%r8),%r9d
imul %esi,%r9d
lea (%rsi,%r8,1),%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%eax
lea 0x1(%r9,%rax,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a4 < a4)
    {
        v6 = a5 + a4 * a2 - a3;
    }
    else
    {
        v6 = a1 * a2;
    }
    if (v6 < a4)
    {
        v7 = a3 - (a4 + a1) + a4;
    }
    else
    {
        v7 = a2 + a2 * a5;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += (a1 * a5) * a1;
    }
    v10 = a2 + a5;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 14
4 14
5 12
6 12
7 18
8 18
9 25
10 26
11 26
12 26
13 26
14 26
15 26
16 26
17 27
<<<sep_out_sample>>>
cmp %ecx,%r8d
jge 17 <func1+0x17>
lea (%rdi,%rcx,1),%r9d
mov $0x1,%eax
sub %r9d,%eax
imul %r8d,%eax
jmp 1e <func1+0x1e>
lea (%rsi,%r8,2),%eax
lea (%rax,%rdx,1),%eax
add %edi,%edx
add %edx,%esi
add %r8d,%esi
add %ecx,%esi
add %eax,%esi
imul %ecx,%edi
imul %edi,%r8d
imul %r8d,%ecx
lea 0x1(%rsi,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a5 < a4)
    {
        v6 = a5 - (a1 + a4) * a5;
    }
    else
    {
        v6 = a5 + a2 + a3 + a5;
    }
    v7 = a5 * (a1 * a4) * a4;
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += (a4 * a3) * a2;
    }
    v10 = a3 - a3;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 19
11 19
12 19
13 19
14 19
15 12
16 12
17 12
18 19
19 20
<<<sep_out_sample>>>
push %rbx
lea (%rcx,%rsi,1),%eax
mov %r8d,%r11d
sub %eax,%r11d
add %edx,%r11d
mov %esi,%eax
imul %edx,%eax
lea (%r8,%rdx,1),%r10d
add %eax,%r10d
sub %edi,%eax
mov %esi,%r9d
sub %edx,%r9d
mov %r8d,%ebx
sub %ecx,%ebx
test %r8d,%r8d
cmovle %ebx,%r9d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r11d,%ecx
add %r10d,%ecx
add %ecx,%eax
add %r9d,%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a3 - ((a4 + a2) - a5);
    v7 = a5 + a3 + a2 * a3;
    v8 = a3 * a2 - a1;
    if (v9 < a5)
    {
        v9 = a2 - a3;
    }
    else
    {
        v9 = a5 - a4 + a3 - a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 4
3 4
4 4
5 4
6 5
7 5
8 5
9 5
10 6
11 9
12 9
13 9
14 9
15 9
16 9
17 15
18 15
19 15
20 15
21 15
22 15
23 15
24 15
25 16
26 16
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
imul %ecx,%edx
imul %edx,%ecx
sub %ecx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (a5 < a1)
        {
            v6 += (a3 - a3) * a5;
        }
        else
        {
            v6 += a2 * a3;
        }
    }
    if (a4 < a4)
    {
        v8 = (a3 - a3 - a3) - a5;
    }
    else
    {
        v8 = a1 - a3 * a4 * a4;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        v9 += a5 - a2 * a2;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 29
2 29
3 29
4 29
5 22
6 22
7 22
8 29
9 30
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
add %esi,%ecx
add %r8d,%edx
lea 0x1(%rcx,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a3 + a5;
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        if (v7 < a3)
        {
            v7 += a5 * (a4 + a4);
        }
        else
        {
            v7 += (a4 - a3) - a2;
        }
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        v9 += a1 - a3 + a4;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 22
4 22
5 4
6 22
7 23
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%r9d
add %esi,%r9d
add %r8d,%r9d
add %ecx,%r9d
imul %r8d,%ecx
imul %esi,%esi
sub %esi,%ecx
lea (%r9,%rcx,1),%eax
sub %edi,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a4 < a4)
    {
        v6 = a4 * (a2 * a2) - a2;
    }
    else
    {
        v6 = a4 * a5 - a2 * a2;
    }
    v7 = a3 - a1;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 13
2 13
3 13
4 13
5 10
6 10
7 10
8 13
9 12
10 13
11 14
<<<sep_out_sample>>>
test %esi,%esi
jle 13 <func1+0x13>
mov %edi,%r10d
sub %r8d,%r10d
mov %edi,%eax
sub %esi,%eax
add %eax,%r10d
jmp 1a <func1+0x1a>
lea (%rdi,%rsi,2),%eax
lea (%rax,%rcx,1),%r10d
lea (%rdi,%rdx,1),%eax
lea (%rcx,%rsi,1),%r9d
test %r8d,%r8d
cmovg %eax,%r9d
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (v6 < a2)
    {
        v6 = a1 - a5 - (a2 - a1);
    }
    else
    {
        v6 = a2 + ((a1 + a2) + a4);
    }
    if (v7 < a5)
    {
        v7 = a1 + a3;
    }
    else
    {
        v7 = a4 + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 6
9 10
10 10
11 14
12 14
13 14
14 14
15 20
16 20
17 20
18 20
19 20
20 21
<<<sep_out_sample>>>
lea (%r8,%rcx,2),%eax
lea 0x3(%rdx,%rax,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a4 + a4 + a4;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        if (a4 < a2)
        {
            v8 += a2 * a5;
        }
        else
        {
            v8 += a5 - (a2 * a4);
        }
    }
    if (a3 < a3)
    {
        v10 = ((a2 + a5) * a2) + a5;
    }
    else
    {
        v10 = a4 - a2 - a1;
    }
    v11 = 0;
    for (v12 = 0; v12++; v12<a3)
    {
        v11 += a3 * a1 + a4;
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 34
2 34
3 35
<<<sep_out_sample>>>
cmp %r8d,%ecx
jge 18 <func1+0x18>
mov %ecx,%eax
imul %ecx,%eax
mov %edx,%r9d
sub %eax,%r9d
mov %r9d,%eax
imul %esi,%eax
jmp 1f <func1+0x1f>
mov %edi,%eax
sub %edx,%eax
imul %esi,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a4 < a5)
    {
        v6 = a2 * (a3 - (a4 * a4));
    }
    else
    {
        v6 = a2 * (a1 - a3);
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += a3 * a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 6
9 6
10 10
11 10
12 10
13 17
14 17
15 17
16 17
17 17
18 18
<<<sep_out_sample>>>
push %rbx
mov %esi,%ebx
sub %edi,%ebx
mov %r8d,%r9d
imul %r8d,%r9d
add %edi,%r9d
mov %r9d,%r10d
sub %r8d,%r10d
mov %r8d,%r11d
imul %ecx,%r11d
sub %edx,%r11d
add %ecx,%r11d
mov %ecx,%eax
imul %ecx,%eax
cmp %r10d,%edi
cmovle %eax,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %ebx,%eax
add %r10d,%eax
add %r11d,%eax
add %r9d,%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a2 - a1;
    v7 = a1 + a5 * a5 - a5;
    v8 = (a5 * a4) - a3 + a4;
    if (v7 < a1)
    {
        v9 = a1 + a5 * a5;
    }
    else
    {
        v9 = (a4 * a4 - a1) + a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 4
3 4
4 5
5 5
6 5
7 5
8 5
9 6
10 6
11 6
12 6
13 13
14 13
15 13
16 13
17 15
18 15
19 15
20 15
21 15
22 15
23 15
24 15
25 16
26 16
<<<sep_out_sample>>>
mov %edi,%r9d
sub %edx,%r9d
test %edx,%edx
cmovg %ecx,%r9d
cmp %r8d,%r9d
jge 17 <func1+0x17>
lea (%rsi,%rsi,1),%r10d
jmp 22 <func1+0x22>
lea (%rcx,%rsi,1),%r10d
add %edi,%r10d
imul %ecx,%r10d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
lea (%r9,%r10,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (v6 < a3)
    {
        v6 = (a2 + a4) - a2;
    }
    else
    {
        v6 = ((a1 - a1) + a1) - a3;
    }
    if (v6 < a5)
    {
        v7 = a2 + a2;
    }
    else
    {
        v7 = (a4 + a2 + a1) * a4;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 12
6 12
7 14
8 14
9 18
10 18
11 18
12 20
13 20
14 20
15 20
16 20
17 20
18 21
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %ecx,%edx
imul %esi,%ecx
add %ecx,%edx
lea 0x1(%rax,%rdx,1),%eax
lea -0x1(%r8),%edx
imul %edx,%esi
add %esi,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = a4 + a3 + a4 * a2;
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += a2 * a2 * a5;
    }
    v9 = (a5 * a2) - a2 + a5;
    v10 = 0;
    for (v11 = 0; v11++; v11<a3)
    {
        if (a3 < a3)
        {
            v10 += a4 * a1;
        }
        else
        {
            v10 += a5 - a5;
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 23
2 23
3 23
4 23
5 4
6 4
7 4
8 23
9 10
10 10
11 10
12 23
13 24
<<<sep_out_sample>>>
lea (%rdi,%rcx,1),%eax
test %r8d,%r8d
jg e <func1+0xe>
mov %r8d,%eax
imul %edi,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (v6 < a5)
    {
        v6 = a2 + a1 + a4 - a2;
    }
    else
    {
        v6 = a5 * a1;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += (a5 - a4) + a2;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        if (v6 < a5)
        {
            v9 += a4 * a1;
        }
        else
        {
            v9 += a2 + a4 - a5;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 4
3 4
4 10
5 10
6 29
7 29
8 29
9 29
10 29
11 30
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
imul %esi,%ecx
imul %edi,%edx
add %ecx,%edx
lea 0x1(%rax,%rdx,1),%eax
lea -0x1(%rsi,%r8,1),%edx
imul %edx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = (a4 * a2) + a3 * a1;
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += a3 - a1;
    }
    v9 = ((a2 + a5) * a1) - a1;
    v10 = 0;
    for (v11 = 0; v11++; v11<a4)
    {
        v10 += a1 * a4 + a4;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 16
4 16
5 4
6 4
7 4
8 16
9 10
10 10
11 16
12 17
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
lea 0x1(%rcx,%r8,1),%ecx
lea (%rdi,%rdi,1),%eax
imul %eax,%esi
sub %edx,%esi
lea (%rcx,%rsi,1),%eax
imul %edx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a1 + a5 - a4;
    }
    v8 = a2 * (a1 + a1) - a3;
    v9 = a3 * a1;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 11
5 9
6 9
7 9
8 11
9 10
10 11
11 12
<<<sep_out_sample>>>
lea (%r8,%rdx,1),%r9d
mov %ecx,%r10d
sub %edx,%r10d
imul %edx,%r10d
sub %edi,%r10d
test %r8d,%r8d
jle 2a <func1+0x2a>
mov %edi,%eax
imul %r8d,%eax
imul %edx,%eax
mov %r8d,%r11d
sub %eax,%r11d
mov %r11d,%eax
jmp 30 <func1+0x30>
lea (%r8,%r9,1),%eax
add %edx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
add %r10d,%r9d
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a5 + a3;
    v7 = ((a4 - a3) * a3) - a1;
    if (v8 < a5)
    {
        v8 = a5 - a1 * a5 * a3;
    }
    else
    {
        v8 = (a3 + a5 + a5) + a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 5
3 5
4 5
5 5
6 6
7 6
8 8
9 8
10 8
11 8
12 8
13 8
14 8
15 12
16 12
17 14
18 14
19 14
20 14
21 14
22 14
23 14
24 15
<<<sep_out_sample>>>
mov %edi,%r9d
imul %edx,%r9d
add %r8d,%r9d
sub %esi,%r9d
lea (%rdx,%rdx,1),%eax
test %ecx,%ecx
jle 20 <func1+0x20>
lea (%r8,%rdi,1),%r10d
mov %ecx,%eax
imul %edi,%eax
add %r10d,%eax
add %r9d,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (a5 < a3)
        {
            v6 += a2 + a2 + a1;
        }
        else
        {
            v6 += a2 + a3 - a2;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += a1 + a3;
    }
    v10 = (a5 + (a1 * a3)) - a2;
    if (v6 < a4)
    {
        v11 = a5 + a1 + (a4 * a1);
    }
    else
    {
        v11 = a3 + a3;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 21
5 28
6 22
7 22
8 24
9 24
10 24
11 24
12 30
13 30
14 30
15 30
16 30
17 30
18 31
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r8d,%esi
sub %edi,%esi
add %edx,%esi
add %esi,%eax
mov %ecx,%edi
sub %edx,%edi
imul %ecx,%ecx
add %edi,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a3 + ((a2 + a5) - a1);
    v7 = a4 - a3 + (a4 * a4);
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 4
7 4
8 6
9 5
10 5
11 5
12 5
13 6
14 7
<<<sep_out_sample>>>
lea (%rdx,%rdi,1),%eax
sub %r8d,%eax
sub %esi,%eax
lea (%rsi,%rsi,2),%r9d
cmp %esi,%edi
jl 1e <func1+0x1e>
mov %esi,%r9d
imul %esi,%r9d
sub %r8d,%r9d
imul %ecx,%r9d
cmp %esi,%edx
jle 33 <func1+0x33>
mov %edx,%r10d
imul %r8d,%r10d
imul %r8d,%r10d
imul %ecx,%r10d
jmp 47 <func1+0x47>
mov %r8d,%r10d
imul %edx,%r10d
imul %r8d,%r10d
mov %edx,%r11d
sub %r10d,%r11d
mov %r11d,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a3 - (a4 + a4);
    }
    v8 = a3 + a1 - a5 - a2;
    if (a1 < a2)
    {
        v9 = (a2 + a2) + a2;
    }
    else
    {
        v9 = a4 * (a2 * a2 - a5);
    }
    if (a2 < a3)
    {
        v10 = a4 * (a5 * (a3 * a5));
    }
    else
    {
        v10 = a3 - ((a5 * a3) * a5);
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 9
4 12
5 10
6 10
7 16
8 16
9 16
10 16
11 18
12 18
13 20
14 20
15 20
16 20
17 20
18 24
19 24
20 24
21 24
22 24
23 24
24 26
25 26
26 26
27 26
28 26
29 26
30 26
31 27
<<<sep_out_sample>>>
cmp %esi,%edi
jge 15 <func1+0x15>
mov %edx,%r9d
imul %ecx,%r9d
add $0x1,%r9d
imul %esi,%r9d
jmp 1d <func1+0x1d>
lea 0x2(%rdi),%r9d
imul %edx,%r9d
lea (%rdx,%r8,1),%eax
test %edx,%edx
jle 2c <func1+0x2c>
mov %edx,%eax
imul %edi,%eax
add %ecx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a1 < a2)
    {
        v6 = a2 + a3 * a4 * a2;
    }
    else
    {
        v6 = ((a1 * a3) + a3) + a3;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += a5 + a2 + a2;
    }
    if (v9 < a3)
    {
        v9 = a4 + a3 * a1;
    }
    else
    {
        v9 = (a3 - a5 + a5) + a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 23
11 17
12 17
13 19
14 19
15 19
16 25
17 25
18 25
19 25
20 25
21 25
22 26
<<<sep_out_sample>>>
mov %edx,%r9d
imul %ecx,%r9d
add %esi,%r9d
mov %edi,%eax
sub %ecx,%eax
test %r8d,%r8d
jle 20 <func1+0x20>
lea (%rdx,%rcx,1),%eax
mov %r8d,%r10d
imul %r8d,%r10d
sub %r10d,%eax
cmp %edi,%edx
jle 33 <func1+0x33>
mov %esi,%r10d
not %r10d
imul %ecx,%r10d
add %edi,%r10d
jmp 40 <func1+0x40>
mov %edx,%r10d
sub %edi,%r10d
add %edx,%r10d
imul %esi,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a5 < a5)
    {
        v6 = a1 + a4;
    }
    else
    {
        v6 = a2 + a3 * a4;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += (a1 * a2) * a5;
    }
    if (v9 < a5)
    {
        v9 = a3 + a4 - a5 * a5;
    }
    else
    {
        v9 = a1 + (a1 - a4 - a1);
    }
    if (a1 < a3)
    {
        v10 = a1 - (a2 * a4 + a4);
    }
    else
    {
        v10 = (a3 - a1 + a3) * a2;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 23
5 23
6 17
7 17
8 19
9 19
10 19
11 19
12 25
13 25
14 27
15 27
16 27
17 27
18 27
19 31
20 31
21 31
22 31
23 33
24 33
25 33
26 33
27 33
28 33
29 33
30 34
<<<sep_out_sample>>>
mov %r8d,%eax
imul %r8d,%eax
add %edi,%eax
add %edx,%eax
add %esi,%eax
add %r8d,%eax
lea 0x1(%rcx,%rax,1),%eax
imul %ecx,%esi
sub %esi,%eax
add %edi,%r8d
sub %edx,%r8d
imul %r8d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a2 + a1 + a4;
    }
    v8 = a1 - a1 - (a2 * a4);
    v9 = (a5 + a1 - a3) * a3;
    if (a5 < a5)
    {
        v10 = a4 * a2;
    }
    else
    {
        v10 = a5 * a5;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 17
2 17
3 19
4 19
5 19
6 19
7 19
8 9
9 19
10 10
11 10
12 10
13 19
14 20
<<<sep_out_sample>>>
cmp %edi,%esi
jge 11 <func1+0x11>
mov %edx,%eax
imul %edx,%eax
add %r8d,%eax
imul %edx,%eax
jmp 19 <func1+0x19>
mov %edi,%eax
sub %r8d,%eax
imul %ecx,%eax
cmp %edx,%esi
jge 26 <func1+0x26>
lea (%rdi,%rcx,2),%r9d
sub %edx,%r9d
jmp 30 <func1+0x30>
mov %ecx,%r9d
sub %edx,%r9d
imul %edi,%r9d
lea 0x1(%r9,%rdi,1),%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    if (a2 < a1)
    {
        v6 = ((a3 * a3) + a5) * a3;
    }
    else
    {
        v6 = (a4 * a1) - a5 * a4;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a4 - a1;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        v9 += a1 + (a1 * a5);
    }
    if (a2 < a3)
    {
        v11 = ((a1 + a4) + a4) - a3;
    }
    else
    {
        v11 = a4 * a1 - a3 * a1;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 22
12 22
13 24
14 24
15 24
16 28
17 28
18 28
19 30
20 30
21 30
22 30
23 30
24 30
25 31
<<<sep_out_sample>>>
lea (%rcx,%rsi,1),%eax
mov %eax,%r9d
imul %esi,%r9d
add %edi,%eax
lea (%r8,%rdx,1),%r10d
cmp $0x2,%esi
cmovl %r10d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea (%r9,%rcx,2),%ecx
lea 0x1(%r8,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = ((a4 + a2) * a2) + a4;
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += (a4 - a1) - a2;
    }
    if (v8 < a2)
    {
        v9 = (a4 + a2) + a1;
    }
    else
    {
        v9 = a5 + a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 12
5 12
6 12
7 12
8 18
9 18
10 18
11 18
12 18
13 18
14 19
<<<sep_out_sample>>>
mov %r8d,%eax
imul %edi,%eax
imul %r8d,%eax
lea 0x1(%rdi,%rax,1),%eax
add %edx,%eax
add %eax,%esi
add %esi,%r8d
add %ecx,%r8d
imul %edi,%ecx
imul %ecx,%edi
add %edi,%edx
lea 0x1(%r8,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = ((a1 * a4) * a1) + a3;
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        if (a4 < a4)
        {
            v7 += a1 - a5 - a3;
        }
        else
        {
            v7 += a4 + a3 * a3;
        }
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        v9 += a2 + (a1 - a3);
    }
    v11 = (a5 * a1) * a5;
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 22
4 23
5 23
6 23
7 23
8 23
9 4
10 4
11 4
12 23
13 24
<<<sep_out_sample>>>
add %edx,%edi
add %esi,%edi
add %r8d,%edi
add %ecx,%edi
imul %r8d,%esi
sub %ecx,%edx
imul %esi,%edx
lea 0x1(%rdi,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a5 * a2 * (a3 - a4);
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += (a4 + a2) * a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 4
6 4
7 4
8 10
9 11
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%r9d
add %esi,%r9d
add %r8d,%r9d
add %ecx,%r9d
mov %edx,%eax
sub %esi,%eax
add %r8d,%eax
lea 0x1(%r9,%rax,1),%eax
imul %ecx,%edx
sub %r8d,%edx
add %edx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a3 - a2 + a5;
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a5 * a3 - a3;
    }
    v9 = ((a4 * a3) - a5) + a1;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 11
5 4
6 4
7 4
8 11
9 10
10 10
11 10
12 11
13 12
<<<sep_out_sample>>>
mov %r8d,%eax
sub %esi,%eax
test %edi,%edi
jle 13 <func1+0x13>
mov %edx,%eax
imul %edx,%eax
sub %ecx,%eax
sub %r8d,%eax
lea (%r8,%rcx,1),%r9d
add %edi,%r9d
add %r9d,%edx
add %edx,%esi
add %esi,%r8d
add %ecx,%r8d
lea 0x1(%rax,%r8,1),%eax
sub %edi,%ecx
lea (%rax,%rcx,2),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (v6 < a1)
    {
        v6 = a3 * a3 - a4 - a5;
    }
    else
    {
        v6 = a5 - a2;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        if (v6 < a2)
        {
            v7 += a2 * a5 + a1;
        }
        else
        {
            v7 += (a1 + a1) - a1;
        }
    }
    v9 = a4 - ((a1 + a1) - a4);
    v10 = a5 + a4;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 4
4 4
5 6
6 6
7 6
8 6
9 25
10 26
11 26
12 26
13 26
14 26
15 26
16 24
17 26
18 27
<<<sep_out_sample>>>
mov %esi,%r9d
imul %edx,%r9d
add %ecx,%r9d
sub %r8d,%r9d
mov %edx,%eax
sub %ecx,%eax
cmp %r8d,%esi
jg 25 <func1+0x25>
lea (%rsi,%r8,1),%eax
add %edi,%eax
mov %edx,%r10d
sub %eax,%r10d
mov %r10d,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = a4 + (a2 * a3) - a5;
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        if (v8 < a2)
        {
            v7 += a1 + a2 + a5;
        }
        else
        {
            v7 += a3 - (a3 * a2);
        }
    }
    if (a5 < a2)
    {
        v9 = a3 - a4;
    }
    else
    {
        v9 = a3 - ((a2 + a5) + a1);
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a1)
    {
        v10 += (a3 - a3) + a5;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 19
6 19
7 17
8 17
9 23
10 23
11 23
12 23
13 23
14 30
15 30
16 30
17 30
18 30
19 30
20 31
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%eax
imul %r8d,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (v6 < a1)
        {
            v6 += (a4 + a4) * a4;
        }
        else
        {
            v6 += a3 - a5;
        }
    }
    v8 = a5 * a5;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 16
6 17
7 18
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
lea 0x1(%rcx,%rax,1),%eax
imul %edx,%edi
sub %edi,%esi
add %esi,%eax
add %r8d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a2 + a2 * a4;
    }
    v8 = a2 - (a1 * a3);
    v9 = (a2 + a5 + a4) - a2;
    v10 = 0;
    for (v11 = 0; v11++; v11<a2)
    {
        v10 += a4 * a1 + a4;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 16
4 16
5 9
6 9
7 16
8 10
9 16
10 17
<<<sep_out_sample>>>
lea (%rsi,%r8,1),%eax
cmp %ecx,%r8d
jg 14 <func1+0x14>
mov %r8d,%eax
sub %edi,%eax
add %r8d,%eax
imul %ecx,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (a2 < a5)
        {
            v6 += a5 + a2 * a4;
        }
        else
        {
            v6 += a5 - a4;
        }
    }
    if (a4 < a5)
    {
        v8 = a2 + a5;
    }
    else
    {
        v8 = ((a5 - a1) + a5) * a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 18
2 16
3 16
4 22
5 22
6 22
7 22
8 24
9 24
10 24
11 24
12 24
13 25
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x1(%rdx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a3 - a4;
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a1 + (a4 * a3);
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a1)
    {
        v9 += a1 - a2;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 15
2 15
3 15
4 15
5 16
<<<sep_out_sample>>>
test %edi,%edi
jle 12 <func1+0x12>
lea -0x1(%rdi),%r9d
imul %esi,%r9d
imul %edx,%r9d
jmp 20 <func1+0x20>
mov %r8d,%r9d
imul %r8d,%r9d
imul %esi,%r9d
add %ecx,%r9d
mov %edx,%r11d
imul %r8d,%r11d
lea (%rdx,%rdi,1),%r10d
imul %r10d,%edx
imul %esi,%edx
cmp %edi,%r9d
jge 42 <func1+0x42>
lea 0x1(%rsi),%edi
imul %r8d,%edi
add %esi,%edi
jmp 49 <func1+0x49>
lea -0x1(%r8),%edi
imul %ecx,%edi
add %r10d,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
sub %r11d,%r9d
lea (%r9,%rdx,1),%eax
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (v6 < a1)
    {
        v6 = ((a2 * a1) - a2) * a3;
    }
    else
    {
        v6 = (a5 * a5) * a2 + a4;
    }
    v7 = a4 - a3 * a5 - a4;
    v8 = ((a3 + a1) * a3) * a2;
    if (v6 < a1)
    {
        v9 = a5 + (a5 * a2) + a2;
    }
    else
    {
        v9 = a5 * a4 - a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 10
11 12
12 12
13 13
14 13
15 13
16 14
17 14
18 16
19 16
20 16
21 16
22 20
23 20
24 22
25 22
26 22
27 22
28 22
29 22
30 22
31 23
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a1 < a1)
    {
        v6 = a5 - a5;
    }
    else
    {
        v6 = (a5 * a2) - a2 * a5;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        if (v7 < a2)
        {
            v7 += (a1 * a3) + a4;
        }
        else
        {
            v7 += a3 + a5 + a2;
        }
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        if (v6 < a5)
        {
            v9 += a1 - a1 - a4;
        }
        else
        {
            v9 += (a4 - a2) * a3;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 36
2 36
3 36
4 36
5 37
<<<sep_out_sample>>>
mov %edi,%eax
sub %esi,%eax
mov %edx,%r9d
sub %esi,%r9d
test %r8d,%r8d
cmovle %r9d,%eax
mov %r8d,%r9d
sub %edi,%r9d
cmp %edi,%edx
jl 27 <func1+0x27>
lea (%rdi,%rdi,1),%r9d
imul %edi,%r9d
imul %edx,%r9d
add %r9d,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (a2 < a3)
        {
            v6 += a4 + a3;
        }
        else
        {
            v6 += (a4 + a4) + a1;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += a2 * a5 - a3;
    }
    if (v8 < a5)
    {
        v10 = a1 - a2;
    }
    else
    {
        v10 = a3 - a2;
    }
    if (a3 < a1)
    {
        v11 = a5 - a1;
    }
    else
    {
        v11 = a1 * (a1 + a1) * a3;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 23
2 23
3 23
4 23
5 23
6 23
7 31
8 31
9 29
10 29
11 35
12 35
13 35
14 37
15 37
16 37
17 37
18 37
19 37
20 38
<<<sep_out_sample>>>
cmp %edi,%ecx
jge 16 <func1+0x16>
mov $0x1,%r9d
sub %ecx,%r9d
imul %ecx,%r9d
sub %esi,%r9d
jmp 22 <func1+0x22>
mov %ecx,%r9d
sub %edi,%r9d
add %esi,%r9d
add %edx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
mov %esi,%edx
sub %edi,%edx
add %edx,%eax
imul %esi,%r8d
imul %r8d,%esi
imul %esi,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a4 < a1)
    {
        v6 = a4 - a4 * a4 - a2;
    }
    else
    {
        v6 = a3 + (a4 - a1 + a2);
    }
    v7 = a2 - a1;
    v8 = (a2 * a5 * a2) * a1;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 14
13 14
14 14
15 14
16 14
17 12
18 12
19 14
20 13
21 13
22 13
23 14
24 15
<<<sep_out_sample>>>
mov %edx,%eax
imul %ecx,%eax
mov %edi,%r9d
sub %eax,%r9d
mov %edx,%eax
imul %r8d,%eax
mov %eax,%r11d
imul %edi,%r11d
add %r8d,%r11d
cmp %esi,%ecx
jge 27 <func1+0x27>
imul %ecx,%eax
sub %r8d,%eax
jmp 30 <func1+0x30>
lea (%rdx,%rdi,1),%eax
sub %r8d,%eax
imul %esi,%eax
cmp %r9d,%edx
jle 45 <func1+0x45>
mov %edi,%r10d
sub %r8d,%r10d
imul %ecx,%r10d
imul %ecx,%r10d
jmp 54 <func1+0x54>
mov %edx,%r10d
imul %edi,%r10d
add $0x1,%r10d
imul %edx,%r10d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
add %r11d,%r9d
add %r9d,%eax
add %r10d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a1 - (a3 * a4);
    if (a5 < a5)
    {
        v7 = a3 + a4;
    }
    else
    {
        v7 = (a1 * (a3 * a5)) + a5;
    }
    if (a4 < a2)
    {
        v8 = a5 * a3 * a4 - a5;
    }
    else
    {
        v8 = a2 * (a3 + a1 - a5);
    }
    if (v6 < a3)
    {
        v9 = ((a1 - a5) * a4) * a4;
    }
    else
    {
        v9 = a3 * (a3 * a1) + a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 11
6 11
7 11
8 11
9 11
10 13
11 13
12 15
13 15
14 15
15 19
16 19
17 19
18 21
19 21
20 23
21 23
22 23
23 23
24 23
25 27
26 27
27 27
28 27
29 29
30 29
31 29
32 29
33 29
34 29
35 29
36 29
37 30
<<<sep_out_sample>>>
mov $0x1,%r9d
sub %ecx,%r9d
imul %edx,%r9d
imul %edx,%r9d
test %edi,%edi
jle 27 <func1+0x27>
mov %ecx,%r10d
sub %r8d,%r10d
mov %r8d,%eax
imul %r8d,%eax
add %r10d,%eax
jmp 31 <func1+0x31>
mov %esi,%eax
imul %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = (a3 - a3 * a4) * a3;
    if (v7 < a1)
    {
        v7 = a4 - a5 + (a5 * a5);
    }
    else
    {
        v7 = ((a2 * a2) + a5) + a4;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 5
6 5
7 7
8 7
9 7
10 7
11 7
12 7
13 11
14 11
15 11
16 11
17 13
18 13
19 13
20 13
21 13
22 13
23 14
<<<sep_out_sample>>>
add %edi,%edx
lea (%rsi,%rdx,1),%eax
add %eax,%r8d
lea (%r8,%rcx,1),%eax
imul %ecx,%esi
add %eax,%esi
sub %ecx,%edx
lea 0x1(%rsi,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a4 * a2;
    v7 = a1 + a3 - a4;
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += a3 + a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 5
2 11
3 11
4 11
5 4
6 11
7 5
8 11
9 12
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %edx,%r8d
add %r8d,%ecx
lea 0x1(%rsi,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a5 + a2 - a5;
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += a2 + (a2 - a5);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 10
6 11
<<<sep_out_sample>>>
lea (%r8,%rsi,1),%r9d
imul %ecx,%r9d
imul %edx,%r9d
lea (%r8,%rdx,1),%eax
test %edi,%edi
jle 22 <func1+0x22>
mov %ecx,%eax
imul %edi,%eax
mov %r8d,%r10d
sub %eax,%r10d
mov %r10d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = (a5 + a2) * a4 * a3;
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        if (v8 < a1)
        {
            v7 += a2 - a5 * a5;
        }
        else
        {
            v7 += a4 - a2;
        }
    }
    if (v9 < a1)
    {
        v9 = a5 - a4 * a1;
    }
    else
    {
        v9 = (a3 - a2 + a2) + a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 23
5 17
6 17
7 19
8 19
9 19
10 19
11 19
12 25
13 25
14 25
15 25
16 25
17 25
18 26
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
sub %edx,%ecx
lea 0x1(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a1 - a1 - a3;
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a3 + a5 + a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 10
6 11
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %edx,%r8d
lea (%r8,%rcx,1),%eax
imul %ecx,%esi
imul %ecx,%esi
add %esi,%eax
imul %edi,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = (a2 * a4) * a4;
    v7 = a1 * a4;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 4
7 6
8 5
9 6
10 7
<<<sep_out_sample>>>
mov %esi,%r9d
imul %edx,%r9d
sub %edi,%r9d
mov %esi,%eax
sub %ecx,%eax
test %esi,%esi
jle 20 <func1+0x20>
mov %r8d,%r10d
imul %edi,%r10d
lea (%rcx,%rsi,1),%eax
imul %r10d,%eax
lea 0x1(%rax,%rdi,1),%eax
add %eax,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    if (a1 < a1)
    {
        v6 = (a1 - a2) - a3 - a3;
    }
    else
    {
        v6 = (a2 * a3) - a1;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += a2 + a4 + a5;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        if (v8 < a1)
        {
            v9 += (a4 + a3) + a5;
        }
        else
        {
            v9 += a4 + a4 * a2;
        }
    }
    if (v9 < a2)
    {
        v11 = (a5 * a1) * (a4 + a2);
    }
    else
    {
        v11 = a2 - a4;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 35
5 35
6 29
7 29
8 31
9 31
10 31
11 31
12 37
13 37
14 37
15 37
16 37
17 37
18 38
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
add %ecx,%esi
add %r8d,%edx
imul %edx,%r8d
add %esi,%r8d
add %ecx,%edi
lea 0x1(%r8,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a4 < a4)
    {
        v6 = a2 * (a3 - a4) * a3;
    }
    else
    {
        v6 = a5 * a5 + (a3 * a5);
    }
    v7 = ((a1 + a1) - a1) + a4;
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += a1 + (a2 + a5);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 18
5 10
6 10
7 18
8 12
9 18
10 19
<<<sep_out_sample>>>
mov %edi,%r9d
imul %esi,%r9d
imul %edi,%r9d
sub %esi,%r9d
mov %ecx,%eax
sub %edi,%eax
mov %edi,%r10d
imul %r8d,%r10d
cmp %ecx,%r8d
cmovl %r10d,%eax
add %edi,%edx
add %esi,%edx
add %r8d,%edx
add %ecx,%edx
add %r9d,%edx
add %edx,%eax
sub %esi,%edi
sub %r8d,%edi
add %edi,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a1 * (a1 * a2) - a2;
    if (a5 < a4)
    {
        v7 = a1 * a5;
    }
    else
    {
        v7 = a4 - a1;
    }
    v8 = (a1 - a2 - a5) + a4;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 11
6 11
7 7
8 7
9 7
10 7
11 14
12 14
13 14
14 14
15 14
16 14
17 13
18 13
19 13
20 14
21 15
<<<sep_out_sample>>>
push %rbx
cmp %esi,%r8d
jge 12 <func1+0x12>
lea (%rdi,%r8,1),%eax
mov %edx,%r10d
sub %eax,%r10d
jmp 1a <func1+0x1a>
mov %ecx,%eax
sub %esi,%eax
lea (%rax,%rcx,2),%r10d
lea (%rsi,%rdx,2),%r9d
lea (%rdi,%rdx,1),%eax
mov %edx,%edi
sub %r8d,%edi
lea (%rcx,%r8,1),%r11d
lea (%r8,%rdx,1),%ebx
cmp %r9d,%edx
mov %r11d,%edx
cmovle %ebx,%edx
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
add %edi,%eax
add %edx,%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a5 < a2)
    {
        v6 = a3 - (a1 + a5);
    }
    else
    {
        v6 = ((a4 - a2) + a4) + a4;
    }
    if (a5 < a5)
    {
        v7 = (a1 + a3) - a3 + a2;
    }
    else
    {
        v7 = a3 + (a2 + a3);
    }
    v8 = (a1 + a3) - a5 - a1;
    if (v7 < a3)
    {
        v9 = a4 + a5;
    }
    else
    {
        v9 = a3 + (a5 - a3 + a3);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 4
3 4
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 18
12 20
13 20
14 20
15 23
16 23
17 23
18 23
19 23
20 29
21 29
22 29
23 29
24 29
25 29
26 29
27 30
28 30
<<<sep_out_sample>>>
cmp %esi,%r8d
jge 15 <func1+0x15>
mov %r8d,%r9d
sub %esi,%r9d
mov %ecx,%eax
sub %edx,%eax
add %edi,%eax
sub %edx,%eax
jmp 28 <func1+0x28>
lea 0x1(%r8),%r9d
imul %esi,%r9d
sub %edi,%r9d
mov %ecx,%eax
sub %edi,%eax
lea (%rax,%r8,2),%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a5 < a2)
    {
        v6 = a5 - a2;
    }
    else
    {
        v6 = (a2 + (a2 * a5)) - a1;
    }
    if (a5 < a2)
    {
        v7 = a4 - a3 + a1 - a3;
    }
    else
    {
        v7 = a4 - a1 + a5 + a5;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        if (v8 < a3)
        {
            v8 += a2 * a1;
        }
        else
        {
            v8 += (a1 * a5) - a1;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 14
6 14
7 14
8 14
9 14
10 10
11 10
12 10
13 18
14 18
15 18
16 32
17 32
18 32
19 32
20 32
21 32
22 33
<<<sep_out_sample>>>
mov %edx,%r9d
imul %r8d,%r9d
add %esi,%r9d
mov %edx,%eax
sub %edi,%eax
cmp %esi,%r8d
jge 19 <func1+0x19>
mov %esi,%eax
neg %eax
sub %ecx,%eax
add %edx,%edi
add %esi,%edi
add %r8d,%edi
add %ecx,%edi
add %r9d,%edi
add %edi,%eax
sub %edx,%esi
add %esi,%eax
sub %ecx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a2 + a3 * a5;
    if (a5 < a2)
    {
        v7 = (a3 - a3 - a2) - a4;
    }
    else
    {
        v7 = a3 - a1;
    }
    v8 = a2 - a3;
    if (a1 < a1)
    {
        v9 = (a1 - a4) - a2 - a4;
    }
    else
    {
        v9 = a5 - a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 11
5 11
6 5
7 5
8 7
9 7
10 7
11 22
12 22
13 22
14 22
15 22
16 22
17 13
18 22
19 20
20 22
21 23
<<<sep_out_sample>>>
add %edi,%edx
add %edx,%esi
add %r8d,%esi
imul %ecx,%edi
sub %edi,%r8d
lea (%rsi,%rcx,2),%eax
lea 0x1(%rax,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a4 * a4;
    }
    v8 = a4 + (a5 - a1 * a4);
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 9
5 9
6 9
7 10
8 11
<<<sep_out_sample>>>
lea (%rcx,%rsi,1),%eax
cmp %edx,%ecx
jge 14 <func1+0x14>
lea (%rdi,%rdx,1),%r9d
imul %esi,%r9d
add %edx,%r9d
jmp 28 <func1+0x28>
mov %esi,%r9d
imul %esi,%r9d
imul %ecx,%r9d
mov %r8d,%r10d
sub %r9d,%r10d
mov %r10d,%r9d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a3 + (a4 + a2) - a3;
    if (a4 < a3)
    {
        v7 = (a2 * (a1 + a3)) + a3;
    }
    else
    {
        v7 = a5 - (a2 * a2) * a4;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 5
3 5
4 7
5 7
6 7
7 7
8 11
9 11
10 11
11 11
12 11
13 11
14 13
15 13
16 13
17 13
18 13
19 13
20 14
<<<sep_out_sample>>>
cmp %edi,%r8d
jge 12 <func1+0x12>
imul %edi,%esi
mov %ecx,%eax
sub %esi,%eax
mov %eax,%esi
add %edi,%esi
jmp 1c <func1+0x1c>
mov %edi,%esi
sub %ecx,%esi
sub %r8d,%esi
sub %r8d,%esi
test %edi,%edi
jle 2c <func1+0x2c>
mov %ecx,%eax
imul %r8d,%eax
add %edi,%eax
sub %ecx,%eax
jmp 34 <func1+0x34>
mov %edx,%eax
sub %ecx,%eax
sub %ecx,%eax
add %edi,%eax
sub %ecx,%edi
add %edi,%edx
add %edx,%r8d
add %r8d,%ecx
add %esi,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a5 < a1)
    {
        v6 = (a4 - a1 * a2) + a1;
    }
    else
    {
        v6 = ((a1 - a4) - a5) - a5;
    }
    if (v7 < a1)
    {
        v7 = a1 + a4 * a5 - a4;
    }
    else
    {
        v7 = a3 - a4 - a4 + a1;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += a1 + a2 - a4;
    }
    v10 = ((a4 - a2) - a4) - a4;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 6
9 10
10 10
11 10
12 10
13 12
14 12
15 14
16 14
17 14
18 14
19 14
20 18
21 18
22 18
23 18
24 25
25 26
26 26
27 26
28 26
29 26
30 27
<<<sep_out_sample>>>
lea (%rdx,%rdi,2),%eax
sub %ecx,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += (a1 + a1) + a1;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += a1 + (a5 - a3);
    }
    v10 = a3 - a3;
    v11 = (a3 + a1 + a1) - a4;
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 15
2 15
3 16
4 16
5 16
6 16
7 16
8 17
<<<sep_out_sample>>>
lea (%rdx,%r8,1),%r10d
lea (%rdx,%rdi,1),%r9d
cmp %ecx,%edi
jl 17 <func1+0x17>
lea 0x1(%rsi),%r9d
imul %ecx,%r9d
add %edi,%r9d
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
sub $0x1,%r8d
imul %r8d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a3 + a5;
    if (a1 < a4)
    {
        v7 = a3 + a1;
    }
    else
    {
        v7 = a4 + (a2 * a4) + a1;
    }
    v8 = a4 * a5 - a4;
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        if (v9 < a4)
        {
            v9 += a2 * a3;
        }
        else
        {
            v9 += a5 * a4 + a3;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 7
3 5
4 5
5 11
6 11
7 11
8 26
9 26
10 26
11 26
12 26
13 26
14 13
15 13
16 26
17 27
<<<sep_out_sample>>>
cmp %ecx,%r8d
jge 10 <func1+0x10>
lea (%rsi,%r8,1),%eax
add %ecx,%eax
imul %ecx,%eax
jmp 1a <func1+0x1a>
lea 0x1(%rcx),%eax
imul %edi,%eax
imul %r8d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a5 < a4)
    {
        v6 = ((a2 + a5) + a4) * a4;
    }
    else
    {
        v6 = a5 * (a1 + a1 * a4);
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        if (a2 < a1)
        {
            v7 += a5 + a1 + a5;
        }
        else
        {
            v7 += (a2 * a4) + a1;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 24
11 24
12 24
13 24
14 24
15 25
<<<sep_out_sample>>>
lea -0x1(%rdx),%eax
imul %edi,%eax
sub %ecx,%eax
lea 0x1(%rdi,%rax,1),%eax
add %eax,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a3 - a2 * a4;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += a3 * a1;
    }
    v10 = (a1 * a3 - a1) - a4;
    v11 = 0;
    for (v12 = 0; v12++; v12<a1)
    {
        v11 += a4 - a5 + a1;
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 14
2 14
3 14
4 20
5 20
6 20
7 20
8 20
9 21
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%r9d
add %esi,%r9d
add %r8d,%r9d
add %ecx,%r9d
lea (%r8,%rdx,1),%eax
imul %ecx,%eax
add %esi,%eax
add %r9d,%eax
mov %ecx,%r9d
imul %ecx,%r9d
sub %esi,%r9d
add %r9d,%edi
add %edi,%eax
sub %esi,%ecx
add %ecx,%r8d
add %r8d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a4 * (a5 + a3) + a2;
    v7 = a1 - (a2 - (a4 * a4));
    v8 = a4 - a2 + a5 + a3;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 7
2 7
3 7
4 7
5 4
6 4
7 4
8 7
9 5
10 5
11 5
12 5
13 7
14 6
15 6
16 6
17 7
18 8
<<<sep_out_sample>>>
cmp %edx,%esi
jle e <func1+0xe>
mov %ecx,%eax
sub %esi,%eax
lea (%rax,%r8,2),%eax
jmp 17 <func1+0x17>
lea (%rcx,%r8,1),%eax
sub %esi,%eax
imul %ecx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += (a5 - a1) + a2;
    }
    if (a3 < a2)
    {
        v8 = a5 + (a4 - a2 + a5);
    }
    else
    {
        v8 = (a4 + a5 - a2) * a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 15
8 15
9 15
10 17
11 17
12 17
13 17
14 17
15 18
<<<sep_out_sample>>>
lea (%rcx,%rdx,1),%eax
cmp %ecx,%esi
jl 12 <func1+0x12>
mov %edi,%eax
imul %esi,%eax
add $0x1,%eax
imul %ecx,%eax
mov %r8d,%r10d
sub %esi,%r10d
cmp %r8d,%eax
jge 33 <func1+0x33>
mov %edi,%r11d
imul %r8d,%r11d
mov $0x1,%r9d
sub %r11d,%r9d
imul %edx,%r9d
jmp 3e <func1+0x3e>
lea 0x1(%rdi),%r9d
imul %r8d,%r9d
add %edx,%r9d
add %edi,%edx
add %edx,%esi
add %r8d,%esi
add %esi,%ecx
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
add %edi,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a2 < a4)
    {
        v6 = a4 + a3;
    }
    else
    {
        v6 = ((a1 * a2) * a4) + a4;
    }
    v7 = a5 - a2;
    if (v6 < a5)
    {
        v8 = a3 - a1 * a5 * a3;
    }
    else
    {
        v8 = a5 + a1 * a5 + a3;
    }
    v9 = a5 + a1;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 4
3 4
4 10
5 10
6 10
7 10
8 12
9 12
10 13
11 13
12 15
13 15
14 15
15 15
16 15
17 15
18 19
19 19
20 19
21 22
22 22
23 22
24 22
25 22
26 22
27 22
28 21
29 22
30 23
<<<sep_out_sample>>>
cmp %edi,%esi
jge d <func1+0xd>
lea 0x1(%rdi),%eax
imul %r8d,%eax
jmp 17 <func1+0x17>
mov %edi,%eax
sub %r8d,%eax
imul %edx,%eax
add %esi,%eax
lea 0x1(%rdi,%rdx,1),%edi
add %esi,%edi
add %r8d,%edi
lea 0x1(%rcx,%rdi,1),%ecx
add %eax,%ecx
add %r8d,%esi
sub %edx,%esi
lea (%rcx,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += (a3 + a5) * a2;
    }
    if (a2 < a1)
    {
        v8 = a5 + a5 * a1;
    }
    else
    {
        v8 = (a3 * (a1 - a5)) + a2;
    }
    v9 = a2 + a5 - a3;
    v10 = 0;
    for (v11 = 0; v11++; v11<a5)
    {
        if (a1 < a1)
        {
            v10 += a4 * a2;
        }
        else
        {
            v10 += a1 - a2;
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 15
7 15
8 15
9 15
10 30
11 30
12 30
13 30
14 30
15 17
16 17
17 30
18 31
<<<sep_out_sample>>>
mov %esi,%eax
imul %r8d,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (a5 < a5)
        {
            v6 += a4 * (a4 * a4);
        }
        else
        {
            v6 += a5 * a4;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += (a3 * a5) - a3;
    }
    v10 = a2 * a5;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 22
4 22
5 22
6 22
7 22
8 23
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%r9d
add %esi,%r9d
add %r8d,%r9d
add %ecx,%r9d
lea (%rdx,%r8,2),%eax
add %esi,%eax
add %r9d,%eax
mov %esi,%r9d
imul %edx,%r9d
imul %r9d,%r8d
add %edx,%r8d
add %r8d,%eax
mov $0x1,%r8d
sub %edx,%r8d
imul %ecx,%r8d
add %r8d,%edi
add %edi,%eax
sub %edx,%ecx
imul %esi,%ecx
imul %ecx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a5 + (a3 + a5) + a2;
    v7 = (a2 * a3 * a5) + a3;
    v8 = a4 - a3 * a4 + a1;
    v9 = (a2 * (a4 - a3)) * a2;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 8
2 8
3 8
4 8
5 4
6 4
7 8
8 5
9 5
10 5
11 5
12 8
13 6
14 6
15 6
16 6
17 8
18 7
19 7
20 7
21 8
22 9
<<<sep_out_sample>>>
mov %r8d,%r11d
imul %edx,%r11d
mov %ecx,%r10d
imul %r8d,%r10d
mov %ecx,%eax
sub %esi,%eax
add %eax,%r10d
mov %edi,%r9d
neg %r9d
sub %ecx,%r9d
cmp %esi,%edx
jge 2d <func1+0x2d>
lea 0x1(%rsi),%r9d
imul %edx,%r9d
add %esi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a1 - a1 + (a5 * a3);
    v7 = a4 * a5 - (a2 - a4);
    if (a3 < a2)
    {
        v8 = a3 + a2 * a3 + a2;
    }
    else
    {
        v8 = (a1 - (a1 + a1)) - a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 5
4 5
5 5
6 5
7 5
8 12
9 12
10 12
11 6
12 6
13 8
14 8
15 8
16 14
17 14
18 14
19 14
20 14
21 14
22 14
23 15
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += (a4 * a2) - a1;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += a3 + a2;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a2)
    {
        v10 += a1 + a4 + a1;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 19
2 19
3 19
4 19
5 20
<<<sep_out_sample>>>
cmp %ecx,%r8d
jge e <func1+0xe>
mov %ecx,%r10d
imul %esi,%r10d
jmp 16 <func1+0x16>
lea -0x1(%rdi),%r10d
imul %esi,%r10d
lea (%rdi,%rdx,1),%r9d
add %r9d,%esi
add %r8d,%esi
add %ecx,%esi
add %r10d,%esi
imul %edi,%edx
add %edx,%r8d
sub %ecx,%r8d
lea (%rsi,%r8,1),%eax
add $0x1,%r9d
imul %r9d,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a5 < a4)
    {
        v6 = a4 * a2;
    }
    else
    {
        v6 = (a2 * a1) - a2;
    }
    v7 = a1 * a3 + a5 - a4;
    v8 = (a1 + a3) * a1 + a1;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 13
9 14
10 14
11 14
12 14
13 12
14 12
15 12
16 14
17 13
18 13
19 14
20 15
<<<sep_out_sample>>>
cmp %ecx,%edi
jge 15 <func1+0x15>
mov %esi,%r9d
imul %edx,%r9d
mov %edi,%eax
imul %ecx,%eax
add %r9d,%eax
jmp 1d <func1+0x1d>
mov %edi,%eax
sub %esi,%eax
sub %esi,%eax
sub %edx,%eax
add %edi,%edx
add %esi,%edx
add %r8d,%edx
add %ecx,%edx
add %edx,%eax
imul %esi,%edi
add %edi,%r8d
add %r8d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a1 < a4)
    {
        v6 = a2 * a3 + (a1 * a4);
    }
    else
    {
        v6 = a1 - a2 - a2 - a3;
    }
    v7 = a4 + (a5 + a1 * a2);
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 6
9 10
10 10
11 10
12 10
13 13
14 13
15 13
16 13
17 13
18 12
19 12
20 12
21 13
22 14
<<<sep_out_sample>>>
mov %esi,%r9d
imul %edi,%r9d
imul %r8d,%r9d
add %esi,%r9d
cmp %ecx,%esi
jle 19 <func1+0x19>
mov %edx,%eax
imul %edi,%eax
jmp 26 <func1+0x26>
lea (%rdi,%rdi,1),%eax
mov %r8d,%r10d
imul %edx,%r10d
sub %r10d,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = a2 + a2 * a1 * a5;
    if (a4 < a2)
    {
        v7 = a3 * a1;
    }
    else
    {
        v7 = (a1 + a1) - (a5 * a3);
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        if (a4 < a1)
        {
            v8 += (a3 + a1) * a1;
        }
        else
        {
            v8 += (a1 - a4) + a4;
        }
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a4)
    {
        if (v7 < a1)
        {
            v10 += a5 * a1;
        }
        else
        {
            v10 += a1 - a1;
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 5
6 5
7 7
8 7
9 7
10 11
11 11
12 11
13 11
14 37
15 37
16 37
17 37
18 37
19 37
20 38
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea (%r8,%rcx,1),%esi
sub %ecx,%edi
sub %ecx,%edx
imul %edi,%edx
lea 0x1(%rsi,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a1 < a1)
    {
        v6 = (a1 - a4 - a3) + a3;
    }
    else
    {
        v6 = (a1 - a4) * (a3 - a4);
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        if (v7 < a3)
        {
            v7 += a3 + a1 + a3;
        }
        else
        {
            v7 += a3 - a1;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 24
2 24
3 24
4 24
5 10
6 10
7 10
8 24
9 25
<<<sep_out_sample>>>
test %r8d,%r8d
jle 12 <func1+0x12>
mov %edi,%eax
imul %edx,%eax
imul %edi,%eax
imul %esi,%eax
jmp 17 <func1+0x17>
mov %edi,%eax
imul %esi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (a3 < a5)
        {
            v6 += a3 - a1;
        }
        else
        {
            v6 += (a2 + a4) + a5;
        }
    }
    if (v8 < a5)
    {
        v8 = ((a1 * a3) * a1) * a2;
    }
    else
    {
        v8 = a1 * a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 18
7 18
8 22
9 22
10 24
11 24
12 24
13 24
14 24
15 25
<<<sep_out_sample>>>
push %rbx
cmp %edx,%ecx
jge 12 <func1+0x12>
mov %edx,%ebx
imul %edx,%ebx
imul %r8d,%ebx
add %edi,%ebx
jmp 1c <func1+0x1c>
mov %ecx,%ebx
imul %esi,%ebx
imul %edi,%ebx
add %edx,%ebx
lea 0x1(%rcx),%r11d
imul %r8d,%r11d
lea (%r8,%rcx,1),%r10d
cmp %esi,%edx
jge 35 <func1+0x35>
mov %edi,%r9d
imul %r8d,%r9d
jmp 44 <func1+0x44>
mov %esi,%r9d
imul %esi,%r9d
sub $0x1,%r9d
imul %r8d,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %ebx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a4 < a3)
    {
        v6 = a1 + a3 * a3 * a5;
    }
    else
    {
        v6 = a3 + a1 * (a4 * a2);
    }
    v7 = (a4 * a5) + a5;
    v8 = a5 + a4;
    if (a3 < a2)
    {
        v9 = a1 * a5;
    }
    else
    {
        v9 = a2 * a2 * a5 - a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 4
3 4
4 6
5 6
6 6
7 6
8 6
9 10
10 10
11 10
12 10
13 12
14 12
15 13
16 14
17 14
18 16
19 16
20 16
21 20
22 20
23 20
24 20
25 22
26 22
27 22
28 22
29 22
30 22
31 22
32 22
33 23
34 23
<<<sep_out_sample>>>
lea (%rcx,%r8,1),%r9d
mov %edi,%eax
imul %r8d,%eax
add %eax,%r9d
mov $0x0,%eax
cmp %edi,%esi
jle 20 <func1+0x20>
mov %ecx,%eax
imul %ecx,%eax
imul %edi,%eax
sub %ecx,%eax
add %r9d,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (a2 < a4)
        {
            v6 += (a1 + a5) * a4;
        }
        else
        {
            v6 += (a4 + a5) * a1;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += a3 - a2 * a2;
    }
    v10 = (a4 + a5) + a1 * a5;
    if (a1 < a2)
    {
        v11 = (a4 * a4 * a1) - a4;
    }
    else
    {
        v11 = a3 - a3;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 21
5 28
6 22
7 22
8 24
9 24
10 24
11 24
12 30
13 30
14 30
15 30
16 30
17 30
18 31
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
mov %ecx,%edi
sub %esi,%edi
imul %esi,%ecx
add %edi,%ecx
add %ecx,%eax
lea (%rsi,%rdx,2),%edx
lea (%rdx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a4 - a2 + a2 * a4;
    v7 = a5 + (a3 + a2) + a3;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 4
7 4
8 4
9 6
10 5
11 5
12 6
13 7
<<<sep_out_sample>>>
add %edx,%edi
add %esi,%edi
add %r8d,%edi
lea (%r8,%rcx,2),%eax
lea (%rax,%rdi,1),%eax
sub %ecx,%r8d
imul %edx,%esi
sub %esi,%r8d
lea 0x1(%rax,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a4 + a5;
    v7 = (a5 - a4) - a3 * a2;
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        if (a2 < a4)
        {
            v8 += (a4 - a2) * a1;
        }
        else
        {
            v8 += a3 + a4 - a3;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 4
5 18
6 5
7 5
8 5
9 18
10 19
<<<sep_out_sample>>>
test %esi,%esi
jle 14 <func1+0x14>
mov %edx,%eax
sub %edi,%eax
mov %edi,%r9d
imul %ecx,%r9d
sub %r9d,%eax
jmp 23 <func1+0x23>
lea (%rdi,%rcx,1),%eax
imul %esi,%eax
mov %r8d,%r10d
sub %eax,%r10d
mov %r10d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a1 * a2;
    }
    v8 = a1 - a2 + a2;
    if (v6 < a2)
    {
        v9 = (a3 - a1) - (a1 * a4);
    }
    else
    {
        v9 = a5 - a2 * (a1 + a4);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 12
4 12
5 12
6 12
7 12
8 12
9 16
10 16
11 16
12 16
13 16
14 18
15 18
16 18
17 18
18 18
19 18
20 19
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
mov %esi,%edi
sub %r8d,%edi
add %edi,%edx
imul %esi,%edx
add %edx,%eax
imul %esi,%r8d
imul %r8d,%ecx
imul %ecx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a2 * (a2 - a5 + a3);
    if (a3 < a3)
    {
        v7 = a3 - a5;
    }
    else
    {
        v7 = a4 * (a2 * a5) * a2;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 13
2 13
3 13
4 13
5 4
6 4
7 4
8 4
9 13
10 11
11 11
12 11
13 13
14 14
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %eax,%ecx
mov %esi,%r9d
sub %edi,%r9d
add %r9d,%ecx
imul %edi,%esi
add %esi,%r8d
sub %edx,%r8d
lea (%rcx,%r8,1),%eax
imul %edx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a2 - a5 - a1 + a5;
    v7 = (a2 * a1 + a5) - a3;
    v8 = a3 * a1;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 7
2 7
3 7
4 7
5 4
6 4
7 7
8 5
9 5
10 5
11 7
12 6
13 7
14 8
<<<sep_out_sample>>>
test %esi,%esi
jle 12 <func1+0x12>
mov %r8d,%eax
imul %r8d,%eax
sub %edi,%eax
add %r8d,%eax
jmp 1a <func1+0x1a>
lea -0x1(%rdi),%eax
imul %edi,%eax
sub %esi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (a3 < a4)
        {
            v6 += a2 - a3 + a4;
        }
        else
        {
            v6 += a4 - (a1 * a3);
        }
    }
    if (v6 < a2)
    {
        v8 = a5 * a5 - a1 + a5;
    }
    else
    {
        v8 = ((a1 * a1) - a1) - a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 18
7 18
8 22
9 22
10 22
11 24
12 24
13 24
14 24
15 24
16 25
<<<sep_out_sample>>>
mov $0x0,%r9d
cmp %esi,%edi
jl 14 <func1+0x14>
lea (%rdi,%r8,1),%r9d
sub %ecx,%r9d
add %esi,%r9d
cmp %ecx,%r8d
jge 29 <func1+0x29>
mov %r8d,%r10d
imul %edi,%r10d
add %ecx,%r10d
imul %esi,%r10d
jmp 31 <func1+0x31>
lea 0x1(%rdi),%r10d
imul %esi,%r10d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
lea (%r9,%r10,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a1 < a2)
    {
        v6 = (a5 - a5) * a4 * a4;
    }
    else
    {
        v6 = a1 + a5 - a4 + a2;
    }
    if (a5 < a4)
    {
        v7 = (a4 + (a5 * a1)) * a2;
    }
    else
    {
        v7 = a1 * a2 + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 4
3 4
4 10
5 10
6 10
7 12
8 12
9 14
10 14
11 14
12 14
13 14
14 18
15 18
16 20
17 20
18 20
19 20
20 20
21 20
22 21
<<<sep_out_sample>>>
lea (%rdx,%rdi,1),%eax
sub %r8d,%eax
cmp %r8d,%edx
jl 16 <func1+0x16>
mov %esi,%eax
imul %edi,%eax
imul %edi,%eax
imul %ecx,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (v6 < a4)
        {
            v6 += a3 - (a2 - a1);
        }
        else
        {
            v6 += a5 + a1 - a2;
        }
    }
    if (a3 < a5)
    {
        v8 = a3 + a1 - a5;
    }
    else
    {
        v8 = a2 * a1 * a1 * a4;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        v9 += a3 - a3 + a4;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 16
4 16
5 22
6 22
7 22
8 22
9 29
10 29
11 29
12 29
13 29
14 30
<<<sep_out_sample>>>
lea 0x2(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
imul %edx,%esi
imul %esi,%r8d
lea 0x1(%rax,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = (a2 * a3) * a5 - a4;
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        if (a5 < a5)
        {
            v7 += a3 + a2 - a3;
        }
        else
        {
            v7 += a3 * (a3 + a1);
        }
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        if (v9 < a4)
        {
            v9 += a5 * (a4 * a1);
        }
        else
        {
            v9 += (a1 + a5) * a2;
        }
    }
    v11 = 0;
    for (v12 = 0; v12++; v12<a2)
    {
        if (a4 < a2)
        {
            v11 += a2 + (a2 - a2);
        }
        else
        {
            v11 += a4 + a1;
        }
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 41
2 41
3 41
4 4
5 4
6 41
7 42
<<<sep_out_sample>>>
lea (%r8,%rsi,2),%r11d
add %ecx,%r11d
cmp %ecx,%esi
jge 14 <func1+0x14>
mov %edx,%r10d
imul %edi,%r10d
jmp 1e <func1+0x1e>
mov %esi,%r10d
imul %r8d,%r10d
sub %edi,%r10d
mov %edx,%r9d
sub %esi,%r9d
cmp %r8d,%esi
jge 35 <func1+0x35>
lea (%rdx,%rsi,1),%r9d
mov %edx,%eax
imul %ecx,%eax
sub %eax,%r9d
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = ((a2 + a5) + a2) + a4;
    if (a2 < a4)
    {
        v7 = ((a1 - a1) + a3) * a1;
    }
    else
    {
        v7 = a2 * a5 - a1;
    }
    if (a2 < a5)
    {
        v8 = (a3 + a2) - a3 * a4;
    }
    else
    {
        v8 = a3 + a1 - a2 - a1;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        if (a1 < a4)
        {
            v9 += (a4 * a5) + a5;
        }
        else
        {
            v9 += (a5 * a3) * a1;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 5
4 5
5 7
6 7
7 7
8 11
9 11
10 11
11 19
12 19
13 13
14 13
15 15
16 15
17 15
18 15
19 33
20 33
21 33
22 33
23 33
24 33
25 33
26 34
<<<sep_out_sample>>>
cmp %ecx,%esi
jge 13 <func1+0x13>
mov %edx,%r9d
sub %esi,%r9d
add %edx,%r9d
imul %ecx,%r9d
jmp 1f <func1+0x1f>
mov %ecx,%r9d
sub %edx,%r9d
add %esi,%r9d
add %r8d,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %eax,%ecx
add %r9d,%ecx
mov %edi,%eax
imul %esi,%eax
imul %eax,%edx
imul %edi,%edx
add %ecx,%edx
sub %edi,%r8d
sub %esi,%r8d
sub %edi,%r8d
lea (%rdx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a2 < a4)
    {
        v6 = a4 * ((a3 - a2) + a3);
    }
    else
    {
        v6 = (a4 - a3) + a2 + a5;
    }
    v7 = (a1 * a2 * a3) * a1;
    v8 = ((a5 - a1) - a2) - a1;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 14
13 14
14 14
15 14
16 14
17 12
18 12
19 12
20 12
21 14
22 13
23 13
24 13
25 14
26 15
<<<sep_out_sample>>>
mov %r8d,%eax
imul %edx,%eax
mov %edi,%r10d
sub %eax,%r10d
add %esi,%r10d
cmp %esi,%edx
jle 23 <func1+0x23>
mov %edx,%r9d
imul %edx,%r9d
imul %esi,%r9d
sub %edx,%r9d
jmp 2e <func1+0x2e>
mov %edi,%r9d
imul %edx,%r9d
imul %esi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a2 - ((a5 * a3) - a1);
    if (a2 < a3)
    {
        v7 = (a3 * a3) * a2 - a3;
    }
    else
    {
        v7 = a1 * a3 * a2;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 4
6 5
7 5
8 7
9 7
10 7
11 7
12 7
13 11
14 11
15 11
16 13
17 13
18 13
19 13
20 13
21 13
22 14
<<<sep_out_sample>>>
add %edx,%edi
add %esi,%edi
add %edi,%r8d
add %r8d,%ecx
imul %edx,%esi
lea 0x1(%rcx,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a5 < a5)
    {
        v6 = a4 + a1;
    }
    else
    {
        v6 = a2 * a3;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += a5 - a1 + a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 10
6 17
7 18
<<<sep_out_sample>>>
lea 0x1(%rdx,%rcx,2),%eax
add %eax,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = a5 - a5;
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += (a3 * a3) + a3;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        if (a1 < a2)
        {
            v9 += (a4 + a2) - a2;
        }
        else
        {
            v9 += a5 * a2;
        }
    }
    v11 = a4 - (a1 - a4);
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 23
2 23
3 23
4 23
5 24
<<<sep_out_sample>>>
push %rbx
test %edx,%edx
jle 1a <func1+0x1a>
mov %ecx,%r9d
imul %ecx,%r9d
mov $0x1,%ebx
sub %r9d,%ebx
imul %r8d,%ebx
jmp 22 <func1+0x22>
mov %r8d,%ebx
imul %edi,%ebx
sub %esi,%ebx
mov %esi,%r11d
imul %ecx,%r11d
mov %esi,%r10d
imul %r8d,%r10d
imul %edi,%r10d
add %esi,%r10d
mov %edi,%r9d
sub %r8d,%r9d
cmp %esi,%r8d
jl 4c <func1+0x4c>
mov %edx,%r9d
sub %edi,%r9d
imul %esi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %ebx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (v6 < a3)
    {
        v6 = a5 - a4 * a4 * a5;
    }
    else
    {
        v6 = a5 * a1 - a2;
    }
    v7 = a2 * a4;
    v8 = a2 + a2 * a5 * a1;
    if (a5 < a2)
    {
        v9 = a1 - (a5 + a5 - a5);
    }
    else
    {
        v9 = (a3 * a2) - (a2 * a1);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 4
3 4
4 6
5 6
6 6
7 6
8 6
9 6
10 10
11 10
12 10
13 12
14 12
15 13
16 13
17 13
18 13
19 16
20 16
21 14
22 14
23 20
24 20
25 20
26 22
27 22
28 22
29 22
30 22
31 22
32 22
33 22
34 23
35 23
<<<sep_out_sample>>>
lea (%rcx,%rdx,2),%r9d
cmp %edi,%r8d
jl 10 <func1+0x10>
mov %edi,%r9d
imul %ecx,%r9d
mov %edx,%eax
sub %edi,%eax
cmp %esi,%r8d
jle 24 <func1+0x24>
mov %ecx,%r10d
sub %edx,%r10d
add %ecx,%r10d
jmp 2b <func1+0x2b>
mov %edi,%r10d
imul %edi,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a5 < a1)
    {
        v6 = (a3 + a3) + a4;
    }
    else
    {
        v6 = a1 * a4;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        if (a5 < a4)
        {
            v7 += a3 - a5 + a5;
        }
        else
        {
            v7 += a5 + a1 - a5;
        }
    }
    v9 = a3 - a3 + a3 - a1;
    if (a2 < a5)
    {
        v10 = a4 - a3 + a4;
    }
    else
    {
        v10 = a1 * a1;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 4
3 4
4 10
5 10
6 24
7 24
8 25
9 25
10 27
11 27
12 27
13 27
14 31
15 31
16 33
17 33
18 33
19 33
20 33
21 33
22 33
23 34
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%edi
add %esi,%edi
add %r8d,%edi
add %ecx,%edi
mov %esi,%eax
sub %r8d,%eax
imul %esi,%eax
lea 0x1(%rdi,%rax,1),%edi
imul %r8d,%esi
add %esi,%edx
sub %ecx,%edx
lea (%rdi,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = (a2 - a5) * a2;
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += a5 + a4;
    }
    v9 = a3 + a5 * a2 - a4;
    v10 = 0;
    for (v11 = 0; v11++; v11<a3)
    {
        v10 += a3 + a1;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 16
4 16
5 4
6 4
7 4
8 16
9 10
10 10
11 10
12 16
13 17
<<<sep_out_sample>>>
add %edx,%edi
add %esi,%edi
add %edi,%r8d
lea 0x1(%rcx,%r8,1),%eax
sub %esi,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a1 - a4;
    }
    if (a2 < a2)
    {
        v8 = (a4 + a2) - a1 + a2;
    }
    else
    {
        v8 = a3 - a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 15
6 17
7 18
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %edx,%r8d
lea 0x1(%rcx,%r8,1),%eax
imul %ecx,%esi
imul %esi,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += (a4 * a5) * a2;
    }
    if (a1 < a1)
    {
        v8 = a2 * (a5 * a1);
    }
    else
    {
        v8 = (a2 * a4 * a4) * a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 15
6 15
7 17
8 18
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
mov %r8d,%r9d
imul %edx,%r9d
add $0x1,%r9d
imul %r9d,%edx
add %eax,%edx
sub %esi,%edx
sub %r8d,%edi
sub %ecx,%edi
lea (%rdx,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = ((a5 * a3) * a3) + a3;
    v7 = a1 * (a3 - a3) - a2;
    v8 = a1 - a5 - a4;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 7
2 7
3 7
4 7
5 4
6 4
7 4
8 4
9 7
10 7
11 6
12 6
13 7
14 8
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea (%r8,%rcx,2),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a2 + a3 * (a1 - a1);
    v7 = a4 - a2;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 7
<<<sep_out_sample>>>
mov %edi,%r9d
sub %edx,%r9d
add %esi,%r9d
mov %ecx,%eax
sub %edi,%eax
add %ecx,%eax
test %esi,%esi
jle 19 <func1+0x19>
lea (%r8,%r8,1),%r10d
jmp 27 <func1+0x27>
lea (%rcx,%rsi,1),%r11d
mov %r8d,%r10d
imul %edi,%r10d
add %r11d,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = (a1 - a3) + a2;
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += a2 - a5 + a3;
    }
    v9 = a4 - a1 + a4;
    if (v10 < a2)
    {
        v10 = a5 + a5;
    }
    else
    {
        v10 = a4 + a2 + a5 * a1;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 10
5 10
6 10
7 11
8 11
9 13
10 13
11 17
12 17
13 17
14 17
15 19
16 19
17 19
18 19
19 19
20 19
21 19
22 20
<<<sep_out_sample>>>
mov %edx,%r9d
sub %r8d,%r9d
imul %esi,%r9d
sub %edi,%r9d
cmp %r9d,%edx
jle 1c <func1+0x1c>
lea 0x1(%rdi),%r10d
imul %esi,%r10d
jmp 29 <func1+0x29>
lea (%rdi,%r8,1),%eax
imul %esi,%eax
mov %edx,%r10d
sub %eax,%r10d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
lea (%r9,%r10,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a1 < a1)
    {
        v6 = a2 + a5 - a3 + a4;
    }
    else
    {
        v6 = ((a3 - a5) * a2) - a1;
    }
    if (v6 < a3)
    {
        v7 = (a1 * a2) + a2;
    }
    else
    {
        v7 = a3 - (a1 + a5) * a2;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 12
6 12
7 14
8 14
9 14
10 18
11 18
12 18
13 18
14 20
15 20
16 20
17 20
18 20
19 20
20 21
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
mov %eax,%r10d
sub %r8d,%r10d
sub %r8d,%r10d
mov $0x0,%r9d
cmp %esi,%edi
jg 22 <func1+0x22>
mov %ecx,%r9d
sub %r8d,%r9d
add %esi,%r9d
sub %edx,%r9d
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %eax,%r9d
sub %ecx,%esi
lea (%r9,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a5 < a5)
    {
        v6 = (a1 * a3) * a3 + a1;
    }
    else
    {
        v6 = (a1 + a3 - a5) - a5;
    }
    v7 = a4 + (a3 - a4) - a3;
    if (a2 < a1)
    {
        v8 = ((a2 - a2) * a1) * a4;
    }
    else
    {
        v8 = a2 + (a4 - a5) - a3;
    }
    v9 = a2 - a4;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 15
6 13
7 13
8 19
9 19
10 19
11 19
12 22
13 22
14 22
15 22
16 22
17 21
18 22
19 23
<<<sep_out_sample>>>
cmp %esi,%edi
jge b <func1+0xb>
lea (%rdi,%rcx,2),%eax
sub %edx,%eax
jmp 14 <func1+0x14>
mov %edx,%eax
imul %ecx,%eax
imul %r8d,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %r8d,%esi
add %esi,%ecx
add %eax,%ecx
mov $0x1,%eax
sub %r8d,%eax
imul %eax,%edi
lea 0x1(%rcx,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    if (a1 < a2)
    {
        v6 = (a4 + a1 + a4) - a3;
    }
    else
    {
        v6 = a3 * a4 * a5;
    }
    v7 = a1 - a1 * a5;
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        if (v9 < a4)
        {
            v8 += a5 + a3;
        }
        else
        {
            v8 += (a4 - a4) - a1;
        }
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a3)
    {
        if (v11 < a5)
        {
            v10 += a2 + a2 - a5;
        }
        else
        {
            v10 += a5 + a3 + a4;
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 37
10 37
11 37
12 37
13 37
14 12
15 12
16 12
17 37
18 38
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %edx,%r8d
lea (%r8,%rcx,1),%edx
sub %esi,%ecx
lea 0x1(%rdx,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a4 - a2;
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += a3 - a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 4
6 10
7 11
<<<sep_out_sample>>>
mov %edi,%eax
imul %esi,%eax
sub %ecx,%eax
cmp %ecx,%edi
jge 1b <func1+0x1b>
mov %edi,%r9d
imul %ecx,%r9d
add %r8d,%r9d
imul %edx,%r9d
jmp 26 <func1+0x26>
lea -0x1(%rcx),%r9d
imul %r8d,%r9d
add %ecx,%r9d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a1 * a2 - a4;
    if (a1 < a4)
    {
        v7 = (a5 + a1 * a4) * a3;
    }
    else
    {
        v7 = (a4 * a5) - a5 + a4;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 5
5 5
6 7
7 7
8 7
9 7
10 7
11 11
12 11
13 11
14 13
15 13
16 13
17 13
18 13
19 13
20 14
<<<sep_out_sample>>>
test %edx,%edx
jle d <func1+0xd>
lea (%rsi,%rdx,1),%eax
sub %edi,%eax
add %esi,%eax
jmp 19 <func1+0x19>
mov %edx,%eax
imul %edx,%eax
sub $0x1,%eax
imul %r8d,%eax
lea (%rdi,%rdx,1),%r9d
add %esi,%r9d
add %r9d,%r8d
lea 0x1(%rcx,%r8,1),%r9d
lea (%r9,%rax,1),%r8d
add %esi,%edx
sub %edi,%edx
sub %ecx,%edx
lea (%r8,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a1 - a4;
    }
    if (v6 < a3)
    {
        v8 = (a2 + a3 - a1) + a2;
    }
    else
    {
        v8 = (a3 * a3 * a5) - a5;
    }
    v9 = a3 + a2 - a1 - a4;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 15
8 15
9 15
10 15
11 18
12 18
13 18
14 18
15 18
16 17
17 17
18 17
19 18
20 19
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
lea (%r8,%rcx,1),%eax
sub %edx,%esi
add %esi,%eax
sub %ecx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = (a2 - a3) - (a3 - a3);
    if (a4 < a4)
    {
        v7 = a2 + a3 - a3 * a4;
    }
    else
    {
        v7 = a1 - a4;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 13
2 13
3 13
4 13
5 4
6 13
7 11
8 13
9 14
<<<sep_out_sample>>>
cmp %edx,%esi
jge 13 <func1+0x13>
lea (%rdx,%rdi,1),%eax
mov %edx,%r9d
imul %esi,%r9d
sub %r9d,%eax
jmp 18 <func1+0x18>
mov %edi,%eax
imul %edi,%eax
add %edi,%edx
add %edx,%esi
add %r8d,%esi
add %esi,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a2 < a3)
    {
        v6 = (a3 + a1) - (a3 * a2);
    }
    else
    {
        v6 = a1 * a1;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += a3 * a2 + a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 17
11 17
12 17
13 17
14 17
15 18
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (a3 < a2)
        {
            v6 += (a5 * a2) + a4;
        }
        else
        {
            v6 += a2 * a5 * a2;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += a2 * a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 21
5 22
<<<sep_out_sample>>>
push %rbx
mov %edi,%r11d
imul %esi,%r11d
sub %ecx,%r11d
sub %edi,%r11d
mov %edx,%r10d
sub %edi,%r10d
sub %edi,%r10d
add %r8d,%r10d
mov %edi,%r9d
neg %r9d
mov %ecx,%ebx
sub %r8d,%ebx
sub %edi,%r9d
test %esi,%esi
cmovg %ebx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
sub %edi,%r8d
sub %ecx,%r8d
add %r8d,%edx
add %edx,%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = (a1 * a2 - a4) - a1;
    v7 = (a3 - a1 - a1) + a5;
    if (v8 < a2)
    {
        v8 = a4 - a5;
    }
    else
    {
        v8 = a5 - a5 - a1 - a1;
    }
    v9 = a3 + ((a5 - a1) - a4);
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 4
3 4
4 4
5 4
6 5
7 5
8 5
9 5
10 12
11 12
12 8
13 8
14 8
15 8
16 8
17 15
18 15
19 15
20 15
21 15
22 15
23 15
24 14
25 14
26 14
27 15
28 16
29 16
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
add %ecx,%esi
mov %edx,%eax
imul %edx,%eax
sub %eax,%r8d
lea 0x1(%rsi,%r8,1),%eax
add %ecx,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = a5 - a3 * a3;
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += (a4 * a2) - a3;
    }
    v9 = a3 + a4;
    v10 = 0;
    for (v11 = 0; v11++; v11<a5)
    {
        v10 += a5 * a4;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 16
4 16
5 4
6 4
7 4
8 16
9 10
10 16
11 17
<<<sep_out_sample>>>
lea (%rsi,%rcx,1),%eax
cmp $0x1,%edi
jg 13 <func1+0x13>
mov %edx,%eax
imul %ecx,%eax
imul %r8d,%eax
add %edi,%eax
lea 0x1(%rax,%rdi,1),%eax
add %eax,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (a3 < a5)
        {
            v6 += a3 * a1;
        }
        else
        {
            v6 += a3 * a4 - a1;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += a2 + a2 * a1;
    }
    if (v7 < a1)
    {
        v10 = a2 + a4;
    }
    else
    {
        v10 = a5 * (a3 * a4) + a1;
    }
    v11 = 0;
    for (v12 = 0; v12++; v12<a3)
    {
        if (a2 < a5)
        {
            v11 += a5 * a2 + a3;
        }
        else
        {
            v11 += a2 + (a2 + a3);
        }
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 23
2 21
3 21
4 27
5 27
6 27
7 27
8 41
9 41
10 41
11 41
12 41
13 42
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%eax
sub %ecx,%edx
imul %edx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (v6 < a5)
        {
            v6 += a1 - a5;
        }
        else
        {
            v6 += (a3 + a3) - a4;
        }
    }
    v8 = (a3 - a4) * a5;
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        v9 += (a3 * a1) - a3;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 22
4 22
5 16
6 16
7 22
8 23
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %r8d,%edx
add %ecx,%edx
mov %r8d,%eax
imul %ecx,%eax
add %edi,%eax
add %r8d,%eax
add %edx,%eax
add %edi,%r8d
add %r8d,%eax
lea (%rcx,%rsi,1),%edx
imul %esi,%ecx
add %edx,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = ((a5 * a4) + a1) + a5;
    if (a4 < a4)
    {
        v7 = a3 - (a1 - a4);
    }
    else
    {
        v7 = (a1 - a2 + a2) + a5;
    }
    if (a2 < a2)
    {
        v8 = a4 - a3;
    }
    else
    {
        v8 = a4 + a2 + a2 * a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 21
5 4
6 4
7 4
8 4
9 21
10 11
11 21
12 19
13 19
14 19
15 21
16 22
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %r8d,%edx
lea (%rsi,%rcx,2),%eax
lea (%rax,%rdx,1),%eax
sub %edi,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a5 < a5)
    {
        v6 = a3 + a1 * a5;
    }
    else
    {
        v6 = a2 + a4;
    }
    v7 = a5 - a1;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 13
2 13
3 13
4 10
5 13
6 12
7 13
8 14
<<<sep_out_sample>>>
test %ecx,%ecx
jle 10 <func1+0x10>
mov %esi,%eax
sub %edx,%eax
add %edi,%eax
imul %r8d,%eax
jmp 16 <func1+0x16>
lea (%rdx,%rcx,1),%eax
imul %edx,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a4 + (a2 - a5);
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        if (a4 < a5)
        {
            v8 += a3 * a5;
        }
        else
        {
            v8 += a5 * a2;
        }
    }
    if (v8 < a4)
    {
        v10 = (a1 + (a2 - a3)) * a5;
    }
    else
    {
        v10 = a3 * a3 + a3 * a4;
    }
    v11 = ((a1 - a1) * a4) * a4;
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 23
4 23
5 23
6 23
7 23
8 27
9 27
10 30
11 30
12 30
13 30
14 30
15 31
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %edx,%r8d
lea 0x1(%rcx,%r8,1),%edx
imul %edi,%edi
add %edi,%ecx
sub %esi,%ecx
lea (%rdx,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a3 * a5;
    }
    v8 = (a1 * a1 + a4) - a2;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 9
6 9
7 9
8 10
9 11
<<<sep_out_sample>>>
cmp %ecx,%edi
jle 10 <func1+0x10>
mov %edi,%eax
imul %edi,%eax
sub %r8d,%eax
add %edi,%eax
jmp 1c <func1+0x1c>
mov %edx,%eax
imul %edi,%eax
lea (%rdi,%rsi,1),%r9d
sub %r9d,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (a1 < a5)
        {
            v6 += (a5 + a4) * a5;
        }
        else
        {
            v6 += a1 + (a5 - a4);
        }
    }
    if (a4 < a1)
    {
        v8 = (a1 * a1 - a5) + a1;
    }
    else
    {
        v8 = a3 * a1 - (a1 + a2);
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        v9 += a4 + (a2 * a3);
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 18
7 18
8 22
9 22
10 22
11 22
12 29
13 29
14 29
15 29
16 29
17 30
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%r9d
add %esi,%r9d
add %r8d,%r9d
add %ecx,%r9d
mov %ecx,%eax
imul %r8d,%eax
sub %esi,%eax
add %edi,%eax
add %r9d,%eax
mov %edi,%r10d
sub %esi,%r10d
mov %r10d,%esi
add %edx,%esi
add %r8d,%esi
add %esi,%eax
sub %ecx,%edi
add %edi,%edx
add %edx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a4 * a5 - a2 + a1;
    v7 = ((a1 - a2) + a3) + a5;
    v8 = (a1 - a4) + a3 + a5;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 7
2 7
3 7
4 7
5 4
6 4
7 4
8 4
9 7
10 5
11 5
12 5
13 5
14 5
15 7
16 6
17 6
18 6
19 7
20 8
<<<sep_out_sample>>>
mov %r8d,%eax
sub %esi,%eax
cmp %edx,%edi
cmovg %ecx,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (a5 < a5)
        {
            v6 += (a4 + a3) * a4;
        }
        else
        {
            v6 += a1 * (a5 * a1);
        }
    }
    if (a3 < a1)
    {
        v8 = a2 - a2 + a4;
    }
    else
    {
        v8 = a3 - a2 - (a3 - a5);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 22
2 22
3 22
4 22
5 24
6 24
7 24
8 24
9 24
10 25
<<<sep_out_sample>>>
mov %esi,%r9d
imul %ecx,%r9d
sub %edi,%r9d
sub %edx,%r9d
lea (%rdx,%rsi,1),%r11d
sub %ecx,%r11d
imul %ecx,%r11d
lea (%rdi,%rcx,1),%eax
mov %ecx,%r10d
sub %esi,%r10d
cmp %r8d,%r9d
cmovl %eax,%r10d
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
add %r11d,%eax
add %r10d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = (a2 * a4 - a1) - a3;
    v7 = (a3 + a2 - a4) * a4;
    if (v6 < a5)
    {
        v8 = (a4 + (a1 + a4)) - a4;
    }
    else
    {
        v8 = a4 - a2;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        if (v8 < a5)
        {
            v9 += (a2 + a4) - a3;
        }
        else
        {
            v9 += a4 + (a4 + a5);
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 5
6 5
7 5
8 8
9 8
10 8
11 8
12 8
13 26
14 26
15 26
16 26
17 26
18 26
19 26
20 27
<<<sep_out_sample>>>
add %edx,%edi
add %esi,%edi
add %edi,%r8d
sub $0x1,%edx
imul %edx,%esi
lea (%r8,%rcx,2),%eax
lea 0x1(%rax,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += (a1 + a2) - a4;
    }
    v8 = a4 - (a2 - a3 * a2);
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 9
5 9
6 9
7 10
8 11
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
lea (%r8,%rcx,1),%eax
mov $0x1,%r8d
sub %ecx,%r8d
imul %r8d,%ecx
add %ecx,%edi
lea 0x1(%rax,%rdi,1),%eax
add %edx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a4 - a4 * a4 + a1;
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += a2 + a3 + a2;
    }
    v9 = a2 + a3;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 11
5 4
6 4
7 4
8 4
9 11
10 10
11 11
12 12
<<<sep_out_sample>>>
mov %edi,%r9d
sub %ecx,%r9d
cmp %ecx,%esi
jge 14 <func1+0x14>
mov %r8d,%r9d
sub %edx,%r9d
imul %edx,%r9d
mov %edx,%r11d
imul %edx,%r11d
cmp %edx,%r8d
jge 29 <func1+0x29>
lea (%rsi,%rdi,2),%r10d
sub %ecx,%r10d
jmp 30 <func1+0x30>
mov %r8d,%r10d
imul %ecx,%r10d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
add %r11d,%r9d
add %r9d,%edi
lea (%rdi,%r10,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a2 < a4)
    {
        v6 = a3 * (a5 - a3);
    }
    else
    {
        v6 = (a2 - a4 + a1) - a2;
    }
    v7 = a3 * a3;
    v8 = a1 + (a2 - a2);
    if (a5 < a3)
    {
        v9 = a2 + a1 + (a1 - a4);
    }
    else
    {
        v9 = a5 * a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 4
4 4
5 6
6 6
7 6
8 12
9 12
10 14
11 14
12 16
13 16
14 16
15 20
16 20
17 22
18 22
19 22
20 22
21 22
22 22
23 22
24 22
25 23
<<<sep_out_sample>>>
cmp %ecx,%edx
jle f <func1+0xf>
mov %edx,%r10d
sub %ecx,%r10d
sub %ecx,%r10d
jmp 19 <func1+0x19>
lea (%rdi,%rsi,1),%r10d
sub %edx,%r10d
sub %edx,%r10d
mov %ecx,%r9d
imul %esi,%r9d
imul %edx,%r9d
sub %r8d,%r9d
lea (%r10,%r9,1),%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a5 - a5 * a2;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += (a1 + a3) * a1;
    }
    if (a4 < a3)
    {
        v10 = a3 - a4 - a4;
    }
    else
    {
        v10 = (a1 + a2) - a3 - a3;
    }
    v11 = a4 * a2 * a3 - a5;
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 14
2 14
3 16
4 16
5 16
6 16
7 20
8 20
9 20
10 22
11 22
12 22
13 22
14 23
15 23
16 23
17 23
18 23
19 23
20 24
<<<sep_out_sample>>>
cmp %r8d,%esi
jge 13 <func1+0x13>
lea (%rcx,%r8,1),%r9d
imul %r8d,%r9d
imul %esi,%r9d
jmp 1e <func1+0x1e>
lea (%rdi,%rdx,1),%r9d
sub %esi,%r9d
imul %esi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
imul %edx,%r8d
imul %r8d,%esi
add %esi,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a2 < a5)
    {
        v6 = a5 * (a4 + a5) * a2;
    }
    else
    {
        v6 = (a1 + a3 - a2) * a2;
    }
    if (a3 < a3)
    {
        v7 = a3 + a2 + a1 - a4;
    }
    else
    {
        v7 = a4 + (a3 * a5 * a2);
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 20
11 20
12 20
13 20
14 20
15 18
16 18
17 18
18 20
19 21
<<<sep_out_sample>>>
mov %r8d,%r9d
imul %edx,%r9d
sub %esi,%r9d
sub %r8d,%r9d
mov %r8d,%eax
sub %esi,%eax
cmp %edx,%r8d
jle 29 <func1+0x29>
mov %ecx,%eax
imul %r8d,%eax
mov %esi,%r10d
sub %eax,%r10d
mov %r10d,%eax
imul %edx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a5 * a3 - a2 - a5;
    if (a3 < a5)
    {
        v7 = (a2 - a4 * a5) * a3;
    }
    else
    {
        v7 = a5 - a2;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += a5 + a2 + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 11
6 11
7 5
8 5
9 7
10 7
11 7
12 7
13 7
14 7
15 18
16 18
17 18
18 18
19 18
20 18
21 19
<<<sep_out_sample>>>
mov %ecx,%r9d
sub %r8d,%r9d
mov %r8d,%eax
imul %ecx,%eax
add %r9d,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += (a5 - a5) * a5;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += (a2 * a2) * a5;
    }
    v10 = a4 - a5 + a5 * a4;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 14
2 14
3 14
4 14
5 14
6 15
7 15
8 15
9 15
10 15
11 16
<<<sep_out_sample>>>
mov %r8d,%eax
sub %esi,%eax
mov %edi,%r9d
sub %ecx,%r9d
cmp %ecx,%r8d
cmovge %r9d,%eax
add %edx,%edi
add %edi,%esi
lea (%rcx,%r8,2),%edi
lea (%rdi,%rsi,1),%esi
add %esi,%eax
mov %edx,%esi
sub %ecx,%esi
add %esi,%eax
sub %edx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = (a4 - a4) * a4 + a5;
    if (a5 < a4)
    {
        v7 = a5 - a2;
    }
    else
    {
        v7 = a5 + a1 - a5 - a4;
    }
    v8 = a3 - ((a4 + a1) - a1);
    if (a2 < a2)
    {
        v9 = ((a1 - a2) - a3) * a3;
    }
    else
    {
        v9 = a5 + (a4 - a4) - a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 7
2 7
3 7
4 7
5 7
6 7
7 22
8 22
9 22
10 22
11 22
12 13
13 13
14 22
15 20
16 22
17 23
<<<sep_out_sample>>>
imul %ecx,%edi
imul %ecx,%edi
add %edx,%edi
add %esi,%edi
add %edi,%r8d
add %r8d,%ecx
sub %esi,%ecx
lea 0x1(%rdx,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = (a1 - a2 - a1) - a1;
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        if (v6 < a2)
        {
            v7 += a5 + a5 + a1;
        }
        else
        {
            v7 += a1 + a2 + a1;
        }
    }
    v9 = a3 - (a5 - a5) + a1;
    v10 = (a1 * a4 * a4) - a1;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 19
4 19
5 19
6 19
7 4
8 19
9 20
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%r9d
add %esi,%r9d
add %r8d,%r9d
add %ecx,%r9d
add %r8d,%esi
imul %ecx,%edx
sub %edx,%esi
lea (%r9,%rsi,1),%eax
add %edi,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = (a5 + a2) - a3 * a4;
    v7 = a4 + a1;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 4
7 4
8 6
9 5
10 6
11 7
<<<sep_out_sample>>>
lea (%rdi,%rsi,1),%eax
mov %esi,%r9d
imul %r8d,%r9d
cmp %esi,%edx
cmovl %r9d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a3 < a2)
    {
        v6 = ((a2 + a5) - a5) * a5;
    }
    else
    {
        v6 = (a4 + a1) + a2 - a4;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += a3 * a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 6
3 6
4 6
5 6
6 17
7 17
8 17
9 17
10 17
11 18
<<<sep_out_sample>>>
mov %edi,%eax
sub %r8d,%eax
cmp $0x1,%esi
jle 11 <func1+0x11>
mov %edi,%eax
sub %edx,%eax
imul %edx,%eax
mov $0x0,%r9d
cmp %r8d,%eax
jl 2b <func1+0x2b>
mov %r8d,%r9d
imul %r8d,%r9d
imul %edi,%r9d
imul %r8d,%r9d
add %r9d,%edi
add %edi,%edx
add %esi,%edx
add %edx,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a2 - a3 * a1;
    }
    if (v7 < a2)
    {
        v8 = (a1 - a3) * a3;
    }
    else
    {
        v8 = a1 - a5;
    }
    v9 = a2 + a5 - a5;
    if (v8 < a5)
    {
        v10 = a1 - a1;
    }
    else
    {
        v10 = a5 * (a5 * a5 * a1);
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 15
2 15
3 9
4 9
5 11
6 11
7 11
8 20
9 18
10 18
11 24
12 24
13 24
14 24
15 26
16 26
17 26
18 26
19 26
20 26
21 26
22 27
<<<sep_out_sample>>>
mov %r8d,%eax
sub %edi,%eax
cmp %r8d,%edi
jge 1a <func1+0x1a>
mov %edi,%eax
imul %r8d,%eax
mov %ecx,%r9d
imul %esi,%r9d
sub %r9d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %ecx,%r8d
add %r8d,%eax
imul %ecx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a1 < a5)
    {
        v6 = (a1 * a5) - (a4 * a2);
    }
    else
    {
        v6 = a5 - a1;
    }
    v7 = a4 * a1;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 10
2 10
3 4
4 4
5 6
6 6
7 6
8 6
9 6
10 13
11 13
12 13
13 13
14 13
15 12
16 13
17 14
<<<sep_out_sample>>>
lea (%rdx,%r8,1),%r9d
cmp %r8d,%esi
jl 15 <func1+0x15>
mov %edx,%r9d
sub %esi,%r9d
sub %r8d,%r9d
add %ecx,%r9d
add %edi,%edx
add %esi,%edx
add %r8d,%edx
add %ecx,%edx
add %r9d,%edx
imul %r8d,%ecx
add %ecx,%esi
sub %r8d,%esi
lea (%rdx,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a2 < a5)
    {
        v6 = a3 + a5;
    }
    else
    {
        v6 = a3 - a2 - a5 + a4;
    }
    v7 = (a4 * a5) + a2 - a5;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 4
3 4
4 10
5 10
6 10
7 10
8 13
9 13
10 13
11 13
12 13
13 12
14 12
15 12
16 13
17 14
<<<sep_out_sample>>>
lea (%rdi,%rdi,1),%r11d
lea (%rcx,%rdx,1),%r9d
cmp %r8d,%r9d
jge 1b <func1+0x1b>
mov %esi,%r10d
sub %r8d,%r10d
add %edi,%r10d
add %edx,%r10d
jmp 22 <func1+0x22>
mov %edi,%r10d
imul %ecx,%r10d
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
add %r8d,%ecx
add %r11d,%ecx
add %ecx,%r9d
lea (%r9,%r10,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a1 + a1;
    v7 = a4 + a3;
    if (v7 < a5)
    {
        v8 = (a2 - a5 + a1) + a3;
    }
    else
    {
        v8 = a1 * a4;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a1)
    {
        v9 += a1 + a2;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 5
3 6
4 6
5 8
6 8
7 8
8 8
9 8
10 12
11 12
12 19
13 19
14 19
15 19
16 19
17 19
18 19
19 20
<<<sep_out_sample>>>
lea (%rcx,%r8,1),%r9d
cmp %edx,%esi
mov $0x0,%eax
cmovl %eax,%r9d
lea (%rsi,%rcx,1),%eax
cmp %edi,%esi
jge 24 <func1+0x24>
mov %r8d,%r10d
sub %esi,%r10d
mov %edi,%eax
imul %ecx,%eax
add %r10d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a2 < a3)
    {
        v6 = (a3 - a3 + a5) - a5;
    }
    else
    {
        v6 = a4 + a5;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += a1 + a5;
    }
    if (a2 < a1)
    {
        v9 = a5 - a2 + a1 * a4;
    }
    else
    {
        v9 = a2 + a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 23
6 17
7 17
8 19
9 19
10 19
11 19
12 19
13 25
14 25
15 25
16 25
17 25
18 25
19 26
<<<sep_out_sample>>>
mov %edi,%r9d
sub %ecx,%r9d
add %esi,%r9d
add %r8d,%r9d
mov %ecx,%eax
sub %esi,%eax
cmp $0x1,%esi
jle 1f <func1+0x1f>
mov %ecx,%eax
imul %ecx,%eax
add %r8d,%eax
add %esi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %r9d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a3 * a1 * a4;
    }
    v8 = (a1 - a4 + a2) + a5;
    if (v7 < a2)
    {
        v9 = a5 + a4 * a4 + a2;
    }
    else
    {
        v9 = a4 - a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 9
4 9
5 16
6 16
7 10
8 10
9 12
10 12
11 12
12 12
13 18
14 18
15 18
16 18
17 18
18 18
19 19
<<<sep_out_sample>>>
lea (%rcx,%rsi,1),%eax
test %r8d,%r8d
jle 11 <func1+0x11>
mov %edi,%eax
sub %ecx,%eax
add %edi,%eax
add %r8d,%eax
lea 0x1(%rax,%rdi,1),%eax
add %eax,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a3 - a4;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += a3 + a2 - a2;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a1)
    {
        v10 += a2 + (a5 + a4);
    }
    if (v8 < a5)
    {
        v12 = a1 - a4 + a1 + a5;
    }
    else
    {
        v12 = a5 + a2 - a5 + a4;
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 25
2 19
3 19
4 21
5 21
6 21
7 21
8 27
9 27
10 27
11 27
12 27
13 28
<<<sep_out_sample>>>
mov %edx,%r9d
sub %ecx,%r9d
lea (%rsi,%rcx,1),%eax
lea (%rdi,%rdi,1),%r10d
cmp %r9d,%ecx
cmovle %r10d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a3 - a4;
    if (v6 < a4)
    {
        v7 = a2 + a4;
    }
    else
    {
        v7 = a1 + a1;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 7
4 7
5 7
6 7
7 13
8 13
9 13
10 13
11 13
12 13
13 14
<<<sep_out_sample>>>
cmp %edi,%ecx
jge 14 <func1+0x14>
mov %esi,%r10d
imul %ecx,%r10d
imul %edi,%r10d
add %edx,%r10d
jmp 1b <func1+0x1b>
mov %edx,%r10d
imul %r8d,%r10d
lea (%rcx,%rsi,1),%r9d
test %edi,%edi
mov $0x0,%eax
cmovg %r9d,%eax
cmp %ecx,%eax
jge 3d <func1+0x3d>
mov %esi,%r9d
imul %ecx,%r9d
sub %r8d,%r9d
sub %esi,%r9d
jmp 47 <func1+0x47>
lea (%rdi,%r8,1),%r9d
sub %edx,%r9d
add %edi,%r9d
add %edx,%edi
add %esi,%edi
add %edi,%r8d
add %ecx,%r8d
add %r10d,%r8d
add %r8d,%eax
add %r9d,%eax
sub %edx,%ecx
add %esi,%ecx
imul %ecx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a4 < a1)
    {
        v6 = (a1 * (a2 * a4)) + a3;
    }
    else
    {
        v6 = a3 * a5;
    }
    if (v7 < a1)
    {
        v7 = a4 + a2;
    }
    else
    {
        v7 = a3 - a3;
    }
    if (v7 < a4)
    {
        v8 = ((a2 * a4) - a5) - a2;
    }
    else
    {
        v8 = a1 + a5 - a3 + a1;
    }
    v9 = a2 * (a4 - a3 + a2);
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 14
11 14
12 14
13 14
14 20
15 20
16 22
17 22
18 22
19 22
20 22
21 26
22 26
23 26
24 29
25 29
26 29
27 29
28 29
29 29
30 29
31 28
32 28
33 28
34 29
35 30
<<<sep_out_sample>>>
mov $0x0,%eax
cmp %esi,%r8d
jge 11 <func1+0x11>
mov %r8d,%eax
sub %ecx,%eax
add %edi,%eax
lea (%rsi,%r8,1),%r9d
imul %esi,%r9d
add %r9d,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a5 * a2;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += a5 - a3;
    }
    if (a5 < a2)
    {
        v10 = (a5 - a4) + a1;
    }
    else
    {
        v10 = a1 - a1;
    }
    v11 = a2 * a2 + a2 * a5;
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 20
2 14
3 14
4 16
5 16
6 16
7 22
8 22
9 23
10 23
11 23
12 23
13 23
14 23
15 24
<<<sep_out_sample>>>
cmp %edx,%ecx
jge c <func1+0xc>
mov %edx,%r9d
sub %r8d,%r9d
jmp 19 <func1+0x19>
mov %edi,%eax
imul %edx,%eax
add %esi,%eax
mov %edx,%r9d
sub %eax,%r9d
cmp %esi,%r9d
jge 26 <func1+0x26>
lea 0x1(%rdi),%eax
imul %edx,%eax
jmp 30 <func1+0x30>
mov %edx,%eax
imul %r8d,%eax
sub %edi,%eax
sub %ecx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a4 < a3)
    {
        v6 = a3 - a5;
    }
    else
    {
        v6 = a3 - (a2 + a1 * a3);
    }
    if (v6 < a2)
    {
        v7 = a3 + (a1 * a3);
    }
    else
    {
        v7 = a3 * a5 - a1 - a4;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 10
10 10
11 12
12 12
13 14
14 14
15 14
16 18
17 18
18 18
19 18
20 20
21 20
22 20
23 20
24 20
25 20
26 21
<<<sep_out_sample>>>
mov %edx,%eax
imul %r8d,%eax
mov %esi,%r9d
sub %eax,%r9d
add %ecx,%r9d
test %r8d,%r8d
jle 23 <func1+0x23>
lea (%rdi,%r8,1),%eax
mov %edx,%r10d
sub %eax,%r10d
mov %r10d,%eax
jmp 2d <func1+0x2d>
mov %ecx,%eax
imul %edx,%eax
imul %edx,%eax
add %edi,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a2 - a3 * a5 + a4;
    if (v7 < a5)
    {
        v7 = a3 - (a1 + a5);
    }
    else
    {
        v7 = a1 + (a4 * a3 * a3);
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += (a1 - a2) + a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 4
6 5
7 5
8 7
9 7
10 7
11 7
12 7
13 11
14 11
15 11
16 11
17 18
18 18
19 18
20 18
21 18
22 18
23 19
<<<sep_out_sample>>>
lea (%rdx,%rsi,1),%r10d
imul %edx,%r10d
add %esi,%r10d
cmp %r8d,%ecx
jge 1e <func1+0x1e>
mov %esi,%r9d
sub %r8d,%r9d
sub %edi,%r9d
add %ecx,%r9d
jmp 2c <func1+0x2c>
mov %edx,%r9d
imul %r8d,%r9d
imul %edx,%r9d
sub %ecx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
imul %ecx,%r8d
sub %esi,%r8d
imul %r8d,%edi
add %edi,%eax
sub %ecx,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = (a3 + a2) * a3 + a2;
    if (a4 < a5)
    {
        v7 = (a2 - a5 - a1) + a4;
    }
    else
    {
        v7 = a3 * a5 * a3 - a4;
    }
    v8 = (a4 * a5 - a2) * a1;
    v9 = a3 - a4;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 5
5 5
6 7
7 7
8 7
9 7
10 7
11 11
12 11
13 11
14 11
15 15
16 15
17 15
18 15
19 15
20 15
21 13
22 13
23 13
24 15
25 14
26 15
27 16
<<<sep_out_sample>>>
lea (%rsi,%rdi,2),%r9d
add %edi,%r9d
test %edi,%edi
jle 16 <func1+0x16>
lea 0x1(%rsi),%eax
imul %edx,%eax
imul %edi,%eax
jmp 1b <func1+0x1b>
lea (%rdi,%rsi,2),%eax
sub %edx,%eax
add %edx,%edi
add %edi,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%edx
add %r9d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (a4 < a2)
        {
            v6 += (a5 - a2) + a2;
        }
        else
        {
            v6 += (a4 - a4) + a5;
        }
    }
    v8 = a1 + a2 + a1 + a1;
    if (v6 < a1)
    {
        v9 = (a3 + a2 * a3) * a1;
    }
    else
    {
        v9 = a2 - a3 + a2 + a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 17
4 17
5 19
6 19
7 19
8 19
9 23
10 23
11 25
12 25
13 25
14 25
15 25
16 25
17 26
<<<sep_out_sample>>>
mov %edx,%r9d
sub %r8d,%r9d
imul %ecx,%r9d
imul %esi,%r9d
lea (%r8,%r8,1),%eax
cmp %r9d,%esi
jle 1f <func1+0x1f>
lea (%rsi,%rcx,1),%eax
imul %ecx,%eax
sub %edi,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%r9d
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (a1 < a1)
        {
            v6 += a4 * a5 * a1;
        }
        else
        {
            v6 += (a2 - a1) + a5;
        }
    }
    v8 = ((a3 - a5) * a4) * a2;
    if (v8 < a2)
    {
        v9 = a4 * (a2 + a4) - a1;
    }
    else
    {
        v9 = (a5 + (a5 + a3)) - a3;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a2)
    {
        v10 += a5 * a3 + a2;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 16
4 16
5 23
6 17
7 17
8 19
9 19
10 19
11 30
12 30
13 30
14 30
15 30
16 30
17 31
<<<sep_out_sample>>>
mov %r8d,%r9d
imul %esi,%r9d
cmp %edx,%ecx
jge 15 <func1+0x15>
mov %edx,%eax
imul %edx,%eax
add %r8d,%eax
jmp 20 <func1+0x20>
mov %edx,%eax
imul %edi,%eax
imul %edx,%eax
imul %edx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a1 < a1)
    {
        v6 = a1 + a2;
    }
    else
    {
        v6 = a1 + a5 * a2 - a1;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a4 - a2;
    }
    if (a4 < a3)
    {
        v9 = a3 * a3 + a5;
    }
    else
    {
        v9 = a3 * a1 * a3 * a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 17
4 17
5 19
6 19
7 19
8 19
9 23
10 23
11 23
12 23
13 25
14 25
15 25
16 25
17 25
18 25
19 26
<<<sep_out_sample>>>
lea (%rdx,%rcx,1),%r10d
cmp %r8d,%esi
jle 12 <func1+0x12>
mov %edx,%r9d
imul %ecx,%r9d
jmp 20 <func1+0x20>
mov %esi,%r9d
imul %esi,%r9d
sub %ecx,%r9d
imul %r8d,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
imul %edi,%edx
add %edx,%ecx
imul %ecx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a2 < a2)
    {
        v6 = (a5 - a2) * a3;
    }
    else
    {
        v6 = (a2 + a3 + a4) - a2;
    }
    if (a5 < a2)
    {
        v7 = ((a3 * a4) - a4) + a4;
    }
    else
    {
        v7 = a5 * (a2 * a2 - a4);
    }
    v8 = (a1 * a3 + a4) * a2;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 12
3 12
4 14
5 14
6 14
7 18
8 18
9 18
10 18
11 21
12 21
13 21
14 21
15 21
16 21
17 20
18 20
19 20
20 21
21 22
<<<sep_out_sample>>>
test %esi,%esi
jle 12 <func1+0x12>
lea (%rdi,%rsi,1),%eax
mov %edx,%r9d
sub %eax,%r9d
mov %r9d,%eax
jmp 19 <func1+0x19>
lea (%rcx,%rdi,1),%eax
sub %esi,%eax
add %edi,%eax
add %edx,%edi
add %edi,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (v7 < a1)
        {
            v6 += a5 + a5;
        }
        else
        {
            v6 += a3 + a1 + a5;
        }
    }
    if (v6 < a2)
    {
        v8 = a3 - (a1 + a2);
    }
    else
    {
        v8 = (a4 + a1) - a2 + a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 18
7 18
8 22
9 22
10 22
11 24
12 24
13 24
14 24
15 24
16 25
<<<sep_out_sample>>>
mov %esi,%r9d
sub %edx,%r9d
test %r8d,%r8d
jle 16 <func1+0x16>
lea 0x1(%r8),%r9d
imul %ecx,%r9d
add %r8d,%r9d
lea (%rdx,%rdi,1),%eax
mov %edi,%r10d
sub %edx,%r10d
cmp $0x2,%edx
cmovl %r10d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (v6 < a5)
    {
        v6 = a4 + a5 * a4 + a5;
    }
    else
    {
        v6 = a4 + a2 - a3 - a4;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        if (a3 < a5)
        {
            v7 += a3 + a1 - a3;
        }
        else
        {
            v7 += a3 * a5;
        }
    }
    if (v8 < a3)
    {
        v9 = a3 + a1;
    }
    else
    {
        v9 = a1 - a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 4
4 4
5 6
6 6
7 6
8 26
9 26
10 26
11 26
12 26
13 32
14 32
15 32
16 32
17 32
18 32
19 33
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
add %esi,%ecx
add %edx,%r8d
lea (%rcx,%r8,1),%edx
lea (%rdx,%rdi,2),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a3 + a5;
    v7 = a1 + a1;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 6
7 6
8 7
<<<sep_out_sample>>>
lea (%rsi,%rcx,1),%r9d
cmp %edi,%esi
jl f <func1+0xf>
lea (%rdi,%rcx,1),%eax
lea (%rax,%r8,2),%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
lea (%rsi,%rcx,2),%esi
lea (%rsi,%rdx,1),%esi
lea (%rax,%rsi,1),%edx
imul %edi,%edi
imul %edi,%r8d
sub %ecx,%r8d
lea (%rdx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a2 < a1)
    {
        v6 = a2 + a4;
    }
    else
    {
        v6 = (a1 + a4) + a5 + a5;
    }
    if (a1 < a1)
    {
        v7 = a1 * a2;
    }
    else
    {
        v7 = a3 + (a2 + a4) + a4;
    }
    v8 = ((a1 * a1) * a5) - a4;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 6
2 4
3 4
4 10
5 10
6 21
7 21
8 21
9 21
10 21
11 18
12 18
13 21
14 20
15 20
16 20
17 21
18 22
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %edx,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %edi,%esi
add %esi,%eax
sub %edi,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (a3 < a4)
        {
            v6 += a5 - (a3 * a3);
        }
        else
        {
            v6 += a1 - a2;
        }
    }
    v8 = a1 + a2;
    v9 = a4 - a1;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 18
5 16
6 18
7 17
8 18
9 19
<<<sep_out_sample>>>
mov %esi,%eax
sub %r8d,%eax
cmp %r8d,%edx
jle 12 <func1+0x12>
mov %ecx,%eax
imul %ecx,%eax
add %r8d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (a1 < a3)
        {
            v6 += a4 + a3;
        }
        else
        {
            v6 += a3 + a2;
        }
    }
    if (a5 < a3)
    {
        v8 = a5 + a4 * a4;
    }
    else
    {
        v8 = a2 - a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 22
2 22
3 16
4 16
5 18
6 18
7 18
8 24
9 24
10 24
11 24
12 24
13 25
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (a5 < a3)
        {
            v6 += (a1 * a3) + a5;
        }
        else
        {
            v6 += a2 - a3 + a5;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        if (v6 < a4)
        {
            v8 += a3 + a5;
        }
        else
        {
            v8 += (a3 * a3) - a2;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 28
2 28
3 28
4 28
5 29
<<<sep_out_sample>>>
test %edx,%edx
jle c <func1+0xc>
mov %esi,%r11d
sub %r8d,%r11d
jmp 18 <func1+0x18>
mov %r8d,%r11d
sub %edi,%r11d
add %r8d,%r11d
add %esi,%r11d
lea (%r8,%rdx,1),%r10d
cmp %r8d,%esi
jge 2c <func1+0x2c>
lea 0x1(%rdi,%rsi,1),%r9d
imul %r8d,%r9d
jmp 3a <func1+0x3a>
mov %ecx,%r9d
imul %edi,%r9d
imul %edi,%r9d
add %r8d,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (v6 < a3)
    {
        v6 = a2 - a5;
    }
    else
    {
        v6 = (a5 - a1) + a5 + a2;
    }
    v7 = a4 - a4 + a5 + a3;
    if (a2 < a5)
    {
        v8 = (a5 * (a2 + a1)) + a5;
    }
    else
    {
        v8 = a5 + (a1 * (a4 * a1));
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 10
10 12
11 13
12 13
13 15
14 15
15 15
16 19
17 19
18 19
19 19
20 21
21 21
22 21
23 21
24 21
25 21
26 21
27 22
<<<sep_out_sample>>>
lea (%r8,%r8,1),%eax
lea (%rsi,%r8,1),%r9d
cmp %ecx,%edx
cmovl %eax,%r9d
test %r8d,%r8d
jle 1e <func1+0x1e>
mov %edi,%eax
sub %ecx,%eax
add %esi,%eax
imul %esi,%eax
jmp 27 <func1+0x27>
mov %esi,%eax
sub %edx,%eax
add %r8d,%eax
sub %ecx,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    if (a3 < a4)
    {
        v6 = a5 + a5;
    }
    else
    {
        v6 = a2 + a5;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        if (v8 < a2)
        {
            v7 += a3 * (a1 * a1);
        }
        else
        {
            v7 += a2 * (a3 + a3);
        }
    }
    if (v9 < a5)
    {
        v9 = ((a1 - a4) + a2) * a2;
    }
    else
    {
        v9 = a2 - a3 + a5 - a4;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a4)
    {
        v10 += a1 + a4;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 24
6 24
7 26
8 26
9 26
10 26
11 26
12 30
13 30
14 30
15 30
16 37
17 37
18 37
19 37
20 37
21 37
22 38
<<<sep_out_sample>>>
lea (%rsi,%rdi,1),%eax
lea 0x1(%rdi,%rdx,1),%edi
add %esi,%edi
add %r8d,%edi
add %edi,%ecx
imul %esi,%r8d
add %r8d,%edx
add %edx,%esi
add %esi,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a5 * a2 + a3 + a2;
    if (a2 < a2)
    {
        v7 = (a4 * a2) * a1 - a4;
    }
    else
    {
        v7 = a4 - a4;
    }
    v8 = a2 - a5 + a5 + a1;
    v9 = 0;
    for (v10 = 0; v10++; v10<a1)
    {
        v9 += a5 - a5 * a1;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 13
2 19
3 19
4 19
5 19
6 4
7 4
8 4
9 19
10 19
11 20
<<<sep_out_sample>>>
cmp %ecx,%esi
jge d <func1+0xd>
lea (%rsi,%rdx,1),%eax
imul %r8d,%eax
jmp 1c <func1+0x1c>
mov %edx,%r9d
imul %edi,%r9d
mov %esi,%eax
imul %ecx,%eax
add %r9d,%eax
lea 0x2(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    if (a2 < a4)
    {
        v6 = a5 * (a2 + a3);
    }
    else
    {
        v6 = a3 * a1 + a2 * a4;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += (a1 * a1) - a2;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a1)
    {
        v9 += (a5 + a2) * a5;
    }
    v11 = 0;
    for (v12 = 0; v12++; v12<a3)
    {
        v11 += a2 * a3 - a3;
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 10
10 10
11 27
12 27
13 27
14 27
15 27
16 28
<<<sep_out_sample>>>
test %ecx,%ecx
jle f <func1+0xf>
mov %edi,%eax
sub %ecx,%eax
imul %edi,%eax
add %esi,%eax
jmp 1a <func1+0x1a>
mov %edx,%eax
imul %edx,%eax
imul %r8d,%eax
add %ecx,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (v6 < a4)
    {
        v6 = a1 * (a1 - a4) + a2;
    }
    else
    {
        v6 = a3 * a3 * a5 + a4;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        if (v8 < a5)
        {
            v7 += a2 + a2;
        }
        else
        {
            v7 += a5 * a2 + a4;
        }
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        v9 += a4 * (a2 - a4);
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 29
13 29
14 29
15 29
16 29
17 30
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
imul %r8d,%edi
lea (%rsi,%rcx,2),%eax
lea (%rax,%rdi,1),%eax
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a5 * a1 + a4;
    v7 = a3 - a4 + a4;
    v8 = a3 - a3;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 7
2 7
3 7
4 4
5 4
6 7
7 7
8 8
<<<sep_out_sample>>>
mov %esi,%eax
sub %edi,%eax
cmp %r8d,%ecx
jl 1c <func1+0x1c>
mov %r8d,%eax
imul %r8d,%eax
mov %edx,%r9d
sub %eax,%r9d
mov %r9d,%eax
imul %ecx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (a4 < a5)
        {
            v6 += (a1 + a1) + a3;
        }
        else
        {
            v6 += a1 * a4 * a2;
        }
    }
    if (a4 < a5)
    {
        v8 = a2 - a1;
    }
    else
    {
        v8 = a4 * (a3 - a5 * a5);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 18
2 18
3 16
4 16
5 22
6 22
7 22
8 22
9 22
10 22
11 24
12 24
13 24
14 24
15 24
16 25
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a2 * a3;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += a1 + a3 + a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 14
2 14
3 14
4 14
5 15
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %r8d,%esi
add %esi,%ecx
imul %r8d,%r8d
lea 0x1(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a5 * a5;
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        if (v7 < a5)
        {
            v7 += a5 + a1;
        }
        else
        {
            v7 += a1 * a2;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 4
6 17
7 18
<<<sep_out_sample>>>
lea (%rdi,%rdi,1),%r9d
mov %r9d,%eax
sub %r8d,%eax
add %edi,%eax
add %edx,%eax
add %esi,%eax
add %r8d,%eax
add %eax,%ecx
imul %esi,%edx
imul %edx,%r8d
imul %r8d,%edi
lea 0x1(%rcx,%rdi,1),%eax
add %r9d,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = ((a3 * a2) * a5) * a1;
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        if (a3 < a1)
        {
            v7 += a4 + a4;
        }
        else
        {
            v7 += a2 + a4 - a3;
        }
    }
    v9 = a1 + a1 + a2;
    v10 = a1 + a1 - a5;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 17
2 18
3 18
4 19
5 19
6 19
7 19
8 19
9 4
10 4
11 4
12 19
13 17
14 19
15 20
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %r8d,%esi
add %ecx,%esi
mov $0x1,%eax
sub %edx,%eax
imul %r8d,%eax
add %eax,%esi
imul %ecx,%r8d
lea 0x1(%rsi,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a5 - (a5 * a3);
    v7 = a5 * a4;
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += (a2 * a3) * a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 11
5 4
6 4
7 4
8 11
9 5
10 11
11 12
<<<sep_out_sample>>>
lea (%rdx,%rdi,2),%r10d
cmp %edx,%edi
jle 13 <func1+0x13>
mov %edi,%r9d
sub %edx,%r9d
add %ecx,%r9d
jmp 1a <func1+0x1a>
mov %edx,%r9d
imul %ecx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
imul %r8d,%esi
lea (%rsi,%rdi,2),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a1 + a1 + a3;
    if (a3 < a1)
    {
        v7 = (a1 - a3) + a4;
    }
    else
    {
        v7 = a3 * a4;
    }
    v8 = (a5 * a2 + a1) + a1;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 5
3 5
4 7
5 7
6 7
7 7
8 11
9 11
10 14
11 14
12 14
13 14
14 14
15 14
16 13
17 13
18 14
19 15
<<<sep_out_sample>>>
mov %r8d,%eax
sub %edx,%eax
cmp %edi,%esi
jge 14 <func1+0x14>
mov %ecx,%eax
imul %edi,%eax
imul %edi,%eax
add %r8d,%eax
cmp %r8d,%ecx
jle 22 <func1+0x22>
mov %edi,%r9d
imul %edx,%r9d
jmp 2c <func1+0x2c>
mov %esi,%r9d
imul %edi,%r9d
add %r8d,%r9d
lea (%rdi,%rdx,2),%edx
sub %ecx,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%eax
lea 0x1(%r9,%rax,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a2 < a1)
    {
        v6 = a4 * a1 * a1 + a5;
    }
    else
    {
        v6 = a5 - a3;
    }
    if (a5 < a4)
    {
        v7 = a1 * a3;
    }
    else
    {
        v7 = a5 + a2 * a1;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += (a3 - a2) * a3;
    }
    v10 = a3 - a4;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 4
4 4
5 6
6 6
7 6
8 6
9 12
10 12
11 14
12 14
13 14
14 18
15 18
16 18
17 26
18 26
19 26
20 26
21 26
22 26
23 26
24 27
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
sub %edx,%eax
sub %edi,%eax
mov %esi,%edi
imul %ecx,%edi
add %edi,%edx
add %ecx,%edx
add %edx,%eax
mov %r8d,%edx
sub %esi,%edx
add %r8d,%ecx
add %edx,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a4 - a4 - a1 - a3;
    v7 = (a2 * a4 + a3) + a4;
    v8 = a5 - a2 + (a5 + a4);
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 7
2 7
3 7
4 7
5 4
6 7
7 5
8 5
9 5
10 5
11 7
12 6
13 6
14 6
15 6
16 7
17 8
<<<sep_out_sample>>>
cmp $0x1,%esi
jle e <func1+0xe>
lea (%rsi,%r8,1),%eax
lea (%rax,%rcx,2),%eax
jmp 1b <func1+0x1b>
lea (%rsi,%rdx,1),%eax
mov %r8d,%r9d
imul %ecx,%r9d
sub %r9d,%eax
mov %r8d,%r9d
sub %edi,%r9d
add %esi,%r9d
imul %ecx,%r9d
add %r9d,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (a1 < a5)
        {
            v6 += a5 * a4 - a5;
        }
        else
        {
            v6 += a1 * a2 - a4;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        if (v9 < a2)
        {
            v8 += (a2 + a2) * a4;
        }
        else
        {
            v8 += (a4 - a3) * a5;
        }
    }
    if (v9 < a2)
    {
        v10 = ((a2 + a5) + a4) + a4;
    }
    else
    {
        v10 = a2 + a3 - a5 * a4;
    }
    if (a5 < a5)
    {
        v11 = a4 * a2 - a4;
    }
    else
    {
        v11 = (a5 - a1 + a2) * a4;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 28
2 28
3 30
4 30
5 30
6 34
7 34
8 34
9 34
10 42
11 42
12 42
13 42
14 44
15 44
16 44
17 44
18 44
19 44
20 45
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a5 * a5 + a2;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += a5 - (a2 * a2);
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a2)
    {
        if (v10 < a1)
        {
            v10 += a5 + (a2 * a2);
        }
        else
        {
            v10 += a4 - (a2 - a2);
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 26
2 26
3 26
4 26
5 27
<<<sep_out_sample>>>
mov %edx,%eax
cmp %edi,%ecx
jl e <func1+0xe>
sub %r8d,%eax
add %esi,%eax
imul %edx,%eax
lea (%rdi,%rdx,1),%r9d
add %esi,%r9d
add %r8d,%r9d
add %r9d,%ecx
add %ecx,%eax
imul %r8d,%esi
imul %esi,%edx
sub %edx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a4 < a1)
    {
        v6 = a2 - a2 + a3;
    }
    else
    {
        v6 = (a3 - a5 + a2) * a3;
    }
    v7 = a1 - a2 * a5 * a3;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 4
3 4
4 10
5 10
6 10
7 13
8 13
9 13
10 13
11 13
12 12
13 12
14 12
15 13
16 14
<<<sep_out_sample>>>
add %edx,%edi
lea (%rdi,%rsi,1),%eax
add %r8d,%eax
add %ecx,%eax
imul %edx,%esi
add %esi,%edi
add %edi,%eax
add %r8d,%ecx
imul %ecx,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a1 + a3 + a2 * a3;
    v7 = (a5 + a4) * a3;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 6
3 6
4 6
5 4
6 4
7 6
8 5
9 5
10 6
11 7
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%r9d
add %esi,%r9d
add %r8d,%r9d
add %ecx,%r9d
mov %r8d,%eax
imul %edx,%eax
add %eax,%r9d
mov %r8d,%r10d
imul %edi,%r10d
add %r10d,%r9d
sub %esi,%edx
sub %r8d,%edx
sub %edi,%edx
lea (%r9,%rdx,1),%eax
sub %r8d,%ecx
imul %ecx,%r8d
add %r8d,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a2 - a2 + a5 * a3;
    if (a2 < a2)
    {
        v7 = a1 + a1 + a2;
    }
    else
    {
        v7 = a5 * (a1 + a2 - a2);
    }
    v8 = ((a3 - a2) - a5) - a1;
    v9 = a5 * (a4 - a5) + a1;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 15
2 15
3 15
4 15
5 4
6 4
7 15
8 11
9 11
10 15
11 13
12 13
13 13
14 15
15 14
16 14
17 14
18 15
19 16
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
mov %esi,%r9d
imul %r8d,%r9d
add %r9d,%eax
mov %r8d,%r10d
sub %esi,%r10d
sub %edx,%edi
imul %r10d,%edi
add %eax,%edi
sub %r8d,%ecx
lea (%rdi,%rcx,2),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a5 - (a5 - a2 * a5);
    v7 = (a5 - a2) * (a1 - a3);
    v8 = a4 - a5 + a4 - a5;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 7
2 7
3 7
4 7
5 4
6 4
7 7
8 5
9 5
10 5
11 5
12 7
13 6
14 7
15 8
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
lea 0x1(%rdx),%esi
imul %esi,%r8d
add %r8d,%eax
add %ecx,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a5 + a3 * a5 - a4;
    if (a3 < a3)
    {
        v7 = a4 * ((a2 - a4) * a4);
    }
    else
    {
        v7 = a3 + a4;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 13
2 13
3 13
4 4
5 4
6 13
7 11
8 13
9 14
<<<sep_out_sample>>>
lea 0x1(%rcx),%r9d
imul %esi,%r9d
cmp %r8d,%edx
jge 19 <func1+0x19>
mov %r9d,%eax
sub %esi,%eax
imul %ecx,%eax
add %esi,%eax
jmp 21 <func1+0x21>
lea 0x1(%rsi),%eax
imul %edx,%eax
sub %ecx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a2 + a4 * a2;
    if (a3 < a5)
    {
        v7 = a2 + a4 * a2 * a4;
    }
    else
    {
        v7 = a3 + a2 * a3 - a4;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 5
4 5
5 7
6 7
7 7
8 7
9 7
10 11
11 11
12 11
13 13
14 13
15 13
16 13
17 13
18 13
19 14
<<<sep_out_sample>>>
mov $0x0,%r9d
cmp %edi,%esi
jge 15 <func1+0x15>
lea 0x1(%rdi),%r9d
imul %ecx,%r9d
sub %edx,%r9d
lea (%rsi,%rcx,1),%eax
cmp %edx,%ecx
jle 26 <func1+0x26>
mov %esi,%eax
imul %ecx,%eax
sub %edi,%eax
sub %r8d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a2 < a1)
    {
        v6 = a4 + a4 * a1 - a3;
    }
    else
    {
        v6 = a4 * a2 - a2 * a4;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += a4 + a5 * a2;
    }
    if (a3 < a4)
    {
        v9 = a2 * a4 - a1 - a5;
    }
    else
    {
        v9 = a2 + a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 6
7 23
8 17
9 17
10 19
11 19
12 19
13 19
14 25
15 25
16 25
17 25
18 25
19 25
20 26
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %edx,%r8d
lea (%r8,%rcx,1),%edx
lea (%rdx,%rcx,2),%eax
add %esi,%edi
add %edi,%eax
sub %esi,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a4 + a1 + a4 - a1;
    v7 = a2 + a1;
    v8 = a4 - a2;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 7
2 7
3 7
4 7
5 7
6 5
7 7
8 6
9 7
10 8
<<<sep_out_sample>>>
lea (%rcx,%r8,1),%r9d
cmp %edx,%r8d
mov $0x0,%eax
cmovge %eax,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
imul %esi,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a5 < a3)
    {
        v6 = a4 + a5;
    }
    else
    {
        v6 = ((a5 - a5) * a3) * a3;
    }
    v7 = a2 * a2;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 13
6 13
7 13
8 13
9 13
10 12
11 13
12 14
<<<sep_out_sample>>>
mov %r8d,%r11d
sub %edi,%r11d
imul %edx,%r11d
add %esi,%r11d
lea (%rcx,%rdx,1),%r10d
sub %edi,%r10d
add %esi,%r10d
lea (%r8,%rdx,1),%r9d
cmp %esi,%edx
jg 2a <func1+0x2a>
lea 0x1(%r8),%r9d
imul %edi,%r9d
sub %ecx,%r9d
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a2 + a3 * (a5 - a1);
    v7 = (a4 + a3 - a1) + a2;
    if (a2 < a3)
    {
        v8 = a5 + a3;
    }
    else
    {
        v8 = (a5 * a1 + a1) - a4;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        if (a3 < a5)
        {
            v9 += a4 - a5 + a3;
        }
        else
        {
            v9 += a2 + a4 * a2;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 5
6 5
7 5
8 8
9 6
10 6
11 12
12 12
13 12
14 26
15 26
16 26
17 26
18 26
19 26
20 26
21 27
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%r9d
add %esi,%r9d
add %r8d,%r9d
add %ecx,%r9d
lea (%rcx,%rdx,2),%eax
sub %r8d,%eax
add %r9d,%eax
imul %edi,%esi
sub %r8d,%esi
add %esi,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a4 + a3 - a5 + a3;
    v7 = a2 * a1 - a5 + a1;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 4
7 6
8 5
9 5
10 5
11 6
12 7
<<<sep_out_sample>>>
lea (%rdx,%rdx,1),%eax
lea (%rdi,%rcx,1),%r9d
test %esi,%esi
cmovg %eax,%r9d
cmp $0x1,%edx
jle 20 <func1+0x20>
mov %r8d,%eax
imul %r8d,%eax
imul %esi,%eax
sub %ecx,%eax
jmp 2a <func1+0x2a>
mov $0x2,%eax
sub %esi,%eax
imul %edx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %r9d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (a3 < a4)
        {
            v6 += (a3 - a5) + a2;
        }
        else
        {
            v6 += a5 - a5 + a1;
        }
    }
    if (v8 < a2)
    {
        v8 = a3 + a3;
    }
    else
    {
        v8 = a1 + a4;
    }
    if (v7 < a3)
    {
        v9 = (a5 * a5 * a2) - a4;
    }
    else
    {
        v9 = a3 - a2 * a3 + a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 18
5 24
6 24
7 26
8 26
9 26
10 26
11 26
12 30
13 30
14 30
15 32
16 32
17 32
18 32
19 32
20 32
21 33
<<<sep_out_sample>>>
mov %edi,%r9d
imul %r8d,%r9d
test %edx,%edx
jle 1a <func1+0x1a>
lea (%rdi,%rdx,1),%eax
mov %ecx,%r10d
imul %r8d,%r10d
sub %r10d,%eax
jmp 25 <func1+0x25>
mov %r8d,%eax
imul %r8d,%eax
sub %ecx,%eax
sub %edx,%eax
add %r9d,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (a1 < a4)
        {
            v6 += a3 * a2 + a1;
        }
        else
        {
            v6 += a2 * a5;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += a4 * a3 - a4;
    }
    v10 = ((a5 + a3) - a3) * a1;
    if (v11 < a3)
    {
        v11 = a1 + a3 - a4 * a5;
    }
    else
    {
        v11 = a5 * a5 - a4 - a3;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 22
4 22
5 24
6 24
7 24
8 24
9 24
10 28
11 28
12 28
13 28
14 30
15 30
16 30
17 30
18 30
19 30
20 31
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a1 * a5 + a5;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        if (a1 < a2)
        {
            v8 += (a2 * a4) + a5;
        }
        else
        {
            v8 += a1 - a3;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 21
5 22
<<<sep_out_sample>>>
add %edx,%edi
add %esi,%edi
add %r8d,%edi
add %ecx,%edi
imul %esi,%edx
sub %r8d,%edx
sub %r8d,%edx
lea (%rdi,%rdx,1),%ecx
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = ((a2 * a3) - a5) - a5;
    v7 = a5 + a2;
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += a2 * a4 * a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 11
5 4
6 4
7 4
8 11
9 5
10 11
11 12
<<<sep_out_sample>>>
cmp %edx,%esi
jge 14 <func1+0x14>
mov %edi,%r9d
imul %r8d,%r9d
imul %ecx,%r9d
sub %r8d,%r9d
jmp 23 <func1+0x23>
mov %edi,%r9d
imul %esi,%r9d
add $0x1,%r9d
imul %ecx,%r9d
cmp %r8d,%edi
jge 38 <func1+0x38>
mov %edx,%r10d
sub %esi,%r10d
mov %esi,%eax
imul %ecx,%eax
add %r10d,%eax
jmp 3f <func1+0x3f>
mov %ecx,%eax
imul %ecx,%eax
neg %eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a2 < a3)
    {
        v6 = a1 * a5 * a4 - a5;
    }
    else
    {
        v6 = a4 + (a1 * a2) * a4;
    }
    if (a1 < a5)
    {
        v7 = a3 - a2 + (a2 * a4);
    }
    else
    {
        v7 = a5 - a4 * a4 - a5;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        if (v8 < a3)
        {
            v8 += a2 * a4 - a3;
        }
        else
        {
            v8 += a5 + a4;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 12
13 12
14 14
15 14
16 14
17 14
18 14
19 14
20 18
21 18
22 18
23 32
24 32
25 32
26 32
27 32
28 32
29 33
<<<sep_out_sample>>>
lea (%r8,%rcx,1),%r10d
mov %edx,%eax
imul %ecx,%eax
add %eax,%r10d
mov %esi,%eax
sub %edi,%eax
lea (%rdx,%rsi,1),%r9d
cmp %edx,%ecx
jle 26 <func1+0x26>
mov %esi,%r9d
sub %r8d,%r9d
imul %ecx,%r9d
imul %edx,%r9d
add %r9d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r10,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = (a5 + a4) + a3 * a4;
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += a1 + a1 + a2;
    }
    if (a2 < a2)
    {
        v9 = a5 + a2;
    }
    else
    {
        v9 = a2 - a1;
    }
    if (a3 < a4)
    {
        v10 = a3 * ((a2 - a5) * a4);
    }
    else
    {
        v10 = a3 + a2;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 16
6 16
7 24
8 18
9 18
10 20
11 20
12 20
13 20
14 26
15 26
16 26
17 26
18 26
19 26
20 26
21 27
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%eax
add %r8d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (v7 < a4)
        {
            v6 += a1 - a5;
        }
        else
        {
            v6 += a2 * a2 + a4;
        }
    }
    v8 = a3 + a5;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 16
6 17
7 18
<<<sep_out_sample>>>
mov %edx,%r9d
imul %esi,%r9d
sub %r8d,%r9d
add %ecx,%r9d
test %r8d,%r8d
jle 24 <func1+0x24>
mov %edi,%eax
imul %esi,%eax
mov %r8d,%r11d
sub %eax,%r11d
mov %r11d,%eax
sub %edx,%eax
jmp 2e <func1+0x2e>
mov %ecx,%eax
imul %ecx,%eax
add %esi,%eax
imul %edx,%eax
test %esi,%esi
jle 41 <func1+0x41>
mov %edi,%r10d
imul %edx,%r10d
sub %r8d,%r10d
sub %edx,%r10d
jmp 49 <func1+0x49>
lea (%rcx,%rsi,1),%r10d
imul %edi,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a4 - (a5 - a3 * a2);
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        if (a1 < a2)
        {
            v7 += a3 + a3 * a5;
        }
        else
        {
            v7 += a3 + a3 - a1;
        }
    }
    if (v9 < a5)
    {
        v9 = a5 - (a1 * a2) - a3;
    }
    else
    {
        v9 = (a2 + a4 * a4) * a3;
    }
    if (v10 < a2)
    {
        v10 = ((a1 * a3) - a5) - a3;
    }
    else
    {
        v10 = a1 * a4 + a1 * a2;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 17
6 17
7 19
8 19
9 19
10 19
11 19
12 19
13 19
14 23
15 23
16 23
17 23
18 25
19 25
20 27
21 27
22 27
23 27
24 27
25 31
26 31
27 33
28 33
29 33
30 33
31 33
32 33
33 33
34 34
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (a1 < a4)
        {
            v6 += (a2 + a5) - a5;
        }
        else
        {
            v6 += a3 + (a3 + a4);
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += a2 - a1 * a3;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a3)
    {
        v10 += a2 * a3;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 26
2 26
3 26
4 26
5 27
<<<sep_out_sample>>>
cmp %r8d,%edi
jge 12 <func1+0x12>
lea 0x1(%rcx),%r10d
imul %edi,%r10d
sub %ecx,%r10d
jmp 1e <func1+0x1e>
mov %r8d,%r10d
sub %ecx,%r10d
sub %esi,%r10d
sub %ecx,%r10d
lea (%r8,%rsi,1),%r9d
cmp %esi,%ecx
jl 30 <func1+0x30>
mov %esi,%r9d
imul %r8d,%r9d
sub %ecx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a1 < a5)
    {
        v6 = (a1 + a4 * a1) - a4;
    }
    else
    {
        v6 = a5 - a4 - a2 - a4;
    }
    if (a4 < a2)
    {
        v7 = ((a5 + a2) + a4) - a4;
    }
    else
    {
        v7 = (a2 * a5) - a4;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 10
11 14
12 12
13 12
14 18
15 18
16 18
17 20
18 20
19 20
20 20
21 20
22 20
23 21
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r8d,%edx
add %edx,%ecx
imul %esi,%ecx
lea 0x1(%rax,%rcx,1),%eax
imul %edi,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = (a4 + (a5 + a3)) * a2;
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += a5 + a4;
    }
    v9 = a1 * a2;
    v10 = 0;
    for (v11 = 0; v11++; v11<a4)
    {
        if (a2 < a2)
        {
            v10 += (a5 + a3) - a5;
        }
        else
        {
            v10 += a2 - a1 * a3;
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 23
2 23
3 23
4 23
5 4
6 4
7 4
8 23
9 10
10 23
11 24
<<<sep_out_sample>>>
mov %edx,%r9d
sub %r8d,%r9d
sub %r8d,%r9d
cmp %esi,%r8d
jge 19 <func1+0x19>
lea 0x1(%rcx),%eax
imul %ecx,%eax
imul %edi,%eax
jmp 23 <func1+0x23>
lea (%rdx,%rcx,1),%eax
imul %r8d,%eax
imul %esi,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = a3 - a5 - a5;
    if (a5 < a2)
    {
        v7 = (a4 + a4 * a4) * a1;
    }
    else
    {
        v7 = a2 * ((a3 + a4) * a5);
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += a3 - a1;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a2)
    {
        v10 += (a4 + a4) + a4;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 5
5 5
6 7
7 7
8 7
9 7
10 11
11 11
12 11
13 23
14 23
15 23
16 23
17 23
18 23
19 24
<<<sep_out_sample>>>
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
imul %ecx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a4 - a2 * a5;
    }
    v8 = (a1 - a1 + a1) * a4;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 9
6 10
7 11
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %eax,%ecx
mov %edx,%eax
imul %r8d,%eax
add %esi,%eax
add %eax,%edi
add %edi,%ecx
sub %edx,%r8d
sub %esi,%r8d
lea (%rcx,%r8,1),%eax
sub %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = ((a3 * a5) + a2) + a1;
    v7 = a4 - (a2 - (a5 - a3));
    v8 = a3 - a2 - a3 - a4;
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        if (v6 < a2)
        {
            v9 += a2 - a4 - a4;
        }
        else
        {
            v9 += a4 * a1 * a4;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 19
2 19
3 19
4 19
5 4
6 4
7 4
8 4
9 19
10 5
11 5
12 6
13 19
14 20
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a1 - a3 - a3;
    }
    if (a4 < a4)
    {
        v8 = ((a2 + a3) + a3) + a2;
    }
    else
    {
        v8 = ((a5 - a5) * a2) * a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 18
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %eax,%ecx
sub %r8d,%edi
sub %r8d,%edi
lea 0x1(%rcx,%rdi,1),%eax
add %edx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = (a1 - a5) - a5;
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += a4 - a1 * a2;
    }
    v9 = a3 + a2;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 11
5 4
6 4
7 11
8 10
9 11
10 12
<<<sep_out_sample>>>
cmp %esi,%edx
jge f <func1+0xf>
mov %esi,%r9d
neg %r9d
sub %ecx,%r9d
jmp 17 <func1+0x17>
lea 0x1(%rdx),%r9d
imul %r8d,%r9d
cmp %ecx,%esi
jge 20 <func1+0x20>
lea (%rdx,%rdx,1),%eax
jmp 2b <func1+0x2b>
mov %r8d,%eax
sub %edx,%eax
imul %ecx,%eax
imul %edi,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a3 < a2)
    {
        v6 = a1 - ((a2 + a1) + a4);
    }
    else
    {
        v6 = a3 * a5 + a5;
    }
    if (a2 < a4)
    {
        v7 = a3 + a3;
    }
    else
    {
        v7 = a4 * (a5 - a3) * a1;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += a2 + a4 + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 12
10 12
11 14
12 14
13 18
14 18
15 18
16 18
17 25
18 25
19 25
20 25
21 25
22 25
23 26
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%r9d
add %esi,%r9d
add %r8d,%r9d
lea (%rdx,%rdi,2),%r10d
add %r10d,%r9d
add $0x1,%r8d
imul %r8d,%esi
sub %edx,%esi
lea (%r9,%rsi,1),%eax
sub %ecx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a1 + a3 + a1 - a4;
    v7 = (a2 * a5) + a2 - a3;
    v8 = a1 - a4;
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        v9 += a5 * a3 - a5;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 12
2 12
3 12
4 4
5 12
6 5
7 5
8 5
9 12
10 6
11 12
12 13
<<<sep_out_sample>>>
add %edx,%edi
add %esi,%edi
add %edi,%r8d
lea 0x1(%rcx,%r8,1),%eax
sub %edx,%esi
imul %edx,%edx
add %edx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a5 + a2 + a2;
    }
    v8 = a2 - a3 + a3 * a3;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 9
6 9
7 9
8 10
9 11
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
sub %edx,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a3 * (a4 - a5);
    }
    if (a5 < a5)
    {
        v8 = a3 * a1 + a4;
    }
    else
    {
        v8 = a4 - a3;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        v9 += a4 - a4 + a1;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 22
4 22
5 15
6 22
7 23
<<<sep_out_sample>>>
mov %edi,%eax
sub %r8d,%eax
test %esi,%esi
jg 15 <func1+0x15>
mov %r8d,%eax
imul %edx,%eax
imul %r8d,%eax
add %ecx,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (v6 < a2)
    {
        v6 = a1 - a5;
    }
    else
    {
        v6 = a4 + a5 * (a5 * a3);
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += a4 - a5;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        v9 += (a2 * a4) + a2;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 6
3 4
4 4
5 10
6 10
7 10
8 10
9 22
10 22
11 22
12 22
13 22
14 23
<<<sep_out_sample>>>
add %edx,%edi
add %esi,%edi
add %edi,%r8d
lea 0x1(%rcx,%r8,1),%eax
lea (%rdx,%rcx,1),%edi
imul %edi,%edx
add %eax,%edx
mov $0x1,%eax
sub %esi,%eax
imul %eax,%ecx
sub %esi,%ecx
lea (%rdx,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a3 * (a5 * a1);
    }
    v8 = (a3 * a3) + a4 * a3;
    v9 = (a4 - a2 * a4) - a2;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 11
5 9
6 9
7 11
8 10
9 10
10 10
11 10
12 11
13 12
<<<sep_out_sample>>>
cmp %esi,%ecx
jle d <func1+0xd>
mov %edx,%r9d
imul %ecx,%r9d
jmp 1a <func1+0x1a>
mov %edi,%r9d
sub %edx,%r9d
imul %esi,%r9d
sub %ecx,%r9d
test %edi,%edi
jle 26 <func1+0x26>
mov %esi,%r10d
sub %edi,%r10d
jmp 2d <func1+0x2d>
mov %r8d,%r10d
imul %edx,%r10d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %r9d,%eax
add %r10d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (v7 < a3)
        {
            v6 += a4 - a1 - a5;
        }
        else
        {
            v6 += a2 - a2;
        }
    }
    if (a2 < a4)
    {
        v8 = a3 * a4;
    }
    else
    {
        v8 = ((a1 - a3) * a2) - a4;
    }
    if (v9 < a1)
    {
        v9 = (a5 + (a2 - a5)) - a1;
    }
    else
    {
        v9 = a5 * a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 22
7 22
8 22
9 22
10 24
11 24
12 26
13 26
14 26
15 30
16 30
17 32
18 32
19 32
20 32
21 32
22 32
23 33
<<<sep_out_sample>>>
mov %ecx,%eax
imul %edi,%eax
mov %r8d,%r10d
sub %eax,%r10d
cmp %edx,%ecx
jge 25 <func1+0x25>
mov %r8d,%r11d
imul %r8d,%r11d
mov $0x1,%r9d
sub %r11d,%r9d
imul %edi,%r9d
jmp 2c <func1+0x2c>
mov %edi,%r9d
imul %edx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a5 - (a4 * a1);
    if (a4 < a3)
    {
        v7 = a1 - a1 * (a5 * a5);
    }
    else
    {
        v7 = a1 * a3;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 5
6 5
7 7
8 7
9 7
10 7
11 7
12 7
13 11
14 11
15 13
16 13
17 13
18 13
19 13
20 13
21 14
<<<sep_out_sample>>>
lea 0x1(%rdx),%r9d
imul %edi,%r9d
sub %r8d,%r9d
mov %r8d,%eax
cmp %ecx,%edx
jge 1b <func1+0x1b>
mov %esi,%eax
sub %edx,%eax
add %esi,%eax
imul %edx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = (a1 + a3 * a1) - a5;
    if (a3 < a4)
    {
        v7 = a3 * (a2 + (a2 - a3));
    }
    else
    {
        v7 = a2 + (a5 - a2);
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 11
5 5
6 5
7 7
8 7
9 7
10 7
11 13
12 13
13 13
14 13
15 13
16 13
17 14
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
add %esi,%ecx
imul %edx,%r8d
add %r8d,%edi
sub %edx,%edi
lea 0x1(%rcx,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a1 + a3 * a5 - a3;
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        if (a1 < a3)
        {
            v7 += (a2 * a1) * a4;
        }
        else
        {
            v7 += a5 + a3 - a2;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 4
6 4
7 4
8 17
9 18
<<<sep_out_sample>>>
lea (%r8,%rdi,1),%eax
cmp %esi,%edx
jge 12 <func1+0x12>
lea (%r8,%r8,1),%eax
imul %edi,%eax
imul %esi,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a3 < a2)
    {
        v6 = a1 * (a5 + a5) * a2;
    }
    else
    {
        v6 = a5 + a1;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a4 + a1;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        if (a4 < a3)
        {
            v9 += a4 + a2;
        }
        else
        {
            v9 += a4 * a2 + a3;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 6
7 29
8 29
9 29
10 29
11 29
12 30
<<<sep_out_sample>>>
lea (%rcx,%rdi,1),%r10d
mov %esi,%eax
imul %r8d,%eax
add %eax,%r10d
test %edx,%edx
jle 17 <func1+0x17>
lea (%r8,%r8,1),%r9d
jmp 25 <func1+0x25>
mov %esi,%r9d
sub %edi,%r9d
imul %ecx,%r9d
imul %edi,%r9d
test %edx,%edx
jle 34 <func1+0x34>
mov %ecx,%eax
sub %r8d,%eax
add %esi,%eax
sub %edi,%eax
jmp 3a <func1+0x3a>
mov %edx,%eax
imul %r8d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r10d,%ecx
add %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a4 < a4)
    {
        v6 = a4 - (a5 - a2 + a5);
    }
    else
    {
        v6 = (a4 + a1) + (a2 * a5);
    }
    if (v7 < a3)
    {
        v7 = a5 + a5;
    }
    else
    {
        v7 = ((a2 - a1) * a4) * a1;
    }
    if (v8 < a3)
    {
        v8 = (a4 - a5) + a2 - a1;
    }
    else
    {
        v8 = a5 + (a5 * a3) - a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 12
6 12
7 14
8 14
9 18
10 18
11 18
12 18
13 20
14 20
15 22
16 22
17 22
18 22
19 22
20 26
21 26
22 28
23 28
24 28
25 28
26 28
27 28
28 28
29 29
<<<sep_out_sample>>>
mov %edi,%r9d
imul %ecx,%r9d
mov %r9d,%eax
imul %edi,%eax
sub %r8d,%eax
add %edi,%r9d
cmp %eax,%edi
jg 1e <func1+0x1e>
mov %esi,%r9d
imul %esi,%r9d
add %edx,%edi
add %edi,%esi
add %r8d,%esi
add %esi,%ecx
add %ecx,%eax
add %r9d,%eax
imul %edx,%r8d
imul %edx,%r8d
imul %r8d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a1 * (a1 * a4) - a5;
    if (v6 < a1)
    {
        v7 = a1 + a4 * a1;
    }
    else
    {
        v7 = a2 * a2;
    }
    v8 = a3 * (a5 * a3) * a3;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 4
6 7
7 5
8 5
9 11
10 11
11 14
12 14
13 14
14 14
15 14
16 14
17 13
18 13
19 13
20 14
21 15
<<<sep_out_sample>>>
cmp %edx,%esi
jge 16 <func1+0x16>
mov %edx,%eax
imul %edi,%eax
mov %ecx,%r9d
sub %eax,%r9d
mov %r9d,%eax
sub %edx,%eax
jmp 1e <func1+0x1e>
lea (%rsi,%rsi,1),%eax
imul %edi,%eax
sub %esi,%eax
add %edi,%edx
add %edx,%esi
add %r8d,%esi
add %esi,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a2 < a3)
    {
        v6 = a4 - (a3 * a1) - a3;
    }
    else
    {
        v6 = (a2 + a2) * a1 - a2;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += (a2 - a2) - a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 6
9 6
10 10
11 10
12 10
13 17
14 17
15 17
16 17
17 17
18 18
<<<sep_out_sample>>>
cmp %edx,%edi
jge e <func1+0xe>
lea (%rcx,%rdi,1),%r9d
imul %edi,%r9d
jmp 1b <func1+0x1b>
mov %esi,%r9d
sub %ecx,%r9d
sub %edi,%r9d
imul %edi,%r9d
mov %edi,%eax
sub %esi,%eax
cmp %ecx,%edx
jle 34 <func1+0x34>
mov %ecx,%eax
imul %edi,%eax
imul %edx,%eax
mov %edi,%r10d
sub %eax,%r10d
mov %r10d,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %r8d,%esi
add %esi,%ecx
add %r9d,%ecx
add %ecx,%eax
lea (%rax,%rdi,2),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a1 < a3)
    {
        v6 = a1 * (a4 + a1);
    }
    else
    {
        v6 = (a2 - a4 - a1) * a1;
    }
    if (a4 < a3)
    {
        v7 = a1 - a3 * (a4 * a1);
    }
    else
    {
        v7 = a1 - a2;
    }
    v8 = a1 + a2 - a2 + a1;
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        v9 += a5 * a4 + a3;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 10
10 18
11 18
12 12
13 12
14 14
15 14
16 14
17 14
18 14
19 14
20 26
21 26
22 26
23 26
24 26
25 26
26 26
27 27
<<<sep_out_sample>>>
mov %edi,%r11d
imul %ecx,%r11d
imul %ecx,%r11d
imul %ecx,%r11d
lea (%r8,%r8,1),%r10d
sub %edi,%r10d
add %esi,%r10d
mov %ecx,%r9d
sub %esi,%r9d
cmp %esi,%r8d
jl 2f <func1+0x2f>
lea -0x1(%rsi),%r9d
imul %edx,%r9d
add %r8d,%r9d
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a2 < a2)
    {
        v6 = a1 - (a2 + (a5 + a1));
    }
    else
    {
        v6 = (a1 * a4) * a4 * a4;
    }
    v7 = a5 + a5 - a1 + a2;
    if (a5 < a2)
    {
        v8 = a4 - a2;
    }
    else
    {
        v8 = a3 * a2 - a3 + a5;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a1)
    {
        v9 += (a3 + a2) + a4;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 12
6 12
7 12
8 15
9 15
10 13
11 13
12 19
13 19
14 19
15 26
16 26
17 26
18 26
19 26
20 26
21 26
22 27
<<<sep_out_sample>>>
sub %edx,%esi
test %r8d,%r8d
jle 12 <func1+0x12>
mov %edx,%eax
imul %ecx,%eax
mov %edi,%esi
sub %eax,%esi
add %edx,%esi
mov %edx,%eax
imul %r8d,%eax
add %edi,%eax
add %eax,%r8d
add %r8d,%ecx
add %ecx,%esi
add %edi,%edx
sub %edx,%esi
lea 0x1(%rsi),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (v6 < a5)
    {
        v6 = a3 - (a3 * a4 - a1);
    }
    else
    {
        v6 = a2 - a3;
    }
    v7 = a2 - (a1 + a3) - a2;
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        if (a2 < a4)
        {
            v8 += a5 + a2;
        }
        else
        {
            v8 += a5 * a5 + a3;
        }
    }
    v10 = ((a3 * a5) - a2) - a3;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 6
7 6
8 6
9 25
10 25
11 26
12 26
13 26
14 26
15 12
16 26
17 26
18 27
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
lea (%r8,%rcx,1),%eax
mov $0x1,%r8d
sub %esi,%r8d
imul %edi,%r8d
add %r8d,%esi
lea 0x1(%rax,%rsi,1),%eax
imul %ecx,%edi
add %edi,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a1 - (a1 * a2) + a2;
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += a4 * (a2 * a2);
    }
    v9 = a3 + (a1 * a4);
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 11
5 4
6 4
7 4
8 4
9 11
10 10
11 10
12 11
13 12
<<<sep_out_sample>>>
test %r8d,%r8d
jle e <func1+0xe>
mov %esi,%r10d
imul %r8d,%r10d
jmp 17 <func1+0x17>
mov %edx,%eax
imul %edi,%eax
lea (%rax,%rcx,2),%r10d
mov %r8d,%eax
sub %esi,%eax
cmp %edx,%r8d
jge 2f <func1+0x2f>
mov $0x1,%eax
sub %ecx,%eax
imul %esi,%eax
imul %r8d,%eax
mov %r8d,%r9d
sub %ecx,%r9d
test %ecx,%ecx
jle 47 <func1+0x47>
mov %esi,%r9d
imul %edx,%r9d
lea (%rdx,%rsi,1),%r11d
sub %r11d,%r9d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r10d,%ecx
add %ecx,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (v6 < a5)
    {
        v6 = (a2 * a5 - a3) + a3;
    }
    else
    {
        v6 = a3 * a1 + a4 + a4;
    }
    if (a5 < a3)
    {
        v7 = (a2 - a2 * a4) * a5;
    }
    else
    {
        v7 = a5 - a2;
    }
    if (v8 < a4)
    {
        v8 = a2 * a3 - (a3 + a2);
    }
    else
    {
        v8 = a5 - a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 18
10 18
11 12
12 12
13 14
14 14
15 14
16 14
17 26
18 26
19 20
20 20
21 22
22 22
23 22
24 22
25 28
26 28
27 28
28 28
29 28
30 28
31 28
32 29
<<<sep_out_sample>>>
cmp %ecx,%r8d
jge e <func1+0xe>
mov %r8d,%r9d
imul %ecx,%r9d
jmp 1c <func1+0x1c>
mov %r8d,%r9d
imul %esi,%r9d
imul %esi,%r9d
add %r8d,%r9d
cmp %esi,%r8d
jle 29 <func1+0x29>
mov %r8d,%eax
imul %edi,%eax
jmp 30 <func1+0x30>
lea (%rcx,%rdi,2),%eax
lea (%rax,%r8,1),%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %r8d,%esi
add %esi,%ecx
add %r9d,%ecx
add %eax,%ecx
lea (%rcx,%r8,2),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a5 < a4)
    {
        v6 = a5 * a4;
    }
    else
    {
        v6 = a5 * a2 * a2 + a5;
    }
    if (a2 < a5)
    {
        v7 = a5 * a1;
    }
    else
    {
        v7 = a4 + (a1 + a5) + a1;
    }
    v8 = a5 + a5;
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        v9 += a5 * a3;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 10
10 12
11 12
12 14
13 14
14 14
15 18
16 18
17 26
18 26
19 26
20 26
21 26
22 26
23 26
24 27
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
imul %edx,%r8d
lea (%rax,%r8,1),%edx
add $0x1,%edi
imul %edi,%ecx
sub %esi,%ecx
lea (%rdx,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a5 < a5)
    {
        v6 = a3 + a1 * a2 + a5;
    }
    else
    {
        v6 = a5 - a5 + a3 * a5;
    }
    v7 = a4 + (a1 * a4) - a2;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 13
2 13
3 13
4 13
5 10
6 13
7 12
8 12
9 12
10 13
11 14
<<<sep_out_sample>>>
mov %edx,%r11d
imul %r8d,%r11d
add $0x1,%r11d
imul %edx,%r11d
mov %ecx,%r9d
imul %ecx,%r9d
mov %r9d,%eax
neg %eax
cmp %edi,%eax
jge 28 <func1+0x28>
mov %edx,%r10d
imul %esi,%r10d
jmp 37 <func1+0x37>
mov %edi,%r10d
imul %ecx,%r10d
mov %esi,%eax
imul %esi,%eax
add %eax,%r10d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
sub %r9d,%eax
add %r10d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a3 < a3)
    {
        v6 = a5 * a3;
    }
    else
    {
        v6 = a3 * a5 * a3 + a3;
    }
    v7 = a1 - a1 - a4 * a4;
    if (v7 < a1)
    {
        v8 = a3 * a2;
    }
    else
    {
        v8 = (a1 * a4) + (a2 * a2);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 12
6 12
7 12
8 12
9 13
10 13
11 15
12 15
13 15
14 19
15 19
16 19
17 19
18 19
19 21
20 21
21 21
22 21
23 21
24 21
25 21
26 22
<<<sep_out_sample>>>
cmp %edx,%esi
jge 11 <func1+0x11>
lea (%r8,%rcx,1),%r9d
imul %esi,%r9d
sub %ecx,%r9d
jmp 1c <func1+0x1c>
lea 0x1(%rdx),%r9d
imul %esi,%r9d
add %r8d,%r9d
cmp %ecx,%esi
jle 28 <func1+0x28>
lea (%rsi,%rdx,1),%eax
imul %edx,%eax
jmp 32 <func1+0x32>
mov %edi,%eax
imul %edx,%eax
imul %edi,%eax
sub %edx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a2 < a3)
    {
        v6 = (a5 + a4) * a2 - a4;
    }
    else
    {
        v6 = ((a2 * a3) + a2) + a5;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        if (a2 < a5)
        {
            v7 += a1 * a5 + a2;
        }
        else
        {
            v7 += a4 * a2 - a2;
        }
    }
    if (a4 < a2)
    {
        v9 = a2 * a3 + a3 * a3;
    }
    else
    {
        v9 = a1 * a3 * a1 - a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 24
11 24
12 26
13 26
14 26
15 30
16 30
17 30
18 30
19 32
20 32
21 32
22 32
23 32
24 32
25 33
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
imul %edx,%r8d
add %edi,%r8d
mov %esi,%r9d
sub %r8d,%r9d
add %r9d,%eax
sub %ecx,%esi
imul %edi,%esi
add %edx,%esi
add %esi,%eax
sub %edi,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a1 < a1)
    {
        v6 = (a4 - a4) + a2 - a4;
    }
    else
    {
        v6 = a2 - (a1 + (a3 * a5));
    }
    v7 = a3 - ((a4 - a2) * a1);
    v8 = a3 - a1;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 14
2 14
3 14
4 14
5 10
6 10
7 10
8 10
9 14
10 12
11 12
12 12
13 14
14 13
15 14
16 15
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
mov %esi,%ecx
imul %r8d,%ecx
add %edx,%ecx
add %ecx,%eax
add %edi,%esi
add %esi,%r8d
add %r8d,%edx
lea 0x1(%rax,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = (a2 * a5) + a3 - a4;
    v7 = (a1 + a2) + a5 + a3;
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        if (v9 < a1)
        {
            v8 += (a3 + a2) - a4;
        }
        else
        {
            v8 += a5 * (a2 * a4);
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 4
5 4
6 4
7 18
8 5
9 5
10 5
11 18
12 19
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %eax,%ecx
sub %edi,%esi
imul %esi,%r8d
sub %edi,%r8d
lea 0x1(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = ((a2 - a1) * a5) - a1;
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        if (a4 < a1)
        {
            v7 += (a3 + a4) * a2;
        }
        else
        {
            v7 += (a2 - a4) - a3;
        }
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a1)
    {
        v9 += a4 * a5;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 22
4 22
5 4
6 4
7 4
8 22
9 23
<<<sep_out_sample>>>
cmp %esi,%r8d
jge 15 <func1+0x15>
mov %edx,%r9d
sub %esi,%r9d
mov %esi,%eax
imul %edx,%eax
add %eax,%r9d
jmp 23 <func1+0x23>
mov %r8d,%eax
imul %ecx,%eax
add %esi,%eax
mov %r8d,%r9d
sub %eax,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
add %edx,%edx
sub %ecx,%edx
imul %ecx,%edx
add %eax,%edx
imul %r8d,%r8d
add %esi,%ecx
sub %ecx,%r8d
lea (%rdx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a5 < a2)
    {
        v6 = a3 - a2 + (a2 * a3);
    }
    else
    {
        v6 = a5 - (a5 * a4 + a2);
    }
    v7 = a4 * (a3 + a3 - a4);
    v8 = a5 * a5 - (a2 + a4);
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 6
9 10
10 10
11 10
12 10
13 10
14 14
15 14
16 14
17 14
18 14
19 12
20 12
21 12
22 14
23 13
24 13
25 13
26 14
27 15
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a5 + a4 - a3;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        if (v6 < a5)
        {
            v8 += a5 - a1 + a1;
        }
        else
        {
            v8 += a4 * a5 - a2;
        }
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a2)
    {
        v10 += a3 * a5 + a1;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 26
2 26
3 26
4 26
5 27
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
lea (%r8,%rcx,1),%eax
mov %esi,%ecx
imul %esi,%ecx
imul %ecx,%edi
add %edi,%eax
imul %edx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a1 * (a2 * a2);
    v7 = a3 * a2;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 4
7 4
8 6
9 5
10 6
11 7
<<<sep_out_sample>>>
mov $0x1,%r11d
sub %edx,%r11d
imul %esi,%r11d
imul %edi,%r11d
cmp %esi,%edx
jle 1d <func1+0x1d>
mov %ecx,%r10d
sub %r8d,%r10d
jmp 2c <func1+0x2c>
mov %ecx,%r10d
sub %edi,%r10d
mov %r8d,%eax
imul %esi,%eax
add %eax,%r10d
lea (%rdi,%r8,1),%r9d
test %ecx,%ecx
jg 40 <func1+0x40>
mov %edi,%r9d
sub %ecx,%r9d
sub %edx,%r9d
add %edi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
sub %r8d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = (a2 - a3 * a2) * a1;
    if (a2 < a3)
    {
        v7 = (a5 - (a5 + a5)) + a4;
    }
    else
    {
        v7 = a4 - a1 + a5 * a2;
    }
    if (v8 < a4)
    {
        v8 = a1 + a5;
    }
    else
    {
        v8 = (a1 - a4) - a3 + a1;
    }
    v9 = a4 - a5;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 5
6 5
7 7
8 7
9 7
10 11
11 11
12 11
13 11
14 11
15 15
16 13
17 13
18 19
19 19
20 19
21 19
22 22
23 22
24 22
25 22
26 22
27 22
28 22
29 21
30 22
31 23
<<<sep_out_sample>>>
mov %esi,%eax
imul %r8d,%eax
lea (%rdi,%rdx,1),%ecx
add %esi,%ecx
add %r8d,%ecx
mov %esi,%r9d
sub %edi,%r9d
add %r9d,%esi
add %ecx,%esi
add %esi,%eax
sub %r8d,%edx
imul %edi,%edx
imul %edx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a2 - a1 + a2 - a4;
    v7 = a2 * a5 - a3 + a3;
    v8 = (a3 - a5) * a1 * a1;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 5
2 5
3 7
4 7
5 7
6 4
7 4
8 4
9 7
10 7
11 6
12 6
13 6
14 7
15 8
<<<sep_out_sample>>>
mov %r8d,%r9d
sub %esi,%r9d
imul %edx,%r9d
add %esi,%r9d
cmp %edi,%ecx
jge 25 <func1+0x25>
mov %ecx,%eax
imul %r8d,%eax
imul %esi,%eax
mov %r8d,%r10d
sub %eax,%r10d
mov %r10d,%eax
jmp 32 <func1+0x32>
mov $0x1,%eax
sub %edx,%eax
imul %r8d,%eax
add %edx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a1 < a1)
    {
        v6 = ((a1 - a1) - a2) + a2;
    }
    else
    {
        v6 = a2 + (a5 - a2) * a3;
    }
    if (a4 < a1)
    {
        v7 = a5 - (a4 * a5 * a2);
    }
    else
    {
        v7 = a3 + (a5 - a5 * a3);
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        if (a4 < a4)
        {
            v8 += (a5 + a1) - a5;
        }
        else
        {
            v8 += (a3 + a3) - a2;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 12
6 12
7 14
8 14
9 14
10 14
11 14
12 14
13 14
14 18
15 18
16 18
17 18
18 32
19 32
20 32
21 32
22 32
23 32
24 33
<<<sep_out_sample>>>
cmp %ecx,%edi
jle d <func1+0xd>
mov %esi,%r10d
imul %r8d,%r10d
jmp 1d <func1+0x1d>
mov $0x1,%r10d
sub %ecx,%r10d
imul %esi,%r10d
add %ecx,%r10d
cmp %edx,%ecx
jge 2a <func1+0x2a>
mov %edi,%r9d
imul %ecx,%r9d
jmp 37 <func1+0x37>
mov $0x1,%r9d
sub %edi,%r9d
imul %esi,%r9d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a2 + a1;
    }
    if (a4 < a1)
    {
        v8 = a2 * a5;
    }
    else
    {
        v8 = (a2 - a2 * a4) + a4;
    }
    if (a4 < a3)
    {
        v9 = a1 * a4;
    }
    else
    {
        v9 = a2 - a1 * a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 15
7 15
8 15
9 15
10 17
11 17
12 19
13 19
14 19
15 23
16 23
17 23
18 25
19 25
20 25
21 25
22 25
23 25
24 26
<<<sep_out_sample>>>
mov %edx,%r9d
sub %r8d,%r9d
mov $0x0,%eax
lea (%rdi,%rdi,1),%r10d
cmp %ecx,%edx
cmovg %r10d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a3 - a3 - a5 + a3;
    if (a4 < a3)
    {
        v7 = a3 + ((a1 - a3) + a1);
    }
    else
    {
        v7 = a1 - a1;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 11
4 7
5 7
6 7
7 13
8 13
9 13
10 13
11 13
12 13
13 14
<<<sep_out_sample>>>
mov %esi,%r10d
imul %ecx,%r10d
cmp %r8d,%esi
jle 1b <func1+0x1b>
mov %esi,%r9d
imul %esi,%r9d
sub %r8d,%r9d
sub %ecx,%r9d
jmp 29 <func1+0x29>
mov %edi,%r9d
sub %edx,%r9d
imul %edx,%r9d
imul %edi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = (a2 - a5 + a5) * a4;
    if (a5 < a2)
    {
        v7 = a2 * a2 - a5 - a4;
    }
    else
    {
        v7 = (a3 * (a1 - a3)) * a1;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 5
4 5
5 7
6 7
7 7
8 7
9 7
10 11
11 11
12 11
13 11
14 13
15 13
16 13
17 13
18 13
19 13
20 14
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %r8d,%edx
add %ecx,%edx
imul %edi,%esi
add %ecx,%esi
sub %edi,%esi
lea 0x1(%rdx,%rsi,1),%eax
imul %edi,%ecx
add %ecx,%r8d
add %r8d,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = (a4 + a1 * a2) - a1;
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        if (v6 < a3)
        {
            v7 += a5 - a5 * a2;
        }
        else
        {
            v7 += a1 * a2 + a3;
        }
    }
    v9 = (a5 + a1 * a4) + a1;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 18
5 4
6 4
7 4
8 18
9 17
10 17
11 17
12 18
13 19
<<<sep_out_sample>>>
cmp $0x1,%edx
jle 13 <func1+0x13>
mov %esi,%eax
imul %ecx,%eax
imul %r8d,%eax
imul %edx,%eax
jmp 1a <func1+0x1a>
lea (%rsi,%rdx,1),%eax
sub %edi,%eax
add %esi,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a3 - a2;
    }
    if (v7 < a3)
    {
        v8 = ((a2 * a4) * a5) * a3;
    }
    else
    {
        v8 = ((a2 + a3) - a1) + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 11
8 15
9 15
10 15
11 17
12 17
13 17
14 17
15 17
16 18
<<<sep_out_sample>>>
add %edx,%edi
lea (%r8,%rsi,2),%eax
lea (%rax,%rdi,1),%edx
imul %ecx,%ecx
lea (%rcx,%rsi,2),%eax
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a1 < a1)
    {
        v6 = (a5 - a4) * a1 - a1;
    }
    else
    {
        v6 = a3 + a2 - a4 - a3;
    }
    if (a2 < a2)
    {
        v7 = a5 + a4 * (a4 * a5);
    }
    else
    {
        v7 = (a2 + a2) + a4 * a4;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 20
2 20
3 20
4 18
5 18
6 20
7 21
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (a3 < a1)
        {
            v6 += (a2 + a5) + a4;
        }
        else
        {
            v6 += a4 * a3 - a3;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += a3 - (a3 * a4);
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a5)
    {
        if (a4 < a1)
        {
            v10 += a3 * a4 - a2;
        }
        else
        {
            v10 += a5 * a4;
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 33
2 33
3 33
4 33
5 34
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
imul %esi,%edi
add %edi,%eax
add %r8d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a2 < a2)
    {
        v6 = a5 - a5;
    }
    else
    {
        v6 = a2 * a1;
    }
    v7 = a4 + a5;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 13
2 13
3 13
4 13
5 10
6 13
7 12
8 13
9 14
<<<sep_out_sample>>>
cmp %edx,%esi
jge e <func1+0xe>
mov %edi,%eax
sub %ecx,%eax
imul %r8d,%eax
jmp 17 <func1+0x17>
mov %ecx,%eax
sub %esi,%eax
add %edi,%eax
imul %esi,%eax
lea (%rdi,%rdx,1),%r9d
add %r9d,%esi
add %r8d,%esi
add %esi,%ecx
lea 0x1(%rax,%rcx,1),%eax
mov %edi,%ecx
sub %r8d,%ecx
sub %edx,%ecx
imul %ecx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a2 < a3)
    {
        v6 = (a5 * a1) - (a4 * a5);
    }
    else
    {
        v6 = ((a4 - a2) + a1) * a2;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += (a1 - a1) + a2;
    }
    v9 = a1 * (a1 - a5 - a3);
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 10
11 18
12 18
13 18
14 18
15 18
16 17
17 17
18 17
19 17
20 18
21 19
<<<sep_out_sample>>>
cmp %ecx,%edi
jge 12 <func1+0x12>
mov %r8d,%eax
imul %edi,%eax
sub %ecx,%eax
imul %r8d,%eax
jmp 1b <func1+0x1b>
mov %edx,%eax
imul %edx,%eax
sub %esi,%eax
add %edx,%eax
add %edi,%edx
add %edx,%esi
add %r8d,%esi
add %ecx,%esi
lea 0x1(%rax,%rsi,1),%edx
lea (%rdi,%r8,2),%eax
lea (%rax,%rcx,1),%eax
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a1 < a4)
    {
        v6 = ((a5 * a1) - a4) * a5;
    }
    else
    {
        v6 = (a3 * a3 - a2) + a3;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += (a1 * a2) + a3;
    }
    v9 = a5 + (a1 + a5 + a4);
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 18
13 18
14 18
15 18
16 18
17 17
18 17
19 18
20 19
<<<sep_out_sample>>>
lea (%rdi,%rdi,2),%eax
add %eax,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += (a2 + a4) - a3;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        if (a4 < a1)
        {
            v8 += a2 * a1 * a1;
        }
        else
        {
            v8 += a3 + a1 * a2;
        }
    }
    v10 = a1 + a1;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 22
4 22
5 22
6 23
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (a4 < a1)
        {
            v6 += (a1 * a4) - a5;
        }
        else
        {
            v6 += (a4 * a1) * a4;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += (a5 * a4) * a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 21
5 22
<<<sep_out_sample>>>
mov $0x1,%eax
sub %r8d,%eax
imul %esi,%eax
add %r8d,%eax
cmp %eax,%esi
jle 1e <func1+0x1e>
lea (%rcx,%rsi,1),%r9d
sub %edi,%r9d
add %esi,%r9d
jmp 28 <func1+0x28>
mov %r8d,%r9d
imul %edx,%r9d
add %ecx,%r9d
lea 0x1(%r9,%rdi,1),%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a3 - a4 + a1;
    }
    if (a4 < a4)
    {
        v8 = a3 + a4;
    }
    else
    {
        v8 = a2 - a2 * a5 + a5;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        if (a5 < a3)
        {
            v9 += a4 + a5 - a2;
        }
        else
        {
            v9 += (a2 + a2) - a3;
        }
    }
    if (v8 < a2)
    {
        v11 = a4 + a2 - a1 + a2;
    }
    else
    {
        v11 = a4 + a5 * a3;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 15
2 15
3 15
4 15
5 29
6 29
7 31
8 31
9 31
10 31
11 35
12 35
13 35
14 37
15 37
16 37
17 37
18 37
19 37
20 38
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += (a1 - a2) * a1;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += a3 + a5 * a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 14
2 14
3 14
4 14
5 15
<<<sep_out_sample>>>
cmp $0x1,%edx
jle 13 <func1+0x13>
lea -0x1(%rdx),%r9d
imul %r8d,%r9d
imul %esi,%r9d
jmp 1e <func1+0x1e>
mov %edx,%r9d
imul %esi,%r9d
imul %r8d,%r9d
cmp $0x1,%r8d
jle 31 <func1+0x31>
mov %esi,%eax
imul %r8d,%eax
sub %edx,%eax
imul %edi,%eax
jmp 39 <func1+0x39>
lea (%r8,%rcx,1),%eax
sub %edx,%eax
sub %edi,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %r9d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (v7 < a1)
        {
            v6 += (a1 - a4) - a3;
        }
        else
        {
            v6 += a1 - a1 + a2;
        }
    }
    if (v7 < a3)
    {
        v8 = a2 * (a5 * a3 - a5);
    }
    else
    {
        v8 = a5 * (a3 * a2);
    }
    if (v7 < a5)
    {
        v9 = ((a2 * a5) - a3) * a1;
    }
    else
    {
        v9 = (a5 + a4) - a3 - a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 18
7 22
8 22
9 22
10 24
11 24
12 26
13 26
14 26
15 26
16 26
17 30
18 30
19 30
20 32
21 32
22 32
23 32
24 32
25 32
26 33
<<<sep_out_sample>>>
mov %r8d,%eax
imul %esi,%eax
lea (%rax,%rdi,2),%eax
test %ecx,%ecx
jle 1b <func1+0x1b>
lea (%rdx,%rsi,1),%r9d
imul %ecx,%r9d
imul %esi,%r9d
jmp 29 <func1+0x29>
lea (%rcx,%rcx,1),%r9d
mov %ecx,%r10d
imul %esi,%r10d
sub %r10d,%r9d
lea 0x1(%r9,%rdi,1),%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += (a3 + a2) + a4;
    }
    v8 = a1 + a5 * a2 + a1;
    v9 = 0;
    for (v10 = 0; v10++; v10<a1)
    {
        v9 += a4 - (a1 + a1);
    }
    if (v6 < a4)
    {
        v11 = (a3 + a2) * a4 * a2;
    }
    else
    {
        v11 = a4 + a4 - a4 * a2;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 9
4 15
5 15
6 17
7 17
8 17
9 17
10 21
11 21
12 21
13 21
14 23
15 23
16 23
17 23
18 23
19 23
20 24
<<<sep_out_sample>>>
mov %r8d,%r9d
sub %esi,%r9d
imul %esi,%r9d
add %ecx,%edi
test %r8d,%r8d
mov $0x0,%eax
cmovg %eax,%edi
mov %ecx,%eax
imul %ecx,%eax
add %eax,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%eax
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a4 < a4)
    {
        v6 = (a2 + a3) * (a4 * a3);
    }
    else
    {
        v6 = a2 * a5 - (a2 * a2);
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += a1 + a2;
    }
    if (v7 < a5)
    {
        v9 = a3 - a3;
    }
    else
    {
        v9 = a4 - (a4 - a1) + a4;
    }
    v10 = a4 * a4 - a1;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 23
5 23
6 23
7 23
8 25
9 25
10 26
11 26
12 26
13 26
14 26
15 26
16 27
<<<sep_out_sample>>>
mov %esi,%eax
imul %edx,%eax
add %ecx,%eax
imul %edi,%eax
add %edi,%eax
add %eax,%edx
add %edx,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%eax
mov %edi,%edx
imul %ecx,%edx
add %r8d,%edx
imul %edi,%edx
add %eax,%edx
lea (%r8,%rcx,2),%eax
sub %edi,%eax
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a3 * a4 + a5;
    }
    v8 = (a5 + (a1 * a4)) * a1;
    v9 = (a4 + a5) + a4 - a1;
    v10 = a1 * (a4 + a2 * a3);
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 11
5 12
6 12
7 12
8 12
9 12
10 9
11 9
12 9
13 9
14 12
15 10
16 10
17 12
18 13
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
add %r8d,%ecx
add %edx,%edi
lea 0x1(%rcx,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = ((a2 - a2) + a1) + a3;
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += a5 - (a4 - a4);
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        v9 += a3 * a2 - a1;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 15
2 15
3 15
4 15
5 4
6 15
7 16
<<<sep_out_sample>>>
lea (%rsi,%r8,1),%eax
test %r8d,%r8d
jle 11 <func1+0x11>
mov %edi,%eax
imul %ecx,%eax
lea (%rax,%rsi,2),%eax
lea (%rcx,%rsi,1),%r9d
add %edi,%r9d
add %edx,%r9d
add %r9d,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += (a4 * a2) + a1;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += (a5 - a4) - a3;
    }
    if (v10 < a5)
    {
        v10 = ((a1 * a4) + a2) + a2;
    }
    else
    {
        v10 = (a4 + a2) - a4 + a5;
    }
    v11 = (a4 + a2 + a1) + a3;
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 20
2 14
3 14
4 16
5 16
6 16
7 22
8 22
9 22
10 23
11 23
12 23
13 23
14 23
15 23
16 24
<<<sep_out_sample>>>
mov %edi,%r9d
sub %esi,%r9d
mov %edx,%eax
sub %ecx,%eax
cmp %r8d,%edx
jle 18 <func1+0x18>
mov %r8d,%eax
sub %edx,%eax
sub %esi,%eax
add %edi,%eax
lea (%rdx,%rdi,1),%r10d
mov %r8d,%r11d
sub %esi,%r11d
test %esi,%esi
cmovle %r11d,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a1 - ((a2 + a3) - a3);
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += (a3 - a5) - a2;
    }
    if (a5 < a3)
    {
        v9 = (a5 - a3) - a2 + a1;
    }
    else
    {
        v9 = a3 - a4;
    }
    if (v7 < a2)
    {
        v10 = a3 - a4 + a4 + a1;
    }
    else
    {
        v10 = a5 - a2;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 16
4 16
5 10
6 10
7 12
8 12
9 12
10 12
11 20
12 20
13 20
14 20
15 20
16 26
17 26
18 26
19 26
20 26
21 26
22 26
23 27
<<<sep_out_sample>>>
push %rbx
mov %ecx,%ebx
imul %edx,%ebx
mov $0x0,%r9d
cmp %edi,%r8d
jge 1a <func1+0x1a>
mov %esi,%eax
imul %ecx,%eax
lea (%rax,%rdx,2),%r9d
cmp %edi,%r9d
jge 2a <func1+0x2a>
mov %ecx,%r11d
sub %esi,%r11d
add %ecx,%r11d
jmp 35 <func1+0x35>
lea (%rcx,%rdx,1),%r11d
imul %edi,%r11d
sub %esi,%r11d
cmp %esi,%edi
jle 49 <func1+0x49>
mov %edi,%r10d
imul %edi,%r10d
add %esi,%r10d
imul %edi,%r10d
jmp 57 <func1+0x57>
mov %edi,%r10d
imul %ecx,%r10d
imul %r8d,%r10d
add %ecx,%r10d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %ebx,%eax
add %r9d,%eax
add %r11d,%eax
add %r10d,%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a4 * a3;
    if (a5 < a1)
    {
        v7 = (a3 + a3) + a2 * a4;
    }
    else
    {
        v7 = a5 - a5;
    }
    if (v7 < a1)
    {
        v8 = a4 - a2 + a4;
    }
    else
    {
        v8 = ((a4 + a3) * a1) - a2;
    }
    if (a2 < a1)
    {
        v9 = (a1 * a1 + a2) * a1;
    }
    else
    {
        v9 = ((a1 * a4) * a5) + a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 4
3 4
4 11
5 5
6 5
7 7
8 7
9 7
10 13
11 13
12 15
13 15
14 15
15 15
16 19
17 19
18 19
19 21
20 21
21 23
22 23
23 23
24 23
25 23
26 27
27 27
28 27
29 27
30 29
31 29
32 29
33 29
34 29
35 29
36 29
37 29
38 30
39 30
<<<sep_out_sample>>>
mov %edi,%r9d
imul %esi,%r9d
sub %ecx,%r9d
sub %r8d,%r9d
cmp %r9d,%ecx
jle 1a <func1+0x1a>
lea (%r8,%rcx,2),%eax
sub %esi,%eax
jmp 25 <func1+0x25>
mov %edx,%eax
imul %edx,%eax
imul %r8d,%eax
sub %esi,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%r9d
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (a4 < a5)
        {
            v6 += (a3 + a1) * a4;
        }
        else
        {
            v6 += a2 * a1 - a4;
        }
    }
    v8 = (a1 * a2) - a4 - a5;
    if (v8 < a4)
    {
        v9 = (a5 + a4 + a4) - a2;
    }
    else
    {
        v9 = a3 * a3 * a5 - a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 16
4 16
5 17
6 17
7 19
8 19
9 19
10 23
11 23
12 23
13 23
14 25
15 25
16 25
17 25
18 25
19 25
20 26
<<<sep_out_sample>>>
lea (%r8,%rdi,1),%r9d
mov $0x0,%eax
cmp %esi,%r8d
jl 16 <func1+0x16>
lea (%rcx,%rdi,1),%eax
add %edx,%eax
sub %r8d,%eax
mov %ecx,%r10d
imul %r8d,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a5 + a1;
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += a1 + a4 - a3;
    }
    if (a5 < a2)
    {
        v9 = ((a1 - a1) * a1) * a1;
    }
    else
    {
        v9 = a3 + (a4 + a1) - a5;
    }
    v10 = a4 * a5;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 12
3 10
4 10
5 16
6 16
7 16
8 18
9 18
10 19
11 19
12 19
13 19
14 19
15 19
16 19
17 20
<<<sep_out_sample>>>
cmp %ecx,%edi
jge 10 <func1+0x10>
mov %r8d,%eax
imul %edx,%eax
add %ecx,%eax
add %esi,%eax
jmp 18 <func1+0x18>
mov %ecx,%eax
imul %esi,%eax
lea (%rax,%rdi,2),%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a1 < a4)
    {
        v6 = (a5 * a3) + a4 + a2;
    }
    else
    {
        v6 = (a1 + a1) + a4 * a2;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += a5 + a2 * a1;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        v9 += a2 * a5;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 22
12 22
13 22
14 22
15 22
16 23
<<<sep_out_sample>>>
mov %edx,%r10d
sub %esi,%r10d
add %ecx,%r10d
add %edi,%r10d
mov %edx,%r9d
sub %r8d,%r9d
cmp %edi,%r8d
cmovle %r8d,%r9d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a5 - a3 - a4;
    }
    v8 = a4 - (a2 - a3) + a1;
    if (a1 < a5)
    {
        v9 = a3 - a5;
    }
    else
    {
        v9 = (a5 + a4) - a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 9
4 9
5 12
6 12
7 12
8 12
9 18
10 18
11 18
12 18
13 18
14 18
15 19
<<<sep_out_sample>>>
lea (%r8,%rdi,1),%r9d
test %ecx,%ecx
jg 13 <func1+0x13>
lea (%rdi,%r8,1),%r9d
imul %ecx,%r9d
add %r8d,%r9d
cmp %esi,%r9d
jge 21 <func1+0x21>
mov %edx,%r11d
imul %r8d,%r11d
jmp 2a <func1+0x2a>
mov %ecx,%r11d
sub %edx,%r11d
add %ecx,%r11d
cmp %edx,%edi
jge 3b <func1+0x3b>
lea (%rsi,%rcx,1),%r10d
sub %edx,%r10d
imul %ecx,%r10d
jmp 47 <func1+0x47>
lea (%rcx,%rsi,1),%r10d
imul %r8d,%r10d
imul %edx,%r10d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
add %r11d,%eax
add %r10d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (v6 < a4)
    {
        v6 = a5 + a1;
    }
    else
    {
        v6 = (a1 + a5) * a4 + a5;
    }
    if (v6 < a2)
    {
        v7 = a3 * a5;
    }
    else
    {
        v7 = a4 - (a3 - a4);
    }
    if (a1 < a3)
    {
        v8 = (a2 + a4 - a3) * a4;
    }
    else
    {
        v8 = (a4 + a2) * a5 * a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 6
2 4
3 4
4 10
5 10
6 10
7 12
8 12
9 14
10 14
11 14
12 18
13 18
14 18
15 20
16 20
17 22
18 22
19 22
20 22
21 26
22 26
23 26
24 28
25 28
26 28
27 28
28 28
29 28
30 28
31 29
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
lea 0x1(%rcx,%rax,1),%edx
sub %esi,%edi
sub %ecx,%edi
sub %r8d,%edi
lea (%rdx,%rdi,1),%eax
add %ecx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a2 * a2;
    }
    v8 = ((a1 - a2) - a4) - a5;
    v9 = a2 + a4;
    v10 = 0;
    for (v11 = 0; v11++; v11<a5)
    {
        v10 += a1 + a4;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 16
4 16
5 9
6 9
7 9
8 16
9 10
10 16
11 17
<<<sep_out_sample>>>
test %esi,%esi
jle 13 <func1+0x13>
mov %r8d,%r9d
imul %esi,%r9d
add %edi,%r9d
add %ecx,%r9d
jmp 1a <func1+0x1a>
lea (%rsi,%r8,2),%r9d
add %edx,%r9d
mov %edi,%eax
imul %ecx,%eax
add %esi,%eax
imul %esi,%eax
add %r9d,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += (a5 - a1) + a4;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        if (a3 < a1)
        {
            v8 += a3 + a2 - a5;
        }
        else
        {
            v8 += (a1 + a5) * a2;
        }
    }
    if (v8 < a2)
    {
        v10 = a1 + a5 * a2 + a4;
    }
    else
    {
        v10 = a3 + (a5 + a5 + a2);
    }
    v11 = ((a1 * a4) + a2) * a2;
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 23
4 23
5 23
6 23
7 23
8 27
9 27
10 29
11 29
12 29
13 29
14 30
15 30
16 30
17 30
18 30
19 30
20 31
<<<sep_out_sample>>>
lea (%rdx,%rsi,1),%eax
cmp %esi,%ecx
jle c <func1+0xc>
lea (%rcx,%rdx,2),%eax
add %edi,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %r8d,%esi
lea 0x2(%rcx,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (v7 < a4)
        {
            v6 += (a5 + a1) - a1;
        }
        else
        {
            v6 += a1 - a5;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += (a3 * a4) + a5;
    }
    if (a2 < a4)
    {
        v10 = (a3 + a4) + a3 + a1;
    }
    else
    {
        v10 = (a2 - a3) + a3 + a3;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 27
2 21
3 21
4 23
5 23
6 29
7 29
8 29
9 29
10 29
11 30
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %esi,%r8d
lea (%rax,%r8,1),%esi
imul %edx,%edi
lea (%rsi,%rcx,2),%eax
sub %edi,%eax
add $0x1,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a5 < a5)
    {
        v6 = a3 + a2 * a2 * a1;
    }
    else
    {
        v6 = a2 + a5;
    }
    if (a4 < a4)
    {
        v7 = a5 * a3;
    }
    else
    {
        v7 = a4 - (a3 * a1 - a4);
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += (a2 - a1) - a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 25
2 25
3 25
4 25
5 10
6 25
7 18
8 18
9 25
10 25
11 26
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea (%r8,%rcx,1),%esi
imul %edi,%edx
imul %edx,%ecx
lea 0x1(%rsi,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = (a1 + a3) * a3 * a4;
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a5 + a3 - a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 10
3 10
4 10
5 4
6 4
7 10
8 11
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %edx,%r8d
add %r8d,%ecx
lea 0x1(%rcx,%rsi,2),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = ((a2 + a2) - a5) + a5;
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        if (a1 < a4)
        {
            v7 += (a5 + a2) - a4;
        }
        else
        {
            v7 += a5 * a3 + a4;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 17
6 18
<<<sep_out_sample>>>
mov %edx,%eax
imul %r8d,%eax
test %r8d,%r8d
cmovle %edi,%eax
lea 0x1(%rax,%rdi,1),%eax
add %eax,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a2 - (a3 + a3);
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += (a2 - a2) + a1;
    }
    if (v10 < a5)
    {
        v10 = a3 * a5;
    }
    else
    {
        v10 = ((a3 - a3) * a3) + a1;
    }
    v11 = 0;
    for (v12 = 0; v12++; v12<a3)
    {
        v11 += a2 + (a2 - a1);
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 16
4 16
5 27
6 27
7 27
8 27
9 27
10 28
<<<sep_out_sample>>>
add $0x1,%edi
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
add %ecx,%esi
imul %edi,%r8d
lea 0x1(%rsi,%r8,1),%eax
add %ecx,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = a1 * a5 + a5;
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += a1 - (a2 * a1);
    }
    v9 = ((a3 - a3) + a4) + a3;
    v10 = 0;
    for (v11 = 0; v11++; v11<a3)
    {
        if (a3 < a2)
        {
            v10 += a4 * (a3 - a2);
        }
        else
        {
            v10 += a5 + a4 * a5;
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 23
3 23
4 23
5 23
6 4
7 23
8 10
9 23
10 24
<<<sep_out_sample>>>
mov %r8d,%r10d
imul %edx,%r10d
sub %ecx,%r10d
add %r8d,%r10d
cmp %edi,%r8d
jge 20 <func1+0x20>
mov %esi,%r9d
sub %edx,%r9d
sub %ecx,%r9d
add %esi,%r9d
jmp 2c <func1+0x2c>
lea 0x1(%rcx),%r9d
imul %r8d,%r9d
imul %esi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
mov %esi,%edx
sub %ecx,%edx
imul %edi,%esi
add %edx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = (a5 * a3) - a4 + a5;
    if (a5 < a1)
    {
        v7 = (a2 - a3) - a4 + a2;
    }
    else
    {
        v7 = (a5 + (a4 * a5)) * a2;
    }
    v8 = a2 - a4 + a2 * a1;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 5
6 5
7 7
8 7
9 7
10 7
11 7
12 11
13 11
14 11
15 14
16 14
17 14
18 14
19 14
20 14
21 13
22 13
23 13
24 13
25 14
26 15
<<<sep_out_sample>>>
cmp %esi,%edx
jge d <func1+0xd>
lea (%rsi,%r8,2),%eax
lea (%rax,%rdx,1),%eax
jmp 18 <func1+0x18>
mov %edx,%eax
sub %ecx,%eax
lea (%r8,%rdi,1),%r9d
sub %r9d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a3 < a2)
    {
        v6 = ((a3 + a5) + a2) + a5;
    }
    else
    {
        v6 = (a3 - a4) - (a5 + a1);
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        if (v7 < a3)
        {
            v7 += (a4 - a3) * a4;
        }
        else
        {
            v7 += a3 + a2;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 10
10 24
11 24
12 24
13 24
14 24
15 25
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a4 * a5;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += a1 + (a3 - a4);
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a1)
    {
        if (a5 < a2)
        {
            v10 += a1 * a2;
        }
        else
        {
            v10 += (a1 - a4) * a5;
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 26
2 26
3 26
4 26
5 27
<<<sep_out_sample>>>
test %edx,%edx
jle c <func1+0xc>
mov %edi,%eax
imul %r8d,%eax
jmp 16 <func1+0x16>
mov %esi,%eax
sub %edx,%eax
imul %ecx,%eax
imul %edx,%eax
lea 0x1(%rdi,%rdx,1),%edi
add %edi,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%esi
lea (%rsi,%rax,1),%edx
mov %ecx,%eax
sub %r8d,%eax
imul %ecx,%ecx
sub %ecx,%eax
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (a5 < a4)
        {
            v6 += (a2 - a4) + a5;
        }
        else
        {
            v6 += (a1 * a2) - a1;
        }
    }
    if (v6 < a3)
    {
        v8 = a1 * a5;
    }
    else
    {
        v8 = a3 * ((a2 - a3) * a4);
    }
    v9 = a4 - a5 - a4 * a4;
    v10 = 0;
    for (v11 = 0; v11++; v11<a2)
    {
        v10 += a3 + a2 - a5;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 22
7 22
8 22
9 22
10 30
11 30
12 30
13 30
14 30
15 24
16 24
17 24
18 24
19 30
20 31
<<<sep_out_sample>>>
mov %edx,%eax
imul %edx,%eax
imul %ecx,%eax
add %r8d,%eax
test %edi,%edi
jle 19 <func1+0x19>
lea (%rcx,%r8,2),%r9d
imul %esi,%r9d
jmp 20 <func1+0x20>
mov %edx,%r9d
imul %r8d,%r9d
lea 0x1(%r9,%rdi,1),%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    if (a3 < a3)
    {
        v6 = (a2 - a2 * a1) + a5;
    }
    else
    {
        v6 = a5 + a3 * a3 * a4;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        if (a1 < a4)
        {
            v7 += a1 * a4 + a2;
        }
        else
        {
            v7 += a1 + a1 * a5;
        }
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        if (v8 < a4)
        {
            v9 += a1 + a1;
        }
        else
        {
            v9 += (a5 * a2) * a1;
        }
    }
    if (v9 < a1)
    {
        v11 = ((a4 + a5) + a5) * a2;
    }
    else
    {
        v11 = a3 * a5;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 36
6 36
7 38
8 38
9 38
10 42
11 42
12 44
13 44
14 44
15 44
16 44
17 44
18 45
<<<sep_out_sample>>>
mov %edx,%r9d
sub %ecx,%r9d
mov %esi,%eax
neg %eax
test %r8d,%r8d
jle 19 <func1+0x19>
mov %edx,%eax
imul %esi,%eax
add %edi,%eax
imul %esi,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %r9d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (v7 < a1)
        {
            v6 += a4 - a1 - a4;
        }
        else
        {
            v6 += (a5 - a1) + a5;
        }
    }
    v8 = (a3 + a1 - a1) - a4;
    if (v9 < a5)
    {
        v9 = (a1 + a3 * a2) * a2;
    }
    else
    {
        v9 = a1 - a2 - a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 23
4 23
5 17
6 17
7 19
8 19
9 19
10 19
11 25
12 25
13 25
14 25
15 25
16 25
17 26
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
add %r8d,%ecx
imul %esi,%edx
add $0x1,%edx
imul %edx,%edi
lea 0x1(%rcx,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a3 < a3)
    {
        v6 = a2 * (a5 + a4) - a3;
    }
    else
    {
        v6 = a1 + (a2 * a3) * a1;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += (a5 - a5) * a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 10
6 10
7 10
8 17
9 18
<<<sep_out_sample>>>
test %esi,%esi
jle 15 <func1+0x15>
mov %r8d,%r9d
imul %r8d,%r9d
imul %edi,%r9d
imul %esi,%r9d
jmp 1c <func1+0x1c>
lea (%rdi,%rcx,2),%eax
lea (%rax,%rdx,1),%r9d
add %edx,%edi
add %esi,%edi
add %r8d,%edi
add %edi,%ecx
add %r9d,%ecx
mov %r8d,%eax
sub %edx,%eax
imul %esi,%r8d
sub %r8d,%eax
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (v6 < a2)
    {
        v6 = ((a5 * a5) * a1) * a2;
    }
    else
    {
        v6 = (a4 + a1 + a3) + a4;
    }
    if (a3 < a3)
    {
        v7 = a3 + a3;
    }
    else
    {
        v7 = (a5 - a3) - a2 * a5;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 20
11 20
12 20
13 20
14 20
15 18
16 18
17 18
18 18
19 20
20 21
<<<sep_out_sample>>>
test %r8d,%r8d
jle d <func1+0xd>
lea 0x2(%rsi),%eax
imul %ecx,%eax
jmp 17 <func1+0x17>
mov %ecx,%eax
sub %esi,%eax
add $0x1,%eax
imul %esi,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (v6 < a5)
    {
        v6 = a4 + (a2 * a4) + a4;
    }
    else
    {
        v6 = (a2 * (a4 - a2)) + a2;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        if (a1 < a1)
        {
            v7 += (a4 * a1) + a3;
        }
        else
        {
            v7 += (a4 - a4) * a3;
        }
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        if (a1 < a2)
        {
            v9 += (a4 - a2) - a4;
        }
        else
        {
            v9 += a5 + a2 + a3;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 10
10 36
11 36
12 36
13 36
14 36
15 37
<<<sep_out_sample>>>
mov %edi,%eax
sub %edx,%eax
mov %edx,%r9d
imul %r8d,%r9d
cmp %edx,%esi
cmovl %r9d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a2 < a3)
    {
        v6 = a3 * a5;
    }
    else
    {
        v6 = a1 - (a2 - (a2 - a3));
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        if (v6 < a1)
        {
            v7 += a2 - a2 - a5;
        }
        else
        {
            v7 += a2 * (a4 * a2);
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 6
4 6
5 6
6 6
7 24
8 24
9 24
10 24
11 24
12 25
<<<sep_out_sample>>>
mov %edx,%eax
imul %r8d,%eax
imul %esi,%eax
lea (%rdi,%rdx,2),%r9d
lea (%r9,%rax,1),%eax
add %eax,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%eax
lea (%rdi,%rdx,1),%esi
imul %esi,%ecx
imul %r8d,%ecx
add %ecx,%eax
sub %r8d,%edi
add %edi,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (a2 < a4)
        {
            v6 += a1 - a5 * a2;
        }
        else
        {
            v6 += a4 * a2 + a5;
        }
    }
    v8 = (a1 + a3) * a4 * a5;
    v9 = a1 - a5 + a3;
    if (a4 < a4)
    {
        v10 = a4 + ((a2 * a4) + a5);
    }
    else
    {
        v10 = a3 * a5 * a2 + a3;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 24
2 24
3 24
4 26
5 26
6 26
7 26
8 26
9 16
10 16
11 16
12 26
13 17
14 17
15 26
16 27
<<<sep_out_sample>>>
lea (%r8,%rsi,1),%r9d
cmp %edi,%esi
jle 1c <func1+0x1c>
mov %r8d,%r10d
imul %esi,%r10d
mov $0x1,%eax
sub %r10d,%eax
imul %edi,%eax
jmp 22 <func1+0x22>
lea (%rdx,%rsi,1),%eax
imul %edi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a5 + a2;
    if (a1 < a2)
    {
        v7 = a1 - ((a5 * a2) * a1);
    }
    else
    {
        v7 = a3 * a1 + a1 * a2;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += a5 - a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 5
3 5
4 7
5 7
6 7
7 7
8 7
9 7
10 11
11 11
12 18
13 18
14 18
15 18
16 18
17 18
18 19
<<<sep_out_sample>>>
test %esi,%esi
jle d <func1+0xd>
mov %edi,%r9d
imul %esi,%r9d
jmp 1a <func1+0x1a>
mov %esi,%r9d
imul %edi,%r9d
sub %ecx,%r9d
add %edx,%r9d
cmp %r8d,%edi
jge 2a <func1+0x2a>
lea (%r8,%rdx,1),%eax
add %esi,%eax
imul %edx,%eax
jmp 37 <func1+0x37>
lea (%rdx,%rsi,1),%eax
mov %esi,%r10d
imul %edi,%r10d
sub %r10d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %ecx,%r8d
add %r9d,%r8d
add %eax,%r8d
lea (%r8,%rcx,2),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (v6 < a2)
    {
        v6 = a1 * a2;
    }
    else
    {
        v6 = a3 - (a4 - (a2 * a1));
    }
    if (a1 < a5)
    {
        v7 = ((a5 + a3) + a2) * a3;
    }
    else
    {
        v7 = (a3 + a2) - a2 * a1;
    }
    v8 = a1 - a1;
    v9 = a4 + a4;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 10
10 12
11 12
12 14
13 14
14 14
15 14
16 18
17 18
18 18
19 18
20 22
21 22
22 22
23 22
24 22
25 22
26 22
27 23
<<<sep_out_sample>>>
mov %edi,%r9d
sub %r8d,%r9d
mov %edi,%eax
sub %ecx,%eax
cmp %edx,%ecx
jge 19 <func1+0x19>
mov %edx,%eax
imul %esi,%eax
imul %r8d,%eax
sub %ecx,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a1 - a5;
    if (a4 < a3)
    {
        v7 = (a3 * a2) * a5 - a4;
    }
    else
    {
        v7 = a1 - a4;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 11
4 11
5 5
6 5
7 7
8 7
9 7
10 7
11 13
12 13
13 13
14 13
15 13
16 13
17 14
<<<sep_out_sample>>>
mov %edx,%r9d
imul %r8d,%r9d
imul %r8d,%r9d
add %ecx,%r9d
mov $0x0,%eax
test %edi,%edi
jg 20 <func1+0x20>
mov $0x1,%al
sub %edx,%eax
imul %ecx,%eax
add %edi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = (a3 * a5) * a5 + a4;
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        if (a2 < a3)
        {
            v7 += a2 * a5;
        }
        else
        {
            v7 += a4 + a2;
        }
    }
    if (v7 < a1)
    {
        v9 = a2 * a4 - a2 * a4;
    }
    else
    {
        v9 = a1 - ((a3 * a4) - a4);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 19
6 17
7 17
8 23
9 23
10 23
11 23
12 25
13 25
14 25
15 25
16 25
17 25
18 26
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
imul %ecx,%r8d
add %esi,%r8d
add %r8d,%edx
add %edx,%eax
add %ecx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a2 + (a4 * a5) + a3;
    if (a4 < a4)
    {
        v7 = a3 + a1;
    }
    else
    {
        v7 = a2 + a4;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 13
2 13
3 13
4 13
5 4
6 4
7 4
8 13
9 11
10 13
11 14
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r8d,%esi
imul %esi,%ecx
add %ecx,%edi
lea 0x1(%rax,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a4 < a4)
    {
        v6 = a5 - (a1 + a2) * a2;
    }
    else
    {
        v6 = a4 * (a2 + a5) + a1;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        if (v7 < a2)
        {
            v7 += a1 * a3;
        }
        else
        {
            v7 += (a4 * a4) - a1;
        }
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        if (v7 < a4)
        {
            v9 += a3 * a2 - a1;
        }
        else
        {
            v9 += a5 - a3 + a2;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 36
2 36
3 36
4 36
5 10
6 10
7 10
8 36
9 37
<<<sep_out_sample>>>
lea (%rcx,%r8,2),%eax
add %eax,%edx
add %esi,%edx
add %edx,%r8d
lea (%rsi,%rcx,2),%eax
lea 0x1(%rax,%r8,1),%eax
imul %esi,%esi
sub %ecx,%esi
add %esi,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += (a5 + a4) + a2;
    }
    v8 = a4 + a2;
    v9 = a1 + (a2 * a2 - a4);
    if (a5 < a5)
    {
        v10 = (a2 - a5 + a5) + a1;
    }
    else
    {
        v10 = (a5 + a5 - a1) + a4;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 19
2 19
3 19
4 19
5 9
6 19
7 10
8 10
9 10
10 19
11 20
<<<sep_out_sample>>>
add %edi,%edx
add %edx,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%eax
sub %edi,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += (a4 + a5) - a2;
    }
    if (a3 < a3)
    {
        v8 = (a5 * a2) - (a2 + a5);
    }
    else
    {
        v8 = a5 - a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 15
6 17
7 18
<<<sep_out_sample>>>
add %edx,%edi
add %esi,%edi
add %r8d,%edi
lea 0x1(%rcx,%rdi,1),%eax
mov %esi,%ecx
sub %edx,%ecx
add %ecx,%r8d
add %r8d,%eax
sub %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (v7 < a2)
        {
            v6 += (a5 + a5) * a3;
        }
        else
        {
            v6 += a4 + a2 - a5;
        }
    }
    v8 = a2 - a3 + a5;
    v9 = a4 - a4 - a2;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 18
5 16
6 16
7 16
8 18
9 18
10 19
<<<sep_out_sample>>>
cmp %ecx,%r8d
jge 15 <func1+0x15>
mov %edi,%r9d
sub %esi,%r9d
mov %edi,%eax
imul %esi,%eax
add %r9d,%eax
jmp 1b <func1+0x1b>
lea 0x1(%rsi),%eax
imul %ecx,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a5 < a4)
    {
        v6 = (a1 - a2) + a1 * a2;
    }
    else
    {
        v6 = a4 + (a4 * a2);
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += a4 * a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 6
9 10
10 10
11 17
12 17
13 17
14 17
15 17
16 18
<<<sep_out_sample>>>
lea (%rdx,%r8,1),%eax
test %edi,%edi
jle f <func1+0xf>
mov %edx,%eax
imul %edi,%eax
neg %eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a3 - a4 + a2;
    }
    if (v6 < a1)
    {
        v8 = a4 - a3 * a1 - a4;
    }
    else
    {
        v8 = (a2 + a5) + (a3 - a2);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 15
2 9
3 9
4 11
5 11
6 11
7 17
8 17
9 17
10 17
11 17
12 18
<<<sep_out_sample>>>
lea (%rsi,%rdx,1),%r10d
imul %edx,%r10d
add %edi,%r10d
cmp %ecx,%edi
jge 15 <func1+0x15>
lea (%rdi,%rdi,1),%r9d
jmp 23 <func1+0x23>
mov %edx,%r9d
sub %esi,%r9d
mov %edx,%eax
imul %esi,%eax
add %eax,%r9d
add %edx,%edi
add %esi,%edi
add %r8d,%edi
add %ecx,%edi
add %r10d,%edi
add %r9d,%edi
lea -0x1(%rsi),%eax
imul %ecx,%eax
sub %r8d,%eax
add %edi,%eax
add %ecx,%edx
sub %edx,%r8d
imul %r8d,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a1 + a3 * (a2 + a3);
    if (a1 < a4)
    {
        v7 = a1 + (a1 - a5 + a5);
    }
    else
    {
        v7 = a3 - a2 + a3 * a2;
    }
    v8 = a2 * a4 - a4 - a5;
    v9 = a2 * (a5 - (a4 + a3));
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 5
5 5
6 7
7 7
8 11
9 11
10 11
11 11
12 11
13 15
14 15
15 15
16 15
17 15
18 15
19 13
20 13
21 13
22 15
23 14
24 14
25 14
26 15
27 16
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %edx,%r8d
lea 0x1(%rcx,%r8,1),%eax
imul %esi,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a5 - a2 * a5;
    }
    v8 = a2 * a1;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 9
6 10
7 11
<<<sep_out_sample>>>
mov %edi,%r10d
imul %edx,%r10d
imul %esi,%r10d
add %edx,%r10d
lea (%rcx,%r8,1),%r9d
cmp %r8d,%esi
jg 1f <func1+0x1f>
lea (%rcx,%rdi,1),%r9d
imul %r8d,%r9d
test %edx,%edx
jle 34 <func1+0x34>
lea (%rcx,%rdx,1),%eax
mov %r8d,%r11d
sub %eax,%r11d
mov %r11d,%eax
imul %esi,%eax
jmp 3c <func1+0x3c>
mov %r8d,%eax
sub %esi,%eax
lea (%rax,%rcx,2),%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a2 * a4 * a1;
    }
    v8 = a2 * (a1 * a3) + a3;
    if (a5 < a2)
    {
        v9 = a4 + (a4 + a5) - a4;
    }
    else
    {
        v9 = a5 * a4 + (a5 * a1);
    }
    if (v10 < a3)
    {
        v10 = (a5 - (a4 + a3)) * a2;
    }
    else
    {
        v10 = a5 - a2 + a4 + a4;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 9
4 9
5 12
6 10
7 10
8 16
9 16
10 18
11 18
12 20
13 20
14 20
15 20
16 20
17 20
18 24
19 24
20 24
21 26
22 26
23 26
24 26
25 26
26 26
27 26
28 27
<<<sep_out_sample>>>
cmp %esi,%edi
jge f <func1+0xf>
lea (%rdx,%rdi,1),%eax
imul %edi,%eax
imul %edx,%eax
jmp 1a <func1+0x1a>
mov %ecx,%eax
imul %ecx,%eax
imul %esi,%eax
imul %edx,%eax
add %edx,%edi
add %edi,%esi
add %r8d,%esi
add %esi,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a1 < a2)
    {
        v6 = ((a3 + a1) * a1) * a3;
    }
    else
    {
        v6 = ((a4 * a4) * a2) * a3;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += (a1 * a4) + a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 10
11 17
12 17
13 17
14 17
15 17
16 18
<<<sep_out_sample>>>
test %ecx,%ecx
jle c <func1+0xc>
lea (%rdx,%rdi,2),%eax
imul %esi,%eax
jmp 15 <func1+0x15>
mov %esi,%eax
imul %edx,%eax
imul %r8d,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (a2 < a3)
        {
            v6 += (a4 - a1) * a2;
        }
        else
        {
            v6 += a4 + (a5 * a4);
        }
    }
    if (v8 < a4)
    {
        v8 = (a1 + a1 + a3) * a2;
    }
    else
    {
        v8 = a2 * a3 * a5;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        if (v8 < a1)
        {
            v9 += a3 + (a5 * a5);
        }
        else
        {
            v9 += a2 - a4;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 22
7 22
8 22
9 36
10 36
11 36
12 36
13 36
14 37
<<<sep_out_sample>>>
cmp %edx,%edi
jge 12 <func1+0x12>
lea (%r8,%r8,1),%r9d
imul %esi,%r9d
imul %edx,%r9d
jmp 20 <func1+0x20>
mov %esi,%r9d
imul %edx,%r9d
imul %ecx,%r9d
add %r8d,%r9d
lea (%rdx,%rsi,1),%eax
cmp %r8d,%edx
jle 2f <func1+0x2f>
lea -0x1(%r8),%eax
imul %esi,%eax
add %edx,%edi
add %esi,%edi
add %r8d,%edi
add %edi,%ecx
add %r9d,%ecx
add %ecx,%eax
imul %esi,%edx
sub %edx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a1 < a3)
    {
        v6 = ((a5 + a5) * a2) * a3;
    }
    else
    {
        v6 = (a4 * (a2 * a3)) + a5;
    }
    if (a5 < a3)
    {
        v7 = a2 * a5 - a2;
    }
    else
    {
        v7 = a3 + (a2 - (a4 - a4));
    }
    v8 = a5 - (a2 * a3) + a1;
    v9 = (a2 - a2) - a1;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 10
11 18
12 12
13 12
14 14
15 14
16 22
17 22
18 22
19 22
20 22
21 22
22 20
23 20
24 22
25 23
<<<sep_out_sample>>>
add %edi,%edx
add %edx,%esi
add %r8d,%esi
lea (%rdi,%r8,2),%eax
lea (%rsi,%rcx,2),%edx
lea 0x1(%rdx,%rax,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a4 + a5 * a5;
    }
    v8 = a4 + (a5 + a1) + a5;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 9
5 9
6 10
7 11
<<<sep_out_sample>>>
lea (%rdi,%rdx,2),%eax
sub %ecx,%eax
add %esi,%eax
add %eax,%r8d
lea (%r8,%rcx,1),%eax
imul %edi,%ecx
sub %ecx,%eax
imul %esi,%esi
lea 0x1(%rax,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a1 * (a3 - a4 - a3);
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a5 * a5 * a1;
    }
    v9 = a2 * a2;
    v10 = a5 + ((a3 - a5) - a4);
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 12
2 12
3 12
4 12
5 12
6 4
7 12
8 10
9 12
10 13
<<<sep_out_sample>>>
mov %edi,%eax
imul %r8d,%eax
mov %ecx,%r10d
sub %eax,%r10d
lea (%r8,%rdi,2),%r9d
lea (%r9,%r10,1),%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += (a1 - a4) + a3;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += a5 + a1 + a1;
    }
    v10 = a1 + a5;
    v11 = (a4 - (a1 * a5)) + a1;
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 15
2 15
3 15
4 15
5 15
6 16
7 16
8 16
9 16
10 16
11 16
12 17
<<<sep_out_sample>>>
cmp %esi,%r8d
jge 14 <func1+0x14>
mov %esi,%r11d
imul %edx,%r11d
add %r8d,%r11d
add %edi,%r11d
jmp 1d <func1+0x1d>
lea -0x1(%rcx,%r8,1),%r11d
imul %r8d,%r11d
cmp %ecx,%edx
jle 2f <func1+0x2f>
mov %r8d,%eax
imul %edx,%eax
mov %ecx,%r10d
sub %eax,%r10d
jmp 3b <func1+0x3b>
mov %edx,%r10d
sub %r8d,%r10d
sub %edi,%r10d
add %esi,%r10d
cmp %edx,%esi
jle 51 <func1+0x51>
mov $0x1,%r9d
sub %esi,%r9d
imul %ecx,%r9d
add %edi,%r9d
jmp 5b <func1+0x5b>
mov %edx,%r9d
neg %r9d
imul %edi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a5 < a2)
    {
        v6 = (a5 + a2 * a3) + a1;
    }
    else
    {
        v6 = a5 * (a5 + a4) - a5;
    }
    if (a4 < a3)
    {
        v7 = a4 - (a5 * a3);
    }
    else
    {
        v7 = ((a3 - a5) - a1) + a2;
    }
    if (a3 < a2)
    {
        v8 = a1 + (a4 - (a4 * a2));
    }
    else
    {
        v8 = a1 - a1 * a3 - a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 12
11 12
12 14
13 14
14 14
15 14
16 14
17 18
18 18
19 18
20 18
21 20
22 20
23 22
24 22
25 22
26 22
27 22
28 26
29 26
30 26
31 28
32 28
33 28
34 28
35 28
36 28
37 28
38 29
<<<sep_out_sample>>>
add %edx,%edi
add %esi,%edi
add %edi,%r8d
lea 0x1(%rcx,%r8,1),%eax
imul %edx,%esi
imul %esi,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a5 * a2 * a1;
    }
    v8 = a2 * a3 * a4;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 9
6 9
7 10
8 11
<<<sep_out_sample>>>
mov %ecx,%eax
sub %edi,%eax
add %r8d,%eax
lea (%rdi,%rdx,2),%edx
lea 0x1(%rdx,%rax,1),%eax
add %esi,%eax
add %eax,%r8d
add %r8d,%ecx
lea 0x1(%rcx,%rsi,2),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    if (a5 < a5)
    {
        v6 = a1 * a4 - a2 - a2;
    }
    else
    {
        v6 = a2 + a2;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        if (a4 < a1)
        {
            v7 += a1 + a3 + a2;
        }
        else
        {
            v7 += a1 + a1 + a2;
        }
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        v9 += a3 * a4;
    }
    v11 = (a5 + (a4 - a1)) + a3;
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 29
2 29
3 29
4 30
5 30
6 30
7 30
8 30
9 30
10 31
<<<sep_out_sample>>>
cmp %edx,%esi
jge 10 <func1+0x10>
mov %r8d,%eax
imul %ecx,%eax
add %edx,%eax
add %edi,%eax
jmp 1a <func1+0x1a>
mov %edi,%eax
sub %r8d,%eax
imul %esi,%eax
sub %ecx,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %r8d,%esi
add %ecx,%esi
add %esi,%eax
add %edi,%ecx
imul %edi,%ecx
add %r8d,%ecx
add %ecx,%eax
sub %edi,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a2 < a3)
    {
        v6 = (a3 + a5 * a4) + a1;
    }
    else
    {
        v6 = a2 * (a1 - a5) - a4;
    }
    v7 = a5 + ((a1 + a4) * a1);
    v8 = a5 - a1;
    v9 = 0;
    for (v10 = 0; v10++; v10<a1)
    {
        if (v10 < a2)
        {
            v9 += a2 + (a1 - a5);
        }
        else
        {
            v9 += a1 - a5 - a2;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 26
13 26
14 26
15 26
16 26
17 12
18 12
19 12
20 26
21 13
22 26
23 27
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
add %ecx,%esi
mov %ecx,%eax
sub %edx,%eax
add %r8d,%eax
add %esi,%eax
mov %edi,%edx
imul %edi,%edx
add %edx,%ecx
add %ecx,%eax
sub %edi,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a5 - (a3 - a4);
    v7 = a4 + a1 * a1;
    v8 = a5 - ((a5 - a5) + a1);
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 7
2 7
3 7
4 7
5 4
6 4
7 4
8 7
9 5
10 5
11 5
12 7
13 6
14 7
15 8
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %r8d,%esi
lea (%r8,%rdx,2),%edx
lea (%rsi,%rcx,2),%eax
lea 0x1(%rdx,%rax,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = (a5 + a3) + a3 + a4;
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        if (a4 < a5)
        {
            v7 += (a5 * a2) + a5;
        }
        else
        {
            v7 += (a2 - a3) * a2;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 4
5 4
6 17
7 18
<<<sep_out_sample>>>
lea (%rsi,%r8,1),%r11d
cmp %edi,%r8d
mov $0x0,%eax
cmovl %eax,%r11d
mov %ecx,%eax
imul %edi,%eax
imul %ecx,%eax
mov %edi,%r9d
sub %eax,%r9d
lea (%r8,%rcx,1),%r10d
cmp %r9d,%esi
jg 34 <func1+0x34>
mov %edx,%r10d
imul %edi,%r10d
sub %esi,%r10d
add %edx,%r10d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r11d,%ecx
add %ecx,%r9d
lea (%r9,%r10,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a5 < a1)
    {
        v6 = a2 + (a1 - a1) - a2;
    }
    else
    {
        v6 = (a1 - a1) + a2 + a5;
    }
    v7 = a1 - a4 * a1 * a4;
    if (v7 < a2)
    {
        v8 = a5 + a4;
    }
    else
    {
        v8 = (a3 * a1 - a2) + a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 12
6 12
7 12
8 12
9 12
10 15
11 13
12 13
13 19
14 19
15 19
16 19
17 21
18 21
19 21
20 21
21 21
22 21
23 21
24 22
<<<sep_out_sample>>>
test %edx,%edx
jle e <func1+0xe>
mov %edx,%eax
imul %esi,%eax
imul %edi,%eax
jmp 18 <func1+0x18>
mov %edi,%eax
imul %r8d,%eax
sub %ecx,%eax
add %edx,%eax
add %edx,%edi
add %esi,%edi
add %edi,%r8d
add %ecx,%r8d
add %eax,%r8d
sub $0x1,%esi
imul %esi,%ecx
imul %ecx,%edx
lea 0x1(%r8,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (v6 < a3)
    {
        v6 = a3 * a2 * a1;
    }
    else
    {
        v6 = (a1 * a5 - a4) + a3;
    }
    v7 = (a4 * a2 - a4) * a3;
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += a2 * a5 * a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 10
11 18
12 18
13 18
14 18
15 18
16 12
17 12
18 12
19 18
20 19
<<<sep_out_sample>>>
mov %esi,%r9d
sub %r8d,%r9d
sub %edi,%r9d
sub %ecx,%r9d
mov $0x0,%r11d
cmp %edx,%ecx
jge 23 <func1+0x23>
mov %edx,%r11d
imul %r8d,%r11d
add %esi,%r11d
sub %edx,%r11d
lea (%rdi,%rsi,1),%eax
add %ecx,%eax
sub %edx,%eax
mov $0x0,%r10d
cmp %r9d,%edi
jle 42 <func1+0x42>
mov %edx,%r10d
sub %r8d,%r10d
imul %esi,%r10d
add %ecx,%r10d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
add %r9d,%r11d
add %r11d,%eax
add %r10d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a2 - a5 - a1 - a4;
    if (a4 < a3)
    {
        v7 = a2 + (a3 * a5) - a3;
    }
    else
    {
        v7 = a1 - (a3 - a3) - a1;
    }
    v8 = (a1 + a2 + a4) - a3;
    if (v6 < a1)
    {
        v9 = a2 * (a3 - a5) + a4;
    }
    else
    {
        v9 = a1 - (a3 - a3 + a1);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 11
6 5
7 5
8 7
9 7
10 7
11 7
12 13
13 13
14 13
15 20
16 14
17 14
18 16
19 16
20 16
21 16
22 22
23 22
24 22
25 22
26 22
27 22
28 22
29 22
30 23
<<<sep_out_sample>>>
push %rbx
mov %esi,%ebx
imul %ecx,%ebx
imul %r8d,%ebx
add %edi,%ebx
mov %ecx,%r9d
neg %r9d
sub %r8d,%r9d
lea (%rdi,%rsi,1),%r11d
cmp %r9d,%r8d
jg 27 <func1+0x27>
mov %esi,%r11d
sub %edx,%r11d
sub %ecx,%r11d
cmp %r8d,%esi
jle 3a <func1+0x3a>
mov %edx,%r10d
sub %r8d,%r10d
sub %edi,%r10d
add %edx,%r10d
jmp 41 <func1+0x41>
lea (%rcx,%rdx,2),%r10d
add %r8d,%r10d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %ebx,%eax
add %r9d,%eax
add %r11d,%eax
add %r10d,%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a1 + a2 * a4 * a5;
    v7 = (a5 - (a4 + a5)) - a5;
    if (v7 < a5)
    {
        v8 = a1 + a2;
    }
    else
    {
        v8 = a2 - a3 - a4;
    }
    if (a5 < a2)
    {
        v9 = a3 - (a1 - (a3 - a5));
    }
    else
    {
        v9 = a4 + a3 + a3 + a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 4
3 4
4 4
5 4
6 5
7 5
8 5
9 8
10 6
11 6
12 12
13 12
14 12
15 14
16 14
17 16
18 16
19 16
20 16
21 16
22 20
23 20
24 22
25 22
26 22
27 22
28 22
29 22
30 22
31 22
32 23
33 23
<<<sep_out_sample>>>
mov %edx,%r9d
imul %r8d,%r9d
sub %ecx,%r9d
add %r8d,%r9d
mov %edx,%eax
neg %eax
mov %ecx,%r10d
sub %edx,%r10d
cmp %esi,%edx
cmovge %r10d,%eax
add %r9d,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a3 + a5 - a4;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        if (a5 < a2)
        {
            v8 += a5 + (a2 - a5);
        }
        else
        {
            v8 += a2 * a3;
        }
    }
    v10 = a5 - (a4 - a3 * a5);
    if (a3 < a2)
    {
        v11 = a1 - (a3 + a1);
    }
    else
    {
        v11 = (a5 - a5 + a4) - a3;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 21
5 24
6 24
7 24
8 24
9 24
10 24
11 30
12 30
13 30
14 30
15 30
16 30
17 31
<<<sep_out_sample>>>
lea 0x1(%rsi,%rcx,1),%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (a1 < a1)
        {
            v6 += a3 + a5 + a2;
        }
        else
        {
            v6 += a5 + a4 * a5;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        if (a4 < a5)
        {
            v8 += (a2 * a1) + a4;
        }
        else
        {
            v8 += (a2 + a3) - a1;
        }
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a4)
    {
        v10 += a1 + a3 - a3;
    }
    v12 = a4 + a2;
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 34
2 34
3 34
4 34
5 34
6 34
7 35
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
lea 0x1(%rcx,%rax,1),%eax
imul %ecx,%edx
add %edx,%r8d
add %r8d,%eax
mov %edi,%edx
sub %esi,%edx
imul %edx,%esi
add %esi,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += (a2 + a5) - a2;
    }
    v8 = (a3 * a4) + a5;
    v9 = a2 * (a1 - a2) + a1;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 11
5 9
6 9
7 11
8 10
9 10
10 10
11 10
12 11
13 12
<<<sep_out_sample>>>
cmp %edx,%edi
jle 10 <func1+0x10>
lea (%rcx,%r8,1),%eax
imul %edi,%eax
add %r8d,%eax
jmp 15 <func1+0x15>
mov %edi,%eax
imul %edx,%eax
lea 0x1(%rax,%rdi,1),%eax
add %eax,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a1 * (a4 * a2);
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += a2 - a3 - a4;
    }
    if (a3 < a1)
    {
        v10 = a1 * (a4 + a5) + a5;
    }
    else
    {
        v10 = a1 * a3;
    }
    v11 = 0;
    for (v12 = 0; v12++; v12<a5)
    {
        if (a1 < a5)
        {
            v11 += a3 + a5;
        }
        else
        {
            v11 += a2 - (a2 - a2);
        }
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 14
2 14
3 16
4 16
5 16
6 16
7 20
8 20
9 34
10 34
11 34
12 34
13 34
14 35
<<<sep_out_sample>>>
test %edx,%edx
jle 19 <func1+0x19>
mov %esi,%r9d
imul %r8d,%r9d
mov $0x1,%eax
sub %r9d,%eax
imul %r8d,%eax
jmp 1e <func1+0x1e>
mov %edi,%eax
imul %edi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (v6 < a3)
    {
        v6 = a5 - a2 * a5 * a5;
    }
    else
    {
        v6 = a1 * a1;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        if (a4 < a3)
        {
            v7 += a3 + a5 * a2;
        }
        else
        {
            v7 += a5 - (a4 + a3);
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 6
9 10
10 10
11 24
12 24
13 24
14 24
15 24
16 25
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %eax,%ecx
imul %edx,%r8d
mov %esi,%eax
sub %r8d,%eax
add %eax,%edi
lea (%rcx,%rdi,1),%eax
add %edx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a1 + (a2 - a5 * a3);
    if (a3 < a3)
    {
        v7 = a3 - a4 + a3 + a2;
    }
    else
    {
        v7 = (a4 + a2) + (a3 - a4);
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 13
2 13
3 13
4 13
5 4
6 4
7 4
8 4
9 13
10 11
11 13
12 14
<<<sep_out_sample>>>
lea (%rsi,%rdx,1),%eax
test %ecx,%ecx
jg 15 <func1+0x15>
lea (%rcx,%r8,1),%eax
mov %ecx,%r9d
imul %esi,%r9d
sub %r9d,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += (a5 * a5) * a4;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        if (a5 < a1)
        {
            v8 += a4 * a5 * a5;
        }
        else
        {
            v8 += a5 + a2 + a1;
        }
    }
    if (v10 < a4)
    {
        v10 = a2 + a3;
    }
    else
    {
        v10 = (a4 + a5) - a4 * a2;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 23
2 21
3 21
4 27
5 27
6 27
7 27
8 29
9 29
10 29
11 29
12 29
13 30
<<<sep_out_sample>>>
mov %r8d,%eax
imul %edi,%eax
lea (%rsi,%rdx,1),%r10d
imul %esi,%r10d
sub %ecx,%r10d
mov %eax,%r9d
cmp $0x1,%edx
jg 27 <func1+0x27>
mov %ecx,%r9d
imul %edx,%r9d
add %r8d,%r9d
imul %ecx,%r9d
add %r9d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%eax
lea 0x1(%r10,%rax,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a5 * a1;
    if (a1 < a1)
    {
        v7 = a4 + (a4 - a5) + a4;
    }
    else
    {
        v7 = (a2 * (a2 + a3)) - a4;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        if (a5 < a2)
        {
            v8 += a5 * a3;
        }
        else
        {
            v8 += (a4 - a4) - a1;
        }
    }
    if (v9 < a3)
    {
        v10 = a5 * a1;
    }
    else
    {
        v10 = a4 * ((a4 * a3) + a5);
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 11
4 11
5 11
6 27
7 25
8 25
9 31
10 31
11 31
12 31
13 33
14 33
15 33
16 33
17 33
18 33
19 33
20 34
<<<sep_out_sample>>>
lea (%rcx,%r8,1),%r10d
imul %edi,%r10d
cmp %edx,%edi
jle 15 <func1+0x15>
lea (%rdi,%rcx,2),%r9d
sub %r8d,%r9d
jmp 21 <func1+0x21>
lea (%rdx,%r8,1),%eax
add %ecx,%eax
mov %edi,%r9d
sub %eax,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a1 * (a4 + a5);
    if (a3 < a1)
    {
        v7 = a4 - a5 + a1 + a4;
    }
    else
    {
        v7 = a1 - (a3 + a5 + a4);
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 5
4 5
5 7
6 7
7 7
8 11
9 11
10 11
11 11
12 13
13 13
14 13
15 13
16 13
17 13
18 14
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (v7 < a2)
        {
            v6 += a3 + a5 * a5;
        }
        else
        {
            v6 += a4 - a3;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += a2 * (a3 + a3);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 21
5 22
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
lea (%r8,%rcx,1),%eax
imul %edx,%esi
imul %esi,%ecx
sub %edi,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = (a3 * a2) * a4 - a1;
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a4 + (a5 - a2);
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        v9 += a5 + a2 + a2;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 15
2 15
3 15
4 15
5 4
6 4
7 4
8 15
9 16
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a4 - (a3 + a2);
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += a1 * a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 14
2 14
3 14
4 14
5 15
<<<sep_out_sample>>>
test %esi,%esi
jle c <func1+0xc>
mov %ecx,%r10d
sub %r8d,%r10d
jmp 16 <func1+0x16>
mov %esi,%r10d
imul %edx,%r10d
add %ecx,%r10d
mov %edi,%r9d
sub %esi,%r9d
cmp %edi,%ecx
jl 2e <func1+0x2e>
mov %edi,%r9d
imul %r8d,%r9d
imul %r8d,%r9d
add %edx,%r9d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (a5 < a5)
        {
            v6 += a3 + a1;
        }
        else
        {
            v6 += a2 * (a3 + a3);
        }
    }
    if (v6 < a2)
    {
        v8 = a4 - a5 + a1 - a1;
    }
    else
    {
        v8 = a4 + a2 * a3;
    }
    if (a4 < a1)
    {
        v9 = (a2 - a2 - a2) + a1;
    }
    else
    {
        v9 = a3 + (a5 * (a1 * a5));
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 22
7 22
8 22
9 26
10 26
11 24
12 24
13 30
14 30
15 30
16 30
17 32
18 32
19 32
20 32
21 32
22 32
23 33
<<<sep_out_sample>>>
lea 0x2(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
sub %r8d,%edx
imul %edx,%ecx
add %ecx,%esi
lea 0x1(%rax,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = a2 - (a5 - a3) * a4;
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        if (v8 < a3)
        {
            v7 += a2 - a1 - a1;
        }
        else
        {
            v7 += (a4 - a4) - a3;
        }
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        if (a4 < a2)
        {
            v9 += a2 - a2;
        }
        else
        {
            v9 += a1 * a3;
        }
    }
    v11 = 0;
    for (v12 = 0; v12++; v12<a2)
    {
        v11 += (a3 + a5) * a2;
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 34
2 34
3 34
4 34
5 4
6 4
7 4
8 34
9 35
<<<sep_out_sample>>>
test %r8d,%r8d
jle 12 <func1+0x12>
mov %r8d,%eax
sub %ecx,%eax
imul %r8d,%eax
add %edi,%eax
jmp 21 <func1+0x21>
mov %ecx,%r9d
imul %esi,%r9d
mov %edi,%eax
imul %edx,%eax
add %r9d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (v6 < a5)
    {
        v6 = (a5 - a4) * a5 + a1;
    }
    else
    {
        v6 = (a4 * a2) + a1 * a3;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        if (v6 < a4)
        {
            v7 += (a1 * a2) - a2;
        }
        else
        {
            v7 += a1 * a4;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 10
13 24
14 24
15 24
16 24
17 24
18 25
<<<sep_out_sample>>>
cmp $0x1,%esi
jle 18 <func1+0x18>
mov %ecx,%eax
imul %edx,%eax
mov %esi,%r9d
sub %eax,%r9d
mov %r9d,%eax
sub %r8d,%eax
jmp 21 <func1+0x21>
mov %edx,%eax
sub %esi,%eax
imul %edi,%eax
add %edx,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a4 * a3 + a2;
    }
    if (v7 < a2)
    {
        v8 = a2 - a4 * a3 - a5;
    }
    else
    {
        v8 = ((a3 - a2) * a1) + a3;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a1)
    {
        if (v9 < a5)
        {
            v9 += (a1 + a3) - a3;
        }
        else
        {
            v9 += (a5 - a4) * a2;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 11
8 11
9 11
10 15
11 15
12 15
13 15
14 29
15 29
16 29
17 29
18 29
19 30
<<<sep_out_sample>>>
cmp %esi,%edx
jge 14 <func1+0x14>
mov %edi,%r9d
sub %r8d,%r9d
mov %esi,%eax
imul %edx,%eax
add %r9d,%eax
jmp 20 <func1+0x20>
mov %edx,%eax
sub %r8d,%eax
lea (%r8,%rsi,1),%r9d
sub %r9d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (a5 < a3)
        {
            v6 += a5 + a3;
        }
        else
        {
            v6 += (a3 + a3) + a5;
        }
    }
    if (a3 < a2)
    {
        v8 = (a1 - a5) + (a2 * a3);
    }
    else
    {
        v8 = (a3 - a5) - (a5 + a2);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 18
7 18
8 18
9 22
10 22
11 22
12 22
13 24
14 24
15 24
16 24
17 24
18 25
<<<sep_out_sample>>>
test %ecx,%ecx
jle a <func1+0xa>
mov %edx,%eax
sub %edi,%eax
jmp 11 <func1+0x11>
lea (%rdi,%rsi,1),%eax
imul %r8d,%eax
cmp %edi,%eax
jge 24 <func1+0x24>
mov %edx,%r9d
sub %r8d,%r9d
imul %edx,%r9d
add %r8d,%r9d
jmp 32 <func1+0x32>
lea (%rsi,%rcx,1),%r9d
mov %edx,%r10d
imul %edx,%r10d
sub %r10d,%r9d
mov %edx,%r10d
sub %esi,%r10d
add %edx,%r10d
imul %r8d,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%eax
lea 0x1(%r9,%rax,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (v6 < a4)
    {
        v6 = a3 - a1;
    }
    else
    {
        v6 = (a1 + a2) * a5;
    }
    if (v6 < a1)
    {
        v7 = a5 - ((a5 - a3) * a3);
    }
    else
    {
        v7 = a2 + a4 - a3 * a3;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += a1 * a1;
    }
    v10 = a5 * ((a3 - a2) + a3);
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 12
9 12
10 14
11 14
12 14
13 14
14 14
15 18
16 18
17 18
18 18
19 25
20 25
21 25
22 25
23 26
24 26
25 26
26 26
27 26
28 26
29 26
30 27
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
sub %ecx,%edx
lea (%r8,%rdx,1),%eax
sub %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a3 - a4 - a4;
    if (a2 < a2)
    {
        v7 = a1 - a1;
    }
    else
    {
        v7 = (a2 - a2) - a1;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 13
2 13
3 13
4 4
5 13
6 13
7 14
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %eax,%ecx
add %r8d,%edx
imul %esi,%edi
sub %edi,%edx
lea 0x1(%rcx,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a3 + a5 - a2 * a1;
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += (a2 * a2) - a3;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        if (v8 < a1)
        {
            v9 += a4 + (a3 - a1);
        }
        else
        {
            v9 += a1 - a3 - a5;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 22
4 22
5 4
6 4
7 4
8 22
9 23
<<<sep_out_sample>>>
add %edi,%edx
add %edx,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%eax
sub %r8d,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (a5 < a2)
        {
            v6 += a5 + a1;
        }
        else
        {
            v6 += a5 - a3 * a2;
        }
    }
    v8 = a2 - a2 - (a5 - a1);
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 16
6 17
7 18
<<<sep_out_sample>>>
cmp %esi,%edi
jge 9 <func1+0x9>
lea (%rsi,%rsi,1),%eax
jmp 12 <func1+0x12>
lea (%rsi,%r8,1),%eax
imul %edx,%eax
sub %edi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a1 < a2)
    {
        v6 = a2 + a2;
    }
    else
    {
        v6 = ((a2 + a5) * a3) - a1;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        if (a2 < a4)
        {
            v7 += a3 + a2 - a1;
        }
        else
        {
            v7 += (a5 - a5) - a1;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 10
6 10
7 10
8 24
9 24
10 24
11 24
12 24
13 25
<<<sep_out_sample>>>
mov %edi,%eax
sub %ecx,%eax
cmp %edi,%esi
jge 17 <func1+0x17>
mov %r8d,%r9d
imul %ecx,%r9d
mov %esi,%eax
sub %edx,%eax
imul %r9d,%eax
add %edx,%edi
add %esi,%edi
add %edi,%r8d
add %r8d,%ecx
add %ecx,%eax
add %edx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a2 < a1)
    {
        v6 = a5 * a4 * (a2 - a3);
    }
    else
    {
        v6 = a2 - (a2 - a1 + a4);
    }
    v7 = a3 + a2;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 10
2 10
3 4
4 4
5 6
6 6
7 6
8 6
9 6
10 13
11 13
12 13
13 13
14 13
15 12
16 13
17 14
<<<sep_out_sample>>>
mov %esi,%r9d
neg %r9d
sub %edx,%r9d
cmp %esi,%r8d
jle 1f <func1+0x1f>
lea (%rcx,%rsi,1),%eax
imul %edi,%eax
mov %r8d,%r11d
sub %eax,%r11d
mov %r11d,%eax
jmp 29 <func1+0x29>
mov %edi,%eax
sub %edx,%eax
imul %esi,%eax
imul %edi,%eax
cmp %edx,%eax
jge 39 <func1+0x39>
mov %edi,%r10d
neg %r10d
imul %r8d,%r10d
jmp 40 <func1+0x40>
mov %r8d,%r10d
imul %ecx,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %r9d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += (a5 - a4) + a5;
    }
    v8 = a5 - a5 - a2 - a3;
    if (a2 < a5)
    {
        v9 = a5 - (a4 + a2) * a1;
    }
    else
    {
        v9 = ((a1 - a3) * a2) * a1;
    }
    if (v9 < a3)
    {
        v10 = (a3 - a1 - a3) * a5;
    }
    else
    {
        v10 = a4 - (a4 - (a4 * a5));
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 9
4 10
5 10
6 12
7 12
8 12
9 12
10 12
11 12
12 16
13 16
14 16
15 16
16 18
17 18
18 20
19 20
20 20
21 20
22 24
23 24
24 26
25 26
26 26
27 26
28 26
29 26
30 26
31 27
<<<sep_out_sample>>>
lea (%rdx,%rdx,1),%eax
cmp %ecx,%edx
jge 12 <func1+0x12>
lea (%r8,%rcx,1),%eax
lea (%rdi,%rsi,1),%r9d
sub %r9d,%eax
lea (%rdx,%r8,2),%r9d
lea (%r9,%rcx,1),%r10d
test %r8d,%r8d
jle 28 <func1+0x28>
mov %r8d,%r9d
imul %edx,%r9d
jmp 32 <func1+0x32>
mov %esi,%r9d
sub %r8d,%r9d
imul %edi,%r9d
add %edi,%edx
add %esi,%edx
add %r8d,%edx
add %ecx,%edx
add %eax,%edx
add %r10d,%edx
add %r9d,%edx
lea -0x1(%rcx),%eax
imul %eax,%edi
sub %ecx,%edi
lea (%rdx,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a3 < a4)
    {
        v6 = (a5 + a4) - (a1 + a2);
    }
    else
    {
        v6 = a3 + a3;
    }
    v7 = a5 + a3 + a4 + a5;
    if (v8 < a5)
    {
        v8 = a5 * a3;
    }
    else
    {
        v8 = a1 * (a2 - a5);
    }
    v9 = a4 * a1 - a1 - a4;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 6
7 12
8 12
9 13
10 13
11 15
12 15
13 15
14 19
15 19
16 19
17 22
18 22
19 22
20 22
21 22
22 22
23 22
24 21
25 21
26 21
27 22
28 23
<<<sep_out_sample>>>
cmp %ecx,%edi
jge 12 <func1+0x12>
lea (%rcx,%rsi,1),%r9d
imul %ecx,%r9d
imul %edi,%r9d
jmp 1f <func1+0x1f>
mov %ecx,%r9d
sub %edi,%r9d
add %ecx,%r9d
imul %r8d,%r9d
cmp %edx,%r8d
jle 2d <func1+0x2d>
mov %esi,%eax
imul %edi,%eax
add %ecx,%eax
jmp 33 <func1+0x33>
mov %r8d,%eax
imul %edi,%eax
mov %r8d,%r10d
imul %edx,%r10d
add %esi,%r10d
imul %edx,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a1 < a4)
    {
        v6 = a4 * (a4 + a2) * a1;
    }
    else
    {
        v6 = a5 * (a4 - a1 + a4);
    }
    if (a3 < a5)
    {
        v7 = a4 + a2 * a1;
    }
    else
    {
        v7 = (a5 - (a4 - a4)) * a1;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        if (a4 < a1)
        {
            v8 += a5 + a5 * a3;
        }
        else
        {
            v8 += (a3 * a5) + a2;
        }
    }
    v10 = a3 * (a5 * a3 + a2);
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 10
11 12
12 12
13 14
14 14
15 14
16 14
17 18
18 18
19 32
20 32
21 32
22 32
23 33
24 33
25 33
26 33
27 33
28 33
29 33
30 34
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
lea 0x1(%rcx,%rax,1),%eax
imul %ecx,%esi
imul %esi,%edi
add %edi,%edx
add %edx,%eax
mov %ecx,%edx
imul %ecx,%edx
imul %edx,%r8d
sub %r8d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a4 - a1 - a1;
    }
    v8 = a3 + a1 * (a2 * a4);
    v9 = a4 - a5 * (a4 * a4);
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 11
5 9
6 9
7 9
8 11
9 10
10 10
11 10
12 10
13 11
14 12
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += (a5 - a1) * a5;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        if (a1 < a2)
        {
            v8 += a2 * (a5 * a3);
        }
        else
        {
            v8 += a1 + a2 + a5;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 21
5 22
<<<sep_out_sample>>>
mov %esi,%eax
sub %r8d,%eax
sub %edx,%eax
imul %edx,%eax
mov %edi,%r9d
imul %edi,%r9d
add %r9d,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += (a2 + a4) - a2;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        if (a2 < a3)
        {
            v8 += a1 * a4 + a2;
        }
        else
        {
            v8 += a2 + a1 - a2;
        }
    }
    v10 = a3 * (a2 - a5 - a3);
    v11 = a1 * a1;
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 21
5 22
6 22
7 23
8 23
9 23
10 23
11 23
12 23
13 24
<<<sep_out_sample>>>
lea (%rdi,%rdi,1),%eax
mov %ecx,%r9d
sub %eax,%r9d
add %r8d,%r9d
mov %edx,%r10d
sub %esi,%r10d
cmp %r9d,%r8d
jg 21 <func1+0x21>
mov %ecx,%r10d
neg %r10d
imul %edx,%r10d
mov %esi,%eax
imul %edi,%eax
imul %r8d,%eax
sub %ecx,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %eax,%r9d
lea (%r9,%r10,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (v6 < a3)
        {
            v6 += a3 - a4 + a2;
        }
        else
        {
            v6 += a3 * a1 - a4;
        }
    }
    v8 = a5 + (a4 - (a1 + a1));
    if (v8 < a5)
    {
        v9 = a3 - a2;
    }
    else
    {
        v9 = ((a5 - a5) - a4) * a3;
    }
    v10 = a2 * a1 * a5 - a4;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 16
4 16
5 19
6 19
7 17
8 17
9 23
10 23
11 23
12 25
13 25
14 25
15 25
16 26
17 26
18 26
19 26
20 26
21 26
22 26
23 27
<<<sep_out_sample>>>
test %ecx,%ecx
jle 10 <func1+0x10>
mov %edi,%r9d
imul %ecx,%r9d
sub %esi,%r9d
jmp 1e <func1+0x1e>
mov %edi,%r9d
imul %ecx,%r9d
add %r8d,%r9d
imul %esi,%r9d
add %edx,%edi
lea (%rsi,%rdi,1),%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
add %eax,%edi
lea -0x1(%rsi),%eax
imul %r8d,%eax
sub %edx,%eax
add %edi,%eax
imul %edx,%r8d
sub %r8d,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (v6 < a4)
    {
        v6 = a1 * a4 - a2;
    }
    else
    {
        v6 = a2 * ((a1 * a4) + a5);
    }
    v7 = a1 + a3;
    v8 = ((a2 * a5) - a5) - a3;
    v9 = a2 - a5 * a3;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 10
11 12
12 15
13 15
14 15
15 15
16 15
17 13
18 13
19 13
20 15
21 14
22 14
23 15
24 16
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %r8d,%edx
add $0x1,%esi
imul %esi,%r8d
lea 0x1(%rdx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (v6 < a1)
        {
            v6 += a1 + a1;
        }
        else
        {
            v6 += a2 * a2 + a3;
        }
    }
    v8 = a5 + (a2 * a5) - a4;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 16
5 16
6 17
7 18
<<<sep_out_sample>>>
cmp %edx,%r8d
jge 15 <func1+0x15>
mov %ecx,%eax
imul %esi,%eax
mov %r8d,%r9d
sub %eax,%r9d
mov %r9d,%eax
jmp 1f <func1+0x1f>
mov %edi,%eax
imul %edx,%eax
imul %ecx,%eax
sub %edx,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a5 < a3)
    {
        v6 = a5 - (a4 * a2);
    }
    else
    {
        v6 = a4 * (a1 * a3) - a3;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        if (a5 < a2)
        {
            v7 += a3 * a3 - a5;
        }
        else
        {
            v7 += a4 - (a4 + a2);
        }
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a1)
    {
        v9 += (a5 - a2) + a1;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 6
9 10
10 10
11 10
12 10
13 29
14 29
15 29
16 29
17 29
18 30
<<<sep_out_sample>>>
test %ecx,%ecx
jle 12 <func1+0x12>
mov %ecx,%r9d
sub %edx,%r9d
add %r8d,%r9d
add %ecx,%r9d
jmp 1b <func1+0x1b>
lea (%rcx,%rdi,2),%eax
mov %edx,%r9d
sub %eax,%r9d
test %r8d,%r8d
jle 31 <func1+0x31>
mov %esi,%eax
imul %r8d,%eax
mov %ecx,%r10d
sub %eax,%r10d
mov %r10d,%eax
jmp 38 <func1+0x38>
mov %edi,%eax
sub %ecx,%eax
imul %esi,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (v6 < a4)
    {
        v6 = (a4 - a3) + a5 + a4;
    }
    else
    {
        v6 = a3 - ((a1 + a1) + a4);
    }
    v7 = a5 * (a4 - a4) * a2;
    if (v7 < a5)
    {
        v8 = a4 - a2 * a5;
    }
    else
    {
        v8 = (a2 * a1) - a4 * a2;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        v9 += a5 * a2 - a2;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 13
12 13
13 15
14 15
15 15
16 15
17 15
18 15
19 19
20 19
21 19
22 26
23 26
24 26
25 26
26 26
27 26
28 27
<<<sep_out_sample>>>
lea (%rcx,%rdx,1),%r9d
test %ecx,%ecx
jle 12 <func1+0x12>
lea (%rsi,%rdx,1),%r9d
add %edi,%r9d
sub %r8d,%r9d
lea (%r8,%rdi,1),%eax
test %edi,%edi
jg 28 <func1+0x28>
mov $0x1,%eax
sub %r8d,%eax
imul %ecx,%eax
sub %r8d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (v6 < a4)
    {
        v6 = a1 + (a2 + a3) - a5;
    }
    else
    {
        v6 = a4 + a3;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        if (a2 < a5)
        {
            v7 += a4 - a4 * a1;
        }
        else
        {
            v7 += a1 - a4 * a2;
        }
    }
    if (v9 < a1)
    {
        v9 = a5 + a1;
    }
    else
    {
        v9 = (a4 - (a4 * a5)) - a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 6
7 26
8 24
9 24
10 30
11 30
12 30
13 30
14 32
15 32
16 32
17 32
18 32
19 32
20 33
<<<sep_out_sample>>>
lea 0x1(%rdi),%eax
imul %ecx,%eax
add %edi,%eax
add %edx,%eax
add %esi,%eax
add %eax,%r8d
add %r8d,%ecx
mov %esi,%r9d
imul %esi,%r9d
add %r9d,%ecx
mov %esi,%eax
sub %edx,%eax
mov %eax,%edx
imul %edi,%esi
sub %esi,%edx
lea 0x1(%rcx,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = (a2 - (a5 - a5)) * a2;
    v7 = (a2 - a3) - a1 * a2;
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += (a5 * a4) - a5;
    }
    v10 = a4 + a1 * a4;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 12
4 12
5 12
6 12
7 12
8 4
9 4
10 12
11 5
12 5
13 5
14 5
15 5
16 12
17 13
<<<sep_out_sample>>>
cmp %esi,%edx
jge c <func1+0xc>
mov %ecx,%r9d
sub %esi,%r9d
jmp 1b <func1+0x1b>
mov %ecx,%r9d
sub %esi,%r9d
mov %ecx,%eax
imul %r8d,%eax
add %eax,%r9d
cmp %r8d,%esi
jle 2e <func1+0x2e>
mov %r8d,%eax
imul %edi,%eax
imul %r8d,%eax
sub %esi,%eax
jmp 3c <func1+0x3c>
mov $0x1,%eax
sub %esi,%eax
imul %ecx,%eax
imul %r8d,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    if (a3 < a2)
    {
        v6 = a4 - a2;
    }
    else
    {
        v6 = a4 - a2 + (a4 * a5);
    }
    if (a5 < a2)
    {
        v7 = ((a5 * a1) * a5) - a2;
    }
    else
    {
        v7 = (a4 - (a2 * a4)) * a5;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        if (v8 < a4)
        {
            v8 += a2 * a1;
        }
        else
        {
            v8 += a2 - (a5 + a5);
        }
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a3)
    {
        v10 += (a3 * a3) * a5;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 10
10 10
11 12
12 12
13 14
14 14
15 14
16 14
17 14
18 18
19 18
20 18
21 18
22 37
23 37
24 37
25 37
26 37
27 37
28 38
<<<sep_out_sample>>>
lea (%rcx,%rsi,1),%eax
mov %ecx,%r9d
imul %edx,%r9d
test %ecx,%ecx
cmovg %r9d,%eax
lea 0x1(%rdi,%rdx,1),%r9d
add %esi,%r9d
add %r9d,%r8d
lea (%r8,%rcx,1),%r9d
add %r9d,%eax
sub %ecx,%edx
sub %esi,%edx
add %edx,%edi
lea 0x1(%rax,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    if (v6 < a4)
    {
        v6 = a4 * a3;
    }
    else
    {
        v6 = a4 + a2;
    }
    v7 = (a3 - a4) - a2 + a1;
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += a1 * a5 + a3;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a5)
    {
        if (v6 < a5)
        {
            v10 += a3 + a4 * a2;
        }
        else
        {
            v10 += (a5 * a1) + a2;
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 6
3 6
4 6
5 6
6 30
7 30
8 30
9 30
10 30
11 12
12 12
13 12
14 30
15 31
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
mov %r8d,%r9d
sub %edi,%r9d
add %r9d,%eax
sub %r8d,%edi
add %edi,%edx
imul %edx,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a5 - a1;
    if (a2 < a2)
    {
        v7 = ((a2 * a4) * a3) + a3;
    }
    else
    {
        v7 = a4 * (a1 - a5 + a3);
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 13
2 13
3 13
4 13
5 4
6 4
7 13
8 11
9 11
10 11
11 13
12 14
<<<sep_out_sample>>>
lea (%rsi,%rcx,2),%r10d
imul %ecx,%r10d
mov %ecx,%r9d
imul %r8d,%r9d
mov %edx,%eax
imul %edx,%eax
add %r9d,%eax
cmp %edi,%eax
jge 2d <func1+0x2d>
mov %ecx,%r11d
sub %edi,%r11d
mov %esi,%r9d
imul %edx,%r9d
add %r11d,%r9d
jmp 37 <func1+0x37>
mov %edx,%r9d
neg %r9d
imul %edx,%r9d
lea (%rdi,%rdx,1),%r11d
add %esi,%r11d
add %r8d,%r11d
add %r11d,%ecx
add %r10d,%ecx
add %ecx,%eax
add %r9d,%eax
sub %esi,%edx
imul %edx,%r8d
imul %r8d,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a1 < a1)
    {
        v6 = (a1 - a3 * a3) - a2;
    }
    else
    {
        v6 = (a4 + a2 + a4) * a4;
    }
    v7 = a4 * a5 + a3 * a3;
    if (v7 < a1)
    {
        v8 = (a4 - a1) + a2 * a3;
    }
    else
    {
        v8 = (a4 - (a4 + a3)) * a3;
    }
    v9 = (a3 - a2) * a5 * a1;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 12
4 12
5 12
6 12
7 12
8 13
9 13
10 15
11 15
12 15
13 15
14 15
15 15
16 19
17 19
18 19
19 22
20 22
21 22
22 22
23 22
24 22
25 22
26 21
27 21
28 21
29 22
30 23
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %ecx,%edi
sub %r8d,%edi
lea 0x1(%rax,%rdi,1),%eax
sub %esi,%edx
imul %edx,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = (a4 + a1) - a5;
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += (a5 + a3) * a2;
    }
    v9 = a3 * a4 - a4 * a2;
    v10 = 0;
    for (v11 = 0; v11++; v11<a5)
    {
        v10 += a3 + a5 - a1;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 16
4 16
5 4
6 4
7 16
8 10
9 10
10 16
11 17
<<<sep_out_sample>>>
test %edi,%edi
jle 13 <func1+0x13>
mov %r8d,%r9d
imul %ecx,%r9d
sub %edi,%r9d
sub %edi,%r9d
jmp 21 <func1+0x21>
mov %esi,%r9d
imul %edx,%r9d
sub %ecx,%r9d
imul %esi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
add %ecx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (v6 < a1)
    {
        v6 = a5 * a4 - a1 - a1;
    }
    else
    {
        v6 = a2 * (a2 * a3 - a4);
    }
    v7 = a4 + a2;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 13
13 13
14 13
15 13
16 13
17 12
18 13
19 14
<<<sep_out_sample>>>
mov %edi,%eax
imul %edi,%eax
sub %r8d,%eax
sub %ecx,%eax
lea 0x1(%rdi,%rax,1),%eax
add %edx,%eax
add %eax,%esi
add %r8d,%esi
add %esi,%ecx
sub %edi,%edx
sub %r8d,%edx
sub %edi,%edx
lea 0x1(%rcx,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = a3 - a1 - a5 - a1;
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        if (v7 < a1)
        {
            v7 += (a5 + a1) + a4;
        }
        else
        {
            v7 += a4 + (a4 * a1);
        }
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        v9 += a4 * a5 - a5;
    }
    if (a2 < a2)
    {
        v11 = (a1 + a1) * a2;
    }
    else
    {
        v11 = ((a1 * a1) - a5) - a4;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 28
2 28
3 28
4 28
5 30
6 30
7 30
8 30
9 30
10 4
11 4
12 4
13 30
14 31
<<<sep_out_sample>>>
cmp %ecx,%esi
jge c <func1+0xc>
mov %r8d,%r9d
sub %esi,%r9d
jmp 17 <func1+0x17>
lea (%rdx,%rdi,1),%r9d
imul %r8d,%r9d
add %ecx,%r9d
mov %edi,%eax
cmp %r8d,%ecx
jl 26 <func1+0x26>
lea (%rdi,%rdi,1),%eax
imul %esi,%eax
add %edx,%eax
add %edx,%edi
add %esi,%edi
add %r8d,%edi
add %ecx,%edi
add %r9d,%edi
add %edi,%eax
lea (%rax,%rcx,2),%eax
not %edx
imul %edx,%esi
add %esi,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a2 < a4)
    {
        v6 = a5 - a2;
    }
    else
    {
        v6 = ((a3 + a1) * a5) + a4;
    }
    if (a4 < a5)
    {
        v7 = a2 * (a1 - a1) + a1;
    }
    else
    {
        v7 = ((a1 + a1) * a2) + a3;
    }
    v8 = a4 + a4;
    v9 = a5 - (a2 + a3 * a2);
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 14
10 12
11 12
12 18
13 18
14 18
15 22
16 22
17 22
18 22
19 22
20 22
21 22
22 21
23 21
24 21
25 22
26 23
<<<sep_out_sample>>>
mov %edi,%r9d
sub %r8d,%r9d
test %r8d,%r8d
jle 18 <func1+0x18>
mov %esi,%eax
imul %esi,%eax
imul %edx,%eax
sub %r8d,%eax
jmp 1d <func1+0x1d>
mov %edi,%eax
imul %edi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a1 - a5;
    if (v7 < a5)
    {
        v7 = (a2 * a2) * a3 - a5;
    }
    else
    {
        v7 = a1 * a1;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 5
4 5
5 7
6 7
7 7
8 7
9 7
10 11
11 11
12 13
13 13
14 13
15 13
16 13
17 13
18 14
<<<sep_out_sample>>>
mov %ecx,%eax
sub %edi,%eax
add %edi,%edx
add %esi,%edx
add %r8d,%edx
add %ecx,%edx
add %r8d,%esi
sub %edi,%esi
imul %esi,%ecx
add %edx,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = (a5 + a2 - a1) * a4;
    v7 = (a4 - a1 + a5) - a5;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 5
2 5
3 6
4 6
5 6
6 6
7 4
8 4
9 4
10 6
11 6
12 7
<<<sep_out_sample>>>
cmp %ecx,%edi
jge 13 <func1+0x13>
mov %edx,%r9d
sub %edi,%r9d
imul %ecx,%r9d
add %r8d,%r9d
jmp 1a <func1+0x1a>
lea (%r8,%rsi,2),%r9d
sub %edi,%r9d
cmp %esi,%r8d
jle 25 <func1+0x25>
lea (%r8,%r8,1),%eax
jmp 34 <func1+0x34>
lea (%rdx,%rsi,1),%eax
mov %ecx,%r11d
sub %eax,%r11d
mov %r11d,%eax
add %r8d,%eax
lea 0x1(%rdx),%r10d
imul %ecx,%r10d
add %r8d,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a1 < a4)
    {
        v6 = a5 + (a3 - a1) * a4;
    }
    else
    {
        v6 = a2 + a5 + a2 - a1;
    }
    if (a2 < a5)
    {
        v7 = a5 + a5;
    }
    else
    {
        v7 = a5 - (a3 + a2 - a4);
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += a2 + a2;
    }
    v10 = a5 + (a4 * a3 + a4);
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 12
11 12
12 14
13 14
14 18
15 18
16 18
17 18
18 18
19 25
20 25
21 25
22 26
23 26
24 26
25 26
26 26
27 26
28 26
29 27
<<<sep_out_sample>>>
lea 0x1(%rcx,%r8,1),%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (a1 < a5)
        {
            v6 += a3 + a1 * a4;
        }
        else
        {
            v6 += a2 * a5 * a1;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += (a3 - a2) + a3;
    }
    v10 = a4 + a5;
    v11 = 0;
    for (v12 = 0; v12++; v12<a5)
    {
        v11 += a3 + a5 + a3;
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 27
2 27
3 27
4 27
5 27
6 27
7 28
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
lea (%r8,%rcx,1),%eax
mov %edi,%r9d
sub %esi,%r9d
add %r9d,%eax
lea (%rax,%rdi,2),%r8d
mov %edx,%eax
imul %edi,%eax
imul %ecx,%eax
imul %edi,%eax
add %r8d,%eax
sub %edx,%edi
imul %edi,%esi
imul %esi,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a1 - a2;
    v7 = a1 + a1;
    v8 = (a3 * a1) * a4 * a1;
    v9 = (a1 - a3) * a2 * a4;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 8
2 8
3 8
4 8
5 4
6 4
7 8
8 8
9 6
10 6
11 6
12 6
13 8
14 7
15 7
16 7
17 8
18 9
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a2 + (a3 - a2);
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += (a3 - a3) + a1;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a2)
    {
        v10 += a5 * (a4 - a3);
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 19
2 19
3 19
4 19
5 20
<<<sep_out_sample>>>
mov %ecx,%r9d
sub %edi,%r9d
add %edx,%r9d
mov %ecx,%eax
sub %r8d,%eax
cmp %edi,%ecx
jle 19 <func1+0x19>
lea (%rsi,%r8,1),%eax
lea (%rax,%rdx,2),%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %r9d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += (a3 * a5) + a2;
    }
    v8 = a3 + (a4 - a1);
    if (a1 < a4)
    {
        v9 = (a2 + a5) + (a3 + a3);
    }
    else
    {
        v9 = a4 - a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 9
4 16
5 16
6 10
7 10
8 12
9 12
10 18
11 18
12 18
13 18
14 18
15 18
16 19
<<<sep_out_sample>>>
mov %edx,%eax
sub %r8d,%eax
imul %r8d,%edi
cmp $0x2,%esi
cmovge %edi,%eax
mov %edx,%edi
imul %ecx,%edi
add %r8d,%edi
add %edi,%eax
add %eax,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a1 - a3;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        if (a3 < a5)
        {
            v8 += a4 - a3;
        }
        else
        {
            v8 += a5 * a4 - a3;
        }
    }
    if (v9 < a2)
    {
        v10 = a1 * a5;
    }
    else
    {
        v10 = a3 - a5;
    }
    v11 = a5 + (a3 * a4) - a1;
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 27
2 27
3 23
4 23
5 23
6 29
7 29
8 29
9 30
10 30
11 30
12 30
13 30
14 31
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%eax
lea (%rax,%r8,2),%eax
imul %edi,%edi
sub %edi,%edx
add %edx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a1 * a2 - a2;
    }
    v8 = a5 + a5;
    v9 = a3 - a1 * a1 + a5;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 11
5 11
6 10
7 10
8 10
9 11
10 12
<<<sep_out_sample>>>
mov %edx,%r9d
sub %esi,%r9d
mov %r8d,%eax
sub %edi,%eax
add %eax,%r9d
mov %edi,%eax
sub %esi,%eax
mov %edx,%r10d
imul %ecx,%r10d
cmp %esi,%edx
cmovg %r10d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = (a3 - a2) + (a5 - a1);
    if (a2 < a3)
    {
        v7 = (a3 + a4 - a4) * a4;
    }
    else
    {
        v7 = a1 - a4 - a2 + a4;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        if (a5 < a1)
        {
            v8 += a1 + a4 + a1;
        }
        else
        {
            v8 += a5 + a4;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 4
6 11
7 11
8 7
9 7
10 7
11 7
12 25
13 25
14 25
15 25
16 25
17 25
18 26
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %eax,%ecx
lea (%r8,%rsi,2),%eax
add %eax,%esi
lea (%rcx,%rsi,1),%eax
sub %edi,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = (a2 + a5) + a2 + a2;
    v7 = a3 - a1;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 4
7 6
8 5
9 6
10 7
<<<sep_out_sample>>>
lea 0x1(%rsi,%r8,1),%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a3 + a1 * a5;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += a2 - a1;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a4)
    {
        v10 += a1 - a4 * a2;
    }
    v12 = a2 - a4 + (a4 + a5);
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 20
2 20
3 20
4 20
5 20
6 20
7 21
<<<sep_out_sample>>>
lea (%rsi,%rsi,2),%r9d
imul %edx,%r9d
lea (%rdx,%rcx,1),%eax
mov %ecx,%r10d
sub %edi,%r10d
cmp %edi,%edx
jl 23 <func1+0x23>
mov %ecx,%r10d
imul %esi,%r10d
imul %r8d,%r10d
add %esi,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a3 * (a2 + a2 + a2);
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += a5 * a4 + a2;
    }
    v9 = a1 - (a1 - a3) + a4;
    if (a3 < a1)
    {
        v10 = (a4 - a2 - a1) + a2;
    }
    else
    {
        v10 = a2 + a4 * a2 * a5;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 10
4 13
5 13
6 11
7 11
8 17
9 17
10 17
11 17
12 19
13 19
14 19
15 19
16 19
17 19
18 19
19 20
<<<sep_out_sample>>>
cmp %esi,%edi
jge 10 <func1+0x10>
lea -0x1(%r8),%eax
imul %ecx,%eax
add %r8d,%eax
jmp 1b <func1+0x1b>
mov %esi,%eax
imul %ecx,%eax
imul %r8d,%eax
sub %edi,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a1 + a4 * a1;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += (a5 * a5) * a1;
    }
    if (a1 < a2)
    {
        v10 = (a5 * a4) - a4 + a5;
    }
    else
    {
        v10 = a5 * (a2 * a4) - a1;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 14
2 14
3 16
4 16
5 16
6 16
7 20
8 20
9 20
10 20
11 22
12 22
13 22
14 22
15 22
16 23
<<<sep_out_sample>>>
mov %edi,%eax
imul %edx,%eax
imul %eax,%eax
cmp %edx,%edi
jle 1c <func1+0x1c>
mov %r8d,%r9d
imul %ecx,%r9d
imul %edx,%r9d
sub %esi,%r9d
jmp 29 <func1+0x29>
mov %edi,%r9d
not %r9d
imul %esi,%r9d
add %r8d,%r9d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a1 * a3 * a1 * a3;
    if (a3 < a1)
    {
        v7 = ((a5 * a4) * a3) - a2;
    }
    else
    {
        v7 = a5 - (a2 + a2 * a1);
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 5
5 5
6 7
7 7
8 7
9 7
10 7
11 11
12 11
13 11
14 11
15 13
16 13
17 13
18 13
19 13
20 13
21 14
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
imul %edx,%r8d
add %r8d,%eax
imul %esi,%ecx
add $0x1,%ecx
imul %ecx,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a3 * a5;
    v7 = a3 + (a4 * a2) * a3;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 6
7 5
8 5
9 5
10 6
11 7
<<<sep_out_sample>>>
test %esi,%esi
jle 13 <func1+0x13>
mov %r8d,%r9d
sub %esi,%r9d
imul %ecx,%r9d
add %esi,%r9d
jmp 1f <func1+0x1f>
mov %edi,%r9d
sub %edx,%r9d
sub %esi,%r9d
add %edi,%r9d
cmp %edx,%r9d
jge 36 <func1+0x36>
mov %r8d,%r10d
imul %ecx,%r10d
mov %esi,%eax
imul %edi,%eax
imul %r10d,%eax
jmp 3f <func1+0x3f>
mov %r8d,%eax
sub %ecx,%eax
sub %edi,%eax
sub %ecx,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (v6 < a2)
    {
        v6 = ((a5 - a2) * a4) + a2;
    }
    else
    {
        v6 = (a1 - a3) - a2 + a1;
    }
    if (v6 < a3)
    {
        v7 = a5 * a4 * (a2 * a1);
    }
    else
    {
        v7 = a5 - a4 - a1 - a4;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 12
13 12
14 14
15 14
16 14
17 14
18 14
19 14
20 18
21 18
22 18
23 18
24 20
25 20
26 20
27 20
28 20
29 20
30 21
<<<sep_out_sample>>>
mov %edx,%r9d
imul %ecx,%r9d
add %esi,%r9d
lea (%rcx,%rdi,2),%eax
sub %r9d,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += (a5 * a4) * a1;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += a4 * (a3 - a2);
    }
    v10 = ((a1 + a3) - a3) + a4;
    v11 = a1 - (a2 + (a3 * a4));
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 15
2 15
3 15
4 15
5 16
6 16
7 16
8 16
9 16
10 16
11 17
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
lea (%rsi,%rcx,2),%edx
lea (%rdx,%rax,1),%eax
mov $0x1,%edx
sub %r8d,%edx
imul %r8d,%edx
add %eax,%edx
imul %r8d,%r8d
imul %ecx,%edi
sub %edi,%r8d
lea (%rdx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a2 + a4;
    v7 = a5 - a5 * a5;
    v8 = (a5 * a5) - a4 * a1;
    v9 = 0;
    for (v10 = 0; v10++; v10<a1)
    {
        v9 += a4 + a3;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 12
2 12
3 12
4 4
5 12
6 5
7 5
8 5
9 12
10 6
11 6
12 6
13 12
14 13
<<<sep_out_sample>>>
lea (%r8,%rdx,1),%eax
mov %r8d,%r9d
sub %edx,%r9d
cmp %r8d,%ecx
cmovl %eax,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
imul %edx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a4 < a5)
    {
        v6 = a5 + a3;
    }
    else
    {
        v6 = ((a4 - a3) + a5) - a4;
    }
    v7 = a5 * (a3 - a2 + a2);
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 6
6 13
7 13
8 13
9 13
10 13
11 12
12 13
13 14
<<<sep_out_sample>>>
test %edx,%edx
jle 11 <func1+0x11>
mov %edx,%eax
sub %r8d,%eax
imul %ecx,%eax
add %r8d,%eax
jmp 16 <func1+0x16>
mov %ecx,%eax
imul %ecx,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %esi,%edx
add %edx,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
add %esi,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a1 * a2;
    }
    if (v8 < a3)
    {
        v8 = (a3 - a5) * a4 + a5;
    }
    else
    {
        v8 = a4 * a4;
    }
    v9 = a1 + a2;
    v10 = 0;
    for (v11 = 0; v11++; v11<a5)
    {
        if (v11 < a2)
        {
            v10 += (a4 - a2) - a1;
        }
        else
        {
            v10 += a4 + a1 + a4;
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 11
8 15
9 15
10 30
11 30
12 30
13 30
14 30
15 17
16 30
17 31
<<<sep_out_sample>>>
mov %edx,%r10d
sub %esi,%r10d
mov %edx,%r9d
imul %ecx,%r9d
sub %esi,%r9d
add %edx,%r9d
mov $0x0,%eax
cmp $0x1,%edi
jg 25 <func1+0x25>
mov %r8d,%eax
imul %edx,%eax
add %edi,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r10d,%ecx
lea 0x1(%r9,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a3 - a2;
    if (a2 < a2)
    {
        v7 = a5 * a4;
    }
    else
    {
        v7 = a3 * a4 - a2 + a3;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += a5 + a4 * a4;
    }
    if (v9 < a1)
    {
        v10 = (a1 + (a2 - a2)) - a1;
    }
    else
    {
        v10 = a1 + a5 * a3;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 11
4 11
5 11
6 11
7 20
8 18
9 18
10 24
11 24
12 24
13 26
14 26
15 26
16 26
17 26
18 26
19 26
20 27
<<<sep_out_sample>>>
mov %edx,%r10d
imul %edi,%r10d
cmp %ecx,%edx
jle 16 <func1+0x16>
mov %esi,%r9d
sub %r8d,%r9d
add %ecx,%r9d
jmp 26 <func1+0x26>
mov $0x1,%r9d
sub %edi,%r9d
imul %edx,%r9d
add %r8d,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
add %r8d,%ecx
add %ecx,%edx
add %edx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a3 * a1;
    if (a4 < a3)
    {
        v7 = a4 - (a5 - a2);
    }
    else
    {
        v7 = a5 - (a1 * a3 - a3);
    }
    v8 = a2 + (a4 + a5 + a3);
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 5
4 5
5 7
6 7
7 7
8 7
9 11
10 11
11 11
12 11
13 14
14 14
15 14
16 14
17 14
18 14
19 13
20 13
21 13
22 14
23 15
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += (a3 - a4) - a3;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += (a4 - a4) * a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 14
2 14
3 14
4 14
5 15
<<<sep_out_sample>>>
add %edx,%edi
add %esi,%edi
add %edi,%r8d
add %r8d,%ecx
add %edx,%esi
mov $0x1,%eax
sub %esi,%eax
imul %eax,%edx
lea 0x1(%rcx,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a3 - (a2 + a3) * a3;
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        if (v6 < a5)
        {
            v7 += (a5 - a4) - a3;
        }
        else
        {
            v7 += a2 + a3 * a3;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 4
6 4
7 4
8 4
9 17
10 18
<<<sep_out_sample>>>
lea (%rcx,%rdi,1),%r9d
cmp %edi,%ecx
jl 13 <func1+0x13>
mov %ecx,%eax
imul %esi,%eax
mov %edx,%r9d
sub %eax,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
imul %edi,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a4 < a1)
    {
        v6 = (a4 - a4 + a4) + a1;
    }
    else
    {
        v6 = a3 - a4 * a2;
    }
    v7 = a1 * a4;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 4
3 4
4 10
5 10
6 10
7 10
8 13
9 13
10 13
11 13
12 13
13 12
14 13
15 14
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
lea (%rdx,%rcx,2),%r8d
lea (%r8,%rax,1),%eax
imul %ecx,%edi
sub %edi,%esi
add %edx,%esi
add %esi,%eax
sub %ecx,%eax
sub %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a4 + a3;
    v7 = a3 - (a1 * a4 - a2);
    v8 = a5 - (a4 + a5) - a3;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 7
2 7
3 7
4 4
5 7
6 5
7 5
8 5
9 7
10 6
11 7
12 8
<<<sep_out_sample>>>
test %ecx,%ecx
jle 12 <func1+0x12>
mov %edx,%r9d
sub %ecx,%r9d
add %edx,%r9d
add %r8d,%r9d
jmp 1f <func1+0x1f>
mov %ecx,%r9d
imul %edx,%r9d
add %esi,%r9d
sub %edi,%r9d
mov %ecx,%eax
cmp $0x1,%r8d
jg 30 <func1+0x30>
lea (%rsi,%r8,1),%eax
sub %edx,%eax
imul %edx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %r9d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a4 - a2 * a5;
    }
    if (v6 < a4)
    {
        v8 = (a3 - (a4 - a3)) + a5;
    }
    else
    {
        v8 = ((a4 * a3) + a2) - a1;
    }
    if (v7 < a5)
    {
        v9 = a4 + a3 - a3;
    }
    else
    {
        v9 = a3 * ((a2 + a5) - a3);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 11
8 15
9 15
10 15
11 15
12 19
13 17
14 17
15 23
16 23
17 23
18 25
19 25
20 25
21 25
22 25
23 25
24 26
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a1 - a3 + a5;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += (a3 * a2) + a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 14
2 14
3 14
4 14
5 15
<<<sep_out_sample>>>
mov %esi,%eax
sub %r8d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %eax,%ecx
add $0x1,%eax
imul %eax,%edi
lea 0x1(%rcx,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a2 - a5;
    if (a4 < a4)
    {
        v7 = a3 + a3;
    }
    else
    {
        v7 = (a2 - a5) * a1 + a1;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += (a2 + a3) - a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 18
4 18
5 18
6 18
7 18
8 11
9 11
10 18
11 19
<<<sep_out_sample>>>
lea (%r8,%r8,1),%eax
mov %edx,%r9d
sub %edi,%r9d
cmp %edi,%ecx
cmovl %eax,%r9d
cmp %edx,%edi
jge 1d <func1+0x1d>
lea (%rsi,%rcx,2),%eax
imul %r8d,%eax
jmp 28 <func1+0x28>
mov %r8d,%eax
imul %esi,%eax
sub %edx,%eax
add %r8d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a4 < a1)
    {
        v6 = (a5 - (a4 - a5)) + a4;
    }
    else
    {
        v6 = a3 + (a2 - a2) - a1;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        if (v8 < a2)
        {
            v7 += a1 * a4 * a3;
        }
        else
        {
            v7 += (a5 * a3) - a1;
        }
    }
    if (a1 < a3)
    {
        v9 = a5 * (a4 + a2 + a4);
    }
    else
    {
        v9 = (a5 * a2) - a3 + a5;
    }
    v10 = a2 - a2;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 6
6 24
7 24
8 26
9 26
10 26
11 30
12 30
13 30
14 30
15 33
16 33
17 33
18 33
19 33
20 33
21 34
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (a4 < a4)
        {
            v6 += (a1 - a3) + a5;
        }
        else
        {
            v6 += (a3 + a5) * a4;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += a4 * (a5 - a3);
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a2)
    {
        v10 += a3 + a2 + a4;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 26
2 26
3 26
4 26
5 27
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %edx,%r8d
add %r8d,%ecx
imul %esi,%edi
lea 0x1(%rcx,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a5 < a5)
    {
        v6 = (a1 - a5 - a4) * a4;
    }
    else
    {
        v6 = a1 * a2;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a4 + a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 10
6 17
7 18
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
sub %r8d,%edx
add %ecx,%edx
imul %ecx,%edx
add %edx,%eax
imul %ecx,%r8d
imul %r8d,%ecx
add %ecx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = ((a3 - a5) + a4) * a4;
    if (a5 < a5)
    {
        v7 = (a2 * a5) * (a3 - a2);
    }
    else
    {
        v7 = a4 * (a4 * a5) + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 13
2 13
3 13
4 13
5 4
6 4
7 4
8 13
9 11
10 11
11 11
12 13
13 14
<<<sep_out_sample>>>
mov $0x0,%eax
cmp %r8d,%esi
jge 19 <func1+0x19>
mov %edi,%eax
imul %edi,%eax
mov %esi,%r9d
imul %r8d,%r9d
sub %r9d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a2 < a5)
    {
        v6 = (a1 * a1) - a2 * a5;
    }
    else
    {
        v6 = (a1 - a2 + a2) - a1;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a5 * a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 6
7 6
8 6
9 17
10 17
11 17
12 17
13 17
14 18
<<<sep_out_sample>>>
mov %ecx,%eax
sub %r8d,%eax
lea (%rcx,%rdi,1),%r9d
cmp %ecx,%r8d
cmovge %r9d,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += (a5 * a4) * a5;
    }
    if (a5 < a4)
    {
        v8 = a4 - a5;
    }
    else
    {
        v8 = a4 + a1;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        v9 += a3 - a4;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 11
5 11
6 22
7 22
8 22
9 22
10 22
11 23
<<<sep_out_sample>>>
lea (%rcx,%r8,1),%eax
lea (%rdi,%rdi,1),%r9d
cmp %ecx,%edi
cmovge %r9d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a1 < a4)
    {
        v6 = (a5 - a1) + a1 + a4;
    }
    else
    {
        v6 = a1 + a1;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += a5 + (a1 - a1);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 17
6 17
7 17
8 17
9 17
10 18
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
lea 0x1(%rcx,%r8,1),%eax
imul %ecx,%edi
imul %edi,%esi
add %esi,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += (a1 + a3) - a1;
    }
    v8 = a1 * a4 * a2 + a3;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 9
6 9
7 9
8 10
9 11
<<<sep_out_sample>>>
mov %ecx,%eax
imul %edx,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a1 + a3 + a2;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += a2 + a5 + a3;
    }
    v10 = a4 * a3;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 14
2 14
3 15
4 15
5 15
6 15
7 15
8 16
<<<sep_out_sample>>>
mov %r8d,%r9d
sub %esi,%r9d
imul %edi,%r9d
add %edx,%r9d
mov %edi,%eax
sub %ecx,%eax
cmp %ecx,%edi
jg 1d <func1+0x1d>
lea 0x1(%rdx),%eax
imul %edi,%eax
add %edx,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a2 < a2)
    {
        v6 = a1 * ((a4 - a5) - a3);
    }
    else
    {
        v6 = a3 - (a1 * (a2 - a5));
    }
    if (a4 < a1)
    {
        v7 = a1 - a4;
    }
    else
    {
        v7 = ((a1 * a3) + a1) + a3;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += a2 + (a4 - a3);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 14
6 14
7 12
8 12
9 18
10 18
11 18
12 25
13 25
14 25
15 25
16 25
17 25
18 26
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%eax
lea -0x1(%rdx,%r8,1),%edx
imul %edx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (a4 < a4)
        {
            v6 += a1 * a2 * a3;
        }
        else
        {
            v6 += a5 * a1;
        }
    }
    v8 = ((a3 + a5) * a5) - a5;
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        if (a5 < a1)
        {
            v9 += a1 * a3 + a3;
        }
        else
        {
            v9 += a1 * (a3 * a5);
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 29
2 29
3 29
4 29
5 16
6 16
7 29
8 30
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
mov %esi,%r10d
imul %edx,%r10d
mov %ecx,%r9d
imul %r8d,%r9d
add %r10d,%r9d
add %eax,%r9d
mov %edx,%r10d
imul %edx,%r10d
mov %edi,%eax
imul %esi,%eax
add %r10d,%eax
add %eax,%r9d
imul %esi,%ecx
imul %ecx,%esi
sub %edx,%esi
add %r9d,%esi
add $0x1,%r8d
imul %r8d,%edi
sub %edx,%edi
lea (%rsi,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = (a2 * a3) + (a4 * a5);
    v7 = a3 * a3 + a1 * a2;
    v8 = a2 * a4 * a2 - a3;
    v9 = (a1 + a1 * a5) - a3;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 8
2 8
3 8
4 8
5 4
6 4
7 4
8 4
9 4
10 8
11 5
12 5
13 5
14 5
15 5
16 8
17 6
18 6
19 6
20 8
21 7
22 7
23 7
24 8
25 9
<<<sep_out_sample>>>
test %edx,%edx
jle f <func1+0xf>
mov %r8d,%r9d
sub %edx,%r9d
add %r8d,%r9d
jmp 1e <func1+0x1e>
mov %edx,%r9d
imul %edi,%r9d
imul %r8d,%r9d
imul %ecx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
mov %esi,%ecx
sub %edx,%ecx
add %ecx,%esi
add %esi,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (v6 < a3)
    {
        v6 = (a5 - a3) + a5;
    }
    else
    {
        v6 = a3 * a1 * a5 * a4;
    }
    v7 = a2 + (a2 - a3) + a5;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 10
11 13
12 13
13 13
14 13
15 13
16 12
17 12
18 12
19 12
20 13
21 14
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %esi,%eax
imul %edi,%edx
add $0x1,%edx
imul %r8d,%edx
add %eax,%edx
mov %r8d,%eax
sub %esi,%eax
imul %eax,%edi
sub %r8d,%edi
lea (%rdx,%rdi,1),%eax
imul %esi,%r8d
add %r8d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a2 - a2 + a2;
    v7 = a5 + ((a3 * a1) * a5);
    v8 = (a5 - a2) * a1 - a5;
    v9 = a4 + a2 * a5;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 8
2 8
3 8
4 8
5 8
6 5
7 5
8 5
9 8
10 6
11 6
12 6
13 6
14 8
15 7
16 7
17 8
18 9
<<<sep_out_sample>>>
lea (%rcx,%rdx,2),%r9d
lea (%rdx,%rcx,1),%eax
cmp %edi,%esi
jge 14 <func1+0x14>
mov %esi,%eax
sub %r8d,%eax
sub %ecx,%eax
add %esi,%eax
lea 0x1(%rax,%rdi,1),%eax
add %eax,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = a4 + a3 + a3;
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        if (v8 < a5)
        {
            v7 += a4 * a2;
        }
        else
        {
            v7 += a2 * (a3 - a2);
        }
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        v9 += a3 - (a4 * a3);
    }
    if (a2 < a1)
    {
        v11 = (a2 - a5 - a4) + a2;
    }
    else
    {
        v11 = a3 + (a4 + a5) - a5;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 28
3 22
4 22
5 24
6 24
7 24
8 24
9 30
10 30
11 30
12 30
13 30
14 30
15 31
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
mov $0x2,%esi
sub %ecx,%esi
imul %esi,%edi
add %edi,%eax
mov %r8d,%ecx
sub %edx,%ecx
imul %ecx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a1 < a1)
    {
        v6 = a4 + ((a1 - a5) + a4);
    }
    else
    {
        v6 = a1 - (a4 * a1) + a1;
    }
    v7 = a5 * (a5 - a3);
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 13
2 13
3 13
4 13
5 10
6 10
7 10
8 13
9 12
10 12
11 12
12 13
13 14
<<<sep_out_sample>>>
mov %edx,%r9d
sub %ecx,%r9d
imul %edi,%r9d
lea 0x1(%rcx,%rcx,1),%eax
imul %esi,%eax
test %esi,%esi
jle 1d <func1+0x1d>
mov %r8d,%r10d
sub %edi,%r10d
jmp 2b <func1+0x2b>
mov %edx,%r10d
imul %esi,%r10d
add %ecx,%r10d
imul %edi,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a3 * a1 - (a4 * a1);
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += (a3 + a5) + a2;
    }
    v9 = a2 * (a4 + a4) + a2;
    if (v7 < a2)
    {
        v10 = a5 - a1;
    }
    else
    {
        v10 = (a4 + a3 * a2) * a1;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 10
5 10
6 11
7 11
8 13
9 13
10 13
11 17
12 17
13 17
14 17
15 19
16 19
17 19
18 19
19 19
20 19
21 19
22 20
<<<sep_out_sample>>>
mov %r8d,%eax
imul %r8d,%eax
add %edi,%eax
add %edx,%eax
add %eax,%esi
add %r8d,%esi
add %ecx,%esi
sub %r8d,%edi
add %ecx,%ecx
sub %ecx,%edi
add %esi,%edi
mov $0x1,%eax
sub %edx,%eax
imul %eax,%edx
lea 0x1(%rdi,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = (a1 - a5) - (a4 + a4);
    v7 = a3 - (a3 * a3);
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += a3 + a5 * a3;
    }
    v10 = a5 * a5 + a2 - a2;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 12
4 12
5 12
6 12
7 12
8 4
9 4
10 4
11 12
12 5
13 5
14 5
15 12
16 13
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
lea 0x1(%rcx,%r8,1),%edx
mov $0x1,%eax
sub %ecx,%eax
imul %eax,%edi
sub %esi,%edi
lea (%rdx,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (a5 < a1)
        {
            v6 += a2 - (a3 * a3);
        }
        else
        {
            v6 += a2 * a4 + a1;
        }
    }
    v8 = (a1 - a4 * a1) - a2;
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        v9 += a2 + a5 - a2;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 22
4 22
5 16
6 16
7 16
8 16
9 22
10 23
<<<sep_out_sample>>>
cmp %ecx,%edx
jge 10 <func1+0x10>
mov %edx,%eax
sub %r8d,%eax
sub %ecx,%eax
imul %edx,%eax
jmp 15 <func1+0x15>
lea (%rdx,%rcx,2),%eax
add %esi,%eax
add %edi,%edx
add %esi,%edx
add %edx,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
imul %esi,%esi
imul %esi,%edi
add %edi,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (a5 < a3)
        {
            v6 += a4 * (a3 - a1);
        }
        else
        {
            v6 += (a2 - a2) + a5;
        }
    }
    if (a3 < a4)
    {
        v8 = (a3 - a5 - a4) * a3;
    }
    else
    {
        v8 = (a4 + a3) + a4 + a2;
    }
    v9 = a1 * (a2 * a2) + a4;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 18
7 18
8 22
9 22
10 25
11 25
12 25
13 25
14 25
15 24
16 24
17 24
18 25
19 26
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %r8d,%esi
imul %r8d,%r8d
imul %edx,%r8d
lea (%rsi,%rcx,2),%eax
lea (%rax,%r8,1),%eax
imul %ecx,%edx
lea 0x1(%rax,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a4 + ((a5 * a5) * a3);
    v7 = a4 * a3;
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += a2 + (a3 - a3);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 4
5 4
6 4
7 11
8 5
9 11
10 12
<<<sep_out_sample>>>
cmp %r8d,%ecx
jge d <func1+0xd>
mov %edi,%eax
imul %r8d,%eax
jmp 1a <func1+0x1a>
lea (%rcx,%rcx,1),%eax
mov %r8d,%r9d
imul %edx,%r9d
sub %r9d,%eax
cmp %r8d,%eax
jge 2b <func1+0x2b>
lea (%rsi,%rsi,1),%r9d
sub %edx,%r9d
add %ecx,%r9d
jmp 32 <func1+0x32>
mov %edi,%r9d
imul %r8d,%r9d
add %r9d,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (a4 < a5)
        {
            v6 += (a1 * a2) + a2;
        }
        else
        {
            v6 += a1 * (a4 + a3);
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += (a5 - a1) - a3;
    }
    if (a4 < a5)
    {
        v10 = a1 * a5;
    }
    else
    {
        v10 = (a4 + a4) - a5 * a3;
    }
    if (v10 < a5)
    {
        v11 = (a2 + a2) - a3 + a4;
    }
    else
    {
        v11 = a1 * a5;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 23
4 23
5 23
6 27
7 27
8 27
9 27
10 29
11 29
12 31
13 31
14 31
15 31
16 35
17 35
18 37
19 37
20 37
21 37
22 37
23 37
24 38
<<<sep_out_sample>>>
cmp %r8d,%ecx
jge 10 <func1+0x10>
mov %esi,%eax
sub %edx,%eax
imul %ecx,%eax
sub %esi,%eax
jmp 19 <func1+0x19>
mov %edx,%eax
sub %esi,%eax
imul %edi,%eax
add %edx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %ecx,%r8d
add %eax,%r8d
imul %edi,%ecx
imul %ecx,%ecx
lea 0x1(%r8,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a4 < a5)
    {
        v6 = a4 * (a2 - a3) - a2;
    }
    else
    {
        v6 = a3 - (a1 * (a2 - a3));
    }
    if (a1 < a1)
    {
        v7 = a2 + a2;
    }
    else
    {
        v7 = a1 * (a1 * a4) * a4;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        if (v7 < a1)
        {
            v8 += a1 + a4;
        }
        else
        {
            v8 += a4 - a2 * a2;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 32
13 32
14 32
15 32
16 32
17 18
18 18
19 32
20 33
<<<sep_out_sample>>>
add %edi,%edx
add %edx,%esi
add %r8d,%esi
add %ecx,%esi
imul %r8d,%ecx
sub %ecx,%edi
lea 0x1(%rsi,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a1 - a4 * a5;
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += (a5 * a4) * a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 4
6 4
7 10
8 11
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %r8d,%esi
add %ecx,%esi
mov %ecx,%eax
sub %r8d,%eax
add %eax,%esi
add %edx,%ecx
lea 0x1(%rsi,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a4 - a5;
    v7 = a3 + a4;
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        if (a2 < a4)
        {
            v8 += (a4 * a5) - a3;
        }
        else
        {
            v8 += a5 * a1 + a3;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 18
5 4
6 4
7 18
8 5
9 18
10 19
<<<sep_out_sample>>>
lea (%r8,%rdi,1),%eax
mov %edx,%r9d
imul %edi,%r9d
cmp %esi,%ecx
cmovl %r9d,%eax
add %edx,%edi
add %esi,%edi
add %edi,%r8d
add %r8d,%ecx
add %eax,%ecx
mov %edx,%eax
imul %edx,%eax
imul %eax,%edx
sub %esi,%edx
lea (%rcx,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a4 < a2)
    {
        v6 = a3 * a1;
    }
    else
    {
        v6 = a5 + a1;
    }
    v7 = ((a3 * a3) * a3) - a2;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 10
2 6
3 6
4 6
5 6
6 13
7 13
8 13
9 13
10 13
11 12
12 12
13 12
14 12
15 13
16 14
<<<sep_out_sample>>>
test %edi,%edi
jle 13 <func1+0x13>
mov %ecx,%eax
imul %r8d,%eax
imul %r8d,%eax
imul %edx,%eax
jmp 1e <func1+0x1e>
mov %edx,%eax
imul %ecx,%eax
add $0x1,%eax
imul %ecx,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a2 * a5 - a5;
    }
    if (v6 < a1)
    {
        v8 = ((a4 * a5) * a5) * a3;
    }
    else
    {
        v8 = a4 * (a3 * a4) + a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 11
8 15
9 15
10 15
11 15
12 17
13 17
14 17
15 17
16 17
17 18
<<<sep_out_sample>>>
cmp $0x1,%edi
jle e <func1+0xe>
lea -0x2(%r8),%eax
imul %esi,%eax
jmp 17 <func1+0x17>
mov %r8d,%eax
sub %edi,%eax
sub %edi,%eax
sub %edx,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a1 - a4 + a3;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += a1 + (a4 * a4);
    }
    if (v7 < a1)
    {
        v10 = (a5 * a2) - a2 - a2;
    }
    else
    {
        v10 = (a5 - a1) - a1 - a3;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 14
2 14
3 16
4 16
5 16
6 20
7 20
8 20
9 20
10 22
11 22
12 22
13 22
14 22
15 23
<<<sep_out_sample>>>
cmp $0x1,%esi
jle 10 <func1+0x10>
lea (%rdi,%rsi,1),%eax
add %edx,%eax
imul %r8d,%eax
jmp 15 <func1+0x15>
mov %edi,%eax
imul %edi,%eax
lea 0x1(%rax,%rdi,1),%eax
add %eax,%edx
add %esi,%edx
add %edx,%r8d
sub %esi,%ecx
lea 0x1(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = a4 * (a5 - a5) - a2;
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += (a1 - a2) + a2;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        v9 += a1 - a3 + a5;
    }
    if (v8 < a2)
    {
        v11 = (a1 + a2 + a3) * a5;
    }
    else
    {
        v11 = a1 * a1;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 15
2 15
3 17
4 17
5 17
6 17
7 21
8 21
9 23
10 23
11 23
12 23
13 23
14 23
15 24
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %r8d,%edx
lea 0x1(%rcx,%rdx,1),%eax
add %r8d,%edi
add %eax,%edi
lea (%rsi,%rcx,2),%eax
sub %r8d,%eax
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a2 * (a4 + a1);
    }
    v8 = a1 + a5;
    v9 = a4 + a4 + a2 - a5;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 11
5 9
6 11
7 10
8 10
9 11
10 12
<<<sep_out_sample>>>
add %edx,%edi
add %esi,%edi
add %r8d,%edi
add %ecx,%edi
sub %esi,%edx
lea 0x1(%rdi,%rdx,1),%eax
imul %r8d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a3 - a2;
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a3 * a1 + a1;
    }
    v9 = a4 * a5;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 11
5 4
6 11
7 10
8 11
9 12
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
sub %esi,%eax
sub %edi,%eax
imul %r8d,%ecx
sub %ecx,%edi
sub %edx,%edi
lea 0x1(%rax,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = ((a5 - a1) - a5) - a2;
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += (a1 * a5) - a1;
    }
    v9 = a1 - (a5 * a4) - a3;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 11
5 4
6 11
7 10
8 10
9 10
10 11
11 12
<<<sep_out_sample>>>
lea (%rcx,%rdx,1),%r9d
imul %ecx,%r9d
imul %edx,%r9d
cmp %edi,%r9d
jge 1d <func1+0x1d>
mov %edx,%eax
imul %ecx,%eax
imul %edx,%eax
add %edi,%eax
jmp 2d <func1+0x2d>
mov %ecx,%eax
imul %edi,%eax
mov %esi,%r10d
sub %eax,%r10d
mov %r10d,%eax
sub %ecx,%eax
add %edi,%edx
add %edx,%esi
add %r8d,%esi
add %esi,%ecx
add %ecx,%r9d
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = (a4 + a3) * a4 * a3;
    if (v6 < a1)
    {
        v7 = a3 * a4 * a3 + a1;
    }
    else
    {
        v7 = a2 - a4 * a1 - a4;
    }
    v8 = a3 - a3;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 5
5 5
6 7
7 7
8 7
9 7
10 7
11 11
12 11
13 11
14 11
15 11
16 11
17 14
18 14
19 14
20 14
21 14
22 14
23 15
<<<sep_out_sample>>>
cmp $0x1,%edx
jle d <func1+0xd>
lea (%rcx,%rsi,1),%eax
imul %edx,%eax
jmp 14 <func1+0x14>
mov %edx,%eax
neg %eax
imul %edx,%eax
add %edx,%edi
add %edi,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%esi
add %esi,%eax
sub %ecx,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a3 * (a2 * a4);
    }
    if (v7 < a3)
    {
        v8 = a4 * a3 + a2 * a3;
    }
    else
    {
        v8 = a3 * ((a5 - a5) - a3);
    }
    v9 = a3 - a4;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 15
7 15
8 15
9 18
10 18
11 18
12 18
13 18
14 17
15 18
16 19
<<<sep_out_sample>>>
test %esi,%esi
jle 11 <func1+0x11>
mov %edi,%eax
imul %ecx,%eax
imul %edx,%eax
imul %esi,%eax
jmp 1b <func1+0x1b>
mov %edi,%eax
imul %esi,%eax
imul %edi,%eax
add %ecx,%eax
mov %edx,%r9d
sub %r8d,%r9d
lea 0x1(%rdi,%r9,1),%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    if (v6 < a2)
    {
        v6 = a1 * a4 * a3 * a2;
    }
    else
    {
        v6 = (a1 * a2 * a1) + a4;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += a5 * a1 * a5;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        v9 += (a1 - a5) + a2;
    }
    if (a4 < a4)
    {
        v11 = a5 + (a2 + a1 * a5);
    }
    else
    {
        v11 = a3 - a5;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 28
13 28
14 30
15 30
16 30
17 30
18 30
19 30
20 31
<<<sep_out_sample>>>
cmp %r8d,%edx
jge 14 <func1+0x14>
mov %esi,%r9d
imul %esi,%r9d
add %edi,%r9d
add %esi,%r9d
jmp 22 <func1+0x22>
mov %ecx,%r9d
sub %edi,%r9d
imul %ecx,%r9d
imul %edx,%r9d
mov %edi,%eax
neg %eax
cmp %esi,%edx
jge 33 <func1+0x33>
mov %edx,%eax
sub %edi,%eax
add %ecx,%eax
sub %r8d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a3 < a5)
    {
        v6 = (a1 + a2 * a2) + a2;
    }
    else
    {
        v6 = ((a4 - a1) * a4) * a3;
    }
    if (a3 < a2)
    {
        v7 = a3 - a1 + a4 - a5;
    }
    else
    {
        v7 = (a5 - a1) - a5;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += a2 + (a4 * a4);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 18
13 18
14 12
15 12
16 14
17 14
18 14
19 14
20 25
21 25
22 25
23 25
24 25
25 25
26 26
<<<sep_out_sample>>>
mov %ecx,%r9d
imul %edi,%r9d
mov %r8d,%r11d
imul %ecx,%r11d
cmp %r8d,%r9d
jge 1f <func1+0x1f>
mov %ecx,%r10d
imul %ecx,%r10d
add %r8d,%r10d
jmp 2d <func1+0x2d>
mov %edi,%r10d
sub %ecx,%r10d
lea (%rdx,%r8,1),%eax
imul %eax,%r10d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
add %r11d,%eax
add %r10d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a4 * a1;
    v7 = a5 * a4;
    if (v6 < a5)
    {
        v8 = a4 * a4 + a5;
    }
    else
    {
        v8 = (a1 - a4) * (a3 + a5);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 5
4 5
5 6
6 6
7 8
8 8
9 8
10 8
11 12
12 12
13 12
14 12
15 14
16 14
17 14
18 14
19 14
20 14
21 14
22 15
<<<sep_out_sample>>>
mov %edi,%eax
imul %r8d,%eax
imul %edx,%eax
imul %ecx,%eax
lea (%rdi,%rcx,1),%r9d
cmp %esi,%ecx
jl 20 <func1+0x20>
mov %r8d,%r9d
sub %edx,%r9d
add %edi,%r9d
add %ecx,%r9d
lea 0x1(%r9,%rdi,1),%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = a1 * a5 * a3 * a4;
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        if (a1 < a3)
        {
            v7 += a2 - a2 - a2;
        }
        else
        {
            v7 += (a1 - a3) - a2;
        }
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        v9 += a4 + a2;
    }
    if (a4 < a2)
    {
        v11 = a4 - a5 + a1 + a5;
    }
    else
    {
        v11 = a5 - a3 + a1 + a4;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 24
6 22
7 22
8 28
9 28
10 28
11 28
12 30
13 30
14 30
15 30
16 30
17 30
18 31
<<<sep_out_sample>>>
mov $0x0,%eax
test %ecx,%ecx
jle 14 <func1+0x14>
mov %edi,%eax
imul %edi,%eax
sub %r8d,%eax
imul %edx,%eax
mov %esi,%r9d
sub %r8d,%r9d
lea 0x1(%rdi,%r9,2),%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    if (v6 < a4)
    {
        v6 = a3 * (a1 * a1 - a5);
    }
    else
    {
        v6 = a2 - a2;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += a2 * (a3 + a3);
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        v9 += a3 - a2 - a3;
    }
    v11 = a2 - a5 - a5 + a2;
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 6
7 6
8 22
9 22
10 23
11 23
12 23
13 23
14 23
15 23
16 24
<<<sep_out_sample>>>
push %rbx
mov %edx,%ebx
sub %ecx,%ebx
cmp %r8d,%ecx
jge 13 <func1+0x13>
mov %edx,%r11d
imul %ecx,%r11d
jmp 21 <func1+0x21>
mov %r8d,%r11d
imul %edi,%r11d
imul %esi,%r11d
add %ecx,%r11d
mov %edx,%r9d
imul %ecx,%r9d
imul %esi,%r9d
imul %r8d,%r9d
lea (%rdx,%rcx,1),%r10d
cmp %r9d,%edx
jg 40 <func1+0x40>
mov %ecx,%r10d
imul %ecx,%r10d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %ebx,%eax
add %r11d,%eax
add %eax,%r9d
lea (%r9,%r10,1),%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a3 - a4;
    if (a4 < a5)
    {
        v7 = a3 * a4;
    }
    else
    {
        v7 = a4 + ((a5 * a1) * a2);
    }
    v8 = (a3 * a4 * a2) * a5;
    if (v8 < a3)
    {
        v9 = a3 + (a4 + a5 - a5);
    }
    else
    {
        v9 = a4 * a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 4
3 4
4 5
5 5
6 7
7 7
8 7
9 11
10 11
11 11
12 11
13 13
14 13
15 13
16 13
17 16
18 14
19 14
20 20
21 20
22 22
23 22
24 22
25 22
26 22
27 22
28 22
29 22
30 23
31 23
<<<sep_out_sample>>>
cmp %esi,%edx
jge d <func1+0xd>
mov %edi,%r10d
imul %edx,%r10d
jmp 1a <func1+0x1a>
mov %edx,%r10d
imul %ecx,%r10d
sub %r8d,%r10d
add %esi,%r10d
cmp %esi,%edi
jle 2c <func1+0x2c>
lea (%rdx,%rsi,1),%eax
mov %r8d,%r9d
sub %eax,%r9d
sub %edx,%r9d
jmp 38 <func1+0x38>
lea 0x1(%rcx),%r9d
imul %edi,%r9d
imul %ecx,%r9d
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a1 + a4;
    }
    if (a3 < a2)
    {
        v8 = a1 * a3;
    }
    else
    {
        v8 = (a3 * a4 - a5) + a2;
    }
    if (a2 < a1)
    {
        v9 = (a5 - (a3 + a2)) - a3;
    }
    else
    {
        v9 = (a1 + (a1 * a4)) * a4;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a5)
    {
        v10 += a2 + a2 + a4;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 15
7 15
8 15
9 15
10 17
11 17
12 19
13 19
14 19
15 19
16 19
17 23
18 23
19 23
20 30
21 30
22 30
23 30
24 30
25 30
26 31
<<<sep_out_sample>>>
add %edx,%edi
add %esi,%edi
add %r8d,%edi
add %edi,%ecx
imul %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
mov $0x2,%ecx
sub %esi,%ecx
imul %ecx,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a5 * a2;
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        if (a1 < a2)
        {
            v7 += a3 + a4 + a5;
        }
        else
        {
            v7 += (a3 - a2) - a2;
        }
    }
    v9 = a3 - a3 * a2 + a3;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 18
5 4
6 18
7 17
8 17
9 17
10 18
11 19
<<<sep_out_sample>>>
test %edx,%edx
jle f <func1+0xf>
mov %edi,%eax
sub %edx,%eax
add %esi,%eax
sub %r8d,%eax
jmp 11 <func1+0x11>
mov %esi,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (a3 < a5)
        {
            v6 += a3 * a5 * a2;
        }
        else
        {
            v6 += (a5 * a1) - a3;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        if (a5 < a2)
        {
            v8 += (a2 * a5) - a4;
        }
        else
        {
            v8 += a4 + a3;
        }
    }
    if (v10 < a3)
    {
        v10 = (a2 - (a3 - a1)) - a5;
    }
    else
    {
        v10 = a5 * (a2 - a2) + a2;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 28
2 28
3 30
4 30
5 30
6 30
7 30
8 34
9 36
10 36
11 36
12 36
13 36
14 37
<<<sep_out_sample>>>
mov %edi,%eax
sub %edx,%eax
mov %edx,%r9d
sub %r8d,%r9d
cmp %r8d,%edx
cmovge %r9d,%eax
test %edx,%edx
jle 1e <func1+0x1e>
mov %esi,%r9d
imul %r8d,%r9d
jmp 29 <func1+0x29>
lea (%rdi,%rdi,1),%r9d
sub %ecx,%r9d
imul %r8d,%r9d
lea (%rdi,%rdx,1),%r10d
add %esi,%r10d
add %r8d,%r10d
add %ecx,%r10d
add %r10d,%eax
add %r9d,%eax
mov %ecx,%r9d
imul %esi,%r9d
imul %r9d,%ecx
imul %ecx,%edx
add %edx,%eax
sub %esi,%edi
sub $0x1,%edi
imul %edi,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a3 < a5)
    {
        v6 = (a5 - a3) - (a5 - a1);
    }
    else
    {
        v6 = ((a2 + a3) - a2) - a5;
    }
    if (v7 < a3)
    {
        v7 = a2 * a5;
    }
    else
    {
        v7 = a5 * ((a1 + a1) - a4);
    }
    v8 = (a4 * a2) * a4 * a3;
    v9 = ((a1 - a2) * a5) - a5;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 6
6 6
7 12
8 12
9 14
10 14
11 14
12 18
13 18
14 18
15 22
16 22
17 22
18 22
19 22
20 22
21 20
22 20
23 20
24 20
25 22
26 21
27 21
28 21
29 22
30 23
<<<sep_out_sample>>>
lea 0x2(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %eax,%ecx
imul %r8d,%edi
imul %esi,%esi
add %edi,%esi
lea 0x1(%rcx,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = a5 * a1 + a2 * a2;
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += a3 * (a5 - a2);
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        if (a2 < a4)
        {
            v9 += a5 * a3 - a3;
        }
        else
        {
            v9 += a4 - a1;
        }
    }
    v11 = 0;
    for (v12 = 0; v12++; v12<a1)
    {
        if (v12 < a5)
        {
            v11 += a1 - (a4 + a3);
        }
        else
        {
            v11 += a5 + a2 - a4;
        }
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 34
2 34
3 34
4 34
5 4
6 4
7 4
8 34
9 35
<<<sep_out_sample>>>
mov $0x0,%r9d
cmp %esi,%edx
jge 19 <func1+0x19>
mov %edi,%r9d
sub %edx,%r9d
mov %r8d,%eax
imul %esi,%eax
add %eax,%r9d
test %r8d,%r8d
jle 26 <func1+0x26>
mov %r8d,%eax
imul %esi,%eax
jmp 30 <func1+0x30>
lea (%r8,%rdi,1),%r10d
lea (%rcx,%rsi,1),%eax
add %r10d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a3 < a2)
    {
        v6 = a1 - a3 + a5 * a2;
    }
    else
    {
        v6 = (a5 - (a1 - a1)) - a5;
    }
    if (v7 < a5)
    {
        v7 = (a5 - a5) + a5 * a2;
    }
    else
    {
        v7 = (a5 + a1) + (a4 + a2);
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 6
7 6
8 6
9 12
10 12
11 14
12 14
13 14
14 18
15 18
16 18
17 20
18 20
19 20
20 20
21 20
22 20
23 21
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %ecx,%edx
lea (%rax,%rdi,2),%eax
sub %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a5 - a5;
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += a3 * a5 * a3;
    }
    v9 = a1 - (a3 + a4) + a1;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 11
5 10
6 10
7 11
8 12
<<<sep_out_sample>>>
mov %edi,%eax
imul %r8d,%eax
sub %ecx,%eax
cmp %ecx,%edx
jge 18 <func1+0x18>
mov %ecx,%r9d
imul %esi,%r9d
add %edx,%r9d
jmp 1f <func1+0x1f>
mov %esi,%r9d
imul %edi,%r9d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a4 + a3 * a5;
    }
    v8 = (a1 * a5) - a4;
    if (a3 < a4)
    {
        v9 = a4 * a2 + a3;
    }
    else
    {
        v9 = a2 * a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 9
4 10
5 10
6 12
7 12
8 12
9 12
10 16
11 16
12 18
13 18
14 18
15 18
16 18
17 18
18 19
<<<sep_out_sample>>>
lea (%rcx,%rcx,1),%eax
mov %edx,%r9d
imul %edx,%r9d
cmp %edx,%ecx
cmovg %r9d,%eax
lea 0x1(%rax,%rdi,1),%eax
add %eax,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a1 + a4;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        if (v8 < a4)
        {
            v8 += a4 + a3 + a5;
        }
        else
        {
            v8 += a3 * a4;
        }
    }
    if (a3 < a4)
    {
        v10 = a3 * a3;
    }
    else
    {
        v10 = ((a3 + a4) - a3) + a4;
    }
    v11 = 0;
    for (v12 = 0; v12++; v12<a3)
    {
        if (v10 < a2)
        {
            v11 += a4 + a1;
        }
        else
        {
            v11 += a2 - a4;
        }
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 27
2 23
3 23
4 23
5 23
6 41
7 41
8 41
9 41
10 41
11 42
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea (%r8,%rcx,1),%eax
mov %ecx,%esi
sub %edx,%esi
imul %edi,%esi
imul %esi,%edx
add %edx,%eax
mov %edi,%edx
sub %ecx,%edx
imul %edx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = ((a4 - a3) * a1) * a3;
    if (a1 < a1)
    {
        v7 = a5 + a3 * a3 - a3;
    }
    else
    {
        v7 = a1 * (a1 - a4);
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 13
2 13
3 13
4 13
5 4
6 4
7 4
8 4
9 13
10 11
11 11
12 11
13 13
14 14
<<<sep_out_sample>>>
add %edx,%edi
add %esi,%edi
add %r8d,%edi
add %ecx,%edi
mov %ecx,%eax
imul %ecx,%eax
imul %esi,%eax
sub %edx,%eax
add %edi,%eax
add %r8d,%ecx
lea (%rax,%rsi,2),%eax
sub %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = (a4 * a4 * a2) - a3;
    v7 = (a2 + a2) - (a5 + a4);
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 4
7 4
8 4
9 6
10 5
11 5
12 6
13 7
<<<sep_out_sample>>>
mov %esi,%eax
neg %eax
sub %ecx,%eax
cmp %edx,%esi
jle 11 <func1+0x11>
lea (%rdi,%r8,1),%eax
imul %ecx,%eax
add %edi,%edx
add %esi,%edx
add %r8d,%edx
lea 0x1(%rcx,%rdx,1),%edx
add %edx,%eax
lea (%r8,%rsi,2),%edx
sub %edi,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a2 + a5 - a2;
    }
    if (a3 < a2)
    {
        v8 = (a1 + a5) * a4;
    }
    else
    {
        v8 = (a5 - a5 - a2) - a4;
    }
    v9 = (a2 + a2 + a5) - a1;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 15
2 15
3 15
4 9
5 9
6 11
7 11
8 18
9 18
10 18
11 18
12 18
13 17
14 17
15 18
16 19
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
mov %ecx,%edx
sub %edi,%edx
add %edx,%r8d
add %r8d,%esi
add %eax,%esi
add %ecx,%edi
lea 0x1(%rsi,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = a4 - a1 + a5 + a2;
    v7 = a4 + a1;
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += a5 + (a4 * a5);
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a1)
    {
        if (a3 < a4)
        {
            v10 += a4 - (a1 - a1);
        }
        else
        {
            v10 += a4 * a2 - a2;
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 23
2 23
3 23
4 23
5 4
6 4
7 4
8 4
9 23
10 5
11 23
12 24
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a4 + a2 - a3;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        if (a1 < a3)
        {
            v8 += a3 - a4 * a5;
        }
        else
        {
            v8 += a3 * (a1 * a1);
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 21
5 22
<<<sep_out_sample>>>
cmp $0x1,%edx
jle 10 <func1+0x10>
mov %esi,%eax
sub %edx,%eax
imul %edx,%eax
add %ecx,%eax
jmp 17 <func1+0x17>
mov %r8d,%eax
imul %r8d,%eax
add %edx,%edi
add %edi,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%esi
add %esi,%eax
sub %ecx,%r8d
imul %r8d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (a1 < a4)
        {
            v6 += a2 * a1;
        }
        else
        {
            v6 += a2 + a3 + a2;
        }
    }
    if (v7 < a3)
    {
        v8 = ((a2 - a3) * a3) + a4;
    }
    else
    {
        v8 = a5 * a5;
    }
    v9 = a3 * a5 - (a3 * a4);
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 18
7 18
8 22
9 22
10 25
11 25
12 25
13 25
14 25
15 24
16 24
17 25
18 26
<<<sep_out_sample>>>
add %edx,%edi
add %esi,%edi
add %edi,%r8d
lea 0x1(%rcx,%r8,1),%edi
imul %ecx,%ecx
add %ecx,%esi
sub %edx,%esi
lea (%rdi,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (a3 < a2)
        {
            v6 += (a5 * a3) + a1;
        }
        else
        {
            v6 += a3 - a4 * a1;
        }
    }
    if (a5 < a5)
    {
        v8 = a2 - a1 + (a3 - a5);
    }
    else
    {
        v8 = a2 + a4 * a4 - a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 24
2 24
3 24
4 24
5 22
6 22
7 22
8 24
9 25
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %eax,%ecx
sub %r8d,%edi
imul %edx,%esi
sub %esi,%edi
lea 0x1(%rcx,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a1 - a5 - (a2 * a3);
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += a5 + a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 4
6 4
7 4
8 10
9 11
<<<sep_out_sample>>>
mov %ecx,%r9d
imul %edi,%r9d
add %esi,%r9d
lea (%rsi,%rdx,1),%eax
add %ecx,%eax
mov %esi,%r10d
imul %ecx,%r10d
cmp %edx,%ecx
cmovl %r10d,%eax
lea 0x1(%rax,%rdi,1),%eax
add %eax,%edx
add %edx,%esi
add %esi,%r8d
lea (%r9,%rcx,2),%eax
lea 0x1(%r8,%rax,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = ((a4 * a1) + a2) + a4;
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += (a1 - a1) + a3;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        v9 += a3 + a3 + a3;
    }
    if (a4 < a3)
    {
        v11 = a2 * a4;
    }
    else
    {
        v11 = a2 + a3 + a4;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 21
5 21
6 17
7 17
8 17
9 17
10 23
11 23
12 23
13 23
14 23
15 23
16 24
<<<sep_out_sample>>>
mov %edi,%r9d
sub %ecx,%r9d
cmp %ecx,%edx
jge 11 <func1+0x11>
lea (%r8,%rsi,1),%r9d
add %ecx,%r9d
mov $0x1,%r10d
sub %ecx,%r10d
imul %edi,%r10d
sub %ecx,%r10d
test %r8d,%r8d
jle 2e <func1+0x2e>
mov %esi,%eax
imul %r8d,%eax
jmp 38 <func1+0x38>
mov %edi,%eax
imul %r8d,%eax
add %esi,%eax
sub %edi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
add %r10d,%r9d
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a3 < a4)
    {
        v6 = a5 + a2 + a4;
    }
    else
    {
        v6 = a1 - a4;
    }
    v7 = (a1 - a1 * a4) - a4;
    if (v8 < a5)
    {
        v8 = a2 * a5;
    }
    else
    {
        v8 = ((a1 * a5) + a2) - a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 4
4 4
5 6
6 6
7 12
8 12
9 12
10 12
11 13
12 13
13 15
14 15
15 15
16 19
17 19
18 19
19 19
20 21
21 21
22 21
23 21
24 21
25 21
26 21
27 22
<<<sep_out_sample>>>
lea (%rcx,%rsi,1),%r9d
test %esi,%esi
jg f <func1+0xf>
mov %edi,%r9d
imul %r8d,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
lea 0x1(%r8),%edx
imul %edx,%ecx
imul %ecx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (v6 < a2)
    {
        v6 = a4 + a2;
    }
    else
    {
        v6 = (a4 + a1 * a5) - a4;
    }
    v7 = a5 * (a4 + a5 * a4);
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 4
3 4
4 10
5 10
6 13
7 13
8 13
9 13
10 13
11 12
12 12
13 12
14 13
15 14
<<<sep_out_sample>>>
mov %edx,%eax
sub %edi,%eax
cmp %edi,%ecx
jge 13 <func1+0x13>
mov %ecx,%eax
imul %edi,%eax
imul %edi,%eax
imul %edi,%eax
add %edx,%edi
add %edi,%esi
add %r8d,%esi
add %esi,%ecx
add %ecx,%eax
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a4 < a1)
    {
        v6 = ((a4 * a1) * a1) * a1;
    }
    else
    {
        v6 = a3 - a1;
    }
    v7 = a4 - a4 + a5;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 10
2 10
3 4
4 4
5 6
6 6
7 6
8 6
9 13
10 13
11 13
12 13
13 13
14 13
15 14
<<<sep_out_sample>>>
add %edx,%edi
add %esi,%edi
add %r8d,%edi
lea 0x1(%rcx,%rdi,1),%eax
mov %esi,%edi
sub %edx,%edi
imul %edi,%edx
add %edx,%esi
add %eax,%esi
mov %ecx,%eax
imul %ecx,%eax
sub %r8d,%eax
add %eax,%ecx
lea (%rsi,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a3 - a2 - a1;
    }
    v8 = a2 + ((a2 - a3) * a3);
    v9 = a4 + ((a4 * a4) - a5);
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 11
5 9
6 9
7 9
8 9
9 11
10 10
11 10
12 10
13 10
14 11
15 12
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (v6 < a3)
        {
            v6 += a3 * a3 + a5;
        }
        else
        {
            v6 += a5 * a5;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += a3 + a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 21
5 22
<<<sep_out_sample>>>
lea (%rcx,%r8,1),%r10d
lea (%rcx,%rdi,1),%r11d
cmp %edx,%r10d
jl 16 <func1+0x16>
mov %edx,%r11d
sub %esi,%r11d
add %edx,%r11d
mov %edi,%r9d
sub %esi,%r9d
mov %edi,%eax
imul %edx,%eax
cmp %edx,%r8d
cmovl %eax,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r11d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a4 + a5;
    if (v6 < a3)
    {
        v7 = (a5 + a1) - a5 + a4;
    }
    else
    {
        v7 = a3 - a2 + a3;
    }
    v8 = a5 - a5;
    if (a5 < a3)
    {
        v9 = a1 * a3;
    }
    else
    {
        v9 = a1 - a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 7
3 5
4 5
5 11
6 11
7 11
8 20
9 20
10 16
11 16
12 16
13 16
14 22
15 22
16 22
17 22
18 22
19 22
20 22
21 23
<<<sep_out_sample>>>
test %edi,%edi
jle 12 <func1+0x12>
mov %ecx,%eax
imul %edi,%eax
lea (%r8,%rcx,1),%r9d
sub %r9d,%eax
jmp 1b <func1+0x1b>
mov %ecx,%eax
sub %esi,%eax
imul %edx,%eax
sub %esi,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a4 + a5 * a1;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        if (v8 < a2)
        {
            v8 += a3 - a2 * a3;
        }
        else
        {
            v8 += a1 * a1;
        }
    }
    if (v8 < a1)
    {
        v10 = (a4 * a1) - (a5 + a4);
    }
    else
    {
        v10 = ((a4 - a2) * a3) - a2;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 23
4 23
5 23
6 23
7 23
8 27
9 27
10 27
11 27
12 29
13 29
14 29
15 29
16 29
17 30
<<<sep_out_sample>>>
cmp %ecx,%esi
jge 12 <func1+0x12>
lea (%r8,%rdi,1),%r9d
imul %r8d,%r9d
imul %r8d,%r9d
jmp 1d <func1+0x1d>
lea (%rcx,%rsi,1),%r9d
imul %esi,%r9d
add %ecx,%r9d
mov %esi,%eax
sub %ecx,%eax
cmp %edx,%esi
jge 35 <func1+0x35>
mov %ecx,%eax
imul %esi,%eax
mov %r8d,%r10d
sub %eax,%r10d
mov %r10d,%eax
sub %edx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a2 < a4)
    {
        v6 = (a5 + a1) * a5 * a5;
    }
    else
    {
        v6 = a4 + a2 * (a4 + a2);
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        if (v8 < a5)
        {
            v7 += a3 + a1;
        }
        else
        {
            v7 += a1 + a2 - a2;
        }
    }
    if (a2 < a3)
    {
        v9 = (a5 - a4 * a2) - a3;
    }
    else
    {
        v9 = a3 - (a3 - a2) - a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 30
11 30
12 24
13 24
14 26
15 26
16 26
17 26
18 26
19 26
20 32
21 32
22 32
23 32
24 32
25 32
26 33
<<<sep_out_sample>>>
mov %edi,%r9d
imul %edx,%r9d
mov %r8d,%eax
sub %ecx,%eax
cmp %r8d,%edi
jl 16 <func1+0x16>
mov %ecx,%eax
imul %esi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a1 * a3;
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        if (a4 < a4)
        {
            v7 += a2 + a3 * a2;
        }
        else
        {
            v7 += a4 * a3;
        }
    }
    if (a1 < a5)
    {
        v9 = a1 - (a1 - a5) - a4;
    }
    else
    {
        v9 = a4 * a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 19
4 19
5 17
6 17
7 23
8 23
9 25
10 25
11 25
12 25
13 25
14 25
15 26
<<<sep_out_sample>>>
cmp %edi,%edx
jge 10 <func1+0x10>
lea (%r8,%r8,1),%eax
imul %r8d,%eax
add %ecx,%eax
jmp 18 <func1+0x18>
lea -0x1(%rdx),%eax
imul %edi,%eax
add %ecx,%eax
lea 0x1(%rax,%rdi,1),%eax
add %eax,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a4 + a5;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += (a2 + a3) + a4;
    }
    if (a3 < a1)
    {
        v10 = a4 + (a5 + a5) * a5;
    }
    else
    {
        v10 = a1 * a3 - a1 + a4;
    }
    v11 = 0;
    for (v12 = 0; v12++; v12<a4)
    {
        v11 += a4 + a3 - a1;
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 14
2 14
3 16
4 16
5 16
6 16
7 20
8 20
9 20
10 27
11 27
12 27
13 27
14 27
15 28
<<<sep_out_sample>>>
mov %edi,%r10d
sub %esi,%r10d
mov %edi,%r9d
imul %ecx,%r9d
mov %r9d,%eax
sub %edx,%eax
cmp %r8d,%edx
jge 1f <func1+0x1f>
mov %r8d,%eax
neg %eax
imul %edi,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r10d,%ecx
add %ecx,%r9d
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a1 < a1)
    {
        v6 = a1 + a2;
    }
    else
    {
        v6 = a1 - a2;
    }
    v7 = a1 * a4;
    if (a3 < a5)
    {
        v8 = (a1 - (a5 * a1)) - a1;
    }
    else
    {
        v8 = a4 * a1 - a3;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        v9 += a5 + a5 * a2;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 12
4 12
5 19
6 19
7 13
8 13
9 15
10 15
11 15
12 26
13 26
14 26
15 26
16 26
17 26
18 26
19 27
<<<sep_out_sample>>>
mov %edi,%eax
sub %edx,%eax
add %edx,%edi
add %esi,%edi
add %edi,%r8d
lea 0x1(%rcx,%r8,1),%edi
add %edi,%eax
mov %edx,%edi
sub %esi,%edi
mov %edi,%esi
imul %edx,%ecx
sub %ecx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a5 - (a2 - a4);
    }
    v8 = (a1 - a3 + a4) - a4;
    v9 = (a3 - a2) - a3 * a4;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 11
8 10
9 10
10 10
11 10
12 10
13 11
14 12
<<<sep_out_sample>>>
mov %edx,%r9d
imul %esi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %eax,%ecx
sub %r8d,%edi
add %r9d,%edi
lea (%rcx,%rdi,1),%eax
sub %esi,%r9d
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = (a1 - a5) + a3 * a2;
    v7 = a2 * a3 - a2;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 4
8 4
9 6
10 5
11 6
12 7
<<<sep_out_sample>>>
lea (%rdx,%rdi,1),%eax
cmp %r8d,%edi
jl d <func1+0xd>
mov %edi,%eax
imul %edx,%eax
test %edi,%edi
jle 19 <func1+0x19>
mov %ecx,%r9d
sub %r8d,%r9d
jmp 27 <func1+0x27>
mov %esi,%r9d
imul %esi,%r9d
sub %edx,%r9d
imul %edx,%r9d
lea 0x1(%r9,%rdi,1),%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    if (a1 < a5)
    {
        v6 = a3 + a1;
    }
    else
    {
        v6 = a3 * (a1 - a4 + a4);
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        if (a4 < a4)
        {
            v7 += a5 - a5 * a4;
        }
        else
        {
            v7 += a3 * a5 * a3;
        }
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        v9 += a5 + a4;
    }
    if (v11 < a1)
    {
        v11 = a4 - a5;
    }
    else
    {
        v11 = a3 * ((a2 * a2) - a3);
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 4
3 4
4 10
5 10
6 29
7 29
8 31
9 31
10 31
11 35
12 35
13 35
14 35
15 37
16 37
17 37
18 37
19 37
20 37
21 38
<<<sep_out_sample>>>
test %esi,%esi
jle 10 <func1+0x10>
mov %ecx,%eax
sub %esi,%eax
imul %esi,%eax
imul %ecx,%eax
jmp 1a <func1+0x1a>
mov %ecx,%eax
imul %ecx,%eax
imul %edx,%eax
sub %esi,%eax
cmp %edi,%eax
jge 29 <func1+0x29>
mov %ecx,%r9d
sub %esi,%r9d
sub %edx,%r9d
jmp 35 <func1+0x35>
mov %edi,%r9d
sub %esi,%r9d
add %ecx,%r9d
add %r8d,%r9d
add %r9d,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (a1 < a5)
        {
            v6 += (a2 - a4) - a4;
        }
        else
        {
            v6 += a3 - (a5 * a3);
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += (a2 - a4) * a2;
    }
    if (v10 < a2)
    {
        v10 = a4 * ((a4 - a2) * a2);
    }
    else
    {
        v10 = ((a4 * a4) * a3) - a2;
    }
    if (v10 < a1)
    {
        v11 = a4 - a2 - a3;
    }
    else
    {
        v11 = (a1 - a2 + a4) + a5;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 23
4 23
5 23
6 23
7 23
8 27
9 27
10 27
11 27
12 29
13 29
14 31
15 31
16 31
17 31
18 35
19 35
20 35
21 35
22 37
23 37
24 37
25 37
26 37
27 37
28 38
<<<sep_out_sample>>>
lea (%r8,%rsi,2),%r9d
cmp %ecx,%edx
jl f <func1+0xf>
mov %edi,%r9d
imul %r8d,%r9d
lea (%rsi,%r8,1),%eax
cmp %edi,%edx
jle 20 <func1+0x20>
lea -0x1(%rsi),%eax
imul %ecx,%eax
add %r8d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a3 < a4)
    {
        v6 = a5 + (a2 + a2);
    }
    else
    {
        v6 = a1 * a5;
    }
    if (a1 < a3)
    {
        v7 = a4 * a2 - a4 + a5;
    }
    else
    {
        v7 = a2 + a5 - (a2 - a2);
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 4
3 4
4 10
5 10
6 18
7 12
8 12
9 14
10 14
11 14
12 20
13 20
14 20
15 20
16 20
17 20
18 21
<<<sep_out_sample>>>
cmp %r8d,%edi
jge 11 <func1+0x11>
mov %edx,%eax
imul %edi,%eax
imul %eax,%edi
add %ecx,%edi
jmp 1a <func1+0x1a>
mov %esi,%eax
imul %esi,%eax
lea (%rax,%r8,2),%edi
mov %r8d,%r9d
imul %r8d,%r9d
lea (%rsi,%rdx,2),%eax
sub %r9d,%eax
add %eax,%r8d
add %r8d,%ecx
add %edi,%ecx
sub %edx,%esi
lea 0x1(%rcx,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a1 < a5)
    {
        v6 = a3 * a1 * a1 + a4;
    }
    else
    {
        v6 = (a2 * a2) + a5 + a5;
    }
    v7 = a2 - a3;
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        if (a5 < a4)
        {
            v8 += a2 + (a2 - a4);
        }
        else
        {
            v8 += a4 + a1 - a1;
        }
    }
    v10 = a3 - a1 - a5 * a5;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 25
12 25
13 26
14 26
15 26
16 26
17 26
18 12
19 26
20 27
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
add %r8d,%ecx
imul %esi,%esi
lea 0x1(%rcx,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a2 * a2;
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a4 - a2 * a4;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        v9 += (a2 * a1) + a4;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 15
2 15
3 15
4 15
5 4
6 15
7 16
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a2 * a5 * a4;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += a2 + a5 + a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 14
2 14
3 14
4 14
5 15
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
mov %r8d,%esi
sub %ecx,%esi
lea 0x1(%rsi),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a5 + a1 + a2;
    }
    v8 = ((a1 - a4) - a4) - a1;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 9
5 9
6 10
7 11
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
lea 0x1(%rcx,%rax,1),%ecx
lea (%rsi,%rsi,2),%eax
add %ecx,%eax
lea 0x1(%r8,%r8,1),%ecx
imul %ecx,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += (a2 * a3) * a3;
    }
    v8 = a2 + (a2 + a2);
    v9 = ((a5 + a5) * a3) + a3;
    v10 = 0;
    for (v11 = 0; v11++; v11<a1)
    {
        if (v10 < a1)
        {
            v10 += (a3 + a5) + a3;
        }
        else
        {
            v10 += a3 * a5 * a3;
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 23
2 23
3 23
4 23
5 9
6 23
7 10
8 10
9 23
10 24
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (a3 < a1)
        {
            v6 += a3 * a3;
        }
        else
        {
            v6 += (a4 + a3) - a1;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += (a5 + a2) + a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 21
5 22
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a3 - a5;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += a2 * a3 * a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 14
2 14
3 14
4 14
5 15
<<<sep_out_sample>>>
mov %edi,%r11d
imul %edi,%r11d
mov %edi,%r9d
imul %r8d,%r9d
imul %edx,%r9d
add %esi,%r9d
cmp %r9d,%esi
jle 28 <func1+0x28>
lea (%rcx,%rsi,1),%eax
mov %edx,%r10d
sub %eax,%r10d
sub %r8d,%r10d
jmp 34 <func1+0x34>
lea (%r8,%r8,1),%r10d
imul %r8d,%r10d
imul %edx,%r10d
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
add %r8d,%ecx
sub %r11d,%ecx
add %ecx,%r9d
lea (%r9,%r10,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a4 < a4)
    {
        v6 = a2 - a5;
    }
    else
    {
        v6 = a5 - a5 - a1 * a1;
    }
    v7 = (a1 * a5) * a3 + a2;
    if (v7 < a2)
    {
        v8 = a3 - (a4 + a2) - a5;
    }
    else
    {
        v8 = a5 * (a5 + a5) * a3;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        v9 += (a4 - a3) - a2;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 12
4 12
5 12
6 12
7 13
8 13
9 15
10 15
11 15
12 15
13 15
14 19
15 19
16 19
17 26
18 26
19 26
20 26
21 26
22 26
23 26
24 27
<<<sep_out_sample>>>
mov %r8d,%r10d
imul %edi,%r10d
mov %esi,%eax
imul %edx,%eax
add %eax,%r10d
mov %r8d,%r9d
sub %esi,%r9d
cmp %edx,%edi
jg 24 <func1+0x24>
mov %r8d,%r9d
imul %esi,%r9d
imul %ecx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a5 * a1 + a2 * a3;
    if (a3 < a1)
    {
        v7 = a5 - a2;
    }
    else
    {
        v7 = a5 * a2 * a4;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 4
6 7
7 7
8 5
9 5
10 11
11 11
12 11
13 13
14 13
15 13
16 13
17 13
18 13
19 14
<<<sep_out_sample>>>
mov %esi,%eax
not %eax
imul %edx,%eax
add %esi,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (v6 < a2)
        {
            v6 += (a1 * a2) - a5;
        }
        else
        {
            v6 += a3 * a3;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += a5 + a5;
    }
    v10 = a2 - (a2 * a3 + a3);
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 21
5 22
6 22
7 22
8 22
9 22
10 23
<<<sep_out_sample>>>
cmp %edx,%r8d
jge 11 <func1+0x11>
mov %ecx,%eax
imul %ecx,%eax
sub %esi,%eax
imul %edx,%eax
jmp 17 <func1+0x17>
lea (%rsi,%rdi,1),%eax
imul %edx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a5 < a3)
    {
        v6 = (a4 * a4 - a2) * a3;
    }
    else
    {
        v6 = (a2 + a1) * a3;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        if (a1 < a5)
        {
            v7 += a3 + a3 + a1;
        }
        else
        {
            v7 += a2 + (a1 - a1);
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 24
11 24
12 24
13 24
14 24
15 25
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
lea (%r8,%rcx,1),%eax
sub %esi,%edi
add %eax,%edi
lea (%rdx,%rsi,2),%eax
sub %ecx,%eax
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a4 < a4)
    {
        v6 = a1 - (a1 * a2) - a3;
    }
    else
    {
        v6 = (a4 - a2) - a4 + a1;
    }
    v7 = a2 + a3 - a4 + a2;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 13
2 13
3 13
4 13
5 10
6 13
7 12
8 12
9 13
10 14
<<<sep_out_sample>>>
test %ecx,%ecx
jle 11 <func1+0x11>
mov %r8d,%r11d
imul %esi,%r11d
imul %esi,%r11d
jmp 19 <func1+0x19>
lea (%rdi,%r8,2),%r11d
imul %r8d,%r11d
lea 0x1(%rdi),%r9d
mov %r9d,%r10d
imul %edi,%r10d
cmp %edx,%edi
jge 33 <func1+0x33>
mov %edx,%edi
imul %edx,%edi
add %esi,%edi
add %edx,%edi
jmp 41 <func1+0x41>
mov %edx,%eax
imul %esi,%eax
imul %eax,%edi
mov %esi,%eax
sub %edi,%eax
mov %eax,%edi
lea (%r9,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (v6 < a4)
    {
        v6 = a5 * a2 * a2;
    }
    else
    {
        v6 = a5 * (a1 + (a5 + a5));
    }
    v7 = a1 + (a1 * a1);
    if (a1 < a3)
    {
        v8 = a3 + ((a3 * a3) + a2);
    }
    else
    {
        v8 = a2 - ((a3 * a2) * a1);
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        if (a3 < a2)
        {
            v9 += a2 - a1;
        }
        else
        {
            v9 += a2 + a1 - a1;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 12
10 12
11 12
12 13
13 13
14 15
15 15
16 15
17 15
18 15
19 19
20 19
21 19
22 19
23 19
24 19
25 33
26 33
27 33
28 33
29 33
30 33
31 33
32 34
<<<sep_out_sample>>>
lea 0x2(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
add %r8d,%ecx
sub %edx,%edi
sub $0x1,%edi
imul %edi,%edx
lea 0x1(%rcx,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = (a1 - a3) * a3 - a3;
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        if (a2 < a3)
        {
            v7 += a5 + a1 * a1;
        }
        else
        {
            v7 += a5 + a2 + a1;
        }
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        v9 += a3 - (a4 - a2);
    }
    v11 = 0;
    for (v12 = 0; v12++; v12<a5)
    {
        if (v6 < a4)
        {
            v11 += a4 - a4 - a4;
        }
        else
        {
            v11 += (a3 * a1) * a4;
        }
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 34
2 34
3 34
4 34
5 4
6 4
7 4
8 34
9 35
<<<sep_out_sample>>>
lea (%rsi,%rsi,1),%eax
sub %edx,%eax
add %r8d,%eax
add %edi,%eax
add %eax,%edx
add %esi,%edx
add %r8d,%edx
lea -0x1(%rsi),%eax
imul %r8d,%eax
lea (%rdx,%rcx,2),%edx
lea 0x1(%rdx,%rax,1),%eax
imul %edi,%r8d
add %r8d,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a2 + a5;
    }
    if (a3 < a3)
    {
        v8 = a4 * a2 - a2 + a4;
    }
    else
    {
        v8 = (a2 * a5) - a5 + a4;
    }
    v9 = a1 * a5 + a2;
    v10 = a2 + a2 - a3 + a5;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 19
5 19
6 19
7 19
8 15
9 15
10 15
11 19
12 17
13 17
14 19
15 20
<<<sep_out_sample>>>
mov %edx,%r10d
sub %r8d,%r10d
cmp %edi,%r8d
mov $0x0,%eax
cmovg %eax,%r10d
lea (%rdx,%rsi,1),%eax
mov %edx,%r9d
sub %r8d,%r9d
cmp %r8d,%ecx
cmovl %eax,%r9d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (a2 < a4)
        {
            v6 += a2 * a5;
        }
        else
        {
            v6 += a5 - a3 - a1;
        }
    }
    if (a1 < a5)
    {
        v8 = a5 - a5;
    }
    else
    {
        v8 = a3 - a5;
    }
    if (a4 < a5)
    {
        v9 = a3 + a2;
    }
    else
    {
        v9 = (a1 + a3) - a5 - a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 22
4 22
5 22
6 26
7 26
8 26
9 26
10 26
11 32
12 32
13 32
14 32
15 32
16 32
17 33
<<<sep_out_sample>>>
cmp %r8d,%esi
jge 13 <func1+0x13>
mov %ecx,%eax
imul %r8d,%eax
mov %esi,%r10d
sub %eax,%r10d
jmp 1b <func1+0x1b>
lea (%rdx,%rdx,2),%r10d
imul %edi,%r10d
cmp %edi,%esi
jge 28 <func1+0x28>
lea (%rdi,%rdx,2),%eax
lea (%rax,%rcx,1),%r9d
jmp 33 <func1+0x33>
lea (%r8,%rcx,1),%r9d
imul %edx,%r9d
add %esi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
sub %ecx,%edi
add %edi,%eax
imul %r8d,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a2 < a5)
    {
        v6 = a2 - (a4 * a5);
    }
    else
    {
        v6 = ((a3 + a3) + a3) * a1;
    }
    if (a2 < a1)
    {
        v7 = (a1 + (a3 + a4)) + a3;
    }
    else
    {
        v7 = a2 + (a5 + a4) * a3;
    }
    v8 = a1 - a4;
    v9 = a5 * a2;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 12
11 12
12 14
13 14
14 14
15 18
16 18
17 18
18 22
19 22
20 22
21 22
22 22
23 22
24 20
25 22
26 21
27 22
28 23
<<<sep_out_sample>>>
cmp %edi,%r8d
jge 10 <func1+0x10>
lea (%rsi,%rdx,1),%eax
imul %esi,%eax
imul %ecx,%eax
jmp 21 <func1+0x21>
mov %ecx,%eax
imul %edx,%eax
imul %ecx,%eax
mov %edi,%r9d
sub %eax,%r9d
mov %r9d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += (a5 + a5) - a3;
    }
    if (a5 < a1)
    {
        v8 = (a2 * (a2 + a3)) * a4;
    }
    else
    {
        v8 = a1 - (a4 * a3 * a4);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 15
8 15
9 15
10 15
11 15
12 15
13 17
14 17
15 17
16 17
17 17
18 18
<<<sep_out_sample>>>
mov %edi,%eax
sub %edx,%eax
imul %r8d,%eax
add %edi,%eax
add %edx,%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r8d,%esi
imul %ecx,%esi
imul %esi,%r8d
add %eax,%r8d
add %ecx,%edx
lea 0x1(%r8,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a5 * ((a5 + a2) * a4);
    v7 = (a5 - a5 + a3) + a4;
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += a4 * a3 + a5;
    }
    v10 = (a5 * a1) - a3 * a5;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 12
5 12
6 12
7 12
8 12
9 4
10 4
11 4
12 12
13 5
14 12
15 13
<<<sep_out_sample>>>
lea (%rcx,%rdi,1),%eax
mov %esi,%r9d
sub %eax,%r9d
sub %edx,%r9d
lea (%rdi,%rdx,1),%r10d
cmp %r9d,%edi
jle 20 <func1+0x20>
lea (%rsi,%r8,1),%r10d
imul %ecx,%r10d
add %r8d,%r10d
cmp %r8d,%esi
jl 33 <func1+0x33>
mov %r8d,%r11d
imul %r8d,%r11d
mov %ecx,%eax
sub %edx,%eax
add %r11d,%eax
add %edi,%edx
add %esi,%edx
add %r8d,%edx
add %ecx,%edx
add %edx,%r9d
add %r9d,%r10d
add %r10d,%eax
imul %esi,%r8d
sub %r8d,%edi
add %edi,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a2 - (a4 + a1) - a3;
    if (v6 < a1)
    {
        v7 = ((a2 + a5) * a4) + a5;
    }
    else
    {
        v7 = a1 + a3;
    }
    if (a2 < a5)
    {
        v8 = a4 + (a1 + a3 - a3);
    }
    else
    {
        v8 = (a5 * a5) + (a4 - a3);
    }
    v9 = a1 - a2 * a5 + a4;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 11
6 5
7 5
8 7
9 7
10 7
11 13
12 13
13 19
14 19
15 19
16 19
17 19
18 22
19 22
20 22
21 22
22 22
23 22
24 22
25 21
26 21
27 21
28 22
29 23
<<<sep_out_sample>>>
mov %edi,%r9d
test %edx,%edx
jg 15 <func1+0x15>
mov %edx,%r9d
sub %ecx,%r9d
mov %esi,%eax
imul %edi,%eax
add %eax,%r9d
mov %r8d,%r10d
imul %r8d,%r10d
cmp %esi,%r9d
jge 32 <func1+0x32>
mov %edi,%eax
imul %esi,%eax
mov %ecx,%r11d
imul %r8d,%r11d
sub %r11d,%eax
jmp 3d <func1+0x3d>
mov %esi,%eax
imul %r8d,%eax
imul %edi,%eax
sub %esi,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%eax
add %r10d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (v6 < a3)
    {
        v6 = a1 + a5 - a5;
    }
    else
    {
        v6 = a3 - a4 + a2 * a1;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += (a4 + a4) - a4;
    }
    v9 = a3 + a5 * a5 - a3;
    if (v6 < a2)
    {
        v10 = a1 * a2 - a4 * a5;
    }
    else
    {
        v10 = a2 * a5 * a1 - a2;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 4
3 4
4 10
5 10
6 10
7 10
8 10
9 17
10 17
11 18
12 18
13 20
14 20
15 20
16 20
17 20
18 20
19 24
20 24
21 24
22 24
23 26
24 26
25 26
26 26
27 26
28 26
29 26
30 27
<<<sep_out_sample>>>
cmp %esi,%ecx
jge 10 <func1+0x10>
mov %r8d,%r9d
neg %r9d
imul %ecx,%r9d
jmp 18 <func1+0x18>
lea (%rsi,%rdi,1),%r9d
imul %ecx,%r9d
cmp $0x1,%esi
jle 2e <func1+0x2e>
lea (%rdi,%rdx,1),%r10d
mov $0x1,%eax
sub %r10d,%eax
imul %edi,%eax
jmp 39 <func1+0x39>
lea (%rdx,%r8,1),%r10d
lea (%rsi,%rdx,1),%eax
imul %r10d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a4 < a2)
    {
        v6 = a4 * ((a2 - a2) - a5);
    }
    else
    {
        v6 = (a2 + a1) * a4;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += (a2 + a5) + a4;
    }
    if (v8 < a2)
    {
        v9 = a1 - (a1 + a3) * a1;
    }
    else
    {
        v9 = (a3 + a5) * (a2 + a3);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 17
10 17
11 19
12 19
13 19
14 19
15 19
16 23
17 23
18 23
19 25
20 25
21 25
22 25
23 25
24 25
25 26
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
add %ecx,%esi
lea 0x1(%rcx,%r8,1),%eax
imul %r8d,%eax
lea 0x1(%rsi,%rax,1),%eax
sub %r8d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = (a5 * (a4 + a5)) + a5;
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += (a3 + a2) - a1;
    }
    v9 = (a4 + a4 - a5) - a4;
    v10 = 0;
    for (v11 = 0; v11++; v11<a4)
    {
        v10 += a5 + a5 - a1;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 16
4 16
5 4
6 4
7 16
8 10
9 16
10 17
<<<sep_out_sample>>>
cmp %edx,%esi
jge 14 <func1+0x14>
mov %edi,%eax
imul %edi,%eax
mov %ecx,%r9d
sub %eax,%r9d
add %ecx,%r9d
jmp 1b <func1+0x1b>
mov %ecx,%r9d
imul %edi,%r9d
cmp %r8d,%r9d
jge 2e <func1+0x2e>
lea (%r8,%r8,1),%r10d
imul %ecx,%r10d
imul %ecx,%r10d
jmp 36 <func1+0x36>
lea 0x1(%rdx),%r10d
imul %ecx,%r10d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
lea (%r9,%r10,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a2 < a3)
    {
        v6 = a4 - a1 * a1 + a4;
    }
    else
    {
        v6 = a4 * a1;
    }
    if (v6 < a5)
    {
        v7 = (a5 + a5) * a4 * a4;
    }
    else
    {
        v7 = a4 + a4 * a3;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 6
9 10
10 10
11 12
12 12
13 14
14 14
15 14
16 14
17 18
18 18
19 20
20 20
21 20
22 20
23 20
24 20
25 21
<<<sep_out_sample>>>
lea (%rsi,%rdx,2),%r9d
sub %ecx,%r9d
lea (%rdi,%rcx,1),%eax
cmp %r8d,%ecx
jge 1e <func1+0x1e>
mov %ecx,%eax
imul %ecx,%eax
mov %edi,%r10d
imul %r8d,%r10d
sub %r10d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = (a3 + a3 + a2) - a4;
    if (a4 < a5)
    {
        v7 = (a4 * a4) - a1 * a5;
    }
    else
    {
        v7 = a1 + a4;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 11
4 5
5 5
6 7
7 7
8 7
9 7
10 7
11 13
12 13
13 13
14 13
15 13
16 13
17 14
<<<sep_out_sample>>>
add %edi,%edx
add %edx,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%eax
sub $0x1,%edi
imul %edi,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += (a2 + a5) + a2;
    }
    if (a3 < a3)
    {
        v8 = (a5 * (a3 + a5)) + a5;
    }
    else
    {
        v8 = a1 * a5 - a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 15
6 15
7 17
8 18
<<<sep_out_sample>>>
mov %edi,%eax
imul %edi,%eax
lea 0x1(%rdi,%rdx,1),%edi
add %esi,%edi
add %r8d,%edi
lea 0x1(%rcx,%rdi,1),%ecx
add %r8d,%esi
imul %esi,%edx
add %ecx,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (v7 < a2)
        {
            v6 += a2 + a5 * a5;
        }
        else
        {
            v6 += a2 - a4 - a1;
        }
    }
    v8 = (a2 * a3) + a3 * a5;
    v9 = a5 + a1 * a1 - a5;
    v10 = 0;
    for (v11 = 0; v11++; v11<a1)
    {
        v10 += a3 * a2;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 17
2 17
3 23
4 23
5 23
6 23
7 16
8 16
9 23
10 23
11 24
<<<sep_out_sample>>>
lea (%r8,%rdi,1),%r9d
mov %ecx,%eax
sub %edi,%eax
mov %ecx,%r10d
imul %esi,%r10d
cmp %ecx,%r8d
cmovl %r10d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a5 + a1;
    if (a5 < a4)
    {
        v7 = a4 * a2;
    }
    else
    {
        v7 = (a3 - a3 - a1) + a4;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        if (a5 < a4)
        {
            v8 += a3 - (a2 * a1);
        }
        else
        {
            v8 += a2 * (a4 * a5);
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 11
3 11
4 7
5 7
6 7
7 7
8 25
9 25
10 25
11 25
12 25
13 25
14 26
<<<sep_out_sample>>>
cmp %esi,%ecx
jge c <func1+0xc>
lea (%rdx,%rdx,1),%eax
imul %ecx,%eax
jmp 15 <func1+0x15>
lea (%rsi,%rcx,1),%eax
imul %edi,%eax
imul %edi,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %r8d,%esi
add %esi,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a4 < a2)
    {
        v6 = a4 * (a3 + a3);
    }
    else
    {
        v6 = a1 * ((a2 + a4) * a1);
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += (a5 * a3) + a2;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        v9 += a1 - a3 * a5;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 22
10 22
11 22
12 22
13 22
14 23
<<<sep_out_sample>>>
cmp %edi,%ecx
jge 11 <func1+0x11>
mov %edx,%r9d
imul %edx,%r9d
imul %edi,%r9d
jmp 19 <func1+0x19>
lea (%rdx,%rcx,1),%r9d
imul %esi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
imul %r8d,%edx
imul %edx,%esi
imul %esi,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a4 < a1)
    {
        v6 = a3 * a3 * a1;
    }
    else
    {
        v6 = (a3 + a4) * a2;
    }
    v7 = a3 * a5 * a2 * a4;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 13
10 13
11 13
12 13
13 13
14 12
15 12
16 12
17 13
18 14
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%r9d
add %esi,%r9d
add %r8d,%r9d
add %ecx,%r9d
mov %edi,%eax
imul %edi,%eax
imul %eax,%ecx
sub %r8d,%ecx
lea (%r9,%rcx,1),%eax
imul %edi,%edx
add %edx,%eax
imul %r8d,%edi
imul %edi,%r8d
sub %r8d,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a3 < a3)
    {
        v6 = a3 * ((a1 * a5) * a5);
    }
    else
    {
        v6 = a1 * a1 * a4 - a5;
    }
    v7 = a3 * a1;
    v8 = a2 - (a1 * a5) * a5;
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        v9 += a1 * a5 * a3;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 19
2 19
3 19
4 19
5 10
6 10
7 10
8 10
9 19
10 12
11 19
12 13
13 13
14 13
15 19
16 20
<<<sep_out_sample>>>
mov %ecx,%r9d
imul %r8d,%r9d
add %esi,%r9d
add %ecx,%r9d
mov %edx,%eax
sub %ecx,%eax
cmp %edx,%ecx
jge 20 <func1+0x20>
mov $0x1,%eax
sub %esi,%eax
imul %r8d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = (a4 * a5 + a2) + a4;
    if (a4 < a3)
    {
        v7 = a5 - a2 * a5;
    }
    else
    {
        v7 = a2 - (a2 + a4) + a3;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 11
6 11
7 5
8 5
9 7
10 7
11 7
12 13
13 13
14 13
15 13
16 13
17 13
18 14
<<<sep_out_sample>>>
lea (%rcx,%r8,1),%r11d
mov %esi,%r10d
imul %edi,%r10d
add %edx,%r10d
add %ecx,%r10d
lea (%rdx,%rsi,1),%r9d
cmp %edx,%ecx
jge 27 <func1+0x27>
mov %ecx,%r9d
sub %r8d,%r9d
mov %edi,%eax
imul %edi,%eax
add %eax,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a1 + ((a4 - a1) + a5);
    v7 = a4 + ((a2 * a1) + a3);
    if (a4 < a3)
    {
        v8 = a4 - a5 + (a1 * a1);
    }
    else
    {
        v8 = a3 + a2 - a5 + a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 5
3 5
4 5
5 5
6 12
7 6
8 6
9 8
10 8
11 8
12 8
13 8
14 14
15 14
16 14
17 14
18 14
19 14
20 14
21 15
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%eax
imul %r8d,%ecx
imul %ecx,%r8d
imul %r8d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a1 - a5 + a4;
    }
    v8 = ((a5 * a4) * a5) * a3;
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        if (v6 < a1)
        {
            v9 += a4 + a4 * a4;
        }
        else
        {
            v9 += a3 + a1;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 22
4 22
5 9
6 9
7 9
8 22
9 23
<<<sep_out_sample>>>
lea (%rsi,%rdi,1),%r10d
cmp %r8d,%edi
jge 12 <func1+0x12>
mov %r8d,%r9d
imul %r8d,%r9d
jmp 20 <func1+0x20>
mov %esi,%r9d
sub %ecx,%r9d
add $0x1,%r9d
imul %r8d,%r9d
add %edi,%edx
add %esi,%edx
add %edx,%r8d
add %ecx,%r8d
add %r10d,%r8d
add %r9d,%r8d
add %ecx,%esi
sub %edi,%esi
sub %edi,%esi
lea (%r8,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a2 + a1;
    if (a1 < a5)
    {
        v7 = a5 * a5;
    }
    else
    {
        v7 = (a2 - a4) * a5 + a5;
    }
    v8 = a2 + a4 - a1 - a1;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 5
3 5
4 7
5 7
6 7
7 11
8 11
9 11
10 11
11 14
12 14
13 14
14 14
15 14
16 14
17 13
18 13
19 13
20 14
21 15
<<<sep_out_sample>>>
cmp %esi,%edi
jge d <func1+0xd>
lea (%rdi,%rcx,1),%r10d
add %r8d,%r10d
jmp 15 <func1+0x15>
mov %ecx,%eax
sub %edi,%eax
lea (%rax,%rdx,2),%r10d
mov %edi,%r9d
imul %esi,%r9d
imul %ecx,%r9d
imul %esi,%r9d
lea (%rsi,%r8,1),%eax
cmp %r9d,%edi
jle 35 <func1+0x35>
mov %r8d,%eax
imul %ecx,%eax
add %edx,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r10d,%ecx
add %ecx,%r9d
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a1 < a2)
    {
        v6 = a1 + a4 + a5;
    }
    else
    {
        v6 = a3 + (a3 + (a4 - a1));
    }
    if (a2 < a2)
    {
        v7 = a5 * a3;
    }
    else
    {
        v7 = a1 * a2 * a4 * a2;
    }
    if (v7 < a1)
    {
        v8 = (a5 * a4) + a3;
    }
    else
    {
        v8 = a2 + a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 18
10 18
11 18
12 18
13 26
14 20
15 20
16 22
17 22
18 22
19 28
20 28
21 28
22 28
23 28
24 28
25 28
26 29
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
sub %r8d,%edx
sub %r8d,%edx
lea (%rsi,%rcx,2),%eax
lea (%rax,%rdx,1),%eax
lea -0x1(%rdi),%edx
imul %edx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a4 + (a3 - a5 - a5);
    if (a4 < a4)
    {
        v7 = a5 * a2;
    }
    else
    {
        v7 = a1 * a1 - a1;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 13
2 13
3 13
4 4
5 4
6 4
7 13
8 11
9 11
10 13
11 14
<<<sep_out_sample>>>
mov %edi,%r9d
sub %ecx,%r9d
sub %edx,%r9d
mov $0x0,%eax
test %esi,%esi
jg 18 <func1+0x18>
lea -0x1(%rdx),%eax
imul %ecx,%eax
add %edi,%edx
add %edx,%esi
add %r8d,%esi
add %esi,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = (a1 - a4) - a3;
    if (v7 < a2)
    {
        v7 = (a1 * (a4 - a4)) * a2;
    }
    else
    {
        v7 = a4 * a3 - a4;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += a2 - a2 * a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 7
5 5
6 5
7 11
8 11
9 18
10 18
11 18
12 18
13 18
14 18
15 19
<<<sep_out_sample>>>
lea 0x1(%rdx),%r9d
imul %edi,%r9d
imul %r8d,%r9d
mov %esi,%eax
neg %eax
cmp %ecx,%edx
jge 1e <func1+0x1e>
mov %esi,%eax
sub %r8d,%eax
imul %esi,%eax
add %ecx,%eax
add %r9d,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (a5 < a3)
        {
            v6 += (a5 - a4) - a5;
        }
        else
        {
            v6 += a4 * a4;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        if (a4 < a1)
        {
            v8 += a5 * (a3 - a5);
        }
        else
        {
            v8 += (a5 + a1) - a1;
        }
    }
    v10 = a5 * (a1 + a3 * a1);
    if (a3 < a4)
    {
        v11 = a4 - a2 * (a5 - a2);
    }
    else
    {
        v11 = a1 - a2 - a1;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 28
2 28
3 28
4 35
5 35
6 29
7 29
8 31
9 31
10 31
11 31
12 37
13 37
14 37
15 37
16 37
17 37
18 38
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %r8d,%edx
lea 0x1(%rcx,%rdx,1),%eax
mov %esi,%edx
sub %edi,%edx
imul %edx,%ecx
add %ecx,%eax
add %r8d,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += (a2 + a1) - a3;
    }
    v8 = (a2 * a4) - (a4 * a1);
    if (a1 < a1)
    {
        v9 = a1 - (a2 + a5);
    }
    else
    {
        v9 = a5 + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 18
5 9
6 9
7 9
8 18
9 16
10 18
11 19
<<<sep_out_sample>>>
lea (%rdx,%r8,2),%eax
imul %edx,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (v7 < a2)
        {
            v6 += a2 - a5 * a5;
        }
        else
        {
            v6 += a5 * a2;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += a2 - (a2 + a2);
    }
    v10 = ((a5 + a3) + a5) * a3;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 22
4 22
5 22
6 22
7 22
8 23
<<<sep_out_sample>>>
mov %esi,%r9d
imul %edx,%r9d
add %r8d,%r9d
imul %r8d,%r9d
cmp %ecx,%r8d
jle 1f <func1+0x1f>
lea (%rdx,%rdx,1),%eax
lea (%rsi,%rcx,1),%r10d
sub %r10d,%eax
jmp 24 <func1+0x24>
mov %ecx,%eax
imul %esi,%eax
add %r9d,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a1 * a5;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        if (v6 < a3)
        {
            v8 += (a3 * a5) - a3;
        }
        else
        {
            v8 += a4 + a2 + a3;
        }
    }
    v10 = (a2 * a3 + a5) * a5;
    if (a4 < a5)
    {
        v11 = (a3 + a3) - (a2 + a4);
    }
    else
    {
        v11 = a4 * a2;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 21
5 22
6 22
7 24
8 24
9 24
10 24
11 28
12 28
13 30
14 30
15 30
16 30
17 30
18 30
19 31
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
lea 0x1(%rcx,%r8,1),%eax
sub %edx,%edi
add %edi,%eax
imul %ecx,%ecx
imul %ecx,%esi
imul %esi,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a1 * a4 + a4;
    }
    v8 = ((a2 - a2) - a3) + a1;
    v9 = (a4 * a4) * a2 * a3;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 11
5 9
6 11
7 10
8 10
9 10
10 11
11 12
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea (%r8,%rcx,1),%esi
add %edi,%edx
imul %ecx,%edi
sub %edi,%edx
lea 0x1(%rsi,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a3 + a1 - a1 * a4;
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += a5 - a2;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        if (v8 < a2)
        {
            v9 += a2 + a3;
        }
        else
        {
            v9 += a2 + a1 * a5;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 22
4 22
5 4
6 4
7 4
8 22
9 23
<<<sep_out_sample>>>
lea (%r8,%rdx,1),%r10d
test %edi,%edi
jle 12 <func1+0x12>
lea 0x1(%rsi),%r9d
imul %ecx,%r9d
jmp 19 <func1+0x19>
lea (%rdi,%r8,2),%r9d
add %edx,%r9d
mov %esi,%eax
sub %ecx,%eax
cmp %edi,%r9d
jge 2b <func1+0x2b>
mov %edi,%eax
not %eax
imul %ecx,%eax
add %edx,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r10d,%ecx
add %ecx,%r9d
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = ((a5 + a3) - a2) + a2;
    if (v7 < a1)
    {
        v7 = (a4 * a2) + a4;
    }
    else
    {
        v7 = (a1 + a5) + a5 + a3;
    }
    if (v7 < a1)
    {
        v8 = a3 - (a4 + a1 * a4);
    }
    else
    {
        v8 = a2 - a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 5
3 5
4 7
5 7
6 7
7 11
8 11
9 19
10 19
11 13
12 13
13 15
14 15
15 15
16 15
17 21
18 21
19 21
20 21
21 21
22 21
23 21
24 22
<<<sep_out_sample>>>
test %esi,%esi
jle 12 <func1+0x12>
mov %edi,%r10d
sub %edx,%r10d
sub %esi,%r10d
sub %ecx,%r10d
jmp 19 <func1+0x19>
lea (%rcx,%rdi,1),%r10d
add %r8d,%r10d
cmp %r8d,%edi
jle 2f <func1+0x2f>
mov %ecx,%r9d
imul %edi,%r9d
imul %esi,%r9d
imul %esi,%r9d
jmp 3c <func1+0x3c>
mov %esi,%r9d
imul %r8d,%r9d
sub %edi,%r9d
sub %edx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (v6 < a2)
    {
        v6 = (a1 - a3 - a2) - a4;
    }
    else
    {
        v6 = (a4 + a1) + a5;
    }
    if (a5 < a1)
    {
        v7 = (a4 * a1) * a2 * a2;
    }
    else
    {
        v7 = ((a2 * a5) - a1) - a3;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 12
11 12
12 14
13 14
14 14
15 14
16 14
17 18
18 18
19 18
20 18
21 20
22 20
23 20
24 20
25 20
26 20
27 21
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
lea 0x1(%rcx,%r8,1),%eax
sub %esi,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += (a4 * a5) + a2;
    }
    v8 = a4 - a2;
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        if (a5 < a1)
        {
            v9 += a5 * a4;
        }
        else
        {
            v9 += (a1 + a1) - a3;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 22
4 22
5 9
6 22
7 23
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a4 - a3 * a4;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        if (a2 < a2)
        {
            v8 += a5 * a4 - a2;
        }
        else
        {
            v8 += a2 * a1;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 21
5 22
<<<sep_out_sample>>>
mov %edi,%r9d
sub %esi,%r9d
mov %edx,%eax
imul %esi,%eax
imul %edx,%eax
imul %ecx,%eax
cmp %ecx,%edi
jle 26 <func1+0x26>
mov %ecx,%r10d
imul %r8d,%r10d
imul %ecx,%r10d
imul %esi,%r10d
jmp 32 <func1+0x32>
mov %edi,%r10d
sub %edx,%r10d
sub %ecx,%r10d
add %edi,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a4 - (a4 - a1 + a2);
    v7 = (a3 * a2) * a3 * a4;
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        if (v6 < a3)
        {
            v8 += (a4 - a3) + a1;
        }
        else
        {
            v8 += a5 * a4 - a4;
        }
    }
    if (a4 < a1)
    {
        v10 = a4 * a5 * a4 * a2;
    }
    else
    {
        v10 = a1 - a3 - a4 + a1;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 5
4 5
5 5
6 5
7 18
8 18
9 20
10 20
11 20
12 20
13 20
14 24
15 24
16 24
17 24
18 26
19 26
20 26
21 26
22 26
23 26
24 26
25 27
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a4 * a5 - a2;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += a4 + a1;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a1)
    {
        v10 += (a5 - a1) + a4;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 19
2 19
3 19
4 19
5 20
<<<sep_out_sample>>>
mov %edx,%eax
imul %edi,%eax
lea 0x1(%r8,%rax,1),%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += (a5 - a5) * a5;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += a2 + a4;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a2)
    {
        if (a3 < a1)
        {
            v10 += a1 * a5;
        }
        else
        {
            v10 += a2 * (a4 + a4);
        }
    }
    v12 = a3 * a1 + a5;
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 26
2 26
3 27
4 27
5 27
6 27
7 27
8 27
9 28
<<<sep_out_sample>>>
cmp %esi,%edi
jge 11 <func1+0x11>
mov %ecx,%eax
imul %r8d,%eax
add %edx,%eax
add %r8d,%eax
jmp 1b <func1+0x1b>
mov %ecx,%eax
sub %edi,%eax
imul %esi,%eax
add %r8d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea (%rax,%rcx,2),%eax
lea (%rax,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a1 < a2)
    {
        v6 = a4 * a5 + a3 + a5;
    }
    else
    {
        v6 = a5 + (a2 * (a4 - a1));
    }
    v7 = a4 - a5 + a5;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 13
13 13
14 13
15 13
16 13
17 14
<<<sep_out_sample>>>
mov %edi,%eax
imul %edi,%eax
add %ecx,%eax
add %edi,%eax
lea (%rdx,%rcx,1),%r9d
mov %esi,%r10d
imul %r8d,%r10d
sub %r10d,%r9d
cmp %esi,%eax
jge 2b <func1+0x2b>
mov %edx,%r10d
sub %edi,%r10d
imul %edi,%r10d
imul %r8d,%r10d
jmp 39 <func1+0x39>
mov %edi,%r10d
imul %esi,%r10d
imul %edx,%r10d
sub %esi,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%eax
lea 0x1(%r9,%rax,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a4 < a4)
    {
        v6 = a3 * a3;
    }
    else
    {
        v6 = a4 + a1 * a1 + a1;
    }
    v7 = a3 + a4 - a2 * a5;
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += a2 - a4 - a1;
    }
    if (v6 < a2)
    {
        v10 = a1 * (a3 - a1) * a5;
    }
    else
    {
        v10 = ((a1 * a2) * a3) - a2;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 12
6 12
7 12
8 12
9 18
10 18
11 20
12 20
13 20
14 20
15 20
16 24
17 24
18 24
19 24
20 26
21 26
22 26
23 26
24 26
25 26
26 26
27 27
<<<sep_out_sample>>>
mov %r8d,%eax
imul %esi,%eax
mov %eax,%r11d
imul %ecx,%r11d
sub %esi,%r11d
cmp %edi,%r8d
jge 24 <func1+0x24>
mov %edx,%r10d
imul %edi,%r10d
add %r8d,%r10d
sub %edi,%r10d
jmp 2b <func1+0x2b>
imul %esi,%eax
lea (%rax,%rdi,1),%r10d
cmp %edi,%r8d
jle 39 <func1+0x39>
mov %edx,%r9d
imul %edi,%r9d
jmp 44 <func1+0x44>
lea (%rdi,%rsi,1),%r9d
sub %r8d,%r9d
imul %ecx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
mov %esi,%edx
sub %ecx,%edx
add %edx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = (a5 * a2) * a4 - a2;
    if (a5 < a1)
    {
        v7 = (a3 * a1 + a5) - a1;
    }
    else
    {
        v7 = a2 * (a5 * a2) + a1;
    }
    if (a1 < a5)
    {
        v8 = a3 * a1;
    }
    else
    {
        v8 = ((a1 + a2) - a5) * a4;
    }
    v9 = a2 - (a4 - a2);
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 4
6 5
7 5
8 7
9 7
10 7
11 7
12 7
13 11
14 11
15 13
16 13
17 15
18 15
19 15
20 19
21 19
22 19
23 22
24 22
25 22
26 22
27 22
28 22
29 22
30 21
31 21
32 21
33 22
34 23
<<<sep_out_sample>>>
cmp %edi,%esi
jge b <func1+0xb>
mov %esi,%eax
imul %edi,%eax
jmp 19 <func1+0x19>
mov %edi,%eax
imul %esi,%eax
mov %ecx,%r9d
sub %eax,%r9d
mov %r9d,%eax
add %edx,%edi
add %esi,%edi
add %edi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
imul %edx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a2 < a1)
    {
        v6 = a2 * a1;
    }
    else
    {
        v6 = a4 - a1 * a2;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        if (v8 < a3)
        {
            v7 += a2 - a1;
        }
        else
        {
            v7 += a5 + a1 + a4;
        }
    }
    v9 = a2 * a3;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 10
10 10
11 25
12 25
13 25
14 25
15 25
16 24
17 25
18 26
<<<sep_out_sample>>>
push %rbx
mov %r8d,%ebx
sub %edx,%ebx
mov %ecx,%eax
imul %r8d,%eax
imul %r8d,%eax
mov %edi,%r9d
sub %eax,%r9d
lea (%r8,%r8,1),%r11d
cmp %esi,%r9d
jge 2a <func1+0x2a>
mov %edi,%r10d
sub %ecx,%r10d
add %esi,%r10d
jmp 31 <func1+0x31>
mov %edx,%r10d
imul %esi,%r10d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %ebx,%eax
add %r9d,%eax
add %r11d,%eax
add %r10d,%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a5 - a3;
    v7 = a1 - a4 * a5 * a5;
    v8 = a5 + a5;
    if (v7 < a2)
    {
        v9 = (a1 - a4) + a2;
    }
    else
    {
        v9 = a3 * a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 4
3 4
4 5
5 5
6 5
7 5
8 5
9 6
10 7
11 7
12 9
13 9
14 9
15 9
16 13
17 13
18 15
19 15
20 15
21 15
22 15
23 15
24 15
25 15
26 16
27 16
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (a1 < a4)
        {
            v6 += a3 + (a1 + a2);
        }
        else
        {
            v6 += a1 * (a2 * a5);
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        if (a1 < a3)
        {
            v8 += a5 + a1;
        }
        else
        {
            v8 += a3 - a3;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 28
2 28
3 28
4 28
5 29
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %edx,%edx
sub %edx,%ecx
lea 0x1(%rcx),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = (a1 - a3 - a3) - a1;
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        if (v8 < a4)
        {
            v7 += (a2 - a3) - a2;
        }
        else
        {
            v7 += a3 - a5;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 4
6 17
7 17
8 18
<<<sep_out_sample>>>
cmp %edx,%esi
jge 14 <func1+0x14>
mov %edi,%r9d
sub %r8d,%r9d
sub $0x1,%r9d
imul %r8d,%r9d
jmp 1b <func1+0x1b>
mov %edi,%r9d
imul %r8d,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
add %r8d,%ecx
add %r9d,%ecx
add %edx,%esi
sub %edi,%esi
lea (%rcx,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a2 < a3)
    {
        v6 = ((a1 - a5) * a5) - a5;
    }
    else
    {
        v6 = a1 * a5;
    }
    v7 = a3 + a2 - a1;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 13
11 13
12 13
13 13
14 13
15 12
16 12
17 13
18 14
<<<sep_out_sample>>>
add %edx,%edi
add %esi,%edi
add %r8d,%edi
add %ecx,%edi
sub %ecx,%r8d
sub %edx,%r8d
add %r8d,%esi
lea 0x1(%rdi,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = (a5 - a4) - a3 + a2;
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        if (a3 < a3)
        {
            v7 += a5 * a4 * a5;
        }
        else
        {
            v7 += a4 + a4;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 4
6 4
7 4
8 17
9 18
<<<sep_out_sample>>>
lea (%rdi,%rsi,1),%eax
add %edx,%edi
add %edi,%esi
add %r8d,%esi
add %esi,%ecx
sub %r8d,%edx
lea (%rcx,%rax,2),%eax
lea (%rax,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a1 + a2;
    v7 = a3 - a5;
    v8 = a2 + a1;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 7
3 7
4 7
5 7
6 5
7 7
8 7
9 8
<<<sep_out_sample>>>
lea (%r8,%rsi,1),%r9d
sub %edi,%r9d
cmp %edx,%r8d
jle 1e <func1+0x1e>
lea (%rdi,%rdx,1),%eax
imul %r8d,%eax
mov %esi,%r11d
sub %eax,%r11d
mov %r11d,%eax
jmp 28 <func1+0x28>
lea 0x1(%r8),%eax
imul %edx,%eax
add %r8d,%eax
mov %r8d,%r10d
sub %ecx,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a5 + a2 - a1;
    if (a3 < a5)
    {
        v7 = a2 - a5 * (a1 + a3);
    }
    else
    {
        v7 = ((a3 * a5) + a3) + a5;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += a5 - a1;
    }
    if (a4 < a4)
    {
        v10 = a5 * (a3 + a1) * a4;
    }
    else
    {
        v10 = a5 - a4;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 5
4 5
5 7
6 7
7 7
8 7
9 7
10 7
11 11
12 11
13 11
14 24
15 24
16 26
17 26
18 26
19 26
20 26
21 26
22 26
23 27
<<<sep_out_sample>>>
mov %r8d,%eax
imul %esi,%eax
mov %edx,%r10d
sub %eax,%r10d
mov %r10d,%eax
sub %ecx,%eax
cmp %eax,%edx
jle 1e <func1+0x1e>
mov %ecx,%r9d
imul %r8d,%r9d
jmp 28 <func1+0x28>
mov %edi,%r9d
neg %r9d
imul %edi,%r9d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%eax
lea 0x1(%r9,%rax,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a3 - a5 * a2 - a4;
    if (v6 < a3)
    {
        v7 = a4 * a5;
    }
    else
    {
        v7 = a1 - (a1 * a1) - a1;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += a1 * a3 * a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 4
6 4
7 5
8 5
9 7
10 7
11 7
12 11
13 11
14 11
15 18
16 18
17 18
18 18
19 18
20 18
21 19
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %eax,%ecx
mov %edi,%eax
imul %esi,%eax
imul %eax,%edx
lea (%rcx,%rdx,1),%eax
add %esi,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a2 < a2)
    {
        v6 = a2 * (a4 - a3 * a4);
    }
    else
    {
        v6 = a1 * a2 * a3;
    }
    v7 = ((a1 + a5) + a2) - a5;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 13
2 13
3 13
4 13
5 10
6 10
7 10
8 13
9 12
10 13
11 14
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
lea 0x1(%rcx,%rax,1),%eax
sub %r8d,%edi
sub %edx,%edi
add %edi,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a2 + a3 + a2;
    }
    if (a5 < a5)
    {
        v8 = a2 + a2 - a2 + a3;
    }
    else
    {
        v8 = (a1 - a5 - a3) + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 15
6 15
7 15
8 17
9 18
<<<sep_out_sample>>>
mov %esi,%r9d
imul %ecx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
mov %ecx,%esi
sub %edi,%esi
imul %edx,%esi
add %esi,%edi
add %eax,%edi
lea (%rdx,%r8,2),%eax
sub %ecx,%eax
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a4 + (a2 - a4) - a2;
    v7 = a2 * a4;
    v8 = (a4 - a1) * a3 + a1;
    v9 = a3 + a5 - a4 + a5;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 5
2 5
3 8
4 8
5 8
6 8
7 8
8 6
9 6
10 6
11 6
12 8
13 7
14 7
15 8
16 9
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += (a3 * a3) * a1;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += a1 - a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 14
2 14
3 14
4 14
5 15
<<<sep_out_sample>>>
test %esi,%esi
jle d <func1+0xd>
mov %r8d,%eax
imul %r8d,%eax
jmp 15 <func1+0x15>
mov %edx,%eax
sub %esi,%eax
add %edx,%eax
sub %ecx,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (a3 < a3)
        {
            v6 += a5 * a3;
        }
        else
        {
            v6 += (a2 - a5) + a5;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        if (a5 < a4)
        {
            v8 += (a2 + a3) + a3;
        }
        else
        {
            v8 += a5 - a3;
        }
    }
    if (v10 < a2)
    {
        v10 = a5 * a5;
    }
    else
    {
        v10 = (a3 + (a3 - a2)) - a4;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 28
2 28
3 30
4 30
5 30
6 34
7 34
8 34
9 34
10 36
11 36
12 36
13 36
14 36
15 37
<<<sep_out_sample>>>
lea (%r8,%r8,1),%r9d
mov $0x0,%eax
mov %r8d,%r10d
sub %edi,%r10d
cmp %ecx,%esi
cmovl %r10d,%eax
add %r9d,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a1 - a1 + a1;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += (a3 - a5) + a2;
    }
    v10 = a5 + a5;
    if (a2 < a4)
    {
        v11 = (a5 - a2) - a1 + a2;
    }
    else
    {
        v11 = a3 - a3;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 14
2 21
3 17
4 17
5 17
6 17
7 23
8 23
9 23
10 23
11 23
12 23
13 24
<<<sep_out_sample>>>
mov %edi,%r9d
sub %edx,%r9d
cmp $0x1,%edx
jle 1c <func1+0x1c>
mov %esi,%eax
imul %ecx,%eax
mov %r8d,%r10d
imul %r8d,%r10d
sub %r10d,%eax
jmp 26 <func1+0x26>
mov %edi,%eax
imul %ecx,%eax
sub %edx,%eax
add %r8d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %r9d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (v6 < a3)
        {
            v6 += a3 * a5;
        }
        else
        {
            v6 += a5 * a1;
        }
    }
    v8 = a1 - a3;
    if (v7 < a3)
    {
        v9 = (a2 * a4) - (a5 * a5);
    }
    else
    {
        v9 = (a1 * a4 - a3) + a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 17
4 17
5 19
6 19
7 19
8 19
9 19
10 19
11 23
12 23
13 23
14 23
15 25
16 25
17 25
18 25
19 25
20 25
21 26
<<<sep_out_sample>>>
mov $0x0,%r9d
cmp %edx,%ecx
jge 15 <func1+0x15>
lea -0x1(%rdx),%r9d
imul %r8d,%r9d
add %ecx,%r9d
cmp %ecx,%r9d
jge 2a <func1+0x2a>
mov %edi,%r10d
imul %esi,%r10d
imul %esi,%r10d
sub %edi,%r10d
jmp 36 <func1+0x36>
lea (%r8,%rcx,1),%r10d
imul %edi,%r10d
imul %edx,%r10d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
lea (%r9,%r10,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a4 < a3)
    {
        v6 = (a5 * a3) - a5 + a4;
    }
    else
    {
        v6 = (a3 - a3) * (a4 * a3);
    }
    if (v6 < a4)
    {
        v7 = ((a1 * a2) * a2) - a1;
    }
    else
    {
        v7 = a1 * (a5 + a4) * a3;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 6
7 12
8 12
9 14
10 14
11 14
12 14
13 14
14 18
15 18
16 18
17 20
18 20
19 20
20 20
21 20
22 20
23 21
<<<sep_out_sample>>>
test %esi,%esi
jle 10 <func1+0x10>
mov %esi,%eax
imul %r8d,%eax
sub %edi,%eax
sub %ecx,%eax
jmp 1a <func1+0x1a>
lea (%rdx,%r8,1),%eax
imul %ecx,%eax
imul %ecx,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a1 - (a3 + a5);
    }
    if (v6 < a2)
    {
        v8 = ((a2 * a5) - a1) - a4;
    }
    else
    {
        v8 = ((a3 + a5) * a4) * a4;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        if (v7 < a3)
        {
            v9 += a1 - a1 + a1;
        }
        else
        {
            v9 += a4 - a4;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 11
8 15
9 15
10 15
11 29
12 29
13 29
14 29
15 29
16 30
<<<sep_out_sample>>>
cmp %edx,%edi
jge 14 <func1+0x14>
mov %ecx,%r9d
imul %ecx,%r9d
imul %esi,%r9d
add %edi,%r9d
jmp 20 <func1+0x20>
mov %edx,%r9d
sub %esi,%r9d
add %r8d,%r9d
add %ecx,%r9d
mov %edx,%eax
sub %esi,%eax
imul %ecx,%eax
imul %esi,%eax
cmp %r8d,%edx
jge 3c <func1+0x3c>
lea -0x1(%rsi),%r10d
imul %ecx,%r10d
sub %edi,%r10d
jmp 47 <func1+0x47>
lea 0x1(%rcx),%r10d
imul %esi,%r10d
sub %edi,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a1 < a3)
    {
        v6 = ((a4 * a4) * a2) + a1;
    }
    else
    {
        v6 = a3 - a2 + a5 + a4;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += a5 - a2 - a5;
    }
    v9 = (a3 - a2) * a4 * a2;
    if (a3 < a5)
    {
        v10 = a4 * a2 - a4 - a1;
    }
    else
    {
        v10 = a2 + a4 * a2 - a1;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 17
13 17
14 17
15 17
16 18
17 18
18 20
19 20
20 20
21 20
22 24
23 24
24 24
25 26
26 26
27 26
28 26
29 26
30 26
31 26
32 27
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %r8d,%edx
add %ecx,%edx
mov %ecx,%eax
sub %r8d,%eax
add %eax,%edx
mov %r8d,%eax
imul %ecx,%eax
lea (%rax,%rdi,2),%r9d
add %r9d,%edx
sub %edi,%esi
add %esi,%r8d
sub %ecx,%r8d
lea (%rdx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a4 - a5;
    v7 = a1 + a5 * a4 + a1;
    v8 = (a2 - a1 + a5) - a4;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 7
2 7
3 7
4 7
5 4
6 4
7 7
8 5
9 5
10 5
11 7
12 6
13 6
14 6
15 7
16 8
<<<sep_out_sample>>>
lea (%rdi,%rcx,1),%r11d
mov %edi,%r10d
sub %ecx,%r10d
imul %esi,%r10d
imul %edx,%r10d
mov %edi,%r9d
neg %r9d
sub %ecx,%r9d
cmp %r8d,%esi
jle 28 <func1+0x28>
lea (%rsi,%r8,1),%r9d
imul %edi,%r9d
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a1 + a4;
    v7 = a3 * (a2 * (a1 - a4));
    if (a5 < a2)
    {
        v8 = a1 * a2 + a1 * a5;
    }
    else
    {
        v8 = a4 - a4 - a1 - a4;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a1)
    {
        if (v8 < a2)
        {
            v9 += (a3 + a1) + a4;
        }
        else
        {
            v9 += a3 - a3 + a3;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 5
3 5
4 5
5 5
6 12
7 12
8 12
9 6
10 6
11 8
12 8
13 26
14 26
15 26
16 26
17 26
18 26
19 26
20 27
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea (%r8,%rcx,1),%esi
mov %edx,%eax
imul %edx,%eax
sub %eax,%ecx
add %ecx,%edx
lea 0x1(%rsi,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a3 - (a3 * a3 - a4);
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        if (a4 < a5)
        {
            v7 += (a3 + a3) * a5;
        }
        else
        {
            v7 += a3 * a2 * a4;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 4
6 4
7 4
8 4
9 17
10 18
<<<sep_out_sample>>>
cmp $0x1,%edi
jle e <func1+0xe>
lea 0x2(%r8),%eax
imul %edi,%eax
jmp 1b <func1+0x1b>
lea (%rsi,%rdx,1),%r9d
mov %edi,%eax
imul %r8d,%eax
add %r9d,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a2 + a5 * a5;
    }
    if (v7 < a1)
    {
        v8 = a5 * a1 + a1 + a1;
    }
    else
    {
        v8 = (a2 + a3) + a1 * a5;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        if (a4 < a1)
        {
            v9 += a1 + a2 * a3;
        }
        else
        {
            v9 += a1 + (a3 + a3);
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 15
7 15
8 15
9 15
10 29
11 29
12 29
13 29
14 29
15 30
<<<sep_out_sample>>>
cmp %ecx,%edx
jge e <func1+0xe>
lea (%rcx,%rdx,1),%eax
add %esi,%eax
sub %r8d,%eax
jmp 1b <func1+0x1b>
mov %edx,%r9d
imul %esi,%r9d
lea (%rdi,%rsi,1),%eax
add %r9d,%eax
lea (%rdi,%rdx,1),%r9d
add %esi,%r9d
add %r9d,%r8d
add %ecx,%r8d
add %eax,%r8d
sub %esi,%edi
imul %ecx,%edx
sub %edx,%edi
lea (%r8,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a3 < a4)
    {
        v6 = a4 + a3 + a2 - a5;
    }
    else
    {
        v6 = (a3 * a2) + (a1 + a2);
    }
    v7 = a1 - a2 - (a3 * a4);
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 10
11 13
12 13
13 13
14 13
15 13
16 12
17 12
18 12
19 13
20 14
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += (a2 + a5) * a3;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        if (a3 < a3)
        {
            v8 += a3 * a3 * a5;
        }
        else
        {
            v8 += a1 - a1 * a4;
        }
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a1)
    {
        v10 += a4 + a1 - a1;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 26
2 26
3 26
4 26
5 27
<<<sep_out_sample>>>
lea (%rcx,%r8,2),%r9d
cmp %edi,%esi
jl f <func1+0xf>
mov %r8d,%r9d
imul %r8d,%r9d
lea (%rdx,%r8,1),%r10d
cmp %r8d,%esi
mov $0x0,%eax
cmovg %r10d,%eax
mov %r8d,%r10d
sub %ecx,%r10d
cmp $0x2,%r8d
cmovl %esi,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a2 < a1)
    {
        v6 = a5 + (a4 + a5);
    }
    else
    {
        v6 = a5 * a5;
    }
    if (a5 < a2)
    {
        v7 = a3 + a5;
    }
    else
    {
        v7 = a5 - a5;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += a4 - a5 * a4;
    }
    if (v9 < a5)
    {
        v10 = a5 - a4;
    }
    else
    {
        v10 = (a2 * (a4 - a4)) + a2;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 4
3 4
4 10
5 10
6 14
7 14
8 14
9 14
10 27
11 27
12 27
13 27
14 33
15 33
16 33
17 33
18 33
19 33
20 33
21 34
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %r8d,%edx
add %ecx,%edx
mov %esi,%eax
imul %ecx,%eax
add %r8d,%eax
imul %edi,%eax
add %edx,%eax
imul %r8d,%esi
add %esi,%eax
sub %r8d,%edi
add $0x1,%edi
imul %ecx,%edi
add %edi,%eax
add %ecx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a1 * (a2 * a4 + a5);
    v7 = a2 * a5;
    v8 = (a4 * (a1 - a5)) + a4;
    v9 = a4 + a5;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 8
2 8
3 8
4 8
5 4
6 4
7 4
8 4
9 8
10 5
11 8
12 6
13 6
14 6
15 8
16 7
17 8
18 9
<<<sep_out_sample>>>
cmp %edx,%r8d
jge 1b <func1+0x1b>
mov %edx,%r10d
imul %r8d,%r10d
imul %r8d,%r10d
add %edx,%r10d
mov %edx,%r9d
sub %esi,%r9d
jmp 2f <func1+0x2f>
mov %esi,%r10d
sub %edx,%r10d
mov %ecx,%r9d
sub %esi,%r9d
mov %edi,%eax
imul %esi,%eax
add %eax,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
sub %edi,%esi
imul %r8d,%esi
add %eax,%esi
imul %edx,%r8d
add %r8d,%edi
sub %edx,%edi
lea (%rsi,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a5 < a3)
    {
        v6 = a3 + a5 * (a3 * a5);
    }
    else
    {
        v6 = a2 - a3;
    }
    if (a5 < a3)
    {
        v7 = ((a3 - a4) + a4) - a2;
    }
    else
    {
        v7 = a4 - a2 + (a1 * a2);
    }
    v8 = a5 * a2 - (a1 * a5);
    v9 = (a3 * a5 + a1) - a3;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 14
8 14
9 14
10 10
11 10
12 18
13 18
14 18
15 18
16 18
17 22
18 22
19 22
20 22
21 22
22 22
23 20
24 20
25 22
26 21
27 21
28 21
29 22
30 23
<<<sep_out_sample>>>
cmp %esi,%edx
jge d <func1+0xd>
mov %esi,%r10d
imul %ecx,%r10d
jmp 18 <func1+0x18>
mov %edi,%r10d
imul %edx,%r10d
imul %edi,%r10d
lea (%r8,%rdx,1),%eax
lea (%rdi,%rdx,1),%r9d
add %r9d,%esi
add %r8d,%esi
add %ecx,%esi
add %r10d,%esi
imul %edi,%r8d
add %eax,%r8d
add %esi,%r8d
add %edx,%eax
sub %edi,%eax
add %r8d,%eax
add %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a3 < a2)
    {
        v6 = a2 * a4;
    }
    else
    {
        v6 = a1 * a3 * a1;
    }
    v7 = a5 + a3 + a1 * a5;
    v8 = (a5 + a3) + a3 - a1;
    v9 = a1 + a3 + a4;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 12
10 14
11 15
12 15
13 15
14 15
15 12
16 12
17 15
18 13
19 13
20 15
21 14
22 15
23 16
<<<sep_out_sample>>>
cmp %edi,%edx
jge 13 <func1+0x13>
mov %edx,%r10d
imul %ecx,%r10d
sub %edi,%r10d
add %esi,%r10d
jmp 20 <func1+0x20>
mov %esi,%r10d
imul %r8d,%r10d
add %ecx,%r10d
sub %r8d,%r10d
mov %r8d,%eax
sub %esi,%eax
mov %esi,%r9d
sub %ecx,%r9d
cmp %esi,%ecx
cmovl %eax,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a3 < a1)
    {
        v6 = a3 * a4 - a1 + a2;
    }
    else
    {
        v6 = (a2 * a5) + a4 - a5;
    }
    if (a4 < a2)
    {
        v7 = a5 - a2;
    }
    else
    {
        v7 = a2 - a4;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 14
13 14
14 14
15 14
16 14
17 14
18 20
19 20
20 20
21 20
22 20
23 20
24 21
<<<sep_out_sample>>>
push %rbx
lea 0x2(%rdi),%ebx
imul %edi,%ebx
cmp %r8d,%ecx
jge 14 <func1+0x14>
mov %ecx,%r11d
sub %edi,%r11d
jmp 22 <func1+0x22>
mov %ecx,%eax
imul %ecx,%eax
mov %edx,%r11d
sub %eax,%r11d
add %edi,%r11d
cmp %esi,%edx
jle 2c <func1+0x2c>
lea (%r8,%r8,1),%r10d
jmp 33 <func1+0x33>
mov %esi,%r10d
imul %r8d,%r10d
cmp %esi,%edi
jge 40 <func1+0x40>
mov %esi,%r9d
imul %edi,%r9d
jmp 4d <func1+0x4d>
mov %esi,%r9d
imul %esi,%r9d
sub %edx,%r9d
add %ecx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %ebx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a1 * a1 + a1 + a1;
    if (a4 < a5)
    {
        v7 = a4 - a5 - a1 + a5;
    }
    else
    {
        v7 = a1 - ((a4 * a4) - a3);
    }
    if (a2 < a3)
    {
        v8 = a5 + a5;
    }
    else
    {
        v8 = a2 * a5;
    }
    if (a1 < a2)
    {
        v9 = a2 * a1;
    }
    else
    {
        v9 = (a2 * a2) - a3 + a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 4
3 4
4 5
5 5
6 7
7 7
8 7
9 11
10 11
11 11
12 11
13 11
14 13
15 13
16 15
17 15
18 19
19 19
20 21
21 21
22 23
23 23
24 23
25 27
26 27
27 27
28 27
29 29
30 29
31 29
32 29
33 29
34 29
35 29
36 29
37 30
38 30
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %edx,%r8d
lea (%r8,%rcx,1),%edx
lea (%rdi,%rdi,1),%eax
imul %esi,%eax
imul %edi,%eax
add %eax,%edx
add %ecx,%edi
mov %esi,%r8d
imul %ecx,%r8d
sub %r8d,%edi
lea (%rdx,%rdi,1),%eax
mov $0x1,%edx
sub %ecx,%edx
imul %edx,%esi
add %esi,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a2 * (a1 + a1) * a1;
    v7 = a1 + a4 - a2 * a4;
    v8 = a2 - a4 * a2 + a4;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 7
2 7
3 7
4 7
5 4
6 4
7 4
8 7
9 5
10 5
11 5
12 5
13 7
14 6
15 6
16 6
17 6
18 7
19 8
<<<sep_out_sample>>>
cmp %edx,%ecx
jge 12 <func1+0x12>
mov %edi,%eax
imul %r8d,%eax
imul %edi,%eax
imul %edx,%eax
jmp 1d <func1+0x1d>
mov %edx,%eax
imul %edx,%eax
sub %r8d,%eax
sub %r8d,%eax
add %edi,%edx
add %esi,%edx
add %r8d,%edx
add %edx,%ecx
add %ecx,%eax
imul %r8d,%r8d
imul %r8d,%edi
imul %edi,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a4 < a3)
    {
        v6 = a1 * a5 * a1 * a3;
    }
    else
    {
        v6 = (a3 * a3) - a5 - a5;
    }
    if (a2 < a2)
    {
        v7 = (a3 + a1) + (a1 * a2);
    }
    else
    {
        v7 = (a5 * a5) * a1 * a2;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 20
13 20
14 20
15 20
16 20
17 18
18 18
19 18
20 20
21 21
<<<sep_out_sample>>>
test %edi,%edi
jle 11 <func1+0x11>
lea 0x1(%rcx),%r9d
imul %esi,%r9d
sub %r8d,%r9d
jmp 1d <func1+0x1d>
mov %ecx,%r9d
sub %edx,%r9d
add %esi,%r9d
add %edi,%r9d
cmp %edx,%r8d
jge 2a <func1+0x2a>
lea (%rdi,%rdi,1),%eax
imul %esi,%eax
jmp 36 <func1+0x36>
mov %edx,%eax
imul %r8d,%eax
add $0x1,%eax
imul %edx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (v6 < a1)
    {
        v6 = ((a4 * a2) + a2) - a5;
    }
    else
    {
        v6 = (a4 - a3 + a2) + a1;
    }
    if (a5 < a3)
    {
        v7 = a2 * a1 + a1 * a2;
    }
    else
    {
        v7 = a3 * a5 * a3 + a3;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        if (a4 < a2)
        {
            v8 += a5 - a5 - a1;
        }
        else
        {
            v8 += a4 + (a2 - a4);
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 10
11 12
12 12
13 14
14 14
15 14
16 18
17 18
18 18
19 18
20 32
21 32
22 32
23 32
24 32
25 32
26 33
<<<sep_out_sample>>>
mov %r8d,%r10d
neg %r10d
sub %edx,%r10d
mov %edx,%r9d
sub %r8d,%r9d
cmp %ecx,%esi
mov $0x0,%eax
cmovl %eax,%r9d
add %edi,%edx
add %esi,%edx
add %r8d,%edx
add %ecx,%edx
add %r10d,%edx
add %r9d,%edx
lea (%rdi,%rsi,1),%eax
sub %eax,%ecx
sub %esi,%ecx
lea (%rdx,%rcx,1),%eax
imul %edi,%esi
imul %r8d,%r8d
add %esi,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = (a2 - a5) - a2 - a3;
    if (a2 < a4)
    {
        v7 = ((a2 - a2) - a5) + a5;
    }
    else
    {
        v7 = a3 - a5;
    }
    v8 = (a4 - (a1 + a2)) - a2;
    v9 = (a1 * a2) + a5 * a5;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 11
5 11
6 11
7 11
8 11
9 15
10 15
11 15
12 15
13 15
14 15
15 13
16 13
17 13
18 15
19 14
20 14
21 14
22 15
23 16
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %r8d,%edx
imul %r8d,%esi
lea (%rdx,%rcx,2),%eax
lea 0x1(%rsi,%rax,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a4 < a4)
    {
        v6 = a1 - a2 + a4;
    }
    else
    {
        v6 = a4 + (a5 * a2);
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += (a3 * a1) + a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 10
5 10
6 17
7 18
<<<sep_out_sample>>>
test %edi,%edi
jle c <func1+0xc>
mov %edi,%eax
imul %r8d,%eax
jmp 14 <func1+0x14>
lea (%rcx,%rdx,1),%eax
sub %edi,%eax
imul %edx,%eax
lea 0x1(%rax,%rdi,1),%eax
add %eax,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (a1 < a2)
        {
            v6 += a5 * a5 * a3;
        }
        else
        {
            v6 += (a2 + a1) - a2;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        if (a3 < a3)
        {
            v8 += a4 * a1 + a3;
        }
        else
        {
            v8 += a4 + a4;
        }
    }
    if (v8 < a1)
    {
        v10 = a1 * a5;
    }
    else
    {
        v10 = ((a4 + a3) - a1) * a3;
    }
    v11 = 0;
    for (v12 = 0; v12++; v12<a2)
    {
        if (v10 < a5)
        {
            v11 += (a3 + a2) - a2;
        }
        else
        {
            v11 += a2 - a5 - a1;
        }
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 28
2 28
3 30
4 30
5 30
6 34
7 34
8 34
9 48
10 48
11 48
12 48
13 48
14 49
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
add %r8d,%ecx
mov %esi,%eax
sub %edx,%eax
add %eax,%ecx
sub %esi,%edi
lea 0x1(%rcx,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = a2 - a3;
    v7 = a1 - a2;
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        if (a5 < a4)
        {
            v8 += a4 * a2 - a3;
        }
        else
        {
            v8 += (a3 + a1) - a5;
        }
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a5)
    {
        if (v8 < a3)
        {
            v10 += a5 * a2;
        }
        else
        {
            v10 += a4 + a2;
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 30
2 30
3 30
4 30
5 4
6 4
7 30
8 5
9 30
10 31
<<<sep_out_sample>>>
mov %r8d,%eax
imul %edi,%eax
add %ecx,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += (a5 + a3) + a1;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        if (v8 < a3)
        {
            v8 += a3 - a5;
        }
        else
        {
            v8 += a2 - (a2 - a4);
        }
    }
    v10 = a4 + a5 * a1;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 22
5 22
6 22
7 22
8 22
9 23
<<<sep_out_sample>>>
cmp $0x1,%esi
jle d <func1+0xd>
mov %esi,%r9d
sub %edx,%r9d
jmp 18 <func1+0x18>
lea 0x1(%rdi),%r9d
imul %edx,%r9d
add %ecx,%r9d
mov %r8d,%eax
sub %esi,%eax
mov %esi,%r10d
sub %ecx,%r10d
cmp %esi,%r9d
cmovl %eax,%r10d
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %eax,%r9d
lea (%r9,%r10,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a1 + a3;
    }
    if (v7 < a2)
    {
        v8 = a2 - a3;
    }
    else
    {
        v8 = a3 + (a3 * a1) + a4;
    }
    if (v8 < a2)
    {
        v9 = a5 - a2;
    }
    else
    {
        v9 = a2 - a4;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a4)
    {
        v10 += (a4 + a1) + a4;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 15
7 15
8 15
9 19
10 19
11 19
12 19
13 19
14 19
15 30
16 30
17 30
18 30
19 30
20 30
21 31
<<<sep_out_sample>>>
mov %edi,%r10d
sub %ecx,%r10d
imul %edx,%r10d
sub %edi,%r10d
cmp %edx,%edi
jle 23 <func1+0x23>
mov $0x1,%r9d
sub %esi,%r9d
imul %ecx,%r9d
sub %edi,%r9d
jmp 30 <func1+0x30>
mov %esi,%r9d
sub %edi,%r9d
sub %edi,%r9d
imul %ecx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a3 * (a1 - a4) - a1;
    if (a3 < a1)
    {
        v7 = (a4 - a2 * a4) - a1;
    }
    else
    {
        v7 = (a2 - a1 - a1) * a4;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 5
6 5
7 7
8 7
9 7
10 7
11 7
12 11
13 11
14 11
15 11
16 13
17 13
18 13
19 13
20 13
21 13
22 14
<<<sep_out_sample>>>
lea (%rcx,%r8,1),%eax
test %ecx,%ecx
jle 13 <func1+0x13>
mov %r8d,%eax
imul %ecx,%eax
imul %ecx,%eax
sub %edi,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (v6 < a4)
    {
        v6 = (a5 * a4) * a4 - a1;
    }
    else
    {
        v6 = ((a4 + a5) + a1) - a1;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += (a4 - a1) - a1;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        if (v6 < a1)
        {
            v9 += a3 - a1;
        }
        else
        {
            v9 += (a2 * a4) * a1;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 6
7 6
8 29
9 29
10 29
11 29
12 29
13 30
<<<sep_out_sample>>>
mov %ecx,%r9d
sub %esi,%r9d
add %ecx,%r9d
sub %edx,%r9d
mov $0x0,%eax
cmp %r8d,%edi
jge 1d <func1+0x1d>
mov $0x1,%al
sub %edi,%eax
imul %edx,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a4 - a2 + a4 - a3;
    if (a1 < a5)
    {
        v7 = a3 - (a1 * a3);
    }
    else
    {
        v7 = a5 * (a1 - a1);
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 11
6 5
7 5
8 7
9 7
10 7
11 13
12 13
13 13
14 13
15 13
16 13
17 14
<<<sep_out_sample>>>
mov $0x0,%eax
cmp %r8d,%edx
jge 15 <func1+0x15>
mov %esi,%eax
sub %ecx,%eax
lea (%rdx,%rcx,1),%r9d
sub %r9d,%eax
mov %ecx,%r9d
sub %esi,%r9d
cmp %ecx,%esi
jle 2b <func1+0x2b>
mov %edx,%r9d
sub %edi,%r9d
add %ecx,%r9d
sub %esi,%r9d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%eax
lea 0x1(%r9,%rax,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a3 < a5)
    {
        v6 = a2 - a4 - (a3 + a4);
    }
    else
    {
        v6 = ((a2 - a2) * a2) * a1;
    }
    if (a4 < a2)
    {
        v7 = ((a3 - a1) + a4) - a2;
    }
    else
    {
        v7 = a4 - a2;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += a4 - a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 6
7 6
8 18
9 18
10 12
11 12
12 14
13 14
14 14
15 14
16 25
17 25
18 25
19 25
20 25
21 25
22 26
<<<sep_out_sample>>>
mov %r8d,%eax
imul %r8d,%eax
cmp %ecx,%esi
cmovge %r8d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a1 + a5 - a1;
    }
    if (a2 < a4)
    {
        v8 = a5 * a5;
    }
    else
    {
        v8 = a5 + (a5 - a5) * a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 11
5 17
6 17
7 17
8 17
9 17
10 18
<<<sep_out_sample>>>
mov %esi,%eax
sub %r8d,%eax
add $0x1,%eax
imul %ecx,%eax
mov %ecx,%r10d
sub %r8d,%r10d
cmp %edx,%edi
mov $0x0,%r9d
cmovg %r10d,%r9d
lea 0x1(%r9,%rdi,1),%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a1 + a2 + a2;
    }
    v8 = ((a2 - a5) * a4) + a4;
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        v9 += a4 + a4 * a3;
    }
    if (a3 < a1)
    {
        v11 = a4 - a5;
    }
    else
    {
        v11 = a4 - ((a4 - a3) + a3);
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 9
4 9
5 17
6 17
7 17
8 17
9 17
10 23
11 23
12 23
13 23
14 23
15 23
16 24
<<<sep_out_sample>>>
mov %edi,%eax
sub %r8d,%eax
mov %edi,%r9d
sub %edx,%r9d
cmp $0x2,%r8d
cmovl %r9d,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += (a1 * a3) - a3;
    }
    if (v7 < a5)
    {
        v8 = a1 - a5;
    }
    else
    {
        v8 = a1 - a3;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        v9 += a2 * a2 + a2;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 11
5 11
6 11
7 22
8 22
9 22
10 22
11 22
12 23
<<<sep_out_sample>>>
test %r8d,%r8d
jle c <func1+0xc>
lea (%rsi,%rdx,2),%eax
sub %ecx,%eax
jmp 12 <func1+0x12>
lea (%rdi,%rcx,2),%eax
sub %r8d,%eax
add %edi,%edx
add %esi,%edx
add %edx,%r8d
add %r8d,%ecx
add %ecx,%eax
imul %esi,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (v6 < a5)
    {
        v6 = a3 + a2 - a4 + a3;
    }
    else
    {
        v6 = ((a4 - a5) + a4) + a1;
    }
    v7 = ((a2 - a5) + a5) * a1;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 13
9 13
10 13
11 13
12 13
13 12
14 13
15 14
<<<sep_out_sample>>>
mov %edi,%r9d
imul %ecx,%r9d
imul %esi,%r9d
add %r8d,%r9d
lea (%rdi,%rdi,1),%eax
lea (%r8,%rcx,1),%r10d
cmp %r9d,%ecx
cmovle %r10d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%r9d
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a3 - a2;
    }
    v8 = a5 + a1 * a4 * a2;
    if (v8 < a4)
    {
        v9 = a1 - (a4 - a1) + a4;
    }
    else
    {
        v9 = a5 + a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 9
4 9
5 12
6 12
7 12
8 12
9 18
10 18
11 18
12 18
13 18
14 18
15 19
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
imul %ecx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (v7 < a2)
        {
            v6 += (a5 * a4) + a3;
        }
        else
        {
            v6 += a4 + a2;
        }
    }
    v8 = a4 * a1;
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        v9 += a2 * a3;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 22
4 22
5 16
6 22
7 23
<<<sep_out_sample>>>
cmp %edi,%esi
jge b <func1+0xb>
mov %edi,%eax
imul %edx,%eax
jmp 11 <func1+0x11>
lea (%rdx,%rsi,1),%eax
add %r8d,%eax
mov %esi,%r9d
sub %edx,%r9d
cmp %edx,%eax
jl 28 <func1+0x28>
mov $0x1,%r9d
sub %edi,%r9d
imul %esi,%r9d
lea 0x1(%r9,%rdi,1),%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    if (a2 < a1)
    {
        v6 = a1 * a3 - a3 + a3;
    }
    else
    {
        v6 = (a3 + a2) + a5;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        if (v6 < a1)
        {
            v7 += a5 + a3;
        }
        else
        {
            v7 += (a2 * a3) * a5;
        }
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        v9 += a1 * a4 * a5;
    }
    if (v6 < a3)
    {
        v11 = a2 - a3;
    }
    else
    {
        v11 = a2 - (a2 * a1);
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 31
9 31
10 29
11 29
12 35
13 35
14 35
15 37
16 37
17 37
18 37
19 37
20 37
21 38
<<<sep_out_sample>>>
cmp %ecx,%esi
jge 13 <func1+0x13>
mov $0x1,%eax
sub %edi,%eax
imul %r8d,%eax
add %ecx,%eax
jmp 1d <func1+0x1d>
mov %r8d,%eax
imul %esi,%eax
add %ecx,%eax
sub %edx,%eax
add %edi,%edx
add %esi,%edx
add %edx,%r8d
add %ecx,%r8d
add %r8d,%eax
mov $0x1,%edx
sub %ecx,%edx
imul %edx,%esi
add %esi,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a2 < a4)
    {
        v6 = a5 - a5 * a1 + a4;
    }
    else
    {
        v6 = a4 + a5 * a2 - a3;
    }
    v7 = a2 - a2 * a4 + a1;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 13
13 13
14 13
15 13
16 13
17 12
18 12
19 12
20 12
21 13
22 14
<<<sep_out_sample>>>
push %rbp
push %rbx
mov %r8d,%r11d
imul %edx,%r11d
lea (%r8,%rdi,1),%r9d
add %r11d,%r9d
cmp %r9d,%r8d
jle 20 <func1+0x20>
mov %esi,%eax
imul %edx,%eax
lea (%rax,%r8,2),%ebp
jmp 26 <func1+0x26>
lea -0x1(%rsi),%ebp
imul %ecx,%ebp
lea (%rsi,%rsi,1),%ebx
mov %edx,%r10d
sub %edi,%r10d
lea (%r10,%r10,1),%eax
lea (%r11,%rdi,2),%r11d
cmp %esi,%r8d
cmovl %r11d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
add %ebp,%r9d
add %ebx,%r9d
add %r9d,%eax
pop %rbx
pop %rbp
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a1 < a1)
    {
        v6 = ((a5 - a3) + a2) + a3;
    }
    else
    {
        v6 = a5 + a1 + a5 * a3;
    }
    if (v6 < a5)
    {
        v7 = a5 + (a2 * a3 + a5);
    }
    else
    {
        v7 = a4 * a2 - a4;
    }
    v8 = a2 + a2;
    if (a5 < a2)
    {
        v9 = (a3 * a5 + a1) + a1;
    }
    else
    {
        v9 = (a3 - a1 + a3) - a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 2
3 10
4 10
5 10
6 10
7 12
8 12
9 14
10 14
11 14
12 14
13 18
14 18
15 20
16 27
17 27
18 27
19 23
20 23
21 23
22 29
23 29
24 29
25 29
26 29
27 29
28 29
29 29
30 30
31 30
32 30
<<<sep_out_sample>>>
cmp %esi,%ecx
jge c <func1+0xc>
mov %ecx,%r9d
sub %edi,%r9d
jmp 19 <func1+0x19>
mov %ecx,%r9d
sub %r8d,%r9d
sub %edx,%r9d
imul %r8d,%r9d
test %r8d,%r8d
jle 2b <func1+0x2b>
mov %edi,%eax
sub %r8d,%eax
imul %edx,%eax
add %r8d,%eax
jmp 30 <func1+0x30>
mov %edi,%eax
imul %esi,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    if (a4 < a2)
    {
        v6 = a5 + (a4 - a5) - a1;
    }
    else
    {
        v6 = (a4 - a5 - a3) * a5;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        if (a3 < a4)
        {
            v7 += (a3 * a5) + a1;
        }
        else
        {
            v7 += a4 - a3;
        }
    }
    if (v7 < a5)
    {
        v9 = a5 - (a5 - a1) * a3;
    }
    else
    {
        v9 = a1 * a2;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a2)
    {
        v10 += a4 + a3;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 10
10 24
11 24
12 26
13 26
14 26
15 26
16 26
17 30
18 30
19 37
20 37
21 37
22 37
23 37
24 37
25 38
<<<sep_out_sample>>>
cmp %r8d,%ecx
jge 15 <func1+0x15>
mov %esi,%r9d
imul %r8d,%r9d
imul %edi,%r9d
add %esi,%r9d
jmp 24 <func1+0x24>
mov %edi,%r9d
sub %edx,%r9d
mov %esi,%eax
imul %r8d,%eax
add %eax,%r9d
test %r8d,%r8d
jle 35 <func1+0x35>
mov %esi,%eax
sub %ecx,%eax
sub %edi,%eax
imul %r8d,%eax
jmp 40 <func1+0x40>
mov %edi,%eax
imul %esi,%eax
imul %edi,%eax
imul %edi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a4 < a5)
    {
        v6 = a2 + (a2 * a5 * a1);
    }
    else
    {
        v6 = a1 - a3 + (a2 * a5);
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        if (a2 < a2)
        {
            v7 += a3 + a5;
        }
        else
        {
            v7 += (a3 + a3) * a1;
        }
    }
    if (v9 < a5)
    {
        v9 = ((a2 - a4) - a1) * a5;
    }
    else
    {
        v9 = a1 * a2 * a1 * a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 10
13 24
14 24
15 26
16 26
17 26
18 26
19 26
20 30
21 30
22 30
23 30
24 32
25 32
26 32
27 32
28 32
29 32
30 33
<<<sep_out_sample>>>
lea 0x1(%r8),%eax
imul %esi,%eax
mov %edi,%r9d
sub %edx,%r9d
cmp %edx,%edi
jge 22 <func1+0x22>
mov $0x1,%r9d
sub %edi,%r9d
imul %edi,%r9d
imul %ecx,%r9d
mov %esi,%r10d
sub %eax,%r10d
lea 0x1(%r10),%r10d
imul %esi,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%eax
lea 0x1(%r9,%rax,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a2 * a5 + a2;
    if (a1 < a3)
    {
        v7 = (a1 - (a1 * a1)) * a4;
    }
    else
    {
        v7 = a1 - a3;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += (a4 - a5) + a5;
    }
    v10 = a2 - (a5 * a2 * a2);
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 11
4 11
5 5
6 5
7 7
8 7
9 7
10 7
11 18
12 18
13 18
14 18
15 19
16 19
17 19
18 19
19 19
20 19
21 19
22 20
<<<sep_out_sample>>>
mov %edi,%eax
sub %esi,%eax
cmp %r8d,%edi
jge 17 <func1+0x17>
mov $0x1,%eax
sub %r8d,%eax
imul %r8d,%eax
add %ecx,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a1 < a5)
    {
        v6 = a4 + (a5 - (a5 * a5));
    }
    else
    {
        v6 = a1 - a2;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += a4 * a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 4
4 4
5 6
6 6
7 6
8 6
9 17
10 17
11 17
12 17
13 17
14 18
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
lea (%r8,%rcx,1),%eax
add $0x1,%esi
imul %esi,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = (a4 * a2) + a4;
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a3 * a2;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        v9 += a4 + a1 - a5;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 15
2 15
3 15
4 15
5 4
6 4
7 15
8 16
<<<sep_out_sample>>>
cmp %edx,%esi
jge f <func1+0xf>
mov %edx,%eax
sub %ecx,%eax
imul %esi,%eax
add %edi,%eax
jmp 15 <func1+0x15>
lea (%r8,%rdi,2),%eax
add %esi,%eax
add %edi,%edx
add %esi,%edx
add %r8d,%edx
add %ecx,%edx
lea 0x1(%rax,%rdx,1),%eax
add %r8d,%esi
add %esi,%edi
imul %edi,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a2 < a3)
    {
        v6 = (a3 - a4) * a2 + a1;
    }
    else
    {
        v6 = ((a5 + a1) + a1) + a2;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        if (v7 < a4)
        {
            v7 += a5 + a2 + a5;
        }
        else
        {
            v7 += a3 + a1 - a5;
        }
    }
    v9 = a4 * ((a2 + a5) + a1);
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 25
11 25
12 25
13 25
14 25
15 24
16 24
17 24
18 25
19 26
<<<sep_out_sample>>>
lea (%rsi,%rdi,1),%r9d
cmp %edx,%r8d
jge 14 <func1+0x14>
mov %r8d,%eax
imul %edi,%eax
imul %edx,%eax
jmp 1e <func1+0x1e>
mov %edi,%eax
imul %edx,%eax
sub %r8d,%eax
add %edx,%eax
lea (%rdi,%rdx,1),%r10d
add %r10d,%esi
add %r8d,%esi
add %esi,%ecx
add %r9d,%ecx
add %eax,%ecx
imul %r8d,%edi
add %edi,%edx
add %r8d,%edx
add %ecx,%edx
lea (%rdx,%r8,2),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a2 + a1;
    if (a5 < a3)
    {
        v7 = a3 * (a5 * a1);
    }
    else
    {
        v7 = a1 * a3 - a5 + a3;
    }
    v8 = a3 + a1 * a5 + a5;
    v9 = a5 + a5;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 5
3 5
4 7
5 7
6 7
7 7
8 11
9 11
10 11
11 11
12 15
13 15
14 15
15 15
16 15
17 15
18 13
19 13
20 13
21 15
22 15
23 16
<<<sep_out_sample>>>
mov %ecx,%eax
sub %esi,%eax
cmp %edi,%ecx
jge 15 <func1+0x15>
lea (%rsi,%r8,1),%eax
mov %edx,%r10d
sub %eax,%r10d
mov %r10d,%eax
mov %ecx,%r9d
sub %esi,%r9d
sub %edx,%r9d
imul %edx,%r9d
add %r9d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %ecx,%r8d
add %r8d,%eax
lea 0x1(%rax,%rcx,2),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a4 < a1)
    {
        v6 = a3 - (a2 + a5);
    }
    else
    {
        v6 = a4 - a2;
    }
    v7 = a4 + a4;
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += a1 + a4 + a4;
    }
    v10 = ((a4 - a2) - a3) * a3;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 4
4 4
5 6
6 6
7 6
8 6
9 18
10 18
11 18
12 18
13 19
14 19
15 19
16 19
17 19
18 19
19 19
20 20
<<<sep_out_sample>>>
mov %r8d,%eax
sub %edx,%eax
mov %r8d,%r10d
sub %ecx,%r10d
cmp %esi,%r8d
cmovl %eax,%r10d
test %esi,%esi
jle 23 <func1+0x23>
lea 0x1(%rcx),%r9d
imul %esi,%r9d
add %r8d,%r9d
jmp 30 <func1+0x30>
mov %esi,%r9d
imul %ecx,%r9d
sub %edx,%r9d
add %esi,%r9d
test %edx,%edx
jle 3c <func1+0x3c>
lea (%rsi,%rdx,1),%eax
imul %edi,%eax
jmp 47 <func1+0x47>
mov %edi,%eax
sub %esi,%eax
lea (%r8,%rcx,1),%r11d
sub %r11d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r10d,%ecx
add %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a5 < a2)
    {
        v6 = a5 - a3;
    }
    else
    {
        v6 = a5 - a4;
    }
    if (v7 < a2)
    {
        v7 = a2 + a4 * a2 + a5;
    }
    else
    {
        v7 = a2 * a4 - a3 + a2;
    }
    if (v8 < a3)
    {
        v8 = a1 * a2 + a1 * a3;
    }
    else
    {
        v8 = a1 - a2 - (a5 + a4);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 6
6 6
7 12
8 12
9 14
10 14
11 14
12 14
13 18
14 18
15 18
16 18
17 20
18 20
19 22
20 22
21 22
22 26
23 26
24 26
25 26
26 28
27 28
28 28
29 28
30 28
31 28
32 28
33 29
<<<sep_out_sample>>>
lea (%rdx,%rcx,1),%eax
mov %edx,%r9d
imul %esi,%r9d
cmp %ecx,%r8d
cmovl %r9d,%eax
lea 0x1(%rdi,%rdx,1),%r9d
add %r9d,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
add %edx,%edi
imul %edx,%edx
add %edi,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    if (a5 < a4)
    {
        v6 = a3 * a2;
    }
    else
    {
        v6 = a3 + a4;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += a5 * a2 * a3;
    }
    v9 = a3 + a1 + a3 * a3;
    v10 = 0;
    for (v11 = 0; v11++; v11<a5)
    {
        if (a3 < a5)
        {
            v10 += (a3 * a4) - a3;
        }
        else
        {
            v10 += a5 * a2 + a1;
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 6
3 6
4 6
5 6
6 30
7 30
8 30
9 30
10 30
11 17
12 17
13 17
14 30
15 31
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += (a3 + a1) * a3;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += a5 + (a5 - a5);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 14
2 14
3 14
4 14
5 15
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
add %esi,%ecx
imul %edx,%edi
add %edi,%ecx
mov %edx,%eax
imul %edx,%eax
imul %eax,%r8d
sub %edx,%r8d
lea 0x1(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a3 * a1;
    v7 = (a3 * a3) * a5 - a3;
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += (a4 + a1) + a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 11
5 4
6 11
7 5
8 5
9 5
10 5
11 11
12 12
<<<sep_out_sample>>>
lea (%r8,%r8,1),%r9d
lea (%r8,%rsi,2),%eax
cmp %ecx,%r8d
jge 14 <func1+0x14>
lea (%rdi,%rdi,1),%eax
imul %r8d,%eax
lea 0x1(%rax,%rdi,1),%eax
add %eax,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = a5 + a5;
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        if (v6 < a1)
        {
            v7 += a1 - (a1 * a4);
        }
        else
        {
            v7 += (a3 + a4) * a5;
        }
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        if (v6 < a4)
        {
            v9 += a2 + a5;
        }
        else
        {
            v9 += a4 + a5 - a3;
        }
    }
    if (a5 < a4)
    {
        v11 = a5 * a1 + a1 * a5;
    }
    else
    {
        v11 = (a5 + a2) + a2;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 35
3 29
4 29
5 31
6 31
7 37
8 37
9 37
10 37
11 37
12 37
13 38
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
lea 0x1(%r8,%rax,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (a1 < a4)
        {
            v6 += a5 * a2 - a3;
        }
        else
        {
            v6 += a2 - a4 - a2;
        }
    }
    v8 = a5 - (a4 + a2) - a5;
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        v9 += (a4 + a4) - a2;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 23
<<<sep_out_sample>>>
test %ecx,%ecx
jle e <func1+0xe>
lea (%rdi,%rdx,1),%r11d
imul %esi,%r11d
jmp 18 <func1+0x18>
lea (%rdx,%rdx,1),%r11d
lea (%rsi,%rcx,1),%eax
sub %eax,%r11d
lea (%r8,%rcx,1),%r9d
mov %edx,%eax
imul %r8d,%eax
sub %eax,%r9d
mov %edi,%r10d
sub %esi,%r10d
cmp %edx,%ecx
jle 39 <func1+0x39>
mov %r8d,%r10d
imul %edi,%r10d
sub %esi,%r10d
cmp %r9d,%esi
jle 46 <func1+0x46>
mov %esi,%eax
neg %eax
sub %edi,%eax
jmp 52 <func1+0x52>
mov %edi,%eax
imul %r8d,%eax
imul %r8d,%eax
sub %esi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r11d,%ecx
add %ecx,%r9d
add %r9d,%r10d
add %r10d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (v6 < a4)
    {
        v6 = a2 * a1 + a3 * a2;
    }
    else
    {
        v6 = a3 + a3 - (a2 + a4);
    }
    v7 = (a5 + a4) - (a3 * a5);
    if (a3 < a4)
    {
        v8 = (a5 * a1) - a2;
    }
    else
    {
        v8 = a1 - a2;
    }
    if (v7 < a2)
    {
        v9 = a5 - (a5 + a2) - a1;
    }
    else
    {
        v9 = a5 * (a1 * a5) - a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 12
10 12
11 12
12 12
13 19
14 19
15 13
16 13
17 15
18 15
19 15
20 21
21 21
22 23
23 23
24 23
25 23
26 27
27 27
28 27
29 27
30 29
31 29
32 29
33 29
34 29
35 29
36 29
37 29
38 30
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a2 - (a4 + a1);
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += (a2 + a5) + a4;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a4)
    {
        v10 += (a4 - a2) + a5;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 19
2 19
3 19
4 19
5 20
<<<sep_out_sample>>>
lea (%r8,%rdi,1),%eax
cmp %esi,%edx
jl d <func1+0xd>
mov %edx,%eax
imul %edx,%eax
add %edi,%edx
add %esi,%edx
add %r8d,%edx
add %edx,%ecx
add %eax,%ecx
sub %esi,%r8d
sub %edi,%r8d
lea 0x1(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a3 < a2)
    {
        v6 = a5 + a1;
    }
    else
    {
        v6 = a3 * a3;
    }
    if (a1 < a1)
    {
        v7 = a2 - a2;
    }
    else
    {
        v7 = (a5 - a2) - a1;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        if (a2 < a1)
        {
            v8 += (a3 + a4) * a5;
        }
        else
        {
            v8 += a3 + a2;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 4
3 4
4 10
5 10
6 32
7 32
8 32
9 32
10 32
11 18
12 18
13 32
14 33
<<<sep_out_sample>>>
mov %r8d,%eax
sub %edx,%eax
sub %edi,%eax
imul %edi,%eax
add %edi,%eax
add %edx,%eax
add %esi,%eax
sub %edi,%edx
lea (%rax,%r8,2),%eax
lea (%rax,%rdx,1),%eax
imul %esi,%r8d
lea 0x1(%rax,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a5 + (a3 - a1) - a4;
    v7 = a5 * a2;
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += a3 * a3;
    }
    v10 = a1 * ((a5 - a3) - a1);
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 11
5 12
6 12
7 12
8 4
9 4
10 12
11 5
12 12
13 13
<<<sep_out_sample>>>
cmp %edx,%ecx
jge e <func1+0xe>
lea -0x1(%rcx),%r9d
imul %ecx,%r9d
jmp 15 <func1+0x15>
lea (%rdi,%rdi,2),%r9d
add %edx,%r9d
mov %ecx,%eax
sub %edi,%eax
cmp $0x1,%r8d
jle 2a <func1+0x2a>
mov %edi,%eax
imul %ecx,%eax
imul %r8d,%eax
sub %esi,%eax
mov %edi,%r10d
sub %ecx,%r10d
mov %esi,%r11d
imul %edx,%r11d
sub %r11d,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a4 < a3)
    {
        v6 = a4 * a4 - a4;
    }
    else
    {
        v6 = a1 + (a1 + a1) + a3;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        if (v8 < a1)
        {
            v7 += (a5 * a2) * a3;
        }
        else
        {
            v7 += a4 - a1 + a2;
        }
    }
    if (v8 < a5)
    {
        v9 = (a1 * a4) * a5 - a2;
    }
    else
    {
        v9 = ((a3 - a3) + a4) - a1;
    }
    v10 = a1 - a4 - a2 * a3;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 30
9 30
10 24
11 24
12 26
13 26
14 26
15 26
16 32
17 32
18 32
19 32
20 32
21 33
22 33
23 33
24 33
25 33
26 33
27 33
28 34
<<<sep_out_sample>>>
mov %esi,%eax
sub %edx,%eax
test %ecx,%ecx
jg 1a <func1+0x1a>
mov %ecx,%eax
imul %esi,%eax
imul %r8d,%eax
mov %edi,%r9d
sub %eax,%r9d
mov %r9d,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (v6 < a4)
    {
        v6 = a2 - a3;
    }
    else
    {
        v6 = a1 - a4 * a2 * a5;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        if (a5 < a1)
        {
            v7 += a1 * a4;
        }
        else
        {
            v7 += a1 - (a2 - a2);
        }
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a1)
    {
        v9 += a2 - a2 * a1;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 6
3 4
4 4
5 10
6 10
7 10
8 10
9 10
10 10
11 29
12 29
13 29
14 29
15 29
16 30
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %r8d,%esi
lea (%rdx,%rcx,2),%eax
lea 0x1(%rax,%rsi,1),%eax
sub %ecx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (a4 < a5)
        {
            v6 += a3 - a2 * a3;
        }
        else
        {
            v6 += a1 + a1 - a1;
        }
    }
    v8 = a4 + a3;
    if (a3 < a3)
    {
        v9 = a4 * a1;
    }
    else
    {
        v9 = a5 - a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 25
2 25
3 25
4 16
5 25
6 23
7 25
8 26
<<<sep_out_sample>>>
mov %edx,%eax
sub %ecx,%eax
cmp %esi,%edi
jge 12 <func1+0x12>
mov %r8d,%eax
imul %esi,%eax
add %ecx,%eax
add %edi,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a1 < a2)
    {
        v6 = a4 + a5 * a2 + a1;
    }
    else
    {
        v6 = (a3 + (a5 - a5)) - a4;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += a4 - a2;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        v9 += a4 * (a4 - a5);
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 4
4 4
5 6
6 6
7 6
8 6
9 22
10 22
11 22
12 22
13 22
14 23
<<<sep_out_sample>>>
mov %esi,%r10d
imul %edi,%r10d
lea (%rdx,%rsi,1),%r9d
sub %r9d,%r10d
mov %edi,%r9d
sub %esi,%r9d
cmp %edi,%esi
mov $0x0,%eax
cmovle %eax,%r9d
add %edx,%edi
add %esi,%edi
add %r8d,%edi
add %ecx,%edi
add %r10d,%edi
add %r9d,%edi
add %r8d,%esi
add %esi,%edx
sub %ecx,%edx
lea (%rdi,%rdx,1),%eax
imul %ecx,%ecx
sub $0x1,%ecx
imul %ecx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a2 * a1 - (a3 + a2);
    if (a1 < a2)
    {
        v7 = a1 - a2;
    }
    else
    {
        v7 = a1 - a1;
    }
    v8 = a3 + (a5 + a2) - a4;
    v9 = ((a4 * a4) * a5) - a5;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 7
6 7
7 7
8 7
9 7
10 15
11 15
12 15
13 15
14 15
15 15
16 13
17 13
18 13
19 15
20 14
21 14
22 14
23 15
24 16
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%r10d
add %esi,%r10d
add %r8d,%r10d
add %ecx,%r10d
lea (%rcx,%rcx,1),%eax
mov %edx,%r9d
sub %eax,%r9d
sub %esi,%r9d
add %r10d,%r9d
sub %edi,%r8d
add %r8d,%esi
sub %ecx,%esi
lea (%r9,%rsi,1),%eax
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a3 - (a4 + a4) - a2;
    v7 = (a5 - a1 + a2) - a4;
    v8 = a4 - a4 + a3;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 7
2 7
3 7
4 7
5 4
6 4
7 4
8 4
9 7
10 5
11 5
12 5
13 7
14 7
15 8
<<<sep_out_sample>>>
mov $0x0,%eax
cmp $0x1,%edx
jg 13 <func1+0x13>
mov %edi,%eax
imul %r8d,%eax
lea (%rax,%rsi,2),%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (v7 < a1)
        {
            v6 += a2 - (a1 + a5);
        }
        else
        {
            v6 += a3 - a1;
        }
    }
    if (v7 < a3)
    {
        v8 = a5 - a5;
    }
    else
    {
        v8 = (a1 * a5 + a2) + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 18
2 16
3 16
4 22
5 22
6 22
7 24
8 24
9 24
10 24
11 24
12 25
<<<sep_out_sample>>>
cmp %edi,%ecx
jge d <func1+0xd>
lea (%rdi,%rdx,1),%r10d
add %ecx,%r10d
jmp 1a <func1+0x1a>
mov %r8d,%r10d
imul %edi,%r10d
add %ecx,%r10d
add %edx,%r10d
cmp %r8d,%ecx
jge 2f <func1+0x2f>
mov %ecx,%r9d
imul %esi,%r9d
add %r8d,%r9d
imul %esi,%r9d
jmp 38 <func1+0x38>
lea 0x1(%rcx,%rcx,1),%r9d
imul %edx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a4 < a1)
    {
        v6 = a4 + (a1 + a3);
    }
    else
    {
        v6 = a4 + (a5 * a1) + a3;
    }
    if (a4 < a5)
    {
        v7 = a2 * (a4 * a2 + a5);
    }
    else
    {
        v7 = (a4 + a4) * a3 + a3;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 10
10 12
11 12
12 14
13 14
14 14
15 14
16 14
17 18
18 18
19 20
20 20
21 20
22 20
23 20
24 20
25 21
<<<sep_out_sample>>>
mov %ecx,%eax
sub %edx,%eax
mov %edi,%r9d
imul %edi,%r9d
test %esi,%esi
cmovg %r9d,%eax
add %edi,%edx
add %esi,%edx
add %r8d,%edx
add %ecx,%edx
add %edx,%eax
imul %r8d,%edi
sub %edi,%esi
sub %ecx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (v6 < a2)
    {
        v6 = a1 * a1;
    }
    else
    {
        v6 = a4 - a3;
    }
    v7 = (a2 - a5 * a1) - a4;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 10
2 10
3 6
4 6
5 6
6 6
7 13
8 13
9 13
10 13
11 13
12 12
13 12
14 12
15 13
16 14
<<<sep_out_sample>>>
test %edx,%edx
jle b <func1+0xb>
mov %esi,%eax
sub %r8d,%eax
jmp 12 <func1+0x12>
mov %edx,%eax
imul %edi,%eax
add %ecx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += (a1 - a4) * a4;
    }
    if (v8 < a3)
    {
        v8 = (a2 - a5) + a5 - a5;
    }
    else
    {
        v8 = a3 * a1 + a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 15
7 15
8 15
9 17
10 17
11 17
12 17
13 17
14 18
<<<sep_out_sample>>>
mov %edx,%r9d
cmp %esi,%r8d
jl 12 <func1+0x12>
imul %edi,%r9d
add %esi,%r9d
sub %edi,%r9d
lea (%rsi,%r8,1),%eax
test %edx,%edx
jg 21 <func1+0x21>
lea (%rdx,%rcx,2),%eax
lea (%rax,%r8,1),%eax
add %edi,%edx
add %edx,%esi
add %r8d,%esi
add %esi,%ecx
add %ecx,%r9d
sub %r8d,%r9d
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a5 < a2)
    {
        v6 = (a5 * (a4 - a4)) + a3;
    }
    else
    {
        v6 = a2 + a3 * a1 - a1;
    }
    if (a1 < a1)
    {
        v7 = (a4 + a3 + a3) - a5;
    }
    else
    {
        v7 = a1 - a5 - a1;
    }
    if (v8 < a3)
    {
        v8 = a2 + a5;
    }
    else
    {
        v8 = (a4 + a5) + (a3 + a4);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 6
2 4
3 4
4 10
5 10
6 10
7 22
8 20
9 20
10 26
11 26
12 28
13 28
14 28
15 28
16 28
17 28
18 28
19 29
<<<sep_out_sample>>>
mov %edi,%eax
sub %edx,%eax
lea (%rsi,%rdx,1),%r9d
test %ecx,%ecx
cmovg %eax,%r9d
cmp %r8d,%ecx
jle 1f <func1+0x1f>
lea (%rdx,%rdx,1),%eax
imul %ecx,%eax
imul %r8d,%eax
jmp 25 <func1+0x25>
mov %r8d,%eax
imul %edx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (v6 < a4)
    {
        v6 = a1 - a3;
    }
    else
    {
        v6 = a4 + (a2 + a3) - a4;
    }
    if (a5 < a4)
    {
        v7 = ((a3 + a3) * a4) * a5;
    }
    else
    {
        v7 = a5 * a3;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        if (a1 < a2)
        {
            v8 += a4 * a5;
        }
        else
        {
            v8 += (a1 * a5) - a1;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 6
6 12
7 12
8 14
9 14
10 14
11 14
12 18
13 18
14 32
15 32
16 32
17 32
18 32
19 32
20 33
<<<sep_out_sample>>>
lea (%r8,%r8,1),%r9d
mov %edi,%eax
sub %esi,%eax
imul %edi,%eax
add %ecx,%eax
cmp $0x1,%r8d
jle 1b <func1+0x1b>
mov %r8d,%r10d
sub %edi,%r10d
jmp 22 <func1+0x22>
lea (%rdi,%rdx,2),%r10d
add %edx,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
sub %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a3 < a3)
    {
        v6 = a4 * a4 + (a4 * a5);
    }
    else
    {
        v6 = a2 - (a5 + a5 + a2);
    }
    v7 = a1 * (a1 - a2) + a4;
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        if (a2 < a2)
        {
            v8 += a1 * a1 - a2;
        }
        else
        {
            v8 += a5 * a4;
        }
    }
    if (v9 < a5)
    {
        v10 = (a5 + (a4 - a4)) - a1;
    }
    else
    {
        v10 = a3 + a1 + a3 + a3;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 12
3 12
4 12
5 12
6 25
7 25
8 27
9 27
10 27
11 31
12 31
13 33
14 33
15 33
16 33
17 33
18 33
19 33
20 34
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
add %ecx,%r8d
imul %esi,%edx
imul %esi,%edx
sub %edi,%edx
lea (%r8,%rdx,1),%eax
imul %ecx,%edi
add %edi,%esi
lea 0x1(%rax,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a2 * a3 * a2 - a1;
    v7 = a1 * a4 + a2;
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        if (a4 < a5)
        {
            v8 += a2 * a5 - a3;
        }
        else
        {
            v8 += (a5 * a5) + a5;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 18
5 4
6 4
7 4
8 18
9 5
10 5
11 18
12 19
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%esi
mov %edi,%eax
imul %edi,%eax
mov %r8d,%r9d
sub %eax,%r9d
mov %r9d,%eax
sub %edx,%eax
add %esi,%eax
lea (%rcx,%rdi,2),%edx
add %edx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (a4 < a4)
        {
            v6 += a3 + a5 - a4;
        }
        else
        {
            v6 += a4 - a1;
        }
    }
    v8 = a5 - a1 * a1 - a3;
    v9 = a1 + a4 + a1 + a5;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 18
5 16
6 16
7 16
8 16
9 16
10 16
11 18
12 17
13 17
14 18
15 19
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %eax,%ecx
imul %edx,%edi
imul %edi,%esi
sub %r8d,%esi
lea 0x1(%rcx,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a1 * a3 * a2 - a5;
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += a1 * a4 - a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 4
6 4
7 4
8 10
9 11
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a5 + a3 * a2;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += (a2 + a4) * a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 14
2 14
3 14
4 14
5 15
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
mov %edx,%r9d
sub %esi,%r9d
imul %r9d,%edx
add %edx,%edi
add %edi,%eax
imul %ecx,%r8d
imul %r8d,%ecx
add %ecx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a1 + ((a3 - a2) * a3);
    v7 = ((a5 * a4) * a4) + a2;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 4
7 4
8 4
9 6
10 5
11 5
12 5
13 6
14 7
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x1(%rdi,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = (a5 - a4 - a5) + a1;
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += a3 * a2 * a5;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a1)
    {
        v9 += a5 + (a2 - a4);
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 15
2 15
3 15
4 15
5 16
<<<sep_out_sample>>>
cmp %edi,%r8d
jge 17 <func1+0x17>
mov %r8d,%eax
imul %edi,%eax
mov %esi,%r9d
imul %ecx,%r9d
sub %r9d,%eax
jmp 20 <func1+0x20>
mov %edi,%eax
imul %r8d,%eax
lea (%rax,%rsi,2),%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a5 < a1)
    {
        v6 = (a5 * a1) - a2 * a4;
    }
    else
    {
        v6 = a2 + a1 * a5 + a2;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += a2 - a5;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        if (v8 < a1)
        {
            v9 += (a5 + a3) * a2;
        }
        else
        {
            v9 += a2 + a2;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 6
9 10
10 10
11 10
12 29
13 29
14 29
15 29
16 29
17 30
<<<sep_out_sample>>>
push %rbx
mov %r8d,%r11d
sub %esi,%r11d
lea (%rsi,%rsi,1),%r9d
mov %edi,%eax
imul %r8d,%eax
sub %eax,%r9d
cmp %r9d,%edi
jle 27 <func1+0x27>
mov %edi,%r10d
sub %r8d,%r10d
sub %r8d,%r10d
add %esi,%r10d
jmp 32 <func1+0x32>
mov %edx,%r10d
imul %esi,%r10d
imul %esi,%r10d
mov %edx,%eax
sub %r8d,%eax
test %edx,%edx
jle 4b <func1+0x4b>
mov %ecx,%eax
imul %r8d,%eax
imul %edx,%eax
mov %r8d,%ebx
sub %eax,%ebx
mov %ebx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r11d,%ecx
add %ecx,%r9d
add %r10d,%r9d
add %r9d,%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a5 - a2;
    if (a2 < a2)
    {
        v7 = a4 - a1 * a4 - a3;
    }
    else
    {
        v7 = a2 + a2 - a1 * a5;
    }
    if (v7 < a1)
    {
        v8 = (a1 - a5) - a5 + a2;
    }
    else
    {
        v8 = a2 * (a3 * a2);
    }
    if (v9 < a3)
    {
        v9 = a5 - a4 * a5 * a3;
    }
    else
    {
        v9 = a3 - a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 4
3 4
4 11
5 11
6 11
7 11
8 13
9 13
10 15
11 15
12 15
13 15
14 15
15 19
16 19
17 19
18 27
19 27
20 21
21 21
22 23
23 23
24 23
25 23
26 23
27 23
28 29
29 29
30 29
31 29
32 29
33 29
34 29
35 29
36 30
37 30
<<<sep_out_sample>>>
cmp %edx,%esi
jge f <func1+0xf>
mov %edx,%eax
imul %ecx,%eax
add %esi,%eax
add %ecx,%eax
jmp 19 <func1+0x19>
mov %r8d,%eax
sub %edi,%eax
add %ecx,%eax
imul %ecx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a1 - (a5 * a4);
    }
    if (a2 < a3)
    {
        v8 = (a3 * a4) + a2 + a4;
    }
    else
    {
        v8 = a4 * (a5 - a1 + a4);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 11
8 15
9 15
10 15
11 15
12 17
13 17
14 17
15 17
16 17
17 18
<<<sep_out_sample>>>
mov %edx,%r11d
imul %r8d,%r11d
imul %ecx,%r11d
imul %ecx,%r11d
mov %esi,%r10d
imul %esi,%r10d
imul %esi,%r10d
mov %esi,%r9d
sub %r8d,%r9d
cmp %edi,%edx
jg 2f <func1+0x2f>
lea -0x1(%rdx),%r9d
imul %ecx,%r9d
add %edx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = ((a3 * a5) * a4) * a4;
    v7 = (a2 * a2) * a2;
    if (a1 < a3)
    {
        v8 = a2 - a5;
    }
    else
    {
        v8 = a4 * a3 - a4 + a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 5
6 5
7 5
8 8
9 8
10 6
11 6
12 12
13 12
14 12
15 14
16 14
17 14
18 14
19 14
20 14
21 14
22 15
<<<sep_out_sample>>>
mov %edi,%eax
imul %esi,%eax
mov %r8d,%r9d
sub %eax,%r9d
lea (%rsi,%rdx,1),%eax
cmp %esi,%edi
jl 17 <func1+0x17>
mov %esi,%eax
imul %esi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a5 - a1 * a2;
    if (a1 < a2)
    {
        v7 = a2 + a3;
    }
    else
    {
        v7 = a2 * a2;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += a1 + a3 - a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 7
6 5
7 5
8 11
9 11
10 18
11 18
12 18
13 18
14 18
15 18
16 19
<<<sep_out_sample>>>
cmp %ecx,%r8d
jge d <func1+0xd>
mov %edi,%eax
sub %ecx,%eax
add %edi,%eax
jmp 19 <func1+0x19>
mov $0x1,%eax
sub %ecx,%eax
imul %edi,%eax
sub %esi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %ecx,%r8d
lea 0x1(%rax,%r8,1),%eax
add %edx,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a5 < a4)
    {
        v6 = a1 - a4 + a1;
    }
    else
    {
        v6 = a1 - a1 * a4 - a2;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += a1 + (a5 + a5);
    }
    v9 = a4 + a3;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 10
11 18
12 18
13 18
14 18
15 18
16 17
17 18
18 19
<<<sep_out_sample>>>
mov %edx,%r9d
imul %r8d,%r9d
sub %edi,%r9d
sub %edx,%r9d
lea (%rsi,%rcx,1),%eax
cmp %edi,%r8d
cmovg %ecx,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a3 * a5 - a1 - a3;
    if (a1 < a5)
    {
        v7 = (a2 - a2) + a4;
    }
    else
    {
        v7 = a2 + a4;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += a1 * a2 + a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 11
6 11
7 11
8 18
9 18
10 18
11 18
12 18
13 18
14 19
<<<sep_out_sample>>>
lea (%rdx,%rdx,1),%r9d
cmp %edi,%r8d
jge 14 <func1+0x14>
mov %edx,%r9d
imul %ecx,%r9d
imul %r8d,%r9d
mov %esi,%r10d
sub %ecx,%r10d
mov %edi,%eax
sub %ecx,%eax
lea (%rsi,%rcx,1),%r11d
test %r8d,%r8d
cmovle %r11d,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %eax,%r9d
lea (%r9,%r10,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a4 + (a2 + a2);
    }
    if (a5 < a1)
    {
        v8 = a3 * a4 * a5;
    }
    else
    {
        v8 = a3 + a3;
    }
    v9 = (a5 + a2 - a5) - a4;
    if (v6 < a5)
    {
        v10 = a1 - a4;
    }
    else
    {
        v10 = a2 + a4;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 15
2 9
3 9
4 11
5 11
6 11
7 17
8 17
9 20
10 20
11 20
12 20
13 20
14 26
15 26
16 26
17 26
18 26
19 26
20 26
21 27
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
add %r8d,%ecx
mov %edi,%r9d
imul %edi,%r9d
lea 0x1(%rcx,%r9,1),%eax
imul %edx,%esi
imul %esi,%edi
add %edi,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a2 < a2)
    {
        v6 = a4 * a2;
    }
    else
    {
        v6 = a1 * a1;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += a1 - a3 * a1;
    }
    v9 = a3 + (a3 * a2 * a1);
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 18
5 10
6 10
7 18
8 17
9 17
10 17
11 18
12 19
<<<sep_out_sample>>>
cmp %edi,%edx
jle e <func1+0xe>
mov %esi,%eax
sub %edi,%eax
add %ecx,%eax
sub %edi,%eax
jmp 18 <func1+0x18>
mov %ecx,%eax
sub %edx,%eax
imul %r8d,%eax
sub %esi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a5 - ((a5 - a3) + a3);
    if (a1 < a3)
    {
        v7 = a4 - (a1 - a2) - a1;
    }
    else
    {
        v7 = (a4 - a3) * a5 - a2;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += a2 - a3 - a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 5
2 5
3 7
4 7
5 7
6 7
7 7
8 11
9 11
10 11
11 11
12 18
13 18
14 18
15 18
16 18
17 19
<<<sep_out_sample>>>
lea (%rcx,%r8,1),%eax
mov %edi,%r9d
sub %esi,%r9d
cmp %edi,%edx
cmovl %eax,%r9d
lea (%rdi,%rcx,1),%eax
cmp %ecx,%r9d
jl 21 <func1+0x21>
lea (%rdi,%rdx,1),%eax
imul %esi,%eax
imul %esi,%eax
lea (%rdx,%rsi,1),%r10d
cmp %esi,%r9d
jge 3a <func1+0x3a>
mov %edx,%r10d
imul %r8d,%r10d
mov %edi,%r11d
sub %r10d,%r11d
mov %r11d,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a3 < a1)
    {
        v6 = a1 + (a4 - a1) + a5;
    }
    else
    {
        v6 = a1 - a2;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += a2 - a2;
    }
    if (v6 < a4)
    {
        v9 = a1 + a4;
    }
    else
    {
        v9 = (a2 * (a1 + a3)) * a2;
    }
    if (v6 < a2)
    {
        v10 = a1 - a3 * a5;
    }
    else
    {
        v10 = a3 + a2;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 6
6 19
7 17
8 17
9 23
10 23
11 23
12 31
13 25
14 25
15 27
16 27
17 27
18 27
19 27
20 33
21 33
22 33
23 33
24 33
25 33
26 33
27 34
<<<sep_out_sample>>>
mov %edi,%r9d
sub %ecx,%r9d
sub %r8d,%r9d
mov %r8d,%eax
sub %esi,%eax
cmp %r8d,%edi
jle 22 <func1+0x22>
mov %esi,%eax
sub %r8d,%eax
mov %edx,%r10d
imul %ecx,%r10d
sub %r10d,%eax
add %edi,%edx
add %esi,%edx
add %r8d,%edx
add %ecx,%edx
add %r9d,%edx
add %edx,%eax
lea (%rsi,%r8,1),%edx
add %edx,%eax
imul %esi,%r8d
imul %ecx,%edi
lea (%r8,%rdi,1),%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a1 - a4 - a5;
    if (a5 < a1)
    {
        v7 = (a2 - a5) - a3 * a4;
    }
    else
    {
        v7 = (a3 - (a3 - a5)) - a2;
    }
    v8 = a2 + a5;
    v9 = a2 * a5 + a4 * a1;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 11
5 11
6 5
7 5
8 7
9 7
10 7
11 7
12 7
13 15
14 15
15 15
16 15
17 15
18 15
19 13
20 15
21 14
22 14
23 14
24 15
25 16
<<<sep_out_sample>>>
push %rbx
cmp %esi,%r8d
jge 13 <func1+0x13>
mov %ecx,%r9d
imul %ecx,%r9d
imul %r8d,%r9d
jmp 1c <func1+0x1c>
mov %r8d,%eax
sub %esi,%eax
lea (%rax,%rdx,2),%r9d
lea (%rdx,%rdi,1),%r11d
cmp %r8d,%r9d
jl 2c <func1+0x2c>
mov %esi,%r11d
imul %esi,%r11d
lea (%rdx,%r8,1),%r10d
cmp %edi,%edx
jg 43 <func1+0x43>
mov %esi,%r10d
imul %esi,%r10d
mov %ecx,%ebx
imul %ecx,%ebx
sub %ebx,%r10d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
add %r11d,%eax
add %r10d,%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a5 < a2)
    {
        v6 = a5 * (a4 * a4);
    }
    else
    {
        v6 = a5 - a2 + (a3 + a3);
    }
    if (v6 < a5)
    {
        v7 = (a3 + a1) - a2 + a2;
    }
    else
    {
        v7 = a2 * a2;
    }
    if (a1 < a3)
    {
        v8 = ((a3 - a1) + a5) + a1;
    }
    else
    {
        v8 = (a2 * a2) - a4 * a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 2
2 4
3 4
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 14
12 12
13 12
14 18
15 18
16 22
17 20
18 20
19 26
20 26
21 26
22 26
23 26
24 28
25 28
26 28
27 28
28 28
29 28
30 28
31 29
32 29
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %edx,%r8d
lea (%r8,%rcx,1),%edx
mov $0x2,%eax
sub %esi,%eax
imul %eax,%ecx
lea 0x1(%rdx,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a4 - (a4 * a2) + a4;
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        if (v7 < a5)
        {
            v7 += a1 * (a1 - a5);
        }
        else
        {
            v7 += (a1 - a4) * a3;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 4
6 4
7 4
8 17
9 18
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
imul %edx,%esi
lea (%rax,%rcx,2),%eax
sub %esi,%eax
imul %edi,%r8d
add %r8d,%edx
add %edx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a4 - a2 * a3;
    v7 = (a5 * a1 + a3) + a1;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 4
5 4
6 6
7 5
8 5
9 5
10 6
11 7
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a5 - a2;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        if (a5 < a5)
        {
            v8 += a2 + a4;
        }
        else
        {
            v8 += a3 * a1 * a1;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 21
5 22
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
lea 0x1(%rcx,%rax,1),%ecx
imul %edx,%edi
lea (%r8,%r8,1),%r9d
sub %r9d,%edi
lea (%rcx,%rdi,1),%eax
imul %r8d,%r8d
add %r8d,%edx
add %edx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (v6 < a3)
        {
            v6 += a3 * a5;
        }
        else
        {
            v6 += (a4 - a1) + a1;
        }
    }
    v8 = (a1 * a3) - (a5 + a5);
    v9 = a2 + ((a5 * a5) + a3);
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 18
5 16
6 16
7 16
8 18
9 17
10 17
11 17
12 18
13 19
<<<sep_out_sample>>>
mov %r8d,%r10d
imul %edx,%r10d
imul %edi,%r10d
cmp %ecx,%edi
jle 20 <func1+0x20>
mov %ecx,%r9d
imul %edx,%r9d
add $0x1,%r9d
imul %edi,%r9d
jmp 2e <func1+0x2e>
mov %edx,%r9d
imul %esi,%r9d
mov %edi,%eax
sub %ecx,%eax
add %eax,%r9d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a1 - a3;
    }
    v8 = (a5 * a3) * a1;
    if (a4 < a1)
    {
        v9 = (a4 * a3) * a1 + a1;
    }
    else
    {
        v9 = a3 * a2 + (a1 - a4);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 9
4 10
5 10
6 12
7 12
8 12
9 12
10 12
11 16
12 16
13 16
14 16
15 16
16 18
17 18
18 18
19 18
20 18
21 18
22 19
<<<sep_out_sample>>>
mov %edx,%eax
sub %edi,%eax
cmp %esi,%edx
jl f <func1+0xf>
mov %ecx,%eax
sub %edi,%eax
lea (%rax,%rdx,2),%eax
add %edi,%edx
add %edx,%esi
add %r8d,%esi
add %esi,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a3 < a2)
    {
        v6 = a3 - a1;
    }
    else
    {
        v6 = a3 + (a4 - a1 + a3);
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        if (v6 < a1)
        {
            v7 += (a1 - a1) - a5;
        }
        else
        {
            v7 += (a5 + a3) * a1;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 6
2 6
3 4
4 4
5 10
6 10
7 10
8 24
9 24
10 24
11 24
12 24
13 25
<<<sep_out_sample>>>
cmp %edx,%esi
jge c <func1+0xc>
lea (%rcx,%rdi,1),%eax
imul %edi,%eax
jmp 13 <func1+0x13>
mov %edx,%eax
sub %esi,%eax
imul %edx,%eax
add %edi,%edx
add %edx,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (v6 < a2)
        {
            v6 += (a2 * a1) * a1;
        }
        else
        {
            v6 += a1 * a2 * a1;
        }
    }
    if (a2 < a3)
    {
        v8 = (a4 + a1) * a1;
    }
    else
    {
        v8 = a3 * a3 - a3 * a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 22
7 22
8 22
9 24
10 24
11 24
12 24
13 24
14 25
<<<sep_out_sample>>>
mov $0x0,%eax
cmp %edx,%edi
jge 13 <func1+0x13>
mov %r8d,%eax
imul %edx,%eax
sub %ecx,%eax
add %esi,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
imul %ecx,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a2 + a2 * a1;
    }
    if (a1 < a3)
    {
        v8 = a2 - (a4 - a5 * a3);
    }
    else
    {
        v8 = a2 - a2;
    }
    if (a4 < a4)
    {
        v9 = a5 + a3;
    }
    else
    {
        v9 = a4 * a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 15
2 9
3 9
4 11
5 11
6 11
7 11
8 25
9 25
10 25
11 25
12 25
13 23
14 25
15 26
<<<sep_out_sample>>>
push %rbx
mov %edx,%ebx
sub %ecx,%ebx
imul %r8d,%ebx
imul %ecx,%ebx
lea (%rdx,%rdi,1),%r10d
lea (%rcx,%rcx,1),%r11d
sub %r10d,%r11d
mov %edx,%r9d
sub %esi,%r9d
cmp %esi,%ecx
jge 2c <func1+0x2c>
mov %edx,%r9d
imul %r8d,%r9d
imul %ecx,%r9d
cmp %edi,%r9d
jge 39 <func1+0x39>
add %esi,%edx
add %edi,%edx
sub %ecx,%edx
jmp 42 <func1+0x42>
lea 0x1(%rcx),%eax
imul %esi,%eax
imul %eax,%edx
lea (%r10,%rsi,1),%eax
add %r8d,%eax
add %ecx,%eax
add %ebx,%eax
add %r11d,%eax
add %eax,%r9d
lea (%r9,%rdx,1),%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = (a5 * (a3 - a4)) * a4;
    v7 = (a4 + a4) - (a3 + a1);
    if (a4 < a2)
    {
        v8 = a3 * a5 * a4;
    }
    else
    {
        v8 = a3 - a2;
    }
    if (v8 < a1)
    {
        v9 = a2 + a3 + a1 - a4;
    }
    else
    {
        v9 = (a4 * a2 + a2) * a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 4
3 4
4 4
5 4
6 5
7 5
8 5
9 12
10 12
11 6
12 6
13 8
14 8
15 8
16 14
17 14
18 16
19 16
20 16
21 16
22 20
23 20
24 20
25 22
26 22
27 22
28 22
29 22
30 22
31 22
32 23
33 23
<<<sep_out_sample>>>
lea (%r8,%rdi,1),%eax
imul %edi,%eax
sub %ecx,%eax
add %eax,%edi
add %edx,%edi
add %esi,%edi
add %r8d,%edi
add %edi,%ecx
sub %r8d,%esi
lea (%rsi,%rdx,2),%eax
lea 0x1(%rcx,%rax,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a2 - a5 + a3 + a3;
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += a5 - a4 * a4;
    }
    v9 = a4 - a4;
    v10 = ((a5 + a1) * a1) - a4;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 12
5 12
6 12
7 12
8 12
9 4
10 4
11 12
12 13
<<<sep_out_sample>>>
mov %edi,%r9d
neg %r9d
mov %r9d,%eax
sub %ecx,%eax
lea (%r8,%rdx,1),%r10d
mov %eax,%r9d
cmp %r8d,%ecx
mov %r10d,%eax
cmovge %r9d,%eax
add %edi,%edx
add %esi,%edx
add %edx,%r8d
add %ecx,%r8d
add %eax,%r8d
sub %ecx,%esi
add %esi,%edi
sub %ecx,%edi
lea (%r8,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a4 < a5)
    {
        v6 = a5 + a3;
    }
    else
    {
        v6 = (a5 - a1 - a5) - a4;
    }
    v7 = (a2 - a4) + a1 - a4;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 6
6 6
7 6
8 6
9 6
10 13
11 13
12 13
13 13
14 13
15 12
16 12
17 12
18 13
19 14
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%r9d
add %esi,%r9d
add %r8d,%r9d
mov %r8d,%eax
sub %esi,%eax
sub %edi,%eax
lea (%r9,%rcx,2),%ecx
lea (%rcx,%rax,1),%eax
add %edx,%r8d
add %r8d,%esi
add %esi,%edi
lea 0x1(%rax,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = (a5 - a2 - a1) + a4;
    v7 = a5 + a3 + a2 + a1;
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        if (v7 < a5)
        {
            v8 += a1 + (a4 + a5);
        }
        else
        {
            v8 += a2 + a4 * a4;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 4
5 4
6 4
7 4
8 18
9 5
10 5
11 5
12 18
13 19
<<<sep_out_sample>>>
mov %edi,%r9d
sub %edx,%r9d
lea (%rdx,%rcx,1),%eax
cmp %edx,%edi
jge 1c <func1+0x1c>
mov %ecx,%r10d
sub %edi,%r10d
mov %edi,%eax
imul %r8d,%eax
add %r10d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a1 - a3;
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += a4 * a5 * a2;
    }
    if (a1 < a3)
    {
        v9 = (a4 - a1) + a1 * a5;
    }
    else
    {
        v9 = a3 - (a1 - a4) + a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 16
4 10
5 10
6 12
7 12
8 12
9 12
10 12
11 18
12 18
13 18
14 18
15 18
16 18
17 19
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %r8d,%edx
lea (%rdi,%rcx,2),%eax
lea 0x1(%rax,%rdx,1),%edx
lea (%rsi,%rdi,2),%eax
lea (%rax,%r8,1),%eax
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a2 - a2;
    }
    if (a1 < a1)
    {
        v8 = a5 - a5;
    }
    else
    {
        v8 = a1 + a4;
    }
    v9 = (a1 + a2 + a5) + a1;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 15
5 18
6 17
7 17
8 18
9 19
<<<sep_out_sample>>>
mov %edi,%eax
imul %esi,%eax
mov %eax,%r9d
sub %ecx,%r9d
lea (%r8,%rdi,1),%r10d
sub %eax,%r10d
mov %r10d,%eax
cmp %r8d,%edi
jge 26 <func1+0x26>
mov %r8d,%eax
imul %edi,%eax
imul %r8d,%eax
sub %edx,%eax
add %edi,%edx
add %edx,%esi
add %r8d,%esi
add %ecx,%esi
add %r9d,%esi
add %esi,%eax
imul %ecx,%r8d
lea (%rax,%rdi,2),%eax
sub %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = (a1 * a2) - a4;
    if (a1 < a5)
    {
        v7 = (a5 * a1) * a5 - a3;
    }
    else
    {
        v7 = (a5 + a1) - a2 * a1;
    }
    v8 = (a1 + a1) - a5 * a4;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 11
6 11
7 11
8 5
9 5
10 7
11 7
12 7
13 7
14 14
15 14
16 14
17 14
18 14
19 14
20 13
21 13
22 14
23 15
<<<sep_out_sample>>>
mov %ecx,%eax
imul %edi,%eax
mov $0x1,%r9d
sub %eax,%r9d
imul %esi,%r9d
test %edi,%edi
jle 26 <func1+0x26>
lea (%rdi,%rdi,1),%eax
mov %esi,%r10d
sub %eax,%r10d
mov %r10d,%eax
add %edx,%eax
jmp 2e <func1+0x2e>
lea (%r8,%rsi,1),%eax
add %edx,%eax
add %ecx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
add %eax,%ecx
lea (%rcx,%rdi,2),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a2 - a4 * a1 * a2;
    if (v7 < a1)
    {
        v7 = (a2 - (a1 + a1)) + a3;
    }
    else
    {
        v7 = (a5 + a2) + a3 + a4;
    }
    v8 = a1 + a1;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 4
6 5
7 5
8 7
9 7
10 7
11 7
12 7
13 7
14 11
15 11
16 11
17 14
18 14
19 14
20 14
21 14
22 14
23 14
24 15
<<<sep_out_sample>>>
lea (%rcx,%rsi,1),%r9d
mov $0x0,%eax
test %edi,%edi
jg 13 <func1+0x13>
lea 0x1(%rdx),%eax
imul %esi,%eax
add %edi,%edx
add %edx,%esi
add %r8d,%esi
add %ecx,%esi
add %r9d,%esi
add %esi,%eax
add %ecx,%r8d
add %r8d,%eax
sub %edi,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = (a1 + a4) - a1 + a2;
    if (v7 < a1)
    {
        v7 = a5 - a5;
    }
    else
    {
        v7 = a3 * a2 + a2;
    }
    v8 = a4 + a5 - (a4 - a4);
    v9 = a4 - a1;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 7
3 5
4 5
5 11
6 11
7 15
8 15
9 15
10 15
11 15
12 15
13 13
14 15
15 14
16 15
17 16
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea (%r8,%rcx,1),%esi
sub %edi,%edx
imul %edx,%ecx
sub %edi,%ecx
lea 0x1(%rsi,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = (a3 - a1) * a4 - a1;
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += a5 - a1 + a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 4
6 4
7 4
8 10
9 11
<<<sep_out_sample>>>
cmp %edi,%ecx
jge 14 <func1+0x14>
mov %esi,%r9d
imul %edi,%r9d
imul %ecx,%r9d
add %edi,%r9d
jmp 23 <func1+0x23>
mov %r8d,%eax
imul %ecx,%eax
imul %ecx,%eax
mov %edi,%r9d
sub %eax,%r9d
test %ecx,%ecx
jle 32 <func1+0x32>
mov %edx,%eax
sub %esi,%eax
add %edi,%eax
sub %r8d,%eax
jmp 37 <func1+0x37>
mov %ecx,%eax
imul %edi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a4 < a1)
    {
        v6 = a1 + (a2 * a1) * a4;
    }
    else
    {
        v6 = a1 - a5 * a4 * a4;
    }
    if (v7 < a4)
    {
        v7 = (a3 - a2 + a1) - a5;
    }
    else
    {
        v7 = a4 * a1;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        if (a5 < a1)
        {
            v8 += a5 - (a5 * a2);
        }
        else
        {
            v8 += a3 + (a2 + a3);
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 10
13 12
14 12
15 14
16 14
17 14
18 14
19 14
20 18
21 18
22 32
23 32
24 32
25 32
26 32
27 32
28 33
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
add %ecx,%esi
lea (%rcx,%rdx,2),%eax
sub %r8d,%eax
lea 0x1(%rsi,%rax,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a3 < a3)
    {
        v6 = (a4 * a2) * a2 * a4;
    }
    else
    {
        v6 = (a3 + a4 - a5) + a3;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += a3 * a1;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        v9 += a1 - a4 - a3;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 22
4 22
5 10
6 10
7 22
8 23
<<<sep_out_sample>>>
add %edx,%edi
lea (%r8,%rsi,2),%eax
lea 0x1(%rdi,%rax,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a2 - a4;
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += a1 + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 11
<<<sep_out_sample>>>
cmp %ecx,%esi
jge c <func1+0xc>
mov %ecx,%eax
imul %r8d,%eax
jmp 15 <func1+0x15>
lea (%rdx,%r8,1),%eax
add %esi,%eax
imul %edi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %ecx,%r8d
lea 0x1(%rax,%r8,1),%eax
imul %edx,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a2 < a4)
    {
        v6 = a4 * a5;
    }
    else
    {
        v6 = ((a3 + a5) + a2) * a1;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += a2 - a4;
    }
    v9 = a3 * a4;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 18
10 18
11 18
12 18
13 18
14 17
15 18
16 19
<<<sep_out_sample>>>
cmp %esi,%edi
jge 14 <func1+0x14>
lea (%rsi,%rdx,1),%eax
mov %edi,%r10d
sub %eax,%r10d
mov %r10d,%eax
add %edi,%eax
jmp 22 <func1+0x22>
lea (%rdi,%r8,1),%eax
mov %r8d,%r9d
imul %r8d,%r9d
sub %r9d,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (a5 < a5)
        {
            v6 += a3 - a5 * a3;
        }
        else
        {
            v6 += a1 - a2;
        }
    }
    if (a1 < a2)
    {
        v8 = a1 - (a2 + a3) + a1;
    }
    else
    {
        v8 = a1 + a5 - a5 * a5;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        if (v9 < a3)
        {
            v9 += (a3 * a5) * a1;
        }
        else
        {
            v9 += a4 + a1 + a3;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 18
7 18
8 18
9 22
10 22
11 22
12 22
13 36
14 36
15 36
16 36
17 36
18 37
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += (a3 + a4) * a5;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += (a1 - a2) - a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 14
2 14
3 14
4 14
5 15
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
lea (%rax,%rcx,2),%eax
add %edx,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (a4 < a5)
        {
            v6 += a3 * a1 + a5;
        }
        else
        {
            v6 += a2 + a3 + a3;
        }
    }
    v8 = a4 + a4;
    v9 = a3 + a4;
    v10 = 0;
    for (v11 = 0; v11++; v11<a5)
    {
        v10 += a2 + (a3 + a1);
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 23
2 23
3 23
4 23
5 23
6 17
7 23
8 24
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
lea 0x1(%rcx,%r8,1),%eax
sub %edi,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (a5 < a5)
        {
            v6 += (a2 + a1) - a5;
        }
        else
        {
            v6 += a1 - a3 * a4;
        }
    }
    if (a1 < a1)
    {
        v8 = (a5 - (a5 - a2)) * a4;
    }
    else
    {
        v8 = a2 - a1;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a1)
    {
        if (a4 < a2)
        {
            v9 += a5 * a4 * a1;
        }
        else
        {
            v9 += a3 * a1 - a3;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 36
2 36
3 36
4 36
5 22
6 36
7 37
<<<sep_out_sample>>>
mov %ecx,%eax
sub %r8d,%eax
mov %edx,%r9d
imul %ecx,%r9d
cmp %ecx,%edx
cmovl %r9d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a2 - a5 - a1;
    }
    if (a3 < a4)
    {
        v8 = a3 * a4;
    }
    else
    {
        v8 = (a4 - a5) - a2 + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 15
2 15
3 11
4 11
5 11
6 11
7 17
8 17
9 17
10 17
11 17
12 18
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %edx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a1 - a1;
    }
    v8 = a3 + a1;
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        if (v10 < a1)
        {
            v9 += a4 * a2;
        }
        else
        {
            v9 += a2 * a2 * a3;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 22
4 22
5 9
6 22
7 23
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %eax,%ecx
mov %edx,%eax
sub %edi,%eax
add %eax,%edx
add %ecx,%edx
sub %edi,%esi
sub %edi,%esi
imul %esi,%r8d
lea 0x1(%rdx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = (a3 - a1) + a3;
    v7 = (a2 - a1 - a1) * a5;
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += a3 + a2 - a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 11
5 4
6 4
7 4
8 11
9 5
10 5
11 5
12 11
13 12
<<<sep_out_sample>>>
test %r8d,%r8d
jle e <func1+0xe>
mov %edi,%eax
sub %esi,%eax
add %r8d,%eax
jmp 16 <func1+0x16>
mov %r8d,%eax
neg %eax
imul %edx,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a5 < a3)
    {
        v6 = a3 - a3;
    }
    else
    {
        v6 = a5 - a5;
    }
    if (v7 < a5)
    {
        v7 = a5 - (a2 - a1);
    }
    else
    {
        v7 = a3 - (a3 + a5 * a3);
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 12
2 12
3 14
4 14
5 14
6 14
7 18
8 18
9 18
10 20
11 20
12 20
13 20
14 20
15 21
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a5 * a4;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += a3 + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 14
2 14
3 14
4 14
5 15
<<<sep_out_sample>>>
mov %r8d,%r9d
sub %edx,%r9d
add %edi,%r9d
imul %r8d,%r9d
mov %r8d,%eax
imul %edi,%eax
add $0x1,%eax
imul %esi,%eax
add %r9d,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a4 * a2;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += a5 * (a3 - a1);
    }
    v10 = (a5 - a3 + a1) * a5;
    v11 = a5 * a1 * a2 + a2;
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 14
2 14
3 14
4 14
5 15
6 15
7 15
8 15
9 16
10 16
11 16
12 16
13 16
14 16
15 17
<<<sep_out_sample>>>
mov %ecx,%r9d
imul %ecx,%r9d
sub %r8d,%r9d
add %ecx,%r9d
cmp $0x1,%r8d
jle 1d <func1+0x1d>
mov %edx,%eax
imul %edi,%eax
add %r8d,%eax
jmp 26 <func1+0x26>
lea (%r8,%rdi,1),%eax
sub %edx,%eax
imul %edx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a2 < a2)
    {
        v6 = (a1 * a2) * a1;
    }
    else
    {
        v6 = a4 * a4 - a5 + a4;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a1 - a4;
    }
    if (v8 < a5)
    {
        v9 = a3 * a1 + a5;
    }
    else
    {
        v9 = (a5 + a1 - a3) * a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 17
6 17
7 19
8 19
9 19
10 19
11 23
12 23
13 23
14 25
15 25
16 25
17 25
18 25
19 25
20 26
<<<sep_out_sample>>>
lea (%rdi,%rcx,1),%eax
lea (%rdi,%rdi,1),%r9d
cmp %edx,%edi
cmovge %r9d,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a4 + a4 * a2;
    }
    if (a1 < a3)
    {
        v8 = a1 + a4;
    }
    else
    {
        v8 = a1 + a1;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        if (v6 < a1)
        {
            v9 += a5 * a1 - a2;
        }
        else
        {
            v9 += (a3 + a2) + a5;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 11
5 29
6 29
7 29
8 29
9 29
10 30
<<<sep_out_sample>>>
push %rbx
mov %ecx,%r11d
sub %edx,%r11d
imul %r8d,%r11d
sub %ecx,%r11d
mov %esi,%r10d
sub %r8d,%r10d
mov %edx,%eax
imul %r8d,%eax
add %eax,%r10d
mov %r8d,%eax
sub %esi,%eax
lea (%rsi,%rcx,1),%r9d
test %ecx,%ecx
cmovg %eax,%r9d
test %r8d,%r8d
jle 3a <func1+0x3a>
mov %edx,%ebx
neg %ebx
imul %esi,%ebx
jmp 40 <func1+0x40>
mov %r8d,%ebx
imul %ecx,%ebx
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea (%rcx,%r11,1),%eax
add %r10d,%eax
add %r9d,%eax
add %ebx,%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a4 < a4)
    {
        v6 = (a2 + a4) + a1 + a3;
    }
    else
    {
        v6 = ((a4 - a3) * a5) - a4;
    }
    v7 = a2 - a5 + a3 * a5;
    if (v8 < a4)
    {
        v8 = a5 - a2;
    }
    else
    {
        v8 = (a4 - a2) + (a2 + a2);
    }
    if (v9 < a5)
    {
        v9 = (a5 - a3 - a5) * a2;
    }
    else
    {
        v9 = a5 * a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 10
3 10
4 10
5 10
6 12
7 12
8 12
9 12
10 12
11 15
12 15
13 15
14 15
15 15
16 21
17 21
18 23
19 23
20 23
21 23
22 27
23 27
24 29
25 29
26 29
27 29
28 29
29 29
30 29
31 29
32 30
33 30
<<<sep_out_sample>>>
cmp %edx,%edi
jge e <func1+0xe>
lea 0x1(%rcx),%r9d
imul %r8d,%r9d
jmp 17 <func1+0x17>
mov %ecx,%eax
imul %edi,%eax
lea (%rax,%rdx,2),%r9d
mov $0x0,%eax
cmp %ecx,%edi
jg 31 <func1+0x31>
mov %edx,%eax
imul %ecx,%eax
mov %r8d,%r10d
sub %eax,%r10d
mov %r10d,%eax
imul %edx,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    if (a1 < a3)
    {
        v6 = (a4 * a5) + a5;
    }
    else
    {
        v6 = (a3 + a3) + (a4 * a1);
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += a2 * a2 + a5;
    }
    if (a4 < a1)
    {
        v9 = a5 - a5;
    }
    else
    {
        v9 = (a5 - a3 * a4) * a3;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a1)
    {
        v10 += a3 - a3;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 19
10 17
11 17
12 23
13 23
14 23
15 23
16 23
17 23
18 30
19 30
20 30
21 30
22 30
23 30
24 31
<<<sep_out_sample>>>
mov %edi,%eax
imul %esi,%eax
lea 0x1(%rdi,%rax,1),%eax
add %edx,%eax
add %eax,%esi
add %esi,%r8d
lea (%r8,%rcx,1),%esi
imul %ecx,%edx
sub %edi,%edx
lea 0x1(%rsi,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = (a4 * a3) - a1;
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        if (a4 < a1)
        {
            v7 += a1 - a2 - a4;
        }
        else
        {
            v7 += (a3 + a3) - a3;
        }
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        if (a4 < a2)
        {
            v9 += a3 + a4 * a3;
        }
        else
        {
            v9 += a1 * a4 - a4;
        }
    }
    v11 = a1 * a2;
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 29
2 29
3 30
4 30
5 30
6 30
7 30
8 4
9 4
10 30
11 31
<<<sep_out_sample>>>
lea (%rdx,%rcx,1),%r10d
sub %r8d,%r10d
sub %edi,%r10d
lea (%rdx,%rdi,1),%r9d
cmp %esi,%edx
mov $0x0,%eax
cmovle %eax,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
lea (%rdi,%rdx,2),%edx
imul %edx,%edi
add %edi,%eax
sub %ecx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = (a3 + a4 - a5) - a1;
    if (a2 < a3)
    {
        v7 = a3 + a1;
    }
    else
    {
        v7 = a1 * (a5 - a5) * a4;
    }
    v8 = a1 * (a3 + a3 + a1);
    v9 = a5 + a5 - a4 - a5;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 7
5 7
6 7
7 7
8 15
9 15
10 15
11 15
12 15
13 15
14 13
15 13
16 15
17 14
18 15
19 16
<<<sep_out_sample>>>
lea 0x1(%rdx),%eax
imul %esi,%eax
lea 0x1(%r8,%rax,1),%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a4 - a2 + a4;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        if (v8 < a3)
        {
            v8 += a4 * a1;
        }
        else
        {
            v8 += a1 + a1;
        }
    }
    v10 = a5 + (a2 * a3 + a2);
    v11 = 0;
    for (v12 = 0; v12++; v12<a4)
    {
        v11 += a4 + a4 * a5;
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 27
4 27
5 27
6 27
7 27
8 27
9 28
<<<sep_out_sample>>>
mov %edx,%r9d
imul %esi,%r9d
cmp %ecx,%r9d
jge 19 <func1+0x19>
mov %ecx,%r10d
imul %ecx,%r10d
imul %edx,%r10d
jmp 23 <func1+0x23>
mov %edx,%r10d
imul %ecx,%r10d
add %esi,%r10d
add %edi,%edx
add %edx,%esi
add %r8d,%esi
add %esi,%ecx
add %ecx,%r9d
lea (%r9,%r10,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (v6 < a4)
    {
        v6 = a3 * a2;
    }
    else
    {
        v6 = (a1 + a3 - a1) * a2;
    }
    if (v6 < a4)
    {
        v7 = (a4 * a4) * a3;
    }
    else
    {
        v7 = a2 + a3 * a4;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 10
2 10
3 12
4 12
5 14
6 14
7 14
8 14
9 18
10 18
11 18
12 20
13 20
14 20
15 20
16 20
17 20
18 21
<<<sep_out_sample>>>
mov %esi,%r9d
imul %edi,%r9d
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %eax,%ecx
mov %r9d,%eax
imul %edi,%eax
add %eax,%esi
add %esi,%ecx
imul %edi,%edx
add %ecx,%edx
add %r8d,%edi
sub %r9d,%edi
lea (%rdx,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a2 + ((a2 * a1) * a1);
    v7 = a1 * a3;
    v8 = (a5 + a1) - a1 * a2;
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        v9 += (a4 + a3) * a3;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 12
4 12
5 12
6 12
7 4
8 4
9 4
10 12
11 5
12 12
13 6
14 6
15 12
16 13
<<<sep_out_sample>>>
cmp %r8d,%edx
jle c <func1+0xc>
mov %edi,%eax
imul %edx,%eax
jmp 15 <func1+0x15>
mov %ecx,%eax
sub %r8d,%eax
add %esi,%eax
sub %edi,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (a3 < a2)
        {
            v6 += a5 - a1;
        }
        else
        {
            v6 += a1 - a1;
        }
    }
    if (a5 < a3)
    {
        v8 = a1 * a3;
    }
    else
    {
        v8 = ((a4 - a5) + a2) - a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 22
7 22
8 22
9 22
10 24
11 24
12 24
13 24
14 24
15 25
<<<sep_out_sample>>>
lea (%rdi,%rcx,1),%eax
cmp %r8d,%edx
jge 12 <func1+0x12>
mov %esi,%eax
sub %ecx,%eax
imul %edx,%eax
sub %r8d,%eax
lea (%rdi,%rdx,1),%r9d
add %r9d,%esi
add %r8d,%esi
add %ecx,%esi
add %esi,%eax
sub $0x1,%r8d
imul %edx,%r8d
add %edi,%r8d
add %r8d,%eax
imul %ecx,%edx
imul %edi,%edx
add %edx,%ecx
add %ecx,%eax
imul %edi,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a3 < a5)
    {
        v6 = a3 * (a2 - a4) - a5;
    }
    else
    {
        v6 = a4 + a4 + a1 - a4;
    }
    v7 = a5 * a3 - a3 + a1;
    v8 = a3 * a4 * a1 + a4;
    v9 = a1 * a1;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 6
7 6
8 15
9 15
10 15
11 15
12 15
13 12
14 12
15 12
16 15
17 13
18 13
19 13
20 15
21 14
22 15
23 16
<<<sep_out_sample>>>
mov %esi,%eax
neg %eax
sub %esi,%eax
cmp %r8d,%edx
jge 15 <func1+0x15>
mov %edi,%eax
not %eax
imul %esi,%eax
add %r8d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a3 < a5)
    {
        v6 = a5 - (a2 + a2 * a1);
    }
    else
    {
        v6 = a3 - (a2 + a3) - a2;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        if (a2 < a2)
        {
            v7 += a5 - a4 * a1;
        }
        else
        {
            v7 += (a5 - a3) + a3;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 4
5 4
6 6
7 6
8 6
9 6
10 24
11 24
12 24
13 24
14 24
15 25
<<<sep_out_sample>>>
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rdi,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a1 - a4;
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += a2 - a1 - a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 11
<<<sep_out_sample>>>
mov %edx,%eax
cmp %esi,%ecx
jg 16 <func1+0x16>
lea (%r8,%rcx,1),%eax
imul %edx,%eax
mov %esi,%r9d
sub %eax,%r9d
mov %r9d,%eax
add %edi,%edx
add %esi,%edx
add %edx,%r8d
lea (%r8,%rcx,2),%edx
add %edx,%eax
sub $0x1,%esi
imul %esi,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = (a4 + a2) - a2;
    if (a2 < a4)
    {
        v7 = a3 + a5 - a5;
    }
    else
    {
        v7 = a2 - a3 * (a5 + a4);
    }
    v8 = (a4 * a2) - a4;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 7
2 5
3 5
4 11
5 11
6 11
7 11
8 11
9 14
10 14
11 14
12 14
13 14
14 13
15 13
16 14
17 15
<<<sep_out_sample>>>
mov %edx,%eax
sub %edi,%eax
add %r8d,%eax
add %ecx,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += (a4 * a5) - a1;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += a5 + a5;
    }
    v10 = a3 - a1 + a5 + a4;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 14
2 14
3 14
4 14
5 15
6 15
7 15
8 15
9 15
10 16
<<<sep_out_sample>>>
lea (%rcx,%rdi,1),%r9d
mov %esi,%eax
imul %edi,%eax
cmp %edi,%esi
cmovl %eax,%r9d
add %edx,%edi
add %esi,%edi
add %r8d,%edi
add %edi,%ecx
lea 0x1(%r9,%rcx,1),%eax
mov %esi,%ecx
sub %edx,%ecx
imul %ecx,%esi
imul %esi,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a2 < a1)
    {
        v6 = a2 * a1;
    }
    else
    {
        v6 = a4 + a1;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        if (a3 < a2)
        {
            v7 += a4 + a3;
        }
        else
        {
            v7 += a5 * a1;
        }
    }
    v9 = a2 * (a2 - a3) * a5;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 6
3 6
4 6
5 6
6 25
7 25
8 25
9 25
10 25
11 24
12 24
13 24
14 24
15 25
16 26
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (a5 < a2)
        {
            v6 += (a3 + a3) - a2;
        }
        else
        {
            v6 += a3 + a2;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += a5 * a3;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a4)
    {
        if (v8 < a1)
        {
            v10 += a3 + a5;
        }
        else
        {
            v10 += a1 - a3 + a4;
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 33
2 33
3 33
4 33
5 34
<<<sep_out_sample>>>
mov %r8d,%eax
imul %esi,%eax
sub %ecx,%eax
imul %esi,%eax
lea 0x1(%rdi,%rax,1),%eax
add %eax,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a2 * a4 - a3;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += a5 - a4;
    }
    v10 = ((a5 * a2) - a4) * a2;
    v11 = 0;
    for (v12 = 0; v12++; v12<a2)
    {
        if (v11 < a3)
        {
            v11 += (a3 - a4) - a2;
        }
        else
        {
            v11 += (a5 - a4) - a2;
        }
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 14
2 14
3 14
4 14
5 27
6 27
7 27
8 27
9 27
10 28
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
lea (%rcx,%r8,2),%eax
lea (%rax,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a5 - a4 - a4;
    v7 = a4 + a4;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 7
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
imul %ecx,%r8d
add %eax,%r8d
sub %esi,%ecx
imul %ecx,%edx
lea 0x1(%r8,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = a4 * ((a1 + a5) - a1);
    v7 = a3 * a4 - a2 * a3;
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += a1 - (a2 + a2);
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a5)
    {
        if (v11 < a5)
        {
            v10 += (a4 - a2) + a2;
        }
        else
        {
            v10 += a5 + (a3 - a2);
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 23
2 23
3 23
4 23
5 4
6 23
7 5
8 5
9 23
10 24
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %edx,%r8d
lea 0x1(%rcx,%r8,1),%eax
imul %esi,%edi
sub %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (v7 < a1)
        {
            v6 += (a3 * a4) * a3;
        }
        else
        {
            v6 += a3 * (a1 - a2);
        }
    }
    v8 = (a5 - a5) - a1 * a2;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 16
6 17
7 18
<<<sep_out_sample>>>
add %edi,%edx
add %edx,%esi
add %r8d,%esi
add %esi,%ecx
sub %edi,%r8d
lea 0x1(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a5 - a1;
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += (a4 - a3) * a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 4
6 10
7 11
<<<sep_out_sample>>>
mov %edx,%eax
sub %edi,%eax
cmp %edx,%ecx
jl f <func1+0xf>
lea (%r8,%rcx,1),%eax
imul %edi,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a4 < a3)
    {
        v6 = a3 - a1;
    }
    else
    {
        v6 = a1 * a5 + a1 * a4;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a1 + a5 * a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 6
2 6
3 4
4 4
5 10
6 10
7 17
8 17
9 17
10 17
11 17
12 18
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
add %esi,%ecx
imul %r8d,%edi
sub %edi,%edx
lea 0x1(%rcx,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a3 < a3)
    {
        v6 = a1 + a2 + a1 * a2;
    }
    else
    {
        v6 = a3 - a5 * a1;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        if (a4 < a3)
        {
            v7 += a4 - a2 - a2;
        }
        else
        {
            v7 += a2 - a3 - a1;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 24
2 24
3 24
4 24
5 10
6 10
7 24
8 25
<<<sep_out_sample>>>
mov %ecx,%eax
neg %eax
cmp %r8d,%esi
jge 14 <func1+0x14>
mov %r8d,%eax
imul %esi,%eax
sub %ecx,%eax
imul %esi,%eax
lea (%rcx,%rdi,1),%r9d
mov %ecx,%r10d
sub %edx,%r10d
cmp %edi,%edx
cmovge %r10d,%r9d
add %edx,%edi
add %esi,%edi
add %edi,%r8d
add %r8d,%ecx
add %ecx,%eax
add %r9d,%eax
imul %esi,%edx
sub %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a2 < a5)
    {
        v6 = ((a5 * a2) - a4) * a2;
    }
    else
    {
        v6 = a2 - (a4 + a2);
    }
    if (a3 < a1)
    {
        v7 = a4 + a1;
    }
    else
    {
        v7 = a4 - a3;
    }
    v8 = a4 - a2 * a3 - a4;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 4
4 4
5 6
6 6
7 6
8 6
9 14
10 14
11 14
12 14
13 14
14 21
15 21
16 21
17 21
18 21
19 21
20 20
21 21
22 22
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
lea (%r8,%rcx,1),%eax
imul %edi,%edx
add %esi,%esi
imul %esi,%edx
add %edx,%eax
imul %ecx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a1 * a3 * (a2 + a2);
    v7 = a4 * a1;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 4
7 4
8 6
9 5
10 6
11 7
<<<sep_out_sample>>>
test %ecx,%ecx
jle b <func1+0xb>
mov %ecx,%eax
sub %r8d,%eax
jmp 12 <func1+0x12>
mov %esi,%eax
sub %edx,%eax
imul %ecx,%eax
lea 0x1(%rax,%rdi,1),%eax
add %eax,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += (a3 + a1) * a4;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        if (a1 < a2)
        {
            v8 += (a1 * a1) - a1;
        }
        else
        {
            v8 += a2 - a5 - a4;
        }
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a4)
    {
        v10 += a3 - a2 - a3;
    }
    if (v8 < a4)
    {
        v12 = a4 - a5;
    }
    else
    {
        v12 = (a4 * a2) - a3 * a4;
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 26
2 26
3 28
4 28
5 28
6 32
7 32
8 32
9 34
10 34
11 34
12 34
13 34
14 35
<<<sep_out_sample>>>
cmp %esi,%ecx
jle 11 <func1+0x11>
mov %ecx,%eax
imul %esi,%eax
add $0x1,%eax
imul %ecx,%eax
jmp 19 <func1+0x19>
lea 0x1(%rsi),%eax
imul %ecx,%eax
add %edx,%eax
add %edi,%edx
add %edx,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a4 + a1;
    }
    if (a2 < a4)
    {
        v8 = a4 + (a4 * a2) * a4;
    }
    else
    {
        v8 = (a2 * a4 + a4) + a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 11
8 15
9 15
10 15
11 17
12 17
13 17
14 17
15 17
16 18
<<<sep_out_sample>>>
cmp %esi,%edx
jge e <func1+0xe>
lea (%rdx,%rsi,1),%r9d
imul %edi,%r9d
jmp 1c <func1+0x1c>
lea (%rdi,%r8,1),%r9d
mov %edi,%r10d
imul %ecx,%r10d
sub %r10d,%r9d
mov %edx,%eax
sub %edi,%eax
mov %ecx,%r10d
imul %edi,%r10d
cmp %edi,%r9d
cmovl %r10d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a3 < a2)
    {
        v6 = a1 * (a3 + a2);
    }
    else
    {
        v6 = a1 + a5 - a1 * a4;
    }
    if (v6 < a1)
    {
        v7 = a4 * a1;
    }
    else
    {
        v7 = a3 - a1;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 10
10 18
11 18
12 14
13 14
14 14
15 14
16 20
17 20
18 20
19 20
20 20
21 20
22 21
<<<sep_out_sample>>>
mov %edx,%r11d
imul %edx,%r11d
mov %edx,%r10d
imul %r8d,%r10d
add %ecx,%r10d
cmp %r8d,%edx
jge 23 <func1+0x23>
lea (%rcx,%rdi,1),%r9d
add %edx,%r9d
imul %edx,%r9d
jmp 2f <func1+0x2f>
lea 0x1(%rsi),%r9d
imul %ecx,%r9d
imul %ecx,%r9d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
sub %r11d,%ecx
lea (%rcx,%r10,1),%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a4 - a4 - a3 * a3;
    v7 = a3 * a5 + a4;
    if (a3 < a5)
    {
        v8 = ((a4 + a1) + a3) * a3;
    }
    else
    {
        v8 = a4 * (a4 + a4 * a2);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 5
4 5
5 5
6 6
7 6
8 8
9 8
10 8
11 8
12 12
13 12
14 12
15 14
16 14
17 14
18 14
19 14
20 14
21 14
22 15
<<<sep_out_sample>>>
cmp %edx,%r8d
jle 1c <func1+0x1c>
mov %edx,%r10d
imul %edx,%r10d
mov %r8d,%r9d
imul %r8d,%r9d
imul %edx,%r9d
add %edi,%r9d
jmp 2c <func1+0x2c>
lea (%r8,%rdx,1),%r10d
lea (%rdi,%r8,1),%r9d
mov %esi,%eax
imul %edx,%eax
add %eax,%r9d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (a5 < a2)
        {
            v6 += a2 + a5 - a3;
        }
        else
        {
            v6 += (a5 * a5) - a5;
        }
    }
    if (a3 < a5)
    {
        v8 = a3 * a3;
    }
    else
    {
        v8 = a5 + a3;
    }
    if (a3 < a5)
    {
        v9 = (a3 * (a5 * a5)) + a1;
    }
    else
    {
        v9 = (a1 + a5) + a2 * a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 26
6 26
7 26
8 26
9 26
10 22
11 30
12 30
13 30
14 30
15 32
16 32
17 32
18 32
19 32
20 32
21 33
<<<sep_out_sample>>>
mov %edi,%r11d
imul %r8d,%r11d
imul %r8d,%r11d
imul %esi,%r11d
lea (%rcx,%r8,1),%r10d
test %ecx,%ecx
jle 25 <func1+0x25>
mov %edx,%r10d
imul %edx,%r10d
imul %ecx,%r10d
sub %edx,%r10d
lea (%rdx,%rsi,1),%r9d
cmp %edx,%ecx
jle 34 <func1+0x34>
lea (%r8,%rdi,2),%r9d
add %esi,%r9d
lea (%rcx,%rdx,1),%eax
test %edi,%edi
jg 41 <func1+0x41>
lea (%rcx,%rsi,2),%eax
add %r8d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r11d,%ecx
add %ecx,%r10d
add %r10d,%r9d
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a5 < a5)
    {
        v6 = a2 + a3;
    }
    else
    {
        v6 = (a1 * a5 * a5) * a2;
    }
    if (v7 < a4)
    {
        v7 = (a3 * a3 * a4) - a3;
    }
    else
    {
        v7 = a4 + a5;
    }
    if (a3 < a4)
    {
        v8 = ((a5 + a1) + a1) + a2;
    }
    else
    {
        v8 = a3 + a2;
    }
    if (v9 < a1)
    {
        v9 = a4 + a3;
    }
    else
    {
        v9 = (a2 + a4) + a2 + a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 18
6 12
7 12
8 14
9 14
10 14
11 14
12 26
13 20
14 20
15 22
16 22
17 30
18 28
19 28
20 34
21 34
22 36
23 36
24 36
25 36
26 36
27 36
28 36
29 36
30 37
<<<sep_out_sample>>>
mov %edi,%eax
sub %ecx,%eax
lea (%rdx,%rdi,1),%r10d
cmp %r8d,%edi
cmovl %eax,%r10d
mov $0x0,%eax
mov %edx,%r9d
imul %ecx,%r9d
test %ecx,%ecx
cmovg %r9d,%eax
mov %edx,%r9d
sub %esi,%r9d
cmp %edx,%eax
jge 38 <func1+0x38>
mov %ecx,%r9d
sub %edx,%r9d
imul %edi,%r9d
sub %ecx,%r9d
add %r9d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r10d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a1 < a5)
    {
        v6 = a1 - a4;
    }
    else
    {
        v6 = a3 + a1;
    }
    if (v7 < a4)
    {
        v7 = a3 * a4;
    }
    else
    {
        v7 = a5 - a5;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += a2 * a1;
    }
    if (v7 < a3)
    {
        v10 = ((a4 - a3) * a1) - a4;
    }
    else
    {
        v10 = a3 + a5 - a2 - a5;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 6
6 18
7 14
8 14
9 14
10 14
11 31
12 31
13 25
14 25
15 27
16 27
17 27
18 27
19 33
20 33
21 33
22 33
23 33
24 33
25 33
26 34
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%eax
lea (%rcx,%r8,2),%edx
imul %edx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += (a5 - a4) - a1;
    }
    v8 = (a4 + (a5 + a5)) * a5;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 9
6 9
7 10
8 11
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %edx,%r8d
lea 0x1(%rcx,%r8,1),%edx
sub %esi,%ecx
sub %edi,%ecx
lea (%rdx,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += (a3 + a3) + a3;
    }
    v8 = a4 - a2 - a1;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 9
6 9
7 10
8 11
<<<sep_out_sample>>>
mov %ecx,%eax
sub %r8d,%eax
mov %r8d,%r9d
sub %edi,%r9d
cmp %ecx,%esi
cmovge %r9d,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a2 < a4)
    {
        v6 = a4 - a5;
    }
    else
    {
        v6 = a5 - a1;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        if (a5 < a3)
        {
            v7 += a3 - a3 * a2;
        }
        else
        {
            v7 += a2 * a2;
        }
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        if (a2 < a3)
        {
            v9 += (a5 * a4) - a3;
        }
        else
        {
            v9 += a1 + a1 - a1;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 6
6 6
7 36
8 36
9 36
10 36
11 36
12 37
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %r8d,%edx
add %ecx,%edx
lea (%rcx,%r8,2),%eax
add %eax,%esi
lea 0x1(%rdx,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = (a5 + a5) + a4 + a2;
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += (a4 + a5) - a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 4
6 4
7 10
8 11
<<<sep_out_sample>>>
lea (%rdi,%r8,1),%eax
mov %r8d,%r10d
sub %esi,%r10d
cmp %ecx,%edx
cmovl %eax,%r10d
mov $0x0,%eax
cmp %esi,%r8d
jg 29 <func1+0x29>
mov %r8d,%r9d
imul %edi,%r9d
mov %ecx,%eax
sub %edi,%eax
imul %r9d,%eax
lea (%rsi,%rcx,1),%r9d
mov %edx,%r11d
imul %esi,%r11d
test %r8d,%r8d
cmovg %r11d,%r9d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r10d,%ecx
add %ecx,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a3 < a4)
    {
        v6 = a1 + a5;
    }
    else
    {
        v6 = a3 - a3 - a2 + a5;
    }
    v7 = (a5 - a5) * a1;
    if (a2 < a5)
    {
        v8 = ((a3 - a3) * a4) * a1;
    }
    else
    {
        v8 = a5 * a1 * (a4 - a1);
    }
    if (v7 < a5)
    {
        v9 = a3 * a2;
    }
    else
    {
        v9 = a2 + a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 6
6 15
7 13
8 13
9 19
10 19
11 19
12 19
13 19
14 27
15 23
16 23
17 23
18 23
19 29
20 29
21 29
22 29
23 29
24 29
25 29
26 30
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%r10d
cmp %r8d,%edx
jl 15 <func1+0x15>
lea (%rcx,%rcx,1),%eax
imul %ecx,%eax
mov %edx,%r10d
sub %eax,%r10d
mov %r8d,%r9d
sub %edx,%r9d
cmp %ecx,%r8d
jg 2e <func1+0x2e>
mov %edi,%r9d
sub %esi,%r9d
imul %edx,%r9d
imul %edi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a3 < a5)
    {
        v6 = a1 + a3;
    }
    else
    {
        v6 = a3 - (a4 + a4) * a4;
    }
    if (a4 < a5)
    {
        v7 = a3 - ((a3 + a3) - a5);
    }
    else
    {
        v7 = ((a1 - a2) * a3) * a1;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 4
3 4
4 10
5 10
6 10
7 10
8 14
9 14
10 12
11 12
12 18
13 18
14 18
15 18
16 20
17 20
18 20
19 20
20 20
21 20
22 21
<<<sep_out_sample>>>
add %ecx,%edi
test %ecx,%ecx
mov $0x0,%eax
cmovg %eax,%edi
mov %ecx,%eax
sub %r8d,%eax
lea 0x1(%rdx,%rax,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (a5 < a4)
        {
            v6 += (a1 * a2) + a1;
        }
        else
        {
            v6 += (a3 * a4) + a2;
        }
    }
    if (v8 < a4)
    {
        v8 = a4 - a4;
    }
    else
    {
        v8 = a1 + a4;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        v9 += a2 + a5 + a4;
    }
    v11 = a4 - a1 - a5;
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 22
4 22
5 29
6 29
7 30
8 30
9 30
10 30
11 30
12 31
<<<sep_out_sample>>>
lea (%r8,%rdi,1),%r9d
imul %esi,%r9d
add %edx,%r9d
cmp %ecx,%r8d
jle 18 <func1+0x18>
mov %ecx,%eax
imul %r8d,%eax
jmp 27 <func1+0x27>
mov %r8d,%r10d
imul %edx,%r10d
mov %r8d,%eax
sub %edi,%eax
add %r10d,%eax
lea (%rdi,%rdx,1),%r10d
add %esi,%r10d
add %r10d,%r8d
add %ecx,%r8d
add %r9d,%r8d
add %eax,%r8d
sub %esi,%r8d
sub %edi,%r8d
imul %edx,%edi
sub %ecx,%edi
sub %esi,%edi
lea (%r8,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = (a5 + a1) * a2 + a3;
    if (a4 < a5)
    {
        v7 = a4 * a5;
    }
    else
    {
        v7 = a5 * a3 - (a1 - a5);
    }
    v8 = a1 - ((a1 + a1) + a2);
    if (a3 < a3)
    {
        v9 = a5 - a4;
    }
    else
    {
        v9 = a1 * a3 - a4 - a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 5
5 5
6 7
7 7
8 7
9 11
10 11
11 11
12 11
13 11
14 22
15 22
16 22
17 22
18 22
19 22
20 13
21 22
22 20
23 20
24 20
25 22
26 23
<<<sep_out_sample>>>
lea (%rdi,%r8,1),%eax
mov %edi,%r9d
sub %ecx,%r9d
cmp $0x2,%esi
cmovl %r9d,%eax
mov %esi,%r9d
sub %r8d,%r9d
add %r9d,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a5 * a5 - a2;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += a4 + (a2 + a5);
    }
    if (v9 < a2)
    {
        v10 = a1 + a5;
    }
    else
    {
        v10 = a1 - a4;
    }
    v11 = a2 - a5;
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 16
4 16
5 16
6 22
7 22
8 23
9 23
10 23
11 23
12 23
13 23
14 24
<<<sep_out_sample>>>
lea (%rdi,%rdi,1),%eax
cmp %r8d,%esi
jge 10 <func1+0x10>
mov %edx,%eax
imul %edx,%eax
imul %edx,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a2 < a5)
    {
        v6 = (a3 * a3) * a3;
    }
    else
    {
        v6 = a1 + a1;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        if (a2 < a5)
        {
            v7 += (a4 * a3) - a5;
        }
        else
        {
            v7 += a2 - a3;
        }
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        if (v9 < a4)
        {
            v9 += a3 * a5 - a3;
        }
        else
        {
            v9 += a3 - a2 + a2;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 6
7 36
8 36
9 36
10 36
11 36
12 37
<<<sep_out_sample>>>
mov %esi,%eax
cmp %esi,%edx
jge c <func1+0xc>
imul %ecx,%eax
imul %ecx,%eax
add %edi,%eax
add %eax,%edx
add %edx,%esi
add %r8d,%esi
lea 0x2(%rcx,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (a4 < a3)
        {
            v6 += a5 - a2 - a4;
        }
        else
        {
            v6 += a5 - (a3 + a5);
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += a1 - a1 - a4;
    }
    if (a3 < a2)
    {
        v10 = a2 * a4 * a4;
    }
    else
    {
        v10 = a2 - a5 + a5;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 27
2 21
3 21
4 23
5 23
6 29
7 29
8 29
9 29
10 29
11 30
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea (%r8,%rcx,1),%esi
add %ecx,%edi
imul %edx,%ecx
lea (%rdi,%rcx,1),%edx
lea 0x1(%rsi,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a1 + a4 + a3 * a4;
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        if (a1 < a2)
        {
            v7 += (a3 * a5) - a5;
        }
        else
        {
            v7 += a2 * a4 * a3;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 4
6 4
7 4
8 17
9 18
<<<sep_out_sample>>>
cmp %esi,%ecx
jle f <func1+0xf>
mov %edx,%eax
sub %edi,%eax
add %edx,%eax
add %r8d,%eax
jmp 19 <func1+0x19>
mov %edi,%eax
imul %r8d,%eax
add %edx,%eax
sub %edi,%eax
add %edi,%edx
add %esi,%edx
add %edx,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
mov $0x1,%edx
sub %esi,%edx
imul %edx,%esi
add %esi,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += (a4 + a1) - a2;
    }
    if (a2 < a4)
    {
        v8 = ((a3 - a1) + a3) + a5;
    }
    else
    {
        v8 = (a3 + a1 * a5) - a1;
    }
    v9 = a2 - a2 * a2 + a4;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 11
8 15
9 15
10 15
11 15
12 18
13 18
14 18
15 18
16 18
17 17
18 17
19 17
20 17
21 18
22 19
<<<sep_out_sample>>>
cmp %edx,%r8d
jge e <func1+0xe>
mov %edx,%eax
sub %esi,%eax
lea (%rax,%rcx,2),%eax
jmp 14 <func1+0x14>
mov %edx,%eax
imul %r8d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (a4 < a4)
        {
            v6 += (a3 - a3) + a5;
        }
        else
        {
            v6 += a1 + a4 + a2;
        }
    }
    if (a5 < a3)
    {
        v8 = a3 - a2 + a4 + a4;
    }
    else
    {
        v8 = a3 * a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 18
7 22
8 22
9 24
10 24
11 24
12 24
13 24
14 25
<<<sep_out_sample>>>
cmp %edi,%ecx
jge d <func1+0xd>
mov %edi,%r10d
imul %esi,%r10d
jmp 14 <func1+0x14>
mov %edi,%r10d
imul %ecx,%r10d
cmp %esi,%ecx
jle 21 <func1+0x21>
mov %esi,%r9d
imul %edi,%r9d
jmp 28 <func1+0x28>
mov %edi,%r9d
imul %edi,%r9d
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
imul %esi,%edi
lea (%rdi,%rdx,2),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a4 < a1)
    {
        v6 = (a1 + a2 - a1) * a1;
    }
    else
    {
        v6 = a1 * a4;
    }
    if (a2 < a4)
    {
        v7 = a2 * a1;
    }
    else
    {
        v7 = a1 * a1;
    }
    v8 = a2 * a1 + (a3 + a3);
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        v9 += a1 + a3 - a1;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 12
9 12
10 14
11 14
12 14
13 18
14 18
15 26
16 26
17 26
18 26
19 26
20 26
21 20
22 20
23 26
24 27
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %r8d,%edx
add %ecx,%edx
mov %ecx,%eax
imul %r8d,%eax
add %eax,%edx
mov %ecx,%r9d
sub %esi,%r9d
add %r9d,%edx
sub %r8d,%esi
sub %ecx,%esi
sub %edi,%esi
lea (%rdx,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a4 * a5;
    v7 = a4 + a3 - a2 - a3;
    v8 = (a2 - a5) - a4 - a1;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 7
2 7
3 7
4 7
5 4
6 4
7 7
8 5
9 5
10 7
11 6
12 6
13 6
14 7
15 8
<<<sep_out_sample>>>
mov %esi,%eax
imul %edx,%eax
imul %r8d,%eax
mov %edi,%r10d
sub %eax,%r10d
test %r8d,%r8d
jle 24 <func1+0x24>
mov %ecx,%r9d
imul %ecx,%r9d
add %esi,%r9d
imul %edi,%r9d
jmp 2f <func1+0x2f>
lea 0x1(%rcx),%r9d
imul %edi,%r9d
add %r8d,%r9d
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
lea (%rsi,%rcx,2),%ecx
lea (%rcx,%rdx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a2 < a2)
    {
        v6 = a3 + a2;
    }
    else
    {
        v6 = a1 - (a2 * a3) * a5;
    }
    if (v7 < a5)
    {
        v7 = ((a4 * a4) + a2) * a1;
    }
    else
    {
        v7 = a5 + (a1 + a4 * a1);
    }
    v8 = a4 + a2 + a3 + a4;
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        v9 += a2 - a5;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 10
6 12
7 12
8 14
9 14
10 14
11 14
12 14
13 18
14 18
15 18
16 26
17 26
18 26
19 26
20 26
21 26
22 20
23 20
24 26
25 27
<<<sep_out_sample>>>
lea (%r8,%rsi,1),%eax
test %edx,%edx
jle e <func1+0xe>
lea (%rsi,%rcx,2),%eax
add %r8d,%eax
add %edi,%edx
add %esi,%edx
add %edx,%r8d
add %r8d,%ecx
add %ecx,%eax
add %edi,%esi
lea 0x1(%rax,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (v6 < a3)
    {
        v6 = a4 + a2 + a4 + a5;
    }
    else
    {
        v6 = a5 + a2;
    }
    v7 = a1 + a2;
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += a3 + a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 18
7 18
8 18
9 18
10 18
11 12
12 18
13 19
<<<sep_out_sample>>>
lea (%rdx,%r8,1),%r10d
cmp %esi,%ecx
jl 15 <func1+0x15>
mov %esi,%r10d
sub %edi,%r10d
imul %edx,%r10d
add %r8d,%r10d
mov $0x1,%r9d
sub %esi,%r9d
imul %edi,%r9d
imul %esi,%r9d
lea (%rsi,%r8,1),%eax
cmp %r8d,%ecx
jge 34 <func1+0x34>
lea (%rcx,%rdi,1),%eax
add %edx,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r10d,%ecx
lea 0x1(%r9,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a4 < a2)
    {
        v6 = ((a3 + a5) + a5) - a5;
    }
    else
    {
        v6 = a5 - ((a1 - a2) * a3);
    }
    v7 = a2 * (a1 - a1 * a2);
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += (a3 - a5) - a2;
    }
    if (a4 < a5)
    {
        v10 = (a4 + a1) + a3;
    }
    else
    {
        v10 = a2 + a5;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 4
3 4
4 10
5 10
6 10
7 10
8 12
9 12
10 12
11 12
12 24
13 18
14 18
15 20
16 20
17 26
18 26
19 26
20 26
21 26
22 26
23 26
24 27
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
lea 0x1(%rcx,%r8,1),%ecx
add %esi,%edi
imul %edx,%esi
sub %esi,%edi
lea (%rcx,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += (a2 + a1) + a5;
    }
    if (a5 < a5)
    {
        v8 = (a1 - a1 * a2) * a5;
    }
    else
    {
        v8 = a2 + a1 - a3 * a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 15
6 15
7 15
8 17
9 18
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %eax,%ecx
mov %r8d,%eax
imul %r8d,%eax
imul %eax,%edi
lea (%rcx,%rdi,1),%eax
lea -0x1(%rsi,%rsi,1),%edx
imul %edx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a1 * (a5 * a5);
    v7 = a5 * (a2 + a2) - a5;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 4
7 4
8 6
9 5
10 5
11 6
12 7
<<<sep_out_sample>>>
lea (%rcx,%rcx,1),%eax
mov %esi,%r9d
imul %edx,%r9d
imul %eax,%r9d
cmp %esi,%ecx
jl 1a <func1+0x1a>
mov %edx,%eax
sub %r8d,%eax
imul %edi,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = (a4 + a4) * (a2 * a3);
    if (a4 < a2)
    {
        v7 = (a4 - a2 + a2) + a4;
    }
    else
    {
        v7 = a1 * a3 - a5 * a1;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 5
6 5
7 11
8 11
9 11
10 13
11 13
12 13
13 13
14 13
15 13
16 14
<<<sep_out_sample>>>
mov %esi,%r9d
neg %r9d
imul %r8d,%r9d
mov %edi,%eax
neg %eax
cmp %ecx,%r8d
jle 1e <func1+0x1e>
mov %edi,%eax
imul %edi,%eax
imul %edi,%eax
add %r8d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = (a1 - a1 - a2) * a5;
    if (a4 < a5)
    {
        v7 = a5 + (a1 * (a1 * a1));
    }
    else
    {
        v7 = a4 - a1 - a4;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 11
5 11
6 5
7 5
8 7
9 7
10 7
11 7
12 13
13 13
14 13
15 13
16 13
17 13
18 14
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (a2 < a2)
        {
            v6 += a3 - a5 * a3;
        }
        else
        {
            v6 += a1 * (a3 - a3);
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        if (v6 < a5)
        {
            v8 += a4 * a3 - a3;
        }
        else
        {
            v8 += (a2 - a3) * a2;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 28
2 28
3 28
4 28
5 29
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (a3 < a4)
        {
            v6 += a3 * a3;
        }
        else
        {
            v6 += a5 - a4;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        if (a5 < a2)
        {
            v8 += a3 - a5 * a2;
        }
        else
        {
            v8 += a3 + a4 - a1;
        }
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a4)
    {
        v10 += a4 * a2 - a1;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 33
2 33
3 33
4 33
5 34
<<<sep_out_sample>>>
lea (%rdi,%rsi,1),%r9d
cmp %esi,%edi
jl 13 <func1+0x13>
mov %r8d,%r9d
imul %esi,%r9d
imul %edi,%r9d
lea (%rcx,%r8,1),%eax
lea (%rsi,%r8,1),%r10d
cmp %r8d,%r9d
cmovl %eax,%r10d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
lea (%r9,%r10,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a1 < a2)
    {
        v6 = a1 + a2;
    }
    else
    {
        v6 = a5 * a2 * a1;
    }
    if (v6 < a5)
    {
        v7 = a4 + a5;
    }
    else
    {
        v7 = a5 + a4 - a4 + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 4
3 4
4 10
5 10
6 10
7 14
8 14
9 14
10 14
11 20
12 20
13 20
14 20
15 20
16 20
17 21
<<<sep_out_sample>>>
mov %edi,%eax
imul %esi,%eax
add %r8d,%eax
lea (%rax,%rdi,4),%eax
add %eax,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a2 - a3;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += a2 * a4 + a5;
    }
    v10 = (a1 * a2 + a5) - a3;
    v11 = a3 + a1 + a1 + a1;
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 14
2 14
3 14
4 16
5 16
6 16
7 16
8 16
9 17
<<<sep_out_sample>>>
cmp %r8d,%edi
jle 12 <func1+0x12>
mov %r8d,%eax
imul %esi,%eax
imul %esi,%eax
add %edx,%eax
jmp 22 <func1+0x22>
mov %edx,%eax
imul %esi,%eax
mov %r8d,%r11d
sub %eax,%r11d
mov %r11d,%eax
add %edi,%eax
mov %r8d,%r9d
imul %r8d,%r9d
mov %ecx,%r10d
sub %r9d,%r10d
mov %r10d,%r9d
add %edx,%r9d
add %r9d,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%esi
add %esi,%eax
add %edi,%ecx
add %edx,%ecx
imul %ecx,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a2 * a1 + a1;
    }
    if (a5 < a1)
    {
        v8 = a3 + a5 * a2 * a2;
    }
    else
    {
        v8 = a5 - a3 * a2 + a1;
    }
    v9 = a3 * (a1 + a4 + a3);
    v10 = a4 - a1 - a5 * a5;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 11
8 15
9 15
10 15
11 15
12 15
13 15
14 18
15 18
16 19
17 19
18 19
19 19
20 19
21 19
22 19
23 19
24 17
25 17
26 17
27 19
28 20
<<<sep_out_sample>>>
push %rbx
lea (%rdx,%r8,1),%r10d
cmp %esi,%ecx
jge 17 <func1+0x17>
mov %r8d,%r10d
imul %ecx,%r10d
imul %edi,%r10d
add %ecx,%r10d
lea (%rdx,%rdi,1),%r9d
mov %ecx,%ebx
sub %r9d,%ebx
add %ecx,%ebx
cmp %edx,%ecx
jge 2e <func1+0x2e>
mov %ecx,%r11d
sub %edx,%r11d
jmp 3b <func1+0x3b>
mov %edx,%r11d
imul %edx,%r11d
sub %esi,%r11d
add %ecx,%r11d
cmp %edi,%r8d
jge 45 <func1+0x45>
add %r8d,%edi
jmp 4c <func1+0x4c>
sub %ecx,%edi
imul %ecx,%edx
sub %edx,%edi
lea (%rsi,%r9,1),%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %ebx,%eax
add %r11d,%eax
add %edi,%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a4 < a2)
    {
        v6 = (a5 * a4) * a1 + a4;
    }
    else
    {
        v6 = a3 + a5;
    }
    v7 = (a4 - (a3 + a1)) + a4;
    if (a4 < a3)
    {
        v8 = a4 - a3;
    }
    else
    {
        v8 = ((a3 * a3) - a2) + a4;
    }
    if (a5 < a1)
    {
        v9 = a1 + a5;
    }
    else
    {
        v9 = a1 - a4 - a4 * a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 10
3 4
4 4
5 6
6 6
7 6
8 6
9 12
10 12
11 12
12 12
13 13
14 13
15 15
16 15
17 15
18 19
19 19
20 19
21 19
22 21
23 21
24 23
25 23
26 27
27 27
28 27
29 29
30 29
31 29
32 29
33 29
34 29
35 29
36 30
37 30
<<<sep_out_sample>>>
mov %ecx,%eax
sub %r8d,%eax
add %edi,%eax
add %edx,%eax
add %esi,%eax
add %eax,%r8d
add %r8d,%ecx
add %esi,%edx
add %ecx,%edx
mov %esi,%eax
imul %esi,%eax
imul %eax,%esi
imul %esi,%edi
lea 0x1(%rdx,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a3 + a2;
    v7 = ((a2 * a2) * a2) * a1;
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        if (v6 < a3)
        {
            v8 += a5 * a5 - a1;
        }
        else
        {
            v8 += a5 + a5 * a3;
        }
    }
    v10 = a4 - a5;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 19
4 19
5 19
6 19
7 19
8 4
9 19
10 5
11 5
12 5
13 5
14 19
15 20
<<<sep_out_sample>>>
mov %edi,%eax
imul %r8d,%eax
imul %esi,%eax
mov %ecx,%r9d
sub %eax,%r9d
mov %r9d,%eax
add %edi,%eax
add %edx,%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
mov %ecx,%r10d
sub %r8d,%r10d
mov %r10d,%r8d
add %edx,%r8d
add %r8d,%edi
add %eax,%edi
add %esi,%ecx
sub %edx,%ecx
lea 0x1(%rdi,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = ((a4 - a5) + a3) + a1;
    v7 = (a2 + a4) - a3;
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        if (a5 < a5)
        {
            v8 += a4 - (a3 + a1);
        }
        else
        {
            v8 += a2 * (a3 - a3);
        }
    }
    v10 = a4 - (a1 * a5 * a2);
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 18
5 18
6 18
7 19
8 19
9 19
10 19
11 19
12 4
13 4
14 4
15 4
16 4
17 19
18 5
19 5
20 19
21 20
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%eax
imul %r8d,%r8d
imul %r8d,%ecx
imul %ecx,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a1 + (a3 - a3);
    }
    v8 = a5 * a5 * a4 * a3;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 9
6 9
7 9
8 10
9 11
<<<sep_out_sample>>>
lea (%r8,%rdx,2),%r9d
imul %ecx,%r9d
mov %ecx,%eax
sub %edi,%eax
cmp %r9d,%r8d
jg 22 <func1+0x22>
mov %r8d,%eax
imul %ecx,%eax
mov %edi,%r10d
sub %eax,%r10d
mov %r10d,%eax
add %esi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = (a5 + a3 + a3) * a4;
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        if (a5 < a5)
        {
            v7 += a1 * a1 * a5;
        }
        else
        {
            v7 += a2 * a2;
        }
    }
    if (v6 < a5)
    {
        v9 = a4 - a1;
    }
    else
    {
        v9 = a1 - (a5 * a4) + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 19
4 19
5 17
6 17
7 23
8 23
9 23
10 23
11 23
12 23
13 25
14 25
15 25
16 25
17 25
18 25
19 26
<<<sep_out_sample>>>
mov %r8d,%r9d
sub %edi,%r9d
imul %edi,%r9d
sub %ecx,%r9d
lea (%rdi,%rcx,1),%eax
cmp %esi,%r8d
jg 21 <func1+0x21>
mov %esi,%eax
imul %r8d,%eax
imul %edx,%eax
imul %edi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a1 * (a5 - a1) - a4;
    if (a2 < a5)
    {
        v7 = a1 + a4;
    }
    else
    {
        v7 = (a2 * a5 * a3) * a1;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += a2 - a3 * a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 7
6 5
7 5
8 11
9 11
10 11
11 11
12 18
13 18
14 18
15 18
16 18
17 18
18 19
<<<sep_out_sample>>>
cmp %edx,%edi
jge f <func1+0xf>
lea -0x1(%r8),%eax
imul %ecx,%eax
sub %edi,%eax
jmp 17 <func1+0x17>
mov %edi,%eax
neg %eax
imul %r8d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a1 < a3)
    {
        v6 = (a4 * a5) - a4 - a1;
    }
    else
    {
        v6 = a5 - a5 * a1 - a5;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        if (v7 < a2)
        {
            v7 += a5 - a3;
        }
        else
        {
            v7 += a3 - a1;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 24
11 24
12 24
13 24
14 24
15 25
<<<sep_out_sample>>>
lea 0x2(%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
add %esi,%ecx
lea (%r8,%rdx,1),%eax
imul %r8d,%edx
add %eax,%edx
lea 0x1(%rcx,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    if (a2 < a2)
    {
        v6 = a2 - (a3 + a4) + a5;
    }
    else
    {
        v6 = (a5 + a3) + a3 * a5;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += a1 - a2 * a2;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        if (v7 < a3)
        {
            v9 += a2 - a2 + a3;
        }
        else
        {
            v9 += a5 - (a5 + a2);
        }
    }
    v11 = 0;
    for (v12 = 0; v12++; v12<a2)
    {
        if (a5 < a1)
        {
            v11 += a2 * a5 * a5;
        }
        else
        {
            v11 += a1 + a3 + a4;
        }
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 41
2 41
3 41
4 41
5 10
6 10
7 10
8 41
9 42
<<<sep_out_sample>>>
mov %edi,%eax
sub %ecx,%eax
cmp %r8d,%esi
jl 18 <func1+0x18>
mov %esi,%eax
imul %edi,%eax
mov %edx,%r9d
imul %ecx,%r9d
sub %r9d,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a2 < a5)
    {
        v6 = a1 - a4;
    }
    else
    {
        v6 = (a2 * a1) - a3 * a4;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        if (v7 < a5)
        {
            v7 += a3 * a3;
        }
        else
        {
            v7 += a4 * a2 * a1;
        }
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        v9 += a5 - a2 - a3;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 6
3 4
4 4
5 10
6 10
7 10
8 10
9 10
10 29
11 29
12 29
13 29
14 29
15 30
<<<sep_out_sample>>>
lea (%rdi,%rdi,1),%eax
cmp %ecx,%esi
jge 15 <func1+0x15>
lea (%rdi,%rsi,1),%eax
mov %ecx,%r9d
sub %eax,%r9d
mov %r9d,%eax
sub %edi,%eax
add %edx,%edi
add %edi,%esi
add %r8d,%esi
add %esi,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a2 < a4)
    {
        v6 = a4 - (a1 + a2) - a1;
    }
    else
    {
        v6 = a1 + a1;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        if (v8 < a4)
        {
            v7 += (a3 - a5) + a1;
        }
        else
        {
            v7 += a3 + a1 - a3;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 6
7 6
8 6
9 24
10 24
11 24
12 24
13 24
14 25
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
add %esi,%ecx
mov %r8d,%eax
imul %edx,%eax
imul %eax,%edx
mov %edi,%eax
sub %edx,%eax
add %eax,%ecx
imul %r8d,%edi
lea 0x1(%rcx,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = a1 - ((a5 * a3) * a3);
    v7 = a1 * a5;
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        if (v8 < a5)
        {
            v8 += (a2 + a5) + a1;
        }
        else
        {
            v8 += a5 * a1 - a5;
        }
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a2)
    {
        v10 += a2 + a4 - a5;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 23
2 23
3 23
4 23
5 4
6 4
7 4
8 4
9 4
10 23
11 5
12 23
13 24
<<<sep_out_sample>>>
lea (%rdi,%rsi,1),%eax
cmp %edx,%r8d
jge 12 <func1+0x12>
lea (%rdx,%r8,1),%eax
imul %ecx,%eax
imul %esi,%eax
lea (%rdi,%rdx,1),%r9d
add %esi,%r9d
add %r9d,%r8d
add %ecx,%r8d
add %r8d,%eax
add %ecx,%edx
sub %esi,%edx
add %edx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a5 < a3)
    {
        v6 = a4 * (a3 + a5) * a2;
    }
    else
    {
        v6 = a1 + a2;
    }
    if (a3 < a3)
    {
        v7 = a5 * a4 * (a2 - a2);
    }
    else
    {
        v7 = a1 + ((a4 + a3) - a2);
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 6
7 20
8 20
9 20
10 20
11 20
12 18
13 18
14 18
15 20
16 21
<<<sep_out_sample>>>
lea (%rdi,%rsi,1),%r10d
cmp %ecx,%r8d
jl 10 <func1+0x10>
lea (%rsi,%rsi,1),%r10d
sub %r8d,%r10d
cmp %esi,%r8d
jge 1e <func1+0x1e>
mov %r8d,%r9d
imul %r8d,%r9d
jmp 2c <func1+0x2c>
mov %ecx,%r9d
imul %ecx,%r9d
imul %r8d,%r9d
add %ecx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a5 < a4)
    {
        v6 = a1 + a2;
    }
    else
    {
        v6 = a2 + a2 - a5;
    }
    if (a5 < a2)
    {
        v7 = a5 * a5;
    }
    else
    {
        v7 = a4 + (a4 * a4 * a5);
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 4
3 4
4 10
5 10
6 12
7 12
8 14
9 14
10 14
11 18
12 18
13 18
14 18
15 20
16 20
17 20
18 20
19 20
20 20
21 21
<<<sep_out_sample>>>
lea (%rcx,%rsi,1),%eax
cmp %ecx,%edx
jge 13 <func1+0x13>
mov %esi,%eax
imul %r8d,%eax
imul %edi,%eax
add %r8d,%eax
test %r8d,%r8d
jle 27 <func1+0x27>
mov %r8d,%r9d
sub %ecx,%r9d
sub %esi,%r9d
imul %edi,%r9d
jmp 35 <func1+0x35>
mov %esi,%r9d
imul %edi,%r9d
imul %edx,%r9d
sub %ecx,%r9d
mov %ecx,%r10d
imul %r8d,%r10d
imul %edi,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%eax
lea 0x1(%r9,%rax,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a3 < a4)
    {
        v6 = a5 + a1 * (a2 * a5);
    }
    else
    {
        v6 = a4 + a2;
    }
    if (v7 < a5)
    {
        v7 = a1 * (a5 - a4 - a2);
    }
    else
    {
        v7 = a2 * a1 * a3 - a4;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        if (a1 < a4)
        {
            v8 += a2 - a4 + a5;
        }
        else
        {
            v8 += a2 + a2 - a3;
        }
    }
    v10 = a1 * (a4 * a5);
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 6
7 6
8 12
9 12
10 14
11 14
12 14
13 14
14 14
15 18
16 18
17 18
18 18
19 32
20 32
21 32
22 33
23 33
24 33
25 33
26 33
27 33
28 33
29 34
<<<sep_out_sample>>>
test %esi,%esi
jle e <func1+0xe>
lea (%rcx,%rdi,1),%eax
imul %esi,%eax
add %edi,%eax
jmp 16 <func1+0x16>
mov %edi,%eax
imul %edx,%eax
lea (%rax,%rdx,2),%eax
lea 0x1(%rax,%rdi,1),%eax
add %eax,%edx
add %edx,%esi
add %r8d,%esi
lea 0x2(%rcx,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (a3 < a4)
        {
            v6 += a3 * a5 - a4;
        }
        else
        {
            v6 += a3 + a4;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += a3 - (a3 + a2);
    }
    if (v8 < a2)
    {
        v10 = a1 + (a4 + a1) * a2;
    }
    else
    {
        v10 = a3 + a3 + a1 * a3;
    }
    v11 = 0;
    for (v12 = 0; v12++; v12<a5)
    {
        v11 += a2 + a4 - a4;
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 23
4 23
5 23
6 23
7 27
8 27
9 27
10 34
11 34
12 34
13 34
14 34
15 35
<<<sep_out_sample>>>
add %edi,%edx
add %edx,%esi
add %r8d,%esi
add %esi,%ecx
imul %edi,%edi
imul %edi,%r8d
lea 0x1(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a1 * a1 * a5;
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a3 * (a3 + a2);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 4
6 4
7 10
8 11
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
lea 0x1(%rcx,%rax,1),%eax
imul %r8d,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (a5 < a4)
        {
            v6 += a1 + a4;
        }
        else
        {
            v6 += a1 - a4;
        }
    }
    v8 = a2 * a5;
    v9 = 0;
    for (v10 = 0; v10++; v10<a1)
    {
        if (v9 < a3)
        {
            v9 += a4 + (a1 - a3);
        }
        else
        {
            v9 += a1 * a3;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 29
2 29
3 29
4 29
5 16
6 29
7 30
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
lea (%r8,%rcx,1),%eax
lea 0x1(%rsi),%r9d
imul %edx,%r9d
sub %esi,%r9d
lea (%rax,%r9,1),%ecx
mov %edi,%eax
sub %esi,%eax
add %eax,%edi
sub %edx,%edi
lea 0x1(%rcx,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a5 < a5)
    {
        v6 = a5 - a3 - a2 - a2;
    }
    else
    {
        v6 = a3 + a2 * a3 - a2;
    }
    v7 = (a1 - a2 + a1) - a3;
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += a4 + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 18
5 10
6 10
7 10
8 18
9 12
10 12
11 12
12 12
13 18
14 19
<<<sep_out_sample>>>
test %r8d,%r8d
jle 12 <func1+0x12>
lea -0x1(%r8),%r10d
imul %ecx,%r10d
add %r8d,%r10d
jmp 1d <func1+0x1d>
lea 0x1(%r8),%r10d
imul %edx,%r10d
add %esi,%r10d
cmp %r8d,%edi
jge 2b <func1+0x2b>
mov %edx,%r9d
imul %edx,%r9d
jmp 3f <func1+0x3f>
mov %edx,%r11d
imul %r8d,%r11d
mov $0x1,%r9d
sub %r11d,%r9d
imul %edx,%r9d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a1 * a2;
    }
    if (v8 < a5)
    {
        v8 = a5 + (a5 * a4 - a4);
    }
    else
    {
        v8 = (a3 * a5 + a3) + a2;
    }
    if (a1 < a5)
    {
        v9 = a3 * a3;
    }
    else
    {
        v9 = a3 - a3 * a5 * a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 15
8 15
9 15
10 17
11 17
12 19
13 19
14 19
15 23
16 23
17 23
18 23
19 23
20 25
21 25
22 25
23 25
24 25
25 25
26 26
<<<sep_out_sample>>>
cmp %edx,%edi
jge 12 <func1+0x12>
lea (%rcx,%r8,1),%r9d
mov %ecx,%eax
imul %ecx,%eax
add %eax,%r9d
jmp 19 <func1+0x19>
mov %ecx,%r9d
imul %esi,%r9d
mov %esi,%eax
sub %ecx,%eax
cmp %esi,%edi
jle 27 <func1+0x27>
lea (%rsi,%rdx,2),%eax
add %r8d,%eax
lea 0x1(%rax,%rdi,1),%eax
add %eax,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    if (a1 < a3)
    {
        v6 = a4 + a5 + a4 * a4;
    }
    else
    {
        v6 = a4 * a2;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        if (a1 < a4)
        {
            v7 += a2 - (a3 * a2);
        }
        else
        {
            v7 += a3 - (a3 * a3);
        }
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        if (a5 < a2)
        {
            v9 += a5 + (a2 + a2);
        }
        else
        {
            v9 += a5 * a2 - a5;
        }
    }
    if (a2 < a1)
    {
        v11 = a3 + a2 + a3 + a5;
    }
    else
    {
        v11 = a2 - a4;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 42
11 42
12 36
13 36
14 38
15 38
16 44
17 44
18 44
19 44
20 44
21 44
22 45
<<<sep_out_sample>>>
test %esi,%esi
jle c <func1+0xc>
mov %r8d,%eax
imul %edi,%eax
jmp 1a <func1+0x1a>
lea (%rdx,%r8,1),%eax
mov %ecx,%r9d
imul %ecx,%r9d
sub %r9d,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a2 * a4 * a3;
    }
    if (v8 < a2)
    {
        v8 = a5 * a1;
    }
    else
    {
        v8 = a3 + a5 - a4 * a4;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        if (v10 < a2)
        {
            v9 += a4 - a5;
        }
        else
        {
            v9 += (a5 * a1) - a1;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 15
7 15
8 15
9 15
10 29
11 29
12 29
13 29
14 29
15 30
<<<sep_out_sample>>>
mov %r8d,%r9d
imul %edi,%r9d
imul %edi,%r9d
imul %esi,%r9d
test %esi,%esi
jle 1c <func1+0x1c>
mov %r8d,%eax
imul %r8d,%eax
jmp 2d <func1+0x2d>
mov %esi,%eax
imul %esi,%eax
imul %esi,%eax
mov %edx,%r11d
sub %eax,%r11d
mov %r11d,%eax
lea (%rsi,%rsi,1),%r10d
cmp %ecx,%r9d
cmovl %edi,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = (a5 * a1) * a1 * a2;
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        if (a4 < a4)
        {
            v7 += a4 + a5;
        }
        else
        {
            v7 += a2 * a5;
        }
    }
    if (v7 < a2)
    {
        v9 = a5 * a5;
    }
    else
    {
        v9 = a3 - (a2 * a2 * a2);
    }
    if (v6 < a4)
    {
        v10 = a4 - a4 + a1;
    }
    else
    {
        v10 = a2 + a2;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 17
6 17
7 19
8 19
9 19
10 23
11 23
12 23
13 23
14 23
15 23
16 31
17 31
18 31
19 33
20 33
21 33
22 33
23 33
24 33
25 33
26 34
<<<sep_out_sample>>>
mov %r8d,%r9d
sub %edx,%r9d
test %r8d,%r8d
jle 16 <func1+0x16>
lea (%rsi,%r8,1),%eax
add %ecx,%eax
imul %edi,%eax
jmp 25 <func1+0x25>
lea (%rcx,%rdx,1),%eax
mov %edi,%r10d
sub %eax,%r10d
mov %r10d,%eax
add %r8d,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = a2 - a2 + (a5 - a3);
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        if (v7 < a5)
        {
            v7 += a5 - a2 + a4;
        }
        else
        {
            v7 += a3 - a2 - a4;
        }
    }
    if (v7 < a5)
    {
        v9 = (a2 + a5 + a4) * a1;
    }
    else
    {
        v9 = a1 - (a4 + a3) + a5;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a5)
    {
        v10 += (a4 + a3) - a1;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 17
4 17
5 19
6 19
7 19
8 19
9 23
10 23
11 23
12 23
13 23
14 30
15 30
16 30
17 30
18 30
19 30
20 31
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %r8d,%edx
add %edx,%ecx
sub %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a5 - a2;
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        if (v7 < a5)
        {
            v7 += a1 * a4 - a5;
        }
        else
        {
            v7 += a1 + a5;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 4
6 17
7 18
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
add %esi,%ecx
imul %r8d,%edi
lea 0x1(%rcx,%rdi,1),%eax
imul %edx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a5 * a1;
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a3 * a2 + a5;
    }
    v9 = a3 * a5;
    v10 = a4 - a4;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 12
2 12
3 12
4 12
5 4
6 12
7 10
8 12
9 13
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
add %ecx,%esi
add %r8d,%edx
add %edx,%edi
lea 0x1(%rsi,%rdi,1),%eax
imul %ecx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = a3 + a5 + a1;
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        if (a5 < a2)
        {
            v7 += a5 + a3 * a5;
        }
        else
        {
            v7 += a1 + a2;
        }
    }
    v9 = a5 * a4;
    v10 = 0;
    for (v11 = 0; v11++; v11<a1)
    {
        v10 += a1 - a5;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 23
2 23
3 23
4 23
5 4
6 4
7 23
8 17
9 23
10 24
<<<sep_out_sample>>>
lea (%rsi,%rdi,1),%r9d
cmp %edx,%esi
mov $0x0,%eax
cmovge %eax,%r9d
lea (%rsi,%r8,1),%r11d
cmp %edi,%r9d
jl 23 <func1+0x23>
mov %r8d,%r11d
imul %edi,%r11d
imul %edi,%r11d
lea (%rsi,%rdx,1),%r10d
test %edi,%edi
jg 35 <func1+0x35>
mov %edi,%r10d
imul %ecx,%r10d
add %edx,%r10d
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
add %r11d,%eax
add %r10d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a2 < a3)
    {
        v6 = a2 + a1;
    }
    else
    {
        v6 = a5 - a5;
    }
    if (v6 < a1)
    {
        v7 = a2 + a5;
    }
    else
    {
        v7 = (a5 * a1) * a1;
    }
    if (v8 < a1)
    {
        v8 = a2 + a3 + a4 - a4;
    }
    else
    {
        v8 = a3 + (a1 * a4);
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        if (a4 < a3)
        {
            v9 += a3 - a3 * a2;
        }
        else
        {
            v9 += a4 - a2 * a1;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 14
6 12
7 12
8 18
9 18
10 18
11 22
12 20
13 20
14 26
15 26
16 26
17 40
18 40
19 40
20 40
21 40
22 40
23 40
24 41
<<<sep_out_sample>>>
mov %edx,%r9d
imul %r8d,%r9d
imul %edi,%r9d
imul %esi,%r9d
mov %edi,%eax
sub %ecx,%eax
cmp %ecx,%edi
jge 22 <func1+0x22>
mov %r8d,%eax
imul %ecx,%eax
add %edi,%eax
imul %edx,%eax
lea 0x1(%rdi,%rdx,1),%edi
add %esi,%edi
add %edi,%r8d
add %r8d,%ecx
add %r9d,%ecx
add %ecx,%eax
sub %esi,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = ((a3 * a5) * a1) * a2;
    if (a1 < a4)
    {
        v7 = (a5 * a4 + a1) * a3;
    }
    else
    {
        v7 = a1 - a4 - a2 + a2;
    }
    v8 = a3 - a2;
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        v9 += a2 * a2 * a4;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 11
6 11
7 5
8 5
9 7
10 7
11 7
12 7
13 19
14 19
15 19
16 19
17 19
18 19
19 13
20 19
21 20
<<<sep_out_sample>>>
mov %edi,%r9d
imul %ecx,%r9d
lea (%rdx,%rdx,1),%eax
cmp %edx,%edi
jle 18 <func1+0x18>
mov %r8d,%eax
sub %edi,%eax
imul %edi,%eax
add %ecx,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a1 * a4;
    if (a3 < a1)
    {
        v7 = a4 + (a1 * (a5 - a1));
    }
    else
    {
        v7 = a3 + a3;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 11
4 5
5 5
6 7
7 7
8 7
9 7
10 13
11 13
12 13
13 13
14 13
15 13
16 14
<<<sep_out_sample>>>
test %r8d,%r8d
jle 16 <func1+0x16>
mov %edx,%r9d
sub %ecx,%r9d
mov %edx,%eax
imul %esi,%eax
imul %r9d,%eax
jmp 1c <func1+0x1c>
lea (%rsi,%r8,2),%eax
add %edx,%eax
lea 0x1(%rdi,%rdx,1),%r9d
add %r9d,%esi
add %r8d,%esi
add %ecx,%esi
lea 0x1(%rax,%rsi,1),%esi
imul %ecx,%r8d
add %r8d,%edi
sub %edx,%edi
lea (%rsi,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    if (v6 < a5)
    {
        v6 = (a3 - a4) * (a3 * a2);
    }
    else
    {
        v6 = a5 + a5 + a2 + a3;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        if (a3 < a2)
        {
            v7 += a1 + a1 - a4;
        }
        else
        {
            v7 += a4 - a2 + a5;
        }
    }
    v9 = a4 * a5 + a1 - a3;
    v10 = 0;
    for (v11 = 0; v11++; v11<a1)
    {
        v10 += a5 - a5 + a5;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 6
9 10
10 10
11 30
12 30
13 30
14 30
15 30
16 24
17 24
18 24
19 30
20 31
<<<sep_out_sample>>>
cmp %edi,%r8d
jge 14 <func1+0x14>
mov $0x1,%r9d
sub %ecx,%r9d
imul %edi,%r9d
jmp 22 <func1+0x22>
mov %edx,%r9d
sub %esi,%r9d
mov %esi,%eax
imul %ecx,%eax
add %eax,%r9d
test %esi,%esi
jle 37 <func1+0x37>
mov %esi,%r10d
imul %ecx,%r10d
imul %r8d,%r10d
imul %r8d,%r10d
jmp 43 <func1+0x43>
lea -0x1(%rsi),%r10d
imul %esi,%r10d
imul %esi,%r10d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %r9d,%eax
add %r10d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += (a2 + a3) + a4;
    }
    if (a5 < a1)
    {
        v8 = a1 - a4 * a1;
    }
    else
    {
        v8 = a3 - a2 + (a2 * a4);
    }
    if (v6 < a2)
    {
        v9 = a5 * ((a2 * a4) * a5);
    }
    else
    {
        v9 = a2 * (a2 * a2 - a2);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 15
8 15
9 15
10 15
11 15
12 17
13 17
14 19
15 19
16 19
17 19
18 19
19 23
20 23
21 23
22 25
23 25
24 25
25 25
26 25
27 25
28 26
<<<sep_out_sample>>>
cmp %esi,%edx
jge d <func1+0xd>
mov %esi,%eax
sub %edx,%eax
imul %edx,%eax
jmp 19 <func1+0x19>
lea (%rcx,%r8,1),%r9d
mov %edi,%eax
imul %ecx,%eax
add %r9d,%eax
lea (%r8,%rcx,1),%r9d
cmp %edi,%eax
jge 2e <func1+0x2e>
imul %edi,%r9d
mov %esi,%r10d
sub %r9d,%r10d
mov %r10d,%r9d
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %r8d,%esi
add %esi,%ecx
add %ecx,%eax
add %eax,%r9d
lea (%r9,%r8,2),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a3 < a2)
    {
        v6 = a3 * (a2 - a3);
    }
    else
    {
        v6 = (a4 + a5) + (a1 * a4);
    }
    if (v6 < a1)
    {
        v7 = a2 - (a4 + a5) * a1;
    }
    else
    {
        v7 = a5 + a4;
    }
    v8 = a5 + a5;
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        if (v10 < a1)
        {
            v9 += a4 - a3 - a2;
        }
        else
        {
            v9 += (a3 - a2) * a3;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 10
11 18
12 12
13 12
14 14
15 14
16 14
17 14
18 33
19 33
20 33
21 33
22 33
23 33
24 33
25 34
<<<sep_out_sample>>>
lea (%rdi,%rcx,1),%eax
cmp %r8d,%esi
jge 12 <func1+0x12>
mov %edx,%eax
imul %ecx,%eax
add %r8d,%eax
add %edi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a2 < a5)
    {
        v6 = (a5 + a3 * a4) + a1;
    }
    else
    {
        v6 = a4 - (a3 - a1) + a3;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += a5 * a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 6
7 6
8 17
9 17
10 17
11 17
12 17
13 18
<<<sep_out_sample>>>
mov %r8d,%eax
sub %edx,%eax
cmp %edx,%ecx
jge 10 <func1+0x10>
mov %r8d,%eax
neg %eax
sub %edi,%eax
add %edi,%edx
add %edx,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%edx
add %edx,%eax
sub %ecx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (a4 < a5)
        {
            v6 += a2 + a4;
        }
        else
        {
            v6 += a1 - (a1 + a1);
        }
    }
    if (a4 < a3)
    {
        v8 = a3 - a5 - a3 - a1;
    }
    else
    {
        v8 = a5 - a3;
    }
    v9 = a5 - a4;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 16
4 16
5 18
6 18
7 18
8 25
9 25
10 25
11 25
12 25
13 24
14 25
15 26
<<<sep_out_sample>>>
mov %esi,%r10d
imul %edx,%r10d
test %ecx,%ecx
jle 14 <func1+0x14>
mov %edx,%r9d
imul %edx,%r9d
jmp 20 <func1+0x20>
mov %ecx,%r9d
sub %r8d,%r9d
add %esi,%r9d
add %edx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
imul %esi,%ecx
add $0x1,%ecx
imul %ecx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a2 * a3;
    if (v7 < a4)
    {
        v7 = a3 * a3;
    }
    else
    {
        v7 = (a4 - a5 + a2) + a3;
    }
    v8 = a1 * (a2 * a4) + a1;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 5
4 5
5 7
6 7
7 7
8 11
9 11
10 11
11 11
12 14
13 14
14 14
15 14
16 14
17 14
18 13
19 13
20 13
21 14
22 15
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
imul %esi,%r8d
imul %r8d,%edx
imul %edx,%esi
add %esi,%eax
sub %edi,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = (a5 * a2 * a3) * a2;
    v7 = a4 - a1;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 4
7 4
8 6
9 5
10 6
11 7
<<<sep_out_sample>>>
cmp %esi,%ecx
jge 11 <func1+0x11>
mov %esi,%eax
imul %esi,%eax
imul %edx,%eax
imul %edi,%eax
jmp 19 <func1+0x19>
mov %esi,%eax
sub %ecx,%eax
add %edx,%eax
sub %ecx,%eax
add %edx,%edi
add %esi,%edi
add %edi,%r8d
add %r8d,%ecx
add %ecx,%eax
imul %edx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a4 < a2)
    {
        v6 = a1 * ((a2 * a2) * a3);
    }
    else
    {
        v6 = (a2 - a4) + a3 - a4;
    }
    v7 = (a2 * a3 - a3) + a3;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 13
13 13
14 13
15 13
16 13
17 12
18 13
19 14
<<<sep_out_sample>>>
push %rbx
lea (%r8,%rdx,1),%eax
mov %eax,%r11d
imul %esi,%r11d
sub %edi,%r11d
lea 0x1(%rdx),%r10d
imul %ecx,%r10d
lea (%rcx,%rdi,1),%r9d
mov %edx,%ebx
sub %r9d,%ebx
mov %ebx,%r9d
add %r8d,%r9d
test %esi,%esi
jle 33 <func1+0x33>
mov %edi,%ebx
sub %eax,%ebx
add %r8d,%ebx
jmp 3b <func1+0x3b>
lea -0x1(%rsi),%ebx
imul %edi,%ebx
add %esi,%ebx
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea (%rcx,%r11,1),%eax
add %r10d,%eax
add %r9d,%eax
add %ebx,%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a2 < a2)
    {
        v6 = a4 + a2;
    }
    else
    {
        v6 = (a5 + a3) * a2 - a1;
    }
    v7 = a4 + a3 * a4;
    v8 = a5 - (a4 + a1 - a3);
    if (v9 < a2)
    {
        v9 = a5 + (a1 - (a3 + a5));
    }
    else
    {
        v9 = (a2 * a1 - a1) + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 10
3 10
4 10
5 10
6 12
7 12
8 13
9 13
10 13
11 13
12 13
13 14
14 14
15 16
16 16
17 16
18 16
19 20
20 20
21 20
22 22
23 22
24 22
25 22
26 22
27 22
28 22
29 22
30 23
31 23
<<<sep_out_sample>>>
lea -0x1(%rsi),%r10d
imul %edx,%r10d
mov %r10d,%r9d
sub %r8d,%r9d
add %edx,%r10d
lea (%rdi,%rsi,1),%eax
cmp %r9d,%r8d
cmovle %eax,%r10d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
lea (%r9,%r10,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a3 * a2 - a3 - a5;
    if (v6 < a5)
    {
        v7 = a3 * a2;
    }
    else
    {
        v7 = a1 + (a2 + a4) - a4;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 7
6 7
7 7
8 7
9 13
10 13
11 13
12 13
13 13
14 13
15 14
<<<sep_out_sample>>>
add %edx,%edi
add %esi,%edi
add %edi,%r8d
lea (%r8,%rcx,1),%edi
add %ecx,%esi
add %esi,%edx
lea 0x1(%rdi,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a1 < a1)
    {
        v6 = ((a4 - a4) + a3) - a5;
    }
    else
    {
        v6 = (a4 + a2) + a3;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        if (a2 < a4)
        {
            v7 += (a2 * a4) - a1;
        }
        else
        {
            v7 += (a1 * a5) + a2;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 24
2 24
3 24
4 24
5 10
6 10
7 24
8 25
<<<sep_out_sample>>>
push %rbx
mov %ecx,%r11d
imul %esi,%r11d
sub $0x1,%r11d
imul %esi,%r11d
lea (%rdi,%rsi,2),%r10d
sub %edx,%r10d
cmp %edi,%esi
jle 24 <func1+0x24>
mov %r8d,%r9d
imul %esi,%r9d
jmp 30 <func1+0x30>
lea (%rdx,%rdx,1),%r9d
mov %esi,%ebx
imul %esi,%ebx
sub %ebx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a4 * a2 * a2 - a2;
    v7 = (a2 + a1 + a2) - a3;
    if (a1 < a2)
    {
        v8 = a4 - a4 + a5 * a2;
    }
    else
    {
        v8 = a3 + a3 - (a2 * a2);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 2
2 4
3 4
4 4
5 4
6 5
7 5
8 6
9 6
10 8
11 8
12 8
13 12
14 12
15 12
16 12
17 14
18 14
19 14
20 14
21 14
22 14
23 14
24 15
25 15
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %eax,%ecx
lea (%rsi,%rsi,1),%eax
imul %eax,%r8d
sub %esi,%r8d
lea (%rcx,%r8,1),%eax
imul %edx,%esi
add %edx,%edx
imul %esi,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a4 < a4)
    {
        v6 = a2 + (a1 - a1);
    }
    else
    {
        v6 = a5 * (a2 + a2) - a2;
    }
    v7 = a3 * a2 * (a3 + a3);
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 13
2 13
3 13
4 13
5 10
6 10
7 10
8 13
9 12
10 12
11 12
12 13
13 14
<<<sep_out_sample>>>
lea (%rsi,%r8,1),%r9d
mov %edx,%eax
sub %ecx,%eax
cmp %ecx,%edx
jge 1d <func1+0x1d>
mov %edx,%eax
imul %edx,%eax
imul %edi,%eax
mov %edx,%r10d
sub %eax,%r10d
mov %r10d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a2 + a5;
    if (a3 < a4)
    {
        v7 = a3 - (a3 * a3 * a1);
    }
    else
    {
        v7 = a3 - a4;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 11
3 11
4 5
5 5
6 7
7 7
8 7
9 7
10 7
11 7
12 13
13 13
14 13
15 13
16 13
17 13
18 14
<<<sep_out_sample>>>
mov %r8d,%r10d
imul %edx,%r10d
add %edi,%r10d
add %edx,%r10d
lea (%rdx,%rdi,1),%r9d
add %r9d,%edx
add %esi,%edx
add %esi,%edi
cmp %ecx,%edx
jl 21 <func1+0x21>
mov %ecx,%edi
imul %ecx,%edi
add %r9d,%esi
add %esi,%r8d
add %r8d,%ecx
add %r10d,%ecx
add %ecx,%edx
lea (%rdx,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a3 + (a5 * a3 + a1);
    if (a4 < a4)
    {
        v7 = a3 - a3 - a4 - a4;
    }
    else
    {
        v7 = a3 + (a3 + a1) + a2;
    }
    if (v7 < a4)
    {
        v8 = a1 + a2;
    }
    else
    {
        v8 = (a3 - a3 + a4) * a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 11
6 11
7 11
8 15
9 13
10 13
11 19
12 19
13 21
14 21
15 21
16 21
17 21
18 21
19 22
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea (%r8,%rcx,1),%esi
lea (%rdi,%rcx,2),%eax
lea (%rax,%rdx,1),%eax
lea 0x1(%rsi,%rax,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a4 + ((a4 + a1) + a3);
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a3 + a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 4
6 4
7 10
8 11
<<<sep_out_sample>>>
add %edx,%edi
add %esi,%edi
add %r8d,%edi
lea 0x1(%rcx,%rdi,1),%ecx
lea (%rdx,%rsi,2),%eax
lea (%rax,%r8,1),%eax
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = (a1 - a1) * a1 * a1;
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        if (a3 < a2)
        {
            v7 += (a1 + a1) * a2;
        }
        else
        {
            v7 += (a5 - a3) - a4;
        }
    }
    v9 = (a3 + a2) + a5 + a2;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 18
5 17
6 17
7 18
8 19
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (a4 < a4)
        {
            v6 += a3 - a3 - a2;
        }
        else
        {
            v6 += (a4 + a3) - a3;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += a2 * a4 + a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 21
5 22
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a1 + a2 * a3;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += a3 + a2;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a3)
    {
        if (a3 < a5)
        {
            v10 += a3 * a4 * a2;
        }
        else
        {
            v10 += (a5 + a5) - a3;
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 26
2 26
3 26
4 26
5 27
<<<sep_out_sample>>>
lea (%rcx,%rsi,1),%eax
add %edx,%eax
cmp %r8d,%edx
jge 11 <func1+0x11>
lea (%rdi,%rdx,2),%eax
lea (%rax,%r8,1),%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a3 < a5)
    {
        v6 = (a3 + a1 + a5) + a3;
    }
    else
    {
        v6 = (a4 + a2) + a3;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        if (a1 < a5)
        {
            v7 += a3 + a5 - a1;
        }
        else
        {
            v7 += a3 + (a5 * a3);
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 4
4 4
5 6
6 6
7 24
8 24
9 24
10 24
11 24
12 25
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += (a4 * a5) + a1;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        if (a2 < a1)
        {
            v8 += a4 + (a5 * a5);
        }
        else
        {
            v8 += a2 * a2 + a2;
        }
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a5)
    {
        if (v11 < a2)
        {
            v10 += a1 - a1 * a5;
        }
        else
        {
            v10 += a5 + a1 * a3;
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 33
2 33
3 33
4 33
5 34
<<<sep_out_sample>>>
mov %edx,%r9d
sub %ecx,%r9d
cmp %edx,%r8d
jge 1a <func1+0x1a>
mov %ecx,%r9d
imul %esi,%r9d
imul %edx,%r9d
imul %r8d,%r9d
lea (%rcx,%rdx,1),%eax
add %r8d,%eax
cmp $0x1,%edx
jle 34 <func1+0x34>
mov %edi,%r10d
sub %r8d,%r10d
imul %ecx,%r10d
add %esi,%r10d
jmp 3d <func1+0x3d>
lea 0x1(%rdi,%r8,1),%r10d
imul %r8d,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a5 < a3)
    {
        v6 = a4 * a2 * a3 * a5;
    }
    else
    {
        v6 = a3 + a5 - a4 - a5;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += a5 - a2 + a4;
    }
    v9 = a4 + a3 + a5;
    if (v8 < a3)
    {
        v10 = a2 - (a5 - a1) * a4;
    }
    else
    {
        v10 = a5 + (a5 + a1) * a5;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 4
4 4
5 6
6 6
7 6
8 6
9 17
10 17
11 18
12 18
13 20
14 20
15 20
16 20
17 20
18 24
19 24
20 26
21 26
22 26
23 26
24 26
25 26
26 26
27 27
<<<sep_out_sample>>>
cmp $0x1,%ecx
jle 10 <func1+0x10>
mov %edx,%eax
imul %edx,%eax
add %edi,%eax
sub %ecx,%eax
jmp 19 <func1+0x19>
lea (%rdi,%rdx,1),%eax
imul %r8d,%eax
sub %esi,%eax
lea (%rsi,%rsi,1),%r10d
imul %ecx,%r10d
imul %esi,%r10d
lea (%rdi,%rsi,1),%r9d
mov %ecx,%r11d
imul %ecx,%r11d
test %edi,%edi
cmovg %r11d,%r9d
add %r9d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
add %r10d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a3 + (a1 - a2);
    }
    if (v7 < a4)
    {
        v8 = (a3 * a3) + a1 - a4;
    }
    else
    {
        v8 = (a1 + a3) * a5 - a2;
    }
    v9 = a2 * (a4 * (a2 + a2));
    if (v10 < a1)
    {
        v10 = a5 + a4 * a4 - a5;
    }
    else
    {
        v10 = a1 + a2;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 11
8 15
9 15
10 15
11 17
12 17
13 17
14 24
15 20
16 20
17 20
18 20
19 26
20 26
21 26
22 26
23 26
24 26
25 26
26 27
<<<sep_out_sample>>>
lea (%rdx,%rsi,2),%eax
sub %ecx,%eax
mov %esi,%r10d
imul %r8d,%r10d
mov %esi,%r9d
sub %edi,%r9d
cmp $0x1,%esi
jle 22 <func1+0x22>
lea (%r8,%rdi,1),%r9d
add %edx,%r9d
imul %r8d,%r9d
add %r9d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
add %r10d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a2 + (a3 + a2 - a4);
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += (a1 + a1) * a1;
    }
    v9 = ((a2 * a5) + a1) - a1;
    if (v8 < a2)
    {
        v10 = a5 * (a5 + a1 + a3);
    }
    else
    {
        v10 = a2 - a1;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 10
4 10
5 17
6 17
7 11
8 11
9 13
10 13
11 13
12 19
13 19
14 19
15 19
16 19
17 19
18 19
19 20
<<<sep_out_sample>>>
mov %edx,%eax
sub %edi,%eax
mov %r8d,%r9d
sub %edx,%r9d
test %r8d,%r8d
cmovle %r9d,%eax
lea 0x2(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (a2 < a3)
        {
            v6 += (a2 * a4) * a1;
        }
        else
        {
            v6 += a1 * a1;
        }
    }
    if (v8 < a5)
    {
        v8 = a3 - a1;
    }
    else
    {
        v8 = a5 + ((a4 - a3) - a4);
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        v9 += a4 * a1 - a4;
    }
    v11 = 0;
    for (v12 = 0; v12++; v12<a5)
    {
        v11 += a2 + (a1 * a1);
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 18
5 18
6 18
7 34
8 34
9 34
10 34
11 34
12 35
<<<sep_out_sample>>>
test %ecx,%ecx
jle 10 <func1+0x10>
lea (%rdi,%r8,1),%r9d
sub %esi,%r9d
sub %ecx,%r9d
jmp 17 <func1+0x17>
mov %edx,%r9d
imul %edi,%r9d
mov $0x0,%eax
mov %ecx,%r10d
sub %edx,%r10d
cmp %edx,%r9d
cmovl %r10d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (v6 < a4)
    {
        v6 = (a1 + a5 - a2) - a4;
    }
    else
    {
        v6 = a3 * a1;
    }
    if (v6 < a3)
    {
        v7 = (a4 + a1 - a3) - a1;
    }
    else
    {
        v7 = a5 + a3 - a5 - a3;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 18
10 14
11 14
12 14
13 14
14 20
15 20
16 20
17 20
18 20
19 20
20 21
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (v7 < a3)
        {
            v6 += a3 + a1 - a4;
        }
        else
        {
            v6 += a4 + a1;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        if (a4 < a1)
        {
            v8 += (a5 * a1) * a2;
        }
        else
        {
            v8 += (a1 * a1) + a1;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 28
2 28
3 28
4 28
5 29
<<<sep_out_sample>>>
lea (%rdx,%r8,1),%r9d
mov %r9d,%eax
sub %ecx,%eax
cmp %r8d,%ecx
mov %r9d,%r10d
mov %eax,%r9d
mov %r10d,%eax
cmovge %r9d,%eax
add %edi,%edx
add %edx,%esi
add %r8d,%esi
add %esi,%ecx
add %ecx,%eax
add %edi,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a4 < a5)
    {
        v6 = a5 + a3;
    }
    else
    {
        v6 = (a3 + a5) - a4;
    }
    if (a2 < a2)
    {
        v7 = a4 + (a5 + a2) * a2;
    }
    else
    {
        v7 = a5 + a1;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 4
5 6
6 6
7 6
8 6
9 20
10 20
11 20
12 20
13 20
14 18
15 20
16 21
<<<sep_out_sample>>>
mov %ecx,%r10d
sub %r8d,%r10d
cmp %esi,%r8d
jge 19 <func1+0x19>
mov %ecx,%r10d
imul %r8d,%r10d
imul %r8d,%r10d
add %ecx,%r10d
mov %r8d,%r9d
imul %esi,%r9d
lea (%rdx,%r8,1),%r11d
cmp %edi,%esi
jg 33 <func1+0x33>
mov %edi,%eax
imul %ecx,%eax
mov %r9d,%r11d
sub %eax,%r11d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r10d
add %r10d,%r9d
lea (%r9,%r11,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a5 < a2)
    {
        v6 = ((a4 * a5) * a5) + a4;
    }
    else
    {
        v6 = a4 - a5;
    }
    v7 = (a5 * a2 + a1) - a1;
    if (a1 < a2)
    {
        v8 = a3 + a5;
    }
    else
    {
        v8 = (a5 * a2) - a1 * a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 4
4 4
5 6
6 6
7 6
8 6
9 12
10 12
11 15
12 13
13 13
14 19
15 19
16 19
17 19
18 21
19 21
20 21
21 21
22 21
23 21
24 21
25 22
<<<sep_out_sample>>>
cmp %r8d,%edi
jge 15 <func1+0x15>
mov %edi,%r10d
sub %ecx,%r10d
sub $0x1,%r10d
imul %r8d,%r10d
jmp 21 <func1+0x21>
mov %r8d,%r10d
sub %ecx,%r10d
add %edx,%r10d
sub %ecx,%r10d
cmp %esi,%r8d
jle 33 <func1+0x33>
mov %r8d,%r9d
imul %ecx,%r9d
imul %r9d,%r9d
jmp 43 <func1+0x43>
mov %edx,%r9d
sub %r8d,%r9d
mov %r8d,%r11d
imul %edi,%r11d
sub %r11d,%r9d
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
add %ecx,%r8d
add %r10d,%r8d
add %r9d,%r8d
sub %ecx,%edi
sub %ecx,%edi
sub %edx,%edi
lea (%r8,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a1 < a5)
    {
        v6 = ((a1 - a4) * a5) - a5;
    }
    else
    {
        v6 = a5 - a4 + a3 - a4;
    }
    if (a2 < a5)
    {
        v7 = (a5 * a4 * a5) * a4;
    }
    else
    {
        v7 = a3 - a5 - (a5 * a1);
    }
    v8 = (a1 - a4) - a4 - a3;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 12
13 12
14 14
15 14
16 14
17 14
18 18
19 18
20 18
21 18
22 18
23 21
24 21
25 21
26 21
27 21
28 21
29 20
30 20
31 20
32 21
33 22
<<<sep_out_sample>>>
mov %r8d,%r11d
sub %esi,%r11d
sub %edx,%r11d
add %ecx,%r11d
lea (%rdi,%r8,2),%r10d
cmp %edx,%r8d
jle 24 <func1+0x24>
lea (%rcx,%rcx,1),%eax
mov %edi,%r9d
sub %eax,%r9d
imul %r8d,%r9d
jmp 34 <func1+0x34>
mov $0x1,%r9d
sub %esi,%r9d
imul %r8d,%r9d
add %esi,%r9d
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a4 - (a2 - a5 + a3);
    v7 = a5 + (a5 + a1);
    if (a3 < a5)
    {
        v8 = (a1 - (a4 + a4)) * a5;
    }
    else
    {
        v8 = (a5 - a2 * a5) + a2;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        if (v6 < a4)
        {
            v9 += a2 * a3 * a5;
        }
        else
        {
            v9 += a1 - a5 - a3;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 5
6 6
7 6
8 8
9 8
10 8
11 8
12 8
13 12
14 12
15 12
16 12
17 26
18 26
19 26
20 26
21 26
22 26
23 26
24 27
<<<sep_out_sample>>>
cmp %esi,%edi
jle 15 <func1+0x15>
mov %edx,%eax
imul %edx,%eax
mov %r8d,%r9d
imul %edi,%r9d
sub %r9d,%eax
jmp 1f <func1+0x1f>
mov %r8d,%eax
imul %esi,%eax
sub %ecx,%eax
add %esi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (a3 < a4)
        {
            v6 += a1 + a5;
        }
        else
        {
            v6 += a3 * a1 + a2;
        }
    }
    if (a2 < a1)
    {
        v8 = a3 * a3 - a5 * a1;
    }
    else
    {
        v8 = a2 + ((a5 * a2) - a4);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 18
7 18
8 18
9 22
10 22
11 22
12 22
13 24
14 24
15 24
16 24
17 24
18 25
<<<sep_out_sample>>>
mov %ecx,%r9d
imul %edi,%r9d
imul %ecx,%r9d
add %edx,%r9d
test %r8d,%r8d
jle 1e <func1+0x1e>
mov %esi,%eax
imul %ecx,%eax
add %edi,%eax
sub %ecx,%eax
jmp 23 <func1+0x23>
mov %ecx,%eax
imul %ecx,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = (a4 * a1) * a4 + a3;
    if (v7 < a5)
    {
        v7 = a2 * a4 + a1 - a4;
    }
    else
    {
        v7 = a3 + (a4 * a4 - a3);
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 5
6 5
7 7
8 7
9 7
10 7
11 7
12 11
13 11
14 13
15 13
16 13
17 13
18 13
19 13
20 14
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a1 + a3 + a4;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        if (v9 < a1)
        {
            v8 += (a1 * a1) * a3;
        }
        else
        {
            v8 += (a4 * a1) + a3;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 21
5 22
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %edx,%r8d
lea 0x1(%rcx,%r8,1),%eax
imul %ecx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (v6 < a2)
        {
            v6 += a5 + a5 - a2;
        }
        else
        {
            v6 += a2 + (a2 * a5);
        }
    }
    v8 = a4 * a2;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 16
6 17
7 18
<<<sep_out_sample>>>
test %esi,%esi
jle 15 <func1+0x15>
mov %ecx,%r9d
imul %edi,%r9d
add $0x1,%r9d
imul %esi,%r9d
jmp 1c <func1+0x1c>
mov %edi,%r9d
imul %edx,%r9d
test %esi,%esi
jle 2f <func1+0x2f>
mov $0x2,%r10d
sub %esi,%r10d
imul %edx,%r10d
jmp 3c <func1+0x3c>
mov %r8d,%r10d
sub %edx,%r10d
sub %ecx,%r10d
imul %edx,%r10d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %r9d,%eax
add %r10d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a2 + (a5 * a3);
    }
    if (v8 < a2)
    {
        v8 = a2 + (a2 * (a4 * a1));
    }
    else
    {
        v8 = a1 * a3;
    }
    if (v9 < a2)
    {
        v9 = (a3 - a2 * a3) + a3;
    }
    else
    {
        v9 = a3 * (a5 - a3 - a4);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 11
8 15
9 15
10 17
11 17
12 19
13 19
14 19
15 19
16 23
17 23
18 23
19 23
20 25
21 25
22 25
23 25
24 25
25 25
26 26
<<<sep_out_sample>>>
lea 0x1(%rcx),%r10d
imul %ecx,%r10d
add %r8d,%r10d
mov %edi,%r9d
sub %esi,%r9d
lea (%r9,%rdi,1),%eax
lea (%rdi,%rdi,1),%r11d
cmp %edi,%edx
cmovl %r11d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r10d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a4 + a4 * a4 + a5;
    if (a3 < a1)
    {
        v7 = a1 + a1;
    }
    else
    {
        v7 = a1 + (a1 - a2);
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 11
5 11
6 11
7 7
8 7
9 7
10 13
11 13
12 13
13 13
14 13
15 13
16 14
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %r8d,%edx
lea 0x1(%rcx,%rdx,1),%eax
sub %ecx,%r8d
imul %r8d,%esi
imul %esi,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a5 + a4;
    }
    v8 = ((a5 - a4) * a2) * a4;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 9
6 9
7 9
8 10
9 11
<<<sep_out_sample>>>
lea (%rsi,%rcx,1),%eax
cmp %edx,%r8d
jge d <func1+0xd>
add %edx,%eax
add %r8d,%eax
lea (%rdi,%rdx,1),%r10d
add %esi,%r10d
add %r8d,%r10d
add %ecx,%r10d
add %eax,%r10d
mov %r8d,%r9d
sub %esi,%r9d
mov %esi,%r11d
imul %esi,%r11d
sub %r11d,%r9d
lea (%r10,%r9,1),%eax
add %edx,%esi
add %esi,%eax
add %ecx,%r8d
sub %edi,%ecx
add %r8d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a5 < a3)
    {
        v6 = a4 + a2 + a3 + a5;
    }
    else
    {
        v6 = a2 + a4;
    }
    v7 = a5 - a2 - a2 * a2;
    v8 = a2 + a3;
    if (a4 < a4)
    {
        v9 = ((a1 - a3) - a5) * a4;
    }
    else
    {
        v9 = a4 + a5 - (a1 - a4);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 22
7 22
8 22
9 22
10 22
11 12
12 12
13 12
14 12
15 12
16 22
17 13
18 22
19 20
20 20
21 20
22 22
23 23
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a3 - a3;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        if (v7 < a3)
        {
            v8 += a5 - a1 + a4;
        }
        else
        {
            v8 += (a5 + a1) + a2;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 21
5 22
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
add %esi,%ecx
lea (%r8,%rdi,2),%eax
add %eax,%r8d
lea 0x1(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = ((a1 + a5) + a1) + a5;
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += (a3 - a3) - a4;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        v9 += a3 - a3;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 15
2 15
3 15
4 15
5 4
6 4
7 15
8 16
<<<sep_out_sample>>>
test %edx,%edx
jle 11 <func1+0x11>
mov %esi,%eax
imul %esi,%eax
sub %ecx,%eax
imul %r8d,%eax
jmp 18 <func1+0x18>
mov %r8d,%eax
sub %esi,%eax
sub %edx,%eax
lea 0x1(%rax,%rdi,1),%eax
add %eax,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (v7 < a2)
        {
            v6 += (a1 * a1) + a5;
        }
        else
        {
            v6 += a4 * a2 - a3;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += a2 - a1 + a3;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a4)
    {
        if (a1 < a1)
        {
            v10 += a2 - a2 * a2;
        }
        else
        {
            v10 += a3 + a5 - a1;
        }
    }
    if (v8 < a3)
    {
        v12 = (a2 * a2 - a4) * a5;
    }
    else
    {
        v12 = a5 - a2 - a3;
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 33
2 33
3 35
4 35
5 35
6 35
7 35
8 39
9 39
10 39
11 41
12 41
13 41
14 41
15 41
16 42
<<<sep_out_sample>>>
mov %esi,%eax
sub %r8d,%eax
lea (%r8,%rcx,1),%r10d
cmp %edx,%ecx
cmovl %eax,%r10d
cmp %r8d,%esi
jge 1a <func1+0x1a>
mov %ecx,%eax
sub %edx,%eax
jmp 23 <func1+0x23>
mov %edx,%eax
imul %ecx,%eax
add %edi,%eax
sub %edx,%eax
mov %esi,%r9d
neg %r9d
cmp %r8d,%eax
jge 39 <func1+0x39>
lea (%rcx,%rdi,1),%r9d
sub %r8d,%r9d
imul %edi,%r9d
add %edi,%edx
add %edx,%esi
add %r8d,%esi
add %ecx,%esi
add %r10d,%esi
add %esi,%eax
add %r9d,%eax
imul %ecx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a4 < a3)
    {
        v6 = a2 - a5;
    }
    else
    {
        v6 = a5 + a4;
    }
    if (a2 < a5)
    {
        v7 = ((a4 - a2) - a3) + a2;
    }
    else
    {
        v7 = a1 + a3 * a4 - a3;
    }
    if (v7 < a5)
    {
        v8 = (a4 + a1 - a5) * a1;
    }
    else
    {
        v8 = a4 - a4 - a2;
    }
    v9 = a5 * a4;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 6
6 12
7 12
8 14
9 14
10 14
11 18
12 18
13 18
14 18
15 26
16 26
17 20
18 20
19 22
20 22
21 22
22 29
23 29
24 29
25 29
26 29
27 29
28 29
29 28
30 29
31 30
<<<sep_out_sample>>>
cmp $0x1,%edx
jle 10 <func1+0x10>
mov %edi,%eax
imul %esi,%eax
add %ecx,%eax
sub %esi,%eax
jmp 19 <func1+0x19>
lea (%rsi,%rsi,1),%eax
imul %esi,%eax
add %r8d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a2 + (a5 + a1);
    }
    if (v7 < a3)
    {
        v8 = a1 * a2 + a4 - a2;
    }
    else
    {
        v8 = (a2 * (a2 + a2)) + a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 11
8 15
9 15
10 15
11 17
12 17
13 17
14 17
15 17
16 18
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%r9d
add %esi,%r9d
add %r8d,%r9d
add %ecx,%r9d
mov %esi,%eax
sub %edx,%eax
mov %edi,%r10d
imul %edi,%r10d
sub %r10d,%eax
add %r9d,%eax
mov %edi,%r11d
sub %edx,%r11d
add %r11d,%eax
imul %r8d,%ecx
imul %esi,%edi
add %edi,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a2 < a2)
    {
        v6 = (a3 + a3 * a2) * a5;
    }
    else
    {
        v6 = a2 - a3 - a1 * a1;
    }
    if (a1 < a1)
    {
        v7 = a3 + (a1 - a1 * a3);
    }
    else
    {
        v7 = a1 - a3;
    }
    v8 = (a4 * a5) + a1 * a2;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 21
5 10
6 10
7 10
8 10
9 10
10 21
11 18
12 18
13 21
14 20
15 20
16 20
17 21
18 22
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
add %r8d,%ecx
add %edi,%edi
sub %edi,%ecx
lea 0x1(%rcx),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = (a2 - a2) - a1 - a1;
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += a1 * a3 - a3;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        if (v8 < a4)
        {
            v9 += a1 * (a2 * a2);
        }
        else
        {
            v9 += a3 - a2;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 22
4 22
5 4
6 22
7 22
8 23
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea (%r8,%rcx,1),%esi
lea 0x1(%rsi,%rcx,2),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a4 + a4;
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        if (a4 < a5)
        {
            v7 += a2 * a2 * a2;
        }
        else
        {
            v7 += a2 - a1 + a4;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 17
6 18
<<<sep_out_sample>>>
mov %edx,%r9d
sub %ecx,%r9d
imul %ecx,%r9d
add %esi,%r9d
cmp %edi,%esi
jge 18 <func1+0x18>
mov %edi,%eax
imul %esi,%eax
jmp 1e <func1+0x1e>
mov %edx,%eax
sub %edi,%eax
add %ecx,%eax
cmp %edi,%esi
jle 30 <func1+0x30>
mov %esi,%r10d
sub %ecx,%r10d
sub %r8d,%r10d
add %esi,%r10d
jmp 3d <func1+0x3d>
mov %edx,%r10d
sub %edi,%r10d
imul %ecx,%r10d
add %edx,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a4 * (a3 - a4) + a2;
    if (a2 < a1)
    {
        v7 = a1 * a2;
    }
    else
    {
        v7 = a3 - a1 + a4;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += a1 + a5;
    }
    if (a1 < a2)
    {
        v10 = ((a2 - a4) - a5) + a2;
    }
    else
    {
        v10 = a3 - a4 * (a1 - a3);
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 5
6 5
7 7
8 7
9 7
10 11
11 11
12 11
13 18
14 18
15 20
16 20
17 20
18 20
19 20
20 24
21 24
22 24
23 24
24 26
25 26
26 26
27 26
28 26
29 26
30 26
31 27
<<<sep_out_sample>>>
lea (%r8,%rdi,1),%r9d
cmp %edi,%r8d
jle 13 <func1+0x13>
mov %r8d,%eax
sub %esi,%eax
add %r8d,%eax
jmp 18 <func1+0x18>
mov %esi,%eax
imul %edx,%eax
mov %ecx,%r10d
imul %edx,%r10d
imul %edi,%r10d
imul %edx,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
sub %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a4 - (a5 + a1) - a4;
    if (a1 < a5)
    {
        v7 = a5 - a2 + a5;
    }
    else
    {
        v7 = a2 * a3;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += a2 + (a2 + a2);
    }
    v10 = (a4 * a3 * a1) * a3;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 5
3 5
4 7
5 7
6 7
7 7
8 11
9 11
10 18
11 18
12 18
13 18
14 19
15 19
16 19
17 19
18 19
19 19
20 19
21 20
<<<sep_out_sample>>>
lea (%rdx,%rsi,1),%r9d
sub %edi,%r9d
sub %r8d,%r9d
cmp %edi,%edx
jge 18 <func1+0x18>
lea (%rsi,%rdi,1),%eax
add %ecx,%eax
sub %r8d,%eax
jmp 21 <func1+0x21>
mov %r8d,%eax
sub %edi,%eax
imul %r8d,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    if (a5 < a5)
    {
        v6 = a5 * a2 * a1 + a5;
    }
    else
    {
        v6 = (a3 + a2 - a1) - a5;
    }
    if (a3 < a1)
    {
        v7 = ((a2 + a1) + a4) - a5;
    }
    else
    {
        v7 = a5 * a5 - a1 * a5;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += (a3 * a4) * a2;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a4)
    {
        v10 += (a4 + a1) * a4;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 12
5 12
6 14
7 14
8 14
9 14
10 18
11 18
12 18
13 30
14 30
15 30
16 30
17 30
18 30
19 31
<<<sep_out_sample>>>
mov %ecx,%eax
neg %eax
cmp %edi,%ecx
jl 12 <func1+0x12>
mov $0x1,%eax
sub %ecx,%eax
imul %esi,%eax
lea 0x1(%rdi,%rdx,1),%edi
add %esi,%edi
add %edi,%r8d
add %ecx,%r8d
lea 0x1(%rax,%r8,1),%eax
sub %esi,%ecx
imul %ecx,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    if (a4 < a1)
    {
        v6 = a5 - a5 - a4;
    }
    else
    {
        v6 = a2 - (a4 * a2);
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += (a1 + a4) * a5;
    }
    v9 = (a4 - a2) * a3;
    v10 = 0;
    for (v11 = 0; v11++; v11<a2)
    {
        if (a1 < a1)
        {
            v10 += a2 * a2 * a1;
        }
        else
        {
            v10 += (a5 - a1) - a2;
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 6
3 4
4 4
5 10
6 10
7 10
8 30
9 30
10 30
11 30
12 30
13 17
14 17
15 30
16 31
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %eax,%ecx
mov %edx,%eax
imul %r8d,%eax
imul %r8d,%eax
add %ecx,%eax
add %edx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a3 * a5 * a5;
    v7 = a3 + a5;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 4
7 4
8 6
9 5
10 6
11 7
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x1(%rdx),%eax
imul %edi,%eax
lea (%r8,%rax,1),%esi
mov %edi,%eax
sub %ecx,%eax
sub %edx,%eax
add %eax,%edi
lea (%rsi,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a3 * a1 + a1 - a4;
    if (a2 < a2)
    {
        v7 = (a5 + a4 - a2) - a3;
    }
    else
    {
        v7 = a1 - a4 - a3 + a1;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 13
2 13
3 13
4 4
5 4
6 13
7 11
8 11
9 11
10 11
11 13
12 14
<<<sep_out_sample>>>
cmp %ecx,%r8d
jle e <func1+0xe>
mov %edx,%eax
imul %esi,%eax
neg %eax
jmp 19 <func1+0x19>
mov %edx,%eax
imul %edi,%eax
imul %r8d,%eax
sub %edi,%eax
mov %edx,%r9d
sub %r8d,%r9d
mov %r9d,%r10d
imul %edi,%r10d
add %edx,%r10d
add %edi,%r9d
mov %ecx,%r11d
sub %esi,%r11d
cmp %edi,%esi
cmovle %r11d,%r9d
add %r9d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
add %r10d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += (a5 + a4) * a3;
    }
    if (a4 < a5)
    {
        v8 = a3 - a3 - (a3 * a2);
    }
    else
    {
        v8 = a3 * a1 * a5 - a1;
    }
    if (a4 < a4)
    {
        v9 = (a3 - a1) - a3 - a3;
    }
    else
    {
        v9 = a3 - (a5 - a3) * a1;
    }
    if (a1 < a2)
    {
        v10 = a3 - a5 + a1;
    }
    else
    {
        v10 = a4 - a2;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 15
8 15
9 15
10 15
11 23
12 23
13 23
14 23
15 23
16 27
17 27
18 27
19 27
20 27
21 33
22 33
23 33
24 33
25 33
26 33
27 33
28 34
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
test %ecx,%ecx
jle 12 <func1+0x12>
mov %edi,%eax
sub %ecx,%eax
sub $0x1,%eax
imul %r8d,%eax
lea (%r8,%rdi,1),%r9d
add %ecx,%r9d
add %r9d,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a5 - (a3 + a1);
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += (a4 + a5) * a3;
    }
    if (v10 < a4)
    {
        v10 = (a5 * (a1 - a4)) - a5;
    }
    else
    {
        v10 = a3 + a2 + (a1 - a2);
    }
    if (a1 < a1)
    {
        v11 = a3 + (a2 + a2);
    }
    else
    {
        v11 = a5 + a1 + a4;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 20
2 14
3 14
4 16
5 16
6 16
7 16
8 28
9 28
10 30
11 30
12 30
13 30
14 30
15 30
16 31
<<<sep_out_sample>>>
mov %edi,%eax
sub %ecx,%eax
test %edi,%edi
jle 11 <func1+0x11>
mov %edi,%eax
imul %ecx,%eax
add %esi,%eax
sub %ecx,%eax
cmp $0x1,%ecx
jle 22 <func1+0x22>
mov %edi,%r9d
imul %edi,%r9d
add %r8d,%r9d
jmp 33 <func1+0x33>
mov $0x1,%r9d
sub %r8d,%r9d
imul %edx,%r9d
imul %ecx,%r9d
add %r9d,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (v7 < a5)
        {
            v6 += a1 * a2 + a4;
        }
        else
        {
            v6 += a2 * a3 + a2;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        if (a5 < a2)
        {
            v8 += (a1 + a2) - a3;
        }
        else
        {
            v8 += a5 - a2;
        }
    }
    if (v8 < a1)
    {
        v10 = a2 + a1 * a4 - a4;
    }
    else
    {
        v10 = a1 - a4;
    }
    if (v9 < a4)
    {
        v11 = a1 * a1 + a5;
    }
    else
    {
        v11 = (a3 - a5 * a3) * a4;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 34
2 34
3 28
4 28
5 30
6 30
7 30
8 30
9 36
10 36
11 38
12 38
13 38
14 38
15 42
16 42
17 42
18 42
19 44
20 44
21 44
22 44
23 44
24 44
25 45
<<<sep_out_sample>>>
mov %ecx,%eax
imul %edx,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a1 - a2 - a1;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        if (a2 < a1)
        {
            v8 += (a1 + a5) * a3;
        }
        else
        {
            v8 += (a2 - a1) - a1;
        }
    }
    v10 = a4 * a3;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 22
4 22
5 22
6 22
7 22
8 23
<<<sep_out_sample>>>
mov %edx,%eax
sub %r8d,%eax
imul %r8d,%eax
lea (%rdi,%rdx,2),%r9d
lea (%r9,%rax,1),%eax
add %esi,%eax
add %r8d,%eax
add %eax,%ecx
lea (%rsi,%rsi,2),%eax
imul %eax,%r8d
lea 0x1(%rcx,%r8,1),%eax
add $0x1,%edx
imul %edx,%edi
add %edi,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a5 < a5)
    {
        v6 = (a1 + a2) * a5 + a2;
    }
    else
    {
        v6 = (a2 + a2 + a2) * a5;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        if (a3 < a3)
        {
            v7 += a5 + a1 * a1;
        }
        else
        {
            v7 += (a5 + a2) * a5;
        }
    }
    v9 = ((a1 * a3) + a1) + a2;
    v10 = a3 - (a5 - a3) * a5;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 25
2 25
3 25
4 26
5 26
6 26
7 26
8 26
9 10
10 10
11 26
12 24
13 24
14 24
15 26
16 27
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
sub %ecx,%edx
add $0x1,%edx
imul %edx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a2 + a2 - a2;
    }
    v8 = ((a3 - a4) * a1) + a1;
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        v9 += a1 * a2 + a1;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 15
2 15
3 15
4 15
5 9
6 9
7 9
8 15
9 16
<<<sep_out_sample>>>
cmp %edx,%edi
jge 12 <func1+0x12>
mov %esi,%eax
imul %ecx,%eax
lea (%rcx,%rcx,1),%r9d
sub %r9d,%eax
jmp 1d <func1+0x1d>
mov %ecx,%eax
imul %ecx,%eax
imul %esi,%eax
imul %edi,%eax
lea 0x1(%rdi,%rdx,1),%r9d
add %r9d,%esi
add %r8d,%esi
add %ecx,%esi
lea 0x1(%rax,%rsi,1),%eax
imul %ecx,%edi
sub %edx,%edi
add %edi,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    if (a1 < a3)
    {
        v6 = a2 * a4 - (a4 + a4);
    }
    else
    {
        v6 = (a4 * a4 * a2) * a1;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += (a3 - a1) * a5;
    }
    v9 = ((a1 * a4) - a3) + a4;
    v10 = 0;
    for (v11 = 0; v11++; v11<a3)
    {
        v10 += (a2 * a3) - a1;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 23
13 23
14 23
15 23
16 23
17 17
18 17
19 17
20 23
21 24
<<<sep_out_sample>>>
mov %r8d,%r10d
sub %edx,%r10d
cmp %r8d,%ecx
jge 11 <func1+0x11>
lea (%rdi,%rdi,1),%r9d
jmp 1c <func1+0x1c>
lea (%rdx,%rdx,1),%r9d
sub %esi,%r9d
imul %ecx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a4 + a5 - a3 - a4;
    if (a4 < a5)
    {
        v7 = a1 + a1;
    }
    else
    {
        v7 = (a3 + a3 - a2) * a4;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 5
4 5
5 7
6 7
7 11
8 11
9 11
10 13
11 13
12 13
13 13
14 13
15 13
16 14
<<<sep_out_sample>>>
cmp %ecx,%edx
jge 14 <func1+0x14>
mov $0x1,%eax
sub %r8d,%eax
imul %r8d,%eax
add %edi,%eax
jmp 1a <func1+0x1a>
mov %r8d,%eax
imul %esi,%eax
lea 0x1(%r8),%r9d
imul %esi,%r9d
add %r9d,%edi
add %edx,%edi
add %edi,%esi
add %r8d,%esi
add %esi,%ecx
add %eax,%ecx
imul %edx,%r8d
lea 0x1(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a3 < a4)
    {
        v6 = a5 - a5 * a5 + a1;
    }
    else
    {
        v6 = a5 * a2;
    }
    v7 = a3 * a5;
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += a5 - a2;
    }
    if (a2 < a2)
    {
        v10 = a4 + a4 - a4 - a2;
    }
    else
    {
        v10 = a2 + (a2 * a5);
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 24
11 24
12 26
13 26
14 26
15 26
16 26
17 26
18 12
19 26
20 27
<<<sep_out_sample>>>
mov %edx,%eax
imul %edi,%eax
lea (%rax,%r8,1),%r9d
sub %edx,%eax
sub %r8d,%eax
cmp %esi,%edi
jge 1a <func1+0x1a>
lea (%rsi,%r8,1),%eax
sub %ecx,%eax
add %edi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a5 + a3 * a1;
    if (a1 < a2)
    {
        v7 = a1 - (a4 - (a2 + a5));
    }
    else
    {
        v7 = (a3 * a1) - a3 - a5;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 11
5 11
6 5
7 5
8 7
9 7
10 7
11 13
12 13
13 13
14 13
15 13
16 13
17 14
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (a1 < a5)
        {
            v6 += a1 + a5 - a3;
        }
        else
        {
            v6 += a1 - a3 - a2;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += (a3 * a4) * a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 21
5 22
<<<sep_out_sample>>>
cmp %edi,%ecx
jge d <func1+0xd>
mov %ecx,%eax
sub %esi,%eax
imul %ecx,%eax
jmp 16 <func1+0x16>
mov %esi,%eax
sub %r8d,%eax
add %edx,%eax
sub %ecx,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = (a4 - a4 + a3) - a3;
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a5 * a4;
    }
    if (a4 < a1)
    {
        v9 = a4 * a4 - a2 * a4;
    }
    else
    {
        v9 = (a2 - a5 + a3) - a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 12
4 12
5 12
6 12
7 16
8 16
9 16
10 16
11 18
12 18
13 18
14 18
15 18
16 19
<<<sep_out_sample>>>
lea (%rdi,%rcx,1),%eax
lea (%rdx,%rdi,1),%r9d
cmp %r8d,%ecx
cmovl %eax,%r9d
mov %edi,%eax
sub %esi,%eax
cmp %edx,%edi
jge 1c <func1+0x1c>
lea (%rcx,%rdx,2),%eax
sub %r8d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a4 < a5)
    {
        v6 = ((a1 - a1) + a1) + a4;
    }
    else
    {
        v6 = a3 + (a1 + (a1 - a1));
    }
    if (a1 < a3)
    {
        v7 = a4 + (a3 - a5) + a3;
    }
    else
    {
        v7 = a1 - a2;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 18
6 18
7 12
8 12
9 14
10 14
11 20
12 20
13 20
14 20
15 20
16 20
17 21
<<<sep_out_sample>>>
cmp %edx,%edi
jge e <func1+0xe>
lea 0x1(%rdx),%r9d
imul %esi,%r9d
jmp 19 <func1+0x19>
lea (%rsi,%r8,1),%r9d
add %ecx,%r9d
imul %ecx,%r9d
mov %edx,%eax
cmp %r8d,%esi
jge 2a <func1+0x2a>
mov %r8d,%eax
imul %edx,%eax
add %esi,%eax
sub %edx,%eax
mov %esi,%r10d
imul %edi,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a1 < a3)
    {
        v6 = a2 + a3 * a2;
    }
    else
    {
        v6 = a4 * (a2 + a5 + a4);
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        if (v8 < a2)
        {
            v7 += a3 - a3 + a2;
        }
        else
        {
            v7 += (a5 * a5) - a5;
        }
    }
    if (a2 < a5)
    {
        v9 = a2 + a5 * a3 - a3;
    }
    else
    {
        v9 = a1 + (a3 - a1);
    }
    v10 = a2 * a1;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 30
10 24
11 24
12 26
13 26
14 26
15 26
16 32
17 32
18 33
19 33
20 33
21 33
22 33
23 33
24 33
25 34
<<<sep_out_sample>>>
lea (%rdi,%rcx,1),%r11d
imul %r8d,%r11d
lea (%r8,%rcx,1),%r10d
lea (%r8,%rdi,1),%r9d
test %ecx,%ecx
jg 23 <func1+0x23>
mov %ecx,%r9d
imul %esi,%r9d
imul %esi,%r9d
imul %edi,%r9d
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a5 * (a1 + a4);
    v7 = a5 + a4;
    if (v8 < a4)
    {
        v8 = a5 + a1;
    }
    else
    {
        v8 = (a4 * a2) * a2 * a1;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        if (v10 < a2)
        {
            v9 += a3 - a5;
        }
        else
        {
            v9 += a2 * a2 + a1;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 5
4 8
5 6
6 6
7 12
8 12
9 12
10 12
11 26
12 26
13 26
14 26
15 26
16 26
17 26
18 27
<<<sep_out_sample>>>
cmp %ecx,%edx
jge 10 <func1+0x10>
mov %ecx,%r10d
imul %edi,%r10d
neg %r10d
jmp 1a <func1+0x1a>
mov %ecx,%r10d
sub %r8d,%r10d
imul %r8d,%r10d
cmp %esi,%edx
jle 2d <func1+0x2d>
mov %edi,%r9d
sub %edx,%r9d
sub %ecx,%r9d
imul %ecx,%r9d
jmp 37 <func1+0x37>
mov %r8d,%r9d
imul %ecx,%r9d
add %edi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a3 < a4)
    {
        v6 = a3 - a4 * a1 - a3;
    }
    else
    {
        v6 = (a4 - a5) * a5;
    }
    if (a2 < a3)
    {
        v7 = ((a1 - a3) - a4) * a4;
    }
    else
    {
        v7 = a5 * a4 + a1;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 12
11 12
12 14
13 14
14 14
15 14
16 14
17 18
18 18
19 18
20 20
21 20
22 20
23 20
24 20
25 20
26 21
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
lea (%r8,%rcx,1),%eax
lea 0x1(%rdi),%r8d
imul %ecx,%r8d
add %r8d,%esi
add %eax,%esi
imul %edx,%edi
add %edi,%ecx
sub %edx,%ecx
lea (%rsi,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a4 * a1 + a4 + a2;
    v7 = a3 * a1 + a4 - a3;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 4
7 4
8 6
9 5
10 5
11 5
12 6
13 7
<<<sep_out_sample>>>
lea (%rsi,%r8,1),%r9d
cmp %edx,%r8d
jge 11 <func1+0x11>
mov %esi,%eax
sub %edx,%eax
lea (%rax,%rsi,2),%r9d
mov $0x0,%eax
cmp %ecx,%edi
jl 21 <func1+0x21>
mov %edi,%eax
neg %eax
imul %esi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%r9d
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a2 - (a5 + a5);
    }
    if (a5 < a3)
    {
        v8 = a2 - (a3 - a2) + a2;
    }
    else
    {
        v8 = a2 + a5;
    }
    if (a1 < a4)
    {
        v9 = a4 - a4;
    }
    else
    {
        v9 = a2 * (a4 - a4 - a1);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 15
2 9
3 9
4 11
5 11
6 11
7 19
8 17
9 17
10 23
11 23
12 23
13 25
14 25
15 25
16 25
17 25
18 25
19 26
<<<sep_out_sample>>>
lea (%rcx,%r8,1),%r9d
cmp %edi,%edx
jl 13 <func1+0x13>
lea (%rdi,%rdi,1),%r9d
imul %edi,%r9d
add %ecx,%r9d
cmp %r8d,%r9d
jge 21 <func1+0x21>
mov %r8d,%r10d
imul %edx,%r10d
jmp 2c <func1+0x2c>
lea (%rdx,%rdx,1),%r10d
imul %r8d,%r10d
add %esi,%r10d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
lea (%r9,%r10,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a3 < a1)
    {
        v6 = (a5 - a3 + a4) + a3;
    }
    else
    {
        v6 = ((a1 + a1) * a1) + a4;
    }
    if (v6 < a5)
    {
        v7 = a5 * a3;
    }
    else
    {
        v7 = ((a3 + a3) * a5) + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 4
3 4
4 10
5 10
6 10
7 12
8 12
9 14
10 14
11 14
12 18
13 18
14 18
15 20
16 20
17 20
18 20
19 20
20 20
21 21
<<<sep_out_sample>>>
cmp %esi,%edi
jge 13 <func1+0x13>
mov %ecx,%r9d
imul %edi,%r9d
sub %edx,%r9d
add %r8d,%r9d
jmp 1d <func1+0x1d>
mov %ecx,%r9d
sub %esi,%r9d
imul %esi,%r9d
add %edx,%edi
add %esi,%edi
add %r8d,%edi
add %ecx,%edi
add %r9d,%edi
lea (%rdx,%rdx,2),%eax
sub %esi,%eax
add %edi,%eax
add %ecx,%r8d
sub %edx,%r8d
add %r8d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a1 < a2)
    {
        v6 = a5 - (a3 - (a4 * a1));
    }
    else
    {
        v6 = a2 * (a4 - a2);
    }
    v7 = (a3 + a3) + a3 - a2;
    v8 = (a4 + a5 - a3) + a4;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 14
12 14
13 14
14 14
15 14
16 12
17 12
18 14
19 13
20 13
21 13
22 14
23 15
<<<sep_out_sample>>>
lea 0x2(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %eax,%ecx
add %esi,%edi
sub %r8d,%edi
imul %edi,%edx
lea 0x1(%rcx,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = a3 * (a1 + a2 - a5);
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        if (v7 < a5)
        {
            v7 += a1 - a1 - a3;
        }
        else
        {
            v7 += a3 * a2 * a4;
        }
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a1)
    {
        if (a5 < a4)
        {
            v9 += a4 + a3 * a3;
        }
        else
        {
            v9 += (a3 * a3) * a3;
        }
    }
    v11 = 0;
    for (v12 = 0; v12++; v12<a2)
    {
        v11 += a4 - a1 * a5;
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 34
2 34
3 34
4 34
5 4
6 4
7 4
8 34
9 35
<<<sep_out_sample>>>
mov %esi,%eax
sub %edi,%eax
mov %esi,%r9d
sub %r8d,%r9d
cmp %ecx,%edx
cmovge %r9d,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a3 < a4)
    {
        v6 = a2 - a1;
    }
    else
    {
        v6 = a4 + a2 - a4 - a5;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += a3 * a3;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        if (v7 < a3)
        {
            v9 += a4 * a2 - a2;
        }
        else
        {
            v9 += a1 - a2 - a2;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 6
6 6
7 29
8 29
9 29
10 29
11 29
12 30
<<<sep_out_sample>>>
push %rbx
lea (%r8,%rsi,2),%ebx
mov %ecx,%r11d
imul %ecx,%r11d
lea (%rsi,%rdi,1),%r10d
add %r8d,%r10d
sub %ecx,%r10d
cmp %edi,%r8d
jge 21 <func1+0x21>
lea (%rcx,%rcx,1),%r9d
jmp 2b <func1+0x2b>
lea (%rcx,%rcx,1),%r9d
sub %edx,%r9d
add %r8d,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %ebx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a2 + (a2 + a5);
    v7 = a4 * a4;
    v8 = (a2 + a1 + a5) - a4;
    if (a5 < a1)
    {
        v9 = a4 + a4;
    }
    else
    {
        v9 = a5 + (a4 + a4 - a3);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 4
3 5
4 5
5 6
6 6
7 6
8 7
9 7
10 9
11 9
12 13
13 13
14 13
15 15
16 15
17 15
18 15
19 15
20 15
21 15
22 15
23 16
24 16
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
mov %edi,%ecx
sub %edx,%ecx
add %ecx,%eax
sub %r8d,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a1 - a3;
    v7 = a1 - a5;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 4
7 6
8 5
9 6
10 7
<<<sep_out_sample>>>
mov %r8d,%eax
sub %edx,%eax
lea (%rsi,%rcx,1),%r9d
cmp %r8d,%ecx
cmovl %eax,%r9d
cmp %edx,%ecx
jge 20 <func1+0x20>
mov %r8d,%eax
sub %esi,%eax
add %r8d,%eax
add %edx,%eax
jmp 30 <func1+0x30>
mov %ecx,%r10d
imul %esi,%r10d
mov %r8d,%eax
imul %edx,%eax
add %r10d,%eax
mov %edx,%r10d
imul %esi,%r10d
imul %edx,%r10d
imul %edi,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a4 < a5)
    {
        v6 = (a5 + a5 - a5) - a3;
    }
    else
    {
        v6 = a2 + a4 + (a3 - a3);
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += (a3 + a4) - a3;
    }
    if (a4 < a3)
    {
        v9 = a5 - (a2 - a5) + a3;
    }
    else
    {
        v9 = a4 * a2 + (a5 * a3);
    }
    v10 = a3 * (a3 * a2) * a1;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 6
6 17
7 17
8 19
9 19
10 19
11 19
12 19
13 23
14 23
15 23
16 23
17 23
18 25
19 25
20 25
21 25
22 26
23 26
24 26
25 26
26 26
27 26
28 26
29 27
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a3 - a5 - a4;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += (a3 - a1) + a5;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a1)
    {
        v10 += (a4 * a2) - a3;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 19
2 19
3 19
4 19
5 20
<<<sep_out_sample>>>
test %esi,%esi
jle 11 <func1+0x11>
mov %edi,%eax
imul %edx,%eax
imul %ecx,%eax
add %r8d,%eax
jmp 1d <func1+0x1d>
mov $0x1,%eax
sub %edx,%eax
imul %esi,%eax
add %ecx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (a3 < a3)
        {
            v6 += a4 + a4 + a3;
        }
        else
        {
            v6 += a3 + a5 * a5;
        }
    }
    if (v6 < a2)
    {
        v8 = a5 + ((a1 * a3) * a4);
    }
    else
    {
        v8 = (a2 - (a3 * a2)) + a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 18
7 18
8 22
9 22
10 22
11 22
12 24
13 24
14 24
15 24
16 24
17 25
<<<sep_out_sample>>>
cmp $0x1,%r8d
jle 13 <func1+0x13>
mov %esi,%eax
imul %edi,%eax
sub %r8d,%eax
sub %r8d,%eax
jmp 1f <func1+0x1f>
mov %r8d,%eax
imul %ecx,%eax
imul %r8d,%eax
sub %esi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (a4 < a2)
        {
            v6 += a2 - a3;
        }
        else
        {
            v6 += a3 * a4 * a2;
        }
    }
    if (v7 < a5)
    {
        v8 = (a2 * a1 - a5) - a5;
    }
    else
    {
        v8 = (a5 * a4) * a5 - a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 18
7 18
8 22
9 22
10 22
11 22
12 24
13 24
14 24
15 24
16 24
17 25
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a1 + a2;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += a4 * a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 14
2 14
3 14
4 14
5 15
<<<sep_out_sample>>>
lea (%rcx,%r8,1),%r10d
imul %r8d,%r10d
sub %edi,%r10d
lea (%rdx,%rcx,1),%eax
lea (%rdi,%rsi,1),%r9d
test %ecx,%ecx
cmovg %eax,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = ((a4 + a5) * a5) - a1;
    if (v7 < a4)
    {
        v7 = a3 + a4 - a5 + a5;
    }
    else
    {
        v7 = a1 + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 7
5 7
6 7
7 7
8 13
9 13
10 13
11 13
12 13
13 13
14 14
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea (%r8,%rcx,1),%esi
imul %ecx,%ecx
lea 0x1(%rsi,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a4 * a4;
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        if (v6 < a3)
        {
            v7 += a2 * a2;
        }
        else
        {
            v7 += (a4 * a2) * a1;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 4
6 17
7 18
<<<sep_out_sample>>>
cmp %esi,%edi
jge 15 <func1+0x15>
lea (%rcx,%rsi,1),%eax
imul %edx,%eax
mov %edi,%r10d
sub %eax,%r10d
mov %r10d,%eax
jmp 24 <func1+0x24>
mov %edi,%r9d
imul %edx,%r9d
mov %r8d,%eax
sub %esi,%eax
add %r9d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a1 < a2)
    {
        v6 = a1 - (a4 + a2) * a3;
    }
    else
    {
        v6 = a1 * a3 - (a2 - a5);
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += a3 + a1 - a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 6
9 10
10 10
11 10
12 10
13 10
14 17
15 17
16 17
17 17
18 17
19 18
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%r9d
add %esi,%r9d
add %r8d,%r9d
add %ecx,%r9d
mov %edx,%eax
sub %edi,%eax
sub %esi,%eax
sub %r8d,%eax
lea (%r9,%rax,1),%ecx
imul %r8d,%edx
imul %edx,%r8d
lea 0x1(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = (a3 - a1) - a2 - a5;
    v7 = a5 * a3 * a5;
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        if (v7 < a4)
        {
            v8 += a1 - a2 * a3;
        }
        else
        {
            v8 += a2 - a5;
        }
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a4)
    {
        v10 += a3 - a1 - a3;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 23
2 23
3 23
4 23
5 4
6 4
7 4
8 4
9 23
10 5
11 5
12 23
13 24
<<<sep_out_sample>>>
lea (%rdi,%r8,1),%r11d
imul %esi,%r11d
imul %edi,%r11d
mov %esi,%r10d
imul %ecx,%r10d
mov %r8d,%r9d
sub %edi,%r9d
cmp %edx,%ecx
jge 29 <func1+0x29>
lea (%rsi,%rdx,1),%r9d
mov %edx,%eax
imul %edi,%eax
sub %eax,%r9d
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a2 * (a1 + a5) * a1;
    if (a5 < a5)
    {
        v7 = a2 * a3;
    }
    else
    {
        v7 = (a1 - a1) + a2 * a4;
    }
    if (a4 < a3)
    {
        v8 = a2 + a3 - a3 * a1;
    }
    else
    {
        v8 = a5 - a1;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a1)
    {
        v9 += a4 + a5 + a2;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 11
5 11
6 19
7 19
8 13
9 13
10 15
11 15
12 15
13 15
14 26
15 26
16 26
17 26
18 26
19 26
20 26
21 27
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea (%r8,%rcx,1),%esi
mov %edx,%eax
sub %ecx,%eax
add %eax,%edx
sub %edi,%edx
lea 0x1(%rsi,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = ((a3 - a4) + a3) - a1;
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        if (v6 < a2)
        {
            v7 += a2 + a3;
        }
        else
        {
            v7 += a3 + a2 * a1;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 4
6 4
7 4
8 4
9 17
10 18
<<<sep_out_sample>>>
cmp %edx,%esi
jge d <func1+0xd>
mov %r8d,%r9d
imul %edi,%r9d
jmp 18 <func1+0x18>
lea (%rdx,%rdi,1),%r9d
imul %ecx,%r9d
add %r8d,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
lea -0x1(%rdi),%r9d
imul %r9d,%edi
add %r8d,%edi
add %eax,%edi
imul %esi,%r8d
add %r8d,%ecx
sub %edx,%ecx
lea (%rdi,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a2 < a3)
    {
        v6 = a5 * a1;
    }
    else
    {
        v6 = a4 * (a3 + a1) + a5;
    }
    v7 = (a1 * a1 - a1) + a5;
    v8 = (a4 + (a2 * a5)) - a3;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 14
10 14
11 14
12 14
13 14
14 12
15 12
16 12
17 14
18 13
19 13
20 13
21 14
22 15
<<<sep_out_sample>>>
mov %edi,%r9d
sub %edx,%r9d
add %r8d,%r9d
sub %ecx,%r9d
test %ecx,%ecx
jle 1a <func1+0x1a>
lea (%rsi,%rdx,1),%eax
imul %esi,%eax
add %ecx,%eax
jmp 1f <func1+0x1f>
mov %edi,%eax
imul %edx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = (a5 - (a3 - a1)) - a4;
    if (v7 < a4)
    {
        v7 = a4 + (a2 + a3) * a2;
    }
    else
    {
        v7 = a1 * a3;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 5
6 5
7 7
8 7
9 7
10 7
11 11
12 11
13 13
14 13
15 13
16 13
17 13
18 13
19 14
<<<sep_out_sample>>>
cmp %r8d,%esi
jge 15 <func1+0x15>
mov %ecx,%r9d
imul %edx,%r9d
imul %r8d,%r9d
sub %ecx,%r9d
jmp 23 <func1+0x23>
mov %esi,%eax
imul %esi,%eax
mov %edi,%r9d
sub %eax,%r9d
add %ecx,%r9d
lea (%rsi,%rdi,2),%eax
cmp %ecx,%r8d
jge 30 <func1+0x30>
lea (%rsi,%rdi,1),%eax
sub %edx,%eax
lea (%rdi,%rdx,1),%r10d
add %esi,%r10d
add %r10d,%r8d
add %r8d,%ecx
add %r9d,%ecx
add %ecx,%eax
imul %edi,%esi
sub $0x1,%esi
imul %esi,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a2 < a5)
    {
        v6 = ((a4 * a3) * a5) - a4;
    }
    else
    {
        v6 = a1 - a2 * a2 + a4;
    }
    if (a5 < a4)
    {
        v7 = (a2 + a1) - a3;
    }
    else
    {
        v7 = a1 + a1 + a2;
    }
    v8 = a1 * a2 * a3 - a3;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 10
13 18
14 12
15 12
16 14
17 14
18 21
19 21
20 21
21 21
22 21
23 21
24 20
25 20
26 20
27 21
28 22
<<<sep_out_sample>>>
cmp %ecx,%edi
jge 10 <func1+0x10>
mov %esi,%eax
imul %edi,%eax
imul %esi,%eax
sub %ecx,%eax
jmp 18 <func1+0x18>
mov %edx,%eax
imul %edx,%eax
imul %esi,%eax
add %edi,%edx
add %esi,%edx
add %r8d,%edx
add %edx,%ecx
lea 0x1(%rax,%rcx,1),%eax
sub %esi,%r8d
add %edi,%r8d
imul %r8d,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a1 < a4)
    {
        v6 = a2 * a1 * a2 - a4;
    }
    else
    {
        v6 = a3 * a3 * a2;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        if (v7 < a4)
        {
            v7 += a1 - a5 + a4;
        }
        else
        {
            v7 += a2 * a3 - a2;
        }
    }
    v9 = ((a5 - a2) + a1) * a1;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 25
12 25
13 25
14 25
15 25
16 24
17 24
18 24
19 25
20 26
<<<sep_out_sample>>>
cmp %edi,%ecx
jge e <func1+0xe>
lea (%rsi,%rdi,1),%r10d
imul %edx,%r10d
jmp 15 <func1+0x15>
lea (%rcx,%rdi,2),%r10d
sub %r8d,%r10d
mov %esi,%r9d
sub %r8d,%r9d
add %esi,%r9d
sub %edi,%r9d
mov $0x0,%eax
cmp %r8d,%esi
jg 37 <func1+0x37>
mov %r8d,%eax
imul %esi,%eax
imul %r8d,%eax
add %edx,%eax
add %edi,%edx
add %edx,%esi
add %r8d,%esi
add %esi,%ecx
add %r10d,%ecx
add %r9d,%ecx
add %ecx,%eax
add %edi,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a4 < a1)
    {
        v6 = a3 * a2 + a3 * a1;
    }
    else
    {
        v6 = (a1 + a4) + a1 - a5;
    }
    v7 = (a2 - a5 + a2) - a1;
    if (a5 < a2)
    {
        v8 = a1 - a1;
    }
    else
    {
        v8 = a3 + (a5 * a2) * a5;
    }
    v9 = a5 + a1;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 12
9 12
10 12
11 12
12 15
13 13
14 13
15 19
16 19
17 19
18 19
19 22
20 22
21 22
22 22
23 22
24 22
25 22
26 21
27 22
28 23
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%r9d
mov %ecx,%eax
imul %esi,%eax
mov %r9d,%r10d
sub %eax,%r10d
cmp %esi,%edi
jle 1f <func1+0x1f>
mov %esi,%eax
sub %r8d,%eax
imul %eax,%edx
sub %ecx,%edx
jmp 27 <func1+0x27>
imul %r8d,%edx
imul %r8d,%edx
lea (%r9,%rsi,1),%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a1 + a3 - (a4 * a2);
    if (a2 < a1)
    {
        v7 = (a2 - a5) * a3 - a4;
    }
    else
    {
        v7 = a5 * a3 * a5;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 4
6 5
7 5
8 7
9 7
10 7
11 7
12 7
13 11
14 11
15 13
16 13
17 13
18 13
19 13
20 14
<<<sep_out_sample>>>
mov %r8d,%r9d
sub %edi,%r9d
test %r8d,%r8d
jle 15 <func1+0x15>
mov %edx,%r9d
sub %ecx,%r9d
imul %ecx,%r9d
test %edi,%edi
jle 20 <func1+0x20>
mov %edi,%eax
imul %edx,%eax
jmp 2a <func1+0x2a>
mov %ecx,%eax
imul %esi,%eax
imul %edi,%eax
sub %ecx,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (v6 < a5)
    {
        v6 = a4 * (a3 - a4);
    }
    else
    {
        v6 = a5 - a1;
    }
    if (v7 < a1)
    {
        v7 = a1 * a3;
    }
    else
    {
        v7 = (a4 * a2 * a1) - a4;
    }
    v8 = a4 - a4;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 4
4 4
5 6
6 6
7 6
8 12
9 12
10 14
11 14
12 14
13 18
14 18
15 18
16 18
17 21
18 21
19 21
20 21
21 21
22 21
23 22
<<<sep_out_sample>>>
lea (%rdi,%r8,1),%eax
lea (%rcx,%rdi,1),%r9d
cmp %edi,%ecx
cmovle %r9d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rcx,%rdx,2),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a4 + (a3 - a4) + a3;
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        if (v6 < a3)
        {
            v7 += a3 * a2 - a4;
        }
        else
        {
            v7 += a2 + a1;
        }
    }
    if (a1 < a4)
    {
        v9 = a1 + a5;
    }
    else
    {
        v9 = a4 + a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 19
2 19
3 19
4 19
5 25
6 25
7 25
8 25
9 25
10 25
11 26
<<<sep_out_sample>>>
lea (%r8,%rsi,1),%eax
cmp %edi,%esi
jge 10 <func1+0x10>
mov %edx,%eax
imul %edx,%eax
add %r8d,%eax
add %edx,%edi
add %edi,%esi
add %r8d,%esi
add %esi,%ecx
add %ecx,%eax
add %edx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a2 < a1)
    {
        v6 = a5 + (a3 * a3);
    }
    else
    {
        v6 = a5 + a2;
    }
    v7 = a5 - ((a5 - a5) - a3);
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 6
7 13
8 13
9 13
10 13
11 13
12 12
13 13
14 14
<<<sep_out_sample>>>
mov %edx,%eax
sub %r8d,%eax
cmp $0x1,%edx
jle 12 <func1+0x12>
lea (%rcx,%rsi,1),%eax
imul %esi,%eax
add %edx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (a1 < a4)
        {
            v6 += a2 * a5 + a5;
        }
        else
        {
            v6 += a3 + a5;
        }
    }
    if (v7 < a3)
    {
        v8 = a3 + a2 * (a4 + a2);
    }
    else
    {
        v8 = a3 - a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 22
2 22
3 16
4 16
5 18
6 18
7 18
8 24
9 24
10 24
11 24
12 24
13 25
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %eax,%ecx
mov %esi,%eax
sub %edx,%eax
add %edi,%eax
imul %edi,%eax
add %eax,%ecx
imul %r8d,%esi
add %esi,%edi
sub %r8d,%edi
lea (%rcx,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a1 * (a2 - a3 + a1);
    v7 = (a5 * a2) + a1 - a5;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 4
7 4
8 4
9 6
10 5
11 5
12 5
13 6
14 7
<<<sep_out_sample>>>
add %edx,%edi
add %esi,%edi
add %r8d,%edi
lea 0x1(%rcx,%rdi,1),%eax
mov $0x1,%ecx
sub %esi,%ecx
imul %ecx,%r8d
add %r8d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += (a5 * a2) + a1;
    }
    if (a5 < a5)
    {
        v8 = a3 * (a4 - a5) + a4;
    }
    else
    {
        v8 = (a5 - a5 * a2) + a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 15
6 15
7 15
8 15
9 17
10 18
<<<sep_out_sample>>>
cmp %edi,%r8d
jge c <func1+0xc>
lea (%rcx,%rdi,2),%eax
add %edi,%eax
jmp 17 <func1+0x17>
mov %edi,%eax
imul %r8d,%eax
imul %ecx,%eax
add %edx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %eax,%ecx
lea (%rcx,%rdi,2),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a5 < a1)
    {
        v6 = (a1 + a4 + a1) + a1;
    }
    else
    {
        v6 = a3 + a1 * a5 * a4;
    }
    v7 = a1 + a1;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 10
10 13
11 13
12 13
13 13
14 13
15 13
16 14
<<<sep_out_sample>>>
cmp %edi,%ecx
jge c <func1+0xc>
mov %r8d,%eax
imul %edi,%eax
jmp 15 <func1+0x15>
mov %r8d,%eax
imul %ecx,%eax
imul %ecx,%eax
lea 0x1(%rdi,%rdx,1),%edi
add %esi,%edi
add %edi,%r8d
add %ecx,%r8d
lea 0x1(%rax,%r8,1),%edi
imul %edx,%esi
lea (%rsi,%rcx,2),%eax
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    if (a4 < a1)
    {
        v6 = a5 * a1;
    }
    else
    {
        v6 = a5 * a4 * a4;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += (a3 + a2) - a5;
    }
    v9 = a2 * a3 + a4 + a4;
    v10 = 0;
    for (v11 = 0; v11++; v11<a1)
    {
        if (a2 < a1)
        {
            v10 += (a2 - a1) + a4;
        }
        else
        {
            v10 += (a1 + a1) + a4;
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 30
10 30
11 30
12 30
13 30
14 17
15 17
16 30
17 31
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %edx,%r8d
add %r8d,%ecx
add %esi,%edi
lea 0x1(%rcx,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a2 + a1;
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += a2 - a5 * a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 4
6 10
7 11
<<<sep_out_sample>>>
lea (%rdi,%r8,1),%eax
cmp %r8d,%edx
jge 12 <func1+0x12>
mov %edx,%eax
sub %ecx,%eax
add %edi,%eax
add %r8d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += (a1 - a1) - a3;
    }
    if (a3 < a5)
    {
        v8 = (a3 - a4) + a1 + a5;
    }
    else
    {
        v8 = a1 + a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 15
2 9
3 9
4 11
5 11
6 11
7 11
8 17
9 17
10 17
11 17
12 17
13 18
<<<sep_out_sample>>>
lea (%r8,%rdx,1),%r9d
cmp $0x1,%ecx
jle 18 <func1+0x18>
mov %edx,%r11d
imul %r8d,%r11d
add %edi,%r11d
add %esi,%r11d
jmp 1f <func1+0x1f>
lea (%rdx,%rdi,1),%r11d
add %ecx,%r11d
mov %edx,%r10d
imul %edi,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %r9d,%eax
add %r11d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a1 + a4;
    }
    v8 = a5 + a3;
    if (v7 < a4)
    {
        v9 = (a1 + a3 * a5) + a2;
    }
    else
    {
        v9 = a3 + a1 + a4;
    }
    v10 = a3 * a1;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 10
3 10
4 12
5 12
6 12
7 12
8 12
9 16
10 16
11 18
12 18
13 19
14 19
15 19
16 19
17 19
18 19
19 19
20 20
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
lea -0x1(%r8),%r9d
imul %r9d,%esi
imul %r8d,%esi
add %esi,%eax
sub %ecx,%edx
sub %edi,%edx
imul %edx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = ((a5 * a2) - a2) * a5;
    v7 = ((a3 - a4) - a1) * a5;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 4
7 4
8 6
9 5
10 5
11 5
12 6
13 7
<<<sep_out_sample>>>
mov %ecx,%r9d
imul %edi,%r9d
lea (%rdi,%rdx,2),%eax
lea (%r9,%rsi,2),%edx
lea (%rdx,%rax,1),%eax
add %eax,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a2 * a2;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        if (a2 < a5)
        {
            v8 += (a4 * a4) * a4;
        }
        else
        {
            v8 += a3 * a3;
        }
    }
    v10 = (a4 * a1) + a2 + a3;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 22
4 22
5 22
6 22
7 22
8 23
<<<sep_out_sample>>>
cmp %ecx,%edi
jge a <func1+0xa>
lea (%r8,%r8,1),%r10d
jmp 11 <func1+0x11>
mov %esi,%r10d
imul %r8d,%r10d
cmp %r8d,%ecx
jle 1c <func1+0x1c>
lea (%rcx,%rcx,1),%r9d
jmp 23 <func1+0x23>
mov %edi,%r9d
imul %ecx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
mov %r8d,%edi
imul %ecx,%edi
mov %edx,%r11d
sub %edi,%r11d
imul %r11d,%esi
add %esi,%eax
imul %edx,%ecx
imul %ecx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a1 < a4)
    {
        v6 = a5 + a5;
    }
    else
    {
        v6 = a2 * a5;
    }
    if (a5 < a4)
    {
        v7 = a4 + a4;
    }
    else
    {
        v7 = a1 * a4;
    }
    v8 = (a3 - a5 * a4) * a2;
    v9 = a4 * a3 * a5;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 10
6 10
7 12
8 12
9 14
10 14
11 18
12 18
13 22
14 22
15 22
16 22
17 22
18 22
19 20
20 20
21 20
22 20
23 20
24 22
25 21
26 21
27 22
28 23
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (a5 < a1)
        {
            v6 += (a2 - a3) - a1;
        }
        else
        {
            v6 += (a2 * a5) + a3;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += (a4 + a4) - a1;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a4)
    {
        v10 += a5 * a1 - a5;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 26
2 26
3 26
4 26
5 27
<<<sep_out_sample>>>
lea (%rcx,%rdx,1),%r9d
add %r8d,%r9d
cmp %edx,%esi
jl 19 <func1+0x19>
mov %esi,%r9d
imul %esi,%r9d
sub %r8d,%r9d
imul %edx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
mov %edx,%ecx
imul %edx,%ecx
imul %ecx,%r8d
add %r8d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a2 < a3)
    {
        v6 = a4 + a3 + a5;
    }
    else
    {
        v6 = (a2 * a2 - a5) * a3;
    }
    if (a4 < a4)
    {
        v7 = a3 * a4;
    }
    else
    {
        v7 = a3 * a3 * a5 + a3;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 4
4 4
5 10
6 10
7 10
8 10
9 20
10 20
11 20
12 20
13 20
14 18
15 18
16 18
17 18
18 20
19 21
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %edx,%r8d
lea (%rdi,%rcx,2),%eax
lea (%rax,%r8,1),%eax
imul %esi,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a1 + a4;
    v7 = a2 * a2;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 4
5 6
6 5
7 6
8 7
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%r9d
add %esi,%r9d
add %r8d,%r9d
add %ecx,%r9d
mov %r8d,%r10d
sub %edx,%r10d
add %r10d,%r9d
mov %ecx,%eax
imul %r8d,%eax
sub %edx,%eax
sub %edx,%eax
add %r9d,%eax
add %r8d,%esi
add %esi,%eax
sub %edi,%r8d
sub $0x1,%r8d
imul %r8d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = (a3 - a3) + a5 - a3;
    v7 = (a4 * a5 - a3) - a3;
    v8 = a2 + a5;
    v9 = a4 * (a5 - a1) - a4;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 8
2 8
3 8
4 8
5 4
6 4
7 8
8 5
9 5
10 5
11 5
12 8
13 6
14 8
15 7
16 7
17 7
18 8
19 9
<<<sep_out_sample>>>
cmp %r8d,%esi
jge d <func1+0xd>
mov %edi,%eax
imul %r8d,%eax
jmp 12 <func1+0x12>
mov %esi,%eax
imul %ecx,%eax
mov %edx,%r9d
sub %esi,%r9d
lea 0x1(%r9,%rdx,2),%r9d
add %r9d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    if (a2 < a5)
    {
        v6 = a1 * a5;
    }
    else
    {
        v6 = a2 * a4;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        if (a1 < a1)
        {
            v7 += a4 - (a3 * a5);
        }
        else
        {
            v7 += (a4 + a1) - a2;
        }
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        v9 += a5 - a3 * a1;
    }
    v11 = (a3 - a2) + a3 + a3;
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 29
9 29
10 30
11 30
12 30
13 30
14 30
15 30
16 30
17 31
<<<sep_out_sample>>>
cmp %ecx,%edx
jle b <func1+0xb>
mov %edx,%eax
imul %edx,%eax
jmp 1a <func1+0x1a>
mov %r8d,%eax
sub %esi,%eax
mov %ecx,%r9d
imul %r8d,%r9d
sub %r9d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a1 + a3 - a1;
    }
    if (a4 < a3)
    {
        v8 = a3 * a3;
    }
    else
    {
        v8 = (a5 - a2) - (a4 * a5);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 15
7 15
8 15
9 15
10 15
11 17
12 17
13 17
14 17
15 17
16 18
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %esi,%edi
imul %ecx,%ecx
imul %edi,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += (a4 - a3) * a4;
    }
    v8 = (a2 + a1) * (a4 * a4);
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        v9 += a4 + a2 + a4;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 15
2 15
3 15
4 15
5 9
6 9
7 9
8 15
9 16
<<<sep_out_sample>>>
cmp %esi,%edx
jge c <func1+0xc>
lea (%rdi,%r8,2),%eax
add %ecx,%eax
jmp 12 <func1+0x12>
lea (%rsi,%r8,2),%eax
sub %edx,%eax
add %edi,%edx
add %esi,%edx
add %r8d,%edx
add %ecx,%edx
add %edx,%eax
imul %edi,%esi
add %ecx,%esi
add %edi,%esi
add %esi,%eax
mov $0x1,%edx
sub %r8d,%edx
imul %edx,%edi
imul %edi,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a3 < a2)
    {
        v6 = (a1 + a5 + a5) + a4;
    }
    else
    {
        v6 = ((a5 - a3) + a2) + a5;
    }
    v7 = a4 + a2 * a1 + a1;
    v8 = (a1 - a1 * a5) * a4;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 14
9 14
10 14
11 14
12 14
13 12
14 12
15 12
16 14
17 13
18 13
19 13
20 13
21 14
22 15
<<<sep_out_sample>>>
cmp %r8d,%esi
jge 11 <func1+0x11>
mov %r8d,%r10d
sub %edx,%r10d
imul %edi,%r10d
jmp 1b <func1+0x1b>
mov %esi,%r10d
sub %r8d,%r10d
imul %edx,%r10d
lea (%rdi,%rdx,1),%r9d
add %esi,%r9d
add %r8d,%r9d
add %ecx,%r9d
add %r10d,%r9d
imul %r8d,%r8d
lea (%r8,%rdi,1),%eax
sub %esi,%eax
add %r9d,%eax
mov %edx,%r8d
imul %esi,%r8d
mov %edi,%r11d
sub %r8d,%r11d
add %r11d,%esi
add %esi,%eax
lea (%rcx,%rdx,2),%edx
add %edx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a2 < a5)
    {
        v6 = (a5 - a3) * a1;
    }
    else
    {
        v6 = (a2 * a3) - (a3 * a5);
    }
    v7 = ((a5 * a5) + a1) - a2;
    v8 = (a1 - a3 * a2) + a2;
    v9 = (a3 + a3 + a4) + a1;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 15
11 15
12 15
13 15
14 15
15 12
16 12
17 12
18 15
19 13
20 13
21 13
22 13
23 13
24 15
25 14
26 14
27 15
28 16
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
lea 0x1(%rcx,%r8,1),%ecx
imul %edx,%edi
sub %esi,%edi
lea (%rcx,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a5 * (a5 * a5);
    }
    v8 = a1 * a3 - a2;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 9
6 9
7 10
8 11
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += (a5 - a2) * a2;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += a5 * a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 14
2 14
3 14
4 14
5 15
<<<sep_out_sample>>>
mov %r8d,%r10d
sub %ecx,%r10d
cmp %esi,%ecx
jge 1a <func1+0x1a>
mov %ecx,%r9d
imul %r8d,%r9d
lea (%rdi,%rdi,1),%r11d
sub %r11d,%r9d
jmp 29 <func1+0x29>
mov %esi,%r9d
imul %ecx,%r9d
imul %r8d,%r9d
imul %edx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a5 - (a4 - a1) - a1;
    if (a4 < a2)
    {
        v7 = a4 * a5 - (a1 + a1);
    }
    else
    {
        v7 = a2 * a4 * a5 * a3;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 5
4 5
5 7
6 7
7 7
8 7
9 7
10 11
11 11
12 11
13 11
14 13
15 13
16 13
17 13
18 13
19 13
20 14
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
add %esi,%ecx
imul %r8d,%edi
lea 0x1(%rcx,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a1 * a5;
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        if (v8 < a2)
        {
            v7 += a3 * a4 * a3;
        }
        else
        {
            v7 += (a3 * a3) + a5;
        }
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a1)
    {
        if (v8 < a5)
        {
            v9 += a3 * a2;
        }
        else
        {
            v9 += a1 * a4;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 29
2 29
3 29
4 29
5 4
6 29
7 30
<<<sep_out_sample>>>
mov %edx,%r11d
imul %edi,%r11d
imul %edi,%r11d
add %r8d,%r11d
mov %r8d,%r9d
imul %r8d,%r9d
mov $0x1,%r10d
sub %r9d,%r10d
imul %esi,%r10d
cmp %r8d,%edi
jge 33 <func1+0x33>
mov %ecx,%r9d
sub %esi,%r9d
imul %edx,%r9d
jmp 3e <func1+0x3e>
lea (%rdx,%rcx,1),%r9d
imul %ecx,%r9d
sub %edi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
add %ecx,%edx
add %edx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a3 * a1 * a1 + a5;
    v7 = a2 - (a5 * a5) * a2;
    if (a1 < a5)
    {
        v8 = (a4 - a2) * a3;
    }
    else
    {
        v8 = a4 * (a3 + a4) - a1;
    }
    if (a1 < a1)
    {
        v9 = a2 - a2 - a5 - a5;
    }
    else
    {
        v9 = a1 + (a3 + a4);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 5
6 5
7 5
8 5
9 5
10 6
11 6
12 8
13 8
14 8
15 8
16 12
17 12
18 12
19 22
20 22
21 22
22 22
23 22
24 22
25 22
26 20
27 20
28 22
29 23
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
add %esi,%ecx
imul %r8d,%edi
lea 0x1(%rcx,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a1 * a5;
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        if (a1 < a3)
        {
            v7 += a2 * a2 * a2;
        }
        else
        {
            v7 += (a4 - a2) - a2;
        }
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a1)
    {
        if (a5 < a1)
        {
            v9 += (a2 + a5) * a1;
        }
        else
        {
            v9 += a3 - (a5 * a4);
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 29
2 29
3 29
4 29
5 4
6 29
7 30
<<<sep_out_sample>>>
lea (%rdx,%r8,1),%eax
imul %esi,%eax
sub %r8d,%eax
test %esi,%esi
jle 1a <func1+0x1a>
lea (%rdi,%rsi,1),%r10d
add %r8d,%r10d
add %edx,%r10d
jmp 27 <func1+0x27>
mov %esi,%r10d
sub %edx,%r10d
imul %edx,%r10d
sub %r8d,%r10d
cmp %eax,%r8d
jle 3a <func1+0x3a>
lea (%rsi,%rcx,1),%r9d
imul %r8d,%r9d
imul %esi,%r9d
jmp 44 <func1+0x44>
mov %edx,%r9d
imul %edx,%r9d
sub %esi,%r9d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %ecx,%r8d
add %r8d,%eax
add %r10d,%eax
add %r9d,%eax
lea (%rdx,%rdx,2),%edx
imul %edx,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = ((a3 + a5) * a2) - a5;
    if (v7 < a2)
    {
        v7 = ((a1 + a2) + a5) + a3;
    }
    else
    {
        v7 = (a2 - a3) * a3 - a5;
    }
    if (v6 < a5)
    {
        v8 = ((a2 + a4) * a5) * a2;
    }
    else
    {
        v8 = a3 * a3 - a2;
    }
    v9 = a4 * (a3 + a3 + a3);
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 5
5 5
6 7
7 7
8 7
9 7
10 11
11 11
12 11
13 11
14 13
15 13
16 15
17 15
18 15
19 15
20 19
21 19
22 19
23 22
24 22
25 22
26 22
27 22
28 22
29 22
30 21
31 21
32 22
33 23
<<<sep_out_sample>>>
mov %esi,%r9d
imul %esi,%r9d
cmp %edx,%r9d
jge 16 <func1+0x16>
lea 0x2(%rcx),%r11d
imul %r8d,%r11d
jmp 1e <func1+0x1e>
lea (%rcx,%rcx,1),%r11d
imul %edx,%r11d
mov %r8d,%r10d
sub %edi,%r10d
cmp %edi,%esi
jg 32 <func1+0x32>
mov %r8d,%r10d
imul %edi,%r10d
neg %r10d
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
add %r11d,%eax
add %r10d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a2 * a2;
    if (v6 < a3)
    {
        v7 = a4 * a5 + a5 + a5;
    }
    else
    {
        v7 = a3 * (a4 + a4);
    }
    if (a1 < a2)
    {
        v8 = ((a3 - a1) - a3) + a5;
    }
    else
    {
        v8 = a2 - a2 - a5 * a1;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        v9 += a2 + (a1 * a4);
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 5
4 5
5 7
6 7
7 7
8 11
9 11
10 15
11 15
12 13
13 13
14 19
15 19
16 19
17 26
18 26
19 26
20 26
21 26
22 26
23 26
24 27
<<<sep_out_sample>>>
mov %esi,%eax
imul %esi,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a1 + a5 + a1;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        if (v6 < a5)
        {
            v8 += a5 - a1;
        }
        else
        {
            v8 += a1 - a1;
        }
    }
    if (a3 < a3)
    {
        v10 = a4 * (a4 - (a3 - a1));
    }
    else
    {
        v10 = a2 * a2;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 27
2 27
3 29
4 29
5 29
6 29
7 29
8 30
<<<sep_out_sample>>>
cmp %ecx,%esi
jle 12 <func1+0x12>
mov %edx,%eax
imul %esi,%eax
imul %esi,%eax
imul %r8d,%eax
jmp 18 <func1+0x18>
mov %esi,%eax
imul %r8d,%eax
lea (%rdx,%rdx,1),%r9d
imul %edx,%r9d
lea 0x1(%rsi,%r9,1),%r9d
add %r9d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a2 * a1;
    }
    if (a4 < a2)
    {
        v8 = a2 * (a3 * a2) * a5;
    }
    else
    {
        v8 = a2 * a5;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a1)
    {
        if (a5 < a1)
        {
            v9 += a5 * a4;
        }
        else
        {
            v9 += (a2 * a3) * a3;
        }
    }
    v11 = a2 + (a3 + a3) * a3;
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 11
8 15
9 15
10 29
11 29
12 30
13 30
14 30
15 30
16 30
17 30
18 30
19 31
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%r9d
add %esi,%r9d
add %r8d,%r9d
add %ecx,%r9d
lea (%r8,%rcx,1),%eax
imul %edx,%eax
sub %edi,%eax
add %r9d,%eax
sub %edx,%edi
add %edi,%ecx
imul %ecx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = (a5 + a4) * a3 - a1;
    if (a3 < a3)
    {
        v7 = (a2 + a1) * a5 - a2;
    }
    else
    {
        v7 = a2 * (a4 + (a1 - a3));
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 13
2 13
3 13
4 13
5 4
6 4
7 4
8 13
9 11
10 11
11 11
12 13
13 14
<<<sep_out_sample>>>
mov %esi,%r9d
sub %edx,%r9d
imul %ecx,%r9d
imul %edx,%r9d
lea (%r8,%rcx,1),%eax
test %edx,%edx
jg 1c <func1+0x1c>
lea (%rcx,%rsi,1),%eax
imul %edx,%eax
cmp %r8d,%esi
jge 36 <func1+0x36>
mov %esi,%r10d
imul %esi,%r10d
mov %edx,%r11d
sub %r10d,%r11d
mov %r11d,%r10d
sub %ecx,%r10d
jmp 3d <func1+0x3d>
mov %edi,%r10d
imul %ecx,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = (a4 * (a2 - a3)) * a3;
    if (v7 < a3)
    {
        v7 = a5 + a4;
    }
    else
    {
        v7 = (a4 + a2) * a3;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += a1 + a1 - a4;
    }
    if (a2 < a5)
    {
        v10 = a3 - a2 * a2 - a4;
    }
    else
    {
        v10 = a1 * a4;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 7
6 5
7 5
8 11
9 11
10 18
11 18
12 20
13 20
14 20
15 20
16 20
17 20
18 20
19 24
20 24
21 26
22 26
23 26
24 26
25 26
26 26
27 26
28 27
<<<sep_out_sample>>>
cmp %r8d,%ecx
jge b <func1+0xb>
mov %edi,%eax
neg %eax
jmp 11 <func1+0x11>
mov %r8d,%eax
imul %ecx,%eax
cmp %edx,%ecx
jge 22 <func1+0x22>
mov %ecx,%r9d
imul %edi,%r9d
lea (%r9,%rdx,2),%r9d
jmp 2d <func1+0x2d>
lea (%rdx,%rcx,1),%r9d
add %edi,%r9d
imul %ecx,%r9d
lea 0x1(%r9,%rdi,1),%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    if (a4 < a5)
    {
        v6 = (a3 - a1) - a3;
    }
    else
    {
        v6 = a5 * a4;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a4 * a2 + a5;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        v9 += a5 + a5 * a3;
    }
    if (a4 < a3)
    {
        v11 = (a3 + a3) + (a4 * a1);
    }
    else
    {
        v11 = (a1 + (a3 + a4)) * a4;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 22
9 22
10 24
11 24
12 24
13 24
14 28
15 28
16 28
17 30
18 30
19 30
20 30
21 30
22 30
23 31
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %r8d,%esi
sub %edx,%r8d
sub %edx,%r8d
lea 0x1(%rsi,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (a5 < a4)
        {
            v6 += (a1 * a4) + a5;
        }
        else
        {
            v6 += a3 - a1 * a5;
        }
    }
    if (a1 < a1)
    {
        v8 = a1 + a4 * a2 * a1;
    }
    else
    {
        v8 = (a5 - a3 - a3) - a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 24
2 24
3 24
4 22
5 22
6 24
7 25
<<<sep_out_sample>>>
add %edx,%edi
add %esi,%edi
add %r8d,%edi
add %ecx,%edi
mov %ecx,%eax
imul %esi,%eax
add %eax,%r8d
lea 0x1(%rdi,%r8,1),%edi
lea (%rsi,%rdx,2),%eax
sub %ecx,%eax
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = (a4 * a2) + a5;
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        if (a5 < a4)
        {
            v7 += a3 + a2;
        }
        else
        {
            v7 += (a1 + a5) + a5;
        }
    }
    v9 = a3 + a2 - a4 + a3;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 18
5 4
6 4
7 4
8 18
9 17
10 17
11 18
12 19
<<<sep_out_sample>>>
cmp %esi,%ecx
jge 15 <func1+0x15>
mov %edx,%r9d
imul %r8d,%r9d
imul %edi,%r9d
imul %r8d,%r9d
jmp 23 <func1+0x23>
mov %edx,%r9d
imul %esi,%r9d
imul %ecx,%r9d
add %r8d,%r9d
test %edx,%edx
jle 31 <func1+0x31>
mov %esi,%eax
imul %edx,%eax
imul %eax,%eax
jmp 3a <func1+0x3a>
mov %edi,%eax
sub %r8d,%eax
sub %esi,%eax
sub %esi,%eax
imul %r8d,%edx
imul %ecx,%edx
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a4 < a2)
    {
        v6 = a3 * a5 * a1 * a5;
    }
    else
    {
        v6 = a5 + (a3 * a2) * a4;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        if (a5 < a4)
        {
            v7 += a4 + a3;
        }
        else
        {
            v7 += a5 * a5 - a3;
        }
    }
    if (v9 < a3)
    {
        v9 = a2 * a3 * a3 * a2;
    }
    else
    {
        v9 = (a1 - a5 - a2) - a2;
    }
    v10 = a4 * (a5 * a3) - a3;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 24
13 24
14 26
15 26
16 26
17 26
18 30
19 30
20 30
21 30
22 32
23 32
24 33
25 33
26 33
27 33
28 33
29 33
30 34
<<<sep_out_sample>>>
test %ecx,%ecx
jle 14 <func1+0x14>
mov %r8d,%r9d
imul %edi,%r9d
imul %edx,%r9d
add %edi,%r9d
jmp 22 <func1+0x22>
mov %edx,%eax
imul %edi,%eax
imul %edi,%eax
mov %edx,%r9d
sub %eax,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
add %esi,%esi
sub %esi,%ecx
imul %ecx,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (v6 < a4)
    {
        v6 = a1 + (a5 * a1 * a3);
    }
    else
    {
        v6 = a3 - a3 * a1 * a1;
    }
    v7 = (a4 - (a2 + a2)) * a3;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 10
13 13
14 13
15 13
16 13
17 13
18 12
19 12
20 12
21 13
22 14
<<<sep_out_sample>>>
mov %esi,%eax
imul %edx,%eax
mov %ecx,%r10d
sub %eax,%r10d
sub %esi,%r10d
cmp %edi,%esi
jge 28 <func1+0x28>
mov %edi,%r11d
imul %edi,%r11d
mov $0x1,%r9d
sub %r11d,%r9d
imul %ecx,%r9d
jmp 2f <func1+0x2f>
lea (%rdx,%rcx,2),%r9d
sub %r8d,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a4 - (a2 * a3) - a2;
    if (a2 < a1)
    {
        v7 = a4 - a4 * (a1 * a1);
    }
    else
    {
        v7 = a3 + a4 - (a5 - a4);
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 4
6 5
7 5
8 7
9 7
10 7
11 7
12 7
13 7
14 11
15 11
16 13
17 13
18 13
19 13
20 13
21 13
22 14
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (a2 < a5)
        {
            v6 += a1 * a4 - a3;
        }
        else
        {
            v6 += (a5 - a1) + a5;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += a2 * a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 21
5 22
<<<sep_out_sample>>>
cmp %r8d,%esi
jge e <func1+0xe>
lea (%rdi,%r8,2),%r11d
sub %esi,%r11d
jmp 18 <func1+0x18>
lea (%rdi,%r8,1),%r11d
add %esi,%r11d
add %ecx,%r11d
cmp %ecx,%esi
jle 2e <func1+0x2e>
mov $0x1,%r10d
sub %ecx,%r10d
imul %esi,%r10d
add %r8d,%r10d
jmp 3c <func1+0x3c>
mov %edx,%r10d
imul %ecx,%r10d
mov %esi,%eax
sub %ecx,%eax
add %eax,%r10d
lea (%rcx,%rsi,2),%r9d
cmp %edx,%edi
jl 4f <func1+0x4f>
lea (%r8,%rcx,1),%r9d
imul %edi,%r9d
sub %ecx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a2 < a5)
    {
        v6 = (a5 + a1) + a5 - a2;
    }
    else
    {
        v6 = a4 + (a1 + a5 + a2);
    }
    if (a4 < a2)
    {
        v7 = (a2 - a4 * a2) + a5;
    }
    else
    {
        v7 = a3 * a4 + (a2 - a4);
    }
    if (a1 < a3)
    {
        v8 = (a2 + a2) + a4;
    }
    else
    {
        v8 = (a5 + a4) * a1 - a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 12
10 12
11 14
12 14
13 14
14 14
15 14
16 18
17 18
18 18
19 18
20 18
21 22
22 20
23 20
24 26
25 26
26 26
27 28
28 28
29 28
30 28
31 28
32 28
33 28
34 29
<<<sep_out_sample>>>
cmp %edx,%ecx
jge 16 <func1+0x16>
mov %ecx,%eax
imul %esi,%eax
mov %edi,%r9d
sub %eax,%r9d
mov %r9d,%eax
add %edx,%eax
jmp 1f <func1+0x1f>
lea (%rcx,%r8,1),%eax
imul %ecx,%eax
add %edi,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a4 < a3)
    {
        v6 = a3 - ((a4 * a2) - a1);
    }
    else
    {
        v6 = a1 + a4 * (a4 + a5);
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a2 - (a4 * a5);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 6
9 6
10 10
11 10
12 10
13 17
14 17
15 17
16 17
17 17
18 18
<<<sep_out_sample>>>
mov %edi,%r9d
sub %esi,%r9d
cmp %esi,%r8d
jge 15 <func1+0x15>
mov %edi,%r9d
imul %esi,%r9d
add %edx,%r9d
cmp %edi,%esi
jle 1f <func1+0x1f>
lea (%rcx,%rcx,1),%r10d
jmp 2b <func1+0x2b>
lea (%rcx,%rsi,1),%r10d
imul %ecx,%r10d
imul %ecx,%r10d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
lea (%r9,%r10,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a5 < a2)
    {
        v6 = a3 + a1 * a2;
    }
    else
    {
        v6 = a1 - a2;
    }
    if (a1 < a2)
    {
        v7 = a4 + a4;
    }
    else
    {
        v7 = a4 * ((a4 + a2) * a4);
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 10
2 10
3 4
4 4
5 6
6 6
7 6
8 12
9 12
10 14
11 14
12 18
13 18
14 18
15 20
16 20
17 20
18 20
19 20
20 20
21 21
<<<sep_out_sample>>>
mov %ecx,%r9d
sub %r8d,%r9d
cmp %esi,%edx
jge 16 <func1+0x16>
lea (%rcx,%rcx,1),%eax
mov %r8d,%r9d
sub %eax,%r9d
add %esi,%r9d
test %ecx,%ecx
jle 2a <func1+0x2a>
lea (%r8,%r8,1),%eax
mov %esi,%r10d
imul %edx,%r10d
sub %r10d,%eax
jmp 3b <func1+0x3b>
mov %edi,%eax
imul %edx,%eax
imul %esi,%eax
mov %r8d,%r11d
sub %eax,%r11d
mov %r11d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a3 < a2)
    {
        v6 = a2 - ((a4 + a4) - a5);
    }
    else
    {
        v6 = a4 + (a4 - a5) - a4;
    }
    if (v7 < a4)
    {
        v7 = a5 + a5 - a2 * a3;
    }
    else
    {
        v7 = a5 - a1 * a3 * a2;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 10
2 10
3 4
4 4
5 6
6 6
7 6
8 6
9 12
10 12
11 14
12 14
13 14
14 14
15 14
16 18
17 18
18 18
19 18
20 18
21 18
22 20
23 20
24 20
25 20
26 20
27 20
28 21
<<<sep_out_sample>>>
cmp %ecx,%edx
jge 12 <func1+0x12>
lea 0x1(%rsi),%r10d
imul %edx,%r10d
imul %edx,%r10d
jmp 1e <func1+0x1e>
mov %r8d,%r10d
sub %edi,%r10d
sub %edx,%r10d
sub %esi,%r10d
lea (%rdi,%r8,1),%r9d
sub %esi,%r9d
lea (%r8,%r8,1),%eax
mov %ecx,%r11d
imul %edi,%r11d
cmp %r8d,%ecx
cmovl %r11d,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r10d,%ecx
lea 0x1(%r9,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a3 < a4)
    {
        v6 = (a3 * a2 + a3) * a3;
    }
    else
    {
        v6 = ((a5 - a1) - a3) - a2;
    }
    v7 = a1 + a5 - a2;
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += a5 - a2 + a2;
    }
    if (a4 < a5)
    {
        v10 = a4 * a1;
    }
    else
    {
        v10 = a5 + a5;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 10
11 12
12 12
13 24
14 20
15 20
16 20
17 20
18 26
19 26
20 26
21 26
22 26
23 26
24 26
25 27
<<<sep_out_sample>>>
cmp %ecx,%edi
jge 14 <func1+0x14>
mov %r8d,%r10d
imul %esi,%r10d
imul %esi,%r10d
sub %r8d,%r10d
jmp 1b <func1+0x1b>
mov %r8d,%r10d
imul %r8d,%r10d
cmp %r8d,%ecx
jle 2f <func1+0x2f>
mov %edi,%r9d
imul %ecx,%r9d
sub %r8d,%r9d
sub %edx,%r9d
jmp 3d <func1+0x3d>
mov %edx,%r9d
imul %esi,%r9d
imul %esi,%r9d
sub %edi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a1 < a4)
    {
        v6 = (a5 * a2 * a2) - a5;
    }
    else
    {
        v6 = a5 * a5;
    }
    if (a5 < a4)
    {
        v7 = (a1 * a4 - a5) - a3;
    }
    else
    {
        v7 = (a3 * a2) * a2 - a1;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 12
11 12
12 14
13 14
14 14
15 14
16 14
17 18
18 18
19 18
20 18
21 20
22 20
23 20
24 20
25 20
26 20
27 21
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
lea (%r8,%rcx,1),%eax
sub %edi,%ecx
add %ecx,%eax
add %edi,%esi
imul %edx,%edi
lea (%rsi,%rdi,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a3 < a3)
    {
        v6 = ((a2 - a3) + a1) - a4;
    }
    else
    {
        v6 = a4 - a1;
    }
    v7 = (a1 + a2) + a3 * a1;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 13
2 13
3 13
4 13
5 10
6 13
7 12
8 12
9 12
10 13
11 14
<<<sep_out_sample>>>
lea (%r8,%r8,1),%r11d
cmp %r8d,%edi
cmovge %edx,%r11d
cmp %esi,%r8d
jle 1f <func1+0x1f>
mov %edi,%r9d
sub %edx,%r9d
sub %ecx,%r9d
imul %ecx,%r9d
jmp 2b <func1+0x2b>
lea 0x1(%rsi),%r9d
imul %ecx,%r9d
imul %edx,%r9d
cmp %ecx,%r9d
jge 3e <func1+0x3e>
lea (%rsi,%rdx,1),%eax
imul %esi,%eax
mov %edx,%r10d
sub %eax,%r10d
jmp 49 <func1+0x49>
lea (%rdx,%rdi,1),%r10d
imul %ecx,%r10d
sub %esi,%r10d
test %ecx,%ecx
jle 5c <func1+0x5c>
mov $0x1,%eax
sub %edi,%eax
imul %ecx,%eax
sub %r8d,%eax
jmp 61 <func1+0x61>
mov %edx,%eax
imul %esi,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r11d,%ecx
add %ecx,%r9d
add %r10d,%r9d
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a1 < a5)
    {
        v6 = a5 + a5;
    }
    else
    {
        v6 = a3 + (a2 - a2);
    }
    if (a2 < a5)
    {
        v7 = (a1 - a3 - a4) * a4;
    }
    else
    {
        v7 = (a4 * a2 + a4) * a3;
    }
    if (v7 < a4)
    {
        v8 = a3 - (a2 + a3) * a2;
    }
    else
    {
        v8 = (a4 * (a3 + a1)) - a2;
    }
    if (v9 < a4)
    {
        v9 = (a4 - (a1 * a4)) - a5;
    }
    else
    {
        v9 = a3 * a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 12
5 12
6 14
7 14
8 14
9 14
10 14
11 18
12 18
13 18
14 20
15 20
16 22
17 22
18 22
19 22
20 22
21 26
22 26
23 26
24 28
25 28
26 30
27 30
28 30
29 30
30 30
31 34
32 34
33 36
34 36
35 36
36 36
37 36
38 36
39 36
40 36
41 37
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%eax
lea (%rax,%r8,2),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (v7 < a2)
        {
            v6 += a3 + a2 + a5;
        }
        else
        {
            v6 += a4 + a4;
        }
    }
    v8 = a5 + a5;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 17
6 18
<<<sep_out_sample>>>
mov %edx,%eax
sub %esi,%eax
lea (%r8,%rdi,1),%r10d
sub %r10d,%eax
mov %r8d,%r10d
sub %esi,%r10d
add %edx,%r10d
lea (%r8,%r8,1),%r9d
neg %r9d
cmp %ecx,%edi
jge 27 <func1+0x27>
lea (%rdi,%rsi,2),%r9d
lea (%r9,%rcx,1),%r9d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a3 - a3;
    v7 = a3 - a2 - (a5 + a1);
    v8 = a3 - (a2 - a5);
    if (a1 < a4)
    {
        v9 = (a4 + a2) + a1 + a2;
    }
    else
    {
        v9 = (a4 - a5) - a5 - a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 5
2 5
3 5
4 5
5 6
6 6
7 6
8 13
9 13
10 7
11 7
12 9
13 9
14 15
15 15
16 15
17 15
18 15
19 15
20 15
21 16
<<<sep_out_sample>>>
push %rbx
mov %edx,%ebx
sub %r8d,%ebx
add %ecx,%ebx
imul %edx,%ebx
mov %ecx,%r11d
sub %edx,%r11d
imul %edx,%r11d
mov %r8d,%r10d
imul %esi,%r10d
mov %edx,%r9d
sub %esi,%r9d
mov %edx,%eax
imul %ecx,%eax
cmp %ecx,%edx
cmovl %eax,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %ebx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a3 * ((a3 - a5) + a4);
    v7 = a3 * (a4 - a3);
    v8 = a2 * a5 - a2 + a2;
    if (a3 < a4)
    {
        v9 = a2 - a2 + a3 * a4;
    }
    else
    {
        v9 = a3 - a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 4
3 4
4 4
5 4
6 5
7 5
8 5
9 6
10 6
11 13
12 13
13 9
14 9
15 9
16 9
17 15
18 15
19 15
20 15
21 15
22 15
23 15
24 15
25 16
26 16
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
lea 0x1(%rcx,%rax,1),%edx
mov %r8d,%eax
imul %esi,%eax
add %edx,%eax
add %edi,%r8d
sub %ecx,%r8d
imul %r8d,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (a4 < a4)
        {
            v6 += a1 * a1 * a3;
        }
        else
        {
            v6 += a3 * a4 + a4;
        }
    }
    v8 = a2 * (a5 + a5 - a5);
    if (a1 < a1)
    {
        v9 = (a3 + (a5 * a5)) - a4;
    }
    else
    {
        v9 = (a1 + a5 - a4) * a2;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a4)
    {
        if (v11 < a1)
        {
            v10 += a1 * a2 + a5;
        }
        else
        {
            v10 += (a5 + a2) + a4;
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 37
2 37
3 37
4 37
5 16
6 16
7 37
8 23
9 23
10 23
11 37
12 38
<<<sep_out_sample>>>
cmp %ecx,%edx
jge d <func1+0xd>
mov %ecx,%eax
imul %edx,%eax
add %esi,%eax
jmp 12 <func1+0x12>
mov %edi,%eax
imul %edi,%eax
add %edi,%edx
add %edx,%esi
add %r8d,%esi
add %esi,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a3 < a4)
    {
        v6 = a2 + a4 * a3;
    }
    else
    {
        v6 = a1 * a1;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        if (v8 < a1)
        {
            v7 += a3 * a3;
        }
        else
        {
            v7 += (a2 * a1) + a3;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 24
10 24
11 24
12 24
13 24
14 25
<<<sep_out_sample>>>
lea 0x2(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
lea 0x1(%rcx,%rax,1),%ecx
add $0x1,%r8d
imul %r8d,%edx
sub %esi,%edx
lea (%rcx,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (a2 < a4)
        {
            v6 += (a2 + a4) + a5;
        }
        else
        {
            v6 += a1 - a5;
        }
    }
    v8 = a3 * a5 + a3 - a2;
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        v9 += a2 * (a4 + a4);
    }
    v11 = 0;
    for (v12 = 0; v12++; v12<a4)
    {
        if (v7 < a5)
        {
            v11 += a3 + a2 * a5;
        }
        else
        {
            v11 += a3 + a2 + a5;
        }
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 34
2 34
3 34
4 34
5 16
6 16
7 16
8 34
9 35
<<<sep_out_sample>>>
mov %ecx,%eax
sub %r8d,%eax
add %edi,%eax
add %eax,%edx
add %esi,%edx
add %r8d,%edx
lea 0x1(%rcx,%rdx,1),%eax
add %eax,%esi
imul %ecx,%edi
imul %edi,%ecx
sub %r8d,%ecx
lea (%rsi,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (a5 < a4)
        {
            v6 += a3 * a3;
        }
        else
        {
            v6 += (a1 + a5) - a2;
        }
    }
    v8 = (a3 * (a4 - a4)) + a2;
    v9 = a4 * (a4 * a1) - a5;
    if (a1 < a1)
    {
        v10 = (a2 + a5) - a3 * a4;
    }
    else
    {
        v10 = a4 - a5;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 24
2 24
3 26
4 26
5 26
6 26
7 26
8 26
9 17
10 17
11 17
12 26
13 27
<<<sep_out_sample>>>
test %edi,%edi
jle 9 <func1+0x9>
lea (%rdx,%rdx,1),%eax
jmp 12 <func1+0x12>
mov %ecx,%eax
sub %edx,%eax
imul %edx,%eax
add %ecx,%eax
lea 0x1(%rdi,%rdx,1),%edi
add %esi,%edi
add %r8d,%edi
add %edi,%ecx
add %eax,%ecx
mov %edx,%eax
sub %esi,%eax
add %eax,%edx
sub %r8d,%edx
lea 0x1(%rcx,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    if (v6 < a1)
    {
        v6 = a3 + a3;
    }
    else
    {
        v6 = a3 * (a4 - a3) + a4;
    }
    if (a2 < a2)
    {
        v7 = a2 - a5;
    }
    else
    {
        v7 = a3 - a2 + a3 - a5;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += a3 * a4;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a2)
    {
        v10 += a2 + a5;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 10
6 10
7 10
8 10
9 30
10 30
11 30
12 30
13 30
14 18
15 18
16 18
17 18
18 30
19 31
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%r9d
add %esi,%r9d
add %r8d,%r9d
add %ecx,%r9d
mov %r8d,%eax
imul %esi,%eax
add %edx,%eax
imul %ecx,%eax
add %r9d,%eax
add %ecx,%edx
add %edx,%edi
sub %edi,%r8d
add %r8d,%eax
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = (a5 * a2 + a3) * a4;
    v7 = a5 - (a4 + a3 + a1);
    v8 = a2 + a5 - a5;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 7
2 7
3 7
4 7
5 4
6 4
7 4
8 4
9 7
10 5
11 5
12 5
13 7
14 7
15 8
<<<sep_out_sample>>>
cmp %edi,%r8d
jge 1f <func1+0x1f>
mov %esi,%r11d
sub %r8d,%r11d
lea (%rcx,%rcx,1),%r10d
mov %ecx,%r9d
sub %esi,%r9d
imul %r8d,%r9d
imul %r8d,%r9d
jmp 36 <func1+0x36>
mov %esi,%r11d
sub %edi,%r11d
imul %edi,%r11d
add %ecx,%r11d
lea (%rcx,%rcx,1),%r10d
mov %edi,%r9d
sub %esi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a5 < a1)
    {
        v6 = ((a2 - a1) - a5) + a1;
    }
    else
    {
        v6 = (a2 - a1) * a1 + a4;
    }
    v7 = ((a5 - a5) + a4) + a4;
    if (a5 < a1)
    {
        v8 = (a4 - a2) * a5 * a5;
    }
    else
    {
        v8 = a1 - a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 12
6 15
7 15
8 15
9 15
10 15
11 10
12 10
13 10
14 10
15 12
16 19
17 19
18 21
19 21
20 21
21 21
22 21
23 21
24 21
25 22
<<<sep_out_sample>>>
lea (%rcx,%rsi,1),%eax
cmp %ecx,%edi
jge 19 <func1+0x19>
mov %r8d,%eax
imul %r8d,%eax
mov %edx,%r9d
sub %eax,%r9d
mov %r9d,%eax
sub %edi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a1 < a4)
    {
        v6 = a3 - (a5 * a5) - a1;
    }
    else
    {
        v6 = a4 + a2;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += (a3 - a5) - a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 6
7 6
8 6
9 6
10 17
11 17
12 17
13 17
14 17
15 18
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
mov %edi,%esi
imul %edx,%esi
add %esi,%ecx
mov %edx,%esi
sub %ecx,%esi
add %esi,%eax
imul %r8d,%edi
sub %edx,%edi
imul %edi,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a3 - (a4 + (a1 * a3));
    v7 = (a1 * a5 - a3) * a3;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 4
7 4
8 4
9 4
10 6
11 5
12 5
13 5
14 6
15 7
<<<sep_out_sample>>>
mov $0x0,%r9d
test %esi,%esi
jle 17 <func1+0x17>
mov %ecx,%r9d
imul %esi,%r9d
add %edi,%r9d
sub %edx,%r9d
test %edi,%edi
jle 26 <func1+0x26>
mov %r8d,%eax
sub %ecx,%eax
sub %edx,%eax
sub %edx,%eax
jmp 2d <func1+0x2d>
mov %r8d,%eax
imul %r8d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (v6 < a2)
    {
        v6 = a1 + a4 * a2 - a3;
    }
    else
    {
        v6 = a5 - a5;
    }
    if (v7 < a1)
    {
        v7 = (a5 - a4 - a3) - a3;
    }
    else
    {
        v7 = a5 * a5;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 6
7 6
8 12
9 12
10 14
11 14
12 14
13 14
14 14
15 18
16 18
17 20
18 20
19 20
20 20
21 20
22 20
23 21
<<<sep_out_sample>>>
cmp %edi,%edx
jge e <func1+0xe>
mov %esi,%eax
sub %edi,%eax
lea (%rax,%rdx,2),%r9d
jmp 16 <func1+0x16>
lea -0x1(%rcx),%r9d
imul %edi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
mov %esi,%edi
sub %ecx,%edi
imul %edx,%esi
lea (%rdi,%rsi,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a3 < a1)
    {
        v6 = a3 + (a2 - a1 + a3);
    }
    else
    {
        v6 = (a4 * a1) - a1;
    }
    v7 = (a2 - a4) + a3 * a2;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 13
10 13
11 13
12 13
13 13
14 12
15 12
16 12
17 12
18 13
19 14
<<<sep_out_sample>>>
add %edx,%edi
lea (%rsi,%rdi,1),%eax
add %eax,%r8d
lea (%r8,%rcx,1),%eax
sub %ecx,%edx
imul %edx,%esi
add %esi,%eax
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a3 * a2 - a4 * a2;
    v7 = a1 + a3 + (a4 - a4);
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 5
2 6
3 6
4 6
5 4
6 4
7 6
8 6
9 7
<<<sep_out_sample>>>
lea (%r8,%rdx,1),%r9d
imul %edx,%r9d
imul %ecx,%r9d
add %edi,%edx
mov %esi,%edi
neg %edi
cmp %esi,%edx
jl 25 <func1+0x25>
mov %r8d,%edi
sub %ecx,%edi
mov %r8d,%r10d
imul %r8d,%r10d
sub %r10d,%edi
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
add %ecx,%edx
lea (%rdx,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = ((a5 + a3) * a3) * a4;
    v7 = a3 + a1;
    if (v7 < a2)
    {
        v8 = (a2 - a2) - a2;
    }
    else
    {
        v8 = (a5 - a4) - a5 * a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 5
5 8
6 8
7 6
8 6
9 12
10 12
11 12
12 12
13 12
14 14
15 14
16 14
17 14
18 14
19 14
20 15
<<<sep_out_sample>>>
cmp %ecx,%edi
jge e <func1+0xe>
lea (%rcx,%rdi,1),%eax
imul %edx,%eax
add %ecx,%eax
jmp 18 <func1+0x18>
mov %ecx,%eax
imul %esi,%eax
imul %edx,%eax
add %esi,%eax
add %edx,%edi
add %edi,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += (a2 * a5) - a5;
    }
    if (a1 < a4)
    {
        v8 = (a4 + a1) * a3 + a4;
    }
    else
    {
        v8 = a4 * a2 * a3 + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 15
8 15
9 15
10 15
11 17
12 17
13 17
14 17
15 17
16 18
<<<sep_out_sample>>>
cmp $0x1,%ecx
jle 10 <func1+0x10>
mov %r8d,%eax
sub %edi,%eax
lea (%rax,%rcx,2),%r9d
jmp 1f <func1+0x1f>
mov %esi,%r9d
imul %edx,%r9d
imul %edx,%r9d
imul %ecx,%r9d
mov %esi,%eax
cmp $0x1,%r8d
jg 30 <func1+0x30>
lea 0x1(%r8),%eax
imul %edx,%eax
sub %esi,%eax
add %r9d,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (v6 < a4)
        {
            v6 += a1 * a3;
        }
        else
        {
            v6 += a3 + (a3 - a4);
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        if (v7 < a1)
        {
            v8 += a2 * a2;
        }
        else
        {
            v8 += a4 - a5 * a2;
        }
    }
    if (v7 < a4)
    {
        v10 = (a4 + (a5 - a1)) + a4;
    }
    else
    {
        v10 = (a2 * a3) * a3 * a4;
    }
    if (v9 < a5)
    {
        v11 = a2 - (a3 - a3);
    }
    else
    {
        v11 = a5 * a3 + a3 - a2;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 28
2 28
3 30
4 30
5 30
6 30
7 34
8 34
9 34
10 34
11 38
12 36
13 36
14 42
15 42
16 42
17 44
18 44
19 44
20 44
21 44
22 44
23 45
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %eax,%ecx
lea -0x1(%r8),%eax
imul %edx,%eax
imul %r8d,%eax
add %ecx,%eax
imul %edi,%edx
add %edx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a4 < a4)
    {
        v6 = a3 - a2;
    }
    else
    {
        v6 = ((a5 * a3) - a3) * a5;
    }
    v7 = a5 + (a1 * a3);
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 13
2 13
3 13
4 13
5 10
6 10
7 10
8 13
9 12
10 12
11 13
12 14
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = ((a1 + a2) - a1) - a2;
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        if (a2 < a3)
        {
            v7 += (a2 * a3) + a3;
        }
        else
        {
            v7 += a4 - a1;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 18
<<<sep_out_sample>>>
mov %edi,%r9d
sub %edx,%r9d
cmp %r9d,%edi
jle 18 <func1+0x18>
lea (%rdx,%rcx,1),%r10d
lea (%rcx,%rsi,1),%eax
imul %r10d,%eax
jmp 23 <func1+0x23>
mov %edx,%eax
sub %edi,%eax
imul %r8d,%eax
imul %edi,%eax
lea (%rdi,%rdx,2),%edx
lea (%rdx,%rcx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a1 - a3;
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += a4 * a5 * a4;
    }
    if (v6 < a1)
    {
        v9 = (a3 + a4) * (a4 + a2);
    }
    else
    {
        v9 = (a3 - a1) * a5 * a1;
    }
    v10 = a3 + a4;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 10
4 10
5 12
6 12
7 12
8 12
9 16
10 16
11 16
12 16
13 19
14 19
15 19
16 19
17 19
18 19
19 19
20 20
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += (a4 * a3) * a3;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        if (a2 < a5)
        {
            v8 += a5 * a1 - a2;
        }
        else
        {
            v8 += a2 + a3 - a5;
        }
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a4)
    {
        if (v7 < a5)
        {
            v10 += a2 + a3 - a2;
        }
        else
        {
            v10 += a4 + (a3 + a2);
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 33
2 33
3 33
4 33
5 34
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
add %esi,%ecx
mov %r8d,%eax
imul %edi,%eax
add %r8d,%edi
imul %eax,%edi
lea 0x1(%rcx,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = (a5 * a1) * (a1 + a5);
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        if (v6 < a1)
        {
            v7 += a4 * a3 - a1;
        }
        else
        {
            v7 += a4 - (a5 + a3);
        }
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a1)
    {
        if (v7 < a4)
        {
            v9 += a5 + (a1 - a5);
        }
        else
        {
            v9 += a2 * a2 + a4;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 29
2 29
3 29
4 29
5 4
6 4
7 4
8 4
9 29
10 30
<<<sep_out_sample>>>
lea (%rsi,%r8,1),%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a2 + a5 + a2 - a2;
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += (a4 + a3) * a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 10
3 10
4 10
5 10
6 10
7 11
<<<sep_out_sample>>>
cmp %r8d,%esi
jle 15 <func1+0x15>
mov %edx,%r9d
imul %esi,%r9d
lea (%rsi,%r8,1),%eax
add %r9d,%eax
jmp 21 <func1+0x21>
lea (%rdx,%rcx,1),%r9d
mov %edx,%eax
imul %edi,%eax
add %r9d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (a5 < a5)
        {
            v6 += a4 * a1;
        }
        else
        {
            v6 += (a3 - a1) * a2;
        }
    }
    if (a5 < a2)
    {
        v8 = a3 * a2 + (a2 + a5);
    }
    else
    {
        v8 = a3 + a4 + a3 * a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 18
7 18
8 22
9 22
10 22
11 22
12 24
13 24
14 24
15 24
16 24
17 25
<<<sep_out_sample>>>
push %rbx
mov $0x0,%r9d
cmp %edi,%ecx
jge 15 <func1+0x15>
mov %edx,%r9d
sub %edi,%r9d
imul %ecx,%r9d
lea (%r8,%rcx,2),%r11d
add %esi,%r11d
mov %esi,%r10d
sub %edi,%r10d
cmp %edx,%ecx
jl 34 <func1+0x34>
mov %ecx,%r10d
imul %esi,%r10d
lea (%rdx,%r8,1),%ebx
sub %ebx,%r10d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
add %r11d,%eax
add %r10d,%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a4 < a1)
    {
        v6 = a4 * (a3 - a1);
    }
    else
    {
        v6 = a4 - a4;
    }
    v7 = (a4 + (a4 + a5)) + a2;
    if (a4 < a3)
    {
        v8 = a2 - (a2 + a1) + a2;
    }
    else
    {
        v8 = (a4 * a2) - (a3 + a5);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 2
2 10
3 4
4 4
5 6
6 6
7 6
8 12
9 12
10 15
11 15
12 13
13 13
14 19
15 19
16 19
17 19
18 21
19 21
20 21
21 21
22 21
23 21
24 21
25 22
26 22
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %r8d,%edx
lea 0x1(%rcx,%rdx,1),%eax
imul %esi,%r8d
imul %edi,%ecx
add %r8d,%ecx
add %ecx,%eax
lea (%rdi,%rsi,2),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (a2 < a4)
        {
            v6 += a4 - a3 * a5;
        }
        else
        {
            v6 += a5 - a3 * a2;
        }
    }
    if (a4 < a4)
    {
        v8 = a4 * (a3 - (a2 - a5));
    }
    else
    {
        v8 = a2 * a5 + a4 * a1;
    }
    v9 = (a2 + a1) + a2;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 25
2 25
3 25
4 25
5 22
6 22
7 22
8 25
9 24
10 25
11 26
<<<sep_out_sample>>>
lea (%rdi,%rsi,1),%r10d
mov %edx,%r9d
imul %ecx,%r9d
sub %r9d,%r10d
cmp %r8d,%edx
jle 20 <func1+0x20>
lea (%rdi,%rcx,1),%r9d
add %esi,%r9d
imul %r8d,%r9d
jmp 2b <func1+0x2b>
lea 0x1(%rdi),%r9d
imul %esi,%r9d
sub %edi,%r9d
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
add %esi,%ecx
add %r10d,%ecx
add %r9d,%ecx
imul %edi,%edi
add %edi,%r8d
sub %edx,%r8d
lea (%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a1 + a2 - a3 * a4;
    if (a5 < a3)
    {
        v7 = (a1 + a4 + a2) * a5;
    }
    else
    {
        v7 = a1 * a2 + a2 - a1;
    }
    v8 = a5 + a1 * a1 - a3;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 5
6 5
7 7
8 7
9 7
10 7
11 11
12 11
13 11
14 14
15 14
16 14
17 14
18 14
19 14
20 13
21 13
22 13
23 14
24 15
<<<sep_out_sample>>>
lea (%rdi,%rdi,1),%eax
imul %r8d,%eax
sub %edx,%eax
mov %ecx,%r9d
imul %edi,%r9d
add %r8d,%r9d
sub %esi,%r9d
lea (%rdi,%rdx,1),%r10d
lea (%r10,%rdx,1),%r11d
add %r11d,%edi
cmp %r9d,%esi
jle 2a <func1+0x2a>
add %ecx,%edx
jmp 37 <func1+0x37>
mov %edx,%r11d
imul %ecx,%r11d
add %r8d,%r11d
add %r11d,%edx
add %r10d,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%eax
add %r9d,%eax
add %edi,%eax
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = ((a1 + a1) * a5) - a3;
    v7 = a4 * a1 + a5 - a2;
    v8 = a1 + a3 + a3 + a1;
    if (v7 < a2)
    {
        v9 = a3 + a4 + a4 - a4;
    }
    else
    {
        v9 = (a5 + (a3 * a4)) + a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 5
5 5
6 5
7 5
8 6
9 6
10 6
11 7
12 7
13 9
14 9
15 13
16 13
17 13
18 13
19 15
20 15
21 15
22 15
23 15
24 15
25 15
26 16
<<<sep_out_sample>>>
cmp %r8d,%edx
jge 15 <func1+0x15>
mov %ecx,%r9d
sub %edi,%r9d
imul %edi,%r9d
imul %esi,%r9d
jmp 23 <func1+0x23>
mov %ecx,%r9d
sub %edi,%r9d
lea (%rdi,%r8,1),%eax
imul %eax,%r9d
mov $0x0,%r10d
cmp %r8d,%r9d
jge 3c <func1+0x3c>
mov %edx,%r10d
sub %ecx,%r10d
mov %edx,%eax
imul %edx,%eax
add %eax,%r10d
cmp %edi,%ecx
jle 4a <func1+0x4a>
mov %edi,%eax
imul %edx,%eax
imul %edx,%eax
jmp 59 <func1+0x59>
mov %r8d,%eax
sub %ecx,%eax
mov %r8d,%r11d
imul %edi,%r11d
sub %r11d,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
add %r9d,%r10d
add %r10d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a3 < a5)
    {
        v6 = (a1 * (a4 - a1)) * a2;
    }
    else
    {
        v6 = (a4 - a1) * (a1 + a5);
    }
    if (v6 < a5)
    {
        v7 = a3 - a4 + (a3 * a3);
    }
    else
    {
        v7 = a4 - a4;
    }
    if (a1 < a4)
    {
        v8 = a1 * a3 * a3;
    }
    else
    {
        v8 = a5 - a4 - a5 * a1;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        v9 += a3 - a5 * a4;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 18
13 12
14 12
15 14
16 14
17 14
18 14
19 14
20 20
21 20
22 22
23 22
24 22
25 22
26 26
27 26
28 26
29 26
30 26
31 33
32 33
33 33
34 33
35 33
36 33
37 33
38 34
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %r8d,%edx
lea 0x1(%rcx,%rdx,1),%eax
imul %r8d,%esi
sub %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a5 + a4 - a4;
    }
    v8 = a2 * (a1 - a5 - a1);
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 9
6 10
7 11
<<<sep_out_sample>>>
mov %ecx,%eax
imul %r8d,%eax
add %edi,%eax
mov %esi,%r11d
sub %eax,%r11d
mov %ecx,%r10d
sub %esi,%r10d
add %ecx,%r10d
sub %r8d,%r10d
lea (%rdi,%r8,1),%eax
lea (%rdx,%rdx,1),%r9d
cmp %esi,%ecx
cmovl %eax,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a2 - (a4 * a5 + a1);
    v7 = (a4 - a2 + a4) - a5;
    if (a4 < a2)
    {
        v8 = a1 + a5 + a2 - a2;
    }
    else
    {
        v8 = a3 + a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 4
6 5
7 5
8 5
9 5
10 8
11 8
12 8
13 8
14 14
15 14
16 14
17 14
18 14
19 14
20 14
21 15
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
sub %r8d,%ecx
add %ecx,%eax
lea (%rsi,%rdi,1),%r9d
add %r9d,%eax
sub %edx,%edi
imul %edi,%r8d
add %r8d,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a4 - a5;
    v7 = ((a4 + a2) - a4) + a1;
    v8 = a2 + (a1 - a3) * a5;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 7
2 7
3 7
4 7
5 4
6 7
7 5
8 7
9 6
10 6
11 6
12 7
13 8
<<<sep_out_sample>>>
mov %esi,%eax
imul %edx,%eax
lea (%rsi,%rdi,2),%edi
lea 0x1(%rdi,%rax,1),%eax
add %eax,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += (a5 + a1) + a5;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        if (a4 < a2)
        {
            v8 += a2 - a4 + a1;
        }
        else
        {
            v8 += a5 - a2 - a3;
        }
    }
    v10 = a2 + a1 + a2 * a3;
    v11 = 0;
    for (v12 = 0; v12++; v12<a3)
    {
        if (a1 < a3)
        {
            v11 += a3 * a3 * a3;
        }
        else
        {
            v11 += (a5 * a4) + a4;
        }
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 34
4 34
5 34
6 34
7 34
8 34
9 35
<<<sep_out_sample>>>
mov %edi,%r9d
sub %edx,%r9d
cmp %edx,%ecx
jge 11 <func1+0x11>
lea (%rdi,%r8,1),%r9d
sub %esi,%r9d
cmp %esi,%edi
jge 26 <func1+0x26>
mov %esi,%r10d
imul %r8d,%r10d
mov %edx,%eax
imul %ecx,%eax
add %r10d,%eax
jmp 35 <func1+0x35>
lea (%rdi,%rcx,1),%eax
imul %ecx,%eax
mov %edx,%r11d
sub %eax,%r11d
mov %r11d,%eax
cmp %r8d,%eax
jge 47 <func1+0x47>
mov %ecx,%r10d
imul %ecx,%r10d
lea (%r10,%r8,2),%r10d
jmp 55 <func1+0x55>
mov %r8d,%r10d
imul %r8d,%r10d
add %edx,%r10d
imul %edi,%r10d
lea (%rdi,%rdx,1),%r11d
add %r11d,%esi
add %r8d,%esi
add %esi,%ecx
add %ecx,%r9d
add %r9d,%eax
add %r10d,%eax
sub $0x1,%r8d
imul %r8d,%edx
add %edx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a4 < a3)
    {
        v6 = a1 + a5 - a2;
    }
    else
    {
        v6 = a1 - a3;
    }
    if (a1 < a2)
    {
        v7 = (a2 * a5) + (a3 * a4);
    }
    else
    {
        v7 = a3 - a4 * (a1 + a4);
    }
    if (v7 < a5)
    {
        v8 = a5 + (a4 * a4) + a5;
    }
    else
    {
        v8 = (a3 + a5 * a5) * a1;
    }
    v9 = a1 + ((a5 * a3) - a3);
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 4
4 4
5 6
6 6
7 12
8 12
9 14
10 14
11 14
12 14
13 14
14 14
15 18
16 18
17 18
18 18
19 18
20 20
21 20
22 22
23 22
24 22
25 22
26 26
27 26
28 26
29 26
30 29
31 29
32 29
33 29
34 29
35 29
36 29
37 28
38 28
39 28
40 29
41 30
<<<sep_out_sample>>>
mov %r8d,%eax
neg %eax
sub %edi,%eax
cmp %esi,%edx
jge 19 <func1+0x19>
mov %esi,%eax
sub %edi,%eax
mov %esi,%r9d
imul %r8d,%r9d
sub %r9d,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += (a4 + a5) + a1;
    }
    if (a3 < a2)
    {
        v8 = a2 - a1 - (a2 * a5);
    }
    else
    {
        v8 = a2 - a2 - a5 - a1;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a1)
    {
        if (v7 < a2)
        {
            v9 += (a4 + a5) + a2;
        }
        else
        {
            v9 += a4 - a3 + a2;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 15
2 15
3 15
4 9
5 9
6 11
7 11
8 11
9 11
10 11
11 29
12 29
13 29
14 29
15 29
16 30
<<<sep_out_sample>>>
lea (%r8,%rdx,1),%r9d
sub %ecx,%r9d
mov %esi,%eax
sub %edx,%eax
add %ecx,%eax
lea (%r9,%rdi,2),%edi
lea (%rdi,%rax,1),%eax
add %eax,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (a3 < a4)
        {
            v6 += a5 - a5 - a5;
        }
        else
        {
            v6 += a2 * a5;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += a1 * a1 - a1;
    }
    v10 = a5 + a3 - a4 + a1;
    if (a2 < a2)
    {
        v11 = ((a4 - a5) - a1) + a2;
    }
    else
    {
        v11 = (a2 - a3) + a4;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 28
4 28
5 28
6 30
7 30
8 30
9 30
10 30
11 30
12 31
<<<sep_out_sample>>>
lea (%rcx,%rsi,1),%r9d
test %r8d,%r8d
jle 10 <func1+0x10>
mov %ecx,%eax
imul %edx,%eax
jmp 19 <func1+0x19>
mov %edx,%eax
imul %esi,%eax
sub %edi,%eax
add %esi,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a4 + a2;
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += a2 * a2;
    }
    if (v7 < a5)
    {
        v9 = ((a4 + a5) - a5) * a3;
    }
    else
    {
        v9 = (a3 * a2 - a1) + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 10
3 10
4 12
5 12
6 12
7 16
8 16
9 16
10 16
11 18
12 18
13 18
14 18
15 18
16 18
17 19
<<<sep_out_sample>>>
cmp %r8d,%ecx
jge f <func1+0xf>
lea -0x1(%rdx,%r8,1),%eax
imul %edi,%eax
jmp 19 <func1+0x19>
mov %r8d,%eax
sub %edi,%eax
imul %edi,%eax
sub %ecx,%eax
lea (%rdi,%rdx,1),%r9d
add %r9d,%esi
add %r8d,%esi
add %esi,%ecx
add %ecx,%eax
imul %r8d,%edi
add $0x1,%edi
imul %edi,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a4 < a5)
    {
        v6 = (a5 + a3) * a1 - a1;
    }
    else
    {
        v6 = (a5 - a1) * a1 - a4;
    }
    v7 = a3 * (a1 * a5) + a3;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 10
10 13
11 13
12 13
13 13
14 13
15 12
16 12
17 12
18 13
19 14
<<<sep_out_sample>>>
add %ecx,%edi
add %edx,%edi
add %edi,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%esi
lea (%rcx,%rcx,2),%eax
imul %edx,%eax
add %esi,%eax
sub %r8d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += (a3 * a2) * a5;
    }
    v8 = (a4 + a4 + a4) * a3;
    v9 = a3 - a5;
    if (a2 < a2)
    {
        v10 = a3 - a5;
    }
    else
    {
        v10 = a2 - (a2 - a4);
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 19
2 19
3 19
4 19
5 19
6 9
7 9
8 19
9 10
10 19
11 20
<<<sep_out_sample>>>
mov %ecx,%r9d
sub %edx,%r9d
test %ecx,%ecx
jle 15 <func1+0x15>
lea 0x1(%r8),%eax
imul %edi,%eax
add %edx,%eax
jmp 1c <func1+0x1c>
mov %edx,%eax
imul %edi,%eax
neg %eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %r9d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a5 + a2;
    }
    v8 = (a3 - a3) - a3 + a4;
    if (v6 < a4)
    {
        v9 = (a1 + a5 * a1) + a3;
    }
    else
    {
        v9 = a5 - (a5 + (a3 * a1));
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 10
4 10
5 12
6 12
7 12
8 12
9 16
10 16
11 16
12 18
13 18
14 18
15 18
16 18
17 18
18 19
<<<sep_out_sample>>>
lea (%rdi,%rcx,1),%eax
cmp %ecx,%edi
jge f <func1+0xf>
lea (%rcx,%rdx,1),%eax
imul %edi,%eax
sub %ecx,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %r8d,%esi
add %esi,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a1 < a4)
    {
        v6 = a1 * (a4 + a3) - a4;
    }
    else
    {
        v6 = a3 + a4 + a1 - a3;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a2 * a3;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        if (v8 < a5)
        {
            v9 += a1 - (a1 + a2);
        }
        else
        {
            v9 += a4 - a4 + a1;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 6
7 29
8 29
9 29
10 29
11 29
12 30
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
add %r8d,%ecx
imul %edx,%edx
imul %edx,%edi
lea 0x1(%rcx,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = (a3 * a3) * a1;
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        if (a3 < a3)
        {
            v7 += a5 + a4;
        }
        else
        {
            v7 += (a4 * a5) * a2;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 4
6 4
7 17
8 18
<<<sep_out_sample>>>
cmp %esi,%r8d
jge 15 <func1+0x15>
mov %ecx,%eax
imul %edi,%eax
mov %edx,%r9d
sub %eax,%r9d
add %edx,%r9d
jmp 20 <func1+0x20>
lea 0x1(%rdx),%r9d
imul %edx,%r9d
add %r8d,%r9d
mov %edx,%eax
sub %r8d,%eax
cmp %edi,%ecx
jle 30 <func1+0x30>
lea (%rdx,%rdi,1),%eax
imul %r8d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a5 < a2)
    {
        v6 = a3 + (a3 - a4 * a1);
    }
    else
    {
        v6 = a5 + (a3 + a3 * a3);
    }
    if (a1 < a4)
    {
        v7 = a3 * a5 + a5 * a1;
    }
    else
    {
        v7 = a3 - a5;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        if (a1 < a2)
        {
            v8 += a5 + (a3 + a2);
        }
        else
        {
            v8 += a2 * a1 - a1;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 6
9 10
10 10
11 10
12 18
13 18
14 12
15 12
16 14
17 14
18 32
19 32
20 32
21 32
22 32
23 32
24 33
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
mov %edx,%r9d
sub %edi,%r9d
imul %esi,%r9d
add %r9d,%edx
add %edx,%eax
imul %r8d,%edi
add %edi,%ecx
add %ecx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a3 + ((a3 - a1) * a2);
    v7 = (a5 * a1 + a4) + a2;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 4
7 4
8 4
9 6
10 5
11 5
12 5
13 6
14 7
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %r8d,%edx
lea (%r8,%rcx,2),%eax
lea 0x1(%rax,%rdx,1),%eax
imul %esi,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a5 + a3 + a1;
    }
    if (a4 < a4)
    {
        v8 = a3 - (a2 + a1 * a3);
    }
    else
    {
        v8 = a5 + a4;
    }
    v9 = a5 * a2;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 15
5 18
6 17
7 18
8 19
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
imul %edx,%esi
add %esi,%ecx
add %edi,%ecx
add %ecx,%eax
sub %edi,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = ((a3 * a2) + a4) + a1;
    v7 = a5 - a1;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 4
7 4
8 6
9 5
10 6
11 7
<<<sep_out_sample>>>
test %r8d,%r8d
jle 10 <func1+0x10>
lea 0x1(%r8),%eax
imul %edx,%eax
add %ecx,%eax
jmp 16 <func1+0x16>
mov %r8d,%eax
imul %esi,%eax
lea 0x1(%rax,%rdi,1),%eax
add %eax,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += (a4 + a4) + a2;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        if (a4 < a2)
        {
            v8 += a1 - a2 + a2;
        }
        else
        {
            v8 += (a1 * a4) + a1;
        }
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a2)
    {
        v10 += a4 - a2;
    }
    if (v10 < a5)
    {
        v12 = ((a5 * a3) + a3) + a4;
    }
    else
    {
        v12 = a5 * a2;
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 26
2 26
3 28
4 28
5 28
6 28
7 32
8 32
9 34
10 34
11 34
12 34
13 34
14 35
<<<sep_out_sample>>>
add %edi,%edx
add %edx,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%eax
imul %r8d,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (a3 < a3)
        {
            v6 += (a5 - a3) - a3;
        }
        else
        {
            v6 += a4 * a3 * a2;
        }
    }
    v8 = a5 * a1;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 16
6 17
7 18
<<<sep_out_sample>>>
mov %edx,%eax
sub %ecx,%eax
test %edi,%edi
jle f <func1+0xf>
mov %edi,%eax
imul %edx,%eax
add %ecx,%eax
add %edi,%edx
add %edx,%esi
add %r8d,%esi
add %ecx,%esi
add %esi,%eax
lea -0x1(%rcx),%edx
imul %edx,%ecx
add %ecx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (v6 < a1)
    {
        v6 = a4 + a1 * a3;
    }
    else
    {
        v6 = a3 - a4;
    }
    v7 = a1 - (a4 - a4 * a4);
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 10
2 10
3 4
4 4
5 6
6 6
7 6
8 13
9 13
10 13
11 13
12 13
13 12
14 12
15 12
16 13
17 14
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
lea (%r8,%rcx,1),%eax
imul %ecx,%esi
add %esi,%eax
imul %edx,%edi
imul %edi,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a4 * a2;
    v7 = a3 * a1 * a4;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 6
7 5
8 5
9 6
10 7
<<<sep_out_sample>>>
mov %esi,%eax
imul %r8d,%eax
mov %ecx,%r9d
sub %eax,%r9d
add %r8d,%r9d
test %esi,%esi
jle 19 <func1+0x19>
mov %esi,%eax
sub %edx,%eax
jmp 23 <func1+0x23>
mov %edx,%eax
sub %ecx,%eax
imul %edx,%eax
add %r8d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = (a2 - a2) * a3 * a1;
    v7 = (a4 - a2 * a5) + a5;
    if (v6 < a2)
    {
        v8 = a2 + ((a5 - a3) - a5);
    }
    else
    {
        v8 = a5 + (a3 - a4) * a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 5
2 5
3 5
4 5
5 5
6 6
7 6
8 8
9 8
10 8
11 12
12 12
13 12
14 12
15 14
16 14
17 14
18 14
19 14
20 14
21 15
<<<sep_out_sample>>>
mov %esi,%eax
cmp %ecx,%edx
jg 18 <func1+0x18>
mov %edx,%eax
imul %esi,%eax
imul %r8d,%eax
mov %ecx,%r9d
sub %eax,%r9d
mov %r9d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a4 - (a3 + a4);
    }
    if (a4 < a3)
    {
        v8 = (a1 - a1) + a2;
    }
    else
    {
        v8 = a4 - a3 * a2 * a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 11
2 9
3 9
4 15
5 15
6 15
7 15
8 15
9 15
10 17
11 17
12 17
13 17
14 17
15 18
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea (%r8,%rcx,1),%esi
imul %edx,%edi
imul %ecx,%ecx
add %edi,%ecx
lea 0x1(%rsi,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = (a1 * a3) + a4 * a4;
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += (a4 + a4) * a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 4
6 4
7 4
8 10
9 11
<<<sep_out_sample>>>
cmp %r8d,%esi
jge 1a <func1+0x1a>
lea (%r8,%rcx,1),%r10d
mov %edi,%eax
imul %r8d,%eax
mov %edx,%r9d
sub %eax,%r9d
add %edi,%r9d
jmp 30 <func1+0x30>
mov %edi,%r10d
sub %esi,%r10d
mov %esi,%r9d
sub %edi,%r9d
mov %edx,%r11d
imul %ecx,%r11d
sub %r11d,%r9d
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a1 - (a4 + a1);
    }
    if (a2 < a5)
    {
        v8 = a5 + a4;
    }
    else
    {
        v8 = a1 - a2;
    }
    if (a2 < a5)
    {
        v9 = a3 - (a1 * a5) + a1;
    }
    else
    {
        v9 = (a2 - a1) - a3 * a4;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a5)
    {
        v10 += a3 + a1 - a1;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 19
5 19
6 19
7 19
8 19
9 19
10 15
11 15
12 23
13 23
14 23
15 23
16 23
17 30
18 30
19 30
20 30
21 30
22 30
23 31
<<<sep_out_sample>>>
mov %r8d,%eax
sub %esi,%eax
lea (%rax,%rcx,2),%r9d
lea (%rcx,%r8,1),%r11d
cmp %edx,%esi
jl 1b <func1+0x1b>
mov %ecx,%r11d
imul %ecx,%r11d
sub %edx,%r11d
mov %r8d,%r10d
sub %ecx,%r10d
cmp %edi,%r9d
jge 34 <func1+0x34>
mov %edx,%r10d
sub %ecx,%r10d
imul %edx,%r10d
imul %edi,%r10d
mov %edi,%eax
neg %eax
sub %esi,%eax
cmp %esi,%r8d
jge 4a <func1+0x4a>
mov %esi,%eax
sub %r8d,%eax
sub %edx,%eax
imul %r8d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
add %r11d,%r9d
add %r9d,%r10d
add %r10d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = (a5 - a2) + (a4 + a4);
    if (a2 < a3)
    {
        v7 = a4 + a5;
    }
    else
    {
        v7 = (a4 * a4) - a3;
    }
    if (v6 < a1)
    {
        v8 = a1 * ((a3 - a4) * a3);
    }
    else
    {
        v8 = a5 - a4;
    }
    if (a5 < a2)
    {
        v9 = a5 * (a2 - a5 - a3);
    }
    else
    {
        v9 = ((a2 - a2) - a1) - a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 7
5 5
6 5
7 11
8 11
9 11
10 19
11 19
12 13
13 13
14 15
15 15
16 15
17 15
18 27
19 27
20 27
21 21
22 21
23 23
24 23
25 23
26 23
27 29
28 29
29 29
30 29
31 29
32 29
33 29
34 29
35 30
<<<sep_out_sample>>>
push %rbx
mov %ecx,%eax
sub %esi,%eax
lea (%rdx,%rsi,1),%r11d
test %edx,%edx
cmovg %eax,%r11d
lea (%rcx,%rdx,1),%r9d
cmp %r8d,%edi
jge 29 <func1+0x29>
mov $0x1,%r9d
sub %r8d,%r9d
imul %edi,%r9d
imul %ecx,%r9d
mov %edx,%r10d
sub %esi,%r10d
mov %r8d,%ebx
sub %edi,%ebx
add %r8d,%r10d
cmp %esi,%r9d
cmovl %ebx,%r10d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r11d,%ecx
add %ecx,%r9d
lea (%r9,%r10,1),%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (v6 < a3)
    {
        v6 = (a1 - (a1 - a4)) - a2;
    }
    else
    {
        v6 = a2 - a3 + a3 + a3;
    }
    if (a1 < a5)
    {
        v7 = (a1 - (a1 * a5)) * a4;
    }
    else
    {
        v7 = a4 + a3;
    }
    if (v7 < a2)
    {
        v8 = a5 - a1;
    }
    else
    {
        v8 = a5 + (a3 - a2);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 2
2 6
3 6
4 6
5 6
6 6
7 18
8 12
9 12
10 14
11 14
12 14
13 14
14 26
15 26
16 22
17 22
18 22
19 22
20 22
21 28
22 28
23 28
24 28
25 28
26 28
27 28
28 29
29 29
<<<sep_out_sample>>>
cmp $0x1,%edi
jle 11 <func1+0x11>
mov %edi,%eax
imul %edi,%eax
add %r8d,%eax
sub %ecx,%eax
jmp 1d <func1+0x1d>
mov %r8d,%eax
imul %esi,%eax
sub $0x1,%eax
imul %esi,%eax
mov %r8d,%r9d
sub %edi,%r9d
cmp %edx,%esi
jg 34 <func1+0x34>
mov %edi,%r9d
imul %esi,%r9d
add %ecx,%r9d
add %esi,%r9d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (a5 < a2)
        {
            v6 += a5 * a2;
        }
        else
        {
            v6 += a3 * a3 * a4;
        }
    }
    if (v7 < a1)
    {
        v8 = a1 * a1 + a5 - a4;
    }
    else
    {
        v8 = ((a5 * a2) * a2) - a2;
    }
    if (a3 < a2)
    {
        v9 = a5 - a1;
    }
    else
    {
        v9 = a4 + (a1 * a2) + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 18
7 18
8 22
9 22
10 22
11 22
12 26
13 26
14 24
15 24
16 30
17 30
18 30
19 30
20 32
21 32
22 32
23 32
24 32
25 32
26 33
<<<sep_out_sample>>>
cmp %r8d,%edi
jge 11 <func1+0x11>
mov %edx,%r9d
sub %esi,%r9d
imul %edi,%r9d
jmp 1d <func1+0x1d>
lea 0x1(%r8),%r9d
imul %ecx,%r9d
imul %esi,%r9d
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
lea (%r8,%rsi,1),%r9d
imul %ecx,%edi
add %r9d,%edi
add %edi,%eax
imul %edx,%esi
imul %esi,%r8d
add %r8d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a1 < a5)
    {
        v6 = a1 * a3 - a2 * a1;
    }
    else
    {
        v6 = (a4 + a5 * a4) * a2;
    }
    v7 = a5 + a2 + a4 * a1;
    v8 = a5 * (a3 * a2) + a4;
    v9 = 0;
    for (v10 = 0; v10++; v10<a1)
    {
        v9 += a5 * a4 * a4;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 19
11 19
12 19
13 19
14 19
15 12
16 12
17 12
18 19
19 13
20 13
21 13
22 19
23 20
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %r8d,%esi
add %ecx,%esi
sub %r8d,%ecx
imul %ecx,%edx
lea 0x1(%rsi,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a3 * (a4 - a5);
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += a5 * a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 4
6 4
7 10
8 11
<<<sep_out_sample>>>
lea (%r8,%rdx,1),%r10d
sub %edi,%r10d
imul %edi,%r10d
cmp %edi,%r8d
jle 18 <func1+0x18>
mov %edi,%r9d
sub %ecx,%r9d
jmp 24 <func1+0x24>
mov %edx,%r9d
sub %esi,%r9d
sub %r8d,%r9d
sub %ecx,%r9d
lea (%rcx,%rdi,1),%eax
cmp %ecx,%r8d
jg 36 <func1+0x36>
mov %edx,%eax
imul %edi,%eax
add %r8d,%eax
sub %edx,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a2 - a5 - a4;
    }
    v8 = ((a5 + a3) - a1) * a1;
    if (a1 < a5)
    {
        v9 = a4 - a4 - a4 + a1;
    }
    else
    {
        v9 = (a3 - a2) - a5 - a4;
    }
    if (a4 < a5)
    {
        v10 = a4 + a1;
    }
    else
    {
        v10 = a3 * a1 + a5 - a3;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 9
4 10
5 10
6 12
7 12
8 12
9 16
10 16
11 16
12 16
13 20
14 18
15 18
16 24
17 24
18 24
19 24
20 26
21 26
22 26
23 26
24 26
25 26
26 26
27 27
<<<sep_out_sample>>>
mov %edx,%r9d
sub %r8d,%r9d
lea (%r8,%rsi,1),%eax
cmp %edi,%r8d
jl 16 <func1+0x16>
mov %edx,%eax
imul %esi,%eax
add %edi,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = a3 - a5;
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        if (a3 < a2)
        {
            v7 += a1 * (a2 * a5);
        }
        else
        {
            v7 += a4 - a1;
        }
    }
    if (a5 < a1)
    {
        v9 = a5 + a2;
    }
    else
    {
        v9 = a3 * a2 + a1;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a2)
    {
        if (a4 < a1)
        {
            v10 += (a2 * a5) + a4;
        }
        else
        {
            v10 += a1 - a2;
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 19
4 17
5 17
6 23
7 23
8 23
9 37
10 37
11 37
12 37
13 37
14 37
15 38
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %esi,%edi
lea (%rax,%rdi,1),%esi
add %ecx,%edx
imul %edx,%r8d
lea 0x1(%rsi,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a2 + a1;
    v7 = a5 * (a3 + a4);
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        if (v8 < a4)
        {
            v8 += a2 * a1;
        }
        else
        {
            v8 += (a5 + a3) - a3;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 18
5 4
6 18
7 5
8 5
9 18
10 19
<<<sep_out_sample>>>
mov %ecx,%r11d
sub %r8d,%r11d
imul %ecx,%r11d
mov %edi,%r10d
sub %edx,%r10d
sub %esi,%r10d
imul %r8d,%r10d
mov $0x0,%r9d
cmp %edx,%r8d
jg 2a <func1+0x2a>
mov %ecx,%eax
sub %edi,%eax
lea (%rax,%r8,2),%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a4 * (a4 - a5);
    v7 = (a1 - a3 - a2) * a5;
    if (a3 < a5)
    {
        v8 = a5 - a5;
    }
    else
    {
        v8 = a5 + ((a4 - a1) + a5);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 5
5 5
6 5
7 5
8 8
9 6
10 6
11 12
12 12
13 12
14 14
15 14
16 14
17 14
18 14
19 14
20 14
21 15
<<<sep_out_sample>>>
mov %edx,%eax
imul %edi,%eax
add %ecx,%eax
imul %edi,%eax
add %edi,%eax
add %edx,%eax
add %esi,%eax
add %eax,%r8d
add %r8d,%ecx
mov $0x1,%eax
sub %edi,%eax
imul %eax,%edx
add %edx,%esi
lea 0x1(%rcx,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = (a3 - a3 * a1) + a2;
    v7 = a4 - a4;
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        if (v9 < a1)
        {
            v8 += a4 * a4;
        }
        else
        {
            v8 += a4 + (a2 - a4);
        }
    }
    v10 = a1 * (a3 * a1 + a4);
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 18
5 19
6 19
7 19
8 19
9 19
10 4
11 4
12 4
13 4
14 19
15 20
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (v7 < a1)
        {
            v6 += a5 + a2;
        }
        else
        {
            v6 += a2 * a1 * a1;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += a5 - a4 + a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 21
5 22
<<<sep_out_sample>>>
add %edi,%edx
add %edx,%esi
add %r8d,%esi
add %esi,%ecx
lea (%r8,%r8,1),%eax
imul %eax,%r8d
imul %r8d,%edi
lea 0x1(%rcx,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = (a5 + a5) * a5 * a1;
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        if (v6 < a2)
        {
            v7 += a4 + a2 * a5;
        }
        else
        {
            v7 += a1 - a1;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 4
6 4
7 4
8 17
9 18
<<<sep_out_sample>>>
mov %edx,%r9d
imul %ecx,%r9d
lea -0x1(%r9),%r11d
imul %r8d,%r11d
test %esi,%esi
jle 1e <func1+0x1e>
mov %edx,%r10d
sub %esi,%r10d
add %ecx,%r10d
jmp 25 <func1+0x25>
mov %esi,%r10d
imul %ecx,%r10d
add %r8d,%r9d
sub %esi,%r9d
cmp %r8d,%ecx
jge 37 <func1+0x37>
lea (%rsi,%rcx,2),%r9d
add %edi,%r9d
add %r9d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %r11d,%eax
add %r10d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (a4 < a3)
        {
            v6 += a4 + a1;
        }
        else
        {
            v6 += a1 - a1 - a4;
        }
    }
    if (a5 < a5)
    {
        v8 = a4 * (a3 + (a3 - a5));
    }
    else
    {
        v8 = (a3 * a4) * a5 - a5;
    }
    if (v9 < a2)
    {
        v9 = a3 - a2 + a4;
    }
    else
    {
        v9 = a2 * a4;
    }
    if (a4 < a5)
    {
        v10 = ((a4 + a4) + a2) + a1;
    }
    else
    {
        v10 = a5 + a3 * a4 - a2;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 22
4 22
5 24
6 24
7 26
8 26
9 26
10 26
11 30
12 30
13 38
14 38
15 32
16 32
17 34
18 34
19 40
20 40
21 40
22 40
23 40
24 40
25 40
26 41
<<<sep_out_sample>>>
mov %ecx,%eax
imul %ecx,%eax
mov %edi,%r9d
sub %esi,%r9d
add %edi,%r9d
add %r9d,%edx
add %edx,%esi
add %esi,%r8d
lea (%rdi,%rcx,2),%ecx
lea 0x1(%r8,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a1 + a4;
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        if (v6 < a1)
        {
            v7 += a5 * a4 * a5;
        }
        else
        {
            v7 += a2 + a1 + a4;
        }
    }
    v9 = (a4 * a4 - a2) + a2;
    v10 = a1 - a2;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 17
2 17
3 18
4 18
5 19
6 19
7 19
8 19
9 4
10 19
11 19
12 20
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
lea 0x1(%rcx,%rax,1),%eax
mov %edx,%r9d
imul %edi,%r9d
imul %r9d,%ecx
imul %r8d,%ecx
add %eax,%ecx
imul %esi,%r8d
sub %edx,%r8d
sub %edi,%r8d
lea (%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += (a2 - a4) - a2;
    }
    v8 = a5 * (a4 * (a3 * a1));
    v9 = ((a2 * a5) - a3) - a1;
    v10 = 0;
    for (v11 = 0; v11++; v11<a5)
    {
        if (v9 < a2)
        {
            v10 += (a2 - a2) * a2;
        }
        else
        {
            v10 += a5 - a1 + a2;
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 23
2 23
3 23
4 23
5 9
6 9
7 9
8 9
9 23
10 10
11 10
12 10
13 23
14 24
<<<sep_out_sample>>>
mov %r8d,%eax
sub %ecx,%eax
cmp %esi,%ecx
jge 12 <func1+0x12>
lea 0x1(%rdi),%eax
imul %ecx,%eax
imul %ecx,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a4 < a2)
    {
        v6 = a4 * ((a4 * a1) + a4);
    }
    else
    {
        v6 = a5 - a4;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += a2 * a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 4
4 4
5 6
6 6
7 6
8 17
9 17
10 17
11 17
12 17
13 18
<<<sep_out_sample>>>
test %ecx,%ecx
jle 14 <func1+0x14>
mov %r8d,%r10d
imul %edi,%r10d
lea (%rdi,%rsi,1),%r9d
sub %r9d,%r10d
jmp 20 <func1+0x20>
lea 0x1(%rsi),%r10d
imul %edx,%r10d
imul %esi,%r10d
cmp %edx,%esi
jge 36 <func1+0x36>
mov %ecx,%r9d
sub %esi,%r9d
mov %edx,%r11d
imul %esi,%r11d
sub %r11d,%r9d
jmp 40 <func1+0x40>
mov %r8d,%r9d
sub %edi,%r9d
imul %edx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
imul %r8d,%ecx
imul %ecx,%edx
imul %edx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (v6 < a4)
    {
        v6 = (a5 * a1) - (a1 + a2);
    }
    else
    {
        v6 = (a3 + (a3 * a2)) * a2;
    }
    if (a2 < a3)
    {
        v7 = a4 - a2 - a3 * a2;
    }
    else
    {
        v7 = a3 * (a5 - a1);
    }
    v8 = (a4 * a5) * a3 * a5;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 12
12 12
13 14
14 14
15 14
16 14
17 14
18 14
19 18
20 18
21 18
22 21
23 21
24 21
25 21
26 21
27 21
28 20
29 20
30 20
31 21
32 22
<<<sep_out_sample>>>
cmp %r8d,%ecx
jge 14 <func1+0x14>
lea (%rdx,%rcx,1),%eax
mov %edi,%r9d
imul %r8d,%r9d
sub %r9d,%eax
jmp 1f <func1+0x1f>
mov %edi,%eax
imul %r8d,%eax
sub %edx,%eax
sub %r8d,%eax
lea (%rdi,%rdx,1),%r9d
add %r9d,%esi
add %esi,%r8d
add %ecx,%r8d
add %r8d,%eax
imul %edx,%ecx
add %ecx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a1 < a1)
    {
        v6 = a5 - a2 - a4 * a2;
    }
    else
    {
        v6 = a3 - a3;
    }
    if (a4 < a5)
    {
        v7 = (a3 + a4) - a1 * a5;
    }
    else
    {
        v7 = (a1 * a5 - a3) - a5;
    }
    v8 = (a4 * a3) + a1;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 12
2 12
3 14
4 14
5 14
6 14
7 14
8 18
9 18
10 18
11 18
12 21
13 21
14 21
15 21
16 21
17 20
18 20
19 21
20 22
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %r8d,%edx
lea 0x1(%rcx,%rdx,1),%eax
add %r8d,%ecx
add %ecx,%esi
imul %esi,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (a4 < a2)
        {
            v6 += a5 - (a2 - a1);
        }
        else
        {
            v6 += a5 - a2;
        }
    }
    v8 = a1 * ((a4 + a5) + a2);
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 16
6 16
7 16
8 17
9 18
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
lea 0x1(%rcx,%rax,1),%eax
add %esi,%edi
add %edi,%eax
sub %r8d,%eax
sub %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a2 * a4;
    }
    if (a1 < a1)
    {
        v8 = a5 * ((a1 + a2) - a1);
    }
    else
    {
        v8 = a2 + a1;
    }
    v9 = a4 - a3 - (a4 + a5);
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 18
5 15
6 18
7 17
8 18
9 19
<<<sep_out_sample>>>
cmp %edi,%esi
jge e <func1+0xe>
lea (%r8,%rcx,1),%eax
imul %r8d,%eax
jmp 20 <func1+0x20>
mov %edi,%r9d
imul %edi,%r9d
mov $0x1,%eax
sub %r9d,%eax
imul %edx,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (a1 < a1)
        {
            v6 += (a1 + a5) + a3;
        }
        else
        {
            v6 += a5 * (a5 + a4);
        }
    }
    if (a2 < a1)
    {
        v8 = (a5 + a4) * a5;
    }
    else
    {
        v8 = a3 - (a3 * (a1 * a1));
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 22
7 22
8 22
9 22
10 22
11 24
12 24
13 24
14 24
15 24
16 25
<<<sep_out_sample>>>
cmp %ecx,%esi
jle c <func1+0xc>
mov %r8d,%eax
imul %edx,%eax
jmp 1a <func1+0x1a>
lea (%rcx,%rdi,1),%eax
mov %r8d,%r9d
sub %eax,%r9d
mov %r9d,%eax
sub %ecx,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (v6 < a2)
        {
            v6 += a4 * a4 - a5;
        }
        else
        {
            v6 += a1 + a5;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        if (a1 < a3)
        {
            v8 += a3 - a1 + a3;
        }
        else
        {
            v8 += a2 * a1;
        }
    }
    if (a4 < a2)
    {
        v10 = a5 * a3;
    }
    else
    {
        v10 = a5 - (a4 + a1) - a4;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 28
2 28
3 30
4 30
5 30
6 34
7 34
8 34
9 34
10 34
11 36
12 36
13 36
14 36
15 36
16 37
<<<sep_out_sample>>>
add %edx,%edi
add %esi,%edi
add %edi,%r8d
add %r8d,%ecx
add %edx,%esi
lea 0x1(%rcx,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a2 + a3;
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        if (v8 < a3)
        {
            v7 += (a2 - a4) - a4;
        }
        else
        {
            v7 += (a5 + a2) - a5;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 4
6 17
7 18
<<<sep_out_sample>>>
mov %ecx,%r10d
imul %ecx,%r10d
sub %r8d,%r10d
add %edi,%r10d
cmp %edx,%r8d
jge 21 <func1+0x21>
mov %esi,%r9d
not %r9d
imul %edi,%r9d
add %ecx,%r9d
jmp 29 <func1+0x29>
mov %edx,%eax
sub %edi,%eax
lea (%rax,%rcx,2),%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = (a4 * a4 - a5) + a1;
    if (a5 < a3)
    {
        v7 = a4 - (a1 + a2 * a1);
    }
    else
    {
        v7 = (a3 - a1 + a4) + a4;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 5
6 5
7 7
8 7
9 7
10 7
11 7
12 11
13 11
14 11
15 13
16 13
17 13
18 13
19 13
20 13
21 14
<<<sep_out_sample>>>
mov %r8d,%eax
sub %edx,%eax
cmp %r8d,%edx
jge 13 <func1+0x13>
lea (%r8,%rsi,1),%eax
imul %esi,%eax
sub %edi,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a3 < a5)
    {
        v6 = a2 * (a5 + a2) - a1;
    }
    else
    {
        v6 = a5 - a3 + a1 - a1;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += (a5 * a5) * a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 4
4 4
5 6
6 6
7 6
8 17
9 17
10 17
11 17
12 17
13 18
<<<sep_out_sample>>>
mov %r8d,%eax
neg %eax
imul %eax,%ecx
lea 0x1(%rdi,%rcx,1),%eax
add %eax,%edx
add %esi,%edx
add %edx,%r8d
lea (%rdi,%rsi,2),%eax
lea 0x1(%r8,%rax,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a2 + a1 * a1;
    }
    if (a5 < a5)
    {
        v8 = a5 * a1;
    }
    else
    {
        v8 = (a2 + a1 - a4) + a2;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        v9 += a2 * a5;
    }
    v11 = a4 - a4 * a5 - a4;
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 22
4 23
5 23
6 23
7 23
8 15
9 23
10 24
<<<sep_out_sample>>>
add %edi,%edx
lea 0x1(%rsi,%rdx,1),%edx
sub %edi,%r8d
lea (%rdx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (a5 < a2)
        {
            v6 += a5 * a5 * a4;
        }
        else
        {
            v6 += a1 - a4;
        }
    }
    v8 = a5 - (a5 + (a4 + a5));
    v9 = a5 - a1;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 17
4 18
5 19
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%r9d
add %r8d,%edi
test %esi,%esi
jle 16 <func1+0x16>
mov %ecx,%eax
sub %r8d,%eax
sub %esi,%eax
sub %esi,%eax
jmp 1d <func1+0x1d>
mov %r8d,%eax
neg %eax
sub %ecx,%eax
add %r9d,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%edx
add %edx,%r9d
add %r9d,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a3 + a2 - a2;
    if (a5 < a5)
    {
        v7 = a3 + a2;
    }
    else
    {
        v7 = a1 + a3;
    }
    v8 = (a1 - a3) + a3 + a5;
    if (v9 < a2)
    {
        v9 = a4 - a5 - a2 - a2;
    }
    else
    {
        v9 = a4 - a5 - a4 - a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 13
3 14
4 14
5 16
6 16
7 16
8 16
9 16
10 20
11 20
12 20
13 22
14 22
15 22
16 22
17 22
18 22
19 22
20 23
<<<sep_out_sample>>>
mov %r8d,%eax
sub %edi,%eax
test %ecx,%ecx
jle 12 <func1+0x12>
lea (%rsi,%r8,1),%eax
sub %ecx,%eax
imul %edx,%eax
lea (%rdi,%rdx,1),%r9d
add %esi,%r9d
add %r8d,%r9d
add %ecx,%r9d
add %r9d,%eax
mov %edx,%r10d
sub %esi,%r10d
mov %r10d,%esi
sub %r8d,%esi
add %ecx,%esi
add %eax,%esi
mov %r8d,%eax
imul %r8d,%eax
add %edx,%eax
sub %edi,%eax
add %esi,%eax
add %edx,%ecx
imul %ecx,%r8d
add %r8d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (v6 < a4)
    {
        v6 = ((a2 + a5) - a4) * a3;
    }
    else
    {
        v6 = a1 + (a5 - a1) - a1;
    }
    if (a1 < a1)
    {
        v7 = ((a3 + a5) + a5) - a3;
    }
    else
    {
        v7 = a4 + ((a3 - a2) - a5);
    }
    v8 = a3 + a5 * a5 - a1;
    if (a5 < a5)
    {
        v9 = a5 + ((a5 - a4) * a1);
    }
    else
    {
        v9 = a3 + ((a4 + a3) * a5);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 4
4 4
5 6
6 6
7 6
8 29
9 29
10 29
11 29
12 29
13 18
14 18
15 18
16 18
17 18
18 29
19 20
20 20
21 20
22 20
23 29
24 27
25 27
26 27
27 29
28 30
<<<sep_out_sample>>>
mov %esi,%r9d
imul %edx,%r9d
add %edi,%r9d
imul %edx,%r9d
lea (%rsi,%r8,1),%eax
imul %edi,%eax
sub %ecx,%eax
cmp $0x1,%edx
jle 2c <func1+0x2c>
lea (%rsi,%rdi,1),%r11d
mov %esi,%r10d
imul %esi,%r10d
add %r11d,%r10d
jmp 3a <func1+0x3a>
mov %ecx,%r10d
sub %esi,%r10d
imul %edi,%r10d
imul %ecx,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = (a1 + a2 * a3) * a3;
    v7 = a1 * (a2 + a5) - a4;
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        if (v6 < a2)
        {
            v8 += a1 - a2;
        }
        else
        {
            v8 += a3 - a5;
        }
    }
    if (v9 < a3)
    {
        v10 = (a2 + a1) + a2 * a2;
    }
    else
    {
        v10 = (a4 - a2) * a1 * a4;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 5
6 5
7 5
8 18
9 18
10 20
11 20
12 20
13 20
14 20
15 24
16 24
17 24
18 24
19 26
20 26
21 26
22 26
23 26
24 26
25 26
26 27
<<<sep_out_sample>>>
mov %r8d,%r9d
sub %ecx,%r9d
mov %edx,%eax
sub %esi,%eax
add %edi,%eax
sub %esi,%eax
test %esi,%esi
jle 21 <func1+0x21>
mov %esi,%r10d
sub %edx,%r10d
imul %edi,%r10d
add %r8d,%r10d
jmp 2f <func1+0x2f>
mov %r8d,%r10d
imul %esi,%r10d
add %edi,%r10d
imul %edx,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %r9d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += (a1 + a1) - a1;
    }
    v8 = a5 - a4;
    if (a1 < a1)
    {
        v9 = (a1 + a2) * a5 - a3;
    }
    else
    {
        v9 = a3 - a2 + a1 - a2;
    }
    if (v10 < a2)
    {
        v10 = a5 - a1 * (a3 - a2);
    }
    else
    {
        v10 = (a1 + a5 * a2) * a3;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 16
4 16
5 16
6 16
7 18
8 18
9 20
10 20
11 20
12 20
13 20
14 24
15 24
16 24
17 24
18 26
19 26
20 26
21 26
22 26
23 26
24 26
25 27
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a5 * a4 * a2;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += a3 + a2 + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 14
2 14
3 14
4 14
5 15
<<<sep_out_sample>>>
lea (%rdx,%r8,2),%r9d
test %esi,%esi
jle 16 <func1+0x16>
mov %edx,%r9d
sub %esi,%r9d
mov %edx,%eax
imul %ecx,%eax
sub %eax,%r9d
lea (%rcx,%rdx,1),%eax
lea (%rdx,%rdi,1),%r10d
test %r8d,%r8d
cmovle %r10d,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    if (v6 < a2)
    {
        v6 = a3 - a2 - a3 * a4;
    }
    else
    {
        v6 = a5 + a5 + a3;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += a5 + a2 * a5;
    }
    if (v7 < a5)
    {
        v9 = a4 + a3;
    }
    else
    {
        v9 = a3 + a1;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a2)
    {
        v10 += (a3 * a5) * a3;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 6
7 6
8 6
9 19
10 19
11 19
12 19
13 30
14 30
15 30
16 30
17 30
18 30
19 31
<<<sep_out_sample>>>
cmp %ecx,%esi
jge 12 <func1+0x12>
mov %esi,%eax
imul %ecx,%eax
sub $0x1,%eax
imul %r8d,%eax
jmp 1c <func1+0x1c>
mov %r8d,%eax
sub %edx,%eax
imul %edi,%eax
sub %esi,%eax
cmp $0x1,%edi
jle 30 <func1+0x30>
mov $0x2,%r9d
sub %esi,%r9d
imul %ecx,%r9d
jmp 37 <func1+0x37>
mov %ecx,%r9d
imul %edi,%r9d
lea 0x1(%r9,%rdi,1),%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    if (a2 < a4)
    {
        v6 = (a2 * a4) * a5 - a5;
    }
    else
    {
        v6 = a1 * (a5 - a3) - a2;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += a3 + a3 - a2;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        if (a5 < a5)
        {
            v9 += a3 + a4;
        }
        else
        {
            v9 += a4 - (a2 + a4);
        }
    }
    if (v8 < a1)
    {
        v11 = (a4 - a2 * a4) + a4;
    }
    else
    {
        v11 = a4 * a1;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 29
13 29
14 31
15 31
16 31
17 31
18 35
19 35
20 37
21 37
22 37
23 37
24 37
25 37
26 38
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%eax
imul %r8d,%edx
add %edx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (a5 < a5)
        {
            v6 += a2 + a5 - a5;
        }
        else
        {
            v6 += a4 + a3 * a4;
        }
    }
    if (a5 < a5)
    {
        v8 = a1 * a1 * a5;
    }
    else
    {
        v8 = (a5 * a3) + a1;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        if (a2 < a4)
        {
            v9 += a5 * a1 - a4;
        }
        else
        {
            v9 += a2 * a1 - a1;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 36
2 36
3 36
4 36
5 22
6 22
7 36
8 37
<<<sep_out_sample>>>
lea (%rdi,%r8,1),%r10d
cmp %edx,%esi
jge 18 <func1+0x18>
mov %r8d,%r9d
imul %edi,%r9d
imul %edx,%r9d
sub %edi,%r9d
jmp 27 <func1+0x27>
mov %r8d,%eax
imul %ecx,%eax
mov %esi,%r9d
sub %eax,%r9d
add %edx,%r9d
test %ecx,%ecx
jle 33 <func1+0x33>
lea (%rcx,%rdi,2),%eax
add %r8d,%eax
jmp 3d <func1+0x3d>
mov %edx,%eax
imul %edi,%eax
add %r8d,%eax
sub %edi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r10d,%ecx
add %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a1 + a5;
    if (a2 < a3)
    {
        v7 = a5 * a1 * a3 - a1;
    }
    else
    {
        v7 = a3 - ((a5 * a4) - a2);
    }
    if (v8 < a4)
    {
        v8 = (a4 + a1 + a1) + a5;
    }
    else
    {
        v8 = a5 + a3 * a1 - a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 5
3 5
4 7
5 7
6 7
7 7
8 7
9 11
10 11
11 11
12 11
13 11
14 13
15 13
16 15
17 15
18 15
19 19
20 19
21 19
22 19
23 21
24 21
25 21
26 21
27 21
28 21
29 21
30 22
<<<sep_out_sample>>>
mov %esi,%r11d
imul %ecx,%r11d
imul %esi,%r11d
mov $0x0,%r9d
cmp %edi,%esi
jg 1d <func1+0x1d>
lea (%r8,%rdi,1),%r9d
imul %r8d,%r9d
cmp %edx,%ecx
jge 2c <func1+0x2c>
mov %esi,%r10d
sub %edi,%r10d
sub %r8d,%r10d
jmp 3a <func1+0x3a>
mov %esi,%r10d
sub %edi,%r10d
add $0x1,%r10d
imul %r8d,%r10d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r11d,%ecx
add %ecx,%r9d
lea (%r9,%r10,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a2 * a4 * a2;
    if (a1 < a2)
    {
        v7 = a2 - a2;
    }
    else
    {
        v7 = a5 * (a5 + a1);
    }
    if (a4 < a3)
    {
        v8 = (a2 - a1) - a5;
    }
    else
    {
        v8 = a5 - ((a1 - a2) * a5);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 7
5 5
6 5
7 11
8 11
9 13
10 13
11 15
12 15
13 15
14 15
15 19
16 19
17 19
18 19
19 21
20 21
21 21
22 21
23 21
24 21
25 21
26 22
<<<sep_out_sample>>>
add %edx,%edi
add %esi,%edi
add %r8d,%edi
add %ecx,%edi
imul %r8d,%esi
imul %esi,%ecx
imul %r8d,%ecx
lea 0x1(%rdi,%rcx,1),%eax
add %edx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a3 < a3)
    {
        v6 = a4 - a2 - a3 * a4;
    }
    else
    {
        v6 = a5 * a2 * a4 * a5;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += a3 + a5;
    }
    v9 = a3 + a5;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 18
5 10
6 10
7 10
8 18
9 17
10 18
11 19
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a2 - a4;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        if (v6 < a3)
        {
            v8 += a2 * a3 - a4;
        }
        else
        {
            v8 += a4 * a3 * a2;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 21
5 22
<<<sep_out_sample>>>
mov %esi,%eax
imul %ecx,%eax
add %edx,%edi
add %edi,%esi
add %r8d,%esi
add %ecx,%esi
sub %eax,%edx
add %r8d,%edx
add %esi,%edx
add %eax,%r8d
add %r8d,%ecx
lea 0x1(%rdx,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a5 + (a3 - a2 * a4);
    v7 = ((a2 * a4) + a5) + a4;
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += (a3 * a1) * a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 11
4 11
5 11
6 11
7 4
8 4
9 11
10 5
11 5
12 11
13 12
<<<sep_out_sample>>>
lea (%rdx,%rsi,1),%r9d
test %edi,%edi
cmovle %edx,%r9d
lea (%rdi,%r8,1),%r10d
mov %r8d,%eax
imul %esi,%eax
add %r10d,%eax
add %r9d,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += (a2 * a1) * a2;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += a5 * a4 - a3;
    }
    if (v6 < a1)
    {
        v10 = a3 + a2;
    }
    else
    {
        v10 = (a5 + a3) - a5;
    }
    v11 = a1 + a5 + a5 * a2;
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 16
4 22
5 22
6 22
7 22
8 23
9 23
10 23
11 23
12 23
13 23
14 24
<<<sep_out_sample>>>
cmp %r8d,%edi
jle 10 <func1+0x10>
lea -0x1(%rcx),%eax
imul %r8d,%eax
add %edi,%eax
jmp 1b <func1+0x1b>
mov %edi,%eax
imul %edi,%eax
imul %esi,%eax
imul %ecx,%eax
mov %r8d,%r9d
sub %esi,%r9d
lea (%rcx,%r8,1),%r10d
cmp %esi,%r8d
cmovge %r10d,%r9d
lea 0x1(%r9,%rdi,1),%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a3 + a1;
    }
    if (a5 < a1)
    {
        v8 = (a4 * a5 - a5) + a1;
    }
    else
    {
        v8 = ((a1 * a1) * a2) * a4;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a1)
    {
        v9 += a3 * a4 * a2;
    }
    if (a5 < a2)
    {
        v11 = a5 - a2;
    }
    else
    {
        v11 = a4 + a5;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 15
8 15
9 15
10 15
11 24
12 24
13 24
14 24
15 24
16 30
17 30
18 30
19 30
20 30
21 30
22 31
<<<sep_out_sample>>>
cmp %edx,%ecx
jge d <func1+0xd>
lea (%r8,%rcx,2),%r9d
add %edx,%r9d
jmp 17 <func1+0x17>
mov %esi,%r9d
imul %r8d,%r9d
add %edx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %eax,%ecx
add %r9d,%ecx
mov $0x1,%eax
sub %edi,%eax
imul %edx,%eax
imul %eax,%edi
add %ecx,%edi
add %r8d,%edx
sub %esi,%edx
imul %edx,%r8d
lea (%rdi,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a4 < a3)
    {
        v6 = (a5 + a4 + a4) + a3;
    }
    else
    {
        v6 = a3 + a2 * a5;
    }
    v7 = (a3 - a1 * a3) * a1;
    v8 = (a5 + a3 - a2) * a5;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 14
10 14
11 14
12 14
13 14
14 12
15 12
16 12
17 12
18 14
19 13
20 13
21 13
22 14
23 15
<<<sep_out_sample>>>
cmp %r8d,%edx
jge 13 <func1+0x13>
lea 0x1(%rdx),%r9d
imul %ecx,%r9d
imul %edx,%r9d
jmp 1f <func1+0x1f>
lea (%rdx,%rdi,1),%eax
mov %esi,%r9d
sub %eax,%r9d
add %ecx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
imul %edi,%r8d
imul %edi,%r8d
imul %esi,%r8d
add %r8d,%eax
sub %esi,%edx
imul %edx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a3 < a5)
    {
        v6 = ((a3 * a4) + a4) * a3;
    }
    else
    {
        v6 = (a2 - (a3 + a1)) + a4;
    }
    v7 = (a1 * (a5 * a1)) * a2;
    v8 = a1 * (a3 - a2);
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 10
11 14
12 14
13 14
14 14
15 14
16 12
17 12
18 12
19 14
20 13
21 13
22 14
23 15
<<<sep_out_sample>>>
mov %esi,%eax
sub %edi,%eax
add $0x1,%eax
imul %edx,%eax
cmp %eax,%edi
jle 1c <func1+0x1c>
lea -0x1(%rcx),%r9d
imul %esi,%r9d
imul %edi,%r9d
jmp 2a <func1+0x2a>
mov %edi,%r9d
imul %edx,%r9d
imul %edi,%r9d
add %esi,%r9d
add %edx,%edi
add %esi,%edi
add %edi,%r8d
add %r8d,%ecx
add %ecx,%eax
add %r9d,%eax
add %edx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a3 < a3)
    {
        v6 = ((a4 - a4) + a5) * a4;
    }
    else
    {
        v6 = a3 - (a3 * (a1 - a2));
    }
    if (v6 < a1)
    {
        v7 = (a2 * a4 - a2) * a1;
    }
    else
    {
        v7 = a1 * a3 * a1 + a2;
    }
    v8 = a2 + a3;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 12
6 12
7 14
8 14
9 14
10 14
11 18
12 18
13 18
14 18
15 21
16 21
17 21
18 21
19 21
20 21
21 20
22 21
23 22
<<<sep_out_sample>>>
lea (%rdi,%rcx,2),%eax
add %edx,%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
lea (%rdx,%r8,1),%edi
add %edi,%eax
add %esi,%ecx
imul %r8d,%edx
add %ecx,%edx
lea 0x1(%rax,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a3 + a5;
    v7 = a2 + a4 + a3 * a5;
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += a3 + a5;
    }
    v10 = a4 + a4;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 12
2 12
3 12
4 12
5 12
6 4
7 12
8 5
9 5
10 5
11 12
12 13
<<<sep_out_sample>>>
cmp %edx,%edi
jle 12 <func1+0x12>
mov %r8d,%eax
imul %r8d,%eax
imul %edx,%edx
add %eax,%edx
jmp 1e <func1+0x1e>
mov $0x1,%eax
sub %edx,%eax
imul %edi,%eax
add %eax,%edx
lea (%rdx,%rdi,2),%eax
add %eax,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (a1 < a5)
        {
            v6 += a5 + a2;
        }
        else
        {
            v6 += a1 * (a1 - a5);
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += a1 - a3 + a3;
    }
    if (a3 < a1)
    {
        v10 = a5 * a5 + a3 * a3;
    }
    else
    {
        v10 = (a1 - a1 * a3) + a3;
    }
    v11 = a1 - a3;
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 23
4 23
5 23
6 23
7 23
8 27
9 27
10 27
11 27
12 30
13 30
14 30
15 30
16 31
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
mov %ecx,%eax
sub %edx,%eax
add %eax,%r8d
lea (%rsi,%rcx,2),%eax
lea 0x1(%r8,%rax,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = ((a4 - a3) + a5) + a4;
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        if (v6 < a3)
        {
            v7 += a4 * a3 - a1;
        }
        else
        {
            v7 += a5 - (a4 - a5);
        }
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        if (v8 < a3)
        {
            v9 += (a2 * a4) - a3;
        }
        else
        {
            v9 += a3 * (a3 * a4);
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 29
2 29
3 29
4 4
5 4
6 4
7 4
8 29
9 30
<<<sep_out_sample>>>
cmp %esi,%edx
jle 14 <func1+0x14>
mov %esi,%r9d
imul %ecx,%r9d
imul %edx,%r9d
add %r8d,%r9d
jmp 20 <func1+0x20>
lea (%r8,%r8,1),%r9d
mov %ecx,%eax
imul %edi,%eax
sub %eax,%r9d
lea (%rcx,%rcx,1),%eax
cmp %r8d,%r9d
jge 31 <func1+0x31>
lea (%r8,%rdx,1),%eax
add %esi,%eax
imul %edi,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%r9d
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a5 * a3 * a4;
    }
    if (a2 < a3)
    {
        v8 = (a2 * a4 * a3) + a5;
    }
    else
    {
        v8 = (a5 + a5) - a4 * a1;
    }
    if (v8 < a5)
    {
        v9 = a1 * ((a5 + a3) + a2);
    }
    else
    {
        v9 = a4 + a4;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a1)
    {
        if (v8 < a3)
        {
            v10 += a4 - a3 + a1;
        }
        else
        {
            v10 += a4 * (a5 * a4);
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 11
8 15
9 15
10 15
11 15
12 23
13 17
14 17
15 19
16 19
17 19
18 37
19 37
20 37
21 37
22 37
23 37
24 38
<<<sep_out_sample>>>
push %rbx
lea (%rsi,%r8,1),%eax
imul %esi,%eax
mov %edi,%ebx
sub %eax,%ebx
mov %edi,%r11d
imul %edx,%r11d
imul %ecx,%r11d
imul %r8d,%r11d
mov %r8d,%r10d
imul %edx,%r10d
add %esi,%r10d
add %edx,%r10d
mov %edx,%r9d
sub %edi,%r9d
cmp %ecx,%edx
jg 3c <func1+0x3c>
mov %edx,%r9d
sub %ecx,%r9d
imul %edx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %ebx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a1 - a2 * (a2 + a5);
    v7 = a1 * a3 * a4 * a5;
    if (a5 < a5)
    {
        v8 = a3 + a3 - a1 * a1;
    }
    else
    {
        v8 = a3 + (a5 * a3 + a2);
    }
    if (a4 < a3)
    {
        v9 = a3 - ((a1 + a4) - a4);
    }
    else
    {
        v9 = (a3 * a3) - a3 * a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 4
3 4
4 4
5 4
6 5
7 5
8 5
9 5
10 12
11 12
12 12
13 12
14 16
15 16
16 14
17 14
18 20
19 20
20 20
21 22
22 22
23 22
24 22
25 22
26 22
27 22
28 22
29 23
30 23
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %r8d,%edx
add %ecx,%edx
sub %esi,%ecx
imul %r8d,%edi
sub %edi,%ecx
lea 0x1(%rdx,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a4 - a2 - a1 * a5;
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        if (a2 < a5)
        {
            v7 += a1 * a5;
        }
        else
        {
            v7 += a4 - a3 * a4;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 4
6 4
7 4
8 17
9 18
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %edx,%edx
sub %esi,%edx
lea (%rax,%rcx,2),%eax
lea (%rax,%rdx,1),%eax
add %r8d,%edi
lea 0x1(%rax,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = (a3 + a3 - a2) + a4;
    v7 = a5 + a1;
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += (a3 - a5) + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 4
5 4
6 4
7 11
8 5
9 11
10 12
<<<sep_out_sample>>>
lea (%rdi,%rcx,1),%eax
imul %r8d,%eax
sub %esi,%eax
add %eax,%edi
add %edx,%edi
add %edi,%esi
add %r8d,%esi
add %ecx,%esi
mov %edx,%eax
sub %r8d,%eax
imul %ecx,%eax
imul %r8d,%eax
lea 0x1(%rsi,%rax,1),%eax
imul %edx,%edx
imul %edx,%ecx
imul %ecx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = ((a3 - a5) * a4) * a5;
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += (a3 * a5) * a2;
    }
    v9 = a4 * (a3 * a3) * a5;
    v10 = (a1 + a4) * a5 - a2;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 12
5 12
6 12
7 12
8 12
9 4
10 4
11 4
12 4
13 12
14 10
15 10
16 10
17 12
18 13
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
lea 0x1(%rcx,%rax,1),%eax
add %r8d,%esi
add %esi,%eax
sub %edx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (a3 < a4)
        {
            v6 += (a3 * a1) - a5;
        }
        else
        {
            v6 += a5 + a1 - a5;
        }
    }
    v8 = a2 + a5;
    v9 = a1 - a3;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 18
5 16
6 18
7 17
8 18
9 19
<<<sep_out_sample>>>
mov %esi,%eax
imul %esi,%eax
add %r8d,%eax
add %esi,%eax
cmp %edi,%esi
jle 1b <func1+0x1b>
lea (%r8,%rdx,1),%r9d
sub %edi,%r9d
imul %edi,%r9d
jmp 23 <func1+0x23>
lea (%rcx,%rdi,2),%r9d
imul %edi,%r9d
lea 0x1(%r9,%rdi,1),%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (a2 < a5)
        {
            v6 += a2 + a4;
        }
        else
        {
            v6 += a5 - a5 * a2;
        }
    }
    v8 = a2 + (a2 * a2 + a5);
    v9 = 0;
    for (v10 = 0; v10++; v10<a1)
    {
        if (v10 < a3)
        {
            v9 += a2 - a3 - a1;
        }
        else
        {
            v9 += a5 * a1 * a2;
        }
    }
    if (a1 < a2)
    {
        v11 = a1 * ((a5 + a3) - a1);
    }
    else
    {
        v11 = (a1 + a4 + a1) * a1;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 16
4 16
5 29
6 29
7 31
8 31
9 31
10 31
11 35
12 35
13 37
14 37
15 37
16 37
17 37
18 37
19 38
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
add %ecx,%esi
add %r8d,%edx
lea 0x1(%rsi,%rdx,1),%eax
imul %ecx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a5 + a3;
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += a5 * a1 - a5;
    }
    v9 = a1 * a4;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 11
5 4
6 11
7 10
8 11
9 12
<<<sep_out_sample>>>
cmp %ecx,%edi
jge d <func1+0xd>
mov %esi,%r9d
imul %edi,%r9d
jmp 1c <func1+0x1c>
mov %ecx,%r9d
imul %edi,%r9d
imul %r8d,%r9d
imul %ecx,%r9d
test %edx,%edx
jle 2d <func1+0x2d>
mov %ecx,%eax
imul %edx,%eax
imul %esi,%eax
imul %ecx,%eax
jmp 37 <func1+0x37>
mov %edx,%eax
imul %edx,%eax
add %edi,%eax
imul %ecx,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a1 < a4)
    {
        v6 = a2 * a1;
    }
    else
    {
        v6 = (a5 * (a4 * a1)) * a4;
    }
    v7 = (a3 - a3 - a5) + a5;
    if (v8 < a3)
    {
        v8 = a4 * ((a4 * a3) * a2);
    }
    else
    {
        v8 = a4 * (a3 * a3 + a1);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 10
10 13
11 13
12 15
13 15
14 15
15 15
16 15
17 19
18 19
19 19
20 19
21 21
22 21
23 21
24 21
25 21
26 21
27 22
<<<sep_out_sample>>>
lea (%rcx,%rsi,1),%eax
cmp %edi,%r8d
jle 14 <func1+0x14>
mov $0x1,%eax
sub %edx,%eax
imul %edi,%eax
add %edx,%eax
lea 0x1(%rax,%rdi,1),%eax
add %eax,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (v6 < a5)
        {
            v6 += (a3 * a2) - a5;
        }
        else
        {
            v6 += a4 * a5 * a2;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += a2 * a4 - a1;
    }
    if (a1 < a5)
    {
        v10 = a3 - (a1 * a3 - a1);
    }
    else
    {
        v10 = a4 + a2;
    }
    v11 = 0;
    for (v12 = 0; v12++; v12<a1)
    {
        v11 += a3 - a5 - a3;
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 27
2 21
3 21
4 23
5 23
6 23
7 23
8 34
9 34
10 34
11 34
12 34
13 35
<<<sep_out_sample>>>
mov %r8d,%r9d
sub %esi,%r9d
test %edi,%edi
jle 12 <func1+0x12>
lea (%rdx,%r8,2),%r9d
imul %ecx,%r9d
mov %edx,%eax
sub %ecx,%eax
test %esi,%esi
jle 26 <func1+0x26>
lea (%rdi,%rcx,1),%eax
mov %r8d,%r10d
sub %eax,%r10d
mov %r10d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%r9d
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (a2 < a4)
        {
            v6 += a1 + a2;
        }
        else
        {
            v6 += a4 + a1;
        }
    }
    if (v6 < a1)
    {
        v8 = a4 * ((a5 + a3) + a5);
    }
    else
    {
        v8 = a5 - a2;
    }
    if (v6 < a2)
    {
        v9 = a5 - (a1 + a4);
    }
    else
    {
        v9 = (a2 - a2 + a3) - a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 16
4 16
5 18
6 18
7 30
8 30
9 24
10 24
11 26
12 26
13 26
14 26
15 32
16 32
17 32
18 32
19 32
20 32
21 33
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
lea 0x1(%rcx,%rax,1),%eax
add %edi,%r8d
add %edx,%r8d
imul %r8d,%esi
add %esi,%eax
sub %edi,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (a4 < a5)
        {
            v6 += a5 - a5;
        }
        else
        {
            v6 += a1 + a5;
        }
    }
    if (a2 < a2)
    {
        v8 = (a3 + a3 + a1) - a2;
    }
    else
    {
        v8 = a2 * ((a5 + a1) + a3);
    }
    v9 = (a3 - (a5 - a5)) - a1;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 25
2 25
3 25
4 25
5 22
6 22
7 22
8 25
9 24
10 25
11 26
<<<sep_out_sample>>>
lea (%rdx,%rdx,1),%r10d
sub %esi,%r10d
imul %r8d,%r10d
mov %edi,%r9d
sub %esi,%r9d
add %edx,%r9d
add %ecx,%r9d
test %r8d,%r8d
jle 22 <func1+0x22>
lea (%r8,%r8,1),%r11d
jmp 31 <func1+0x31>
mov %esi,%r11d
imul %edx,%r11d
imul %edi,%r11d
imul %ecx,%r11d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea (%rcx,%r10,1),%eax
add %r9d,%eax
add %r11d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a5 * (a3 + a3 - a2);
    v7 = a3 + (a1 - a2) + a4;
    if (v8 < a5)
    {
        v8 = a5 + a5;
    }
    else
    {
        v8 = a1 * (a2 * a3) * a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 5
5 5
6 5
7 5
8 6
9 6
10 8
11 8
12 12
13 12
14 12
15 12
16 14
17 14
18 14
19 14
20 14
21 14
22 14
23 15
<<<sep_out_sample>>>
mov %esi,%eax
sub %edi,%eax
add %r8d,%eax
test %esi,%esi
jle 12 <func1+0x12>
mov %ecx,%eax
neg %eax
imul %ecx,%eax
add %edx,%edi
add %edi,%esi
add %r8d,%esi
add %esi,%ecx
add %ecx,%eax
add %edx,%edx
imul %edx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (v6 < a2)
    {
        v6 = (a1 - (a1 + a4)) * a4;
    }
    else
    {
        v6 = a2 - a1 + a5;
    }
    v7 = a5 * (a3 + a3);
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 4
5 4
6 6
7 6
8 6
9 13
10 13
11 13
12 13
13 13
14 12
15 12
16 13
17 14
<<<sep_out_sample>>>
test %edx,%edx
jle b <func1+0xb>
mov %edx,%eax
imul %esi,%eax
jmp 10 <func1+0x10>
lea (%rdx,%rsi,2),%eax
sub %ecx,%eax
mov %r8d,%r9d
imul %r8d,%r9d
lea 0x1(%rdi,%r9,1),%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (v7 < a2)
        {
            v6 += a1 - a1 + a1;
        }
        else
        {
            v6 += (a1 - a5) - a1;
        }
    }
    if (v6 < a3)
    {
        v8 = a3 * a2;
    }
    else
    {
        v8 = (a2 + a2) + a3 - a4;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        v9 += a5 + a2;
    }
    v11 = a5 * a5;
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 22
7 22
8 29
9 29
10 30
11 30
12 30
13 30
14 30
15 30
16 31
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%eax
imul %r8d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a4 - a2 * a1;
    }
    v8 = a5 * a3;
    v9 = 0;
    for (v10 = 0; v10++; v10<a1)
    {
        if (v9 < a1)
        {
            v9 += a3 + (a1 * a5);
        }
        else
        {
            v9 += a3 * a2 - a1;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 22
4 22
5 9
6 22
7 23
<<<sep_out_sample>>>
lea (%r8,%rdx,1),%eax
cmp %edx,%esi
cmovle %edi,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += (a5 + a2) * a5;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        if (v9 < a3)
        {
            v8 += a1 - a2;
        }
        else
        {
            v8 += a1 + a3;
        }
    }
    if (a3 < a2)
    {
        v10 = a5 + a3;
    }
    else
    {
        v10 = (a4 - a4) + a1;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 23
2 23
3 23
4 29
5 29
6 29
7 29
8 29
9 30
<<<sep_out_sample>>>
mov %edi,%eax
sub %ecx,%eax
mov %eax,%r10d
imul %edi,%r10d
add %r8d,%r10d
imul %ecx,%eax
lea (%rax,%rdx,1),%r9d
test %ecx,%ecx
jle 24 <func1+0x24>
mov %esi,%eax
imul %esi,%eax
add %edi,%eax
sub %ecx,%eax
jmp 2d <func1+0x2d>
mov %esi,%eax
imul %r8d,%eax
lea (%rax,%rdi,2),%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r10d,%ecx
add %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = (a1 - a4) * a1 + a5;
    v7 = a3 + ((a1 - a4) * a4);
    if (v8 < a4)
    {
        v8 = a2 * a2 + a1 - a4;
    }
    else
    {
        v8 = a2 * a5 + a1 + a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 4
6 5
7 5
8 6
9 6
10 8
11 8
12 8
13 8
14 8
15 12
16 12
17 12
18 14
19 14
20 14
21 14
22 14
23 14
24 14
25 15
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
lea (%r8,%rcx,1),%eax
imul %ecx,%edi
lea (%rdi,%rsi,2),%edx
lea 0x1(%rax,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a2 + a4 * a1 + a2;
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += a1 - a4;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a1)
    {
        if (v7 < a3)
        {
            v9 += (a1 * a4) - a1;
        }
        else
        {
            v9 += a3 - a4;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 22
4 22
5 4
6 4
7 22
8 23
<<<sep_out_sample>>>
lea (%rdi,%r8,1),%eax
mov %ecx,%r9d
sub %r8d,%r9d
cmp %r8d,%edx
cmovl %eax,%r9d
jle 22 <func1+0x22>
mov %esi,%r11d
sub %edx,%r11d
imul %edi,%r11d
sub %edx,%r11d
jmp 2d <func1+0x2d>
mov %esi,%r11d
imul %edi,%r11d
imul %ecx,%r11d
cmp %edx,%r9d
jge 3f <func1+0x3f>
lea -0x1(%r8),%r10d
imul %edi,%r10d
add %esi,%r10d
jmp 4b <func1+0x4b>
mov %esi,%r10d
sub %edx,%r10d
sub %edx,%r10d
sub %edx,%r10d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
sub %esi,%eax
add %r9d,%eax
add %r11d,%eax
add %r10d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a1 - a2 - a1;
    if (a3 < a5)
    {
        v7 = a1 + a5;
    }
    else
    {
        v7 = a5 - a5 - a5 + a4;
    }
    if (a5 < a3)
    {
        v8 = (a2 - a3) * a1 - a3;
    }
    else
    {
        v8 = a2 * a1 * a4;
    }
    if (v7 < a3)
    {
        v9 = a5 * a1 - a1 + a2;
    }
    else
    {
        v9 = (a2 - a3 - a3) - a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 7
2 7
3 7
4 7
5 7
6 13
7 15
8 15
9 15
10 15
11 15
12 19
13 19
14 19
15 21
16 21
17 23
18 23
19 23
20 23
21 27
22 27
23 27
24 27
25 29
26 29
27 29
28 29
29 29
30 29
31 29
32 29
33 30
<<<sep_out_sample>>>
cmp %edi,%edx
jge b <func1+0xb>
mov %ecx,%eax
imul %edx,%eax
jmp 11 <func1+0x11>
lea (%r8,%r8,2),%eax
sub %esi,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a3 < a1)
    {
        v6 = (a4 * a3) + a2 - a2;
    }
    else
    {
        v6 = (a5 + (a5 + a5)) - a2;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += a1 - a1 * a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 17
9 17
10 17
11 17
12 17
13 18
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
lea (%r8,%rcx,1),%eax
imul %edi,%edi
sub %ecx,%edi
imul %ecx,%edi
add %edi,%eax
add $0x1,%ecx
imul %ecx,%esi
add %esi,%edx
lea 0x1(%rax,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = a4 * (a1 * a1 - a4);
    v7 = (a2 + a2 * a4) + a3;
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += (a4 - a4) - a2;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a5)
    {
        v10 += a1 * a5 * a5;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 16
4 16
5 4
6 4
7 4
8 16
9 5
10 5
11 5
12 16
13 17
<<<sep_out_sample>>>
mov %esi,%eax
imul %ecx,%eax
mov %edi,%r11d
sub %eax,%r11d
mov %r11d,%eax
sub %ecx,%eax
mov %ecx,%r9d
imul %edx,%r9d
imul %esi,%r9d
mov %edi,%r11d
sub %r9d,%r11d
lea (%rdi,%rsi,2),%r10d
add %r8d,%r10d
cmp %r8d,%edi
jle 37 <func1+0x37>
lea (%r8,%rcx,1),%r9d
lea (%r9,%rdi,2),%r9d
jmp 43 <func1+0x43>
lea -0x1(%rcx),%r9d
imul %edi,%r9d
imul %ecx,%r9d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a1 - a2 * a4 - a4;
    v7 = a1 - a4 * a3 * a2;
    v8 = (a2 + (a2 + a1)) + a5;
    if (a5 < a1)
    {
        v9 = (a5 + a4) + a1 + a1;
    }
    else
    {
        v9 = (a4 * a1 - a1) * a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 4
6 4
7 5
8 5
9 5
10 5
11 5
12 6
13 6
14 7
15 7
16 9
17 9
18 9
19 13
20 13
21 13
22 15
23 15
24 15
25 15
26 15
27 15
28 15
29 15
30 16
<<<sep_out_sample>>>
mov %edx,%r10d
imul %ecx,%r10d
sub %edi,%r10d
add %esi,%r10d
lea (%rdi,%rdx,1),%eax
lea (%rsi,%rdi,1),%r9d
cmp %r8d,%ecx
cmovg %eax,%r9d
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
lea (%rdi,%rdi,2),%edx
add %edx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a3 < a3)
    {
        v6 = (a4 + a3) + a5 - a5;
    }
    else
    {
        v6 = a2 + (a3 * a4 - a1);
    }
    if (a5 < a4)
    {
        v7 = a1 + a3;
    }
    else
    {
        v7 = a2 + a1;
    }
    v8 = a1 + a1 + a1 + a5;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 14
6 14
7 14
8 14
9 21
10 21
11 21
12 21
13 21
14 20
15 20
16 21
17 22
<<<sep_out_sample>>>
mov %esi,%r9d
imul %ecx,%r9d
imul %ecx,%r9d
add %r8d,%r9d
mov %r8d,%eax
sub %edi,%eax
cmp %edi,%ecx
jle 21 <func1+0x21>
mov %edx,%eax
imul %edi,%eax
add %ecx,%eax
imul %edi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = (a2 * a4 * a4) + a5;
    if (a1 < a4)
    {
        v7 = a1 * ((a3 * a1) + a4);
    }
    else
    {
        v7 = a5 - a1 + a2 - a2;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 11
6 11
7 5
8 5
9 7
10 7
11 7
12 7
13 13
14 13
15 13
16 13
17 13
18 13
19 14
<<<sep_out_sample>>>
cmp %esi,%r8d
jge a <func1+0xa>
lea (%rsi,%rsi,1),%eax
jmp f <func1+0xf>
lea (%rdi,%rsi,2),%eax
add %edi,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (v7 < a3)
        {
            v6 += a5 - a5 * a5;
        }
        else
        {
            v6 += (a1 + a2) * a3;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += a3 * (a4 * a4);
    }
    v10 = a3 - a3;
    if (a5 < a2)
    {
        v11 = a2 - a1 + a2 + a1;
    }
    else
    {
        v11 = a1 + (a2 + a2) + a1;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 24
4 24
5 28
6 28
7 30
8 30
9 30
10 30
11 30
12 31
<<<sep_out_sample>>>
test %ecx,%ecx
jle b <func1+0xb>
mov %edx,%eax
imul %esi,%eax
jmp 13 <func1+0x13>
lea 0x1(%rsi),%eax
imul %ecx,%eax
add %esi,%eax
mov %ecx,%r9d
imul %esi,%r9d
lea 0x1(%rdi,%r9,1),%edi
add %edi,%edx
add %edx,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a4 * a1 + a5;
    }
    if (v6 < a4)
    {
        v8 = a3 * a2;
    }
    else
    {
        v8 = a2 + (a4 * a2 + a4);
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        v9 += a5 + (a1 + a1);
    }
    v11 = a4 * a2;
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 15
7 15
8 15
9 22
10 22
11 23
12 23
13 23
14 23
15 23
16 23
17 24
<<<sep_out_sample>>>
cmp %r8d,%edx
jge 11 <func1+0x11>
lea (%rdi,%r8,1),%eax
imul %esi,%eax
imul %ecx,%eax
jmp 1b <func1+0x1b>
mov %ecx,%eax
imul %r8d,%eax
imul %r8d,%eax
lea 0x1(%rdx,%rdi,2),%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    if (a3 < a5)
    {
        v6 = (a1 + a5) * a2 * a4;
    }
    else
    {
        v6 = a5 * (a4 * a5);
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += a5 - a1 * a5;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        v9 += a4 * a5;
    }
    v11 = a1 + a3 - (a5 - a5);
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 23
11 23
12 23
13 23
14 23
15 23
16 24
<<<sep_out_sample>>>
mov %ecx,%eax
imul %ecx,%eax
add %edi,%eax
add %edx,%eax
add %esi,%eax
add %r8d,%eax
lea 0x1(%rcx,%rax,1),%eax
imul %esi,%edi
add %edi,%eax
add %r8d,%esi
sub %esi,%edx
add %edx,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a2 * a4;
    }
    v8 = (a2 * a1) + a2 - a2;
    v9 = a4 - (a2 + a5 - a3);
    v10 = a4 * a4;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 12
4 12
5 12
6 12
7 12
8 9
9 12
10 10
11 10
12 10
13 12
14 13
<<<sep_out_sample>>>
mov %edi,%r9d
imul %edx,%r9d
sub %esi,%r9d
sub %r8d,%r9d
lea (%rdi,%rcx,1),%eax
cmp %edx,%edi
jle 25 <func1+0x25>
mov %edi,%eax
imul %esi,%eax
imul %edx,%eax
mov %ecx,%r11d
sub %eax,%r11d
mov %r11d,%eax
lea (%rdi,%rdx,1),%r10d
add %r10d,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
add %ecx,%eax
sub %edx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = (a1 * a3 - a2) - a5;
    if (a3 < a1)
    {
        v7 = a4 - (a3 * (a1 * a2));
    }
    else
    {
        v7 = a1 + a4;
    }
    v8 = a1 - (a3 + a1 - a1);
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 11
6 5
7 5
8 7
9 7
10 7
11 7
12 7
13 7
14 14
15 14
16 14
17 14
18 14
19 14
20 13
21 14
22 15
<<<sep_out_sample>>>
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
sub %edi,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += (a3 + a2) + a3;
    }
    v8 = (a3 - a1 + a4) - a3;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 9
6 10
7 11
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %edx,%r8d
lea (%rdi,%rcx,2),%eax
lea 0x1(%r8,%rax,1),%eax
sub %esi,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a4 + a1;
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += a5 * a4 + a2;
    }
    v9 = a1 - a2;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 4
5 11
6 10
7 11
8 12
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
sub %edi,%edx
add %eax,%edx
lea 0x1(%rcx),%eax
imul %eax,%r8d
sub %ecx,%r8d
lea (%rdx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a3 < a3)
    {
        v6 = a2 + a5;
    }
    else
    {
        v6 = a3 - a1;
    }
    v7 = a5 + a5 * a4 - a4;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 13
2 13
3 13
4 13
5 10
6 13
7 12
8 12
9 12
10 13
11 14
<<<sep_out_sample>>>
lea (%rdx,%rcx,1),%r10d
test %r8d,%r8d
jg 16 <func1+0x16>
mov %edi,%r10d
sub %edx,%r10d
sub %esi,%r10d
imul %edi,%r10d
lea (%rdi,%rcx,2),%r9d
add %edx,%r9d
cmp %r8d,%edx
jle 29 <func1+0x29>
mov %edx,%eax
imul %esi,%eax
jmp 33 <func1+0x33>
mov %esi,%eax
sub %edi,%eax
imul %edx,%eax
add %r8d,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a5 * (a2 + a3);
    }
    if (v8 < a5)
    {
        v8 = ((a4 + a1) - a1) + a3;
    }
    else
    {
        v8 = a1 * ((a1 - a3) - a2);
    }
    v9 = a3 + (a4 + a4 + a1);
    if (a5 < a3)
    {
        v10 = (a4 + a3 * a2) - a4;
    }
    else
    {
        v10 = a5 - ((a1 - a2) * a3);
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 9
3 9
4 15
5 15
6 15
7 15
8 17
9 17
10 18
11 18
12 20
13 20
14 20
15 24
16 24
17 24
18 24
19 26
20 26
21 26
22 26
23 26
24 26
25 26
26 27
<<<sep_out_sample>>>
cmp %r8d,%ecx
jge 11 <func1+0x11>
mov %ecx,%eax
imul %esi,%eax
imul %esi,%eax
add %ecx,%eax
jmp 1a <func1+0x1a>
lea (%rcx,%rdx,1),%eax
imul %r8d,%eax
sub %ecx,%eax
add %edx,%edi
add %esi,%edi
add %edi,%r8d
add %ecx,%r8d
add %r8d,%eax
add $0x1,%ecx
imul %ecx,%edx
imul %edx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a4 < a5)
    {
        v6 = a4 + a4 * a2 * a2;
    }
    else
    {
        v6 = ((a4 + a3) * a5) - a4;
    }
    v7 = a2 * ((a3 * a4) + a3);
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 13
12 13
13 13
14 13
15 13
16 12
17 12
18 12
19 13
20 14
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %r8d,%edx
add %edx,%ecx
lea 0x1(%rsi,%rcx,1),%eax
mov %edi,%edx
imul %edi,%edx
add %r8d,%edi
imul %edx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a3 < a3)
    {
        v6 = (a5 + a2) + a4 * a4;
    }
    else
    {
        v6 = a2 + a2 - a2;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += a1 + a1;
    }
    v9 = a1 * a1 * (a5 + a1);
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 18
5 18
6 17
7 17
8 17
9 17
10 18
11 19
<<<sep_out_sample>>>
mov %r8d,%eax
sub %edx,%eax
cmp %esi,%edi
jl 12 <func1+0x12>
mov %edi,%eax
sub %r8d,%eax
sub %edx,%eax
sub %esi,%eax
add %edx,%edi
add %esi,%edi
add %edi,%r8d
add %r8d,%ecx
add %eax,%ecx
add %edx,%esi
lea 0x1(%rcx,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a1 < a2)
    {
        v6 = a5 - a3;
    }
    else
    {
        v6 = (a1 - a5) - a3 - a2;
    }
    v7 = a2 + a3;
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        if (a5 < a3)
        {
            v8 += (a2 + a4) * a4;
        }
        else
        {
            v8 += a4 + (a3 * a4);
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 6
3 4
4 4
5 10
6 10
7 10
8 10
9 25
10 25
11 25
12 25
13 25
14 12
15 25
16 26
<<<sep_out_sample>>>
cmp %ecx,%edi
jge c <func1+0xc>
mov %edi,%eax
imul %r8d,%eax
jmp 18 <func1+0x18>
mov %edi,%eax
sub %r8d,%eax
imul %edi,%eax
imul %r8d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (a5 < a2)
        {
            v6 += (a5 - a5) * a1;
        }
        else
        {
            v6 += (a2 + a1) * a1;
        }
    }
    if (a1 < a4)
    {
        v8 = a3 + (a1 * a5 - a3);
    }
    else
    {
        v8 = a1 * (a1 - a5) * a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 22
7 22
8 22
9 22
10 24
11 24
12 24
13 24
14 24
15 25
<<<sep_out_sample>>>
mov %edx,%eax
sub %edi,%eax
cmp %ecx,%esi
jge 19 <func1+0x19>
mov %ecx,%eax
imul %ecx,%eax
imul %edx,%eax
mov %edi,%r9d
sub %eax,%r9d
mov %r9d,%eax
add %edi,%edx
add %edx,%esi
add %r8d,%esi
add %ecx,%esi
add %esi,%eax
imul %edi,%edi
add %ecx,%edi
add %edi,%eax
sub %r8d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a2 < a4)
    {
        v6 = a1 - a4 * a4 * a3;
    }
    else
    {
        v6 = (a2 - a2 + a3) - a1;
    }
    v7 = a4 + a1 * a1;
    if (a2 < a2)
    {
        v8 = a3 + (a2 - a1) + a4;
    }
    else
    {
        v8 = a4 - a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 4
4 4
5 6
6 6
7 6
8 6
9 6
10 6
11 21
12 21
13 21
14 21
15 21
16 12
17 12
18 21
19 19
20 21
21 22
<<<sep_out_sample>>>
mov %edx,%eax
sub %esi,%eax
sub %r8d,%eax
lea 0x1(%rdx,%rax,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (v7 < a1)
        {
            v6 += a2 * a4 + a5;
        }
        else
        {
            v6 += a4 * a5 * a1;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        if (a5 < a2)
        {
            v8 += a1 + a4;
        }
        else
        {
            v8 += a1 - a3 * a5;
        }
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a4)
    {
        if (a3 < a4)
        {
            v10 += (a4 + a5) * a2;
        }
        else
        {
            v10 += (a4 + a1) + a2;
        }
    }
    v12 = a3 - a2 - a5 - a1;
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 40
2 40
3 40
4 41
5 41
6 41
7 41
8 42
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a4 - a5;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        if (a4 < a2)
        {
            v8 += a1 * a5 - a4;
        }
        else
        {
            v8 += a5 + a3;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 21
5 22
<<<sep_out_sample>>>
lea (%rcx,%rdx,1),%eax
test %r8d,%r8d
jle 10 <func1+0x10>
lea (%rdi,%rsi,1),%eax
imul %ecx,%eax
add %edi,%eax
mov %ecx,%r9d
neg %r9d
lea (%r8,%rcx,1),%r10d
sub %esi,%r9d
cmp %ecx,%esi
cmovg %r10d,%r9d
lea 0x1(%r9,%rdi,1),%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    if (v6 < a5)
    {
        v6 = a1 + (a4 * (a1 + a2));
    }
    else
    {
        v6 = a4 + a3;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += a1 * a2 * a4;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        if (v10 < a2)
        {
            v9 += a1 - a1;
        }
        else
        {
            v9 += (a1 * a2) + a3;
        }
    }
    if (a4 < a2)
    {
        v11 = a5 + a4;
    }
    else
    {
        v11 = a1 - a4 - a1 - a2;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 6
7 35
8 35
9 31
10 31
11 31
12 31
13 37
14 37
15 37
16 37
17 37
18 37
19 38
<<<sep_out_sample>>>
add %edi,%edx
add %edx,%esi
add %r8d,%esi
add %ecx,%esi
sub %ecx,%edi
sub %ecx,%edi
add %edi,%r8d
lea 0x1(%rsi,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a1 - a4 - a4 + a5;
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += a1 + a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 4
6 4
7 4
8 10
9 11
<<<sep_out_sample>>>
lea (%rdx,%r8,1),%r9d
test %edx,%edx
jg 10 <func1+0x10>
lea (%rcx,%rdx,2),%r9d
imul %edi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
lea (%rsi,%rdx,1),%r9d
add %r9d,%eax
sub %esi,%edi
sub %edx,%edi
imul %edi,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (v6 < a3)
    {
        v6 = a3 + a5;
    }
    else
    {
        v6 = a1 * (a3 + a4 + a3);
    }
    v7 = (a3 - a5 + a2) + a5;
    v8 = (a1 - a2 - a3) * a5;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 6
2 4
3 4
4 10
5 10
6 14
7 14
8 14
9 14
10 14
11 12
12 14
13 13
14 13
15 13
16 14
17 15
<<<sep_out_sample>>>
push %rbx
mov %ecx,%r9d
sub %edx,%r9d
mov %r8d,%eax
imul %r8d,%eax
mov %ecx,%r11d
sub %eax,%r11d
imul %esi,%r11d
cmp %r9d,%ecx
jle 2b <func1+0x2b>
lea (%rcx,%rdx,1),%r10d
mov %ecx,%ebx
imul %ecx,%ebx
sub %ebx,%r10d
jmp 37 <func1+0x37>
mov %ecx,%r10d
sub %esi,%r10d
sub %edx,%r10d
add %ecx,%r10d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %ecx,%r8d
add %r8d,%r9d
add %r11d,%r9d
add %r10d,%r9d
mov %ecx,%eax
imul %ecx,%eax
sub %edx,%eax
sub %ecx,%eax
add %r9d,%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a1 < a1)
    {
        v6 = ((a5 + a1) * a1) + a3;
    }
    else
    {
        v6 = (a5 - a3 + a4) - a5;
    }
    if (a4 < a4)
    {
        v7 = (a1 + (a4 - a1)) + a3;
    }
    else
    {
        v7 = (a4 - a5 * a5) * a2;
    }
    if (v6 < a4)
    {
        v8 = a4 + a3 - a4 * a4;
    }
    else
    {
        v8 = a4 + (a4 - a2 - a3);
    }
    v9 = (a4 * a4 - a3) - a4;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 10
3 10
4 18
5 18
6 18
7 18
8 18
9 20
10 20
11 22
12 22
13 22
14 22
15 22
16 26
17 26
18 26
19 26
20 29
21 29
22 29
23 29
24 29
25 29
26 29
27 28
28 28
29 28
30 28
31 29
32 30
33 30
<<<sep_out_sample>>>
test %edi,%edi
jle f <func1+0xf>
mov %esi,%eax
sub %edx,%eax
imul %ecx,%eax
sub %edi,%eax
jmp 18 <func1+0x18>
mov %esi,%eax
sub %ecx,%eax
imul %esi,%eax
add %ecx,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %r8d,%esi
add %esi,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (v6 < a1)
    {
        v6 = (a2 - a3) * a4 - a1;
    }
    else
    {
        v6 = a4 - (a4 - a2) * a2;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += a4 + a1 * a5;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        if (v7 < a5)
        {
            v9 += a3 * a3 - a5;
        }
        else
        {
            v9 += (a1 + a4) + a3;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 29
13 29
14 29
15 29
16 29
17 30
<<<sep_out_sample>>>
mov %edx,%eax
imul %r8d,%eax
imul %ecx,%eax
mov %edx,%r10d
sub %eax,%r10d
mov %ecx,%r9d
sub %r8d,%r9d
cmp %edi,%ecx
jg 20 <func1+0x20>
mov %esi,%r9d
imul %ecx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a3 - (a4 * (a3 * a5));
    if (a1 < a4)
    {
        v7 = a4 - (a5 + a4) + a4;
    }
    else
    {
        v7 = a2 * a4;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 4
6 7
7 7
8 5
9 5
10 11
11 11
12 13
13 13
14 13
15 13
16 13
17 13
18 14
<<<sep_out_sample>>>
cmp %r8d,%esi
jge c <func1+0xc>
lea (%rdi,%rsi,2),%eax
sub %edx,%eax
jmp 15 <func1+0x15>
lea (%r8,%r8,1),%eax
imul %edx,%eax
sub %edi,%eax
add %edx,%edi
add %esi,%edi
add %r8d,%edi
add %ecx,%edi
add %eax,%edi
add %edx,%r8d
imul %r8d,%esi
sub %ecx,%esi
lea (%rdi,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a2 < a5)
    {
        v6 = ((a2 - a3) + a1) + a2;
    }
    else
    {
        v6 = (a3 * (a5 + a5)) - a1;
    }
    v7 = a2 * (a5 + a3) - a4;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 13
10 13
11 13
12 13
13 13
14 12
15 12
16 12
17 13
18 14
<<<sep_out_sample>>>
lea (%rcx,%rcx,1),%r9d
mov %esi,%eax
imul %edi,%eax
cmp %ecx,%edx
cmovl %eax,%r9d
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %eax,%ecx
lea 0x1(%r9,%rcx,1),%eax
sub %esi,%edx
add %edx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    if (a3 < a4)
    {
        v6 = a2 * a1;
    }
    else
    {
        v6 = a4 + a4;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += a5 - a5 - a2;
    }
    v9 = a3 - a2 + a5;
    v10 = 0;
    for (v11 = 0; v11++; v11<a2)
    {
        v10 += a3 - a5 + a3;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 6
3 6
4 6
5 6
6 23
7 23
8 23
9 23
10 23
11 17
12 17
13 23
14 24
<<<sep_out_sample>>>
cmp %ecx,%edi
jge e <func1+0xe>
lea (%rdi,%rsi,1),%r11d
imul %ecx,%r11d
jmp 1e <func1+0x1e>
mov %r8d,%eax
imul %r8d,%eax
mov %edx,%r11d
sub %eax,%r11d
sub %ecx,%r11d
cmp %esi,%edi
jge 36 <func1+0x36>
mov %ecx,%eax
imul %edx,%eax
mov %r8d,%r10d
sub %eax,%r10d
add %edi,%r10d
lea (%rdi,%rdx,1),%r9d
jmp 4c <func1+0x4c>
lea (%r8,%rdi,1),%r10d
sub %edx,%r10d
add %edi,%r10d
mov %r8d,%r9d
sub %edi,%r9d
add %r8d,%r9d
sub %esi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a1 < a4)
    {
        v6 = a4 * a1 + a4 * a2;
    }
    else
    {
        v6 = a3 - a5 * a5 - a4;
    }
    if (a1 < a2)
    {
        v7 = a5 - (a4 * a3) + a1;
    }
    else
    {
        v7 = a5 + a1 - a3 + a1;
    }
    if (a1 < a2)
    {
        v8 = a1 + a3;
    }
    else
    {
        v8 = ((a5 - a1) + a5) - a2;
    }
    v9 = a1 - a1;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 10
10 10
11 12
12 12
13 14
14 14
15 14
16 14
17 14
18 22
19 22
20 18
21 18
22 18
23 26
24 26
25 26
26 26
27 29
28 29
29 29
30 29
31 29
32 29
33 29
34 30
<<<sep_out_sample>>>
lea (%rdx,%rcx,1),%r9d
cmp %edi,%ecx
jle 11 <func1+0x11>
mov %ecx,%eax
sub %r8d,%eax
add %eax,%eax
jmp 19 <func1+0x19>
lea (%rdi,%rdi,1),%eax
sub %edx,%eax
imul %edx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a3 + a4;
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a5 - a4;
    }
    if (a1 < a4)
    {
        v9 = ((a4 - a5) + a4) - a5;
    }
    else
    {
        v9 = (a1 + a1 - a3) * a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 10
3 10
4 12
5 12
6 12
7 12
8 16
9 16
10 16
11 18
12 18
13 18
14 18
15 18
16 18
17 19
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%r11d
sub %esi,%r11d
mov %edi,%eax
imul %r8d,%eax
mov %ecx,%r10d
sub %eax,%r10d
mov %ecx,%r9d
sub %esi,%r9d
test %r8d,%r8d
jg 2a <func1+0x2a>
mov %edx,%r9d
sub %esi,%r9d
sub %esi,%r9d
sub %r8d,%r9d
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = (a1 + a3) - a2;
    v7 = a4 - a1 * a5;
    if (v8 < a5)
    {
        v8 = a4 - a2;
    }
    else
    {
        v8 = a3 - a2 - a2 - a5;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        v9 += (a4 + a5) - a3;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 5
4 5
5 5
6 5
7 8
8 8
9 6
10 6
11 12
12 12
13 12
14 12
15 19
16 19
17 19
18 19
19 19
20 19
21 19
22 20
<<<sep_out_sample>>>
test %edx,%edx
jle d <func1+0xd>
mov %esi,%r10d
imul %edx,%r10d
jmp 15 <func1+0x15>
lea 0x1(%rdi),%r10d
imul %esi,%r10d
mov %edi,%r9d
sub %ecx,%r9d
cmp %edi,%esi
jl 2c <func1+0x2c>
mov %edi,%r9d
sub %ecx,%r9d
imul %esi,%r9d
add %edi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
sub %edx,%eax
sub %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (v6 < a3)
    {
        v6 = a2 * a3;
    }
    else
    {
        v6 = a2 + a2 * a1;
    }
    if (a2 < a1)
    {
        v7 = a1 - a4;
    }
    else
    {
        v7 = (a2 * (a1 - a4)) + a1;
    }
    v8 = a4 - ((a4 + a2) + a3);
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 14
9 14
10 12
11 12
12 18
13 18
14 18
15 18
16 21
17 21
18 21
19 21
20 21
21 21
22 20
23 21
24 22
<<<sep_out_sample>>>
test %r8d,%r8d
jle 16 <func1+0x16>
mov %edi,%r9d
imul %edx,%r9d
mov %esi,%eax
imul %esi,%eax
add %r9d,%eax
jmp 1d <func1+0x1d>
mov %edx,%eax
sub %r8d,%eax
sub %ecx,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (a5 < a3)
        {
            v6 += a1 + a5 * a2;
        }
        else
        {
            v6 += a2 + a1;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        if (a4 < a5)
        {
            v8 += a1 * a5 + a3;
        }
        else
        {
            v8 += (a2 + a1) - a4;
        }
    }
    if (v8 < a5)
    {
        v10 = (a1 * a3) + (a2 * a2);
    }
    else
    {
        v10 = a3 - a5 - a4;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 28
2 28
3 30
4 30
5 30
6 30
7 30
8 30
9 34
10 34
11 34
12 36
13 36
14 36
15 36
16 36
17 37
<<<sep_out_sample>>>
lea (%rcx,%r8,1),%eax
mov %esi,%r9d
sub %edi,%r9d
test %edx,%edx
cmovle %r9d,%eax
cmp %ecx,%eax
jge 21 <func1+0x21>
mov %r8d,%r9d
imul %esi,%r9d
lea (%r9,%rdx,2),%r9d
jmp 30 <func1+0x30>
mov %r8d,%r9d
imul %edx,%r9d
add $0x1,%r9d
imul %r8d,%r9d
add %edi,%edx
add %esi,%edx
add %r8d,%edx
add %ecx,%edx
add %edx,%eax
add %r9d,%eax
imul %ecx,%esi
imul %esi,%edi
add %edi,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (v6 < a3)
    {
        v6 = a5 + a5 - (a5 - a4);
    }
    else
    {
        v6 = a2 - a1;
    }
    if (v6 < a4)
    {
        v7 = a5 * a2 + a3 + a3;
    }
    else
    {
        v7 = a5 + (a5 * a3 * a5);
    }
    v8 = a5 + (a2 * a4 * a1);
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 6
6 12
7 12
8 14
9 14
10 14
11 14
12 18
13 18
14 18
15 18
16 21
17 21
18 21
19 21
20 21
21 21
22 20
23 20
24 20
25 21
26 22
<<<sep_out_sample>>>
cmp %edi,%edx
jge d <func1+0xd>
mov %r8d,%eax
sub %esi,%eax
add %edx,%eax
jmp 12 <func1+0x12>
mov %ecx,%eax
imul %ecx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a3 < a1)
    {
        v6 = a5 - a2 + a3;
    }
    else
    {
        v6 = a4 * a4;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        if (a2 < a2)
        {
            v7 += a3 * a4 - a3;
        }
        else
        {
            v7 += a1 - a5 - a1;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 24
10 24
11 24
12 24
13 24
14 25
<<<sep_out_sample>>>
lea 0x2(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12, v13 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a5 * (a3 + a1);
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += a3 + a3 - a4;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a2)
    {
        if (a2 < a1)
        {
            v10 += a2 - (a3 - a2);
        }
        else
        {
            v10 += a2 + a4 + a1;
        }
    }
    v12 = 0;
    for (v13 = 0; v13++; v13<a4)
    {
        if (v10 < a4)
        {
            v12 += (a1 + a3) * a2;
        }
        else
        {
            v12 += a5 * (a3 * a5);
        }
    }
    return v12+v13+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 38
2 38
3 38
4 38
5 39
<<<sep_out_sample>>>
lea (%rsi,%r8,1),%eax
cmp %ecx,%eax
jge 17 <func1+0x17>
mov %edx,%r9d
imul %edx,%r9d
add %ecx,%r9d
sub %r8d,%r9d
jmp 21 <func1+0x21>
mov %r8d,%r9d
imul %edi,%r9d
add %eax,%r9d
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%eax
lea 0x1(%r9,%rax,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = a2 + a5;
    if (v6 < a4)
    {
        v7 = a3 * a3 + a4 - a5;
    }
    else
    {
        v7 = (a5 * a1) + (a5 + a2);
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += a5 + a4 + a2;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a5)
    {
        v10 += a2 + a3 - a3;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 5
3 5
4 7
5 7
6 7
7 7
8 7
9 11
10 11
11 11
12 23
13 23
14 23
15 23
16 23
17 23
18 24
<<<sep_out_sample>>>
lea (%rcx,%rdx,1),%eax
cmp %ecx,%esi
jge e <func1+0xe>
mov %edx,%eax
sub %esi,%eax
sub %r8d,%eax
cmp %edi,%r8d
jge 24 <func1+0x24>
mov %esi,%r9d
imul %edx,%r9d
imul %ecx,%r9d
imul %edx,%r9d
jmp 2f <func1+0x2f>
lea -0x1(%rsi),%r9d
imul %ecx,%r9d
add %edx,%r9d
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%eax
lea 0x1(%r9,%rax,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    if (a2 < a4)
    {
        v6 = a3 - a2 - a5;
    }
    else
    {
        v6 = a4 + a3;
    }
    if (a5 < a1)
    {
        v7 = a2 * a3 * a4 * a3;
    }
    else
    {
        v7 = (a4 * a2) - a4 + a3;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += a2 - a2 + a4;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a4)
    {
        v10 += a2 - (a4 * a2);
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 6
7 12
8 12
9 14
10 14
11 14
12 14
13 14
14 18
15 18
16 18
17 30
18 30
19 30
20 30
21 30
22 30
23 31
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
lea (%r8,%rcx,1),%eax
mov %ecx,%r8d
imul %edx,%r8d
imul %r8d,%ecx
add %ecx,%edi
lea 0x1(%rax,%rdi,1),%eax
imul %edx,%edx
add %edx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a2 < a2)
    {
        v6 = (a1 + a2) - a2 * a4;
    }
    else
    {
        v6 = ((a4 * a3) * a4) + a1;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a4 * a1 + a3;
    }
    if (a4 < a4)
    {
        v9 = a2 * a5 - a1 + a5;
    }
    else
    {
        v9 = a2 + (a3 * a3);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 25
2 25
3 25
4 25
5 10
6 10
7 10
8 10
9 25
10 23
11 23
12 25
13 26
<<<sep_out_sample>>>
lea (%rsi,%rdi,1),%r9d
cmp %esi,%edx
jge 17 <func1+0x17>
mov %edi,%r9d
imul %edx,%r9d
imul %edx,%r9d
imul %esi,%r9d
cmp $0x1,%edx
jle 2a <func1+0x2a>
mov $0x1,%eax
sub %edi,%eax
imul %esi,%eax
add %edx,%eax
jmp 31 <func1+0x31>
mov %edx,%eax
neg %eax
imul %edi,%eax
add %edi,%edx
add %edx,%esi
add %r8d,%esi
add %esi,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a3 < a2)
    {
        v6 = (a1 * a3) * a3 * a2;
    }
    else
    {
        v6 = a2 + a1;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        if (a2 < a1)
        {
            v7 += a3 + a3;
        }
        else
        {
            v7 += a1 - a5;
        }
    }
    if (v8 < a3)
    {
        v9 = (a2 - a2 * a1) + a3;
    }
    else
    {
        v9 = (a1 - (a1 + a3)) * a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 6
7 6
8 24
9 24
10 26
11 26
12 26
13 26
14 26
15 30
16 30
17 30
18 32
19 32
20 32
21 32
22 32
23 32
24 33
<<<sep_out_sample>>>
mov %esi,%eax
sub %edi,%eax
cmp %edi,%r8d
jl 12 <func1+0x12>
mov %ecx,%eax
imul %edx,%eax
add %esi,%eax
add %edi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a5 + a1;
    }
    if (a5 < a1)
    {
        v8 = a2 - a1;
    }
    else
    {
        v8 = a2 + (a4 * a3) + a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 11
2 11
3 9
4 9
5 15
6 15
7 15
8 15
9 17
10 17
11 17
12 17
13 17
14 18
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %esi,%ecx
add %r8d,%edi
add %edi,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = a4 + a2 + (a5 + a1);
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += a3 + (a3 - a3);
    }
    v9 = a2 * (a5 - a5) * a2;
    v10 = 0;
    for (v11 = 0; v11++; v11<a3)
    {
        if (v6 < a4)
        {
            v10 += a2 * a2 - a4;
        }
        else
        {
            v10 += (a5 * a4) + a4;
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 23
2 23
3 23
4 23
5 4
6 4
7 4
8 23
9 24
<<<sep_out_sample>>>
cmp %edi,%r8d
jge 12 <func1+0x12>
lea (%r8,%rdx,1),%r9d
add %esi,%r9d
imul %esi,%r9d
jmp 1b <func1+0x1b>
lea 0x1(%rsi,%rcx,1),%r9d
imul %edx,%r9d
test %edx,%edx
jle 32 <func1+0x32>
mov %ecx,%eax
imul %r8d,%eax
mov %edx,%r11d
sub %eax,%r11d
mov %r11d,%eax
add %edx,%eax
jmp 40 <func1+0x40>
mov %edi,%eax
sub %ecx,%eax
mov %edi,%r10d
imul %esi,%r10d
sub %r10d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a5 < a1)
    {
        v6 = (a5 + a3 + a2) * a2;
    }
    else
    {
        v6 = a3 + (a4 + a2) * a3;
    }
    if (v7 < a3)
    {
        v7 = (a3 - a4 * a5) + a3;
    }
    else
    {
        v7 = a1 - a4 - a1 * a2;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 12
10 12
11 14
12 14
13 14
14 14
15 14
16 14
17 14
18 18
19 18
20 18
21 18
22 18
23 20
24 20
25 20
26 20
27 20
28 20
29 21
<<<sep_out_sample>>>
cmp %r8d,%edx
jge 1b <func1+0x1b>
mov %esi,%eax
imul %r8d,%eax
mov %edi,%r9d
sub %eax,%r9d
sub %esi,%r9d
mov $0x0,%eax
jmp 2e <func1+0x2e>
mov %ecx,%eax
imul %r8d,%eax
mov %esi,%r9d
sub %eax,%r9d
add %edx,%r9d
mov %edx,%eax
neg %eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    if (a3 < a5)
    {
        v6 = (a1 - a2 * a5) - a2;
    }
    else
    {
        v6 = a2 - a4 * a5 + a3;
    }
    if (a3 < a5)
    {
        v7 = a3 - a3;
    }
    else
    {
        v7 = (a1 - a1) - a3;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        if (v9 < a4)
        {
            v8 += a3 + a2 * a5;
        }
        else
        {
            v8 += a4 * a1 - a2;
        }
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a5)
    {
        v10 += a5 + a1 * a4;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 14
9 14
10 10
11 10
12 10
13 10
14 10
15 18
16 18
17 37
18 37
19 37
20 37
21 37
22 37
23 38
<<<sep_out_sample>>>
lea (%rdx,%rdi,1),%eax
mov %r8d,%r11d
sub %eax,%r11d
mov %r11d,%eax
sub %edx,%eax
lea (%rcx,%r8,1),%r9d
mov %r8d,%r10d
imul %ecx,%r10d
cmp $0x2,%r8d
cmovge %r10d,%r9d
lea 0x1(%r9,%rdi,1),%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (a1 < a1)
        {
            v6 += (a4 * a1) * a3;
        }
        else
        {
            v6 += a2 * a3 + a4;
        }
    }
    v8 = (a5 - (a3 + a1)) - a3;
    v9 = 0;
    for (v10 = 0; v10++; v10<a1)
    {
        v9 += a3 + a1 * a3;
    }
    if (v7 < a5)
    {
        v11 = a5 * a4;
    }
    else
    {
        v11 = a4 + a5;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 16
4 16
5 16
6 28
7 24
8 24
9 24
10 24
11 30
12 30
13 30
14 30
15 30
16 30
17 31
<<<sep_out_sample>>>
mov %edx,%r9d
sub %edi,%r9d
lea (%rcx,%r8,1),%eax
cmp %ecx,%edx
jge 20 <func1+0x20>
mov %edx,%eax
imul %r8d,%eax
imul %edx,%eax
mov %edi,%r10d
sub %eax,%r10d
mov %r10d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a3 - a1;
    if (a3 < a4)
    {
        v7 = a1 - (a3 * a5) * a3;
    }
    else
    {
        v7 = a4 + a5;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 11
4 5
5 5
6 7
7 7
8 7
9 7
10 7
11 7
12 13
13 13
14 13
15 13
16 13
17 13
18 14
<<<sep_out_sample>>>
lea 0x2(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12, v13 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (v6 < a4)
        {
            v6 += a5 + a1 - a1;
        }
        else
        {
            v6 += a5 + a4 + a5;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += a5 * a4 + a2;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a4)
    {
        if (a5 < a3)
        {
            v10 += (a1 * a2) + a1;
        }
        else
        {
            v10 += a4 - a2;
        }
    }
    v12 = 0;
    for (v13 = 0; v13++; v13<a3)
    {
        if (a4 < a2)
        {
            v12 += (a1 * a5) + a4;
        }
        else
        {
            v12 += a1 - a2 - a5;
        }
    }
    return v12+v13+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 45
2 45
3 45
4 45
5 46
<<<sep_out_sample>>>
cmp $0x1,%edi
jle 15 <func1+0x15>
mov %esi,%r9d
sub %edi,%r9d
mov %esi,%eax
imul %edx,%eax
add %r9d,%eax
jmp 26 <func1+0x26>
mov %edx,%eax
imul %r8d,%eax
add %ecx,%eax
mov %esi,%r10d
sub %eax,%r10d
mov %r10d,%eax
lea (%rdi,%rdx,1),%r9d
add %r9d,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%r8d
lea (%r8,%rax,1),%esi
lea (%rdx,%rcx,2),%eax
sub %edi,%eax
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a3 + a1 - a5;
    }
    if (v7 < a1)
    {
        v8 = a2 - a1 + a2 * a3;
    }
    else
    {
        v8 = a2 - (a3 * a5 + a4);
    }
    v9 = a4 + a3 + a4 - a1;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 11
8 11
9 15
10 15
11 15
12 15
13 15
14 15
15 18
16 18
17 18
18 18
19 18
20 17
21 17
22 18
23 19
<<<sep_out_sample>>>
push %rbx
cmp %edi,%ecx
jge 12 <func1+0x12>
mov %r8d,%ebx
imul %r8d,%ebx
add %edx,%ebx
add %ecx,%ebx
jmp 1c <func1+0x1c>
mov %edi,%ebx
imul %esi,%ebx
sub %r8d,%ebx
add %ecx,%ebx
cmp %edx,%edi
jge 2d <func1+0x2d>
lea (%r8,%rcx,1),%r11d
imul %edx,%r11d
add %esi,%r11d
jmp 3e <func1+0x3e>
mov $0x1,%r11d
sub %r8d,%r11d
imul %r8d,%r11d
imul %esi,%r11d
mov %esi,%r10d
sub %r8d,%r10d
mov %r8d,%r9d
neg %r9d
sub %esi,%r9d
cmp %r8d,%edi
jle 5c <func1+0x5c>
mov %ecx,%r9d
imul %edx,%r9d
add %edi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %ebx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a4 < a1)
    {
        v6 = (a3 + (a5 * a5)) + a4;
    }
    else
    {
        v6 = a4 - (a5 - a1 * a2);
    }
    if (a1 < a3)
    {
        v7 = a2 + (a3 * (a5 + a4));
    }
    else
    {
        v7 = a2 * (a5 - a5 * a5);
    }
    v8 = a2 + (a3 - a3 - a5);
    if (a5 < a1)
    {
        v9 = (a4 * a3) + a1;
    }
    else
    {
        v9 = (a4 - a4 - a5) - a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 4
3 4
4 6
5 6
6 6
7 6
8 6
9 10
10 10
11 10
12 10
13 12
14 12
15 14
16 14
17 14
18 14
19 18
20 18
21 18
22 18
23 20
24 20
25 27
26 27
27 27
28 21
29 21
30 23
31 23
32 23
33 29
34 29
35 29
36 29
37 29
38 29
39 29
40 29
41 30
42 30
<<<sep_out_sample>>>
test %r8d,%r8d
jle f <func1+0xf>
lea (%rcx,%rsi,1),%eax
add %edi,%eax
imul %ecx,%eax
jmp 14 <func1+0x14>
mov %ecx,%eax
imul %edi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a4 + a4;
    }
    if (v6 < a5)
    {
        v8 = a4 * ((a4 + a2) + a1);
    }
    else
    {
        v8 = a4 * a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 15
8 15
9 17
10 17
11 17
12 17
13 17
14 18
<<<sep_out_sample>>>
mov %r8d,%eax
imul %edi,%eax
add %edi,%edx
add %esi,%edx
add %edx,%r8d
add %ecx,%r8d
add %r8d,%eax
add %eax,%edi
imul %ecx,%esi
lea (%rsi,%rcx,2),%edx
lea (%rdi,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = (a2 + a5 * a1) - a2;
    v7 = a3 - a3 + a1;
    if (a4 < a4)
    {
        v8 = (a1 + a4) - a1 - a5;
    }
    else
    {
        v8 = (a4 + a4) + a4 * a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 14
4 14
5 14
6 14
7 14
8 14
9 12
10 12
11 14
12 15
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
imul %edx,%ecx
add %ecx,%eax
lea 0x1(%rsi,%rdx,1),%edx
imul %edx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a4 * a3;
    v7 = a5 + a5 * (a3 + a2);
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 6
7 5
8 5
9 6
10 7
<<<sep_out_sample>>>
lea (%rcx,%r8,1),%r10d
sub %edx,%r10d
sub %esi,%r10d
cmp %edi,%ecx
jge 1f <func1+0x1f>
mov %edi,%eax
imul %r8d,%eax
imul %edi,%eax
mov %ecx,%r9d
sub %eax,%r9d
jmp 2f <func1+0x2f>
mov %r8d,%r9d
sub %edx,%r9d
mov %edx,%r11d
imul %ecx,%r11d
sub %r11d,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a4 + a5 - a3 - a2;
    if (a4 < a1)
    {
        v7 = a4 - a1 * a5 * a1;
    }
    else
    {
        v7 = a5 - a3 - a3 * a4;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 5
5 5
6 7
7 7
8 7
9 7
10 7
11 7
12 11
13 11
14 11
15 11
16 11
17 13
18 13
19 13
20 13
21 13
22 13
23 14
<<<sep_out_sample>>>
cmp %r8d,%esi
jge f <func1+0xf>
mov %edx,%eax
sub %ecx,%eax
sub %edi,%eax
add %edx,%eax
jmp 19 <func1+0x19>
mov %esi,%eax
sub %edi,%eax
imul %edi,%eax
add %r8d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a2 < a5)
    {
        v6 = (a3 - a4) - a1 + a3;
    }
    else
    {
        v6 = (a2 - a1) * a1 + a5;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        if (a1 < a2)
        {
            v7 += a4 * a5 * a1;
        }
        else
        {
            v7 += (a5 * a5) * a2;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 24
13 24
14 24
15 24
16 24
17 25
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%r9d
add %esi,%r9d
add %r8d,%r9d
add %ecx,%r9d
mov %ecx,%r10d
imul %edx,%r10d
mov %edx,%eax
sub %r8d,%eax
add %r10d,%eax
add %r9d,%eax
sub %esi,%ecx
add %r8d,%ecx
sub %esi,%ecx
add %eax,%ecx
imul %edi,%edx
sub %edx,%esi
add %ecx,%esi
lea (%rsi,%r8,2),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = (a4 * a3) - (a5 - a3);
    if (a2 < a2)
    {
        v7 = ((a2 + a1) + a3) - a3;
    }
    else
    {
        v7 = (a4 - a2) + a5 - a2;
    }
    v8 = a2 - (a1 * a3);
    v9 = a5 + a5;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 15
2 15
3 15
4 15
5 4
6 4
7 4
8 4
9 4
10 15
11 11
12 11
13 11
14 15
15 13
16 13
17 15
18 15
19 16
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %edx,%r8d
lea 0x1(%rcx,%r8,1),%eax
imul %esi,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a4 - a2 + a3;
    }
    v8 = a2 * a1;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 9
6 10
7 11
<<<sep_out_sample>>>
cmp %edi,%esi
jge 12 <func1+0x12>
lea (%r8,%rdi,1),%eax
imul %r8d,%eax
imul %r8d,%eax
jmp 24 <func1+0x24>
mov %r8d,%r9d
imul %r8d,%r9d
mov $0x1,%eax
sub %r9d,%eax
imul %edx,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a2 < a1)
    {
        v6 = ((a5 + a1) * a5) * a5;
    }
    else
    {
        v6 = a3 - a3 * (a5 * a5);
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += (a4 * a3) + a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 10
11 10
12 17
13 17
14 17
15 17
16 17
17 18
<<<sep_out_sample>>>
cmp %esi,%edx
jge 16 <func1+0x16>
mov $0x1,%r9d
sub %esi,%r9d
imul %r8d,%r9d
add %edx,%r9d
jmp 23 <func1+0x23>
mov %edi,%r9d
sub %r8d,%r9d
imul %esi,%r9d
sub %ecx,%r9d
test %ecx,%ecx
jle 2f <func1+0x2f>
mov %edi,%eax
imul %r8d,%eax
jmp 36 <func1+0x36>
mov %esi,%eax
imul %esi,%eax
sub %edx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a3 < a2)
    {
        v6 = a3 - ((a2 * a5) - a5);
    }
    else
    {
        v6 = a2 * (a1 - a5) - a4;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        if (v6 < a1)
        {
            v7 += a5 * a2 * a5;
        }
        else
        {
            v7 += (a2 + a5) + a1;
        }
    }
    if (v9 < a4)
    {
        v9 = a1 * a5;
    }
    else
    {
        v9 = a2 * a2 - a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 24
13 24
14 26
15 26
16 26
17 30
18 30
19 30
20 32
21 32
22 32
23 32
24 32
25 32
26 33
<<<sep_out_sample>>>
lea (%r8,%rcx,1),%r10d
add %edi,%r10d
lea (%r8,%rdi,1),%eax
cmp %esi,%ecx
jge 16 <func1+0x16>
mov %r8d,%eax
sub %esi,%eax
add %edi,%eax
cmp %ecx,%eax
jge 27 <func1+0x27>
lea 0x1(%rdx),%r9d
imul %r8d,%r9d
sub %edi,%r9d
jmp 32 <func1+0x32>
mov %esi,%r9d
imul %edx,%r9d
lea (%r9,%rdi,2),%r9d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r10d,%ecx
add %ecx,%eax
add %r9d,%eax
imul %edi,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a5 + a4 + a1;
    if (a4 < a2)
    {
        v7 = (a5 - a2) + a1;
    }
    else
    {
        v7 = a5 + a1;
    }
    if (v7 < a4)
    {
        v8 = a5 + a3 * a5 - a1;
    }
    else
    {
        v8 = (a2 * a3) + a1 + a1;
    }
    v9 = a2 - a2 + a1 * a1;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 11
4 5
5 5
6 7
7 7
8 7
9 13
10 13
11 15
12 15
13 15
14 15
15 19
16 19
17 19
18 22
19 22
20 22
21 22
22 22
23 22
24 22
25 21
26 22
27 23
<<<sep_out_sample>>>
lea (%rdx,%r8,1),%eax
test %r8d,%r8d
jle 11 <func1+0x11>
mov %r8d,%eax
sub %esi,%eax
lea (%rax,%rcx,2),%eax
add %edi,%edx
add %esi,%edx
add %r8d,%edx
add %ecx,%edx
add %edx,%eax
add %esi,%r8d
imul %r8d,%ecx
add %ecx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (v6 < a5)
    {
        v6 = a5 - a2 + a4 + a4;
    }
    else
    {
        v6 = a3 + a5;
    }
    if (a1 < a1)
    {
        v7 = a1 - a5 + a2;
    }
    else
    {
        v7 = a2 + ((a5 + a2) * a4);
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 6
7 20
8 20
9 20
10 20
11 20
12 18
13 18
14 18
15 20
16 21
<<<sep_out_sample>>>
test %r8d,%r8d
jle e <func1+0xe>
mov %edi,%eax
imul %esi,%eax
neg %eax
jmp 18 <func1+0x18>
mov %r8d,%eax
imul %edx,%eax
add %ecx,%eax
add %edx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (v6 < a5)
    {
        v6 = a3 - a3 - a1 * a2;
    }
    else
    {
        v6 = a3 + (a4 + (a5 * a3));
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += a5 - a1 - a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 10
11 17
12 17
13 17
14 17
15 17
16 18
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (a1 < a5)
        {
            v6 += a1 * (a1 - a5);
        }
        else
        {
            v6 += a2 + a1;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += a4 - a5 - a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 21
5 22
<<<sep_out_sample>>>
lea (%rcx,%rsi,1),%r10d
cmp %r8d,%edi
jge 12 <func1+0x12>
mov %r8d,%r10d
sub %edx,%r10d
add %ecx,%r10d
mov $0x0,%r9d
cmp %esi,%edi
jle 27 <func1+0x27>
mov %esi,%r9d
imul %esi,%r9d
imul %edi,%r9d
mov %edi,%r11d
sub %r8d,%r11d
cmp %esi,%r9d
jl 39 <func1+0x39>
mov %esi,%r11d
imul %edi,%r11d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r10d
add %r10d,%r9d
lea (%r9,%r11,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a1 < a5)
    {
        v6 = a4 + (a5 - a3);
    }
    else
    {
        v6 = a4 + a2;
    }
    if (a2 < a1)
    {
        v7 = a2 * a2 * a1;
    }
    else
    {
        v7 = a3 - a3;
    }
    if (v7 < a2)
    {
        v8 = a1 - a5;
    }
    else
    {
        v8 = a2 * a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 6
7 18
8 12
9 12
10 14
11 14
12 14
13 22
14 22
15 20
16 20
17 26
18 26
19 28
20 28
21 28
22 28
23 28
24 28
25 28
26 29
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %eax,%ecx
mov %r8d,%eax
sub %edx,%eax
add %eax,%esi
add %esi,%ecx
lea 0x1(%r8,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = a5 - a3 + a2;
    v7 = a5 + a3 - a3;
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        if (a3 < a1)
        {
            v8 += a5 + a4;
        }
        else
        {
            v8 += a1 - a3;
        }
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a5)
    {
        v10 += a5 - a5;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 23
2 23
3 23
4 23
5 4
6 4
7 4
8 23
9 23
10 24
<<<sep_out_sample>>>
cmp %edi,%edx
jge 10 <func1+0x10>
lea -0x1(%r8),%eax
imul %edi,%eax
add %r8d,%eax
jmp 16 <func1+0x16>
mov %r8d,%eax
imul %edi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %ecx,%r8d
add %eax,%r8d
add %ecx,%edx
lea 0x1(%r8,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a3 < a1)
    {
        v6 = a1 * a5 - a1 + a5;
    }
    else
    {
        v6 = a5 * a1;
    }
    v7 = a3 + a4;
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += a1 * a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 18
10 18
11 18
12 18
13 18
14 12
15 18
16 19
<<<sep_out_sample>>>
cmp %r8d,%esi
jge 15 <func1+0x15>
mov $0x1,%eax
sub %r8d,%eax
imul %esi,%eax
imul %edx,%eax
jmp 1a <func1+0x1a>
lea (%rdx,%rsi,2),%eax
add %ecx,%eax
lea (%rdx,%rdi,2),%edi
add %edi,%edx
add %esi,%edx
add %edx,%r8d
add %ecx,%r8d
lea 0x1(%rax,%r8,1),%eax
imul %ecx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a2 < a5)
    {
        v6 = (a2 - (a2 * a5)) * a3;
    }
    else
    {
        v6 = a4 + (a3 + a2 + a2);
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += a3 * a2;
    }
    v9 = a2 * a4;
    v10 = a3 + a1;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 19
11 19
12 19
13 19
14 19
15 19
16 17
17 19
18 20
<<<sep_out_sample>>>
push %rbx
mov %edx,%eax
imul %ecx,%eax
mov %esi,%r11d
sub %eax,%r11d
sub %edx,%r11d
lea (%rdi,%r8,1),%r10d
imul %edi,%r10d
add %ecx,%r10d
mov %ecx,%r9d
neg %r9d
imul %edx,%r9d
test %ecx,%ecx
jle 34 <func1+0x34>
mov %edi,%ebx
sub %r8d,%ebx
add %edx,%ebx
imul %esi,%ebx
jmp 39 <func1+0x39>
mov %ecx,%ebx
imul %edi,%ebx
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea (%rcx,%r11,1),%eax
add %r10d,%eax
add %r9d,%eax
add %ebx,%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a2 - a3 * a4 - a3;
    v7 = a4 + ((a1 + a5) * a1);
    v8 = (a3 - a4 - a3) * a3;
    if (v9 < a4)
    {
        v9 = a2 * ((a1 - a5) + a3);
    }
    else
    {
        v9 = (a4 * a1) - (a4 - a4);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 4
3 4
4 4
5 4
6 4
7 5
8 5
9 5
10 6
11 6
12 6
13 7
14 7
15 9
16 9
17 9
18 9
19 9
20 13
21 13
22 15
23 15
24 15
25 15
26 15
27 15
28 15
29 15
30 16
31 16
<<<sep_out_sample>>>
lea (%rdx,%r8,1),%eax
mov %esi,%r9d
imul %r8d,%r9d
cmp %edi,%esi
cmovl %r9d,%eax
lea (%rdi,%rdx,1),%r9d
add %esi,%r9d
add %r8d,%r9d
add %ecx,%r9d
add %r9d,%eax
lea (%r8,%rcx,1),%r9d
add %r9d,%eax
add %edi,%esi
add %esi,%eax
imul %edx,%r8d
imul %r8d,%edx
add %edx,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a2 < a1)
    {
        v6 = a2 * a5;
    }
    else
    {
        v6 = a3 + a5;
    }
    v7 = a5 + a4;
    v8 = ((a1 - a3) + a2) + a3;
    v9 = a3 * (a3 * a5) + a4;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 6
3 6
4 6
5 6
6 15
7 15
8 15
9 15
10 15
11 12
12 15
13 13
14 15
15 14
16 14
17 14
18 15
19 16
<<<sep_out_sample>>>
mov %r8d,%eax
imul %r8d,%eax
mov %esi,%r9d
sub %eax,%r9d
add %ecx,%r9d
mov %ecx,%eax
sub %edx,%eax
cmp %eax,%edx
jle 24 <func1+0x24>
mov %ecx,%r10d
imul %ecx,%r10d
sub %edx,%r10d
jmp 2b <func1+0x2b>
mov %r8d,%r10d
imul %esi,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a1 < a1)
    {
        v6 = a1 + a2;
    }
    else
    {
        v6 = (a2 - a5 * a5) + a4;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += a1 + (a5 + a2);
    }
    if (a4 < a4)
    {
        v9 = a4 + a5 + a5 + a5;
    }
    else
    {
        v9 = a2 + a4 - a2 - a3;
    }
    if (v9 < a3)
    {
        v10 = a4 * a4 - a3;
    }
    else
    {
        v10 = a2 - (a2 - a2 * a5);
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 10
6 23
7 23
8 25
9 25
10 27
11 27
12 27
13 27
14 31
15 31
16 33
17 33
18 33
19 33
20 33
21 33
22 33
23 34
<<<sep_out_sample>>>
lea (%rsi,%rdx,2),%eax
add %r8d,%eax
add %ecx,%eax
mov %esi,%edx
imul %ecx,%edx
add %edx,%eax
sub %esi,%edi
imul %edi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a2 * a4;
    if (a1 < a1)
    {
        v7 = a2 - a3 + a2 * a5;
    }
    else
    {
        v7 = ((a1 - a2) * a5) + a4;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += (a5 - a1) - a4;
    }
    v10 = a3 - a1;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 19
2 19
3 19
4 4
5 4
6 19
7 11
8 11
9 11
10 19
11 20
<<<sep_out_sample>>>
lea (%rdi,%rcx,1),%eax
test %esi,%esi
jle 10 <func1+0x10>
mov %esi,%eax
sub %edx,%eax
imul %esi,%eax
add %edi,%eax
lea 0x1(%rax,%rdi,1),%eax
add %eax,%edx
add %edx,%esi
add %r8d,%esi
lea 0x2(%rcx,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a3 - a1 * a4;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += a1 * a4 * a5;
    }
    if (v6 < a2)
    {
        v10 = a1 - (a3 - a2) * a2;
    }
    else
    {
        v10 = a1 + a4;
    }
    v11 = 0;
    for (v12 = 0; v12++; v12<a5)
    {
        if (v12 < a2)
        {
            v11 += (a4 + a5) * a2;
        }
        else
        {
            v11 += (a5 * a1) - a4;
        }
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 20
2 14
3 14
4 16
5 16
6 16
7 16
8 34
9 34
10 34
11 34
12 34
13 35
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %edx,%r8d
lea (%r8,%rcx,1),%edx
mov %esi,%eax
sub %ecx,%eax
imul %ecx,%esi
sub %esi,%eax
lea 0x1(%rdx,%rax,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a2 < a2)
    {
        v6 = a1 + a5;
    }
    else
    {
        v6 = a2 - a4 - a4 * a2;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += a5 - a4 + a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 10
6 10
7 10
8 10
9 17
10 18
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %edx,%r8d
lea 0x1(%rcx,%r8,1),%eax
imul %ecx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a3 + a3 - a1;
    }
    v8 = (a5 + (a4 - a5)) * a2;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 9
6 10
7 11
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (v7 < a2)
        {
            v6 += a5 - a1 + a4;
        }
        else
        {
            v6 += a4 * a2;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += a2 + (a5 - a3);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 21
5 22
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%r9d
add %esi,%r9d
add %r8d,%r9d
add %ecx,%r9d
mov %r8d,%eax
imul %edx,%eax
imul %edi,%eax
imul %edi,%eax
add %r9d,%eax
mov %ecx,%r10d
sub %edx,%r10d
mov %r10d,%edx
imul %ecx,%edx
add %r8d,%edx
add %edx,%eax
imul %esi,%r8d
add %r8d,%eax
add $0x1,%edi
imul %ecx,%edi
imul %edi,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a1 * ((a5 * a3) * a1);
    v7 = a5 - ((a3 - a4) * a4);
    v8 = a5 * a2;
    v9 = (a4 + (a1 * a4)) * a4;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 8
2 8
3 8
4 8
5 4
6 4
7 4
8 4
9 8
10 5
11 5
12 5
13 5
14 5
15 8
16 6
17 8
18 7
19 7
20 7
21 8
22 9
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
lea (%r8,%rcx,1),%eax
mov %edx,%r9d
sub %edi,%r9d
imul %ecx,%ecx
add %r9d,%ecx
add %ecx,%eax
add %esi,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a1 < a1)
    {
        v6 = (a4 * a1) * a4 * a5;
    }
    else
    {
        v6 = a3 - a1 + a4 * a4;
    }
    v7 = a2 + a3;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 13
2 13
3 13
4 13
5 10
6 10
7 10
8 10
9 13
10 12
11 13
12 14
<<<sep_out_sample>>>
lea (%rcx,%rdx,2),%r9d
add %r8d,%r9d
lea (%rdi,%rsi,1),%eax
cmp %edi,%r9d
jge 19 <func1+0x19>
mov %esi,%eax
imul %esi,%eax
imul %edx,%eax
add %esi,%eax
add %edx,%edi
add %edi,%esi
add %r8d,%esi
add %esi,%ecx
add %ecx,%r9d
add %r9d,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a4 < a4)
    {
        v6 = a5 - a1 + a2;
    }
    else
    {
        v6 = (a3 + a4) + a3 + a5;
    }
    v7 = a5 + a3 - a3;
    if (v6 < a1)
    {
        v8 = a2 * a2 * a3 + a2;
    }
    else
    {
        v8 = a1 + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 19
4 13
5 13
6 15
7 15
8 15
9 15
10 21
11 21
12 21
13 21
14 21
15 21
16 21
17 22
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
lea (%rsi,%rcx,2),%edx
lea 0x1(%r8,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a2 + a4;
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += (a5 + a2) * a3;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        if (v10 < a1)
        {
            v9 += a3 + a5;
        }
        else
        {
            v9 += a1 - a2 * a3;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 22
4 4
5 22
6 23
<<<sep_out_sample>>>
test %r8d,%r8d
jg 22 <func1+0x22>
lea 0x1(%rsi),%r9d
imul %r8d,%r9d
cmp %r9d,%ecx
jle 25 <func1+0x25>
mov %r9d,%r10d
sub %r8d,%r10d
add $0x1,%r10d
imul %r8d,%r10d
jmp 32 <func1+0x32>
mov %ecx,%r9d
mov %edx,%r10d
sub %edi,%r10d
imul %r8d,%r10d
add %edx,%r10d
test %ecx,%ecx
jle 42 <func1+0x42>
mov $0x1,%eax
sub %esi,%eax
imul %edx,%eax
jmp 4b <func1+0x4b>
lea (%rdi,%rcx,1),%eax
imul %edi,%eax
add %r8d,%eax
add %edi,%edx
add %esi,%edx
add %edx,%r8d
add %r8d,%ecx
add %ecx,%esi
add %esi,%r9d
add %r10d,%r9d
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a1 + a2 - a1;
    if (v7 < a5)
    {
        v7 = a4 + (a4 - a4);
    }
    else
    {
        v7 = a5 + (a2 * a5);
    }
    if (v7 < a4)
    {
        v8 = a5 + a5 * a2 * a5;
    }
    else
    {
        v8 = a3 - ((a1 - a3) * a5);
    }
    if (v9 < a4)
    {
        v9 = a3 - a3 * a2;
    }
    else
    {
        v9 = (a1 + a4) * a1 + a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 5
2 5
3 11
4 11
5 13
6 13
7 15
8 15
9 15
10 15
11 15
12 7
13 19
14 19
15 19
16 19
17 21
18 21
19 23
20 23
21 23
22 23
23 27
24 27
25 27
26 29
27 29
28 29
29 29
30 29
31 29
32 29
33 29
34 30
<<<sep_out_sample>>>
cmp %r8d,%edi
jge 14 <func1+0x14>
lea (%rdi,%rdi,1),%eax
mov %ecx,%r9d
imul %edi,%r9d
sub %r9d,%eax
jmp 1d <func1+0x1d>
mov %ecx,%eax
sub %edi,%eax
add %r8d,%eax
add %edx,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (v7 < a3)
        {
            v6 += (a3 * a4) + a2;
        }
        else
        {
            v6 += a1 + (a3 + a3);
        }
    }
    if (a1 < a5)
    {
        v8 = a1 + a1 - a4 * a1;
    }
    else
    {
        v8 = a3 + (a4 - a1 + a5);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 18
7 18
8 22
9 22
10 22
11 22
12 24
13 24
14 24
15 24
16 24
17 25
<<<sep_out_sample>>>
mov %esi,%eax
imul %ecx,%eax
imul %edx,%eax
lea 0x1(%rdi,%rax,1),%eax
add %eax,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (v7 < a1)
        {
            v6 += a4 + a2;
        }
        else
        {
            v6 += (a5 * a1) - a5;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += a4 - a3 + a3;
    }
    v10 = a2 * a4 * a3;
    v11 = 0;
    for (v12 = 0; v12++; v12<a4)
    {
        if (a5 < a1)
        {
            v11 += a2 - a1;
        }
        else
        {
            v11 += a1 + a1;
        }
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 34
5 34
6 34
7 34
8 34
9 35
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %eax,%ecx
sub %esi,%r8d
add %r8d,%edx
lea 0x1(%rcx,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a3 - (a2 - a5);
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += (a3 * a1) + a5;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        v9 += a2 - a2;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 15
2 15
3 15
4 15
5 4
6 4
7 15
8 16
<<<sep_out_sample>>>
cmp %ecx,%edx
jge c <func1+0xc>
mov %ecx,%r9d
sub %edx,%r9d
jmp 16 <func1+0x16>
mov %r8d,%r9d
imul %edx,%r9d
sub %ecx,%r9d
cmp %esi,%ecx
jge 21 <func1+0x21>
mov %edx,%eax
imul %edx,%eax
jmp 31 <func1+0x31>
mov %esi,%eax
imul %edx,%eax
mov %edi,%r11d
sub %eax,%r11d
mov %r11d,%eax
add %ecx,%eax
mov %edx,%r10d
sub %ecx,%r10d
imul %ecx,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a3 < a4)
    {
        v6 = a5 + (a4 - a3) - a5;
    }
    else
    {
        v6 = (a5 * a3) - a4;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += (a2 * a5) - a2;
    }
    if (a4 < a2)
    {
        v9 = a3 * a3;
    }
    else
    {
        v9 = a1 - a2 * a3 + a4;
    }
    if (a4 < a4)
    {
        v10 = a3 * a5 - a2 + a4;
    }
    else
    {
        v10 = (a3 - a4) * a4;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 17
10 17
11 19
12 19
13 19
14 23
15 23
16 23
17 23
18 23
19 23
20 31
21 31
22 31
23 33
24 33
25 33
26 33
27 33
28 33
29 33
30 34
<<<sep_out_sample>>>
mov %r8d,%eax
sub %esi,%eax
lea (%rsi,%r8,2),%r9d
cmp %edx,%eax
jl 17 <func1+0x17>
lea (%r8,%rdx,1),%r9d
add %edi,%r9d
sub %ecx,%r9d
lea 0x1(%rdi,%rdx,1),%edi
add %esi,%edi
add %edi,%r8d
add %ecx,%r8d
add %r8d,%eax
add %r9d,%eax
imul %edx,%ecx
sub %esi,%ecx
add %ecx,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = (a5 - a2) - a3 + a3;
    if (v6 < a3)
    {
        v7 = a5 + a5 + a2;
    }
    else
    {
        v7 = (a5 + a3) + a1 - a4;
    }
    v8 = a3 * a4 - a2 + a3;
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        v9 += a5 * (a3 + a3);
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 7
4 5
5 5
6 11
7 11
8 11
9 19
10 19
11 19
12 19
13 19
14 19
15 13
16 13
17 13
18 19
19 20
<<<sep_out_sample>>>
cmp %r8d,%edx
jge e <func1+0xe>
lea (%rdi,%rsi,2),%r10d
add %edx,%r10d
jmp 1b <func1+0x1b>
lea (%rdx,%rsi,1),%eax
imul %r8d,%eax
mov %edx,%r10d
sub %eax,%r10d
lea (%rdx,%rdi,1),%r9d
lea (%rsi,%r9,1),%eax
add %r8d,%eax
add %eax,%ecx
add %r10d,%ecx
mov %edx,%r10d
imul %edi,%r10d
sub %r8d,%r10d
add %esi,%r10d
lea (%rcx,%r10,1),%eax
sub %esi,%r9d
add %r9d,%r8d
add %r8d,%eax
add %esi,%edx
imul %edx,%edi
add %edi,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a3 < a5)
    {
        v6 = a1 + (a2 + a2) + a3;
    }
    else
    {
        v6 = a3 - (a3 + a2) * a5;
    }
    v7 = a3 * a1 - a5 + a2;
    v8 = a3 + a1 - a2 + a5;
    v9 = a1 * (a3 + a2) + a2;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 10
10 13
11 15
12 15
13 15
14 15
15 12
16 12
17 12
18 12
19 15
20 13
21 13
22 15
23 14
24 14
25 14
26 15
27 16
<<<sep_out_sample>>>
mov %ecx,%r9d
sub %esi,%r9d
cmp %r8d,%ecx
jl 1f <func1+0x1f>
mov %edx,%r10d
imul %esi,%r10d
mov $0x1,%r9d
sub %r10d,%r9d
imul %esi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
imul %edi,%edx
add %edx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a4 < a5)
    {
        v6 = a4 - a2;
    }
    else
    {
        v6 = a2 - a2 * (a3 * a2);
    }
    v7 = a5 + a1 * a3;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 4
4 4
5 10
6 10
7 10
8 10
9 10
10 13
11 13
12 13
13 13
14 13
15 12
16 12
17 13
18 14
<<<sep_out_sample>>>
lea (%rdx,%r8,2),%eax
lea (%rax,%rcx,1),%r9d
mov %edx,%eax
sub %r8d,%eax
cmp %ecx,%r8d
jge 1c <func1+0x1c>
mov %edi,%eax
imul %edx,%eax
imul %ecx,%eax
add %edx,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %r9d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a5 + a3;
    }
    v8 = (a4 + a5) + a3 + a5;
    if (a5 < a4)
    {
        v9 = a1 * a3 * a4 + a3;
    }
    else
    {
        v9 = a5 + (a3 - a5) - a5;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a1)
    {
        v10 += a1 * a3;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 16
4 16
5 10
6 10
7 12
8 12
9 12
10 12
11 23
12 23
13 23
14 23
15 23
16 23
17 24
<<<sep_out_sample>>>
lea (%rdi,%rdi,1),%r9d
cmp %edi,%edx
mov $0x0,%eax
cmovle %r9d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (a2 < a4)
        {
            v6 += a4 - a2 - a4;
        }
        else
        {
            v6 += a3 * a3 + a5;
        }
    }
    if (a1 < a3)
    {
        v8 = a5 - a5;
    }
    else
    {
        v8 = a1 + a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 22
2 22
3 22
4 22
5 24
6 24
7 24
8 24
9 24
10 25
<<<sep_out_sample>>>
lea 0x1(%rsi),%r11d
imul %edi,%r11d
sub %ecx,%r11d
lea (%rdi,%rdx,1),%r10d
imul %esi,%r10d
add %ecx,%r10d
test %esi,%esi
jle 23 <func1+0x23>
mov %r8d,%r9d
imul %edi,%r9d
jmp 2a <func1+0x2a>
lea (%rcx,%rdx,2),%r9d
sub %r8d,%r9d
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a2 * a1 + a1 - a4;
    v7 = a4 + (a2 * (a1 + a3));
    if (v8 < a2)
    {
        v8 = a5 * a1;
    }
    else
    {
        v8 = a4 - (a5 - (a3 + a3));
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        if (a5 < a4)
        {
            v9 += (a4 * a5) - a5;
        }
        else
        {
            v9 += a1 * a1;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 5
5 5
6 5
7 6
8 6
9 8
10 8
11 8
12 12
13 12
14 26
15 26
16 26
17 26
18 26
19 26
20 26
21 27
<<<sep_out_sample>>>
cmp %edx,%r8d
jge 11 <func1+0x11>
mov %ecx,%r10d
sub %edi,%r10d
imul %r8d,%r10d
jmp 1f <func1+0x1f>
lea (%rcx,%rcx,1),%r10d
mov %ecx,%r9d
imul %esi,%r9d
sub %r9d,%r10d
cmp %esi,%ecx
jge 32 <func1+0x32>
mov %r8d,%r9d
imul %edx,%r9d
add %ecx,%r9d
add %edi,%r9d
jmp 40 <func1+0x40>
mov %edx,%r9d
imul %edx,%r9d
add %edi,%r9d
imul %ecx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a5 < a3)
    {
        v6 = (a4 - a1) * a5;
    }
    else
    {
        v6 = a4 + a4 - (a4 * a2);
    }
    if (a4 < a2)
    {
        v7 = a1 + (a5 * a3 + a4);
    }
    else
    {
        v7 = a4 * ((a3 * a3) + a1);
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 10
11 12
12 12
13 14
14 14
15 14
16 14
17 14
18 18
19 18
20 18
21 18
22 20
23 20
24 20
25 20
26 20
27 20
28 21
<<<sep_out_sample>>>
lea (%rdi,%rdi,1),%eax
cmp %esi,%r8d
jge 13 <func1+0x13>
mov %r8d,%eax
imul %r8d,%eax
add %esi,%eax
sub %ecx,%eax
add %edi,%edx
add %esi,%edx
add %edx,%r8d
add %ecx,%r8d
add %r8d,%eax
imul %esi,%esi
sub %esi,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a5 < a2)
    {
        v6 = a2 + a5 * a5 - a4;
    }
    else
    {
        v6 = a1 + a1;
    }
    v7 = a4 - (a2 * a2);
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += a1 + a1 + a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 6
7 6
8 18
9 18
10 18
11 18
12 18
13 12
14 12
15 18
16 19
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
lea 0x1(%rcx,%r8,1),%eax
sub %edx,%edi
add %edi,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (a3 < a3)
        {
            v6 += (a1 * a1) - a2;
        }
        else
        {
            v6 += a2 * a5 - a5;
        }
    }
    v8 = (a1 - a3) + a2;
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        if (a2 < a1)
        {
            v9 += a5 * a5 * a2;
        }
        else
        {
            v9 += (a1 - a4) + a3;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 29
2 29
3 29
4 29
5 16
6 16
7 29
8 30
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %r8d,%edx
lea 0x1(%rcx,%rdx,1),%eax
mov %esi,%edx
imul %edi,%edx
imul %edx,%edi
add %eax,%edi
imul %ecx,%esi
sub %r8d,%esi
lea (%rdi,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (a5 < a4)
        {
            v6 += a2 + a4 - a4;
        }
        else
        {
            v6 += a3 * a5;
        }
    }
    v8 = (a2 * a1) * a1;
    if (a4 < a4)
    {
        v9 = (a2 - a3) + a5;
    }
    else
    {
        v9 = a2 * a4 - a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 25
2 25
3 25
4 25
5 16
6 16
7 16
8 25
9 23
10 23
11 25
12 26
<<<sep_out_sample>>>
cmp %esi,%edx
jge 11 <func1+0x11>
mov %ecx,%eax
imul %edi,%eax
add %edx,%eax
imul %r8d,%eax
jmp 1b <func1+0x1b>
mov %edx,%eax
sub %r8d,%eax
sub %ecx,%eax
imul %edx,%eax
mov $0x1,%r9d
sub %esi,%r9d
imul %esi,%r9d
add %edi,%r9d
add %r9d,%edx
add %esi,%edx
add %r8d,%edx
lea 0x1(%rcx,%rdx,1),%edx
add %edx,%eax
add %edi,%ecx
imul %ecx,%r8d
add %r8d,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a4 + a5;
    }
    if (a3 < a2)
    {
        v8 = (a3 + a4 * a1) * a5;
    }
    else
    {
        v8 = a3 * (a3 - a5 - a4);
    }
    v9 = a2 + (a4 + a1) * a5;
    v10 = a2 - (a2 * a2);
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 11
8 15
9 15
10 15
11 15
12 18
13 18
14 18
15 19
16 19
17 19
18 19
19 19
20 19
21 17
22 17
23 17
24 19
25 20
<<<sep_out_sample>>>
lea (%rdx,%rsi,1),%eax
mov %edi,%r9d
imul %ecx,%r9d
cmp %r8d,%edx
cmovl %r9d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a2 * a2;
    }
    if (a3 < a5)
    {
        v8 = a1 * a4;
    }
    else
    {
        v8 = a3 + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 15
2 11
3 11
4 11
5 11
6 17
7 17
8 17
9 17
10 17
11 18
<<<sep_out_sample>>>
mov %ecx,%r9d
sub %r8d,%r9d
cmp %esi,%ecx
jge 12 <func1+0x12>
lea -0x1(%r8),%r9d
imul %esi,%r9d
lea (%rsi,%rcx,1),%eax
cmp %edx,%esi
jle 29 <func1+0x29>
mov %ecx,%eax
imul %ecx,%eax
add %edi,%eax
mov %ecx,%r11d
sub %eax,%r11d
mov %r11d,%eax
cmp %r8d,%esi
jle 3e <func1+0x3e>
lea (%rdi,%rsi,1),%r10d
mov %edi,%r11d
imul %r8d,%r11d
sub %r11d,%r10d
jmp 4c <func1+0x4c>
lea (%rdi,%rsi,1),%r10d
mov %edi,%r11d
imul %edi,%r11d
sub %r11d,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
lea 0x1(%rax,%r9,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a4 < a2)
    {
        v6 = a5 * a2 - a2;
    }
    else
    {
        v6 = a4 - a5;
    }
    if (a3 < a2)
    {
        v7 = a4 - ((a4 * a4) + a1);
    }
    else
    {
        v7 = a2 + a4;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += (a1 * a4) - a5;
    }
    if (a5 < a2)
    {
        v10 = a1 + a2 - a1 * a5;
    }
    else
    {
        v10 = a1 + a2 - a1 * a1;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 4
4 4
5 6
6 6
7 18
8 12
9 12
10 14
11 14
12 14
13 14
14 14
15 14
16 25
17 25
18 27
19 27
20 27
21 27
22 27
23 31
24 31
25 31
26 31
27 33
28 33
29 33
30 33
31 33
32 33
33 33
34 34
<<<sep_out_sample>>>
mov %esi,%eax
sub %edi,%eax
cmp %ecx,%esi
jl 13 <func1+0x13>
lea (%r8,%rdx,1),%eax
imul %r8d,%eax
imul %ecx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%edi
lea 0x1(%rax,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a4 * (a4 - a4) + a1;
    if (a2 < a4)
    {
        v7 = a2 - a1;
    }
    else
    {
        v7 = (a5 * (a5 + a3)) * a4;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += a3 * a1 - a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 7
2 7
3 5
4 5
5 11
6 11
7 11
8 18
9 18
10 18
11 18
12 18
13 18
14 19
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %r8d,%edx
add %ecx,%edx
mov %esi,%eax
imul %ecx,%eax
imul %eax,%r8d
imul %r8d,%esi
add %edx,%esi
add %ecx,%ecx
sub %edi,%ecx
lea 0x1(%rsi,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a2 * ((a2 * a4) * a5);
    v7 = a4 + a4 - a1;
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        if (v8 < a5)
        {
            v8 += a1 - (a3 * a4);
        }
        else
        {
            v8 += (a1 * a3) - a4;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 18
5 4
6 4
7 4
8 4
9 18
10 5
11 5
12 18
13 19
<<<sep_out_sample>>>
test %r8d,%r8d
jle a <func1+0xa>
lea (%rdi,%rdi,1),%eax
jmp 19 <func1+0x19>
mov %edx,%eax
imul %esi,%eax
mov %edi,%r9d
imul %ecx,%r9d
sub %r9d,%eax
lea -0x1(%rdi),%r9d
imul %esi,%r9d
add %edi,%r9d
add %r9d,%esi
add %r8d,%esi
add %esi,%ecx
lea 0x1(%rax,%rcx,1),%eax
imul %r8d,%edi
imul %edi,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (v6 < a5)
    {
        v6 = a1 + a1;
    }
    else
    {
        v6 = a3 * a2 - (a1 * a4);
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += a1 - a3 - a3;
    }
    v9 = (a1 * a5) * a3;
    v10 = a2 * a1 - a2 - a3;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 10
6 10
7 10
8 10
9 10
10 18
11 18
12 19
13 19
14 19
15 19
16 19
17 17
18 17
19 19
20 20
<<<sep_out_sample>>>
add %edx,%edi
add %esi,%edi
add %r8d,%edi
add %ecx,%edi
add %ecx,%edx
imul %r8d,%esi
add %esi,%edx
lea 0x1(%rdi,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a4 + a3 + a2 * a5;
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += a4 * a4 + a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 4
6 4
7 4
8 10
9 11
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
lea 0x1(%rcx,%r8,1),%eax
imul %ecx,%esi
add %esi,%edx
add %edx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (v6 < a4)
        {
            v6 += a5 * (a1 + a3);
        }
        else
        {
            v6 += (a3 + a5) - a2;
        }
    }
    v8 = a3 + a2 * a4 + a1;
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        if (a5 < a1)
        {
            v9 += a2 - a2;
        }
        else
        {
            v9 += (a5 - a2) + a4;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 29
2 29
3 29
4 29
5 16
6 16
7 16
8 29
9 30
<<<sep_out_sample>>>
mov %ecx,%eax
sub %esi,%eax
sub %edx,%eax
lea 0x1(%rdi,%rax,1),%eax
add %eax,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%eax
imul %r8d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (a4 < a4)
        {
            v6 += (a4 + a2) + a4;
        }
        else
        {
            v6 += a3 + (a4 + a5);
        }
    }
    v8 = a5 * a3;
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        v9 += a5 - a3 + a4;
    }
    v11 = ((a4 - a2) - a3) - a3;
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 22
4 23
5 23
6 23
7 23
8 16
9 23
10 24
<<<sep_out_sample>>>
mov %edx,%r9d
imul %edx,%r9d
imul %ecx,%r9d
sub %edi,%r9d
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %eax,%ecx
imul %r8d,%esi
sub %esi,%ecx
lea (%r9,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = (a3 - a3) - a5 * a2;
    v7 = a1 - a1;
    v8 = (a3 * a3) * a4 - a1;
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        v9 += a2 + a1 - a4;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 12
6 12
7 12
8 12
9 4
10 12
11 12
12 13
<<<sep_out_sample>>>
test %r8d,%r8d
jle d <func1+0xd>
mov %ecx,%r11d
sub %edx,%r11d
jmp 14 <func1+0x14>
mov %edx,%r11d
imul %ecx,%r11d
lea (%rdi,%r8,1),%r10d
cmp %edx,%r8d
jg 28 <func1+0x28>
lea 0x1(%rsi),%r10d
imul %ecx,%r10d
add %edi,%r10d
cmp %edx,%ecx
jle 3c <func1+0x3c>
mov %edi,%eax
imul %esi,%eax
imul %esi,%eax
mov %edx,%r9d
sub %eax,%r9d
jmp 4a <func1+0x4a>
mov %esi,%r9d
imul %edi,%r9d
lea (%rcx,%rcx,1),%eax
imul %eax,%r9d
lea (%rdx,%rcx,1),%eax
add %edi,%eax
cmp %edx,%r9d
jge 5d <func1+0x5d>
mov %esi,%eax
sub %edi,%eax
sub %edi,%eax
sub %r8d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r11d,%ecx
add %r10d,%ecx
add %ecx,%r9d
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (v6 < a5)
    {
        v6 = a4 - a3;
    }
    else
    {
        v6 = a1 + ((a3 * a4) - a1);
    }
    if (a3 < a5)
    {
        v7 = a1 + a5;
    }
    else
    {
        v7 = (a4 * a2) + a4 + a1;
    }
    if (a3 < a4)
    {
        v8 = a3 - ((a1 * a2) * a2);
    }
    else
    {
        v8 = a2 * a1 * (a4 + a4);
    }
    if (v8 < a3)
    {
        v9 = a2 - a1 - a1 - a5;
    }
    else
    {
        v9 = a3 + a4 + a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 14
9 12
10 12
11 18
12 18
13 18
14 20
15 20
16 22
17 22
18 22
19 22
20 22
21 22
22 26
23 26
24 26
25 26
26 34
27 34
28 28
29 28
30 30
31 30
32 30
33 30
34 36
35 36
36 36
37 36
38 36
39 36
40 36
41 36
42 37
<<<sep_out_sample>>>
mov %edi,%eax
imul %edx,%eax
add %ecx,%eax
lea (%rdi,%rdx,2),%edx
lea (%rdx,%rax,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (a2 < a1)
        {
            v6 += a2 + a4;
        }
        else
        {
            v6 += (a1 * a5) * a1;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        if (a3 < a3)
        {
            v8 += a4 * a5;
        }
        else
        {
            v8 += (a4 - a3) - a2;
        }
    }
    v10 = a4 + (a1 * a3) + a3;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 28
2 28
3 28
4 29
5 29
6 29
7 29
8 29
9 30
<<<sep_out_sample>>>
mov %ecx,%eax
sub %r8d,%eax
cmp %edi,%ecx
jge 13 <func1+0x13>
mov %r8d,%eax
imul %edi,%eax
add %ecx,%eax
sub %edi,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%eax
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a4 < a1)
    {
        v6 = a4 + (a5 * a1) - a1;
    }
    else
    {
        v6 = a4 - a5 + a4 - a4;
    }
    v7 = a5 + a1 - a5;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 10
2 10
3 4
4 4
5 6
6 6
7 6
8 6
9 13
10 13
11 13
12 13
13 13
14 13
15 14
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
imul %edx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = a3 - a3;
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += (a2 + a5) + a4;
    }
    v9 = a3 * ((a1 - a3) + a3);
    v10 = 0;
    for (v11 = 0; v11++; v11<a5)
    {
        v10 += a4 * a4 - a2;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 16
4 16
5 10
6 16
7 17
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
sub %ecx,%edx
add %r8d,%edx
imul %ecx,%edx
add %edx,%eax
sub $0x1,%r8d
imul %r8d,%ecx
add %ecx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = (a3 - a4 + a5) * a4;
    v7 = (a4 * a5) - a4 + a2;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 4
7 4
8 6
9 5
10 5
11 5
12 6
13 7
<<<sep_out_sample>>>
mov %edx,%eax
sub %esi,%eax
lea (%rdi,%r8,1),%r9d
cmp %esi,%ecx
cmovl %eax,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
mov %ecx,%esi
imul %ecx,%esi
imul %esi,%edx
add %ecx,%edx
add %eax,%edx
mov %r8d,%eax
imul %ecx,%eax
imul %eax,%r8d
sub %ecx,%r8d
lea (%rdx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a4 < a2)
    {
        v6 = (a2 - a2) - a2 + a3;
    }
    else
    {
        v6 = a1 - a1 + a1 + a5;
    }
    v7 = a3 * (a4 * a4) + a4;
    v8 = (a5 * a4 * a5) - a4;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 6
6 14
7 14
8 14
9 14
10 14
11 12
12 12
13 12
14 12
15 14
16 13
17 13
18 13
19 13
20 14
21 15
<<<sep_out_sample>>>
add %edx,%edi
add %esi,%edi
add %edi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %edx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (a1 < a3)
        {
            v6 += (a1 - a3) * a3;
        }
        else
        {
            v6 += a2 + a1 + a2;
        }
    }
    v8 = a3 + a2;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 16
6 17
7 18
<<<sep_out_sample>>>
cmp %edi,%edx
jge 13 <func1+0x13>
mov %esi,%r9d
imul %esi,%r9d
add %r8d,%r9d
add %edi,%r9d
jmp 1a <func1+0x1a>
mov %edi,%r9d
imul %edx,%r9d
add %edi,%edx
add %esi,%edx
add %r8d,%edx
add %ecx,%edx
add %r9d,%edx
imul %esi,%ecx
sub %r8d,%ecx
sub %esi,%ecx
lea (%rdx,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a3 < a1)
    {
        v6 = a2 * a2 + a5 + a1;
    }
    else
    {
        v6 = a1 * a3;
    }
    if (a3 < a3)
    {
        v7 = a4 - a5;
    }
    else
    {
        v7 = a2 * a4 - a5 - a2;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 20
11 20
12 20
13 20
14 20
15 18
16 18
17 18
18 20
19 21
<<<sep_out_sample>>>
mov %esi,%r11d
imul %edx,%r11d
cmp %r8d,%ecx
jge 27 <func1+0x27>
lea 0x1(%rcx),%r10d
imul %r8d,%r10d
imul %edx,%r10d
mov %esi,%r9d
imul %ecx,%r9d
lea (%rdx,%rsi,1),%eax
add %eax,%r9d
jmp 39 <func1+0x39>
mov %edi,%r10d
sub %edx,%r10d
mov %esi,%eax
imul %edi,%eax
add %eax,%r10d
lea (%rsi,%rsi,1),%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a2 * a3;
    if (a4 < a5)
    {
        v7 = (a5 + a4 * a5) * a3;
    }
    else
    {
        v7 = a1 - a3 + (a2 * a1);
    }
    if (a4 < a5)
    {
        v8 = (a2 * a4) + (a3 + a2);
    }
    else
    {
        v8 = a2 + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 5
4 5
5 7
6 7
7 7
8 15
9 15
10 15
11 15
12 15
13 11
14 11
15 11
16 11
17 11
18 19
19 21
20 21
21 21
22 21
23 21
24 21
25 21
26 22
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
lea (%rax,%rsi,1),%r9d
add %r8d,%r9d
add %r9d,%ecx
add $0x1,%eax
imul %eax,%edx
lea (%rcx,%rdx,1),%eax
mov %r8d,%r9d
sub %edi,%r9d
add %r9d,%eax
imul %edi,%r8d
imul %r8d,%esi
add %esi,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a3 + ((a1 + a3) * a3);
    v7 = (a4 - a1 + a5) - a4;
    v8 = a1 + (a2 * (a1 * a5));
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 7
3 7
4 7
5 4
6 4
7 7
8 5
9 5
10 7
11 6
12 6
13 6
14 7
15 8
<<<sep_out_sample>>>
cmp %edx,%esi
jge b <func1+0xb>
mov %ecx,%eax
imul %edx,%eax
jmp 16 <func1+0x16>
mov %ecx,%eax
sub %r8d,%eax
add %edx,%eax
imul %r8d,%eax
lea 0x1(%rdi),%r9d
imul %esi,%r9d
add %r9d,%edi
add %edi,%edx
add %esi,%edx
add %edx,%r8d
add %ecx,%r8d
add %eax,%r8d
add %ecx,%esi
lea 0x1(%r8,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a2 < a3)
    {
        v6 = a4 * a3;
    }
    else
    {
        v6 = a5 * ((a4 - a5) + a3);
    }
    v7 = a2 + a4;
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        if (v6 < a5)
        {
            v8 += a1 - a5;
        }
        else
        {
            v8 += a4 + a3 * a1;
        }
    }
    v10 = a2 + a2 * a1;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 10
10 25
11 25
12 26
13 26
14 26
15 26
16 26
17 26
18 12
19 26
20 27
<<<sep_out_sample>>>
cmp $0x1,%esi
jle d <func1+0xd>
mov %edx,%r10d
sub %r8d,%r10d
jmp 17 <func1+0x17>
mov %esi,%r10d
imul %ecx,%r10d
add %r8d,%r10d
mov %r8d,%eax
imul %ecx,%eax
mov %edx,%r9d
sub %eax,%r9d
sub %ecx,%r9d
add %r9d,%edi
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%ecx
lea (%rcx,%r10,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a4 * a2;
    }
    if (v7 < a2)
    {
        v8 = a3 - a5;
    }
    else
    {
        v8 = (a2 * a4) + a5;
    }
    v9 = a5 * a4;
    if (a4 < a4)
    {
        v10 = (a5 + a5) * a2;
    }
    else
    {
        v10 = a3 - a4 * a5 - a4;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 15
7 15
8 15
9 17
10 17
11 24
12 24
13 24
14 26
15 26
16 26
17 26
18 26
19 26
20 26
21 27
<<<sep_out_sample>>>
mov $0x0,%eax
test %ecx,%ecx
jle 19 <func1+0x19>
lea (%r8,%rcx,1),%eax
imul %edx,%eax
mov %r8d,%r9d
sub %eax,%r9d
mov %r9d,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %esi,%edx
add %edx,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
add %esi,%esi
sub %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    if (v6 < a4)
    {
        v6 = a5 - a3 * (a5 + a4);
    }
    else
    {
        v6 = a4 - a4;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += (a3 * a2) * a2;
    }
    v9 = a5 - a5 - a2 - a2;
    v10 = 0;
    for (v11 = 0; v11++; v11<a3)
    {
        v10 += (a2 - a2) * a5;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 6
7 6
8 6
9 23
10 23
11 23
12 23
13 23
14 17
15 23
16 24
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a3 < a3)
    {
        v6 = a3 * a1 * a2;
    }
    else
    {
        v6 = a2 - a2;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += a5 + (a4 * a3);
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        if (a5 < a3)
        {
            v9 += a1 + a5 - a2;
        }
        else
        {
            v9 += a5 * a3;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 29
2 29
3 29
4 29
5 30
<<<sep_out_sample>>>
mov $0x0,%r9d
test %esi,%esi
jg 16 <func1+0x16>
mov %esi,%r9d
sub %edx,%r9d
add %r8d,%r9d
sub %edx,%r9d
test %r8d,%r8d
jle 25 <func1+0x25>
lea (%rdi,%r8,1),%eax
sub %edx,%eax
add %esi,%eax
jmp 2a <func1+0x2a>
mov $0x0,%eax
mov %r8d,%r10d
sub %esi,%r10d
sub %edx,%r10d
sub %esi,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (v6 < a2)
    {
        v6 = a5 - a5;
    }
    else
    {
        v6 = ((a2 - a3) + a5) - a3;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        if (a4 < a3)
        {
            v7 += a2 + (a5 * a5);
        }
        else
        {
            v7 += a1 + (a3 - a1);
        }
    }
    if (v7 < a5)
    {
        v9 = (a1 + a5) - a3 + a2;
    }
    else
    {
        v9 = a5 - a5;
    }
    v10 = (a5 - a2) - a3 - a2;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 4
3 4
4 10
5 10
6 10
7 10
8 24
9 24
10 26
11 26
12 26
13 26
14 30
15 32
16 32
17 32
18 32
19 33
20 33
21 33
22 33
23 33
24 33
25 33
26 34
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%eax
lea (%rdx,%r8,2),%esi
add %esi,%r8d
add %eax,%r8d
sub $0x1,%edx
imul %edx,%ecx
sub %edi,%ecx
lea (%r8,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (v7 < a5)
        {
            v6 += a2 + (a5 + a1);
        }
        else
        {
            v6 += a5 * a2 - a1;
        }
    }
    v8 = a3 + a5 + a5 + a5;
    v9 = a4 * a3 - a4 - a1;
    v10 = 0;
    for (v11 = 0; v11++; v11<a2)
    {
        v10 += a3 - a1 + a1;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 23
2 23
3 23
4 23
5 16
6 16
7 23
8 17
9 17
10 17
11 23
12 24
<<<sep_out_sample>>>
cmp %edi,%ecx
jge d <func1+0xd>
mov %edi,%r9d
imul %ecx,%r9d
jmp 18 <func1+0x18>
lea -0x1(%rcx),%r9d
imul %esi,%r9d
sub %edi,%r9d
mov $0x0,%eax
cmp %r8d,%esi
jl 30 <func1+0x30>
mov %edi,%eax
sub %edx,%eax
mov %edi,%r10d
imul %edx,%r10d
sub %r10d,%eax
add %edi,%edx
add %esi,%edx
add %r8d,%edx
add %ecx,%edx
add %r9d,%edx
add %edx,%eax
sub %edi,%ecx
imul %r8d,%esi
add %esi,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a4 < a1)
    {
        v6 = a1 * a4;
    }
    else
    {
        v6 = (a4 * a2 - a2) - a1;
    }
    if (a2 < a5)
    {
        v7 = a3 - a3;
    }
    else
    {
        v7 = a1 - a3 - (a1 * a3);
    }
    v8 = a4 - a1 + a2 * a5;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 14
10 12
11 12
12 18
13 18
14 18
15 18
16 18
17 21
18 21
19 21
20 21
21 21
22 21
23 20
24 20
25 20
26 21
27 22
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %r8d,%edx
lea (%r8,%rcx,2),%eax
lea (%rax,%rdx,1),%edx
lea (%rsi,%r8,1),%eax
add %edx,%eax
mov $0x1,%edx
sub %edi,%edx
imul %edx,%r8d
imul %r8d,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a4 + a5;
    if (a5 < a5)
    {
        v7 = a5 - a3;
    }
    else
    {
        v7 = a2 + a5;
    }
    v8 = (a5 - a5 * a1) * a2;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 14
2 14
3 14
4 4
5 14
6 11
7 14
8 13
9 13
10 13
11 13
12 14
13 15
<<<sep_out_sample>>>
cmp %r8d,%ecx
jge d <func1+0xd>
mov %r8d,%eax
imul %edi,%eax
jmp 18 <func1+0x18>
mov %r8d,%eax
sub %edi,%eax
add %ecx,%eax
imul %r8d,%eax
cmp %edx,%eax
jge 25 <func1+0x25>
mov %edi,%r9d
imul %ecx,%r9d
jmp 30 <func1+0x30>
lea (%rcx,%rcx,1),%r9d
sub %edi,%r9d
imul %edi,%r9d
lea (%rdi,%rdx,1),%r10d
add %r10d,%esi
add %r8d,%esi
add %esi,%ecx
add %ecx,%eax
add %r9d,%eax
lea (%r8,%rdx,2),%edx
add %edx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a4 < a5)
    {
        v6 = a5 * ((a1 - a4) + a4);
    }
    else
    {
        v6 = (a4 - (a1 - a5)) * a5;
    }
    if (v6 < a3)
    {
        v7 = a1 * a4;
    }
    else
    {
        v7 = ((a4 + a4) - a1) * a1;
    }
    v8 = ((a3 + a5) + a3) + a1;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 10
10 12
11 12
12 14
13 14
14 14
15 18
16 18
17 18
18 21
19 21
20 21
21 21
22 21
23 21
24 20
25 20
26 21
27 22
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%eax
sub %edx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (a5 < a5)
        {
            v6 += a3 * a5;
        }
        else
        {
            v6 += a3 * a1;
        }
    }
    v8 = (a5 - a4 - a3) + a4;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 16
6 17
7 18
<<<sep_out_sample>>>
mov %edi,%eax
imul %edi,%eax
mov %r8d,%r9d
imul %esi,%r9d
mov %eax,%r10d
sub %r9d,%r10d
mov %r10d,%r9d
add %ecx,%eax
cmp $0x1,%edx
jg 21 <func1+0x21>
mov %ecx,%eax
imul %ecx,%eax
lea 0x1(%rax,%rdi,1),%eax
add %eax,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = (a1 * a1) - a5 * a2;
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += a5 - a4;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        v9 += a4 * a4 + a1;
    }
    if (v10 < a3)
    {
        v11 = a4 + a1 * a1;
    }
    else
    {
        v11 = a4 * a4;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 4
6 4
7 4
8 17
9 15
10 15
11 21
12 21
13 23
14 23
15 23
16 23
17 23
18 23
19 24
<<<sep_out_sample>>>
mov %edi,%r9d
imul %edx,%r9d
imul %esi,%r9d
add %edx,%r9d
cmp %esi,%edx
jle 24 <func1+0x24>
mov %esi,%eax
imul %esi,%eax
mov %edi,%r10d
sub %eax,%r10d
mov %r10d,%eax
sub %edx,%eax
jmp 2f <func1+0x2f>
mov %esi,%eax
imul %ecx,%eax
imul %ecx,%eax
imul %ecx,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %r8d,%esi
add %esi,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = a1 * a3 * a2 + a3;
    if (a2 < a3)
    {
        v7 = a1 - (a2 * a2) - a3;
    }
    else
    {
        v7 = (a2 * a4 * a4) * a4;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += (a5 - a4) * a3;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a4)
    {
        if (a4 < a2)
        {
            v10 += a4 - a4 - a4;
        }
        else
        {
            v10 += (a3 * a3) + a5;
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 5
6 5
7 7
8 7
9 7
10 7
11 7
12 7
13 7
14 11
15 11
16 11
17 11
18 30
19 30
20 30
21 30
22 30
23 30
24 31
<<<sep_out_sample>>>
mov %r8d,%eax
sub %ecx,%eax
mov %eax,%r11d
sub %edi,%r11d
imul %ecx,%r11d
mov %esi,%r10d
sub %ecx,%r10d
cmp %edx,%esi
jge 22 <func1+0x22>
mov %ecx,%r9d
imul %edi,%r9d
jmp 29 <func1+0x29>
mov %r8d,%r9d
imul %r8d,%r9d
add %r8d,%eax
add %ecx,%eax
cmp %edi,%r8d
jle 3c <func1+0x3c>
mov %edi,%eax
sub %ecx,%eax
imul %esi,%eax
sub %ecx,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r11d,%ecx
add %r10d,%ecx
add %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a4 * ((a5 - a4) - a1);
    v7 = a2 - a4;
    if (a2 < a3)
    {
        v8 = a4 * a1;
    }
    else
    {
        v8 = a5 * a5;
    }
    if (a1 < a5)
    {
        v9 = (a2 * (a1 - a4)) - a4;
    }
    else
    {
        v9 = (a5 - a4) + a5 + a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 4
6 5
7 5
8 6
9 6
10 8
11 8
12 8
13 12
14 12
15 20
16 20
17 14
18 14
19 16
20 16
21 16
22 16
23 22
24 22
25 22
26 22
27 22
28 22
29 22
30 22
31 23
<<<sep_out_sample>>>
cmp %edi,%edx
jle c <func1+0xc>
mov %r8d,%r9d
sub %edi,%r9d
jmp 13 <func1+0x13>
mov %edx,%r9d
imul %edx,%r9d
mov %edx,%esi
sub %ecx,%esi
cmp $0x1,%edi
mov $0x0,%eax
cmovg %eax,%esi
lea (%rdi,%rdx,2),%eax
add %eax,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %r9d,%eax
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a3 * a2 * a5;
    }
    if (a1 < a3)
    {
        v8 = a5 - a1;
    }
    else
    {
        v8 = (a3 * a3) + a5 - a5;
    }
    if (v7 < a1)
    {
        v9 = a2 - a2;
    }
    else
    {
        v9 = a3 - a4;
    }
    v10 = a3 - a2;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 15
7 15
8 23
9 23
10 23
11 23
12 23
13 26
14 26
15 26
16 26
17 26
18 27
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %edx,%r8d
lea (%r8,%rcx,1),%edx
sub %edi,%esi
imul %ecx,%edi
add %edi,%esi
lea 0x1(%rdx,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a2 - a1 + a1 * a4;
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a2 + a5 - a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 4
6 4
7 4
8 10
9 11
<<<sep_out_sample>>>
cmp %esi,%edx
jge 14 <func1+0x14>
mov %r8d,%eax
imul %r8d,%eax
imul %r8d,%eax
imul %ecx,%eax
jmp 1e <func1+0x1e>
mov %ecx,%eax
imul %ecx,%eax
imul %edx,%eax
sub %esi,%eax
lea (%rdi,%rdx,1),%r9d
add %esi,%r9d
add %r8d,%r9d
add %r9d,%ecx
add %eax,%ecx
mov %esi,%eax
imul %edi,%eax
sub %r8d,%eax
sub %edi,%eax
add %ecx,%eax
imul %edx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a3 < a2)
    {
        v6 = (a5 * a5 * a5) * a4;
    }
    else
    {
        v6 = (a4 * a4 * a3) - a2;
    }
    v7 = (a2 * a1) - a5 - a1;
    v8 = a3 * a5;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 14
13 14
14 14
15 14
16 14
17 12
18 12
19 12
20 12
21 14
22 13
23 14
24 15
<<<sep_out_sample>>>
cmp %r8d,%edi
jge 10 <func1+0x10>
mov %esi,%eax
sub %ecx,%eax
add %edi,%eax
add %r8d,%eax
jmp 1a <func1+0x1a>
mov %esi,%eax
imul %edx,%eax
add %r8d,%eax
sub %ecx,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %esi,%edx
add %r8d,%edx
lea 0x1(%rcx,%rdx,1),%edx
add %edx,%eax
imul %esi,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += (a3 * a4) * a1;
    }
    if (a1 < a5)
    {
        v8 = a2 - a4 + a1 + a5;
    }
    else
    {
        v8 = (a2 * a3 + a5) - a4;
    }
    v9 = a2 * a5;
    v10 = 0;
    for (v11 = 0; v11++; v11<a4)
    {
        v10 += a1 + a1;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 11
8 15
9 15
10 15
11 15
12 23
13 23
14 23
15 23
16 23
17 17
18 23
19 24
<<<sep_out_sample>>>
lea (%r8,%rdi,1),%r9d
cmp %edx,%r8d
jle 17 <func1+0x17>
mov %edx,%eax
imul %edx,%eax
sub $0x1,%eax
imul %r8d,%eax
jmp 1d <func1+0x1d>
mov %edx,%eax
imul %r8d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a5 + a1;
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        if (a2 < a3)
        {
            v7 += a5 - a4 * a5;
        }
        else
        {
            v7 += (a3 + a1) * a4;
        }
    }
    if (a3 < a5)
    {
        v9 = a3 * a3 * a5 - a5;
    }
    else
    {
        v9 = a3 * a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 17
3 17
4 19
5 19
6 19
7 19
8 19
9 23
10 23
11 25
12 25
13 25
14 25
15 25
16 25
17 26
<<<sep_out_sample>>>
cmp %edi,%r8d
jge 11 <func1+0x11>
lea (%rcx,%rcx,1),%r10d
mov %esi,%r9d
sub %ecx,%r9d
jmp 21 <func1+0x21>
lea (%rsi,%rcx,1),%r10d
lea 0x1(%rcx),%r9d
imul %edi,%r9d
imul %edx,%r9d
mov %ecx,%eax
sub %esi,%eax
cmp %edi,%r8d
jg 35 <func1+0x35>
mov %ecx,%eax
imul %edx,%eax
imul %edi,%eax
imul %edx,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (v6 < a4)
        {
            v6 += (a2 - a2) * a4;
        }
        else
        {
            v6 += a3 + a2;
        }
    }
    if (a5 < a1)
    {
        v8 = a4 + a4;
    }
    else
    {
        v8 = a2 + a4;
    }
    if (a5 < a1)
    {
        v9 = a2 - a4;
    }
    else
    {
        v9 = (a4 * a1 + a1) * a3;
    }
    if (a1 < a5)
    {
        v10 = (a3 - a2 - a3) + a4;
    }
    else
    {
        v10 = (a4 * a3) * a1 * a3;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 26
5 26
6 26
7 22
8 30
9 30
10 30
11 34
12 34
13 32
14 32
15 38
16 38
17 38
18 38
19 40
20 40
21 40
22 40
23 40
24 40
25 40
26 41
<<<sep_out_sample>>>
cmp %ecx,%r8d
jle 10 <func1+0x10>
mov %edx,%eax
sub %esi,%eax
sub %esi,%eax
add %r8d,%eax
jmp 1a <func1+0x1a>
mov %edi,%eax
sub %ecx,%eax
imul %esi,%eax
imul %esi,%eax
add %edi,%edx
add %esi,%edx
add %r8d,%edx
lea 0x1(%rcx,%rdx,1),%edx
add %eax,%edx
imul %r8d,%esi
sub %ecx,%esi
lea (%rdx,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a2 * a5 - a1;
    }
    if (a4 < a5)
    {
        v8 = a3 - a2 - a2 + a5;
    }
    else
    {
        v8 = (a1 - a4) * a2 * a2;
    }
    v9 = a2 * a5 - a4;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 11
8 15
9 15
10 15
11 15
12 18
13 18
14 18
15 18
16 18
17 17
18 17
19 18
20 19
<<<sep_out_sample>>>
cmp %edi,%edx
jge 10 <func1+0x10>
mov %r8d,%r10d
sub %edx,%r10d
imul %ecx,%r10d
jmp 1b <func1+0x1b>
lea 0x1(%rdx),%r10d
imul %r8d,%r10d
add %ecx,%r10d
cmp %esi,%edx
jge 25 <func1+0x25>
lea (%rcx,%rcx,1),%r9d
jmp 33 <func1+0x33>
mov %edi,%r9d
imul %r8d,%r9d
add %ecx,%r9d
imul %r8d,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a3 < a1)
    {
        v6 = a5 * a4 - (a3 * a4);
    }
    else
    {
        v6 = ((a3 * a5) + a5) + a4;
    }
    if (a3 < a2)
    {
        v7 = a4 + a4;
    }
    else
    {
        v7 = (a4 + (a1 * a5)) * a5;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 12
11 12
12 14
13 14
14 18
15 18
16 18
17 18
18 20
19 20
20 20
21 20
22 20
23 20
24 21
<<<sep_out_sample>>>
mov %r8d,%r10d
imul %edi,%r10d
imul %edi,%r10d
sub %r8d,%r10d
mov %edx,%eax
imul %edx,%eax
add %r8d,%eax
sub %ecx,%eax
mov %r8d,%r9d
sub %edi,%r9d
test %r8d,%r8d
jle 2c <func1+0x2c>
mov %r8d,%r9d
sub %edi,%r9d
add %r8d,%r9d
add %r9d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r10,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a2 < a2)
    {
        v6 = a1 + a3 - a5 * a5;
    }
    else
    {
        v6 = a5 * a1 * a1 - a5;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += a3 * a5 - a1;
    }
    if (a3 < a3)
    {
        v9 = a2 * a2 - a1;
    }
    else
    {
        v9 = a5 + (a3 * a3) - a4;
    }
    if (v10 < a5)
    {
        v10 = (a5 - a1) + a5;
    }
    else
    {
        v10 = a5 - a1;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 23
6 23
7 23
8 23
9 31
10 31
11 25
12 25
13 27
14 27
15 27
16 33
17 33
18 33
19 33
20 33
21 33
22 33
23 34
<<<sep_out_sample>>>
mov %edi,%r9d
imul %ecx,%r9d
lea (%r8,%rsi,1),%eax
cmp %esi,%ecx
jle 1c <func1+0x1c>
mov %edi,%r10d
sub %ecx,%r10d
mov %edx,%eax
sub %ecx,%eax
add %r10d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a1 * a4;
    if (a2 < a4)
    {
        v7 = a1 - a4 - (a4 - a3);
    }
    else
    {
        v7 = a5 + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 11
4 5
5 5
6 7
7 7
8 7
9 7
10 7
11 13
12 13
13 13
14 13
15 13
16 13
17 14
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
imul %edx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a5 + a4;
    }
    v8 = a1 * a3;
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        if (a5 < a1)
        {
            v9 += a3 * a4;
        }
        else
        {
            v9 += a2 * a3 - a5;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 22
4 22
5 9
6 22
7 23
<<<sep_out_sample>>>
test %edx,%edx
jle b <func1+0xb>
mov %esi,%eax
imul %edx,%eax
jmp 10 <func1+0x10>
mov $0x0,%eax
lea 0x1(%rdi,%rdx,1),%edi
add %esi,%edi
add %r8d,%edi
add %edi,%ecx
add %ecx,%eax
imul %esi,%esi
imul %esi,%edx
imul %edx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a2 - a2;
    if (v6 < a3)
    {
        v7 = a2 * a3;
    }
    else
    {
        v7 = a1 - a1;
    }
    v8 = ((a2 * a2) * a3) * a5;
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        v9 += a3 + a3 * a3;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 5
2 5
3 7
4 7
5 7
6 11
7 19
8 19
9 19
10 19
11 19
12 13
13 13
14 13
15 19
16 20
<<<sep_out_sample>>>
mov %ecx,%eax
sub %edx,%eax
test %ecx,%ecx
jg 16 <func1+0x16>
mov %r8d,%r9d
sub %ecx,%r9d
mov %ecx,%eax
imul %edi,%eax
add %r9d,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
lea (%rax,%rdi,2),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    if (v6 < a4)
    {
        v6 = a4 - (a2 - a2) - a3;
    }
    else
    {
        v6 = (a5 - a4) + a4 * a1;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += a4 - a2;
    }
    v9 = a1 + a1;
    v10 = 0;
    for (v11 = 0; v11++; v11<a5)
    {
        if (a2 < a1)
        {
            v10 += (a3 + a2) + a1;
        }
        else
        {
            v10 += a2 * a4 - a1;
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 6
3 4
4 4
5 10
6 10
7 10
8 10
9 10
10 30
11 30
12 30
13 30
14 30
15 30
16 31
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
mov %r8d,%r9d
imul %r8d,%r9d
imul %edx,%ecx
add %r9d,%ecx
add %eax,%ecx
add %esi,%edi
sub %r8d,%edi
add %edi,%edx
lea 0x1(%rcx,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a5 * a5 + (a3 * a4);
    if (a2 < a2)
    {
        v7 = a3 + a5 * a2 * a3;
    }
    else
    {
        v7 = (a1 + a2) - a5 + a3;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        if (v6 < a1)
        {
            v8 += (a2 * a4) + a3;
        }
        else
        {
            v8 += a3 + (a5 - a4);
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 25
2 25
3 25
4 25
5 4
6 4
7 4
8 4
9 25
10 11
11 11
12 11
13 25
14 26
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (a2 < a1)
        {
            v6 += (a2 + a3) - a1;
        }
        else
        {
            v6 += a1 - (a3 - a1);
        }
    }
    v8 = a4 - a4;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 18
<<<sep_out_sample>>>
push %rbx
mov %r8d,%ebx
imul %ecx,%ebx
sub %esi,%ebx
sub %ecx,%ebx
mov %esi,%r11d
imul %esi,%r11d
sub %r8d,%r11d
add %esi,%r11d
lea (%rcx,%rdx,1),%r10d
cmp %edx,%esi
jge 31 <func1+0x31>
mov %edx,%r9d
imul %esi,%r9d
mov %edi,%eax
imul %edi,%eax
add %eax,%r9d
jmp 3e <func1+0x3e>
mov %edx,%r9d
not %r9d
imul %ecx,%r9d
add %edx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %ebx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a5 * a4 - a2 - a4;
    v7 = ((a2 * a2) - a5) + a2;
    v8 = a4 + a3;
    if (a2 < a3)
    {
        v9 = (a3 * a2) + a1 * a1;
    }
    else
    {
        v9 = a3 - (a3 * a4 + a4);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 4
3 4
4 4
5 4
6 5
7 5
8 5
9 5
10 6
11 7
12 7
13 9
14 9
15 9
16 9
17 9
18 9
19 13
20 13
21 13
22 13
23 15
24 15
25 15
26 15
27 15
28 15
29 15
30 15
31 16
32 16
<<<sep_out_sample>>>
cmp %ecx,%r8d
jge 11 <func1+0x11>
mov %r8d,%r9d
neg %r9d
imul %edx,%r9d
jmp 1e <func1+0x1e>
mov %ecx,%r9d
sub %edi,%r9d
add %r8d,%r9d
imul %ecx,%r9d
cmp %edi,%r9d
jge 31 <func1+0x31>
lea (%rdi,%rcx,1),%r10d
mov %edi,%eax
imul %edi,%eax
add %eax,%r10d
jmp 41 <func1+0x41>
mov %r8d,%r10d
imul %esi,%r10d
mov %ecx,%eax
imul %ecx,%eax
imul %eax,%r10d
mov %edi,%eax
sub %ecx,%eax
cmp %edi,%ecx
jge 51 <func1+0x51>
lea (%r8,%rcx,1),%eax
sub %edx,%eax
add %edi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
add %r10d,%r9d
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a5 < a4)
    {
        v6 = a3 - (a3 + (a3 * a5));
    }
    else
    {
        v6 = ((a4 - a1) + a5) * a4;
    }
    if (v6 < a1)
    {
        v7 = (a1 + a4) + a1 * a1;
    }
    else
    {
        v7 = a5 * a2 * (a4 * a4);
    }
    if (a4 < a1)
    {
        v8 = (a5 + a4 - a3) + a1;
    }
    else
    {
        v8 = a1 - a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 10
11 12
12 12
13 14
14 14
15 14
16 14
17 14
18 18
19 18
20 18
21 18
22 18
23 26
24 26
25 20
26 20
27 22
28 22
29 22
30 28
31 28
32 28
33 28
34 28
35 28
36 28
37 29
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %edx,%r8d
imul %esi,%edi
lea (%r8,%rcx,2),%eax
lea 0x1(%rax,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a4 + a2 + a3;
    }
    v8 = a4 + (a2 * a1);
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 9
5 9
6 10
7 11
<<<sep_out_sample>>>
lea 0x2(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
imul %edx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += (a4 - a4) * a4;
    }
    v8 = a1 * a3;
    v9 = 0;
    for (v10 = 0; v10++; v10<a1)
    {
        if (a5 < a2)
        {
            v9 += a2 * a5 - a5;
        }
        else
        {
            v9 += a1 - a3;
        }
    }
    v11 = 0;
    for (v12 = 0; v12++; v12<a2)
    {
        v11 += a1 * (a2 + a5);
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 27
2 27
3 27
4 27
5 9
6 27
7 28
<<<sep_out_sample>>>
mov %r8d,%r9d
imul %ecx,%r9d
sub %esi,%r9d
add %r8d,%r9d
mov %esi,%eax
sub %ecx,%eax
cmp %edi,%edx
jge 1b <func1+0x1b>
lea (%rdi,%r8,2),%eax
sub %ecx,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a5 - (a2 - (a5 * a4));
    if (a3 < a1)
    {
        v7 = (a1 + a5 - a4) + a5;
    }
    else
    {
        v7 = a2 - a4;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 11
6 11
7 5
8 5
9 7
10 7
11 13
12 13
13 13
14 13
15 13
16 13
17 14
<<<sep_out_sample>>>
mov %r8d,%r9d
imul %edx,%r9d
mov %r8d,%eax
sub %edx,%eax
cmp %ecx,%edx
jle 1c <func1+0x1c>
lea (%rcx,%rdx,1),%r10d
mov %ecx,%eax
imul %edi,%eax
add %r10d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a5 * a3;
    if (a4 < a3)
    {
        v7 = a4 + a3 + a4 * a1;
    }
    else
    {
        v7 = a5 - a4 + a4 - a3;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 11
4 11
5 5
6 5
7 7
8 7
9 7
10 7
11 13
12 13
13 13
14 13
15 13
16 13
17 14
<<<sep_out_sample>>>
add %edi,%edx
add %edx,%esi
add %r8d,%esi
add %esi,%ecx
sub %r8d,%edi
lea 0x1(%rcx,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = ((a2 - a2) + a1) - a5;
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += a5 + a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 4
6 10
7 11
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%ecx
add %esi,%ecx
add %r8d,%ecx
mov %edx,%eax
sub %r8d,%eax
imul %edx,%eax
add %ecx,%eax
add %esi,%r8d
sub %r8d,%edx
add %edx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a3 * (a3 - a5) - a4;
    v7 = a3 - (a5 + a2) + a1;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 4
5 4
6 4
7 6
8 5
9 5
10 5
11 6
12 7
<<<sep_out_sample>>>
cmp %esi,%edi
jge 11 <func1+0x11>
mov %edi,%eax
imul %edi,%eax
imul %r8d,%eax
sub %edi,%eax
jmp 17 <func1+0x17>
lea 0x1(%rdx),%eax
imul %esi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a1 < a2)
    {
        v6 = a1 * a1 * a5 - a1;
    }
    else
    {
        v6 = a2 + a3 * a2;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        if (v8 < a2)
        {
            v7 += a3 - (a1 * a2);
        }
        else
        {
            v7 += a4 + a1 * a1;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 24
11 24
12 24
13 24
14 24
15 25
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
add %esi,%ecx
add %r8d,%r8d
sub %edi,%r8d
sub %edx,%r8d
lea 0x1(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = (a5 + a5) - a1 - a3;
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += a3 + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 4
6 4
7 4
8 10
9 11
<<<sep_out_sample>>>
cmp %edx,%ecx
jge 13 <func1+0x13>
mov %r8d,%r9d
imul %esi,%r9d
sub %edx,%r9d
sub %ecx,%r9d
jmp 1c <func1+0x1c>
mov %edx,%r9d
neg %r9d
sub %edx,%r9d
lea (%rcx,%rdi,1),%eax
test %esi,%esi
jle 2a <func1+0x2a>
mov %edx,%eax
neg %eax
imul %edi,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a4 < a3)
    {
        v6 = ((a5 * a2) - a3) - a4;
    }
    else
    {
        v6 = (a5 - a3) - a3 - a5;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += a5 * a1;
    }
    if (v7 < a2)
    {
        v9 = ((a2 - a2) - a3) * a1;
    }
    else
    {
        v9 = a4 + a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 23
12 17
13 17
14 19
15 19
16 19
17 25
18 25
19 25
20 25
21 25
22 25
23 26
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (v7 < a1)
        {
            v6 += a1 + (a2 - a5);
        }
        else
        {
            v6 += (a3 + a5) * a2;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += (a3 - a2) + a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 21
5 22
<<<sep_out_sample>>>
lea (%rdi,%rsi,1),%eax
mov %esi,%r9d
sub %ecx,%r9d
test %edx,%edx
cmovle %r9d,%eax
lea 0x1(%rax,%rdi,1),%eax
add %eax,%edx
add %edx,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    if (a3 < a3)
    {
        v6 = (a2 * a5 * a3) + a3;
    }
    else
    {
        v6 = a5 - a5;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += a5 * a2;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        v9 += a1 - a4;
    }
    if (v6 < a3)
    {
        v11 = a1 + a4 + a2 - a4;
    }
    else
    {
        v11 = (a2 - a3) - a4 + a3;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 24
2 24
3 24
4 24
5 24
6 30
7 30
8 30
9 30
10 30
11 31
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (v6 < a5)
        {
            v6 += a3 + a1;
        }
        else
        {
            v6 += a3 * (a1 + a1);
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += a2 - a3 + a4;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a1)
    {
        v10 += a4 - (a4 - a1);
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 26
2 26
3 26
4 26
5 27
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%eax
imul %r8d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (a2 < a3)
        {
            v6 += a2 * a1;
        }
        else
        {
            v6 += a5 + a2 * a4;
        }
    }
    v8 = a5 * a4;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 16
6 17
7 18
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%eax
imul %r8d,%edx
imul %ecx,%ecx
add %edx,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a2 * a1 - a3;
    }
    v8 = (a5 * a3) + a4 * a4;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 9
6 9
7 9
8 10
9 11
<<<sep_out_sample>>>
lea 0x1(%rdx),%eax
imul %esi,%eax
lea 0x1(%rdi,%rax,1),%eax
add %eax,%esi
add %r8d,%esi
add %ecx,%esi
add $0x1,%r8d
imul %r8d,%ecx
add %ecx,%edx
lea 0x1(%rsi,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = a4 + (a4 * a5) + a3;
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += a2 - a3;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        v9 += a3 * a3;
    }
    v11 = (a2 * a3) + a2 - a3;
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 15
2 15
3 16
4 16
5 16
6 16
7 4
8 4
9 4
10 16
11 17
<<<sep_out_sample>>>
mov %esi,%r9d
sub %edx,%r9d
test %esi,%esi
jg 16 <func1+0x16>
lea (%rdx,%rsi,1),%r9d
imul %ecx,%r9d
imul %esi,%r9d
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
mov %esi,%edx
sub %ecx,%edx
sub %ecx,%edx
imul %ecx,%edx
add %edx,%eax
sub %r8d,%esi
add $0x1,%esi
imul %esi,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (v6 < a2)
    {
        v6 = a2 - (a3 - a4) - a4;
    }
    else
    {
        v6 = a4 * (a3 + a2) * a2;
    }
    v7 = (a2 - a4 - a4) * a4;
    v8 = a4 * (a2 - a5) + a4;
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        v9 += (a2 + a1) + a3;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 6
3 4
4 4
5 10
6 10
7 10
8 19
9 19
10 19
11 19
12 19
13 12
14 12
15 12
16 12
17 19
18 13
19 13
20 13
21 19
22 20
<<<sep_out_sample>>>
lea 0x1(%rdi),%r9d
imul %r8d,%r9d
sub %esi,%r9d
cmp $0x1,%edx
jle 17 <func1+0x17>
mov %edx,%eax
imul %edi,%eax
jmp 1d <func1+0x1d>
lea 0x1(%rdx),%eax
imul %ecx,%eax
mov %r8d,%r10d
sub %edx,%r10d
lea (%rdi,%rsi,2),%esi
lea (%rsi,%r10,1),%edx
add %edx,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a2 < a2)
    {
        v6 = (a4 - a5 + a3) + a4;
    }
    else
    {
        v6 = a1 * a5 + a5 - a2;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        if (a3 < a1)
        {
            v7 += a3 + a2 - a2;
        }
        else
        {
            v7 += a4 - a5 - a1;
        }
    }
    if (v8 < a3)
    {
        v9 = (a5 - a5 + a3) * a1;
    }
    else
    {
        v9 = (a4 * a3) + a4;
    }
    v10 = (a2 + (a5 - a3)) - a3;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 24
5 24
6 26
7 26
8 26
9 30
10 30
11 32
12 32
13 33
14 33
15 33
16 33
17 33
18 33
19 34
<<<sep_out_sample>>>
cmp %edx,%esi
jge e <func1+0xe>
lea (%rsi,%r8,2),%r9d
imul %r8d,%r9d
jmp 15 <func1+0x15>
mov %edx,%r9d
imul %edx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
sub $0x1,%r8d
imul %r8d,%edx
add %edx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a2 < a3)
    {
        v6 = (a5 + (a2 + a5)) * a5;
    }
    else
    {
        v6 = a3 * a3;
    }
    v7 = (a5 * a3 - a3) + a2;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 13
9 13
10 13
11 13
12 13
13 12
14 12
15 12
16 13
17 14
<<<sep_out_sample>>>
lea (%rdx,%rsi,1),%eax
lea (%rdi,%rsi,1),%r9d
cmp %esi,%edx
cmovl %eax,%r9d
mov $0x0,%eax
cmp %ecx,%r8d
jge 1c <func1+0x1c>
lea (%rdi,%rsi,1),%eax
neg %eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a3 < a2)
    {
        v6 = a3 + (a2 - (a5 - a5));
    }
    else
    {
        v6 = a1 + (a2 - a3) + a3;
    }
    if (a5 < a4)
    {
        v7 = (a3 - (a1 + a2)) - a3;
    }
    else
    {
        v7 = (a2 - a2) * (a1 * a1);
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 18
6 12
7 12
8 14
9 14
10 20
11 20
12 20
13 20
14 20
15 20
16 21
<<<sep_out_sample>>>
mov $0x0,%r9d
test %edx,%edx
jg 14 <func1+0x14>
mov %ecx,%r9d
imul %ecx,%r9d
sub %esi,%r9d
mov %edx,%eax
sub %edi,%eax
lea (%rcx,%rdi,1),%r10d
cmp %r8d,%r9d
cmovge %r10d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (v6 < a3)
    {
        v6 = a2 - a2;
    }
    else
    {
        v6 = a4 * a4 - a2;
    }
    if (v6 < a5)
    {
        v7 = ((a3 - a5) - a1) + a5;
    }
    else
    {
        v7 = (a4 + a1 - a1) + a1;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 4
3 4
4 10
5 10
6 10
7 14
8 14
9 14
10 14
11 14
12 20
13 20
14 20
15 20
16 20
17 20
18 21
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%esi
lea (%rcx,%rdx,2),%eax
sub %r8d,%eax
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a3 + (a5 * a3);
    }
    v8 = a3 + (a3 - a5 + a4);
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 9
6 9
7 10
8 11
<<<sep_out_sample>>>
lea (%rcx,%rdi,1),%r9d
cmp %edx,%ecx
jl 11 <func1+0x11>
mov %edx,%r9d
neg %r9d
sub %edi,%r9d
test %edx,%edx
jle 1e <func1+0x1e>
mov %r8d,%eax
sub %edx,%eax
sub %ecx,%eax
jmp 27 <func1+0x27>
lea (%r8,%rdx,1),%eax
sub %ecx,%eax
imul %esi,%eax
cmp %esi,%edi
jge 3b <func1+0x3b>
mov %esi,%r10d
imul %edx,%r10d
sub %r8d,%r10d
imul %edi,%r10d
jmp 49 <func1+0x49>
mov %r8d,%r10d
imul %ecx,%r10d
add %esi,%r10d
imul %r8d,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a4 < a3)
    {
        v6 = a4 + a1;
    }
    else
    {
        v6 = ((a2 - a2) - a3) - a1;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        if (a2 < a4)
        {
            v7 += a3 + a2 * a4;
        }
        else
        {
            v7 += (a5 + a4) + a3;
        }
    }
    if (v9 < a3)
    {
        v9 = a5 - a3 - a4;
    }
    else
    {
        v9 = (a5 + a3 - a4) * a2;
    }
    if (a1 < a2)
    {
        v10 = a1 * (a2 * a3 - a5);
    }
    else
    {
        v10 = (a2 + a5 * a4) * a5;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 4
3 4
4 10
5 10
6 10
7 24
8 24
9 26
10 26
11 26
12 26
13 30
14 30
15 30
16 32
17 32
18 34
19 34
20 34
21 34
22 34
23 38
24 38
25 38
26 38
27 40
28 40
29 40
30 40
31 40
32 40
33 40
34 41
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %r8d,%edx
add %ecx,%edx
sub %ecx,%r8d
lea (%r8,%rsi,2),%eax
lea 0x1(%rdx,%rax,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a5 - a4 + a2 + a2;
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a4 + a1 * a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 4
6 4
7 10
8 11
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
lea 0x1(%rcx),%edx
imul %edx,%r8d
add %r8d,%eax
lea -0x1(%rdi),%edx
imul %edx,%ecx
add %ecx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a5 + (a5 * a4);
    if (a2 < a2)
    {
        v7 = (a1 * a4) - a3 + a1;
    }
    else
    {
        v7 = a4 * a1 - a4 + a1;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 13
2 13
3 13
4 13
5 4
6 4
7 13
8 11
9 11
10 11
11 13
12 14
<<<sep_out_sample>>>
test %edi,%edi
jle 10 <func1+0x10>
lea (%rcx,%rdi,1),%r10d
add %esi,%r10d
add %edx,%r10d
jmp 1e <func1+0x1e>
mov %ecx,%r10d
imul %esi,%r10d
sub %edi,%r10d
imul %esi,%r10d
lea (%rdi,%rdx,1),%r9d
add %esi,%r9d
add %r8d,%r9d
add %ecx,%r9d
add %r10d,%r9d
mov %r8d,%eax
imul %edi,%eax
imul %eax,%r8d
sub %esi,%r8d
add %r9d,%r8d
imul %edi,%edi
sub %ecx,%edi
sub %edx,%edi
lea (%r8,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (v6 < a1)
    {
        v6 = (a2 + (a4 + a1)) + a3;
    }
    else
    {
        v6 = a2 * ((a4 * a2) - a1);
    }
    v7 = a5 * a1 * a5 - a2;
    v8 = (a1 * a1) - a4 - a3;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 10
11 14
12 14
13 14
14 14
15 14
16 12
17 12
18 12
19 12
20 14
21 13
22 13
23 13
24 14
25 15
<<<sep_out_sample>>>
mov %ecx,%eax
cmp %ecx,%edx
jge 11 <func1+0x11>
mov %r8d,%eax
imul %r8d,%eax
add %ecx,%eax
add %edx,%eax
mov %edx,%r9d
sub %esi,%r9d
cmp %esi,%eax
jl 29 <func1+0x29>
mov %edi,%r9d
imul %edi,%r9d
imul %edi,%r9d
add %edx,%r9d
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%eax
lea 0x1(%r9,%rax,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    if (a3 < a4)
    {
        v6 = a5 * a5 + a4 + a3;
    }
    else
    {
        v6 = a4 + (a4 * (a5 - a5));
    }
    if (v6 < a2)
    {
        v7 = a3 - a2;
    }
    else
    {
        v7 = a3 + (a1 * a1 * a1);
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        if (a4 < a5)
        {
            v8 += a5 + a5 + a1;
        }
        else
        {
            v8 += a1 * a5;
        }
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a3)
    {
        if (v10 < a3)
        {
            v10 += a3 * a4 * a4;
        }
        else
        {
            v10 += a4 - a5 * a5;
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 6
7 6
8 14
9 14
10 12
11 12
12 18
13 18
14 18
15 18
16 44
17 44
18 44
19 44
20 44
21 44
22 45
<<<sep_out_sample>>>
cmp %ecx,%esi
jge 13 <func1+0x13>
mov %ecx,%r10d
sub %edx,%r10d
add %ecx,%r10d
imul %esi,%r10d
jmp 20 <func1+0x20>
mov %edx,%r10d
sub %ecx,%r10d
imul %edx,%r10d
add %esi,%r10d
lea (%rdi,%rdx,1),%r9d
add %esi,%r9d
add %r8d,%r9d
add %r9d,%ecx
lea (%rcx,%r10,1),%r9d
lea (%rsi,%r8,1),%ecx
imul %esi,%ecx
sub %edx,%ecx
add %r9d,%ecx
sub %edi,%r8d
add %r8d,%esi
sub %edi,%esi
lea (%rcx,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a2 < a4)
    {
        v6 = (a4 - a3 + a4) * a2;
    }
    else
    {
        v6 = a2 - (a4 - a3) * a3;
    }
    v7 = (a2 + a5) * a2 - a3;
    v8 = (a5 - a1 + a2) - a1;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 14
13 14
14 14
15 14
16 14
17 12
18 12
19 12
20 14
21 13
22 13
23 13
24 14
25 15
<<<sep_out_sample>>>
mov %ecx,%eax
imul %esi,%eax
sub %edx,%eax
imul %ecx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a1 - a1;
    v7 = (a4 * a2 - a3) * a4;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 5
2 5
3 5
4 5
5 6
6 6
7 6
8 6
9 6
10 7
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (a1 < a4)
        {
            v6 += a3 - a4;
        }
        else
        {
            v6 += a4 - a1 - a2;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += a5 * (a5 * a5);
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a2)
    {
        if (v8 < a4)
        {
            v10 += a3 + a2 - a5;
        }
        else
        {
            v10 += a4 + (a2 * a1);
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 33
2 33
3 33
4 33
5 34
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea (%r8,%rcx,1),%esi
mov %edi,%eax
imul %ecx,%eax
imul %eax,%eax
add %esi,%eax
imul %edx,%ecx
sub %ecx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a4 * (a1 * a1 * a4);
    v7 = a1 - (a4 * a3);
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 4
7 4
8 6
9 5
10 5
11 6
12 7
<<<sep_out_sample>>>
cmp %edx,%r8d
jge 15 <func1+0x15>
mov %ecx,%r10d
imul %edx,%r10d
sub %r8d,%r10d
imul %edx,%r10d
jmp 1c <func1+0x1c>
mov %esi,%r10d
imul %edi,%r10d
mov %edi,%r9d
sub %esi,%r9d
cmp %edi,%ecx
jl 2d <func1+0x2d>
mov %edi,%r9d
imul %esi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a5 < a3)
    {
        v6 = a3 * ((a4 * a3) - a5);
    }
    else
    {
        v6 = a2 * a1;
    }
    if (a4 < a1)
    {
        v7 = ((a1 - a2) - a2) + a2;
    }
    else
    {
        v7 = a1 * a2;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 14
11 14
12 12
13 12
14 18
15 18
16 20
17 20
18 20
19 20
20 20
21 20
22 21
<<<sep_out_sample>>>
mov %esi,%r10d
sub %edx,%r10d
mov %r8d,%eax
imul %esi,%eax
mov %eax,%r9d
imul %esi,%r9d
add %edx,%r9d
cmp %edi,%edx
jle 24 <func1+0x24>
mov %esi,%eax
sub %edi,%eax
imul %edx,%eax
imul %ecx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r10d,%ecx
add %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = ((a5 - a5) - a3) + a2;
    if (a2 < a2)
    {
        v7 = a2 + a3;
    }
    else
    {
        v7 = ((a5 * a2) * a2) + a3;
    }
    if (a1 < a3)
    {
        v8 = ((a2 - a1) * a3) * a4;
    }
    else
    {
        v8 = a2 * a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 11
4 11
5 11
6 11
7 11
8 13
9 13
10 15
11 15
12 15
13 15
14 21
15 21
16 21
17 21
18 21
19 21
20 21
21 22
<<<sep_out_sample>>>
mov %ecx,%eax
sub %edi,%eax
sub %esi,%eax
sub %edi,%eax
add %edi,%ecx
cmp %edi,%esi
mov $0x0,%r9d
cmovge %r9d,%ecx
lea 0x1(%rdi,%rdx,1),%edx
lea (%r8,%rsi,2),%esi
lea (%rsi,%rdx,1),%edx
add %edx,%eax
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a2 < a2)
    {
        v6 = a1 - (a2 - (a3 * a2));
    }
    else
    {
        v6 = a2 - a4;
    }
    v7 = a4 - a1 - a2 - a1;
    if (a2 < a1)
    {
        v8 = a4 + a1;
    }
    else
    {
        v8 = a5 - a5;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        v9 += a5 + a2 + a2;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 12
2 12
3 12
4 12
5 15
6 15
7 15
8 15
9 26
10 26
11 26
12 26
13 26
14 27
<<<sep_out_sample>>>
mov %esi,%r11d
imul %ecx,%r11d
sub %edx,%r11d
imul %esi,%r11d
mov %edx,%r10d
neg %r10d
imul %ecx,%r10d
cmp %r8d,%edx
jge 2d <func1+0x2d>
mov %esi,%r9d
sub %r8d,%r9d
mov %edx,%eax
imul %edx,%eax
add %eax,%r9d
jmp 39 <func1+0x39>
mov %edi,%r9d
sub %edx,%r9d
add %esi,%r9d
add %ecx,%r9d
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
add %esi,%ecx
add %r11d,%ecx
add %r10d,%ecx
add %r9d,%ecx
imul %edx,%r8d
add %r8d,%edi
sub %edx,%edi
lea (%rcx,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a2 * (a2 * a4 - a3);
    v7 = a4 - a4 * a3 - a4;
    if (a3 < a5)
    {
        v8 = a2 - a5 + a3 * a3;
    }
    else
    {
        v8 = (a1 - a3) + a2 + a4;
    }
    v9 = a1 + a5 * a3 - a3;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 5
6 5
7 5
8 6
9 6
10 8
11 8
12 8
13 8
14 8
15 8
16 12
17 12
18 12
19 12
20 15
21 15
22 15
23 15
24 15
25 15
26 15
27 14
28 14
29 14
30 15
31 16
<<<sep_out_sample>>>
cmp %esi,%ecx
jge 15 <func1+0x15>
lea (%rdi,%rdx,1),%eax
imul %esi,%eax
mov %edx,%r11d
sub %eax,%r11d
mov %r11d,%eax
jmp 1d <func1+0x1d>
lea (%rcx,%r8,1),%eax
imul %r8d,%eax
cmp %r8d,%esi
jle 32 <func1+0x32>
mov %esi,%r9d
imul %edx,%r9d
imul %ecx,%r9d
sub %edi,%r9d
jmp 45 <func1+0x45>
mov %ecx,%r9d
imul %edi,%r9d
add %r8d,%r9d
mov %edx,%r10d
sub %r9d,%r10d
mov %r10d,%r9d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = (a3 - a3 - a3) + a3;
    if (a4 < a2)
    {
        v7 = a3 - (a1 + a3) * a2;
    }
    else
    {
        v7 = a5 * a4 + (a5 * a5);
    }
    if (a5 < a2)
    {
        v8 = a2 * a3 * a4 - a1;
    }
    else
    {
        v8 = a3 - (a4 * a1 + a5);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 5
2 5
3 7
4 7
5 7
6 7
7 7
8 7
9 11
10 11
11 13
12 13
13 15
14 15
15 15
16 15
17 15
18 19
19 19
20 19
21 19
22 19
23 19
24 21
25 21
26 21
27 21
28 21
29 21
30 22
<<<sep_out_sample>>>
mov %edx,%r9d
sub %esi,%r9d
mov %ecx,%eax
imul %ecx,%eax
add %eax,%r9d
cmp %edi,%edx
jle 18 <func1+0x18>
mov %edi,%eax
neg %eax
jmp 23 <func1+0x23>
mov %esi,%eax
imul %ecx,%eax
imul %esi,%eax
imul %esi,%eax
test %ecx,%ecx
jle 3a <func1+0x3a>
mov %edi,%r10d
imul %edi,%r10d
mov %r8d,%r11d
imul %edx,%r11d
sub %r11d,%r10d
jmp 49 <func1+0x49>
mov %edx,%r11d
imul %esi,%r11d
lea (%rsi,%rsi,1),%r10d
imul %r11d,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = (a3 - a2) + a4 * a4;
    if (a1 < a3)
    {
        v7 = a2 - (a2 + a1);
    }
    else
    {
        v7 = (a2 * a4) * a2 * a2;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += a2 * (a3 + a3);
    }
    if (v10 < a4)
    {
        v10 = (a1 * a1) - a5 * a3;
    }
    else
    {
        v10 = a3 * a2 * (a2 + a2);
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 4
6 5
7 5
8 7
9 7
10 7
11 11
12 11
13 11
14 11
15 18
16 18
17 20
18 20
19 20
20 20
21 20
22 20
23 24
24 24
25 24
26 24
27 26
28 26
29 26
30 26
31 26
32 26
33 26
34 27
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
lea (%rsi,%rax,1),%r10d
add %r8d,%r10d
add %ecx,%r10d
lea (%rdi,%rcx,1),%r11d
mov %edi,%r9d
imul %esi,%r9d
add %r11d,%r9d
add %r10d,%r9d
sub %esi,%edx
add %edx,%r9d
sub %esi,%eax
sub %r8d,%eax
lea (%r9,%rax,1),%edx
imul %r8d,%r8d
sub %r8d,%edi
sub %ecx,%edi
lea (%rdx,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a1 + a4 + a1 * a2;
    v7 = (a1 - a2 + a3) - a1;
    v8 = (a1 + a3 - a2) - a5;
    v9 = (a1 - a5 * a5) - a4;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 8
3 8
4 8
5 4
6 4
7 4
8 4
9 8
10 5
11 8
12 6
13 6
14 8
15 7
16 7
17 7
18 8
19 9
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
add %r8d,%ecx
imul %edi,%esi
lea 0x1(%rcx,%rsi,1),%eax
imul %edx,%edi
sub %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a1 * a2;
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += a1 + (a1 - a2);
    }
    v9 = a1 - (a3 * a1) - a1;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 11
5 4
6 11
7 10
8 11
9 12
<<<sep_out_sample>>>
mov %edx,%r10d
imul %ecx,%r10d
add $0x1,%r10d
imul %edx,%r10d
cmp %esi,%edi
jge 1f <func1+0x1f>
mov %r8d,%r9d
imul %esi,%r9d
add %edi,%r9d
jmp 2b <func1+0x2b>
lea (%rsi,%rdx,1),%eax
mov %r8d,%r9d
sub %eax,%r9d
sub %ecx,%r9d
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
imul %r8d,%esi
sub %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = (a3 * a4 * a3) + a3;
    if (a1 < a2)
    {
        v7 = a1 + (a5 * a2);
    }
    else
    {
        v7 = (a5 - (a2 + a3)) - a4;
    }
    v8 = a3 - ((a2 * a5) + a3);
    v9 = 0;
    for (v10 = 0; v10++; v10<a1)
    {
        if (v10 < a2)
        {
            v9 += (a1 * a3) * a1;
        }
        else
        {
            v9 += a1 - a5 - a5;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 5
6 5
7 7
8 7
9 7
10 7
11 11
12 11
13 11
14 11
15 26
16 26
17 26
18 26
19 26
20 26
21 13
22 26
23 27
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
lea (%r8,%rcx,1),%eax
add %esi,%edx
imul %esi,%ecx
add %ecx,%edx
add %edx,%eax
add $0x1,%edi
imul %edi,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a3 + a2 + a2 * a4;
    v7 = a2 + a2 * a1;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 4
7 4
8 6
9 5
10 5
11 6
12 7
<<<sep_out_sample>>>
cmp $0x1,%edi
jle e <func1+0xe>
mov %r8d,%eax
sub %ecx,%eax
add %edi,%eax
jmp 13 <func1+0x13>
lea (%rcx,%rdx,1),%eax
add %edi,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (v6 < a3)
        {
            v6 += a1 * (a2 - a4);
        }
        else
        {
            v6 += (a5 - a4) * a2;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += a4 - a4;
    }
    if (v9 < a1)
    {
        v10 = a5 - a4 + a1;
    }
    else
    {
        v10 = a1 + (a4 + a3);
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 23
4 23
5 23
6 23
7 27
8 27
9 29
10 29
11 29
12 29
13 29
14 30
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
mov %edi,%esi
sub %ecx,%esi
imul %esi,%edx
imul %edx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a5 * a2 + a5;
    }
    v8 = a3 * (a1 - a4) * a1;
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        v9 += a5 + a3;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 15
2 15
3 15
4 15
5 9
6 9
7 9
8 9
9 15
10 16
<<<sep_out_sample>>>
cmp %esi,%ecx
jge e <func1+0xe>
lea 0x1(%rsi),%eax
imul %edx,%eax
add %edi,%eax
jmp 17 <func1+0x17>
lea 0x1(%rsi),%eax
imul %r8d,%eax
add %esi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a4 < a2)
    {
        v6 = a1 + (a3 * a2 + a3);
    }
    else
    {
        v6 = (a5 + a5 * a2) + a2;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += a4 * a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 17
11 17
12 17
13 17
14 17
15 18
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%r9d
add %esi,%r9d
add %r8d,%r9d
add %ecx,%r9d
mov %edi,%r10d
sub %ecx,%r10d
mov %esi,%eax
imul %r8d,%eax
add %r10d,%eax
add %r9d,%eax
mov %edi,%r9d
imul %edx,%r9d
imul %r9d,%r8d
mov %ecx,%r11d
sub %r8d,%r11d
add %r11d,%eax
sub %edx,%esi
add %eax,%esi
sub %edi,%ecx
sub %edi,%ecx
lea (%rsi,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a1 - a4 + a2 * a5;
    v7 = a4 - a1 * a3 * a5;
    v8 = a2 - a3;
    v9 = a4 - a1 - a1;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 8
2 8
3 8
4 8
5 4
6 4
7 4
8 4
9 4
10 8
11 5
12 5
13 5
14 5
15 5
16 8
17 6
18 8
19 7
20 7
21 8
22 9
<<<sep_out_sample>>>
mov %edx,%eax
imul %edx,%eax
mov %edi,%r10d
sub %eax,%r10d
imul %ecx,%r10d
mov %edx,%eax
imul %r8d,%eax
imul %edi,%eax
mov %ecx,%r9d
sub %eax,%r9d
test %r8d,%r8d
jle 2e <func1+0x2e>
lea (%r8,%rdx,1),%eax
imul %ecx,%eax
sub %esi,%eax
jmp 33 <func1+0x33>
mov $0x0,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r10d,%ecx
add %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = (a1 - a3 * a3) * a4;
    v7 = a4 - a3 * a5 * a1;
    if (v8 < a5)
    {
        v8 = (a5 + a3) * a4 - a2;
    }
    else
    {
        v8 = ((a2 - a3) + a3) - a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 4
6 5
7 5
8 5
9 5
10 5
11 6
12 6
13 8
14 8
15 8
16 8
17 12
18 14
19 14
20 14
21 14
22 14
23 14
24 14
25 15
<<<sep_out_sample>>>
test %r8d,%r8d
jle c <func1+0xc>
lea (%rcx,%rsi,2),%eax
add %edx,%eax
jmp 14 <func1+0x14>
mov %edx,%eax
sub %edi,%eax
imul %r8d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (a4 < a3)
        {
            v6 += (a1 + a4) + a2;
        }
        else
        {
            v6 += a2 - a5;
        }
    }
    if (v6 < a5)
    {
        v8 = (a2 + a2) + a4 + a3;
    }
    else
    {
        v8 = a5 * a3 - (a1 * a5);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 22
7 22
8 22
9 24
10 24
11 24
12 24
13 24
14 25
<<<sep_out_sample>>>
test %esi,%esi
jle 10 <func1+0x10>
mov %r8d,%r9d
imul %ecx,%r9d
add %edx,%r9d
jmp 1d <func1+0x1d>
mov %esi,%r9d
imul %r8d,%r9d
sub %edi,%r9d
add %r8d,%r9d
cmp $0x1,%ecx
jle 2e <func1+0x2e>
mov %r8d,%eax
imul %ecx,%eax
add %edi,%eax
sub %edx,%eax
jmp 37 <func1+0x37>
mov %edi,%eax
imul %edi,%eax
imul %r8d,%eax
add %r9d,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (a1 < a2)
        {
            v6 += (a3 - a1) - a3;
        }
        else
        {
            v6 += (a4 - a4) + a2;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        if (a1 < a4)
        {
            v8 += a5 + a3;
        }
        else
        {
            v8 += a3 + a4;
        }
    }
    if (v8 < a2)
    {
        v10 = a5 * a4 + a3;
    }
    else
    {
        v10 = a5 - (a1 - a2 * a5);
    }
    if (v7 < a4)
    {
        v11 = (a1 + a5 * a4) - a3;
    }
    else
    {
        v11 = a5 * (a1 * a1);
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 28
2 28
3 30
4 30
5 30
6 30
7 34
8 34
9 34
10 34
11 36
12 36
13 38
14 38
15 38
16 38
17 38
18 42
19 42
20 42
21 44
22 44
23 44
24 44
25 44
26 44
27 45
<<<sep_out_sample>>>
mov %ecx,%r9d
imul %r8d,%r9d
sub %esi,%r9d
imul %esi,%r9d
mov %r8d,%eax
sub %edx,%eax
cmp %edi,%esi
jge 20 <func1+0x20>
lea (%r8,%rsi,1),%eax
imul %ecx,%eax
add %edx,%eax
cmp %edx,%edi
jge 36 <func1+0x36>
mov $0x1,%r10d
sub %esi,%r10d
imul %ecx,%r10d
sub %edx,%r10d
jmp 44 <func1+0x44>
mov %ecx,%r10d
imul %ecx,%r10d
add %edi,%r10d
imul %r8d,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = ((a4 * a5) - a2) * a2;
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a1 + (a2 - a4);
    }
    if (a2 < a1)
    {
        v9 = ((a5 + a2) * a4) + a3;
    }
    else
    {
        v9 = a5 - a3;
    }
    if (a1 < a3)
    {
        v10 = a4 - (a4 * a2) - a3;
    }
    else
    {
        v10 = (a1 + (a4 * a4)) * a5;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 16
6 16
7 10
8 10
9 12
10 12
11 12
12 18
13 18
14 20
15 20
16 20
17 20
18 20
19 24
20 24
21 24
22 24
23 26
24 26
25 26
26 26
27 26
28 26
29 26
30 27
<<<sep_out_sample>>>
cmp %esi,%edi
jge 16 <func1+0x16>
mov %edx,%eax
imul %edx,%eax
mov %r8d,%r9d
sub %eax,%r9d
mov %r9d,%eax
add %edx,%eax
jmp 1b <func1+0x1b>
mov %ecx,%eax
imul %esi,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a1 < a2)
    {
        v6 = a5 - (a3 * a3) + a3;
    }
    else
    {
        v6 = a4 * a2;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a4 - a2 + a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 6
9 6
10 10
11 10
12 17
13 17
14 17
15 17
16 17
17 18
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a3 - a5 * a2;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += (a3 - a4) + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 14
2 14
3 14
4 14
5 15
<<<sep_out_sample>>>
mov %edx,%eax
test %esi,%esi
jle f <func1+0xf>
mov %esi,%eax
sub %r8d,%eax
add %edx,%eax
add %edi,%eax
lea (%rdx,%rdx,1),%r9d
mov %r8d,%r10d
sub %ecx,%r10d
test %edx,%edx
cmovle %r10d,%r9d
lea 0x1(%r9,%rdi,1),%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (a4 < a5)
        {
            v6 += a3 - a2 - a4;
        }
        else
        {
            v6 += a1 * a4 + a1;
        }
    }
    if (v8 < a2)
    {
        v8 = a2 - a5 + a3 + a1;
    }
    else
    {
        v8 = a1 * (a2 - a2) + a3;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        v9 += (a1 + a2) - a1;
    }
    if (v6 < a3)
    {
        v11 = a3 + a3;
    }
    else
    {
        v11 = ((a1 + a5) - a1) - a4;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 16
3 16
4 18
5 18
6 18
7 18
8 31
9 31
10 31
11 31
12 31
13 37
14 37
15 37
16 37
17 37
18 37
19 38
<<<sep_out_sample>>>
lea (%rsi,%rcx,1),%r11d
lea (%r8,%rdx,2),%r10d
cmp %esi,%ecx
jge 17 <func1+0x17>
mov %r8d,%r9d
sub %ecx,%r9d
add %esi,%r9d
jmp 1e <func1+0x1e>
mov %esi,%r9d
imul %r8d,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = (a4 + a1 + a2) - a1;
    v7 = a5 + a3 + a3;
    if (a4 < a2)
    {
        v8 = a2 - (a4 - a5);
    }
    else
    {
        v8 = a2 * a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 5
3 6
4 6
5 8
6 8
7 8
8 8
9 12
10 12
11 14
12 14
13 14
14 14
15 14
16 14
17 14
18 15
<<<sep_out_sample>>>
cmp %edx,%r8d
jge 14 <func1+0x14>
lea (%rdx,%rsi,1),%r9d
mov %r8d,%eax
imul %edx,%eax
add %eax,%r9d
jmp 21 <func1+0x21>
mov %edx,%r9d
imul %edi,%r9d
add %r8d,%r9d
add %esi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
mov %esi,%edi
sub %ecx,%edi
add %edi,%eax
imul %ecx,%ecx
add %ecx,%esi
add %esi,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a5 < a3)
    {
        v6 = (a3 + a2) + (a5 * a3);
    }
    else
    {
        v6 = (a3 * a1 + a5) + a2;
    }
    v7 = a2 - a4;
    v8 = a4 * a4 + a2 + a3;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 14
13 14
14 14
15 14
16 14
17 12
18 12
19 14
20 13
21 13
22 13
23 14
24 15
<<<sep_out_sample>>>
add %edx,%edi
add %esi,%edi
add %edi,%r8d
add %r8d,%ecx
sub %esi,%edx
lea 0x1(%rcx,%rdx,2),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a3 - (a2 + (a2 - a3));
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += a1 * a2 + a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 4
6 10
7 11
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %r8d,%edx
add %ecx,%edx
lea (%rdx,%rdi,2),%eax
imul %ecx,%esi
sub %esi,%r8d
add %r8d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a1 + a1 + (a3 - a3);
    v7 = a5 - (a2 * a4) + a4;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 6
6 5
7 5
8 5
9 6
10 7
<<<sep_out_sample>>>
cmp %edi,%r8d
jge 12 <func1+0x12>
mov %ecx,%eax
imul %edi,%eax
add %r8d,%eax
imul %edi,%eax
jmp 1a <func1+0x1a>
mov %edx,%eax
imul %edx,%eax
lea (%rax,%rdx,2),%eax
lea 0x1(%rcx,%r8,1),%r9d
add %r9d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (a2 < a5)
        {
            v6 += a3 + a4;
        }
        else
        {
            v6 += (a3 + a2) * a3;
        }
    }
    if (a5 < a1)
    {
        v8 = (a4 * a1 + a5) * a1;
    }
    else
    {
        v8 = a3 + a3 + a3 * a3;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        v9 += a3 * a2 + a1;
    }
    v11 = (a4 + a5) - a5 + a5;
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 18
7 18
8 22
9 22
10 22
11 30
12 30
13 30
14 30
15 30
16 30
17 30
18 31
<<<sep_out_sample>>>
mov %edx,%eax
sub %esi,%eax
add %edx,%edi
add %esi,%edi
add %edi,%r8d
lea (%r8,%rcx,1),%edi
add %edi,%eax
imul %ecx,%esi
sub %esi,%edx
sub %ecx,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = (a3 - a2 - a5) + a5;
    v7 = (a3 - a4 * a2) - a4;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 5
9 5
10 5
11 6
12 7
<<<sep_out_sample>>>
cmp %esi,%edi
jge b <func1+0xb>
mov %r8d,%eax
sub %esi,%eax
jmp 13 <func1+0x13>
lea (%rcx,%rcx,1),%eax
imul %esi,%eax
sub %edx,%eax
lea (%rcx,%rdx,1),%r9d
add %r8d,%r9d
cmp %r8d,%eax
jge 2a <func1+0x2a>
lea 0x1(%rdx),%r9d
imul %ecx,%r9d
add %esi,%r9d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%eax
lea 0x1(%r9,%rax,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a1 < a2)
    {
        v6 = a3 - a2 - a3 + a5;
    }
    else
    {
        v6 = (a4 + a4) * a2 - a3;
    }
    if (v6 < a5)
    {
        v7 = a4 + (a3 * a4) + a2;
    }
    else
    {
        v7 = a4 + a3 + a5;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        if (a2 < a4)
        {
            v8 += a3 + a4 + a1;
        }
        else
        {
            v8 += a3 * a5 * a2;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 18
10 18
11 12
12 12
13 14
14 14
15 14
16 32
17 32
18 32
19 32
20 32
21 32
22 33
<<<sep_out_sample>>>
cmp $0x1,%ecx
jle 10 <func1+0x10>
mov %edi,%eax
sub %edx,%eax
add %edi,%eax
imul %edx,%eax
jmp 18 <func1+0x18>
lea 0x1(%rdi),%eax
imul %esi,%eax
add %edx,%eax
add %edx,%edi
add %edi,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (a1 < a5)
        {
            v6 += a2 + a5 + a1;
        }
        else
        {
            v6 += a3 * a3;
        }
    }
    if (v7 < a4)
    {
        v8 = (a1 - a3 + a1) * a3;
    }
    else
    {
        v8 = a3 + (a2 * a1 + a2);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 18
7 18
8 22
9 22
10 22
11 24
12 24
13 24
14 24
15 24
16 25
<<<sep_out_sample>>>
mov %esi,%r9d
imul %edi,%r9d
imul %ecx,%r9d
imul %esi,%r9d
lea (%r8,%rdx,1),%r10d
cmp %r9d,%ecx
jg 27 <func1+0x27>
mov %ecx,%r10d
imul %edi,%r10d
mov %esi,%eax
imul %esi,%eax
add %eax,%r10d
lea (%r8,%rdi,1),%eax
cmp %r8d,%esi
jge 38 <func1+0x38>
lea (%rsi,%rdi,1),%eax
imul %esi,%eax
add %edi,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
add %r10d,%r9d
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a2 * a1 * a4 * a2;
    if (v6 < a4)
    {
        v7 = a5 + a4 - a4 + a3;
    }
    else
    {
        v7 = a4 * a1 + a2 * a2;
    }
    if (a2 < a5)
    {
        v8 = a2 * (a2 + a1) + a1;
    }
    else
    {
        v8 = a5 + a1;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        v9 += a2 * a1 - a1;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 7
6 5
7 5
8 11
9 11
10 11
11 11
12 11
13 19
14 13
15 13
16 15
17 15
18 15
19 26
20 26
21 26
22 26
23 26
24 26
25 26
26 27
<<<sep_out_sample>>>
add %edi,%edx
add %edx,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%eax
lea (%rdi,%rcx,2),%edx
add %edx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a1 - a2 * a5;
    }
    v8 = (a4 + a1 + a4) + a5;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 9
6 9
7 10
8 11
<<<sep_out_sample>>>
lea -0x1(%rdi),%r9d
imul %ecx,%r9d
imul %edx,%r9d
cmp %ecx,%edi
jle 16 <func1+0x16>
lea (%r8,%r8,1),%eax
jmp 22 <func1+0x22>
mov $0x1,%eax
sub %edi,%eax
imul %esi,%eax
add %edi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a5 < a5)
    {
        v6 = a3 + a3 - a1;
    }
    else
    {
        v6 = (a4 * a1 - a4) * a3;
    }
    if (a4 < a1)
    {
        v7 = a5 + a5;
    }
    else
    {
        v7 = a2 - a2 * a1 + a1;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        if (v6 < a4)
        {
            v8 += a4 * (a4 + a3);
        }
        else
        {
            v8 += a3 - a5 * a5;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 12
5 12
6 14
7 14
8 18
9 18
10 18
11 18
12 32
13 32
14 32
15 32
16 32
17 32
18 33
<<<sep_out_sample>>>
lea (%rcx,%rdx,1),%eax
cmp %edx,%r8d
jl e <func1+0xe>
mov %esi,%eax
imul %r8d,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a5 < a3)
    {
        v6 = a4 + a3;
    }
    else
    {
        v6 = a2 * a5;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += (a2 - a2) + a1;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        if (a4 < a3)
        {
            v9 += a5 + a4;
        }
        else
        {
            v9 += (a2 + a1) - a5;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 4
3 4
4 10
5 10
6 29
7 29
8 29
9 29
10 29
11 30
<<<sep_out_sample>>>
mov %edi,%eax
imul %edi,%eax
lea 0x1(%rdi,%rax,1),%eax
add %eax,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a1 + (a2 * a2);
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += a2 * a2 - a4;
    }
    v10 = a1 * a1;
    v11 = 0;
    for (v12 = 0; v12++; v12<a2)
    {
        if (v6 < a5)
        {
            v11 += (a5 + a2) * a3;
        }
        else
        {
            v11 += a2 - a2;
        }
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 14
2 14
3 27
4 27
5 27
6 27
7 27
8 28
<<<sep_out_sample>>>
test %ecx,%ecx
jle e <func1+0xe>
lea (%r8,%rcx,1),%eax
sub %edi,%eax
sub %edx,%eax
jmp 1a <func1+0x1a>
mov $0x1,%eax
sub %edx,%eax
imul %edx,%eax
add %ecx,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (v6 < a4)
    {
        v6 = (a5 + a4 - a1) - a3;
    }
    else
    {
        v6 = (a3 - a3 * a3) + a4;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += a3 + a1 + a4;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        v9 += a4 - a4 * a5;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 10
11 22
12 22
13 22
14 22
15 22
16 23
<<<sep_out_sample>>>
push %rbx
lea (%r8,%rdx,1),%ebx
cmp %ecx,%edx
jl e <func1+0xe>
mov %edi,%ebx
imul %edi,%ebx
lea 0x1(%rcx),%r10d
mov %r10d,%r11d
imul %r8d,%r11d
add %ecx,%r11d
cmp %esi,%ecx
jge 2c <func1+0x2c>
mov %ecx,%r9d
sub %esi,%r9d
imul %r8d,%r9d
jmp 36 <func1+0x36>
mov %edx,%r9d
imul %r8d,%r9d
neg %r9d
cmp %edx,%r9d
jge 48 <func1+0x48>
lea (%rdx,%rsi,1),%r10d
imul %ecx,%r10d
sub %esi,%r10d
jmp 4f <func1+0x4f>
imul %esi,%r10d
add %r8d,%r10d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %ebx,%eax
add %r11d,%eax
add %eax,%r9d
lea (%r9,%r10,1),%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a3 < a4)
    {
        v6 = a5 + a3;
    }
    else
    {
        v6 = a1 * a1;
    }
    if (a2 < a2)
    {
        v7 = a2 - a2;
    }
    else
    {
        v7 = a4 * a5 + a5 + a4;
    }
    if (a4 < a2)
    {
        v8 = a4 * a5 - a2 * a5;
    }
    else
    {
        v8 = a5 - a5 - a3 * a5;
    }
    if (v8 < a3)
    {
        v9 = (a3 + a2) * a4 - a2;
    }
    else
    {
        v9 = a2 + a2 * a4 + a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 6
3 4
4 4
5 10
6 10
7 18
8 18
9 18
10 18
11 20
12 20
13 22
14 22
15 22
16 22
17 26
18 26
19 26
20 28
21 28
22 30
23 30
24 30
25 30
26 34
27 34
28 36
29 36
30 36
31 36
32 36
33 36
34 36
35 36
36 37
37 37
<<<sep_out_sample>>>
lea (%r8,%rcx,1),%r9d
sub %edi,%r9d
lea (%rcx,%rsi,1),%r10d
imul %edi,%r10d
add %ecx,%r10d
mov %ecx,%eax
sub %esi,%eax
cmp %r9d,%edi
jle 23 <func1+0x23>
mov %esi,%eax
sub %edx,%eax
sub %edi,%eax
add %ecx,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
add %r10d,%r9d
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a5 + a4 - a1;
    v7 = a4 + a1 * (a4 + a2);
    if (v6 < a1)
    {
        v8 = (a2 - a3 - a1) + a4;
    }
    else
    {
        v8 = a3 + a4 - a2 - a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 5
4 5
5 5
6 12
7 12
8 6
9 6
10 8
11 8
12 8
13 8
14 14
15 14
16 14
17 14
18 14
19 14
20 14
21 15
<<<sep_out_sample>>>
cmp %edx,%r8d
jge 12 <func1+0x12>
lea 0x1(%rsi),%r9d
imul %ecx,%r9d
sub %edi,%r9d
jmp 1f <func1+0x1f>
mov %edi,%r9d
imul %esi,%r9d
add %ecx,%r9d
add %r8d,%r9d
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
add %ecx,%esi
add %r9d,%esi
sub %ecx,%edx
imul %edx,%edi
sub %r8d,%edi
lea (%rsi,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a5 < a3)
    {
        v6 = a2 * a4 + a4 - a1;
    }
    else
    {
        v6 = a4 + a1 * a2 + a5;
    }
    v7 = ((a3 - a4) * a1) - a5;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 10
11 13
12 13
13 13
14 13
15 13
16 12
17 12
18 12
19 13
20 14
<<<sep_out_sample>>>
test %esi,%esi
jle 11 <func1+0x11>
lea (%rdi,%rdx,1),%r9d
imul %edi,%r9d
sub %esi,%r9d
jmp 18 <func1+0x18>
mov %edx,%r9d
imul %edx,%r9d
cmp %edx,%r9d
jge 24 <func1+0x24>
mov %edi,%eax
imul %ecx,%eax
jmp 2c <func1+0x2c>
mov %edi,%eax
imul %edx,%eax
lea (%rax,%rsi,2),%eax
add %edi,%edx
add %edx,%esi
add %r8d,%esi
add %esi,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (v6 < a2)
    {
        v6 = ((a1 + a3) * a1) - a2;
    }
    else
    {
        v6 = a3 * a3;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        if (a4 < a1)
        {
            v7 += a1 - a2 * a4;
        }
        else
        {
            v7 += (a2 + a5) + a3;
        }
    }
    if (v6 < a3)
    {
        v9 = a1 * a4;
    }
    else
    {
        v9 = a1 * a3 + a2 + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 24
10 24
11 26
12 26
13 26
14 30
15 30
16 30
17 32
18 32
19 32
20 32
21 32
22 32
23 33
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
lea (%r8,%rcx,2),%eax
lea 0x1(%rax,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (a1 < a4)
        {
            v6 += a5 + a1;
        }
        else
        {
            v6 += a3 - a4;
        }
    }
    v8 = a5 + a4;
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        v9 += a5 + a4;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 22
4 16
5 22
6 23
<<<sep_out_sample>>>
mov %edx,%r9d
sub %edi,%r9d
cmp %ecx,%esi
jge 16 <func1+0x16>
mov %ecx,%eax
imul %edi,%eax
imul %ecx,%eax
add %edi,%eax
jmp 22 <func1+0x22>
lea (%rdi,%rcx,1),%r10d
mov %edi,%eax
imul %edx,%eax
add %r10d,%eax
mov %edx,%r10d
imul %ecx,%r10d
add %esi,%r10d
mov %ecx,%r11d
sub %r10d,%r11d
add %r11d,%edi
add %edi,%edx
add %edx,%esi
add %r8d,%esi
add %esi,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a3 - a1;
    if (a2 < a4)
    {
        v7 = a1 + ((a4 * a1) * a4);
    }
    else
    {
        v7 = a1 + a4 + (a1 * a3);
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        if (a1 < a4)
        {
            v8 += a2 - (a2 - a4);
        }
        else
        {
            v8 += (a5 * a2) - a2;
        }
    }
    v10 = a4 - (a3 * a4 + a2);
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 5
4 5
5 7
6 7
7 7
8 7
9 7
10 11
11 11
12 11
13 11
14 25
15 25
16 25
17 25
18 25
19 26
20 26
21 26
22 26
23 26
24 26
25 26
26 27
<<<sep_out_sample>>>
cmp %edx,%ecx
jge 13 <func1+0x13>
mov %edi,%r9d
imul %ecx,%r9d
sub %r8d,%r9d
add %ecx,%r9d
jmp 21 <func1+0x21>
mov %r8d,%r9d
imul %edx,%r9d
imul %esi,%r9d
add %edx,%r9d
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
add %ecx,%esi
add %r9d,%esi
mov %edx,%eax
imul %r8d,%eax
add %edi,%eax
sub %ecx,%eax
add %esi,%eax
add %r8d,%eax
sub %edi,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a4 < a3)
    {
        v6 = a1 * a4 - a5 + a4;
    }
    else
    {
        v6 = a3 + (a5 * a3 * a2);
    }
    v7 = (a1 + a5 * a3) - a4;
    v8 = a5 + a5 - a5;
    v9 = a5 - a1;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 15
13 15
14 15
15 15
16 15
17 12
18 12
19 12
20 12
21 15
22 15
23 14
24 15
25 16
<<<sep_out_sample>>>
cmp %ecx,%edi
jge 10 <func1+0x10>
lea (%rcx,%rsi,1),%r11d
add %r8d,%r11d
add %edi,%r11d
jmp 1f <func1+0x1f>
mov %esi,%r11d
imul %edi,%r11d
mov %edx,%eax
imul %ecx,%eax
add %eax,%r11d
mov %esi,%r10d
imul %ecx,%r10d
mov %edi,%eax
imul %edi,%eax
add %eax,%r10d
cmp %edx,%r8d
jle 3e <func1+0x3e>
mov %edx,%eax
imul %edx,%eax
lea (%rax,%rdi,2),%r9d
jmp 4a <func1+0x4a>
lea (%rcx,%r8,1),%r9d
mov %esi,%eax
imul %edx,%eax
add %eax,%r9d
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a1 < a4)
    {
        v6 = ((a4 + a2) + a5) + a1;
    }
    else
    {
        v6 = a2 * a1 + a3 * a4;
    }
    v7 = a2 * a4 + a1 * a1;
    if (a3 < a5)
    {
        v8 = a3 * a3 + a1 + a1;
    }
    else
    {
        v8 = a4 + a5 + (a2 * a3);
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        if (a3 < a2)
        {
            v9 += a5 - a1;
        }
        else
        {
            v9 += a4 - a1 + a5;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 10
11 10
12 12
13 12
14 12
15 12
16 12
17 13
18 13
19 15
20 15
21 15
22 15
23 19
24 19
25 19
26 19
27 33
28 33
29 33
30 33
31 33
32 33
33 33
34 34
<<<sep_out_sample>>>
lea (%rdx,%rdi,1),%eax
imul %ecx,%edx
imul %r8d,%edx
imul %edx,%edi
add %eax,%esi
add %esi,%r8d
add %r8d,%ecx
add %edi,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = (a3 + a5) - a3 - a5;
    v7 = a1 * (a4 * a3 * a5);
    v8 = a3 + a1;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 6
2 5
3 5
4 5
5 7
6 7
7 7
8 7
9 7
10 8
<<<sep_out_sample>>>
lea (%rdi,%rsi,1),%r9d
cmp %esi,%edx
mov $0x0,%eax
cmovl %r9d,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a3 < a2)
    {
        v6 = a1 + a2;
    }
    else
    {
        v6 = (a1 - a1) * a4;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += a5 + a4 - a1;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a1)
    {
        v9 += a5 - a3;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 22
6 22
7 22
8 22
9 22
10 23
<<<sep_out_sample>>>
lea 0x1(%rsi),%eax
imul %ecx,%eax
add %esi,%eax
add %edi,%eax
add %edx,%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
mov %edx,%edi
not %edi
imul %edi,%r8d
add %esi,%r8d
lea 0x1(%rax,%r8,1),%edi
imul %edx,%esi
imul %esi,%ecx
sub %edx,%ecx
lea (%rdi,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a2 - (a5 * a3 + a5);
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += a4 + a5;
    }
    v9 = (a2 * a3 * a4) - a3;
    if (a4 < a4)
    {
        v10 = a4 + (a2 + a4 - a3);
    }
    else
    {
        v10 = a2 + (a2 * a4 + a4);
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 19
5 19
6 19
7 19
8 19
9 4
10 4
11 4
12 4
13 19
14 10
15 10
16 10
17 19
18 20
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a2 - a2;
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += a5 * a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 11
<<<sep_out_sample>>>
lea (%rcx,%rcx,1),%r11d
lea (%rcx,%rdi,1),%r9d
cmp %r8d,%edx
jge 19 <func1+0x19>
lea (%rdi,%rsi,1),%r9d
imul %ecx,%r9d
imul %edx,%r9d
cmp %edi,%r8d
jle 27 <func1+0x27>
mov %edx,%r10d
imul %r8d,%r10d
jmp 30 <func1+0x30>
lea 0x1(%rdi,%r8,1),%r10d
imul %esi,%r10d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r11d,%ecx
add %ecx,%r9d
lea (%r9,%r10,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a4 + a4 + a2 - a2;
    if (a3 < a5)
    {
        v7 = (a4 * (a1 + a2)) * a3;
    }
    else
    {
        v7 = a4 + a1;
    }
    if (a1 < a5)
    {
        v8 = a3 * a5;
    }
    else
    {
        v8 = (a5 + a1) * a2 + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 11
3 5
4 5
5 7
6 7
7 7
8 13
9 13
10 15
11 15
12 15
13 19
14 19
15 21
16 21
17 21
18 21
19 21
20 21
21 21
22 22
<<<sep_out_sample>>>
lea 0x2(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12, v13 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (a2 < a4)
        {
            v6 += a1 - a5 + a5;
        }
        else
        {
            v6 += a3 - a5 - a5;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        if (v8 < a2)
        {
            v8 += a4 * a5 + a5;
        }
        else
        {
            v8 += a5 + a2 + a5;
        }
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a1)
    {
        v10 += a3 - a5 * a3;
    }
    v12 = 0;
    for (v13 = 0; v13++; v13<a1)
    {
        if (a5 < a1)
        {
            v12 += (a3 + a4) - a5;
        }
        else
        {
            v12 += a3 + (a3 - a2);
        }
    }
    return v12+v13+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 45
2 45
3 45
4 45
5 46
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rdx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a3 - a4;
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += (a5 - a3) - a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 11
<<<sep_out_sample>>>
lea (%rsi,%r8,1),%r10d
imul %edx,%r10d
mov %edx,%eax
imul %edi,%eax
lea (%rcx,%rdx,1),%r9d
cmp %ecx,%eax
jl 1f <func1+0x1f>
mov %edx,%r9d
sub %edi,%r9d
imul %ecx,%r9d
add %edi,%edx
add %edx,%esi
add %r8d,%esi
add %esi,%ecx
add %r10d,%ecx
add %ecx,%eax
add %r9d,%eax
imul %r8d,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = (a3 * a2) + a5 * a3;
    v7 = a3 * a1;
    if (v7 < a4)
    {
        v8 = a4 + a3;
    }
    else
    {
        v8 = (a3 - a1) * a4;
    }
    if (a5 < a5)
    {
        v9 = a1 - a5;
    }
    else
    {
        v9 = a1 * a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 5
4 5
5 8
6 6
7 6
8 12
9 12
10 12
11 22
12 22
13 22
14 22
15 22
16 22
17 22
18 20
19 22
20 23
<<<sep_out_sample>>>
mov %esi,%eax
imul %r8d,%eax
mov %ecx,%r9d
sub %eax,%r9d
add %r9d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a3 + a2 * a2;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += (a4 + a2) + a1;
    }
    v10 = a4 - (a2 * a5);
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 14
2 14
3 14
4 14
5 15
6 15
7 15
8 15
9 15
10 16
<<<sep_out_sample>>>
test %esi,%esi
jle 15 <func1+0x15>
mov %edx,%r9d
imul %r8d,%r9d
add $0x1,%r9d
imul %edx,%r9d
jmp 20 <func1+0x20>
mov %edx,%eax
imul %edi,%eax
mov %r8d,%r9d
sub %eax,%r9d
add %edi,%edx
lea (%rsi,%rdx,1),%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (v6 < a2)
    {
        v6 = a3 * a5 * a3 + a3;
    }
    else
    {
        v6 = a5 - a3 * a1;
    }
    v7 = a3 + a1;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 12
13 13
14 13
15 13
16 13
17 13
18 14
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (v6 < a4)
        {
            v6 += a5 - a4 * a4;
        }
        else
        {
            v6 += (a5 + a1) * a5;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += a4 - a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 21
5 22
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
add %ecx,%esi
mov %edi,%eax
imul %edi,%eax
sub %ecx,%eax
add %eax,%edx
add %esi,%edx
sub $0x1,%ecx
imul %ecx,%r8d
sub %edi,%r8d
lea (%rdx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a3 - (a4 - a1 * a1);
    v7 = a5 * a4 - a5 - a1;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 4
7 4
8 4
9 6
10 5
11 5
12 5
13 6
14 7
<<<sep_out_sample>>>
cmp %edi,%esi
jge 19 <func1+0x19>
mov %edi,%r9d
imul %r8d,%r9d
mov $0x1,%eax
sub %r9d,%eax
imul %r8d,%eax
jmp 21 <func1+0x21>
lea (%rcx,%rdi,1),%eax
imul %ecx,%eax
add %esi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a2 < a1)
    {
        v6 = a5 - (a1 * a5 * a5);
    }
    else
    {
        v6 = a2 + (a4 + a1) * a4;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        if (v7 < a4)
        {
            v7 += a1 * a3 + a3;
        }
        else
        {
            v7 += a5 - (a4 + a4);
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 6
9 10
10 10
11 10
12 24
13 24
14 24
15 24
16 24
17 25
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add $0x1,%r8d
imul %edi,%r8d
imul %edi,%r8d
add %r8d,%eax
add %ecx,%edi
lea (%rdi,%rsi,2),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = (a5 * a1 + a1) * a1;
    v7 = (a2 + (a1 + a4)) + a2;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 4
7 4
8 6
9 5
10 5
11 6
12 7
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
add %ecx,%r8d
mov %edi,%eax
imul %edx,%eax
imul %eax,%ecx
sub %esi,%ecx
lea (%r8,%rcx,1),%eax
mov %edx,%ecx
imul %edx,%ecx
sub %ecx,%edi
add %edi,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a4 * (a1 * a3) - a2;
    v7 = a1 - (a3 * a3) + a3;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 4
7 4
8 4
9 6
10 5
11 5
12 5
13 5
14 6
15 7
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a1 - a3;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += (a5 * a2) + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 14
2 14
3 14
4 14
5 15
<<<sep_out_sample>>>
test %r8d,%r8d
jle 13 <func1+0x13>
lea (%rsi,%rcx,2),%eax
mov %edx,%r10d
sub %eax,%r10d
mov %r10d,%eax
jmp 19 <func1+0x19>
lea (%r8,%r8,1),%eax
neg %eax
cmp %edi,%eax
jge 2c <func1+0x2c>
mov %edi,%r9d
imul %r8d,%r9d
add %esi,%r9d
sub %ecx,%r9d
jmp 37 <func1+0x37>
mov %esi,%r9d
imul %r8d,%r9d
imul %ecx,%r9d
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %ecx,%r8d
add %r8d,%eax
add %r9d,%eax
imul %ecx,%ecx
sub %edi,%ecx
imul %ecx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (v6 < a5)
    {
        v6 = a3 - (a2 + a4 + a4);
    }
    else
    {
        v6 = a3 - a5 - a5 - a3;
    }
    if (v6 < a1)
    {
        v7 = a1 * a5 + a2 - a4;
    }
    else
    {
        v7 = a4 * (a2 * a5);
    }
    v8 = (a4 * a4 - a1) * a1;
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        if (v6 < a1)
        {
            v9 += a1 + a2;
        }
        else
        {
            v9 += (a1 + a4) - a1;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 12
11 12
12 14
13 14
14 14
15 14
16 14
17 18
18 18
19 18
20 33
21 33
22 33
23 33
24 33
25 33
26 20
27 20
28 20
29 33
30 34
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
imul %ecx,%r8d
add %edi,%r8d
add %r8d,%eax
mov %edi,%edx
sub %ecx,%edx
imul %esi,%edi
lea (%rdx,%rdi,1),%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = (a4 * a5) + a1;
    v7 = (a1 - a4) + a2 * a1;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 4
7 6
8 5
9 5
10 5
11 5
12 6
13 7
<<<sep_out_sample>>>
mov %r8d,%eax
imul %edi,%eax
add %edi,%eax
add %eax,%edx
add %edx,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%edx
mov %ecx,%eax
sub %r8d,%eax
add %edx,%eax
add %ecx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a2 - a4 - a2;
    }
    v8 = a4 - a5;
    v9 = ((a2 - a2) + a4) + a1;
    v10 = ((a1 * a5) + a1) - a1;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 12
4 12
5 12
6 12
7 12
8 9
9 9
10 12
11 10
12 12
13 13
<<<sep_out_sample>>>
cmp %r8d,%esi
jge e <func1+0xe>
lea (%r8,%rcx,2),%r9d
add %edx,%r9d
jmp 15 <func1+0x15>
mov %edx,%r9d
imul %edi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
imul %edi,%edx
add %edx,%eax
add %ecx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a2 < a5)
    {
        v6 = a4 + a5 + a4 + a3;
    }
    else
    {
        v6 = a3 * a1;
    }
    v7 = a1 * a3;
    v8 = a1 - a1 + (a4 + a2);
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 14
9 14
10 14
11 14
12 14
13 12
14 14
15 13
16 14
17 15
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %r8d,%edx
imul %ecx,%edi
add %r8d,%edi
lea (%rdx,%rcx,2),%eax
lea (%rax,%rdi,1),%eax
imul %esi,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a4 + ((a4 * a1) + a5);
    v7 = a5 * a2;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 4
5 4
6 4
7 6
8 5
9 6
10 7
<<<sep_out_sample>>>
mov %ecx,%r9d
imul %edi,%r9d
lea (%rcx,%rcx,1),%eax
cmp $0x1,%edi
jle 17 <func1+0x17>
mov %r8d,%eax
sub %edx,%eax
imul %ecx,%eax
mov %edx,%r10d
imul %esi,%r10d
add %ecx,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a4 * a1;
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        if (v8 < a2)
        {
            v7 += a5 * a1;
        }
        else
        {
            v7 += a3 - a4;
        }
    }
    if (v8 < a1)
    {
        v9 = (a5 - a3) * a4;
    }
    else
    {
        v9 = a4 + a4;
    }
    v10 = a4 + a3 * a2;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 23
4 17
5 17
6 19
7 19
8 19
9 25
10 25
11 25
12 26
13 26
14 26
15 26
16 26
17 26
18 26
19 27
<<<sep_out_sample>>>
add %edx,%edi
lea (%r8,%rsi,2),%eax
lea 0x1(%rax,%rdi,1),%edx
imul %r8d,%r8d
lea (%r8,%rcx,2),%eax
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a2 * a3 - a1;
    }
    v8 = a2 - a4;
    v9 = (a4 + (a5 * a5)) + a4;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 10
5 10
6 11
7 12
<<<sep_out_sample>>>
mov $0x0,%eax
mov %edx,%r9d
imul %edx,%r9d
test %esi,%esi
cmovg %r9d,%eax
add %edx,%edi
add %esi,%edi
add %edi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
add $0x2,%edx
imul %edx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (v6 < a2)
    {
        v6 = a3 * a3;
    }
    else
    {
        v6 = a4 - a4;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        if (a4 < a5)
        {
            v7 += a3 + (a4 + a1);
        }
        else
        {
            v7 += a2 + a3 - a5;
        }
    }
    v9 = a2 + (a2 * a3) + a2;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 6
3 6
4 6
5 6
6 25
7 25
8 25
9 25
10 25
11 24
12 24
13 25
14 26
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %r8d,%edx
lea 0x1(%rcx,%rdx,1),%eax
imul %r8d,%edi
imul %edi,%esi
sub %esi,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (a1 < a4)
        {
            v6 += (a3 - a3) * a3;
        }
        else
        {
            v6 += a3 * a4 + a1;
        }
    }
    v8 = a4 - a5 * a1 * a2;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 16
6 16
7 16
8 17
9 18
<<<sep_out_sample>>>
cmp %edi,%edx
jge 17 <func1+0x17>
mov %ecx,%r10d
imul %esi,%r10d
lea (%rdx,%rdx,1),%r9d
sub %esi,%r9d
sub %r8d,%r9d
jmp 35 <func1+0x35>
mov %r8d,%r10d
imul %r8d,%r10d
add %edi,%r10d
sub %r8d,%r10d
mov $0x1,%r9d
sub %esi,%r9d
imul %ecx,%r9d
imul %esi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
mov %r8d,%edi
sub %ecx,%edi
imul %edx,%r8d
lea (%rdi,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a3 < a1)
    {
        v6 = a4 * a2;
    }
    else
    {
        v6 = a1 + a5 * a5 - a5;
    }
    if (a3 < a1)
    {
        v7 = a3 + a3 - a2 - a5;
    }
    else
    {
        v7 = (a4 - a4 * a2) * a2;
    }
    if (a4 < a4)
    {
        v8 = a4 * a1 + a5;
    }
    else
    {
        v8 = a5 - a4 + a3 * a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 14
6 14
7 14
8 14
9 10
10 10
11 10
12 10
13 18
14 18
15 18
16 18
17 28
18 28
19 28
20 28
21 28
22 28
23 26
24 26
25 26
26 26
27 28
28 29
<<<sep_out_sample>>>
cmp %esi,%edi
jge e <func1+0xe>
lea (%rsi,%rdx,1),%eax
sub %edi,%eax
sub %r8d,%eax
jmp 18 <func1+0x18>
mov %edx,%eax
imul %r8d,%eax
sub %esi,%eax
sub %edi,%eax
lea (%rcx,%rsi,1),%r9d
add %r9d,%edi
add %edi,%edx
add %esi,%edx
add %edx,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
imul %ecx,%esi
sub %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += (a3 - a3) - a5;
    }
    if (a1 < a2)
    {
        v8 = a2 + a3 - a1 - a5;
    }
    else
    {
        v8 = a3 * a5 - a2 - a1;
    }
    v9 = (a5 - (a4 + a5)) * a2;
    v10 = a4 + a2;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 15
8 15
9 15
10 15
11 18
12 19
13 19
14 19
15 19
16 19
17 19
18 17
19 19
20 20
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
lea 0x1(%rcx,%rax,1),%eax
lea (%rsi,%rdi,2),%edx
add %edx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a2 * a2;
    }
    if (a5 < a5)
    {
        v8 = (a2 + a1 + a4) + a3;
    }
    else
    {
        v8 = (a1 + a1) + a2 + a5;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        if (a5 < a5)
        {
            v9 += (a5 + a3) + a5;
        }
        else
        {
            v9 += (a1 - a3) * a3;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 29
2 29
3 29
4 29
5 15
6 15
7 29
8 30
<<<sep_out_sample>>>
mov %esi,%r9d
imul %esi,%r9d
add %ecx,%r9d
sub %esi,%r9d
cmp %r8d,%esi
jge 24 <func1+0x24>
mov %ecx,%eax
imul %edx,%eax
mov %esi,%r10d
sub %eax,%r10d
mov %r10d,%eax
add %edx,%eax
jmp 2e <func1+0x2e>
mov %ecx,%eax
sub %esi,%eax
add %r8d,%eax
imul %esi,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = (a4 + a2 * a2) - a2;
    if (a2 < a5)
    {
        v7 = a2 - a4 * a3 + a3;
    }
    else
    {
        v7 = a2 * (a4 - a2 + a5);
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        if (a4 < a2)
        {
            v8 += a3 - a5;
        }
        else
        {
            v8 += a2 + a4 + a1;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 5
6 5
7 7
8 7
9 7
10 7
11 7
12 7
13 7
14 11
15 11
16 11
17 11
18 25
19 25
20 25
21 25
22 25
23 25
24 26
<<<sep_out_sample>>>
cmp $0x1,%esi
jle 19 <func1+0x19>
mov %edi,%eax
imul %edi,%eax
imul %r8d,%eax
mov %esi,%r9d
sub %eax,%r9d
mov %r9d,%eax
jmp 21 <func1+0x21>
mov %esi,%eax
imul %esi,%eax
imul %ecx,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a5 + a4;
    }
    if (v7 < a2)
    {
        v8 = a2 - (a1 * a1) * a5;
    }
    else
    {
        v8 = a2 * a2 * a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 11
8 11
9 11
10 15
11 15
12 15
13 17
14 17
15 17
16 17
17 17
18 18
<<<sep_out_sample>>>
cmp %edi,%ecx
jge c <func1+0xc>
mov %ecx,%r10d
sub %edx,%r10d
jmp 17 <func1+0x17>
lea (%rdx,%rdi,1),%r10d
imul %r8d,%r10d
add %edi,%r10d
cmp %r8d,%edx
jle 2a <func1+0x2a>
lea -0x1(%r8),%r9d
imul %ecx,%r9d
imul %r8d,%r9d
jmp 35 <func1+0x35>
mov %ecx,%r9d
imul %esi,%r9d
imul %r8d,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a4 < a1)
    {
        v6 = a4 - a3;
    }
    else
    {
        v6 = (a3 + a1) * a5 + a1;
    }
    if (a5 < a3)
    {
        v7 = a5 * (a5 * a4 - a4);
    }
    else
    {
        v7 = (a4 * a2) * a5;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 12
10 12
11 14
12 14
13 14
14 14
15 18
16 18
17 18
18 20
19 20
20 20
21 20
22 20
23 20
24 21
<<<sep_out_sample>>>
lea (%rcx,%rcx,1),%eax
lea (%rcx,%rdx,1),%edi
add %esi,%edi
add %edi,%r8d
add %r8d,%ecx
add %eax,%ecx
add %eax,%esi
sub %edx,%esi
lea 0x1(%rcx,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a4 + a4;
    v7 = a4 + a4 + a2 - a3;
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += (a3 * a3) + a5;
    }
    v10 = a4 - a1;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 12
3 12
4 12
5 12
6 12
7 5
8 5
9 12
10 13
<<<sep_out_sample>>>
lea 0x1(%rsi),%eax
imul %ecx,%eax
add %edi,%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
sub %esi,%edi
sub %esi,%edi
imul %r8d,%edi
lea 0x1(%rax,%rdi,1),%eax
add %r8d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a2 < a2)
    {
        v6 = a4 * a3;
    }
    else
    {
        v6 = a5 * ((a1 - a2) - a2);
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        if (v6 < a2)
        {
            v7 += a5 * a1 * a4;
        }
        else
        {
            v7 += a4 - (a2 * a1);
        }
    }
    if (a1 < a1)
    {
        v9 = a1 + a3 - a3;
    }
    else
    {
        v9 = a4 + a2 + a5 - a2;
    }
    v10 = ((a4 * a2) + a4) - a3;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 32
2 32
3 33
4 33
5 33
6 33
7 10
8 10
9 10
10 33
11 30
12 33
13 34
<<<sep_out_sample>>>
mov %ecx,%eax
imul %esi,%eax
imul %r8d,%eax
add %esi,%eax
add %edi,%eax
add %eax,%edx
add %esi,%edx
lea (%rsi,%rdi,1),%r9d
lea (%rdx,%r8,2),%eax
lea 0x1(%r9,%rax,1),%edx
imul %ecx,%edi
imul %edi,%esi
sub %ecx,%esi
lea (%rdx,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = (a2 + a1 + a5) - a4;
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += (a4 + a2) * a3;
    }
    v9 = (a4 * a1 * a2) - a4;
    v10 = a4 * a2 * a5 + a2;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 11
5 12
6 12
7 12
8 4
9 4
10 12
11 10
12 10
13 10
14 12
15 13
<<<sep_out_sample>>>
cmp %r8d,%edi
jge d <func1+0xd>
mov %r8d,%eax
imul %esi,%eax
jmp 15 <func1+0x15>
lea 0x1(%rcx),%eax
imul %edi,%eax
sub %ecx,%eax
lea (%rdi,%rdx,1),%r9d
add %r9d,%esi
add %esi,%r8d
add %ecx,%r8d
add %eax,%r8d
mov %ecx,%eax
sub %edi,%eax
add %edx,%eax
sub %edi,%eax
add %r8d,%eax
imul %edx,%ecx
add %ecx,%r9d
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a1 < a5)
    {
        v6 = a5 * a2;
    }
    else
    {
        v6 = a4 * a1 + a1 - a4;
    }
    v7 = a4 - a1 + a3 - a1;
    v8 = (a1 + a3) + (a3 * a4);
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 13
10 14
11 14
12 14
13 14
14 12
15 12
16 12
17 12
18 14
19 13
20 13
21 14
22 15
<<<sep_out_sample>>>
lea (%rcx,%rcx,1),%eax
cmp %edi,%esi
jge 15 <func1+0x15>
mov %r8d,%r9d
sub %edi,%r9d
mov %esi,%eax
imul %esi,%eax
add %r9d,%eax
add %edx,%edi
add %edi,%esi
add %r8d,%esi
add %esi,%ecx
add %ecx,%eax
imul %edx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a2 < a1)
    {
        v6 = a5 - a1 + a2 * a2;
    }
    else
    {
        v6 = a4 + a4;
    }
    if (a2 < a2)
    {
        v7 = a4 - a1 * a3 + a4;
    }
    else
    {
        v7 = ((a3 * a5) + a5) - a5;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 6
7 6
8 6
9 20
10 20
11 20
12 20
13 20
14 18
15 20
16 21
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
add %ecx,%esi
mov %edx,%eax
sub %edi,%eax
imul %ecx,%eax
add %esi,%eax
sub %r8d,%ecx
add %ecx,%edx
imul %edx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a3 < a3)
    {
        v6 = (a1 - (a3 + a4)) - a2;
    }
    else
    {
        v6 = (a3 - a1) * a4;
    }
    v7 = a5 * (a3 + (a4 - a5));
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 13
2 13
3 13
4 13
5 10
6 10
7 10
8 13
9 12
10 12
11 12
12 13
13 14
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
lea (%rax,%rsi,1),%ecx
lea (%rcx,%r8,2),%ecx
add %ecx,%eax
add %r8d,%edx
sub %edi,%edx
add %edx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a5 - a3 - a4 + a3;
    v7 = a1 + a3;
    v8 = ((a3 + a5) - a1) + a2;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 5
2 7
3 7
4 7
5 6
6 6
7 6
8 7
9 8
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
lea 0x1(%rcx,%rax,1),%eax
lea (%rax,%rsi,2),%eax
add %r8d,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a4 * a4 + a1;
    }
    v8 = (a5 + (a2 + a2)) - a5;
    v9 = a2 + a5;
    v10 = 0;
    for (v11 = 0; v11++; v11<a3)
    {
        v10 += a3 + a3;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 16
4 16
5 16
6 10
7 16
8 17
<<<sep_out_sample>>>
push %rbx
mov %r8d,%r9d
imul %edi,%r9d
lea (%rsi,%rdx,1),%ebx
test %edi,%edi
jg 16 <func1+0x16>
mov %edx,%ebx
sub %r8d,%ebx
sub %esi,%ebx
lea (%r8,%rcx,2),%r11d
imul %edx,%r11d
cmp %esi,%r9d
jge 2d <func1+0x2d>
lea (%rdx,%rsi,1),%r10d
imul %edi,%r10d
jmp 38 <func1+0x38>
lea (%rdx,%rdx,1),%r10d
imul %edx,%r10d
sub %r8d,%r10d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
add %ebx,%eax
add %r11d,%eax
add %r10d,%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a5 * a1;
    if (v7 < a1)
    {
        v7 = a2 + a3;
    }
    else
    {
        v7 = (a3 - a5) - a2;
    }
    v8 = (a5 + a4 + a4) * a3;
    if (v6 < a2)
    {
        v9 = (a3 + a2) * a1;
    }
    else
    {
        v9 = (a3 + a3) * a3 - a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 4
3 4
4 7
5 5
6 5
7 11
8 11
9 11
10 13
11 13
12 14
13 14
14 16
15 16
16 16
17 20
18 20
19 20
20 22
21 22
22 22
23 22
24 22
25 22
26 22
27 22
28 23
29 23
<<<sep_out_sample>>>
cmp %r8d,%ecx
jge f <func1+0xf>
lea (%rsi,%rcx,1),%eax
sub %edi,%eax
imul %edx,%eax
jmp 1f <func1+0x1f>
mov %edx,%eax
imul %esi,%eax
mov %r8d,%r9d
sub %eax,%r9d
mov %r9d,%eax
add %esi,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a4 < a5)
    {
        v6 = (a2 + a4 - a1) * a3;
    }
    else
    {
        v6 = a5 - a3 * a2 + a2;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a4 + a1 + a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 10
11 10
12 10
13 17
14 17
15 17
16 17
17 17
18 18
<<<sep_out_sample>>>
lea (%rcx,%r8,1),%eax
cmp %edx,%esi
jge 16 <func1+0x16>
mov %r8d,%r9d
imul %edx,%r9d
lea (%rsi,%r8,1),%eax
add %r9d,%eax
test %edx,%edx
jle 30 <func1+0x30>
mov %ecx,%r9d
imul %edx,%r9d
imul %edx,%r9d
mov %esi,%r10d
sub %r9d,%r10d
mov %r10d,%r9d
jmp 3f <func1+0x3f>
mov %r8d,%r9d
imul %edi,%r9d
add $0x1,%r9d
imul %ecx,%r9d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %ecx,%r8d
add %r8d,%eax
add %r9d,%eax
sub %ecx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a2 < a3)
    {
        v6 = a5 * a3 + (a2 + a5);
    }
    else
    {
        v6 = a4 + a5;
    }
    if (v7 < a3)
    {
        v7 = a2 - (a3 * (a4 * a3));
    }
    else
    {
        v7 = (a5 * a1) * a4 + a4;
    }
    if (a5 < a5)
    {
        v8 = a1 - a4 + a1 - a4;
    }
    else
    {
        v8 = a1 - a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 6
7 6
8 12
9 12
10 14
11 14
12 14
13 14
14 14
15 14
16 14
17 18
18 18
19 18
20 18
21 28
22 28
23 28
24 28
25 28
26 28
27 26
28 28
29 29
<<<sep_out_sample>>>
push %rbx
mov %edi,%r11d
imul %edi,%r11d
mov %r8d,%r10d
sub %esi,%r10d
cmp %r8d,%edi
jle 1c <func1+0x1c>
mov %esi,%r9d
imul %edi,%r9d
jmp 29 <func1+0x29>
mov %ecx,%r9d
imul %ecx,%r9d
lea (%rsi,%rcx,1),%ebx
sub %ebx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a1 * a1;
    v7 = a5 - a2;
    if (a5 < a1)
    {
        v8 = a2 * a1;
    }
    else
    {
        v8 = a4 * a4 - (a2 + a4);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 2
2 4
3 4
4 5
5 5
6 6
7 6
8 8
9 8
10 8
11 12
12 12
13 12
14 12
15 14
16 14
17 14
18 14
19 14
20 14
21 14
22 15
23 15
<<<sep_out_sample>>>
mov %ecx,%eax
sub %edx,%eax
mov %esi,%r9d
sub %ecx,%r9d
test %edi,%edi
cmovg %eax,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
sub %edi,%r8d
imul %r8d,%esi
imul %esi,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (v6 < a1)
    {
        v6 = a4 - a3;
    }
    else
    {
        v6 = a2 - a4;
    }
    v7 = ((a5 - a1) * a2) * a3;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 6
6 6
7 13
8 13
9 13
10 13
11 13
12 12
13 12
14 12
15 13
16 14
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
mov %edi,%r9d
sub %r8d,%r9d
add %r9d,%eax
sub %edx,%r8d
imul %r8d,%edi
add %edi,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a1 - a5 + (a4 - a4);
    v7 = a2 - ((a3 - a5) * a1);
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 4
7 6
8 5
9 5
10 5
11 6
12 7
<<<sep_out_sample>>>
mov %r8d,%eax
sub %edi,%eax
add $0x1,%eax
imul %edx,%eax
lea (%rdi,%r8,1),%r9d
cmp $0x1,%ecx
jle 21 <func1+0x21>
mov %ecx,%r9d
sub %esi,%r9d
sub %edi,%r9d
imul %esi,%r9d
lea 0x1(%r9,%rdi,1),%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a2 * a4;
    }
    v8 = a3 * (a5 - a1) + a3;
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        if (v9 < a2)
        {
            v9 += a4 * a1;
        }
        else
        {
            v9 += a2 - a5 * a3;
        }
    }
    if (v7 < a4)
    {
        v11 = (a4 - a2 - a1) * a2;
    }
    else
    {
        v11 = a5 + (a1 + a1) - a1;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 9
4 9
5 28
6 22
7 22
8 24
9 24
10 24
11 24
12 30
13 30
14 30
15 30
16 30
17 30
18 31
<<<sep_out_sample>>>
mov %r8d,%r9d
sub %esi,%r9d
cmp %edi,%r8d
jl 18 <func1+0x18>
mov %edx,%r9d
sub %ecx,%r9d
sub %esi,%r9d
imul %r8d,%r9d
lea (%rdi,%r8,1),%eax
sub %esi,%eax
add %ecx,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a5 < a1)
    {
        v6 = a5 - a2;
    }
    else
    {
        v6 = (a3 - a4 - a2) * a5;
    }
    v7 = a2 - a2;
    if (a4 < a4)
    {
        v8 = (a4 - a4) + a1 + a2;
    }
    else
    {
        v8 = a4 + (a1 + a5 - a2);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 6
2 6
3 4
4 4
5 10
6 10
7 10
8 10
9 19
10 19
11 19
12 21
13 21
14 21
15 21
16 21
17 21
18 22
<<<sep_out_sample>>>
mov %r8d,%eax
cmp %edx,%edi
jl 10 <func1+0x10>
lea 0x1(%rcx),%eax
imul %r8d,%eax
add %esi,%eax
add %edi,%edx
add %esi,%edx
add %r8d,%edx
add %edx,%ecx
add %ecx,%eax
add %esi,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a1 < a3)
    {
        v6 = a3 + a5 - a3;
    }
    else
    {
        v6 = a2 + ((a5 * a4) + a5);
    }
    v7 = a2 + (a2 - a2) + a5;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 4
3 4
4 10
5 10
6 10
7 13
8 13
9 13
10 13
11 13
12 12
13 13
14 14
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += (a4 - a2) + a4;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += a2 * a5;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a3)
    {
        if (a4 < a2)
        {
            v10 += a1 * a4 + a5;
        }
        else
        {
            v10 += a1 + a2 + a4;
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 26
2 26
3 26
4 26
5 27
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (a5 < a5)
        {
            v6 += a5 + (a5 * a2);
        }
        else
        {
            v6 += a3 * (a5 - a4);
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += a1 * a4 - a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 21
5 22
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
add %r8d,%ecx
lea (%rdi,%rdx,2),%edx
sub %esi,%edx
lea 0x1(%rcx,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a3 + a3 - a2 + a1;
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        if (a1 < a5)
        {
            v7 += a3 + a5 * a3;
        }
        else
        {
            v7 += (a3 * a5) * a3;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 4
6 4
7 17
8 18
<<<sep_out_sample>>>
lea (%rsi,%r8,1),%eax
imul %esi,%eax
add %edx,%edi
add %edi,%esi
add %r8d,%esi
add %ecx,%esi
add %esi,%eax
lea (%rcx,%r8,2),%ecx
imul %ecx,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a1 - a1;
    v7 = (a2 * a2) + a2 * a5;
    v8 = a3 * (a4 + a5 + a5);
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 5
2 5
3 7
4 7
5 7
6 7
7 7
8 6
9 6
10 7
11 8
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %edx,%r8d
lea 0x1(%rcx,%r8,1),%eax
lea (%rsi,%rcx,2),%edx
imul %edx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a3 - a5 + a5;
    }
    v8 = (a4 + a4 + a2) * a2;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 9
6 9
7 10
8 11
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
lea 0x1(%rcx,%rax,1),%eax
imul %esi,%edi
sub %edi,%r8d
add %esi,%r8d
add %r8d,%eax
sub %esi,%ecx
add %ecx,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (a3 < a3)
        {
            v6 += a4 * a4 + a1;
        }
        else
        {
            v6 += a2 * a4 - a2;
        }
    }
    v8 = (a5 - a2 * a1) + a2;
    v9 = a3 + (a4 - a2);
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 18
5 16
6 16
7 16
8 18
9 17
10 17
11 18
12 19
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
lea 0x1(%rcx,%rax,1),%r9d
sub %edx,%ecx
lea (%rcx,%rsi,2),%eax
add %r9d,%eax
imul %edx,%edi
sub %edi,%r8d
imul %r8d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (a2 < a4)
        {
            v6 += a5 * a2;
        }
        else
        {
            v6 += a2 - a2 - a4;
        }
    }
    v8 = a4 - a3 + a2 + a2;
    v9 = (a5 - (a1 * a3)) * a3;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 18
5 16
6 16
7 18
8 17
9 17
10 17
11 18
12 19
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
lea 0x1(%rcx,%rax,1),%r9d
imul %r8d,%ecx
imul %ecx,%edx
mov %edi,%eax
sub %edx,%eax
add %r9d,%eax
add %esi,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (a3 < a4)
        {
            v6 += a5 - a5 * a5;
        }
        else
        {
            v6 += a3 + a2 - a1;
        }
    }
    v8 = a1 - (a3 * (a4 * a5));
    v9 = a2 + a1;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 18
5 16
6 16
7 16
8 16
9 18
10 17
11 18
12 19
<<<sep_out_sample>>>
lea 0x1(%rdi),%r9d
lea (%rdx,%r9,1),%eax
add %eax,%esi
add %r8d,%esi
lea 0x1(%r8),%eax
imul %eax,%edx
add %esi,%edx
imul %r8d,%edi
add %edx,%edi
imul %ecx,%r9d
sub %r8d,%r9d
lea (%rdi,%r9,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a3 * a5 + a3 - a4;
    v7 = a1 * a5;
    v8 = a4 + a1 * a4 - a5;
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        if (v9 < a3)
        {
            v9 += a1 - (a4 - a1);
        }
        else
        {
            v9 += a4 - a4 + a5;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 19
3 19
4 19
5 4
6 4
7 19
8 5
9 19
10 6
11 6
12 19
13 20
<<<sep_out_sample>>>
lea (%rsi,%r8,2),%eax
sub %ecx,%eax
cmp %ecx,%r8d
jge 1a <func1+0x1a>
mov %ecx,%r9d
sub %r8d,%r9d
sub %esi,%r9d
imul %esi,%r9d
jmp 21 <func1+0x21>
mov %ecx,%r9d
imul %edx,%r9d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a2 - (a4 - a5) + a5;
    if (a5 < a4)
    {
        v7 = (a4 - a5 - a2) * a2;
    }
    else
    {
        v7 = a4 * a3;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 5
4 5
5 7
6 7
7 7
8 7
9 7
10 11
11 11
12 13
13 13
14 13
15 13
16 13
17 13
18 14
<<<sep_out_sample>>>
cmp $0x1,%esi
jle 13 <func1+0x13>
mov %r8d,%eax
imul %ecx,%eax
imul %edx,%eax
sub %r8d,%eax
jmp 19 <func1+0x19>
lea (%r8,%rdi,1),%eax
sub %ecx,%eax
mov %edx,%r9d
sub %ecx,%r9d
lea (%r9,%rdi,2),%r9d
add %r9d,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (v6 < a1)
        {
            v6 += a3 + a2;
        }
        else
        {
            v6 += a4 * (a3 + a4);
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += (a5 + a3) * a5;
    }
    if (v9 < a2)
    {
        v10 = ((a5 * a4) * a3) - a5;
    }
    else
    {
        v10 = a5 + a1 - a4;
    }
    v11 = (a1 - (a4 - a3)) + a1;
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 23
4 23
5 23
6 23
7 23
8 27
9 27
10 29
11 29
12 29
13 30
14 30
15 30
16 30
17 30
18 30
19 31
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
imul %edx,%ecx
imul %esi,%ecx
add %ecx,%r8d
add %r8d,%eax
mov %esi,%ecx
sub %edx,%ecx
add %ecx,%eax
mov %esi,%edx
imul %edi,%edx
add %edx,%eax
sub %esi,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a2 * (a3 * a4) + a5;
    v7 = (a4 - a4) + a2 - a3;
    v8 = a2 * a1;
    if (a3 < a3)
    {
        v9 = a2 - (a4 * a5) + a3;
    }
    else
    {
        v9 = a1 - a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 15
2 15
3 15
4 15
5 4
6 4
7 4
8 15
9 5
10 5
11 15
12 6
13 6
14 15
15 13
16 15
17 16
<<<sep_out_sample>>>
cmp %edx,%edi
jge 14 <func1+0x14>
mov %esi,%eax
sub %edi,%eax
mov %esi,%r9d
imul %ecx,%r9d
sub %r9d,%eax
jmp 25 <func1+0x25>
mov %edx,%eax
imul %esi,%eax
imul %edi,%eax
mov %edx,%r10d
sub %eax,%r10d
mov %r10d,%eax
add %edi,%edx
add %edx,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a2 * a2;
    }
    if (a1 < a3)
    {
        v8 = (a2 - a1) - (a2 * a4);
    }
    else
    {
        v8 = a3 - (a3 * a2) * a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 11
8 11
9 15
10 15
11 15
12 15
13 15
14 15
15 17
16 17
17 17
18 17
19 17
20 18
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
add %ecx,%r8d
lea (%rdi,%rdi,1),%eax
imul %edx,%eax
sub %edi,%eax
add %r8d,%eax
sub %ecx,%esi
imul %ecx,%esi
add %esi,%eax
sub %edx,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = (a1 + a1) * a3 - a1;
    v7 = (a2 - a4) * a4;
    v8 = a4 - a3;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 7
2 7
3 7
4 7
5 4
6 4
7 4
8 7
9 5
10 5
11 7
12 6
13 7
14 8
<<<sep_out_sample>>>
mov %edi,%r9d
imul %ecx,%r9d
imul %r8d,%r9d
imul %ecx,%r9d
mov %esi,%eax
sub %edx,%eax
add %r8d,%eax
sub %edi,%eax
lea (%rcx,%rdi,1),%r10d
lea (%rdi,%rdx,1),%r11d
cmp %edx,%ecx
cmovge %r11d,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = (a1 * a4 * a5) * a4;
    v7 = (a2 - a3) + a5 - a1;
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += (a3 * a3) + a2;
    }
    if (a4 < a3)
    {
        v10 = a4 + a1;
    }
    else
    {
        v10 = a1 + a3 + a2 - a2;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 5
6 5
7 5
8 5
9 13
10 13
11 13
12 13
13 19
14 19
15 19
16 19
17 19
18 19
19 19
20 20
<<<sep_out_sample>>>
mov $0x2,%r10d
sub %edx,%r10d
imul %edx,%r10d
lea (%r8,%rdx,2),%r9d
cmp %r8d,%ecx
jl 20 <func1+0x20>
mov %r8d,%eax
imul %edx,%eax
lea (%rax,%rcx,2),%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a3 - (a3 * a3) + a3;
    if (a4 < a5)
    {
        v7 = a5 + a3 + a3;
    }
    else
    {
        v7 = (a5 * a3) + a4 + a4;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 7
5 5
6 5
7 11
8 11
9 11
10 13
11 13
12 13
13 13
14 13
15 13
16 14
<<<sep_out_sample>>>
cmp %edx,%ecx
jge 12 <func1+0x12>
lea (%rdi,%rdx,1),%eax
mov %ecx,%r9d
sub %eax,%r9d
sub %edx,%r9d
jmp 19 <func1+0x19>
lea (%rdi,%rsi,2),%r9d
add %r8d,%r9d
mov $0x2,%eax
sub %ecx,%eax
imul %edx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a4 < a3)
    {
        v6 = a4 - (a1 + a3) - a3;
    }
    else
    {
        v6 = ((a2 + a2) + a1) + a5;
    }
    v7 = a5 - a5;
    v8 = (a3 - a3 * a4) + a3;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 13
11 13
12 13
13 14
14 14
15 14
16 14
17 14
18 14
19 15
<<<sep_out_sample>>>
test %ecx,%ecx
jle f <func1+0xf>
mov %esi,%eax
sub %edx,%eax
add %esi,%eax
imul %edx,%eax
jmp 1a <func1+0x1a>
mov %r8d,%eax
imul %esi,%eax
sub %edx,%eax
imul %edi,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (a2 < a4)
        {
            v6 += a3 * a4;
        }
        else
        {
            v6 += a2 - (a5 - a1);
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        if (a3 < a2)
        {
            v8 += a2 * a1 + a5;
        }
        else
        {
            v8 += a3 - a2;
        }
    }
    if (v8 < a4)
    {
        v10 = a3 * (a2 - (a3 - a2));
    }
    else
    {
        v10 = ((a5 * a2) - a3) * a1;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 28
2 28
3 30
4 30
5 30
6 30
7 30
8 34
9 34
10 34
11 34
12 36
13 36
14 36
15 36
16 36
17 37
<<<sep_out_sample>>>
test %edx,%edx
jle c <func1+0xc>
mov %edx,%eax
sub %esi,%eax
add %eax,%eax
jmp 14 <func1+0x14>
lea 0x1(%rsi),%eax
imul %edx,%eax
sub %ecx,%eax
lea 0x2(%rdi,%rdx,1),%edx
add %edx,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a4 * a3;
    }
    if (v6 < a3)
    {
        v8 = (a3 + a3 - a2) - a2;
    }
    else
    {
        v8 = a3 + a3 * a2 - a4;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        v9 += a4 + (a1 * a3);
    }
    v11 = 0;
    for (v12 = 0; v12++; v12<a3)
    {
        v11 += a4 + (a4 + a2);
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 15
8 15
9 15
10 27
11 27
12 27
13 27
14 27
15 28
<<<sep_out_sample>>>
lea (%rcx,%rsi,2),%r9d
mov %edi,%eax
cmp %r8d,%edx
jl 16 <func1+0x16>
mov %esi,%eax
imul %r8d,%eax
imul %edx,%eax
add %esi,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a2 + (a4 + a2);
    if (a3 < a5)
    {
        v7 = a1 - a2 + a2;
    }
    else
    {
        v7 = a2 + a2 * a5 * a3;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 7
3 5
4 5
5 11
6 11
7 11
8 11
9 13
10 13
11 13
12 13
13 13
14 13
15 14
<<<sep_out_sample>>>
lea -0x1(%rsi,%rcx,1),%r9d
imul %edx,%r9d
mov %esi,%eax
imul %edx,%eax
add %ecx,%eax
add %edx,%eax
add %r9d,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a4 * a2;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        if (a1 < a4)
        {
            v8 += a3 + a5;
        }
        else
        {
            v8 += (a4 + a4) * a1;
        }
    }
    v10 = (a2 + a4) * a3 - a3;
    v11 = a2 * a3 + a4 + a3;
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 22
4 22
5 22
6 22
7 23
8 23
9 23
10 23
11 23
12 23
13 24
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
lea 0x1(%rcx,%r8,1),%eax
mov %esi,%ecx
sub %edi,%ecx
add %ecx,%edx
imul %edx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (v7 < a3)
        {
            v6 += (a4 - a1) + a3;
        }
        else
        {
            v6 += a5 * a2;
        }
    }
    v8 = (a3 - (a1 - a2)) * a2;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 16
6 16
7 16
8 16
9 17
10 18
<<<sep_out_sample>>>
mov %esi,%r9d
sub %ecx,%r9d
cmp %edi,%edx
jge 16 <func1+0x16>
mov %r8d,%eax
imul %ecx,%eax
sub %esi,%eax
sub %edi,%eax
jmp 1c <func1+0x1c>
lea (%rdx,%rcx,2),%eax
sub %r8d,%eax
lea (%rdx,%rcx,1),%r10d
lea (%rsi,%rcx,1),%r11d
cmp %edi,%r9d
cmovge %r11d,%r10d
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
add %r9d,%eax
add %r10d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a2 - a4;
    if (a3 < a1)
    {
        v7 = (a5 * a4 - a2) - a1;
    }
    else
    {
        v7 = a3 + (a4 + a4) - a5;
    }
    if (v6 < a1)
    {
        v8 = a3 + a4;
    }
    else
    {
        v8 = (a2 + a4) + a4 - a4;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        v9 += a4 + (a4 - a4);
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 5
4 5
5 7
6 7
7 7
8 7
9 7
10 11
11 11
12 15
13 15
14 15
15 15
16 26
17 26
18 26
19 26
20 26
21 26
22 26
23 27
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
lea (%r8,%rcx,1),%eax
add %edi,%ecx
imul %edx,%ecx
add %esi,%ecx
add %ecx,%eax
mov %edi,%ecx
sub %esi,%ecx
mov %ecx,%esi
imul %edx,%esi
add %esi,%eax
imul %edx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = (a3 * (a4 + a1)) + a2;
    v7 = (a1 - a2) * a3;
    v8 = a1 * a3;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 7
2 7
3 7
4 7
5 4
6 4
7 4
8 7
9 5
10 5
11 5
12 5
13 7
14 6
15 7
16 8
<<<sep_out_sample>>>
lea (%rdx,%r8,1),%r9d
mov %r8d,%eax
imul %r8d,%eax
add %r9d,%eax
mov %edx,%r9d
cmp %eax,%edx
jg 22 <func1+0x22>
mov %esi,%r9d
sub %edx,%r9d
imul %ecx,%r9d
sub %edx,%r9d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %ecx,%r8d
add %r8d,%eax
add %r9d,%eax
add %ecx,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = (a3 + a5) + a5 * a5;
    if (v6 < a3)
    {
        v7 = a2 - (a2 - a3);
    }
    else
    {
        v7 = a4 * (a2 - a3) - a3;
    }
    v8 = a4 + a3;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 7
6 5
7 5
8 11
9 11
10 11
11 11
12 14
13 14
14 14
15 14
16 14
17 14
18 13
19 14
20 15
<<<sep_out_sample>>>
mov %ecx,%eax
sub %r8d,%eax
lea (%rdi,%rdx,1),%r9d
test %r8d,%r8d
cmovle %r9d,%eax
add %r9d,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%ecx
add %ecx,%eax
lea (%rax,%rdx,2),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (a3 < a1)
        {
            v6 += a1 + a5 - a3;
        }
        else
        {
            v6 += (a1 * a4) * a5;
        }
    }
    if (v8 < a5)
    {
        v8 = a4 - a5;
    }
    else
    {
        v8 = a1 + a3;
    }
    v9 = ((a2 + a3) - a2) + a3;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 18
5 18
6 25
7 25
8 25
9 25
10 25
11 26
<<<sep_out_sample>>>
mov $0x1,%r9d
sub %ecx,%r9d
imul %esi,%r9d
lea (%rdx,%rdi,1),%eax
lea (%r9,%rdx,1),%r9d
mov %ecx,%r10d
imul %ecx,%r10d
cmp %r9d,%ecx
cmovg %r10d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = (a2 - (a2 * a4)) + a3;
    if (v6 < a4)
    {
        v7 = a4 * a4;
    }
    else
    {
        v7 = a3 + a1;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 11
5 5
6 7
7 7
8 7
9 7
10 13
11 13
12 13
13 13
14 13
15 13
16 14
<<<sep_out_sample>>>
test %ecx,%ecx
jle d <func1+0xd>
mov %edi,%r10d
imul %ecx,%r10d
jmp 14 <func1+0x14>
mov %edx,%r10d
imul %edx,%r10d
cmp %esi,%r8d
jge 2b <func1+0x2b>
mov $0x1,%r9d
sub %ecx,%r9d
imul %r8d,%r9d
add %esi,%r9d
jmp 3b <func1+0x3b>
mov %r8d,%eax
imul %edx,%eax
mov %ecx,%r9d
sub %eax,%r9d
imul %edx,%r9d
test %edi,%edi
jle 4f <func1+0x4f>
mov %ecx,%r11d
sub %edi,%r11d
imul %ecx,%r11d
imul %esi,%r11d
jmp 56 <func1+0x56>
mov %edx,%r11d
imul %r8d,%r11d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea (%rcx,%r10,1),%eax
add %r9d,%eax
add %r11d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (v6 < a4)
    {
        v6 = a1 * a4;
    }
    else
    {
        v6 = a3 * a3;
    }
    if (a5 < a2)
    {
        v7 = a5 - a5 * a4 + a2;
    }
    else
    {
        v7 = (a4 - (a5 * a3)) * a3;
    }
    if (v8 < a1)
    {
        v8 = (a4 * (a4 - a1)) * a2;
    }
    else
    {
        v8 = a3 * a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 12
9 12
10 14
11 14
12 14
13 14
14 14
15 18
16 18
17 18
18 18
19 18
20 20
21 20
22 22
23 22
24 22
25 22
26 22
27 26
28 26
29 28
30 28
31 28
32 28
33 28
34 28
35 28
36 29
<<<sep_out_sample>>>
cmp %r8d,%esi
jge 16 <func1+0x16>
mov %ecx,%r9d
imul %edx,%r9d
mov %esi,%eax
imul %esi,%eax
add %r9d,%eax
jmp 1d <func1+0x1d>
lea (%rcx,%r8,1),%eax
lea (%rax,%rdi,2),%eax
lea 0x1(%rsi),%r9d
imul %ecx,%r9d
lea 0x1(%rdi,%r9,1),%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a1 * a3 * a4;
    }
    if (a2 < a5)
    {
        v8 = a4 * a3 + (a2 * a2);
    }
    else
    {
        v8 = (a4 + a5 + a1) + a1;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        if (v7 < a1)
        {
            v9 += a1 - a4;
        }
        else
        {
            v9 += (a5 + a3) * a5;
        }
    }
    v11 = a4 + a4 * a2;
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 11
8 11
9 15
10 15
11 29
12 29
13 30
14 30
15 30
16 30
17 30
18 30
19 31
<<<sep_out_sample>>>
test %edi,%edi
jle 10 <func1+0x10>
mov %esi,%eax
imul %esi,%eax
sub %edx,%eax
add %r8d,%eax
jmp 15 <func1+0x15>
mov %esi,%eax
imul %esi,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a3 + a1 - a5;
    }
    if (v6 < a1)
    {
        v8 = (a2 * a2 - a3) + a5;
    }
    else
    {
        v8 = a2 * a2;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a1)
    {
        v9 += a1 * a2 - a3;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 11
8 15
9 15
10 22
11 22
12 22
13 22
14 22
15 23
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %r8d,%edx
add %edx,%ecx
imul %r8d,%r8d
sub %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a3 < a3)
    {
        v6 = a4 * a5;
    }
    else
    {
        v6 = a5 * a5 - a2;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += a4 + a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 10
6 10
7 17
8 18
<<<sep_out_sample>>>
lea (%rcx,%rsi,1),%eax
imul %esi,%eax
imul %edx,%eax
cmp %edx,%esi
jge 19 <func1+0x19>
mov %ecx,%r9d
imul %esi,%r9d
neg %r9d
jmp 25 <func1+0x25>
lea -0x1(%rsi),%r9d
imul %esi,%r9d
imul %r8d,%r9d
lea 0x1(%r9,%rdi,1),%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += (a1 - a4) * a4;
    }
    v8 = (a4 + a2) * a2 * a3;
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        v9 += a5 * a1 - a2;
    }
    if (a2 < a3)
    {
        v11 = a3 - a3 - a4 * a2;
    }
    else
    {
        v11 = a5 * (a2 * a2 - a2);
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 9
4 15
5 15
6 17
7 17
8 17
9 17
10 21
11 21
12 21
13 23
14 23
15 23
16 23
17 23
18 23
19 24
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
sub %r8d,%edi
lea (%rax,%rcx,2),%eax
lea 0x1(%rax,%rdi,1),%eax
imul %r8d,%esi
imul %esi,%r8d
imul %r8d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a1 + (a4 * a2);
    }
    v8 = (a1 - a5) + a4;
    v9 = a5 * (a5 * a2) * a3;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 9
5 9
6 11
7 10
8 10
9 10
10 11
11 12
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
lea 0x1(%rcx),%eax
imul %eax,%r8d
lea (%rsi,%rcx,2),%eax
lea 0x1(%rax,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (a5 < a4)
        {
            v6 += a4 * a5;
        }
        else
        {
            v6 += a4 + a1;
        }
    }
    v8 = (a5 + a5 * a4) + a4;
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        v9 += a3 - (a4 * a5);
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 22
4 16
5 16
6 16
7 22
8 23
<<<sep_out_sample>>>
lea (%rdx,%r8,1),%eax
add %edi,%eax
imul %edi,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (a3 < a4)
        {
            v6 += a1 * a3;
        }
        else
        {
            v6 += a5 + a5 + a4;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += a1 + a4 * a3;
    }
    v10 = ((a3 + a5) + a1) * a1;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 22
5 22
6 22
7 22
8 22
9 23
<<<sep_out_sample>>>
mov %esi,%r9d
imul %r8d,%r9d
imul %esi,%r9d
imul %esi,%r9d
mov %ecx,%r10d
sub %r8d,%r10d
cmp %edi,%ecx
jge 21 <func1+0x21>
lea (%rdx,%r8,1),%eax
lea (%rax,%rdi,2),%r10d
mov %edx,%eax
sub %r8d,%eax
mov %ecx,%r11d
sub %r8d,%r11d
cmp %edi,%r9d
cmovl %eax,%r11d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
add %r9d,%r10d
lea (%r10,%r11,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a2 * (a2 * (a2 * a5));
    if (a4 < a1)
    {
        v7 = (a3 + a5) + (a1 + a1);
    }
    else
    {
        v7 = a4 - a5;
    }
    if (v6 < a1)
    {
        v8 = a3 - a5;
    }
    else
    {
        v8 = a4 - a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 11
6 11
7 5
8 5
9 7
10 7
11 15
12 15
13 15
14 15
15 15
16 15
17 21
18 21
19 21
20 21
21 21
22 21
23 21
24 22
<<<sep_out_sample>>>
mov %r8d,%eax
sub %edi,%eax
cmp %edx,%ecx
jge 13 <func1+0x13>
mov %ecx,%eax
imul %r8d,%eax
imul %r8d,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a5 * (a1 - a2);
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += (a5 * a5) * a4;
    }
    if (a4 < a3)
    {
        v10 = a4 * a5 * a5;
    }
    else
    {
        v10 = a5 - a1;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 20
2 20
3 14
4 14
5 16
6 16
7 16
8 22
9 22
10 22
11 22
12 22
13 23
<<<sep_out_sample>>>
push %rbx
lea 0x1(%rdi),%r10d
imul %r8d,%r10d
mov %r10d,%ebx
sub %edx,%ebx
mov %esi,%r11d
imul %esi,%r11d
add %r8d,%r11d
imul %ecx,%r11d
lea (%rdi,%r8,1),%r9d
cmp %edx,%r8d
jg 32 <func1+0x32>
mov %esi,%r9d
imul %r8d,%r9d
add %ecx,%r9d
sub %edx,%r9d
mov %edi,%eax
cmp %ecx,%r9d
jge 44 <func1+0x44>
sub %r8d,%r10d
lea -0x1(%r10),%eax
imul %r8d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %ebx,%ecx
add %r11d,%ecx
add %ecx,%r9d
add %r9d,%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = (a1 * a5 + a5) - a3;
    v7 = a4 * (a2 * a2 + a5);
    if (a3 < a5)
    {
        v8 = a1 + a5;
    }
    else
    {
        v8 = a4 + a2 * a5 - a3;
    }
    if (v8 < a4)
    {
        v9 = a5 * a1 * a5 - a5;
    }
    else
    {
        v9 = (a5 - a5) * a2 + a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 4
3 4
4 4
5 4
6 5
7 5
8 5
9 5
10 8
11 6
12 6
13 12
14 12
15 12
16 12
17 20
18 14
19 14
20 16
21 16
22 16
23 22
24 22
25 22
26 22
27 22
28 22
29 22
30 22
31 23
32 23
<<<sep_out_sample>>>
mov %esi,%r9d
sub %edi,%r9d
mov %r8d,%r10d
imul %esi,%r10d
sub %r10d,%r9d
mov %edx,%eax
sub %edi,%eax
cmp %ecx,%edi
jle 26 <func1+0x26>
mov %ecx,%eax
imul %edi,%eax
mov %esi,%r11d
sub %eax,%r11d
mov %r11d,%eax
test %edi,%edi
jle 39 <func1+0x39>
mov %r8d,%r10d
imul %ecx,%r10d
add %edi,%r10d
add %edx,%r10d
jmp 46 <func1+0x46>
mov %esi,%r10d
imul %edi,%r10d
sub %r8d,%r10d
sub %edi,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %r9d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a1 * a5;
    }
    v8 = (a2 - a1) - a5 * a2;
    if (a4 < a1)
    {
        v9 = a2 - a4 * a1;
    }
    else
    {
        v9 = a3 - a1;
    }
    if (v10 < a1)
    {
        v10 = (a5 * a4 + a1) + a3;
    }
    else
    {
        v10 = (a2 * a1) - a5 - a1;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 9
4 9
5 9
6 16
7 16
8 10
9 10
10 12
11 12
12 12
13 12
14 12
15 18
16 18
17 20
18 20
19 20
20 20
21 20
22 24
23 24
24 24
25 24
26 26
27 26
28 26
29 26
30 26
31 26
32 26
33 27
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %edx,%r8d
lea (%r8,%rcx,1),%edx
sub %esi,%ecx
lea 0x1(%rdx,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = ((a4 - a4) + a4) - a2;
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a5 + (a4 - a2);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 4
6 10
7 11
<<<sep_out_sample>>>
lea (%rsi,%rdi,2),%eax
add %r8d,%eax
add %eax,%ecx
lea (%rdi,%r8,1),%eax
imul %eax,%r8d
add %edx,%r8d
add %r8d,%ecx
imul %edx,%edi
lea 0x1(%rcx,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = ((a1 + a5) * a5) + a3;
    v7 = a1 * a3;
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += (a4 - a2) - a3;
    }
    v10 = a1 - a3;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 12
2 12
3 12
4 4
5 4
6 4
7 12
8 5
9 12
10 13
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
sub %esi,%r8d
lea (%rax,%r8,2),%r8d
mov %esi,%eax
imul %ecx,%eax
sub %edx,%eax
sub %edi,%eax
add %r8d,%eax
add %ecx,%ecx
sub %ecx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = ((a5 + a5) - a2) - a2;
    v7 = (a2 * a4 - a3) - a1;
    v8 = a2 - (a4 + a4);
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        if (a4 < a1)
        {
            v9 += a4 + a1;
        }
        else
        {
            v9 += (a1 + a5) * a1;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 19
2 19
3 19
4 19
5 4
6 19
7 5
8 5
9 5
10 5
11 19
12 6
13 6
14 19
15 20
<<<sep_out_sample>>>
mov %edi,%eax
imul %esi,%eax
lea (%rax,%rsi,1),%r9d
sub %edi,%r9d
cmp %ecx,%edi
jle 1d <func1+0x1d>
mov %r8d,%r9d
sub %ecx,%r9d
add %r8d,%r9d
imul %edi,%r9d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%eax
lea 0x1(%r9,%rax,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a1 * a2;
    if (a4 < a1)
    {
        v7 = (a5 - a4 + a5) * a1;
    }
    else
    {
        v7 = (a2 * a1 + a2) - a1;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += a3 - a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 11
4 11
5 5
6 5
7 7
8 7
9 7
10 7
11 18
12 18
13 18
14 18
15 18
16 18
17 19
<<<sep_out_sample>>>
push %rbx
mov %ecx,%ebx
imul %ecx,%ebx
sub $0x1,%ebx
imul %r8d,%ebx
mov $0x0,%r9d
cmp %edx,%edi
jl 22 <func1+0x22>
mov %esi,%r9d
imul %edi,%r9d
imul %esi,%r9d
lea (%r8,%r8,1),%r11d
sub %edx,%r11d
imul %edi,%r11d
mov %edx,%r10d
sub %edi,%r10d
cmp %esi,%r8d
jl 3f <func1+0x3f>
lea (%rdi,%rsi,2),%r10d
sub %ecx,%r10d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %ebx,%eax
add %r9d,%eax
add %r11d,%eax
add %r10d,%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a5 < a5)
    {
        v6 = a1 + (a3 - (a3 + a5));
    }
    else
    {
        v6 = a4 * a4 * a5 - a5;
    }
    if (a1 < a3)
    {
        v7 = a2 + (a2 - a2 - a2);
    }
    else
    {
        v7 = a2 * a1 * a2;
    }
    if (a5 < a5)
    {
        v8 = a3 * a2 - a5 + a3;
    }
    else
    {
        v8 = (a5 + a5 - a3) * a1;
    }
    if (a5 < a2)
    {
        v9 = a3 - a1;
    }
    else
    {
        v9 = (a2 + a1 - a4) + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 10
3 10
4 10
5 10
6 14
7 12
8 12
9 18
10 18
11 18
12 26
13 26
14 26
15 30
16 30
17 28
18 28
19 34
20 34
21 36
22 36
23 36
24 36
25 36
26 36
27 36
28 36
29 37
30 37
<<<sep_out_sample>>>
cmp %esi,%r8d
jge e <func1+0xe>
lea (%rcx,%rsi,2),%r9d
sub %edx,%r9d
jmp 1c <func1+0x1c>
lea (%rsi,%r8,1),%r9d
mov %esi,%r10d
imul %edx,%r10d
sub %r10d,%r9d
lea (%r8,%rdi,1),%eax
test %r8d,%r8d
jg 35 <func1+0x35>
mov %esi,%eax
imul %edx,%eax
mov %edi,%r11d
sub %eax,%r11d
mov %r11d,%eax
add %edx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a5 < a2)
    {
        v6 = (a2 + a2) + a4 - a3;
    }
    else
    {
        v6 = (a2 + a5) - a2 * a3;
    }
    if (v7 < a5)
    {
        v7 = a5 + a1;
    }
    else
    {
        v7 = a1 - (a2 * a3) + a3;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 10
10 14
11 12
12 12
13 18
14 18
15 18
16 18
17 18
18 18
19 20
20 20
21 20
22 20
23 20
24 20
25 21
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
mov %edx,%r9d
imul %ecx,%r9d
add %r9d,%eax
sub %edx,%r8d
add %esi,%r8d
add %r8d,%eax
imul %edi,%edx
imul %edx,%ecx
add %ecx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = (a3 - a1 + a1) * a4;
    v7 = a5 - a3 + a2;
    v8 = ((a1 * a3) * a4) + a2;
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        if (v9 < a2)
        {
            v9 += (a4 + a3) - a2;
        }
        else
        {
            v9 += (a5 * a1) - a5;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 19
2 19
3 19
4 19
5 4
6 4
7 19
8 5
9 5
10 19
11 6
12 6
13 6
14 19
15 20
<<<sep_out_sample>>>
mov %edi,%r9d
imul %esi,%r9d
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%eax
add %r9d,%eax
sub %edx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += (a4 - a4) * a5;
    }
    if (a2 < a2)
    {
        v8 = a4 * a4 - a3;
    }
    else
    {
        v8 = (a1 * a2) + a4 - a4;
    }
    v9 = a5 - a3;
    v10 = 0;
    for (v11 = 0; v11++; v11<a3)
    {
        if (a2 < a3)
        {
            v10 += a4 * a5 - a5;
        }
        else
        {
            v10 += a3 + a3;
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 15
2 15
3 30
4 30
5 30
6 30
7 30
8 17
9 30
10 31
<<<sep_out_sample>>>
cmp %edi,%edx
jge 13 <func1+0x13>
mov %r8d,%r9d
imul %esi,%r9d
add %edi,%r9d
sub %ecx,%r9d
jmp 1e <func1+0x1e>
lea 0x1(%r8),%r9d
imul %edi,%r9d
add %r8d,%r9d
lea (%rsi,%rdi,2),%eax
cmp %edx,%r8d
jge 31 <func1+0x31>
mov %r8d,%eax
imul %esi,%eax
sub %ecx,%eax
imul %edx,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %r9d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (v7 < a4)
        {
            v6 += a1 - a5 * a3;
        }
        else
        {
            v6 += a3 - a2 - a4;
        }
    }
    if (a3 < a1)
    {
        v8 = a5 * a2 + a1 - a4;
    }
    else
    {
        v8 = (a1 * a5) + a1 + a5;
    }
    if (a5 < a3)
    {
        v9 = ((a5 * a2) - a4) * a3;
    }
    else
    {
        v9 = a1 + (a1 + a2);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 18
7 18
8 22
9 22
10 22
11 30
12 24
13 24
14 26
15 26
16 26
17 26
18 32
19 32
20 32
21 32
22 32
23 32
24 33
<<<sep_out_sample>>>
lea 0x2(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12, v13 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a1 + a5 - a4;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += a4 * (a2 * a3);
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a4)
    {
        if (a4 < a5)
        {
            v10 += a4 + (a3 - a5);
        }
        else
        {
            v10 += (a1 + a4) + a2;
        }
    }
    v12 = 0;
    for (v13 = 0; v13++; v13<a4)
    {
        if (a1 < a3)
        {
            v12 += (a4 + a1) + a3;
        }
        else
        {
            v12 += a5 + (a4 + a1);
        }
    }
    return v12+v13+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 38
2 38
3 38
4 38
5 39
<<<sep_out_sample>>>
cmp %edx,%esi
jge 16 <func1+0x16>
mov %esi,%eax
imul %r8d,%eax
imul %r8d,%eax
mov %edi,%r9d
sub %eax,%r9d
jmp 1d <func1+0x1d>
mov %r8d,%r9d
imul %edi,%r9d
add %edx,%edi
add %edi,%esi
lea (%r8,%rsi,1),%eax
add %ecx,%eax
add %r9d,%eax
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a2 < a3)
    {
        v6 = a1 - a2 * a5 * a5;
    }
    else
    {
        v6 = a5 * a1;
    }
    if (a5 < a5)
    {
        v7 = (a4 - (a4 * a2)) - a4;
    }
    else
    {
        v7 = (a1 + a3) + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 6
9 10
10 10
11 18
12 18
13 20
14 20
15 20
16 20
17 21
<<<sep_out_sample>>>
lea (%rdx,%rcx,2),%r9d
sub %r8d,%r9d
cmp %edi,%r9d
jge 17 <func1+0x17>
mov %ecx,%r10d
sub %esi,%r10d
sub %edx,%r10d
jmp 22 <func1+0x22>
lea (%rcx,%r8,1),%r10d
add %esi,%r10d
imul %esi,%r10d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
lea (%r9,%r10,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a1 < a1)
    {
        v6 = (a4 * a5) - a3 + a1;
    }
    else
    {
        v6 = a4 + a4 + a3 - a5;
    }
    if (v6 < a1)
    {
        v7 = a4 - a2 - a3;
    }
    else
    {
        v7 = ((a4 + a5) + a2) * a2;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 10
2 10
3 12
4 12
5 14
6 14
7 14
8 14
9 18
10 18
11 18
12 20
13 20
14 20
15 20
16 20
17 20
18 21
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
lea 0x1(%rcx,%rax,1),%r9d
lea (%r8,%rdi,1),%eax
sub %edx,%eax
sub %edx,%eax
add %r9d,%eax
imul %ecx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a3 * (a1 * a5);
    }
    v8 = a5 + a1 - a3 - a3;
    v9 = a2 * a4;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 11
5 9
6 9
7 9
8 11
9 10
10 11
11 12
<<<sep_out_sample>>>
test %edx,%edx
jle 13 <func1+0x13>
mov %ecx,%r9d
sub %edi,%r9d
add %r8d,%r9d
imul %edi,%r9d
jmp 1f <func1+0x1f>
lea 0x1(%r8),%r9d
imul %r8d,%r9d
imul %esi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
imul %r8d,%edi
add %edi,%esi
imul %esi,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (v6 < a3)
    {
        v6 = (a5 + (a4 - a1)) * a1;
    }
    else
    {
        v6 = (a5 * a5 + a5) * a2;
    }
    v7 = ((a1 * a5) + a2) * a5;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 13
12 13
13 13
14 13
15 13
16 12
17 12
18 12
19 13
20 14
<<<sep_out_sample>>>
cmp %edx,%esi
jge 11 <func1+0x11>
lea 0x1(%r8),%eax
imul %esi,%eax
imul %r8d,%eax
jmp 18 <func1+0x18>
mov %esi,%eax
neg %eax
imul %ecx,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a2 < a3)
    {
        v6 = (a2 * a5 + a2) * a5;
    }
    else
    {
        v6 = a4 * ((a5 - a2) - a5);
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += (a1 - a1) + a3;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        if (a3 < a2)
        {
            v9 += a5 + a4 - a3;
        }
        else
        {
            v9 += a1 - a5 * a5;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 29
11 29
12 29
13 29
14 29
15 30
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a4 + a1;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        if (a3 < a4)
        {
            v8 += a5 - a5 + a1;
        }
        else
        {
            v8 += a4 + a1 * a4;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 21
5 22
<<<sep_out_sample>>>
cmp %edx,%ecx
jge d <func1+0xd>
mov %edx,%r9d
imul %edi,%r9d
jmp 1b <func1+0x1b>
mov %edi,%r9d
imul %r8d,%r9d
imul %ecx,%r9d
add %r8d,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
imul %esi,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a4 < a3)
    {
        v6 = (a3 + a5 - a5) * a1;
    }
    else
    {
        v6 = (a1 * a5) * a4 + a5;
    }
    v7 = a5 * a2;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 10
10 13
11 13
12 13
13 13
14 13
15 12
16 13
17 14
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
lea (%r8,%rsi,2),%eax
lea (%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a5 - a5;
    v7 = a3 + a1 + a2;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 5
2 5
3 6
4 6
5 7
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
add %r8d,%ecx
mov $0x1,%eax
mov %eax,%esi
sub %edi,%esi
imul %esi,%edi
add %edi,%ecx
lea (%rdx,%rdx,1),%esi
sub %esi,%eax
imul %eax,%edx
lea 0x1(%rcx,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a1 - (a1 * a1);
    v7 = a3 - (a3 + a3) * a3;
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        if (a2 < a2)
        {
            v8 += a2 - a5 - a4;
        }
        else
        {
            v8 += a4 + a3;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 18
5 4
6 4
7 4
8 4
9 18
10 5
11 5
12 5
13 18
14 19
<<<sep_out_sample>>>
lea (%rcx,%rdx,1),%eax
test %ecx,%ecx
jle 1a <func1+0x1a>
mov %r8d,%eax
imul %edx,%eax
imul %r8d,%eax
mov %edx,%r9d
sub %eax,%r9d
mov %r9d,%eax
add %edi,%eax
add %eax,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (a3 < a2)
        {
            v6 += (a3 + a2) * a4;
        }
        else
        {
            v6 += (a5 - a5) + a5;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        if (a3 < a3)
        {
            v8 += a4 * a5 - a1;
        }
        else
        {
            v8 += a5 * a3;
        }
    }
    if (v6 < a4)
    {
        v10 = a3 - (a5 * a3 * a5);
    }
    else
    {
        v10 = a4 + a3;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 34
2 28
3 28
4 30
5 30
6 30
7 30
8 30
9 30
10 36
11 36
12 36
13 36
14 36
15 37
<<<sep_out_sample>>>
mov %ecx,%r9d
imul %edi,%r9d
add %r8d,%r9d
cmp $0x1,%esi
jle 17 <func1+0x17>
mov %r8d,%r10d
neg %r10d
jmp 21 <func1+0x21>
mov %esi,%r10d
imul %esi,%r10d
add %edi,%r10d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %r9d,%eax
add %r10d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += (a1 + a4) * a5;
    }
    v8 = a4 * a1 + a5;
    if (v7 < a2)
    {
        v9 = (a1 - a1) * a2 - a5;
    }
    else
    {
        v9 = a1 + (a2 * a2);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 9
4 10
5 10
6 12
7 12
8 12
9 16
10 16
11 16
12 18
13 18
14 18
15 18
16 18
17 18
18 19
<<<sep_out_sample>>>
mov %ecx,%eax
sub %r8d,%eax
cmp %esi,%r8d
jge 11 <func1+0x11>
mov %ecx,%eax
sub %r8d,%eax
add %edi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a5 < a2)
    {
        v6 = a1 + (a4 - a5);
    }
    else
    {
        v6 = a4 - a5;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a2 * (a5 * a1);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 4
4 4
5 6
6 6
7 6
8 17
9 17
10 17
11 17
12 17
13 18
<<<sep_out_sample>>>
mov %esi,%eax
cmp %edi,%ecx
jl 13 <func1+0x13>
lea (%rcx,%rsi,1),%eax
mov %ecx,%r9d
imul %ecx,%r9d
sub %r9d,%eax
lea 0x2(%rdi,%rdx,1),%edx
add %edx,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a5 + a3 * a2;
    }
    if (a4 < a1)
    {
        v8 = a2 + (a1 - a1);
    }
    else
    {
        v8 = (a4 + a2) - a4 * a4;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        if (v10 < a1)
        {
            v9 += a1 * a3;
        }
        else
        {
            v9 += a3 - a2 - a1;
        }
    }
    v11 = 0;
    for (v12 = 0; v12++; v12<a4)
    {
        v11 += a4 - a5;
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 9
3 9
4 15
5 15
6 15
7 15
8 34
9 34
10 34
11 34
12 34
13 35
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %edi,%r8d
add %eax,%r8d
sub %edx,%edi
sub %ecx,%esi
add %edi,%esi
lea 0x1(%r8,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a5 + a1;
    v7 = a1 - a3 - (a4 - a2);
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += a5 + a1 * a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 11
5 4
6 11
7 5
8 5
9 5
10 11
11 12
<<<sep_out_sample>>>
mov %edi,%r9d
cmp %ecx,%esi
jl 14 <func1+0x14>
mov %edx,%r9d
imul %edi,%r9d
sub %esi,%r9d
add %ecx,%r9d
mov %r8d,%eax
cmp %r8d,%esi
jg 2a <func1+0x2a>
lea (%rdx,%rsi,1),%eax
add %edi,%eax
mov %ecx,%r11d
sub %eax,%r11d
mov %r11d,%eax
cmp %r8d,%edx
jge 3d <func1+0x3d>
lea 0x1(%rdi),%r10d
imul %edx,%r10d
imul %ecx,%r10d
jmp 4d <func1+0x4d>
mov $0x1,%r10d
sub %esi,%r10d
imul %r8d,%r10d
add %esi,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a2 < a4)
    {
        v6 = a1 - (a4 - a4);
    }
    else
    {
        v6 = ((a3 * a1) - a2) + a4;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += (a2 * a2) - a4;
    }
    if (a5 < a2)
    {
        v9 = a5 + (a4 - a4) * a2;
    }
    else
    {
        v9 = a4 - ((a3 + a2) + a1);
    }
    if (a3 < a5)
    {
        v10 = ((a1 * a3) + a3) * a4;
    }
    else
    {
        v10 = a5 - a5 * a2 + a2;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 4
3 4
4 10
5 10
6 10
7 10
8 19
9 17
10 17
11 23
12 23
13 23
14 23
15 23
16 25
17 25
18 27
19 27
20 27
21 27
22 31
23 31
24 31
25 31
26 33
27 33
28 33
29 33
30 33
31 33
32 33
33 34
<<<sep_out_sample>>>
mov %edi,%eax
sub %r8d,%eax
cmp %edi,%ecx
jl 12 <func1+0x12>
lea -0x1(%rdx),%eax
imul %esi,%eax
imul %edx,%eax
lea 0x2(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (v6 < a2)
        {
            v6 += a5 - a3 - a2;
        }
        else
        {
            v6 += (a4 + a2) * a4;
        }
    }
    if (a4 < a1)
    {
        v8 = a1 - a5;
    }
    else
    {
        v8 = (a2 * a3 - a2) * a3;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        v9 += a2 - a4 - a2;
    }
    v11 = 0;
    for (v12 = 0; v12++; v12<a2)
    {
        v11 += a4 * a4 * a1;
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 16
4 16
5 22
6 22
7 22
8 34
9 34
10 34
11 34
12 34
13 35
<<<sep_out_sample>>>
lea (%rsi,%rdx,1),%eax
add %r8d,%eax
sub %edi,%eax
lea (%rdi,%rcx,1),%r9d
cmp %r8d,%edi
jl 1c <func1+0x1c>
mov %ecx,%r9d
imul %edx,%r9d
imul %edx,%r9d
lea 0x1(%r9,%rdi,1),%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a4 + a1 * a1;
    }
    v8 = a2 + a3 + a5 - a1;
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        v9 += (a3 + a3) * a3;
    }
    if (a1 < a5)
    {
        v11 = a1 + a2 + a4 - a2;
    }
    else
    {
        v11 = a4 * a3 * a3;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 9
4 17
5 15
6 15
7 21
8 21
9 21
10 23
11 23
12 23
13 23
14 23
15 23
16 24
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %edx,%r8d
add %r8d,%ecx
add %esi,%edi
lea 0x1(%rcx,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a4 - ((a4 - a2) - a1);
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a2 * a1 + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 4
6 10
7 11
<<<sep_out_sample>>>
cmp $0x1,%edx
jle d <func1+0xd>
mov %edx,%r9d
sub %edi,%r9d
jmp 14 <func1+0x14>
mov %esi,%r9d
imul %r8d,%r9d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += (a1 * a5) - a4;
    }
    if (v7 < a3)
    {
        v8 = a3 - a1;
    }
    else
    {
        v8 = a2 * a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 15
7 15
8 17
9 17
10 17
11 17
12 17
13 18
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
lea (%rdx,%r8,2),%eax
imul %r8d,%r8d
sub %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a5 + (a5 - a4 - a5);
    v7 = a5 * a5 - a2 + a4;
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        if (a5 < a3)
        {
            v8 += a3 * a1 - a1;
        }
        else
        {
            v8 += (a2 - a5) + a4;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 5
5 5
6 5
7 18
8 19
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += (a1 + a2) + a2;
    }
    v8 = a5 - a5;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 11
<<<sep_out_sample>>>
mov %esi,%eax
sub %edx,%eax
mov %esi,%r9d
imul %ecx,%r9d
test %r8d,%r8d
cmovg %r9d,%eax
lea (%rdi,%rdx,1),%r9d
add %r9d,%esi
add %esi,%r8d
add %ecx,%r8d
add %r8d,%eax
sub %ecx,%edi
imul %edi,%edx
add %edx,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (v6 < a5)
    {
        v6 = a2 * a4;
    }
    else
    {
        v6 = a2 - a3;
    }
    v7 = a4 + a3 * (a1 - a4);
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 10
2 10
3 6
4 6
5 6
6 6
7 13
8 13
9 13
10 13
11 13
12 12
13 12
14 12
15 13
16 14
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a4 * a1 + a4;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        if (v8 < a2)
        {
            v8 += a4 - a2 - a3;
        }
        else
        {
            v8 += a2 + (a4 + a5);
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 21
5 22
<<<sep_out_sample>>>
mov $0x0,%eax
cmp %esi,%ecx
jge 11 <func1+0x11>
lea 0x1(%rcx),%eax
imul %ecx,%eax
add %edx,%eax
add %edi,%edx
add %edx,%esi
add %r8d,%esi
add %esi,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a4 < a2)
    {
        v6 = (a4 + a4 * a4) + a3;
    }
    else
    {
        v6 = a4 - a4 - a3 + a3;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += (a4 * a4) * a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 6
7 17
8 17
9 17
10 17
11 17
12 18
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
lea 0x1(%rsi,%rax,1),%ecx
mov %edi,%eax
sub %esi,%eax
add %eax,%edi
sub %edx,%edi
lea (%rcx,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (a2 < a3)
        {
            v6 += a1 * a3;
        }
        else
        {
            v6 += a5 + (a1 - a1);
        }
    }
    if (a4 < a4)
    {
        v8 = (a3 - a1) - a1 * a5;
    }
    else
    {
        v8 = a2 - a4 - (a5 + a2);
    }
    v9 = a1 - a2 + a1 - a3;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 25
2 25
3 24
4 24
5 24
6 24
7 25
8 26
<<<sep_out_sample>>>
mov %ecx,%r10d
imul %esi,%r10d
mov %edx,%eax
imul %r8d,%eax
add %eax,%r10d
test %edx,%edx
jle 21 <func1+0x21>
lea 0x1(%rdx),%r9d
imul %ecx,%r9d
add %edx,%r9d
jmp 32 <func1+0x32>
mov %esi,%r9d
imul %esi,%r9d
mov %edi,%r11d
imul %edx,%r11d
sub %r11d,%r9d
mov $0x0,%eax
cmp %r8d,%edx
jg 45 <func1+0x45>
mov %edi,%eax
sub %r8d,%eax
sub %ecx,%eax
add %edi,%eax
lea (%rdi,%rdx,1),%r11d
add %esi,%r11d
add %r8d,%r11d
add %r11d,%ecx
add %r10d,%ecx
add %r9d,%ecx
add %ecx,%eax
imul %edi,%edx
imul %esi,%r8d
add %r8d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a3 < a3)
    {
        v6 = a5 * a3;
    }
    else
    {
        v6 = a4 * a2 + a3 * a5;
    }
    if (v7 < a3)
    {
        v7 = (a4 * a3) + a4 + a3;
    }
    else
    {
        v7 = (a2 * a2) - a1 * a3;
    }
    if (a5 < a3)
    {
        v8 = a3 - a3;
    }
    else
    {
        v8 = a1 - a5 - a4 + a1;
    }
    v9 = a3 * a1 + a5 * a2;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 10
6 12
7 12
8 14
9 14
10 14
11 14
12 18
13 18
14 18
15 18
16 18
17 22
18 20
19 20
20 26
21 26
22 26
23 26
24 29
25 29
26 29
27 29
28 29
29 29
30 29
31 28
32 28
33 28
34 29
35 30
<<<sep_out_sample>>>
cmp %ecx,%esi
jge 14 <func1+0x14>
mov %r8d,%eax
imul %edi,%eax
add %edx,%eax
mov %ecx,%r9d
sub %eax,%r9d
jmp 22 <func1+0x22>
mov %r8d,%r9d
imul %edx,%r9d
imul %edx,%r9d
add %ecx,%r9d
cmp %edx,%r8d
jge 31 <func1+0x31>
lea (%rcx,%rdx,1),%eax
add %edi,%eax
add %r8d,%eax
jmp 36 <func1+0x36>
mov %ecx,%eax
imul %edx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a2 < a4)
    {
        v6 = a4 - (a5 * a1 + a3);
    }
    else
    {
        v6 = a4 + a3 * (a5 * a3);
    }
    if (a5 < a3)
    {
        v7 = a4 + a3 + a1 + a5;
    }
    else
    {
        v7 = (a3 * a4 - a3) + a3;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += a2 + a4 - a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 6
9 10
10 10
11 10
12 10
13 12
14 12
15 14
16 14
17 14
18 14
19 18
20 18
21 25
22 25
23 25
24 25
25 25
26 25
27 26
<<<sep_out_sample>>>
mov %edi,%r11d
imul %r8d,%r11d
add %edx,%r11d
sub %ecx,%r11d
mov %esi,%r10d
imul %edi,%r10d
add %ecx,%r10d
add %edi,%r10d
mov %esi,%eax
neg %eax
lea (%rdx,%rsi,1),%r9d
cmp %ecx,%eax
jl 37 <func1+0x37>
mov $0x1,%r9d
sub %edi,%r9d
imul %r8d,%r9d
imul %edx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
sub %esi,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a3 - a3 - a2;
    v7 = a1 * a5 + a3 - a4;
    v8 = (a2 * a1 + a4) + a1;
    if (v6 < a4)
    {
        v9 = a3 + a2;
    }
    else
    {
        v9 = a3 * (a5 - a5 * a1);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 5
2 5
3 5
4 5
5 6
6 6
7 6
8 6
9 4
10 4
11 9
12 7
13 7
14 13
15 13
16 13
17 13
18 15
19 15
20 15
21 15
22 15
23 15
24 15
25 15
26 16
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a3 - a1;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += a1 * (a3 - a5);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 14
2 14
3 14
4 14
5 15
<<<sep_out_sample>>>
lea (%rdx,%rdi,1),%r9d
test %r8d,%r8d
jg 12 <func1+0x12>
mov %ecx,%r9d
sub %edi,%r9d
sub %edi,%r9d
mov $0x0,%eax
cmp %edi,%r8d
jle 23 <func1+0x23>
lea (%rcx,%r8,2),%eax
imul %edx,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    if (v6 < a5)
    {
        v6 = a3 + a1;
    }
    else
    {
        v6 = (a4 - a1) - a1;
    }
    if (a1 < a5)
    {
        v7 = (a5 + a4 + a5) * a3;
    }
    else
    {
        v7 = (a1 + a5) - a5 - a1;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        if (v7 < a4)
        {
            v8 += a3 - a1;
        }
        else
        {
            v8 += a2 + (a4 + a2);
        }
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a2)
    {
        if (v8 < a2)
        {
            v10 += (a1 * a4) - a3;
        }
        else
        {
            v10 += a4 - a4 * a2;
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 4
3 4
4 10
5 10
6 10
7 18
8 12
9 12
10 14
11 14
12 44
13 44
14 44
15 44
16 44
17 44
18 45
<<<sep_out_sample>>>
test %r8d,%r8d
jle f <func1+0xf>
lea 0x1(%rsi),%eax
imul %edx,%eax
sub %esi,%eax
jmp 1f <func1+0x1f>
mov %r8d,%eax
imul %esi,%eax
mov %edx,%r9d
imul %edx,%r9d
sub %r9d,%eax
lea (%rdi,%rdx,1),%r9d
add %esi,%r9d
add %r9d,%r8d
add %r8d,%ecx
add %ecx,%eax
add %esi,%edx
imul %edx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (v6 < a5)
    {
        v6 = (a3 + a3 * a2) - a2;
    }
    else
    {
        v6 = (a5 * a2) - a3 * a3;
    }
    v7 = (a3 + a2) * a1;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 10
11 10
12 13
13 13
14 13
15 13
16 13
17 12
18 12
19 13
20 14
<<<sep_out_sample>>>
cmp %edi,%esi
jge 13 <func1+0x13>
mov %edi,%r10d
sub %edx,%r10d
add %edi,%r10d
imul %ecx,%r10d
jmp 1e <func1+0x1e>
lea -0x1(%rdx),%r10d
imul %r8d,%r10d
add %ecx,%r10d
lea (%r8,%rdx,1),%eax
lea (%rsi,%rdi,1),%r9d
test %edx,%edx
cmovg %eax,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a2 < a1)
    {
        v6 = a4 * (a1 - (a3 - a1));
    }
    else
    {
        v6 = (a5 * a3) - a5 + a4;
    }
    if (v7 < a3)
    {
        v7 = a5 + a3;
    }
    else
    {
        v7 = (a5 + a2) - a5 + a1;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 14
12 14
13 14
14 14
15 20
16 20
17 20
18 20
19 20
20 20
21 21
<<<sep_out_sample>>>
mov %r8d,%r9d
imul %ecx,%r9d
sub %edx,%r9d
sub %edi,%r9d
test %ecx,%ecx
jle 18 <func1+0x18>
mov %r8d,%eax
sub %edx,%eax
jmp 1e <func1+0x1e>
mov %r8d,%eax
imul %edx,%eax
cmp %edx,%r8d
jle 31 <func1+0x31>
lea (%rdi,%rsi,1),%r10d
imul %ecx,%r10d
imul %edi,%r10d
jmp 3c <func1+0x3c>
mov %r8d,%r10d
imul %edx,%r10d
lea (%r10,%rdi,2),%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = (a5 * a4 - a3) - a1;
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += a4 * a3;
    }
    if (v7 < a4)
    {
        v9 = (a5 - a5 - a3) + a5;
    }
    else
    {
        v9 = a5 * a3;
    }
    if (a3 < a5)
    {
        v10 = (a4 * (a1 + a2)) * a1;
    }
    else
    {
        v10 = a1 + a1 + a5 * a3;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 10
6 10
7 12
8 12
9 12
10 16
11 16
12 18
13 18
14 20
15 20
16 20
17 20
18 24
19 24
20 24
21 26
22 26
23 26
24 26
25 26
26 26
27 26
28 27
<<<sep_out_sample>>>
mov %edi,%r9d
sub %edx,%r9d
cmp %r8d,%ecx
jge 16 <func1+0x16>
lea -0x1(%r8),%r9d
imul %esi,%r9d
add %r8d,%r9d
cmp %esi,%r8d
jle 22 <func1+0x22>
mov %edx,%eax
imul %esi,%eax
jmp 27 <func1+0x27>
lea (%rdi,%rcx,2),%eax
sub %edx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a4 < a5)
    {
        v6 = (a2 * a5 - a2) + a5;
    }
    else
    {
        v6 = a1 - a3;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += a5 - a2 - a3;
    }
    if (a2 < a5)
    {
        v9 = a3 * a2;
    }
    else
    {
        v9 = (a4 - a3) + a1 + a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 4
4 4
5 6
6 6
7 6
8 17
9 17
10 19
11 19
12 19
13 23
14 23
15 25
16 25
17 25
18 25
19 25
20 25
21 26
<<<sep_out_sample>>>
mov %edx,%r9d
sub %edi,%r9d
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
imul %r8d,%r8d
add %ecx,%r8d
add %edx,%r8d
add %r8d,%eax
add %r9d,%eax
imul %ecx,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = ((a5 * a5) + a4) + a3;
    v7 = (a3 - a1 - a4) + a4;
    v8 = a4 * a3;
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        if (a4 < a3)
        {
            v9 += a4 + a4;
        }
        else
        {
            v9 += a1 - a2 - a3;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 5
2 5
3 19
4 19
5 19
6 19
7 4
8 4
9 4
10 19
11 19
12 6
13 19
14 20
<<<sep_out_sample>>>
lea (%rdi,%rsi,2),%r9d
add %edi,%r9d
cmp %r8d,%r9d
jge 18 <func1+0x18>
mov %ecx,%r10d
imul %esi,%r10d
neg %r10d
jmp 26 <func1+0x26>
mov %ecx,%r10d
imul %edi,%r10d
imul %esi,%r10d
add %edx,%r10d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
lea (%r9,%r10,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a2 + (a1 + a2) + a1;
    if (v6 < a5)
    {
        v7 = (a1 - a4 * a2) - a1;
    }
    else
    {
        v7 = a4 * a1 * a2 + a3;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 5
4 5
5 7
6 7
7 7
8 7
9 11
10 11
11 11
12 11
13 13
14 13
15 13
16 13
17 13
18 13
19 14
<<<sep_out_sample>>>
cmp %edi,%edx
jge 15 <func1+0x15>
mov %ecx,%eax
imul %esi,%eax
mov %edx,%r9d
sub %eax,%r9d
imul %edi,%r9d
jmp 22 <func1+0x22>
mov %esi,%r9d
imul %edx,%r9d
add %ecx,%r9d
add %r8d,%r9d
cmp %edi,%r9d
jge 30 <func1+0x30>
lea (%rcx,%rsi,2),%r10d
sub %edx,%r10d
jmp 3b <func1+0x3b>
mov %ecx,%r10d
imul %r8d,%r10d
imul %ecx,%r10d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
lea (%r9,%r10,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a3 < a1)
    {
        v6 = (a3 - a4 * a2) * a1;
    }
    else
    {
        v6 = a4 + (a2 * a3) + a5;
    }
    if (v6 < a1)
    {
        v7 = a2 + a4 + a2 - a3;
    }
    else
    {
        v7 = (a4 * a5) * a4;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 6
9 10
10 10
11 10
12 10
13 12
14 12
15 14
16 14
17 14
18 18
19 18
20 18
21 20
22 20
23 20
24 20
25 20
26 20
27 21
<<<sep_out_sample>>>
mov %edi,%r11d
imul %esi,%r11d
lea (%rsi,%rsi,1),%r9d
cmp %esi,%edi
jge 1b <func1+0x1b>
lea (%r8,%rdx,1),%r9d
mov %edx,%eax
imul %esi,%eax
add %eax,%r9d
mov %edx,%r10d
sub %ecx,%r10d
cmp %ecx,%edx
jl 2d <func1+0x2d>
lea (%r8,%rdx,1),%r10d
imul %ecx,%r10d
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
add %r8d,%ecx
sub %r11d,%ecx
add %ecx,%r9d
lea (%r9,%r10,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a5 - a5 - a1 * a2;
    if (a1 < a2)
    {
        v7 = (a5 + a3) + a3 * a2;
    }
    else
    {
        v7 = a2 + a2;
    }
    if (a3 < a4)
    {
        v8 = a3 - a4;
    }
    else
    {
        v8 = (a5 + a3) * a4;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a1)
    {
        v9 += a1 - a3 + a1;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 11
4 5
5 5
6 7
7 7
8 7
9 7
10 15
11 15
12 13
13 13
14 19
15 19
16 26
17 26
18 26
19 26
20 26
21 26
22 26
23 27
<<<sep_out_sample>>>
cmp %ecx,%r8d
jge d <func1+0xd>
mov %r8d,%r11d
sub %edi,%r11d
jmp 1c <func1+0x1c>
mov %ecx,%r11d
imul %esi,%r11d
imul %esi,%r11d
imul %esi,%r11d
cmp %edx,%ecx
jge 28 <func1+0x28>
mov %edi,%r10d
neg %r10d
jmp 32 <func1+0x32>
mov %esi,%r10d
imul %ecx,%r10d
sub %r8d,%r10d
cmp %edx,%esi
jge 43 <func1+0x43>
lea (%rdx,%rdx,1),%r9d
sub %esi,%r9d
imul %edi,%r9d
jmp 4a <func1+0x4a>
mov %edx,%r9d
imul %ecx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a5 < a4)
    {
        v6 = a5 - a1;
    }
    else
    {
        v6 = a4 * a2 * a2 * a2;
    }
    if (a4 < a3)
    {
        v7 = (a2 * (a3 - a3)) - a1;
    }
    else
    {
        v7 = a2 * a4 - a5;
    }
    if (a2 < a3)
    {
        v8 = ((a3 + a3) - a2) * a1;
    }
    else
    {
        v8 = a3 * a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 10
10 12
11 12
12 14
13 14
14 14
15 18
16 18
17 18
18 20
19 20
20 22
21 22
22 22
23 22
24 26
25 26
26 28
27 28
28 28
29 28
30 28
31 28
32 28
33 29
<<<sep_out_sample>>>
cmp %edx,%edi
jle f <func1+0xf>
lea 0x1(%rsi),%eax
imul %r8d,%eax
add %esi,%eax
jmp 1b <func1+0x1b>
mov $0x1,%eax
sub %edx,%eax
imul %esi,%eax
add %edx,%eax
mov %esi,%r9d
sub %ecx,%r9d
cmp %r8d,%esi
jl 2d <func1+0x2d>
mov %edx,%r9d
imul %esi,%r9d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += (a1 + a2) - a1;
    }
    if (a3 < a1)
    {
        v8 = a5 * a2 + a5 + a2;
    }
    else
    {
        v8 = a2 - a3 * a2 + a3;
    }
    if (a2 < a5)
    {
        v9 = a2 - a4;
    }
    else
    {
        v9 = a3 * a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 15
8 15
9 15
10 15
11 19
12 19
13 17
14 17
15 23
16 23
17 25
18 25
19 25
20 25
21 25
22 25
23 26
<<<sep_out_sample>>>
lea (%rdx,%rcx,2),%r10d
add %edi,%r10d
cmp %edi,%ecx
jle 1b <func1+0x1b>
mov %esi,%r9d
imul %edi,%r9d
imul %esi,%r9d
add %r8d,%r9d
jmp 29 <func1+0x29>
mov %esi,%r9d
imul %edi,%r9d
imul %ecx,%r9d
add %edx,%r9d
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
imul %esi,%ecx
sub %edx,%ecx
add %ecx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a1 < a1)
    {
        v6 = (a4 + a4) + a4 + a4;
    }
    else
    {
        v6 = a1 + (a4 + a4 + a3);
    }
    if (a1 < a4)
    {
        v7 = (a2 * (a2 * a1)) + a5;
    }
    else
    {
        v7 = a2 * a1 * a4 + a3;
    }
    v8 = (a4 * a2) - a3 + a2;
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        if (a1 < a1)
        {
            v9 += (a5 + a4) + a5;
        }
        else
        {
            v9 += a3 + a3 - a4;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 12
4 12
5 14
6 14
7 14
8 14
9 14
10 18
11 18
12 18
13 18
14 33
15 33
16 33
17 33
18 33
19 33
20 20
21 20
22 20
23 33
24 34
<<<sep_out_sample>>>
mov %esi,%r9d
imul %ecx,%r9d
lea (%rdi,%r8,1),%eax
cmp %edx,%r8d
jge 19 <func1+0x19>
mov %edx,%eax
sub %esi,%eax
sub %r8d,%eax
add %edx,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    if (a5 < a5)
    {
        v6 = a3 - ((a2 * a5) - a4);
    }
    else
    {
        v6 = a2 * a4;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += (a1 * a4) - a4;
    }
    if (a5 < a3)
    {
        v9 = a3 - a2 - a5 + a3;
    }
    else
    {
        v9 = (a1 + a4 - a4) + a5;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a1)
    {
        if (a1 < a4)
        {
            v10 += (a5 + a5) + a5;
        }
        else
        {
            v10 += a3 * a5;
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 23
4 17
5 17
6 19
7 19
8 19
9 19
10 37
11 37
12 37
13 37
14 37
15 37
16 38
<<<sep_out_sample>>>
test %r8d,%r8d
jle 12 <func1+0x12>
mov %edi,%eax
imul %edi,%eax
imul %ecx,%eax
add %r8d,%eax
jmp 1b <func1+0x1b>
lea 0x1(%rsi),%eax
imul %esi,%eax
sub %r8d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (v6 < a5)
    {
        v6 = a1 * a1 * a4 + a5;
    }
    else
    {
        v6 = a2 * a2 + a2 - a5;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        if (a1 < a4)
        {
            v7 += a3 + a1 * a4;
        }
        else
        {
            v7 += (a3 + a2) + a5;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 24
12 24
13 24
14 24
15 24
16 25
<<<sep_out_sample>>>
cmp %ecx,%esi
jge 14 <func1+0x14>
mov %esi,%r9d
imul %ecx,%r9d
imul %ecx,%r9d
add %esi,%r9d
jmp 20 <func1+0x20>
lea -0x1(%rdx),%r9d
imul %ecx,%r9d
imul %ecx,%r9d
lea 0x1(%rdi),%eax
lea (%rdx,%rax,1),%r10d
add %esi,%r10d
add %r10d,%r8d
add %r8d,%ecx
add %r9d,%ecx
imul %edi,%eax
add %ecx,%eax
add %edx,%edi
imul %edx,%esi
lea (%rdi,%rsi,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a2 < a4)
    {
        v6 = a2 + a2 * a4 * a4;
    }
    else
    {
        v6 = a4 * (a3 * a4 - a4);
    }
    v7 = a1 * a1 + a1;
    v8 = a3 + a1 + a3 * a2;
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        v9 += a5 + (a1 + a5);
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 12
12 19
13 19
14 19
15 19
16 19
17 12
18 19
19 13
20 13
21 13
22 19
23 20
<<<sep_out_sample>>>
lea (%r8,%rdx,1),%r9d
cmp %esi,%edx
jge 16 <func1+0x16>
mov %edi,%eax
imul %edx,%eax
mov %r8d,%r9d
sub %eax,%r9d
sub %edi,%r9d
cmp %ecx,%esi
jge 25 <func1+0x25>
mov %esi,%r11d
sub %edx,%r11d
add %ecx,%r11d
jmp 2c <func1+0x2c>
mov %ecx,%r11d
imul %ecx,%r11d
cmp %edi,%edx
jge 39 <func1+0x39>
mov %edx,%r10d
imul %esi,%r10d
jmp 46 <func1+0x46>
mov %r8d,%r10d
sub %ecx,%r10d
sub %edx,%r10d
imul %esi,%r10d
test %ecx,%ecx
jle 54 <func1+0x54>
mov %esi,%eax
sub %ecx,%eax
imul %r8d,%eax
jmp 5c <func1+0x5c>
lea -0x1(%rdx),%eax
imul %edx,%eax
sub %esi,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
add %r11d,%r9d
add %r10d,%r9d
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a3 < a2)
    {
        v6 = a5 - a1 * a3 - a1;
    }
    else
    {
        v6 = a5 + a3;
    }
    if (a2 < a4)
    {
        v7 = a2 - a3 + a4;
    }
    else
    {
        v7 = a2 - a2 + a4 * a4;
    }
    if (a3 < a1)
    {
        v8 = a3 * a2;
    }
    else
    {
        v8 = ((a5 - a4) - a3) * a2;
    }
    if (v9 < a4)
    {
        v9 = (a2 - a4) * a5;
    }
    else
    {
        v9 = ((a3 * a3) - a3) - a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 6
7 6
8 6
9 12
10 12
11 14
12 14
13 14
14 14
15 18
16 18
17 20
18 20
19 22
20 22
21 22
22 26
23 26
24 26
25 26
26 28
27 28
28 30
29 30
30 30
31 30
32 34
33 34
34 34
35 36
36 36
37 36
38 36
39 36
40 36
41 36
42 36
43 37
<<<sep_out_sample>>>
lea (%r8,%r8,1),%r11d
sub %edi,%r11d
cmp %ecx,%edi
jge 16 <func1+0x16>
mov %esi,%r10d
sub %edi,%r10d
sub %edx,%r10d
jmp 22 <func1+0x22>
mov %r8d,%r10d
sub %ecx,%r10d
add %esi,%r10d
add %edi,%r10d
mov $0x0,%r9d
cmp %esi,%ecx
jge 36 <func1+0x36>
mov %r8d,%r9d
imul %ecx,%r9d
sub %esi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = (a5 + a5) - a1;
    if (a1 < a4)
    {
        v7 = (a2 - a1) - a3;
    }
    else
    {
        v7 = a1 - ((a4 - a5) - a2);
    }
    if (a4 < a2)
    {
        v8 = a5 * a4 - a2;
    }
    else
    {
        v8 = a5 - a5 - a2 + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 5
4 5
5 7
6 7
7 7
8 7
9 11
10 11
11 11
12 11
13 19
14 13
15 13
16 15
17 15
18 15
19 21
20 21
21 21
22 21
23 21
24 21
25 21
26 22
<<<sep_out_sample>>>
test %esi,%esi
jle 10 <func1+0x10>
mov %edx,%eax
imul %ecx,%eax
add %r8d,%eax
add %ecx,%eax
jmp 18 <func1+0x18>
mov %ecx,%eax
imul %esi,%eax
imul %ecx,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (a4 < a1)
        {
            v6 += a3 + a3 - a2;
        }
        else
        {
            v6 += a4 + a5;
        }
    }
    if (v8 < a2)
    {
        v8 = a4 + (a5 + a3 * a4);
    }
    else
    {
        v8 = a4 * (a4 * a2);
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        if (a5 < a4)
        {
            v9 += a1 * a5;
        }
        else
        {
            v9 += (a4 * a5) * a2;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 18
7 18
8 22
9 22
10 22
11 36
12 36
13 36
14 36
15 36
16 37
<<<sep_out_sample>>>
lea (%rsi,%rsi,1),%eax
lea (%rdi,%rsi,1),%r9d
test %edx,%edx
cmovle %r9d,%eax
lea 0x1(%rdi,%rdx,1),%r9d
add %esi,%r9d
add %r9d,%r8d
add %r8d,%ecx
add %ecx,%eax
imul %esi,%edx
add %edi,%edx
imul %edx,%edi
lea 0x1(%rax,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    if (v6 < a3)
    {
        v6 = a2 + a2;
    }
    else
    {
        v6 = a1 + a2;
    }
    v7 = (a1 + a2 * a3) * a1;
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += (a1 + a4) + a1;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a3)
    {
        if (v9 < a2)
        {
            v10 += (a3 * a4) - a2;
        }
        else
        {
            v10 += a5 * a4;
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 30
6 30
7 30
8 30
9 30
10 12
11 12
12 12
13 30
14 31
<<<sep_out_sample>>>
push %rbx
mov %esi,%ebx
sub %r8d,%ebx
mov %edx,%eax
imul %r8d,%eax
mov %eax,%r11d
sub %ecx,%r11d
add %esi,%r11d
cmp %ecx,%r8d
jle 22 <func1+0x22>
sub %edi,%eax
lea (%rax,%rdx,1),%r10d
jmp 2b <func1+0x2b>
mov %edi,%r10d
sub %ecx,%r10d
sub %eax,%r10d
lea (%rcx,%rsi,1),%r9d
cmp %r8d,%esi
jl 41 <func1+0x41>
mov %ecx,%r9d
sub %edx,%r9d
add %ecx,%r9d
imul %r8d,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %ebx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a2 - a5;
    v7 = a3 * a5 - a4 + a2;
    if (a4 < a5)
    {
        v8 = a3 * a5 - a1 + a3;
    }
    else
    {
        v8 = (a1 - a4) - a3 * a5;
    }
    if (a2 < a5)
    {
        v9 = a4 + a2;
    }
    else
    {
        v9 = (a4 - (a3 - a4)) * a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 4
3 4
4 5
5 5
6 5
7 5
8 5
9 6
10 6
11 8
12 8
13 8
14 12
15 12
16 12
17 16
18 14
19 14
20 20
21 20
22 20
23 20
24 22
25 22
26 22
27 22
28 22
29 22
30 22
31 22
32 23
33 23
<<<sep_out_sample>>>
lea (%rdi,%rcx,1),%eax
cmp %r8d,%ecx
cmovge %eax,%eax
test %ecx,%ecx
jle 17 <func1+0x17>
lea 0x1(%rcx),%r9d
imul %ecx,%r9d
jmp 25 <func1+0x25>
mov %edx,%r9d
imul %esi,%r9d
imul %esi,%r9d
add %r8d,%r9d
lea 0x1(%r9,%rdi,1),%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    if (a4 < a5)
    {
        v6 = a1 + a4;
    }
    else
    {
        v6 = a4 + a1;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += (a4 * a3) + a2;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        if (a1 < a3)
        {
            v9 += a5 + a2 + a5;
        }
        else
        {
            v9 += a2 + a4 + a4;
        }
    }
    if (v9 < a4)
    {
        v11 = (a4 * a4) + a4;
    }
    else
    {
        v11 = a3 * a2 * a2 + a5;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 29
5 29
6 31
7 31
8 31
9 35
10 35
11 35
12 35
13 37
14 37
15 37
16 37
17 37
18 37
19 38
<<<sep_out_sample>>>
mov %r8d,%r9d
imul %ecx,%r9d
imul %r8d,%r9d
add %ecx,%r9d
cmp %edx,%r8d
jle 1b <func1+0x1b>
mov %ecx,%r10d
neg %r10d
jmp 2a <func1+0x2a>
mov %ecx,%r10d
imul %edx,%r10d
imul %edx,%r10d
imul %edi,%r10d
mov $0x0,%eax
cmp %esi,%r9d
jl 3a <func1+0x3a>
lea (%rcx,%rdi,1),%eax
add %r8d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
add %r10d,%r9d
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a4 + (a5 * a4 * a5);
    if (a3 < a5)
    {
        v7 = a1 - a4 - a1;
    }
    else
    {
        v7 = (a3 * (a4 * a3)) * a1;
    }
    v8 = a3 - a3;
    if (v6 < a2)
    {
        v9 = a4 - a4;
    }
    else
    {
        v9 = (a4 + a1) + a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 5
6 5
7 7
8 7
9 7
10 11
11 11
12 11
13 11
14 16
15 14
16 14
17 20
18 20
19 22
20 22
21 22
22 22
23 22
24 22
25 22
26 23
<<<sep_out_sample>>>
mov %esi,%r10d
sub %edi,%r10d
add %r10d,%r10d
lea (%rdi,%r8,1),%r9d
add %esi,%r9d
cmp %r8d,%ecx
jl 24 <func1+0x24>
mov %r8d,%r9d
imul %ecx,%r9d
imul %edx,%r9d
imul %edi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a2 - a1 + a2 - a1;
    if (a4 < a5)
    {
        v7 = a1 + a5 + a2;
    }
    else
    {
        v7 = a1 * (a5 * a4 * a3);
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 7
5 7
6 5
7 5
8 11
9 11
10 11
11 11
12 13
13 13
14 13
15 13
16 13
17 13
18 14
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
lea (%r8,%rcx,1),%eax
lea (%rdi,%rsi,1),%r8d
sub %edx,%r8d
imul %r8d,%edi
add %eax,%edi
add %edx,%edx
sub %esi,%edx
imul %edx,%ecx
lea (%rdi,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a1 * ((a1 + a2) - a3);
    v7 = a4 * ((a3 + a3) - a2);
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 4
7 4
8 6
9 5
10 5
11 5
12 6
13 7
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %edx,%r8d
lea 0x1(%rcx,%r8,1),%eax
lea (%rdi,%rsi,2),%edx
add %edx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a1 * a4 + a4;
    }
    v8 = a1 + (a2 + (a1 + a2));
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 9
6 9
7 10
8 11
<<<sep_out_sample>>>
lea (%rdi,%rsi,1),%eax
cmp %ecx,%r8d
jl e <func1+0xe>
mov %r8d,%eax
imul %esi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += (a1 - a3) * a3;
    }
    if (a5 < a4)
    {
        v8 = a1 + a2;
    }
    else
    {
        v8 = a5 * a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 11
2 9
3 9
4 15
5 15
6 17
7 17
8 17
9 17
10 17
11 18
<<<sep_out_sample>>>
add %edx,%edi
add %esi,%edi
add %edi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %esi,%edx
add %edx,%ecx
imul %ecx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a3 + a5 - a1;
    }
    v8 = a2 * (a4 + (a3 + a2));
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 9
6 9
7 9
8 10
9 11
<<<sep_out_sample>>>
mov %esi,%r9d
cmp %esi,%edi
jge 11 <func1+0x11>
lea (%rdi,%rcx,1),%r9d
add %r8d,%r9d
add %esi,%r9d
mov %r8d,%eax
sub %edi,%eax
add %ecx,%eax
cmp %esi,%edi
jle 2b <func1+0x2b>
mov %ecx,%r10d
imul %r8d,%r10d
mov %esi,%eax
imul %edx,%eax
add %r10d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a1 < a2)
    {
        v6 = (a1 + a4) + a5 + a2;
    }
    else
    {
        v6 = a2 - (a5 - a5) * a1;
    }
    if (a2 < a1)
    {
        v7 = a4 * a5 + a2 * a3;
    }
    else
    {
        v7 = a5 - a1 + a4;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 6
7 18
8 18
9 18
10 12
11 12
12 14
13 14
14 14
15 14
16 14
17 20
18 20
19 20
20 20
21 20
22 20
23 21
<<<sep_out_sample>>>
lea (%rdx,%rdi,2),%eax
add %eax,%esi
lea 0x2(%rcx,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (a1 < a1)
        {
            v6 += (a1 + a2) + a2;
        }
        else
        {
            v6 += a1 + a4 + a5;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += a1 - a5 * a4;
    }
    v10 = a1 - a5;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 22
4 23
<<<sep_out_sample>>>
lea (%rdx,%rdi,1),%eax
mov %ecx,%r9d
sub %edx,%r9d
sub %r8d,%eax
cmp %esi,%edi
cmovl %r9d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a1 < a2)
    {
        v6 = a4 - a3;
    }
    else
    {
        v6 = (a3 + a1) - a5;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += (a3 * a2) + a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 6
3 6
4 6
5 6
6 6
7 17
8 17
9 17
10 17
11 17
12 18
<<<sep_out_sample>>>
mov %edx,%eax
sub %r8d,%eax
cmp %edi,%r8d
jge 15 <func1+0x15>
mov %ecx,%eax
imul %r8d,%eax
add %esi,%eax
add %r8d,%eax
add %edx,%edi
add %esi,%edi
add %edi,%r8d
add %ecx,%r8d
add %eax,%r8d
sub $0x1,%ecx
imul %ecx,%edx
sub %esi,%edx
lea (%r8,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a5 < a1)
    {
        v6 = a5 + (a2 + a4 * a5);
    }
    else
    {
        v6 = a3 + (a4 - a5) - a4;
    }
    v7 = a4 * a3 - a3 - a2;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 10
2 10
3 4
4 4
5 6
6 6
7 6
8 6
9 13
10 13
11 13
12 13
13 13
14 12
15 12
16 12
17 13
18 14
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %r8d,%edx
add %edx,%ecx
sub %esi,%edi
sub %r8d,%edi
lea 0x1(%rcx,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = (a1 - a2) - a5;
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a3 + a3 + a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 4
6 4
7 10
8 11
<<<sep_out_sample>>>
push %rbp
push %rbx
mov %edx,%ebp
imul %r8d,%ebp
sub %edi,%ebp
lea (%rdx,%rdi,1),%r9d
mov %r9d,%ebx
imul %edi,%ebx
sub %r8d,%ebx
mov %edi,%eax
imul %edi,%eax
mov %edx,%r11d
sub %eax,%r11d
sub %esi,%r11d
lea (%r8,%rsi,1),%r10d
cmp %edi,%edx
jge 3b <func1+0x3b>
mov %esi,%r10d
imul %edx,%r10d
imul %ecx,%r10d
sub %edx,%r10d
lea (%r9,%rsi,1),%eax
add %r8d,%eax
add %ecx,%eax
add %ebp,%eax
add %ebx,%eax
add %r11d,%eax
add %r10d,%eax
pop %rbx
pop %rbp
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a3 * a5 - a1;
    if (a4 < a4)
    {
        v7 = a2 * a2;
    }
    else
    {
        v7 = a1 * (a3 + a1) - a5;
    }
    v8 = a3 - a1 * a1 - a2;
    if (a3 < a1)
    {
        v9 = ((a2 * a3) * a4) - a3;
    }
    else
    {
        v9 = a5 + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 2
3 4
4 4
5 4
6 11
7 11
8 11
9 11
10 13
11 13
12 13
13 13
14 13
15 20
16 14
17 14
18 16
19 16
20 16
21 16
22 22
23 22
24 22
25 22
26 22
27 22
28 22
29 23
30 23
31 23
<<<sep_out_sample>>>
mov %ecx,%eax
imul %r8d,%eax
add %edi,%eax
imul %ecx,%eax
lea 0x1(%rdi,%rax,1),%eax
add %eax,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a2 + a2;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        if (v9 < a5)
        {
            v8 += a5 * a3;
        }
        else
        {
            v8 += (a4 + a4) + a4;
        }
    }
    v10 = (a4 * a5 + a1) * a4;
    v11 = 0;
    for (v12 = 0; v12++; v12<a2)
    {
        if (v8 < a4)
        {
            v11 += a1 * a1 * a3;
        }
        else
        {
            v11 += a5 + a3;
        }
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 21
5 34
6 34
7 34
8 34
9 34
10 35
<<<sep_out_sample>>>
mov %edi,%r9d
sub %edx,%r9d
lea (%rdx,%r8,1),%eax
cmp $0x1,%r8d
jle 19 <func1+0x19>
lea (%rdi,%r8,2),%r10d
add %r8d,%r10d
jmp 21 <func1+0x21>
lea -0x1(%r8),%r10d
imul %edi,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a1 - a3;
    v7 = (a3 + a3) - (a3 - a5);
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        if (a4 < a4)
        {
            v8 += a3 + (a1 * a3);
        }
        else
        {
            v8 += a5 + a4;
        }
    }
    if (v9 < a5)
    {
        v10 = ((a5 + a1) + a5) + a5;
    }
    else
    {
        v10 = (a1 * a5) - a1;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 5
4 18
5 18
6 20
7 20
8 20
9 24
10 24
11 26
12 26
13 26
14 26
15 26
16 26
17 26
18 27
<<<sep_out_sample>>>
add %edx,%edi
add %esi,%edi
add %edi,%r8d
lea (%r8,%rcx,1),%edi
imul %ecx,%edx
sub %esi,%edx
sub %esi,%edx
lea 0x1(%rdi,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = (a4 * a3 - a2) - a2;
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += a5 - a3 * a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 4
6 4
7 4
8 10
9 11
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %r8d,%edx
add %edx,%ecx
mov %esi,%eax
sub %r8d,%eax
lea (%rax,%rsi,2),%eax
lea 0x1(%rcx,%rax,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a2 - a5 + (a2 + a2);
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        if (a3 < a4)
        {
            v7 += (a3 + a5) - a5;
        }
        else
        {
            v7 += (a2 + a3) - a4;
        }
    }
    v9 = a5 - a3 + a3 - a5;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 18
5 4
6 4
7 4
8 18
9 19
<<<sep_out_sample>>>
mov %esi,%r9d
imul %edx,%r9d
mov %r8d,%eax
sub %edx,%eax
lea 0x2(%r9,%rax,1),%eax
imul %edx,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (a4 < a1)
        {
            v6 += a1 + (a5 * a1);
        }
        else
        {
            v6 += a2 + a4 * a5;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += a5 * a2 * a1;
    }
    v10 = a3 * (a2 * a3) + a3;
    v11 = a3 + (a3 * (a5 - a3));
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 22
4 22
5 22
6 23
7 23
8 23
9 23
10 23
11 23
12 24
<<<sep_out_sample>>>
mov %ecx,%eax
sub %esi,%eax
mov %edi,%r9d
sub %edx,%r9d
cmp %ecx,%r8d
cmovl %eax,%r9d
test %esi,%esi
jle 1e <func1+0x1e>
lea (%r8,%rsi,1),%eax
imul %edx,%eax
jmp 25 <func1+0x25>
mov %edi,%eax
neg %eax
imul %ecx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a5 < a4)
    {
        v6 = a4 - a2;
    }
    else
    {
        v6 = a1 - a3;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        if (a5 < a1)
        {
            v7 += a4 + a3;
        }
        else
        {
            v7 += a3 + a3;
        }
    }
    if (v9 < a2)
    {
        v9 = (a5 + a2) * a3;
    }
    else
    {
        v9 = (a4 - a1 - a4) * a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 6
6 6
7 24
8 24
9 26
10 26
11 26
12 30
13 30
14 30
15 32
16 32
17 32
18 32
19 32
20 32
21 33
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea (%r8,%rcx,1),%esi
add $0x2,%ecx
imul %ecx,%edx
lea 0x1(%rsi,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a4 * a3 + a3 + a3;
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += a3 * a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 4
6 4
7 10
8 11
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %r8d,%esi
add %ecx,%esi
lea 0x1(%rcx),%eax
imul %ecx,%eax
sub %r8d,%eax
add %esi,%eax
mov %ecx,%esi
sub %r8d,%esi
imul %esi,%ecx
add %ecx,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a4 + a4 * a4 - a5;
    v7 = ((a4 - a5) * a4) + a3;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 4
7 4
8 6
9 5
10 5
11 5
12 5
13 6
14 7
<<<sep_out_sample>>>
mov %edx,%r9d
imul %esi,%r9d
mov %edx,%eax
imul %edx,%eax
imul %r8d,%eax
add %edi,%eax
add %edx,%eax
add %eax,%esi
add %esi,%r8d
add %r8d,%ecx
mov %r9d,%eax
sub %edi,%eax
lea 0x1(%rcx,%rax,1),%eax
sub %r9d,%edi
add %edi,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a3 * a2 - a1;
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += a4 + a5;
    }
    v9 = (a1 - a3 * a2) + a3;
    v10 = (a3 * a3) * a5;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 11
4 11
5 11
6 12
7 12
8 12
9 12
10 12
11 4
12 4
13 12
14 10
15 10
16 12
17 13
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
sub %edi,%ecx
sub %edx,%ecx
add %r8d,%ecx
add %ecx,%eax
lea (%rsi,%r8,1),%edx
add %edx,%eax
imul %esi,%edi
add %edi,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = (a4 - a1) - a3 + a5;
    if (a3 < a3)
    {
        v7 = (a3 + a4 + a1) + a5;
    }
    else
    {
        v7 = a2 + a5;
    }
    v8 = a2 * a1 + a5;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 14
2 14
3 14
4 14
5 4
6 4
7 4
8 14
9 11
10 14
11 13
12 13
13 14
14 15
<<<sep_out_sample>>>
lea (%rdi,%r8,2),%eax
add %edx,%eax
add %eax,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%esi
imul %r8d,%r8d
add %r8d,%ecx
sub %edi,%ecx
lea (%rsi,%rcx,1),%eax
add %edx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a2 + a3;
    }
    v8 = a4 + (a5 * a5) - a1;
    v9 = a3 + a1;
    v10 = a5 + a5;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 12
2 12
3 12
4 12
5 12
6 9
7 9
8 9
9 12
10 10
11 12
12 13
<<<sep_out_sample>>>
mov %edx,%r11d
imul %r8d,%r11d
add %edi,%r11d
add %esi,%r11d
mov $0x1,%r10d
sub %r8d,%r10d
imul %edx,%r10d
sub %esi,%r10d
cmp %r8d,%edx
jge 33 <func1+0x33>
mov %esi,%r9d
imul %r8d,%r9d
imul %edx,%r9d
imul %edx,%r9d
jmp 3d <func1+0x3d>
lea (%rcx,%rsi,1),%r9d
sub %edi,%r9d
add %esi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = (a1 + a3 * a5) + a2;
    v7 = (a3 - a3 * a5) - a2;
    if (a3 < a5)
    {
        v8 = a2 * a5 * a3 * a3;
    }
    else
    {
        v8 = a2 - (a1 - (a4 + a2));
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 5
6 5
7 5
8 5
9 6
10 6
11 8
12 8
13 8
14 8
15 8
16 12
17 12
18 12
19 14
20 14
21 14
22 14
23 14
24 14
25 14
26 15
<<<sep_out_sample>>>
lea (%rdx,%r8,1),%eax
cmp %edx,%r8d
jl 10 <func1+0x10>
mov %ecx,%eax
sub %r8d,%eax
add %esi,%eax
cmp %edi,%eax
jge 1e <func1+0x1e>
lea (%rsi,%rdi,1),%r9d
lea (%r9,%rdx,2),%r9d
jmp 31 <func1+0x31>
mov %esi,%r9d
imul %edx,%r9d
mov %r8d,%r10d
sub %r9d,%r10d
mov %r10d,%r9d
sub %ecx,%r9d
add %edx,%edi
add %esi,%edi
add %r8d,%edi
add %ecx,%edi
add %edi,%eax
add %r9d,%eax
sub %edx,%esi
sub %ecx,%esi
add %esi,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a5 < a3)
    {
        v6 = a3 + a5;
    }
    else
    {
        v6 = a2 + (a4 - a5);
    }
    if (v6 < a1)
    {
        v7 = a3 + (a2 + a1 + a3);
    }
    else
    {
        v7 = a5 - a2 * a3 - a4;
    }
    v8 = ((a2 - a3) - a4) + a5;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 6
2 4
3 4
4 10
5 10
6 10
7 12
8 12
9 14
10 14
11 14
12 18
13 18
14 18
15 18
16 18
17 18
18 21
19 21
20 21
21 21
22 21
23 21
24 20
25 20
26 20
27 21
28 22
<<<sep_out_sample>>>
lea (%rdx,%rcx,1),%r9d
cmp %esi,%r8d
jge 13 <func1+0x13>
mov %r8d,%r9d
neg %r9d
imul %edi,%r9d
lea (%r8,%rcx,1),%r11d
imul %edi,%r11d
add %r8d,%r11d
cmp %edi,%esi
jge 32 <func1+0x32>
mov %edi,%r10d
sub %esi,%r10d
imul %edi,%r10d
imul %esi,%r10d
jmp 3b <func1+0x3b>
mov %edx,%eax
imul %esi,%eax
lea (%rax,%rdi,2),%r10d
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
add %r11d,%eax
add %r10d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a5 < a2)
    {
        v6 = ((a3 - a3) - a5) * a1;
    }
    else
    {
        v6 = a4 + a2 + a3 - a2;
    }
    v7 = a5 + (a5 + a4) * a1;
    if (a2 < a1)
    {
        v8 = a2 * (a1 * (a1 - a2));
    }
    else
    {
        v8 = (a1 + a1) + a3 * a2;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a1)
    {
        v9 += a5 - a1 * a3;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 6
7 12
8 12
9 12
10 13
11 13
12 15
13 15
14 15
15 15
16 15
17 19
18 19
19 19
20 26
21 26
22 26
23 26
24 26
25 26
26 26
27 27
<<<sep_out_sample>>>
cmp %esi,%ecx
jge e <func1+0xe>
mov %ecx,%eax
sub %r8d,%eax
imul %esi,%eax
jmp 13 <func1+0x13>
mov %esi,%eax
imul %esi,%eax
add %edi,%edx
add %esi,%edx
add %r8d,%edx
lea 0x1(%rcx,%rdx,1),%edx
add %edx,%eax
sub %edi,%r8d
imul %r8d,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (a3 < a4)
        {
            v6 += (a2 * a3) - a3;
        }
        else
        {
            v6 += a5 * a3 * a1;
        }
    }
    if (a4 < a2)
    {
        v8 = a2 * (a4 - a5);
    }
    else
    {
        v8 = ((a2 * a2) - a1) + a1;
    }
    v9 = (a2 * a5) - a2 * a1;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 18
7 22
8 22
9 25
10 25
11 25
12 25
13 25
14 24
15 24
16 25
17 26
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
imul %r8d,%esi
add %esi,%eax
sub %r8d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a1 < a1)
    {
        v6 = (a4 - a4) - a2 * a5;
    }
    else
    {
        v6 = a2 * a5;
    }
    if (a2 < a2)
    {
        v7 = (a3 + a4 + a5) * a2;
    }
    else
    {
        v7 = a3 - a5;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 20
2 20
3 20
4 20
5 10
6 20
7 18
8 20
9 21
<<<sep_out_sample>>>
mov $0x1,%r11d
sub %edx,%r11d
imul %r8d,%r11d
imul %esi,%r11d
cmp %esi,%edx
jge 24 <func1+0x24>
mov %edx,%r10d
imul %edi,%r10d
add %ecx,%r10d
add %esi,%r10d
jmp 2d <func1+0x2d>
lea 0x1(%rdx,%rdx,1),%r10d
imul %esi,%r10d
cmp %edi,%edx
jle 43 <func1+0x43>
mov $0x1,%r9d
sub %r8d,%r9d
imul %esi,%r9d
sub %ecx,%r9d
jmp 4a <func1+0x4a>
mov %edx,%r9d
imul %r8d,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = (a5 - a5 * a3) * a2;
    if (a3 < a2)
    {
        v7 = a3 * a1 + a4 + a2;
    }
    else
    {
        v7 = (a3 + a3) * a2 + a2;
    }
    if (a1 < a3)
    {
        v8 = a2 - a5 * a2 - a4;
    }
    else
    {
        v8 = a3 * a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 5
6 5
7 7
8 7
9 7
10 7
11 7
12 11
13 11
14 13
15 13
16 15
17 15
18 15
19 15
20 15
21 19
22 19
23 21
24 21
25 21
26 21
27 21
28 21
29 21
30 22
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
add %ecx,%esi
lea (%rdi,%rcx,1),%eax
add %eax,%r8d
sub %edx,%r8d
add %esi,%r8d
imul %edx,%edx
sub %edx,%edi
sub %ecx,%edi
lea (%r8,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = ((a1 + a4) + a5) - a3;
    v7 = (a1 - (a3 * a3)) - a4;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 4
7 4
8 6
9 5
10 5
11 5
12 6
13 7
<<<sep_out_sample>>>
cmp %r8d,%edx
jge d <func1+0xd>
mov %edx,%r9d
sub %r8d,%r9d
jmp 1a <func1+0x1a>
mov %ecx,%eax
imul %edi,%eax
add %edx,%eax
mov %edi,%r9d
sub %eax,%r9d
lea (%rdx,%rdx,1),%eax
mov %ecx,%r10d
sub %esi,%r10d
sub %r8d,%eax
test %edi,%edi
cmovg %r10d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a3 < a5)
    {
        v6 = a3 - a5;
    }
    else
    {
        v6 = a1 - (a4 * a1 + a3);
    }
    if (v7 < a1)
    {
        v7 = a4 - a2;
    }
    else
    {
        v7 = (a3 + a3) - a5;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += a1 * a4 + a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 10
10 10
11 18
12 14
13 14
14 14
15 14
16 14
17 25
18 25
19 25
20 25
21 25
22 25
23 26
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
sub %esi,%edx
add %edx,%eax
add %r8d,%edi
imul %edi,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a5 - (a5 - a3 + a2);
    v7 = a4 * a5 + a4 * a1;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 6
7 5
8 5
9 6
10 7
<<<sep_out_sample>>>
cmp %r8d,%ecx
jge 11 <func1+0x11>
lea (%r8,%rcx,1),%r9d
sub %edi,%r9d
add %edx,%r9d
jmp 1d <func1+0x1d>
mov %ecx,%r9d
sub %edx,%r9d
add %esi,%r9d
add %r8d,%r9d
test %ecx,%ecx
jle 29 <func1+0x29>
lea (%rdi,%rdi,1),%eax
imul %esi,%eax
jmp 32 <func1+0x32>
mov %edi,%eax
sub %esi,%eax
add %r8d,%eax
sub %esi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a4 < a5)
    {
        v6 = a5 + a4 - a1 + a3;
    }
    else
    {
        v6 = a5 + ((a4 - a3) + a2);
    }
    if (v7 < a4)
    {
        v7 = a2 * (a1 + a1);
    }
    else
    {
        v7 = (a1 - a2 + a5) - a2;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 10
11 12
12 12
13 14
14 14
15 14
16 18
17 18
18 18
19 18
20 20
21 20
22 20
23 20
24 20
25 20
26 21
<<<sep_out_sample>>>
mov %edx,%eax
sub %ecx,%eax
test %ecx,%ecx
jg 12 <func1+0x12>
mov %edx,%eax
imul %esi,%eax
sub %ecx,%eax
imul %edi,%eax
add %edi,%edx
add %edx,%esi
add %r8d,%esi
add %esi,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (v6 < a4)
    {
        v6 = ((a3 - a3) + a3) - a4;
    }
    else
    {
        v6 = (a3 * a2 - a4) * a1;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += a3 * a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 6
2 6
3 4
4 4
5 10
6 10
7 10
8 10
9 17
10 17
11 17
12 17
13 17
14 18
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a3 - a1 + a2;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += a5 * (a3 - a5);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 14
2 14
3 14
4 14
5 15
<<<sep_out_sample>>>
mov %ecx,%r9d
sub %edx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
sub %esi,%ecx
sub %r8d,%edi
add %edi,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a5 + (a4 - a3) - a5;
    v7 = a4 - a2 + (a1 - a5);
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 5
9 5
10 5
11 6
12 7
<<<sep_out_sample>>>
cmp %ecx,%edx
jge 14 <func1+0x14>
mov %edi,%r10d
imul %edi,%r10d
add %ecx,%r10d
lea (%r8,%rdx,1),%r9d
jmp 2c <func1+0x2c>
mov %esi,%r10d
sub %edi,%r10d
mov %ecx,%eax
imul %edx,%eax
add %eax,%r10d
mov %ecx,%r9d
imul %esi,%r9d
neg %r9d
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
mov %ecx,%edx
sub %edi,%edx
add %edx,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a3 < a4)
    {
        v6 = a1 * a1 + a4;
    }
    else
    {
        v6 = a2 - a1 + a4 * a3;
    }
    if (a3 < a4)
    {
        v7 = a5 + a3;
    }
    else
    {
        v7 = (a5 - a4 * a2) - a5;
    }
    v8 = a4 - (a1 - a4);
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        if (a4 < a1)
        {
            v9 += a4 + a4 - a4;
        }
        else
        {
            v9 += (a2 * a4) - a4;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 14
7 14
8 10
9 10
10 10
11 10
12 10
13 18
14 18
15 18
16 33
17 33
18 33
19 33
20 33
21 33
22 20
23 20
24 20
25 33
26 34
<<<sep_out_sample>>>
mov %r8d,%eax
sub %edx,%eax
mov %eax,%r9d
imul %edi,%r9d
mov %edi,%r10d
imul %edx,%r10d
cmp %ecx,%esi
cmovge %r10d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = (a5 - a3) * a1;
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += a3 - (a5 * a3);
    }
    if (a2 < a4)
    {
        v9 = a5 - a3;
    }
    else
    {
        v9 = a1 * a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 16
6 16
7 16
8 16
9 18
10 18
11 18
12 18
13 18
14 18
15 19
<<<sep_out_sample>>>
lea 0x1(%rdx,%rdx,2),%eax
add %eax,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += (a4 - a3) - a2;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += a4 + a3;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a3)
    {
        if (v11 < a5)
        {
            v10 += a3 * (a1 + a4);
        }
        else
        {
            v10 += a5 * a2 - a5;
        }
    }
    v12 = a3 - (a1 - a3);
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 27
2 27
3 27
4 27
5 28
<<<sep_out_sample>>>
cmp %r8d,%esi
jge 12 <func1+0x12>
mov %r8d,%eax
sub %esi,%eax
sub $0x1,%eax
imul %edx,%eax
jmp 1a <func1+0x1a>
mov %edx,%eax
sub %esi,%eax
add %edi,%eax
sub %esi,%eax
add %edi,%edx
add %edx,%esi
add %r8d,%esi
add %ecx,%esi
add %eax,%esi
sub %r8d,%edx
sub %ecx,%edx
lea 0x1(%rsi,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a2 < a5)
    {
        v6 = (a5 - a2) * a3 - a3;
    }
    else
    {
        v6 = a3 - a2 + a1 - a2;
    }
    v7 = ((a1 + a3) - a5) - a4;
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += a1 + a3 - a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 12
13 18
14 18
15 18
16 18
17 12
18 12
19 18
20 19
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %eax,%ecx
mov %edx,%r9d
imul %edi,%r9d
sub %r9d,%ecx
lea (%r8,%rsi,1),%r9d
lea (%rcx,%r9,1),%eax
sub %edi,%r8d
add %r8d,%edx
add %edx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a4 < a4)
    {
        v6 = a5 - a3;
    }
    else
    {
        v6 = a4 - a4 - (a3 * a1);
    }
    v7 = (a5 + a1 - a1) + a2;
    v8 = (a3 + (a5 - a1)) + a2;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 14
2 14
3 14
4 14
5 10
6 10
7 14
8 12
9 14
10 13
11 13
12 13
13 14
14 15
<<<sep_out_sample>>>
lea (%rdx,%rdi,1),%eax
lea (%rcx,%rcx,1),%r9d
cmp %edx,%edi
cmovge %r9d,%eax
mov %ecx,%r9d
sub %r8d,%r9d
cmp %r8d,%edi
jl 20 <func1+0x20>
lea -0x1(%rcx),%r9d
imul %edx,%r9d
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (a1 < a4)
        {
            v6 += a5 - a5;
        }
        else
        {
            v6 += a1 * a1;
        }
    }
    if (a1 < a3)
    {
        v8 = a3 + a1;
    }
    else
    {
        v8 = a4 + a4;
    }
    if (a1 < a5)
    {
        v9 = a4 - a5;
    }
    else
    {
        v9 = a3 * a4 - a3;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a1)
    {
        v10 += a5 * a2;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 18
5 26
6 26
7 24
8 24
9 30
10 30
11 37
12 37
13 37
14 37
15 37
16 37
17 38
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a1 + a4;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        if (v8 < a5)
        {
            v8 += (a2 + a1) * a5;
        }
        else
        {
            v8 += (a4 * a1) - a4;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 21
5 22
<<<sep_out_sample>>>
lea (%rcx,%rdx,1),%r9d
lea (%rcx,%rcx,1),%eax
test %edi,%edi
jle 14 <func1+0x14>
lea 0x1(%rdx),%eax
imul %edx,%eax
imul %esi,%eax
add %edi,%edx
add %esi,%edx
add %edx,%r8d
add %r8d,%ecx
add %r9d,%ecx
add %ecx,%eax
add %esi,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = (a4 + a2 - a2) + a3;
    if (v7 < a1)
    {
        v7 = ((a3 * a3) + a3) * a2;
    }
    else
    {
        v7 = a4 + a4;
    }
    v8 = a1 - (a2 - a2) + a2;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 11
3 5
4 5
5 7
6 7
7 7
8 14
9 14
10 14
11 14
12 14
13 14
14 13
15 14
16 15
<<<sep_out_sample>>>
lea (%rsi,%rsi,1),%eax
cmp %edx,%esi
jge e <func1+0xe>
mov %ecx,%eax
sub %esi,%eax
imul %edx,%eax
lea (%rdi,%rdx,1),%r9d
add %r9d,%esi
add %r8d,%esi
add %ecx,%esi
add %eax,%esi
lea (%rdi,%rdx,2),%edx
sub %r8d,%edx
lea (%rsi,%rdx,1),%eax
sub %ecx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a2 < a3)
    {
        v6 = a4 * a3 - (a2 * a3);
    }
    else
    {
        v6 = (a2 + a2) - a5 + a5;
    }
    v7 = a3 + a3 - a5 + a1;
    v8 = a1 - a4;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 6
7 14
8 14
9 14
10 14
11 14
12 12
13 12
14 14
15 13
16 14
17 15
<<<sep_out_sample>>>
lea (%rdx,%rdi,1),%eax
mov %esi,%r9d
imul %esi,%r9d
lea (%rsi,%rax,1),%r10d
add %r8d,%r10d
add %r10d,%ecx
add %r9d,%ecx
add %ecx,%eax
imul %r8d,%esi
add %esi,%edx
sub %edx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a2 * a2 - a1 + a1;
    if (a1 < a1)
    {
        v7 = (a1 * a3 + a4) + a3;
    }
    else
    {
        v7 = a3 + a1;
    }
    v8 = a1 - (a2 * a5 + a3);
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 11
2 4
3 4
4 14
5 14
6 14
7 14
8 14
9 13
10 13
11 13
12 14
13 15
<<<sep_out_sample>>>
mov %esi,%r9d
imul %r8d,%r9d
test %ecx,%ecx
jle 16 <func1+0x16>
mov %esi,%eax
imul %esi,%eax
add %edx,%eax
add %esi,%eax
jmp 22 <func1+0x22>
mov %r8d,%eax
imul %r8d,%eax
imul %edi,%eax
sub %ecx,%eax
add %r9d,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (v6 < a5)
        {
            v6 += a5 + a2 * a2;
        }
        else
        {
            v6 += a1 + a2 + a4;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        if (a1 < a5)
        {
            v8 += a3 * a2 + a3;
        }
        else
        {
            v8 += a4 - a1 + a1;
        }
    }
    v10 = a2 * a5;
    if (v6 < a4)
    {
        v11 = (a2 * a2 + a3) + a2;
    }
    else
    {
        v11 = ((a5 * a5) * a1) - a4;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 28
2 28
3 29
4 29
5 31
6 31
7 31
8 31
9 31
10 35
11 35
12 35
13 35
14 37
15 37
16 37
17 37
18 37
19 37
20 38
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a2 - a3;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        if (a3 < a5)
        {
            v8 += (a5 + a4) + a2;
        }
        else
        {
            v8 += a4 + a3;
        }
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a4)
    {
        v10 += a3 + a2 + a1;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 26
2 26
3 26
4 26
5 27
<<<sep_out_sample>>>
mov %r8d,%r9d
sub %edi,%r9d
cmp %edi,%r8d
jge 1a <func1+0x1a>
mov %esi,%r9d
imul %edx,%r9d
mov %edi,%eax
sub %edx,%eax
imul %eax,%r9d
cmp %edx,%r8d
jge 2d <func1+0x2d>
mov %r8d,%r11d
sub %ecx,%r11d
add %edx,%r11d
add %esi,%r11d
jmp 35 <func1+0x35>
lea (%rdi,%r8,1),%r11d
imul %esi,%r11d
mov %ecx,%r10d
neg %r10d
sub %edi,%r10d
cmp %edx,%r9d
jge 4d <func1+0x4d>
lea (%rcx,%rdx,1),%r10d
add %edi,%r10d
sub %esi,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %eax,%r9d
lea (%r9,%r11,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a5 - a1;
    }
    if (a5 < a1)
    {
        v8 = a2 * a3 * (a1 - a3);
    }
    else
    {
        v8 = (a2 - a2) + a5 - a1;
    }
    if (a5 < a3)
    {
        v9 = a2 - (a4 - a5 - a3);
    }
    else
    {
        v9 = a2 * (a1 + a5);
    }
    if (v8 < a3)
    {
        v10 = (a1 + (a4 + a3)) - a2;
    }
    else
    {
        v10 = (a2 - a4 - a2) - a1;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 15
2 15
3 9
4 9
5 11
6 11
7 11
8 11
9 11
10 17
11 17
12 19
13 19
14 19
15 19
16 19
17 23
18 23
19 31
20 31
21 31
22 25
23 25
24 27
25 27
26 27
27 33
28 33
29 33
30 33
31 33
32 33
33 33
34 34
<<<sep_out_sample>>>
lea (%rsi,%rcx,1),%r11d
cmp %esi,%r8d
mov $0x0,%eax
cmovl %eax,%r11d
mov %ecx,%r10d
sub %esi,%r10d
test %edi,%edi
jle 23 <func1+0x23>
lea (%rsi,%rdx,1),%eax
lea (%rax,%rcx,2),%r9d
jmp 31 <func1+0x31>
mov %ecx,%eax
imul %edx,%eax
imul %edx,%eax
mov %esi,%r9d
sub %eax,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
add %r8d,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a5 < a2)
    {
        v6 = a5 - a5;
    }
    else
    {
        v6 = a2 + a4;
    }
    v7 = a4 - a2;
    if (v8 < a1)
    {
        v8 = a2 + a3 + (a4 + a4);
    }
    else
    {
        v8 = a2 - a4 * a3 * a3;
    }
    v9 = a5 + a1;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 12
6 12
7 13
8 13
9 15
10 15
11 15
12 19
13 19
14 19
15 19
16 19
17 22
18 22
19 22
20 22
21 22
22 22
23 22
24 21
25 22
26 23
<<<sep_out_sample>>>
lea (%rcx,%rcx,2),%eax
sub %esi,%eax
cmp $0x1,%edi
jle 18 <func1+0x18>
mov %edx,%r9d
sub %edi,%r9d
add %edx,%r9d
add %esi,%r9d
jmp 23 <func1+0x23>
lea (%rdi,%rdx,1),%r9d
imul %r8d,%r9d
add %edi,%r9d
lea 0x1(%r9,%rdi,1),%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = (a4 + (a4 + a4)) - a2;
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a5 - a3;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        v9 += a4 + a3;
    }
    if (v8 < a1)
    {
        v11 = a2 - (a1 - a3 - a3);
    }
    else
    {
        v11 = a5 * (a1 + a3) + a1;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 15
4 15
5 17
6 17
7 17
8 17
9 17
10 21
11 21
12 21
13 23
14 23
15 23
16 23
17 23
18 23
19 24
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea (%r8,%rcx,1),%esi
sub %edx,%ecx
lea 0x1(%rsi,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a4 - a3;
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        if (v8 < a1)
        {
            v7 += a1 * a3 * a5;
        }
        else
        {
            v7 += a5 + a4 + a2;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 4
6 17
7 18
<<<sep_out_sample>>>
mov %r8d,%r10d
sub %ecx,%r10d
test %edi,%edi
jle 19 <func1+0x19>
mov %edx,%r9d
sub %edi,%r9d
add %edx,%r9d
imul %edx,%r9d
jmp 27 <func1+0x27>
mov %esi,%r9d
imul %ecx,%r9d
add %r8d,%r9d
imul %r8d,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
add %edi,%ecx
add %eax,%ecx
add %r8d,%edi
imul %esi,%edx
sub %edx,%edi
lea (%rcx,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a5 - a4;
    if (v7 < a1)
    {
        v7 = a3 * (a3 - a1 + a3);
    }
    else
    {
        v7 = ((a2 * a4) + a5) * a5;
    }
    v8 = a4 - a3 + a1 + a3;
    v9 = a1 + a5 - a2 * a3;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 5
4 5
5 7
6 7
7 7
8 7
9 7
10 11
11 11
12 11
13 11
14 15
15 15
16 15
17 15
18 15
19 15
20 13
21 15
22 14
23 14
24 14
25 15
26 16
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
lea (%r8,%rcx,1),%eax
mov %esi,%r8d
imul %esi,%r8d
add %ecx,%r8d
mov %edi,%r9d
sub %r8d,%r9d
add %r9d,%eax
mov %edi,%r10d
sub %edx,%r10d
add %r10d,%eax
mov %ecx,%edx
sub %edi,%edx
add %edx,%ecx
imul %ecx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a1 - (a4 + a2 * a2);
    v7 = a1 - a3;
    v8 = (a4 - a1 + a4) * a2;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 7
2 7
3 7
4 7
5 4
6 4
7 4
8 4
9 4
10 7
11 5
12 5
13 7
14 6
15 6
16 6
17 6
18 7
19 8
<<<sep_out_sample>>>
add %edx,%edi
add %esi,%edi
add %r8d,%edi
mov %r8d,%eax
sub %edx,%eax
sub %edx,%eax
lea (%rdi,%rcx,2),%ecx
lea 0x1(%rcx,%rax,1),%eax
imul %edx,%r8d
imul %r8d,%esi
imul %esi,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a1 + a3 + a5;
    }
    if (a4 < a4)
    {
        v8 = (a3 * a4) * a3 * a2;
    }
    else
    {
        v8 = (a5 - a3) - a3 + a4;
    }
    v9 = (a3 * a5 * a2) * a3;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 15
5 15
6 15
7 15
8 18
9 17
10 17
11 17
12 18
13 19
<<<sep_out_sample>>>
lea (%rdx,%rdx,1),%eax
mov %r8d,%r9d
sub %edi,%r9d
cmp %r8d,%ecx
cmovl %eax,%r9d
test %r8d,%r8d
jle 1b <func1+0x1b>
lea (%r8,%r8,1),%r10d
jmp 23 <func1+0x23>
lea (%r8,%r8,1),%eax
lea (%rax,%rdi,2),%r10d
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%eax
add %r10d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    if (a4 < a5)
    {
        v6 = a3 + (a3 - a3) + a3;
    }
    else
    {
        v6 = ((a2 + a5) - a1) - a2;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        if (a1 < a1)
        {
            v7 += a4 + a4;
        }
        else
        {
            v7 += a5 + a1 + a2;
        }
    }
    if (v7 < a5)
    {
        v9 = a5 + a5;
    }
    else
    {
        v9 = a1 + a1 + (a5 + a5);
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a4)
    {
        v10 += a3 + a2 + a3;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 6
6 24
7 24
8 26
9 26
10 30
11 30
12 37
13 37
14 37
15 37
16 37
17 37
18 38
<<<sep_out_sample>>>
cmp %edi,%ecx
jge 15 <func1+0x15>
mov %r8d,%eax
imul %esi,%eax
mov %edx,%r10d
sub %eax,%r10d
mov %r10d,%eax
jmp 24 <func1+0x24>
mov %esi,%r9d
imul %esi,%r9d
mov %ecx,%eax
imul %edi,%eax
add %r9d,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a4 < a1)
    {
        v6 = a3 - (a5 * a2);
    }
    else
    {
        v6 = a2 * a2 + a4 * a1;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        if (v6 < a2)
        {
            v7 += (a3 - a1) - a3;
        }
        else
        {
            v7 += a4 - a3;
        }
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a1)
    {
        if (v7 < a4)
        {
            v9 += (a5 * a2) * a1;
        }
        else
        {
            v9 += a1 + a3;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 6
9 10
10 10
11 10
12 10
13 10
14 36
15 36
16 36
17 36
18 36
19 37
<<<sep_out_sample>>>
lea (%rdi,%rcx,1),%r10d
add %esi,%r10d
imul %esi,%r10d
cmp %edx,%esi
jle 1f <func1+0x1f>
mov %esi,%r9d
imul %esi,%r9d
imul %r8d,%r9d
add %ecx,%r9d
jmp 2a <func1+0x2a>
lea (%r8,%rcx,1),%r9d
imul %esi,%r9d
add %edx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = (a1 + a4 + a2) * a2;
    if (a3 < a2)
    {
        v7 = a4 + (a5 * (a2 * a2));
    }
    else
    {
        v7 = a3 + ((a5 + a4) * a2);
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 5
5 5
6 7
7 7
8 7
9 7
10 7
11 11
12 11
13 11
14 13
15 13
16 13
17 13
18 13
19 13
20 14
<<<sep_out_sample>>>
mov %ecx,%r9d
sub %r8d,%r9d
cmp %edx,%r9d
jge 1a <func1+0x1a>
mov %edx,%r10d
imul %edx,%r10d
sub %ecx,%r10d
sub %edx,%r10d
jmp 22 <func1+0x22>
lea (%rdx,%rcx,1),%r10d
imul %ecx,%r10d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
lea (%r9,%r10,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a4 - a5;
    if (v6 < a3)
    {
        v7 = a3 * a3 - a4 - a3;
    }
    else
    {
        v7 = (a3 + a4) * a4;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 5
4 5
5 7
6 7
7 7
8 7
9 7
10 11
11 11
12 13
13 13
14 13
15 13
16 13
17 13
18 14
<<<sep_out_sample>>>
push %rbx
cmp %ecx,%edi
jge 10 <func1+0x10>
mov %edx,%ebx
sub %esi,%ebx
add %ecx,%ebx
add %r8d,%ebx
jmp 1a <func1+0x1a>
lea 0x1(%rsi),%ebx
imul %ecx,%ebx
imul %r8d,%ebx
lea 0x1(%rdx),%r9d
imul %esi,%r9d
lea (%r9,%rdi,1),%r11d
mov %edi,%r10d
imul %ecx,%r10d
sub %edx,%r10d
add %edi,%r10d
sub %esi,%r9d
mov %ecx,%eax
imul %esi,%eax
test %edi,%edi
cmovg %eax,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %ebx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a1 < a4)
    {
        v6 = a3 - a2 + a4 + a5;
    }
    else
    {
        v6 = a5 * (a4 + (a2 * a4));
    }
    v7 = a1 + ((a3 * a2) + a2);
    v8 = ((a1 * a4) - a3) + a1;
    if (v9 < a1)
    {
        v9 = a4 * a2;
    }
    else
    {
        v9 = a2 * a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 4
3 4
4 6
5 6
6 6
7 6
8 6
9 10
10 10
11 10
12 12
13 12
14 12
15 13
16 13
17 13
18 13
19 20
20 16
21 16
22 16
23 16
24 22
25 22
26 22
27 22
28 22
29 22
30 22
31 22
32 23
33 23
<<<sep_out_sample>>>
cmp %r8d,%ecx
jge 12 <func1+0x12>
mov %esi,%eax
imul %r8d,%eax
sub %edi,%eax
sub %r8d,%eax
jmp 18 <func1+0x18>
mov %edi,%eax
imul %r8d,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a4 < a5)
    {
        v6 = ((a2 * a5) - a1) - a5;
    }
    else
    {
        v6 = a1 * a5;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        if (a5 < a5)
        {
            v7 += a3 * a1 + a3;
        }
        else
        {
            v7 += a3 + a3 * a5;
        }
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        v9 += a3 + a5 + a5;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 29
11 29
12 29
13 29
14 29
15 30
<<<sep_out_sample>>>
mov %r8d,%r9d
imul %ecx,%r9d
test %r8d,%r8d
jle 18 <func1+0x18>
mov %r8d,%eax
imul %r9d,%eax
imul %edi,%eax
jmp 21 <func1+0x21>
lea (%rdx,%rsi,1),%eax
imul %r8d,%eax
add %ecx,%eax
cmp %edi,%r8d
jge 34 <func1+0x34>
mov %ecx,%r10d
sub %r8d,%r10d
sub %r8d,%r10d
add %edx,%r10d
jmp 3c <func1+0x3c>
lea 0x1(%rdi),%r10d
imul %r8d,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a5 * a4;
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += (a4 * a3) + a1;
    }
    if (v9 < a5)
    {
        v9 = a1 * (a4 * a5 * a5);
    }
    else
    {
        v9 = (a3 + a2) * a5 + a4;
    }
    if (a5 < a1)
    {
        v10 = a3 + (a4 - a5 - a5);
    }
    else
    {
        v10 = a5 + a5 * a1;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 10
4 10
5 12
6 12
7 12
8 12
9 16
10 16
11 16
12 18
13 18
14 20
15 20
16 20
17 20
18 20
19 24
20 24
21 26
22 26
23 26
24 26
25 26
26 26
27 26
28 27
<<<sep_out_sample>>>
test %r8d,%r8d
jle 12 <func1+0x12>
mov %edx,%eax
imul %edi,%eax
imul %ecx,%eax
imul %ecx,%eax
jmp 1c <func1+0x1c>
mov %edi,%eax
imul %ecx,%eax
sub %edx,%eax
imul %edx,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (a5 < a3)
        {
            v6 += (a2 * a2) * a4;
        }
        else
        {
            v6 += (a1 - a2) - a1;
        }
    }
    if (v8 < a5)
    {
        v8 = a3 * a1 * a4 * a4;
    }
    else
    {
        v8 = a3 * (a1 * a4 - a3);
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        if (a2 < a4)
        {
            v9 += a3 * a2;
        }
        else
        {
            v9 += a4 - a4 * a1;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 18
7 18
8 22
9 22
10 22
11 22
12 36
13 36
14 36
15 36
16 36
17 37
<<<sep_out_sample>>>
mov %r8d,%r9d
sub %edi,%r9d
mov %r8d,%r11d
imul %edx,%r11d
add %r9d,%r11d
cmp %ecx,%r8d
jl 20 <func1+0x20>
lea (%r8,%rcx,1),%r9d
imul %ecx,%r9d
add %esi,%r9d
cmp %edi,%r8d
jle 35 <func1+0x35>
mov %esi,%r10d
sub %r8d,%r10d
add $0x1,%r10d
imul %r8d,%r10d
jmp 42 <func1+0x42>
mov %r8d,%r10d
imul %ecx,%r10d
sub %esi,%r10d
add %edi,%r10d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r11d,%ecx
add %ecx,%r9d
lea (%r9,%r10,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a5 * a3 - (a1 - a5);
    if (a5 < a4)
    {
        v7 = a5 + (a1 - a1 - a1);
    }
    else
    {
        v7 = a2 + a4 * (a5 + a4);
    }
    if (a1 < a5)
    {
        v8 = a5 + (a2 - a5) * a5;
    }
    else
    {
        v8 = (a5 * a4) - a2 + a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 4
6 5
7 5
8 11
9 11
10 11
11 13
12 13
13 15
14 15
15 15
16 15
17 15
18 19
19 19
20 19
21 19
22 21
23 21
24 21
25 21
26 21
27 21
28 21
29 22
<<<sep_out_sample>>>
test %edi,%edi
jle 18 <func1+0x18>
mov %edx,%r9d
imul %edx,%r9d
mov $0x1,%eax
sub %r9d,%eax
imul %edx,%eax
jmp 20 <func1+0x20>
lea (%rsi,%rdi,1),%eax
sub %ecx,%eax
add %r8d,%eax
lea (%rdi,%rdx,1),%r9d
add %esi,%r9d
add %r8d,%r9d
add %r9d,%ecx
add %eax,%ecx
sub %edi,%r8d
sub %edx,%r8d
sub %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (v6 < a1)
    {
        v6 = a3 - a3 * (a3 * a3);
    }
    else
    {
        v6 = (a2 + a1 - a4) + a5;
    }
    v7 = a5 - a1 - a3 - a2;
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        if (a3 < a3)
        {
            v8 += (a2 - a5) * a3;
        }
        else
        {
            v8 += a3 + a3;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 6
9 10
10 10
11 10
12 25
13 25
14 25
15 25
16 25
17 12
18 12
19 12
20 25
21 26
<<<sep_out_sample>>>
mov %edi,%eax
neg %eax
test %r8d,%r8d
jle e <func1+0xe>
lea (%rdi,%rdx,2),%eax
sub %ecx,%eax
lea 0x1(%rax,%rdi,1),%eax
add %eax,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (a2 < a5)
        {
            v6 += a2 - a2 - a3;
        }
        else
        {
            v6 += a2 * a1 + a4;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += (a4 + a3) + a4;
    }
    if (v10 < a5)
    {
        v10 = a3 + (a1 - (a4 - a3));
    }
    else
    {
        v10 = a1 * (a1 - a1) - a1;
    }
    v11 = 0;
    for (v12 = 0; v12++; v12<a5)
    {
        v11 += a4 + a1;
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 27
2 27
3 21
4 21
5 23
6 23
7 34
8 34
9 34
10 34
11 34
12 35
<<<sep_out_sample>>>
lea (%r8,%rdi,1),%eax
mov %esi,%r10d
sub %eax,%r10d
mov %r10d,%eax
cmp %edx,%r10d
jge 22 <func1+0x22>
mov %r8d,%r9d
imul %r8d,%r9d
imul %edx,%r9d
add %esi,%r9d
jmp 2d <func1+0x2d>
lea 0x1(%rsi),%r9d
imul %r8d,%r9d
add %esi,%r9d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%eax
lea 0x1(%r9,%rax,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a2 - (a5 + a1);
    if (v6 < a3)
    {
        v7 = a3 * (a5 * a5) + a2;
    }
    else
    {
        v7 = a2 * a5 + a5 + a2;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += a2 - a1 + a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 5
6 5
7 7
8 7
9 7
10 7
11 7
12 11
13 11
14 11
15 18
16 18
17 18
18 18
19 18
20 18
21 19
<<<sep_out_sample>>>
cmp %esi,%edi
jge c <func1+0xc>
mov %ecx,%r10d
sub %edx,%r10d
jmp 15 <func1+0x15>
lea -0x1(%rdi,%rdi,1),%r10d
imul %esi,%r10d
lea (%r8,%rsi,1),%r9d
cmp %ecx,%edi
jl 24 <func1+0x24>
mov %ecx,%r9d
imul %esi,%r9d
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
imul %r8d,%edi
imul %edi,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a1 < a2)
    {
        v6 = a4 - a3;
    }
    else
    {
        v6 = ((a1 + a1) * a2) - a2;
    }
    if (a1 < a4)
    {
        v7 = a5 + a2;
    }
    else
    {
        v7 = a1 + a4 * a2 - a1;
    }
    v8 = a5 * (a1 * a5 * a1);
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        if (a1 < a1)
        {
            v9 += (a3 * a3) * a5;
        }
        else
        {
            v9 += a3 * a5 + a1;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 14
9 12
10 12
11 18
12 18
13 33
14 33
15 33
16 33
17 33
18 33
19 20
20 20
21 33
22 34
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
lea 0x1(%rsi,%rax,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a1 - a5 - (a1 + a4);
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += (a4 * a3) + a3;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        if (v7 < a4)
        {
            v9 += a3 - a3;
        }
        else
        {
            v9 += (a1 - a5) * a5;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 23
<<<sep_out_sample>>>
lea (%r8,%rcx,1),%eax
lea (%rsi,%rdx,1),%r9d
cmp %edx,%edi
cmovle %r9d,%eax
mov %ecx,%r9d
imul %r8d,%r9d
add $0x1,%r9d
imul %edx,%r9d
add %r9d,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += (a1 * a1) + a1;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += a5 + (a1 + a3);
    }
    if (a3 < a1)
    {
        v10 = a5 + a4;
    }
    else
    {
        v10 = a2 + a3;
    }
    v11 = a3 + (a4 * a5 * a3);
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 16
4 16
5 22
6 22
7 22
8 22
9 23
10 23
11 23
12 23
13 23
14 23
15 24
<<<sep_out_sample>>>
mov %esi,%eax
imul %esi,%eax
add %edi,%eax
add %edx,%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
mov %edx,%r9d
imul %edx,%r9d
add %r9d,%edi
add %edi,%esi
lea 0x1(%rax,%rsi,1),%eax
add %edx,%ecx
sub %r8d,%ecx
imul %ecx,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a1 + a3 * a3 + a2;
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        if (a2 < a4)
        {
            v7 += a3 - a1 + a2;
        }
        else
        {
            v7 += a3 + a4 + a3;
        }
    }
    v9 = ((a4 + a3) - a5) * a3;
    v10 = a2 * a2;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 19
4 19
5 19
6 19
7 19
8 4
9 4
10 4
11 4
12 19
13 17
14 17
15 17
16 19
17 20
<<<sep_out_sample>>>
push %rbx
mov %edx,%ebx
imul %edx,%ebx
lea (%r8,%rcx,1),%r11d
mov %esi,%r10d
imul %r8d,%r10d
mov %edi,%r9d
sub %ecx,%r9d
add %edi,%r9d
cmp %ecx,%r8d
jle 2c <func1+0x2c>
mov %edx,%r9d
imul %r8d,%r9d
add %esi,%r9d
add %r8d,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %ebx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a3 * a3;
    v7 = a5 + a4;
    v8 = a2 * a5;
    if (a4 < a5)
    {
        v9 = (a2 + a3 * a5) + a5;
    }
    else
    {
        v9 = a1 + (a1 - a4);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 4
3 4
4 5
5 6
6 6
7 13
8 13
9 13
10 7
11 7
12 9
13 9
14 9
15 9
16 15
17 15
18 15
19 15
20 15
21 15
22 15
23 15
24 16
25 16
<<<sep_out_sample>>>
mov $0x0,%eax
cmp %edx,%esi
jl 16 <func1+0x16>
lea (%rcx,%rsi,1),%eax
mov %ecx,%r9d
imul %esi,%r9d
sub %r9d,%eax
lea (%rcx,%rdi,1),%r9d
test %edx,%edx
jle 2c <func1+0x2c>
mov %r8d,%r10d
sub %esi,%r10d
sub %ecx,%r10d
sub %ecx,%r10d
jmp 39 <func1+0x39>
mov %ecx,%r10d
sub %edx,%r10d
imul %r8d,%r10d
add %edx,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%eax
lea 0x1(%r9,%rax,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a2 < a3)
    {
        v6 = (a5 * a4) - a5 * a4;
    }
    else
    {
        v6 = a4 + a2 - a4 * a2;
    }
    v7 = a4 + a1;
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += a1 + a4;
    }
    if (v10 < a3)
    {
        v10 = a5 - a2 - a4 - a4;
    }
    else
    {
        v10 = (a4 - a3) * a5 + a3;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 4
3 4
4 10
5 10
6 10
7 10
8 12
9 18
10 18
11 20
12 20
13 20
14 20
15 20
16 24
17 24
18 24
19 24
20 26
21 26
22 26
23 26
24 26
25 26
26 26
27 27
<<<sep_out_sample>>>
push %rbx
mov %r8d,%eax
imul %edx,%eax
mov %eax,%r9d
imul %edx,%r9d
mov %edi,%ebx
sub %r9d,%ebx
mov %ebx,%r9d
cmp %ebx,%r8d
jle 27 <func1+0x27>
mov %edi,%eax
sub %r8d,%eax
add %edx,%eax
imul %edi,%eax
jmp 2d <func1+0x2d>
imul %r8d,%eax
sub %edx,%eax
cmp %ecx,%edi
jle 39 <func1+0x39>
mov %ecx,%r11d
sub %esi,%r11d
jmp 48 <func1+0x48>
mov %ecx,%r11d
imul %esi,%r11d
add $0x1,%r11d
imul %edi,%r11d
mov %edi,%r10d
sub %ecx,%r10d
cmp %edx,%r8d
jle 61 <func1+0x61>
lea (%rcx,%rcx,1),%ebx
mov %ecx,%r10d
imul %r8d,%r10d
imul %ebx,%r10d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
add %r9d,%eax
add %r11d,%eax
add %r10d,%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a1 - (a5 * a3 * a3);
    if (v6 < a5)
    {
        v7 = a1 * (a3 + (a1 - a5));
    }
    else
    {
        v7 = a3 * a5 * a5 - a3;
    }
    if (a4 < a1)
    {
        v8 = ((a2 - a2) - a2) + a4;
    }
    else
    {
        v8 = (a4 * a2 * a1) + a1;
    }
    if (a3 < a5)
    {
        v9 = (a4 + a4) * (a4 * a5);
    }
    else
    {
        v9 = a1 - a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 4
3 4
4 4
5 4
6 4
7 4
8 4
9 5
10 5
11 7
12 7
13 7
14 7
15 7
16 11
17 11
18 13
19 13
20 15
21 15
22 15
23 19
24 19
25 19
26 19
27 27
28 27
29 21
30 21
31 23
32 23
33 23
34 23
35 29
36 29
37 29
38 29
39 29
40 29
41 29
42 29
43 30
44 30
<<<sep_out_sample>>>
lea 0x2(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12, v13 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (a2 < a3)
        {
            v6 += a4 - a5;
        }
        else
        {
            v6 += (a2 - a2) - a2;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        if (v6 < a3)
        {
            v8 += a5 * a3;
        }
        else
        {
            v8 += a5 + (a3 + a2);
        }
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a2)
    {
        if (v9 < a5)
        {
            v10 += (a2 + a2) + a2;
        }
        else
        {
            v10 += (a5 + a5) + a4;
        }
    }
    v12 = 0;
    for (v13 = 0; v13++; v13<a3)
    {
        v12 += a3 - a4;
    }
    return v12+v13+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 45
2 45
3 45
4 45
5 46
<<<sep_out_sample>>>
lea (%r8,%rcx,2),%eax
lea 0x1(%rcx,%rax,1),%eax
add %edi,%eax
add %edx,%eax
add %esi,%eax
add %eax,%r8d
lea 0x1(%rcx,%r8,1),%ecx
imul %esi,%edi
add %edi,%edx
sub %esi,%edx
lea (%rcx,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (a4 < a2)
        {
            v6 += a5 * a2 - a1;
        }
        else
        {
            v6 += a3 + a2 + a5;
        }
    }
    v8 = ((a2 * a1) + a3) - a2;
    v9 = 0;
    for (v10 = 0; v10++; v10<a1)
    {
        if (a5 < a4)
        {
            v9 += a4 * (a1 + a2);
        }
        else
        {
            v9 += a3 + (a3 * a5);
        }
    }
    v11 = (a4 + (a4 + a5)) + a4;
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 29
2 30
3 30
4 30
5 30
6 30
7 30
8 16
9 16
10 16
11 30
12 31
<<<sep_out_sample>>>
mov %esi,%r9d
imul %r8d,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
imul %r8d,%r8d
add %edi,%r8d
imul %esi,%r8d
add %r8d,%eax
mov %edx,%r8d
imul %edx,%r8d
imul %r8d,%edx
imul %ecx,%edx
add %edx,%eax
imul %r9d,%ecx
add %eax,%ecx
sub %esi,%r9d
sub %edi,%r9d
lea (%rcx,%r9,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = (a1 + a5 * a5) * a2;
    v7 = (a3 * a3) * a3 * a4;
    v8 = (a2 * a5) * a4;
    v9 = (a2 * a5 - a2) - a1;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 6
3 8
4 8
5 8
6 8
7 4
8 4
9 4
10 8
11 5
12 5
13 5
14 5
15 8
16 6
17 8
18 7
19 7
20 8
21 9
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
lea 0x1(%rcx,%rax,1),%ecx
add %r8d,%edi
add %edx,%esi
sub %esi,%edi
lea (%rcx,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (a2 < a3)
        {
            v6 += a5 - (a4 * a5);
        }
        else
        {
            v6 += a1 - a3 - a3;
        }
    }
    if (a2 < a2)
    {
        v8 = (a3 + a1 - a5) * a3;
    }
    else
    {
        v8 = (a1 + a5) - (a2 + a3);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 24
2 24
3 24
4 24
5 22
6 22
7 22
8 24
9 25
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (a4 < a1)
        {
            v6 += a1 + a4;
        }
        else
        {
            v6 += (a3 + a3) + a3;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += a4 + a4 * a2;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a4)
    {
        v10 += a2 * a5;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 26
2 26
3 26
4 26
5 27
<<<sep_out_sample>>>
cmp %edi,%r8d
jge e <func1+0xe>
mov %r8d,%r9d
imul %r8d,%r9d
jmp 18 <func1+0x18>
mov %r8d,%r9d
neg %r9d
imul %esi,%r9d
lea (%rsi,%r8,1),%eax
cmp %edx,%esi
jg 28 <func1+0x28>
lea (%rdx,%rsi,1),%eax
sub %ecx,%eax
imul %ecx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a5 < a1)
    {
        v6 = ((a5 + a1) - a1) * a5;
    }
    else
    {
        v6 = a2 * (a2 - a2 - a5);
    }
    if (a3 < a2)
    {
        v7 = (a2 + a2) + a5 - a2;
    }
    else
    {
        v7 = (a3 + a2 - a4) * a4;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        if (a4 < a2)
        {
            v8 += (a5 - a5) + a3;
        }
        else
        {
            v8 += a4 * a5;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 14
10 12
11 12
12 18
13 18
14 18
15 32
16 32
17 32
18 32
19 32
20 32
21 33
<<<sep_out_sample>>>
push %rbx
mov $0x2,%r10d
sub %edi,%r10d
imul %edi,%r10d
cmp %esi,%r8d
jge 23 <func1+0x23>
mov %esi,%r9d
sub %r8d,%r9d
mov %ecx,%eax
imul %edi,%eax
sub %eax,%r9d
jmp 2f <func1+0x2f>
lea (%rdi,%rcx,1),%r9d
imul %edi,%r9d
imul %r8d,%r9d
cmp %esi,%r9d
jge 3b <func1+0x3b>
mov %esi,%ebx
imul %edx,%ebx
jmp 45 <func1+0x45>
mov %edx,%ebx
imul %r8d,%ebx
add %esi,%ebx
add %edi,%ebx
lea (%rdx,%r8,1),%r11d
cmp %r8d,%r10d
jl 58 <func1+0x58>
lea (%rcx,%rdx,1),%r11d
add %esi,%r11d
add %r8d,%r11d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
add %ebx,%eax
add %r11d,%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a1 - ((a1 * a1) - a1);
    if (a5 < a2)
    {
        v7 = (a2 - a5) - a4 * a1;
    }
    else
    {
        v7 = (a1 * (a1 + a4)) * a5;
    }
    if (v7 < a2)
    {
        v8 = a2 * a3;
    }
    else
    {
        v8 = a2 + a3 * a5 + a1;
    }
    if (v6 < a5)
    {
        v9 = a3 + a5;
    }
    else
    {
        v9 = a4 + a3 + a2 + a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 4
3 4
4 4
5 5
6 5
7 7
8 7
9 7
10 7
11 7
12 7
13 11
14 11
15 11
16 13
17 13
18 15
19 15
20 15
21 19
22 19
23 19
24 19
25 23
26 21
27 21
28 27
29 27
30 27
31 29
32 29
33 29
34 29
35 29
36 29
37 29
38 29
39 30
40 30
<<<sep_out_sample>>>
mov %edx,%r9d
imul %esi,%r9d
cmp %edi,%r8d
cmovl %r8d,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
sub %edi,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a5 < a1)
    {
        v6 = a4 + (a5 - a4);
    }
    else
    {
        v6 = a3 * a2;
    }
    v7 = a3 - a1;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 13
6 13
7 13
8 13
9 13
10 12
11 13
12 14
<<<sep_out_sample>>>
mov %r8d,%eax
sub %edi,%eax
cmp %edx,%r8d
jge 11 <func1+0x11>
mov %r8d,%eax
neg %eax
sub %ecx,%eax
lea (%rdi,%rcx,1),%r9d
cmp %ecx,%eax
jge 2a <func1+0x2a>
mov $0x1,%r9d
sub %edx,%r9d
imul %ecx,%r9d
imul %edx,%r9d
add %edi,%edx
add %esi,%edx
add %r8d,%edx
add %edx,%ecx
add %ecx,%eax
add %eax,%r9d
imul %esi,%r8d
lea (%r9,%rsi,2),%eax
sub %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a5 < a3)
    {
        v6 = a4 - a4 - a5 - a4;
    }
    else
    {
        v6 = a5 - a1;
    }
    if (v6 < a4)
    {
        v7 = (a4 - a4 * a3) * a3;
    }
    else
    {
        v7 = (a1 + (a4 + a2)) - a2;
    }
    v8 = (a2 + a2) - a2 * a5;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 4
4 4
5 6
6 6
7 6
8 18
9 12
10 12
11 14
12 14
13 14
14 14
15 21
16 21
17 21
18 21
19 21
20 21
21 20
22 20
23 21
24 22
<<<sep_out_sample>>>
mov %edi,%eax
sub %ecx,%eax
cmp %r8d,%esi
jge 18 <func1+0x18>
lea (%rdx,%rcx,1),%eax
imul %edx,%eax
mov %ecx,%r9d
sub %eax,%r9d
mov %r9d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a2 < a5)
    {
        v6 = a4 - (a3 + a4) * a3;
    }
    else
    {
        v6 = a1 - a4;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += a2 * a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 4
4 4
5 6
6 6
7 6
8 6
9 6
10 17
11 17
12 17
13 17
14 17
15 18
<<<sep_out_sample>>>
mov %esi,%eax
sub %r8d,%eax
cmp %edx,%edi
jle 15 <func1+0x15>
lea (%r8,%rcx,1),%r9d
mov %edi,%eax
imul %esi,%eax
add %r9d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a1 - a5;
    }
    if (a3 < a1)
    {
        v8 = (a5 + a4) + a1 * a2;
    }
    else
    {
        v8 = a2 - a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 15
2 15
3 9
4 9
5 11
6 11
7 11
8 11
9 17
10 17
11 17
12 17
13 17
14 18
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
lea (%r8,%rcx,1),%eax
lea -0x1(%rdx),%r9d
imul %edx,%r9d
add %r9d,%eax
sub %esi,%ecx
imul %ecx,%edx
imul %edx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = (a3 * a3) - a3;
    v7 = ((a4 - a2) * a3) * a1;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 4
7 6
8 5
9 5
10 5
11 6
12 7
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %eax,%ecx
lea (%rdx,%rdx,1),%eax
sub %r8d,%eax
add %ecx,%eax
sub %edi,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a3 + a3 - a5;
    v7 = (a3 + a5 - a5) - a1;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 4
7 6
8 5
9 6
10 7
<<<sep_out_sample>>>
lea (%rdx,%r8,2),%eax
test %r8d,%r8d
jg 10 <func1+0x10>
mov %edi,%eax
imul %esi,%eax
add %ecx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += (a4 * a1) * a5;
    }
    if (v8 < a5)
    {
        v8 = a5 + a5 + a3;
    }
    else
    {
        v8 = (a1 * a2) + a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 11
2 9
3 9
4 15
5 15
6 15
7 17
8 17
9 17
10 17
11 17
12 18
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea (%r8,%rcx,1),%esi
sub %edx,%ecx
lea 0x1(%rsi,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a1 - a1 + a4 - a3;
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        if (a4 < a1)
        {
            v7 += (a3 * a4) - a3;
        }
        else
        {
            v7 += (a1 * a2) - a1;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 4
6 17
7 18
<<<sep_out_sample>>>
mov %r8d,%r11d
imul %esi,%r11d
mov %edi,%eax
imul %ecx,%eax
mov %esi,%r10d
sub %eax,%r10d
imul %ecx,%r10d
lea (%rdi,%rdx,1),%r9d
cmp %esi,%r8d
jg 2c <func1+0x2c>
mov %edi,%r9d
sub %ecx,%r9d
imul %ecx,%r9d
add %esi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a2 < a2)
    {
        v6 = a1 * a4;
    }
    else
    {
        v6 = a2 * (a3 + a5 - a3);
    }
    v7 = a4 * (a2 - a1 * a4);
    if (a2 < a5)
    {
        v8 = a1 + a3;
    }
    else
    {
        v8 = a2 - ((a4 - a1) * a4);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 12
4 12
5 12
6 12
7 12
8 15
9 13
10 13
11 19
12 19
13 19
14 19
15 21
16 21
17 21
18 21
19 21
20 21
21 21
22 22
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%r9d
add %esi,%r9d
add %r8d,%r9d
add %ecx,%r9d
lea 0x1(%rsi),%eax
imul %edi,%eax
sub %r8d,%eax
add %r9d,%eax
add %edi,%ecx
add %ecx,%eax
imul %edx,%edi
imul %edi,%edx
imul %edx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a2 < a2)
    {
        v6 = a3 - a4 * (a4 + a2);
    }
    else
    {
        v6 = a2 * a1 + a1 - a5;
    }
    if (a3 < a3)
    {
        v7 = a4 + a1;
    }
    else
    {
        v7 = a5 + (a4 + (a1 - a5));
    }
    if (a5 < a5)
    {
        v8 = a1 + a3 * a5 - a3;
    }
    else
    {
        v8 = (a3 * a1) * a3 * a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 28
2 28
3 28
4 28
5 10
6 10
7 10
8 28
9 18
10 28
11 26
12 26
13 26
14 28
15 29
<<<sep_out_sample>>>
lea -0x1(%rsi),%eax
imul %esi,%eax
lea (%rdi,%rdx,2),%edx
lea (%rdx,%rax,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a5 + a1 - a3;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        if (a5 < a3)
        {
            v8 += a2 + (a5 + a5);
        }
        else
        {
            v8 += a4 * a4 * a4;
        }
    }
    v10 = a2 * a2 - a2 + a3;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 22
4 22
5 22
6 22
7 22
8 23
<<<sep_out_sample>>>
cmp %ecx,%esi
jge 19 <func1+0x19>
mov %ecx,%eax
imul %r8d,%eax
mov %edx,%r9d
sub %eax,%r9d
mov %r9d,%eax
imul %r8d,%eax
jmp 22 <func1+0x22>
mov %ecx,%eax
sub %edi,%eax
add %r8d,%eax
sub %edx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %ecx,%r8d
add %eax,%r8d
lea (%r8,%rcx,2),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a2 < a4)
    {
        v6 = (a3 - a4 * a5) * a5;
    }
    else
    {
        v6 = a5 - (a1 - a4) - a3;
    }
    v7 = a4 + a4;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 6
9 6
10 10
11 10
12 10
13 10
14 13
15 13
16 13
17 13
18 13
19 13
20 14
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %r8d,%edx
add %ecx,%edx
mov %edi,%ecx
imul %esi,%ecx
imul %ecx,%esi
sub %edi,%esi
lea (%rdx,%rsi,1),%ecx
add %r8d,%edi
imul %edi,%r8d
lea 0x1(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = (a1 * a2 * a2) - a1;
    v7 = (a1 + a5) * a5;
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += a4 * a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 11
5 4
6 4
7 4
8 4
9 11
10 5
11 5
12 11
13 12
<<<sep_out_sample>>>
mov %ecx,%r10d
sub %edi,%r10d
sub %esi,%r10d
add %r8d,%r10d
lea (%rcx,%rcx,1),%r9d
test %r8d,%r8d
mov $0x0,%eax
cmovg %eax,%r9d
add %edx,%edi
add %esi,%edi
add %r8d,%edi
add %edi,%ecx
add %r10d,%ecx
add %r9d,%ecx
imul %esi,%edx
add %edx,%r8d
sub %esi,%r8d
lea (%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a5 - ((a1 - a4) + a2);
    if (v7 < a5)
    {
        v7 = a5 - a5;
    }
    else
    {
        v7 = a4 + a4;
    }
    v8 = (a3 * a2 + a5) - a2;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 11
6 11
7 11
8 11
9 14
10 14
11 14
12 14
13 14
14 14
15 13
16 13
17 13
18 14
19 15
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
sub %edx,%esi
imul %esi,%edx
imul %edx,%r8d
add %eax,%r8d
imul %ecx,%edi
lea 0x1(%r8,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = (a2 - a3) * a3 * a5;
    v7 = a4 * a1;
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += a2 - a1;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a3)
    {
        v10 += (a5 + a5) + a3;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 16
4 16
5 4
6 4
7 4
8 16
9 5
10 16
11 17
<<<sep_out_sample>>>
lea (%rsi,%rdx,1),%r10d
cmp %r8d,%edx
jl 14 <func1+0x14>
lea 0x1(%r8),%r10d
imul %esi,%r10d
sub %ecx,%r10d
cmp $0x1,%ecx
jle 22 <func1+0x22>
mov %edx,%r9d
imul %esi,%r9d
jmp 2d <func1+0x2d>
lea 0x1(%rdi),%r9d
imul %esi,%r9d
sub %edi,%r9d
cmp %r8d,%edi
jge 3d <func1+0x3d>
lea 0x1(%rdi),%eax
imul %edx,%eax
sub %r8d,%eax
jmp 42 <func1+0x42>
mov %edi,%eax
imul %edi,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (a3 < a2)
        {
            v6 += (a2 - a2) * a3;
        }
        else
        {
            v6 += a3 * a1;
        }
    }
    if (a3 < a5)
    {
        v8 = a2 + a3;
    }
    else
    {
        v8 = a2 + a2 * a5 - a4;
    }
    if (v7 < a4)
    {
        v9 = a3 * a2;
    }
    else
    {
        v9 = a2 + (a1 * a2) - a1;
    }
    if (a1 < a5)
    {
        v10 = (a3 * a1) + a3 - a5;
    }
    else
    {
        v10 = a1 * a1;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 16
3 16
4 22
5 22
6 22
7 24
8 24
9 26
10 26
11 26
12 30
13 30
14 30
15 32
16 32
17 34
18 34
19 34
20 34
21 38
22 38
23 40
24 40
25 40
26 40
27 40
28 40
29 40
30 41
<<<sep_out_sample>>>
mov %edi,%eax
sub %edx,%eax
cmp %esi,%r8d
jl e <func1+0xe>
mov %edx,%eax
imul %ecx,%eax
lea 0x1(%rax,%rdi,1),%eax
add %eax,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a3 - a5 - a5;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += a2 * (a1 - a2);
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a3)
    {
        v10 += a2 - a1;
    }
    if (a5 < a2)
    {
        v12 = a1 + a5 - a5 - a3;
    }
    else
    {
        v12 = a3 * a4;
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 19
4 19
5 25
6 25
7 27
8 27
9 27
10 27
11 27
12 28
<<<sep_out_sample>>>
lea 0x1(%rdx),%eax
imul %esi,%eax
mov %r8d,%r9d
sub %esi,%r9d
cmp %ecx,%esi
jg 1d <func1+0x1d>
mov %eax,%r9d
sub %esi,%r9d
imul %esi,%r9d
add %r8d,%r9d
lea 0x1(%r9,%rdi,1),%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = a3 * a2 + a2;
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += a1 + a5 + a3;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        if (a4 < a1)
        {
            v9 += (a3 + a2) - a5;
        }
        else
        {
            v9 += a2 - (a3 + a5);
        }
    }
    if (a4 < a2)
    {
        v11 = a5 - a2;
    }
    else
    {
        v11 = ((a2 * a3) * a2) + a5;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 24
4 24
5 22
6 22
7 28
8 28
9 28
10 28
11 30
12 30
13 30
14 30
15 30
16 30
17 31
<<<sep_out_sample>>>
lea (%rdi,%rcx,1),%r9d
cmp $0x1,%ecx
jg 18 <func1+0x18>
mov %r8d,%r9d
sub %esi,%r9d
mov %r8d,%eax
imul %edx,%eax
add %eax,%r9d
lea (%rsi,%r8,1),%eax
lea (%r9,%rdi,2),%edi
lea (%rdi,%rax,1),%eax
add %eax,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a1 - a5 * a2;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        if (v7 < a3)
        {
            v8 += (a1 - a2) + a4;
        }
        else
        {
            v8 += a4 * a5 - a2;
        }
    }
    if (v7 < a4)
    {
        v10 = a1 + (a2 + a4) - a2;
    }
    else
    {
        v10 = (a5 - a2) + a5 * a3;
    }
    if (a3 < a3)
    {
        v11 = a5 + a5;
    }
    else
    {
        v11 = (a2 + a5) + a1;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 23
2 21
3 21
4 27
5 27
6 27
7 27
8 27
9 35
10 37
11 37
12 37
13 37
14 37
15 37
16 38
<<<sep_out_sample>>>
mov %edi,%r9d
sub %esi,%r9d
mov %edx,%eax
sub %r8d,%eax
cmp %ecx,%esi
cmovle %ecx,%eax
lea (%rdi,%r8,1),%r10d
imul %esi,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a1 - (a2 + a3 - a3);
    if (a4 < a2)
    {
        v7 = ((a5 - a5) - a5) + a3;
    }
    else
    {
        v7 = (a4 + a3) - a3;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += a5 + a1 - a1;
    }
    v10 = (a1 * a2) + a5 * a2;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 7
4 7
5 7
6 7
7 18
8 18
9 19
10 19
11 19
12 19
13 19
14 19
15 19
16 20
<<<sep_out_sample>>>
mov %ecx,%r9d
imul %esi,%r9d
mov %esi,%r10d
sub %r8d,%r10d
cmp %esi,%ecx
jl 1b <func1+0x1b>
mov %r9d,%r10d
sub %esi,%r10d
imul %edi,%r10d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
lea (%r9,%r10,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a4 * a2;
    if (a4 < a2)
    {
        v7 = a2 - a5;
    }
    else
    {
        v7 = ((a2 * a4) - a2) * a1;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 7
4 7
5 5
6 5
7 11
8 11
9 11
10 13
11 13
12 13
13 13
14 13
15 13
16 14
<<<sep_out_sample>>>
lea (%r8,%rdx,1),%r9d
cmp %edx,%r8d
jl 16 <func1+0x16>
lea (%r8,%rdx,1),%r9d
mov %r8d,%eax
imul %edi,%eax
add %eax,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
add %edi,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a5 < a3)
    {
        v6 = a5 + a3;
    }
    else
    {
        v6 = a5 + a3 + a5 * a1;
    }
    if (a4 < a4)
    {
        v7 = (a2 * a2) - a4 - a1;
    }
    else
    {
        v7 = a5 + a1;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 4
3 4
4 10
5 10
6 10
7 10
8 20
9 20
10 20
11 20
12 20
13 18
14 20
15 21
<<<sep_out_sample>>>
lea (%rsi,%rdx,1),%eax
cmp %r8d,%esi
jge 11 <func1+0x11>
mov %edx,%eax
sub %ecx,%eax
add %esi,%eax
sub %r8d,%eax
lea (%rdi,%rdx,1),%r9d
add %r9d,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%eax
sub %edx,%edi
lea 0x1(%rax,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a2 < a5)
    {
        v6 = (a2 - (a4 - a3)) - a5;
    }
    else
    {
        v6 = a2 + a3 + a4 - a4;
    }
    v7 = a1 - a3;
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        if (v8 < a5)
        {
            v8 += a2 - a5 - a1;
        }
        else
        {
            v8 += a3 + (a2 - a5);
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 6
7 6
8 25
9 25
10 25
11 25
12 25
13 12
14 25
15 26
<<<sep_out_sample>>>
lea (%rcx,%rdx,1),%r9d
cmp %r8d,%edx
jl 13 <func1+0x13>
lea (%rdi,%rsi,1),%r9d
add %edx,%r9d
add %ecx,%r9d
cmp %edx,%r9d
jge 26 <func1+0x26>
mov %edi,%r10d
sub %edx,%r10d
add %ecx,%r10d
add %esi,%r10d
jmp 34 <func1+0x34>
mov %edi,%r10d
sub %edx,%r10d
mov %edi,%eax
imul %esi,%eax
add %eax,%r10d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %eax,%r9d
lea (%r9,%r10,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (a4 < a4)
        {
            v6 += (a4 * a1) + a3;
        }
        else
        {
            v6 += a1 * a4 - a3;
        }
    }
    if (a3 < a5)
    {
        v8 = a4 + a3;
    }
    else
    {
        v8 = ((a1 + a2) + a3) + a4;
    }
    if (v8 < a3)
    {
        v9 = a1 - a3 + a4 + a2;
    }
    else
    {
        v9 = a1 - a3 + a1 * a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 16
3 16
4 22
5 22
6 22
7 24
8 24
9 26
10 26
11 26
12 26
13 26
14 30
15 30
16 30
17 30
18 30
19 32
20 32
21 32
22 32
23 32
24 32
25 33
<<<sep_out_sample>>>
cmp %r8d,%ecx
jge c <func1+0xc>
lea (%rdi,%rdx,2),%eax
add %edi,%eax
jmp 18 <func1+0x18>
mov %r8d,%eax
imul %edi,%eax
imul %edx,%eax
imul %esi,%eax
lea 0x2(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    if (a4 < a5)
    {
        v6 = a1 + a3 + a3 + a1;
    }
    else
    {
        v6 = a5 * a1 * a3 * a2;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a1 + (a1 + a1);
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        v9 += (a5 + a2) - a1;
    }
    v11 = 0;
    for (v12 = 0; v12++; v12<a2)
    {
        v11 += a1 - a1 + a5;
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 10
10 27
11 27
12 27
13 27
14 27
15 28
<<<sep_out_sample>>>
cmp %edi,%ecx
jge c <func1+0xc>
lea -0x1(%rdx),%eax
imul %edi,%eax
jmp 16 <func1+0x16>
mov %r8d,%eax
sub %edx,%eax
add %r8d,%eax
sub %esi,%eax
lea 0x1(%rdi,%rdx,1),%r9d
add %esi,%r9d
add %r8d,%r9d
add %ecx,%r9d
add %r9d,%eax
add %edi,%r8d
lea (%rax,%r8,1),%edi
mov $0x1,%eax
sub %edx,%eax
imul %eax,%ecx
sub %esi,%ecx
lea (%rdi,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a4 < a1)
    {
        v6 = a3 * a1 - a1;
    }
    else
    {
        v6 = a5 - a3 + a5 - a2;
    }
    v7 = a1 + a5;
    v8 = a4 - (a3 * a4) - a2;
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        v9 += a2 * a3;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 10
10 19
11 19
12 19
13 19
14 19
15 12
16 19
17 13
18 13
19 13
20 13
21 19
22 20
<<<sep_out_sample>>>
lea (%rsi,%rsi,1),%eax
mov %edi,%r9d
imul %esi,%r9d
sub %r9d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a3 - a3 - (a3 - a3);
    v7 = a2 + a2 - (a1 * a2);
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        if (a3 < a3)
        {
            v8 += a5 - a2 - a4;
        }
        else
        {
            v8 += a1 - a3 * a5;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 5
2 5
3 5
4 5
5 18
6 18
7 18
8 18
9 18
10 19
<<<sep_out_sample>>>
cmp %r8d,%ecx
jge d <func1+0xd>
lea (%rdi,%rsi,2),%eax
add %r8d,%eax
jmp 12 <func1+0x12>
mov %ecx,%eax
imul %edx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (a1 < a4)
        {
            v6 += a3 + (a3 * a4);
        }
        else
        {
            v6 += a1 + a3 + a2;
        }
    }
    if (a4 < a5)
    {
        v8 = a5 + ((a2 + a2) + a1);
    }
    else
    {
        v8 = a4 * a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 22
7 22
8 24
9 24
10 24
11 24
12 24
13 25
<<<sep_out_sample>>>
test %edi,%edi
jle b <func1+0xb>
lea (%rdx,%rdi,2),%eax
sub %ecx,%eax
jmp 10 <func1+0x10>
mov %edi,%eax
imul %esi,%eax
lea (%rdi,%rdx,1),%r9d
add %esi,%r9d
add %r9d,%r8d
add %r8d,%ecx
add %eax,%ecx
mov %edx,%eax
sub %edi,%eax
add %eax,%edx
sub %esi,%edx
lea 0x1(%rcx,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (v6 < a1)
    {
        v6 = (a1 + (a3 + a1)) - a4;
    }
    else
    {
        v6 = a1 * a2;
    }
    v7 = a3 - (a1 - a3) - a2;
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += a2 * a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 18
9 18
10 18
11 18
12 18
13 12
14 12
15 12
16 12
17 18
18 19
<<<sep_out_sample>>>
lea (%rdx,%rcx,1),%eax
lea (%rax,%rdi,1),%r9d
cmp %r8d,%edx
jle 17 <func1+0x17>
lea (%rdx,%rsi,1),%r9d
add %edi,%r9d
imul %ecx,%r9d
mov %edi,%r10d
sub %esi,%r10d
cmp %eax,%edx
jg 30 <func1+0x30>
mov %edx,%r10d
imul %edi,%r10d
sub $0x1,%r10d
imul %edi,%r10d
add %edi,%edx
add %esi,%edx
add %edx,%r8d
add %r8d,%ecx
add %ecx,%eax
add %r9d,%eax
add %r10d,%eax
lea (%rdi,%rsi,2),%edx
imul %edx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a3 + a4;
    if (a5 < a3)
    {
        v7 = ((a3 + a2) + a1) * a4;
    }
    else
    {
        v7 = a4 + a3 + a1;
    }
    if (v6 < a3)
    {
        v8 = (a1 - a5) + a5 - a2;
    }
    else
    {
        v8 = ((a3 * a1) * a1) - a1;
    }
    v9 = (a1 + a2 + a2) * a1;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 11
3 5
4 5
5 7
6 7
7 7
8 15
9 15
10 13
11 13
12 19
13 19
14 19
15 19
16 22
17 22
18 22
19 22
20 22
21 22
22 22
23 21
24 21
25 22
26 23
<<<sep_out_sample>>>
mov %edi,%r9d
imul %edi,%r9d
imul %edx,%r9d
imul %esi,%r9d
cmp %ecx,%esi
jge 26 <func1+0x26>
mov %ecx,%eax
imul %esi,%eax
imul %edx,%eax
mov %esi,%r11d
sub %eax,%r11d
mov %r11d,%eax
jmp 32 <func1+0x32>
mov $0x1,%eax
sub %ecx,%eax
imul %ecx,%eax
sub %edi,%eax
lea (%r8,%rcx,1),%r11d
mov %edx,%r10d
imul %ecx,%r10d
add %r11d,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a3 * (a1 * a1) * a2;
    if (a2 < a4)
    {
        v7 = a2 - (a4 * a2) * a3;
    }
    else
    {
        v7 = a4 - a4 * a4 - a1;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += a4 + a4;
    }
    v10 = a5 + a4 + a3 * a4;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 5
6 5
7 7
8 7
9 7
10 7
11 7
12 7
13 7
14 11
15 11
16 11
17 11
18 18
19 18
20 18
21 18
22 19
23 19
24 19
25 19
26 19
27 19
28 19
29 20
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a5 - a4;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        if (a3 < a2)
        {
            v8 += (a4 * a5) * a3;
        }
        else
        {
            v8 += (a1 + a1) + a5;
        }
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a4)
    {
        v10 += a5 - (a3 * a4);
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 26
2 26
3 26
4 26
5 27
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
add %r8d,%ecx
imul %esi,%edi
imul %edi,%esi
add %esi,%edx
lea 0x1(%rcx,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a3 + a2 * a1 * a2;
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += a4 * (a2 * a4);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 4
6 4
7 4
8 10
9 11
<<<sep_out_sample>>>
lea (%rdx,%rdi,1),%eax
cmp %ecx,%edx
jl 19 <func1+0x19>
mov %edx,%eax
imul %r8d,%eax
imul %esi,%eax
mov %edx,%r9d
sub %eax,%r9d
mov %r9d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a3 < a4)
    {
        v6 = a3 + a1;
    }
    else
    {
        v6 = a3 - a3 * a5 * a2;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        if (v6 < a1)
        {
            v7 += (a4 - a4) - a4;
        }
        else
        {
            v7 += (a5 * a3) * a5;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 6
2 4
3 4
4 10
5 10
6 10
7 10
8 10
9 10
10 24
11 24
12 24
13 24
14 24
15 25
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%r9d
add %esi,%r9d
add %r8d,%r9d
add %ecx,%r9d
mov %ecx,%eax
imul %ecx,%eax
imul %edi,%eax
sub %esi,%eax
add %r9d,%eax
sub %esi,%edi
add %edx,%edi
add %edi,%r8d
add %r8d,%eax
mov $0x1,%edi
sub %esi,%edi
imul %edi,%edx
imul %edx,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = (a4 * a4 * a1) - a2;
    if (a3 < a3)
    {
        v7 = a5 + (a4 * (a3 + a4));
    }
    else
    {
        v7 = a5 + (a1 - a2 + a3);
    }
    v8 = a4 * (a3 - a2 * a3);
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 14
2 14
3 14
4 14
5 4
6 4
7 4
8 4
9 14
10 11
11 11
12 11
13 14
14 13
15 13
16 13
17 13
18 14
19 15
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %edx,%r8d
lea (%rsi,%rcx,2),%eax
lea 0x1(%rax,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a2 * a5 - a3;
    }
    v8 = a2 + a4;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 9
5 10
6 11
<<<sep_out_sample>>>
lea (%rsi,%r8,2),%r11d
lea (%rsi,%rdx,1),%r10d
cmp %ecx,%r8d
jge 20 <func1+0x20>
mov $0x1,%r9d
sub %r8d,%r9d
imul %ecx,%r9d
imul %ecx,%r9d
jmp 2d <func1+0x2d>
mov %edx,%r9d
imul %r8d,%r9d
add %ecx,%r9d
sub %edi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
sub %r8d,%edi
imul %esi,%r8d
add %r8d,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a5 + (a2 + a5);
    if (a3 < a3)
    {
        v7 = (a3 + a4 + a4) - a5;
    }
    else
    {
        v7 = a2 + a3;
    }
    if (a5 < a4)
    {
        v8 = (a4 - a4 * a5) * a4;
    }
    else
    {
        v8 = a4 + a3 * a5 - a1;
    }
    v9 = a1 - a5 + (a5 * a2);
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 11
3 13
4 13
5 15
6 15
7 15
8 15
9 15
10 19
11 19
12 19
13 19
14 22
15 22
16 22
17 22
18 22
19 22
20 22
21 21
22 21
23 21
24 22
25 23
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
mov %r8d,%r9d
imul %ecx,%r9d
add %r9d,%eax
imul %r8d,%esi
mov %ecx,%r9d
imul %ecx,%r9d
add %r9d,%esi
add %esi,%eax
imul %r8d,%edi
mov %ecx,%esi
imul %edx,%esi
imul %esi,%edi
add %edi,%eax
add %edx,%ecx
imul %edx,%edx
add %ecx,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a5 * a4;
    v7 = a5 * a2 + a4 * a4;
    v8 = (a5 * a1) * (a4 * a3);
    v9 = a3 + a4 + a3 * a3;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 8
2 8
3 8
4 8
5 4
6 4
7 8
8 5
9 5
10 5
11 5
12 8
13 6
14 6
15 6
16 6
17 8
18 7
19 7
20 7
21 8
22 9
<<<sep_out_sample>>>
cmp %esi,%r8d
jge e <func1+0xe>
mov %r8d,%eax
sub %esi,%eax
add %edi,%eax
jmp 16 <func1+0x16>
mov %ecx,%eax
imul %edx,%eax
sub %r8d,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += (a1 * a1) - a3;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += (a5 * a5) - a5;
    }
    if (a5 < a2)
    {
        v10 = a1 + (a5 - a2);
    }
    else
    {
        v10 = a4 * a3 - a5;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 14
2 14
3 16
4 16
5 16
6 16
7 20
8 20
9 20
10 22
11 22
12 22
13 22
14 22
15 23
<<<sep_out_sample>>>
lea (%rdi,%rdx,2),%eax
add %r8d,%eax
add %ecx,%eax
mov %ecx,%edx
imul %ecx,%edx
imul %ecx,%edx
add %edx,%esi
add %eax,%esi
mov %ecx,%eax
imul %r8d,%eax
imul %eax,%ecx
sub %r8d,%ecx
lea 0x1(%rsi,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = (a4 * a4) * a4 + a2;
    v7 = ((a4 * a5) * a4) - a5;
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += a4 * a5 - a4;
    }
    v10 = a3 - a2;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 12
2 12
3 12
4 4
5 4
6 4
7 4
8 12
9 5
10 5
11 5
12 5
13 12
14 13
<<<sep_out_sample>>>
add %edx,%edi
add %esi,%edi
add %r8d,%edi
lea 0x1(%rcx,%rdi,1),%eax
imul %r8d,%esi
add %esi,%edx
add %edx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a2 - (a4 * a3);
    }
    if (a2 < a2)
    {
        v8 = a3 * a1 - a1;
    }
    else
    {
        v8 = (a3 + a2 * a5) + a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 15
6 15
7 15
8 17
9 18
<<<sep_out_sample>>>
lea (%rcx,%rdx,1),%eax
lea (%rax,%rdi,2),%r11d
mov %r8d,%r10d
imul %esi,%r10d
add %ecx,%r10d
mov %edi,%r9d
sub %edx,%r9d
cmp %ecx,%esi
jle 27 <func1+0x27>
lea (%rdi,%r8,1),%r9d
imul %ecx,%r9d
imul %ecx,%r9d
add %r9d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %r11d,%eax
add %r10d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (a5 < a3)
        {
            v6 += a2 - a4;
        }
        else
        {
            v6 += a4 + a4;
        }
    }
    v8 = a1 + a1 + (a4 + a3);
    if (a3 < a3)
    {
        v9 = a2 + a1 + a4;
    }
    else
    {
        v9 = (a5 * a2) + a4;
    }
    if (a4 < a2)
    {
        v10 = (a1 + a5) * a4 * a4;
    }
    else
    {
        v10 = (a4 - a3 + a1) - a4;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 23
4 23
5 23
6 31
7 31
8 25
9 25
10 27
11 27
12 27
13 33
14 33
15 33
16 33
17 33
18 33
19 33
20 34
<<<sep_out_sample>>>
mov %edi,%eax
sub %r8d,%eax
cmp %ecx,%r8d
jg 11 <func1+0x11>
lea (%r8,%rdx,1),%eax
lea (%rax,%rcx,2),%eax
mov %edi,%r9d
imul %ecx,%r9d
sub %r8d,%r9d
add %edx,%r9d
add %r9d,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%esi
add %esi,%eax
add %ecx,%edi
sub %edx,%edi
imul %edi,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (a5 < a1)
        {
            v6 += a1 - a3;
        }
        else
        {
            v6 += a3 * a1 - a1;
        }
    }
    if (a4 < a5)
    {
        v8 = a1 - a5;
    }
    else
    {
        v8 = a4 + (a5 + a3 + a4);
    }
    v9 = ((a4 + a1) - a3) * a4;
    if (a4 < a4)
    {
        v10 = a5 + (a3 - (a1 * a4));
    }
    else
    {
        v10 = a1 * a4 - a5 - a1;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 16
4 16
5 22
6 22
7 31
8 31
9 31
10 33
11 33
12 33
13 33
14 33
15 24
16 24
17 24
18 33
19 34
<<<sep_out_sample>>>
cmp %ecx,%edx
jle 14 <func1+0x14>
mov %edi,%eax
imul %ecx,%eax
mov %r8d,%r9d
sub %eax,%r9d
mov %r9d,%eax
jmp 19 <func1+0x19>
mov %esi,%eax
imul %ecx,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a2 - (a3 - a2);
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        if (a2 < a3)
        {
            v8 += a5 * a3;
        }
        else
        {
            v8 += (a1 - a3) * a1;
        }
    }
    if (a4 < a3)
    {
        v10 = a5 - a1 * a4;
    }
    else
    {
        v10 = a2 * a4;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 23
4 23
5 23
6 23
7 23
8 23
9 27
10 27
11 29
12 29
13 29
14 29
15 29
16 30
<<<sep_out_sample>>>
mov %edi,%r11d
sub %ecx,%r11d
imul %r8d,%r11d
add %ecx,%r11d
lea (%rdx,%rsi,1),%r10d
cmp %r8d,%ecx
jge 26 <func1+0x26>
mov %ecx,%r9d
imul %edi,%r9d
imul %edx,%r9d
add %edi,%r9d
jmp 30 <func1+0x30>
lea (%r8,%rsi,1),%r9d
sub %edi,%r9d
sub %edi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a5 * (a1 - a4) + a4;
    v7 = a3 + a2;
    if (a4 < a5)
    {
        v8 = (a4 * a1) * a3 + a1;
    }
    else
    {
        v8 = a5 + a2 - a1 - a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 5
6 6
7 6
8 8
9 8
10 8
11 8
12 8
13 12
14 12
15 12
16 14
17 14
18 14
19 14
20 14
21 14
22 14
23 15
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %r8d,%edx
lea 0x1(%rcx,%rdx,1),%edx
sub %ecx,%esi
sub %edi,%esi
sub %r8d,%esi
lea (%rdx,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (v7 < a4)
        {
            v6 += a1 * a5 + a4;
        }
        else
        {
            v6 += a5 + (a5 + a5);
        }
    }
    if (a3 < a3)
    {
        v8 = a4 + a2;
    }
    else
    {
        v8 = a2 - a4 - a1 - a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 24
2 24
3 24
4 24
5 22
6 22
7 22
8 24
9 25
<<<sep_out_sample>>>
lea (%r8,%rdi,1),%eax
cmp %ecx,%r8d
jl 19 <func1+0x19>
mov %ecx,%eax
imul %edx,%eax
add %esi,%eax
mov %ecx,%r10d
sub %eax,%r10d
mov %r10d,%eax
mov %ecx,%r9d
imul %esi,%r9d
sub $0x1,%r9d
imul %ecx,%r9d
add %r9d,%edi
add %edx,%edi
add %esi,%edi
add %edi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
add %edx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a5 < a4)
    {
        v6 = a2 + (a5 + a1) - a2;
    }
    else
    {
        v6 = a4 - (a4 * a3 + a2);
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a4 - a2 * a1;
    }
    v9 = (a1 + a3 - a1) + a2;
    v10 = a4 * (a4 * a2) - a4;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 4
3 4
4 10
5 10
6 10
7 10
8 10
9 10
10 18
11 18
12 18
13 18
14 19
15 19
16 19
17 19
18 19
19 19
20 17
21 19
22 20
<<<sep_out_sample>>>
mov %edx,%r11d
imul %esi,%r11d
add %edi,%r11d
add %r8d,%r11d
mov %edi,%r10d
sub %esi,%r10d
imul %edx,%r10d
cmp %r8d,%esi
jle 29 <func1+0x29>
mov %r8d,%r9d
imul %esi,%r9d
imul %ecx,%r9d
jmp 32 <func1+0x32>
lea 0x1(%rsi,%rcx,1),%r9d
imul %esi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = (a3 * a2 + a1) + a5;
    v7 = a1 * a3 - a2 * a3;
    if (a5 < a2)
    {
        v8 = a4 * (a5 * a2);
    }
    else
    {
        v8 = (a2 + a4) * a2 + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 5
6 5
7 5
8 6
9 6
10 8
11 8
12 8
13 8
14 12
15 12
16 14
17 14
18 14
19 14
20 14
21 14
22 14
23 15
<<<sep_out_sample>>>
mov $0x1,%eax
sub %esi,%eax
imul %ecx,%eax
sub %edi,%eax
mov %r8d,%r11d
sub %ecx,%r11d
mov %edx,%r9d
imul %edi,%r9d
mov %r8d,%r10d
sub %r9d,%r10d
add %r8d,%r10d
cmp %edx,%esi
jle 33 <func1+0x33>
mov %r8d,%r9d
imul %edx,%r9d
imul %esi,%r9d
jmp 3a <func1+0x3a>
mov %ecx,%r9d
imul %edx,%r9d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a4 - a4 * a2 - a1;
    v7 = a5 - a4;
    v8 = a5 - a3 * a1 + a5;
    if (a3 < a2)
    {
        v9 = a5 * a3 * a2;
    }
    else
    {
        v9 = a4 * (a3 + (a5 - a5));
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 5
6 5
7 6
8 6
9 6
10 6
11 6
12 7
13 7
14 9
15 9
16 9
17 9
18 13
19 13
20 15
21 15
22 15
23 15
24 15
25 15
26 15
27 15
28 16
<<<sep_out_sample>>>
lea (%rdx,%r8,1),%eax
test %ecx,%ecx
jle e <func1+0xe>
mov %edx,%eax
sub %edi,%eax
sub %edi,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (v6 < a4)
    {
        v6 = (a3 - a1) - a1;
    }
    else
    {
        v6 = (a3 + a1 + a5) - a1;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        if (v7 < a2)
        {
            v7 += (a4 + a1) * a4;
        }
        else
        {
            v7 += a4 - (a2 + a4);
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 6
7 24
8 24
9 24
10 24
11 24
12 25
<<<sep_out_sample>>>
lea (%r8,%rdx,1),%r9d
mov $0x0,%eax
cmp %esi,%r8d
jl 1b <func1+0x1b>
lea (%rdx,%rdi,1),%eax
mov %esi,%r10d
imul %r8d,%r10d
sub %r10d,%eax
add %edi,%edx
add %esi,%edx
add %r8d,%edx
add %edx,%ecx
add %r9d,%ecx
add %ecx,%eax
imul %edi,%r8d
imul %r8d,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a5 + a3;
    if (a5 < a2)
    {
        v7 = a5 + a2 - a5 - a2;
    }
    else
    {
        v7 = a3 + a1 - a2 * a5;
    }
    if (a4 < a4)
    {
        v8 = a3 - a2 - (a5 + a5);
    }
    else
    {
        v8 = a5 * a1 * a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 7
3 5
4 5
5 11
6 11
7 11
8 11
9 21
10 21
11 21
12 21
13 21
14 21
15 19
16 19
17 21
18 22
<<<sep_out_sample>>>
lea (%r8,%rdi,1),%r9d
add %edx,%r9d
imul %esi,%r9d
mov %edx,%eax
neg %eax
cmp %esi,%edi
jle 1d <func1+0x1d>
mov %esi,%eax
imul %edi,%eax
add %r8d,%eax
add %edx,%eax
mov %edx,%r10d
imul %edx,%r10d
imul %esi,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a2 * (a5 + a1 + a3);
    if (a2 < a1)
    {
        v7 = a2 * a1 + a5 + a3;
    }
    else
    {
        v7 = a4 - a3 - a4;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += a4 - a5 - a2;
    }
    v10 = (a3 * a3) * a2;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 11
5 11
6 5
7 5
8 7
9 7
10 7
11 7
12 18
13 18
14 18
15 19
16 19
17 19
18 19
19 19
20 19
21 19
22 20
<<<sep_out_sample>>>
cmp $0x1,%edi
jle 16 <func1+0x16>
mov %esi,%r10d
imul %esi,%r10d
imul %ecx,%r10d
imul %esi,%r10d
jmp 1d <func1+0x1d>
lea (%rdi,%rdi,1),%r10d
sub %r8d,%r10d
cmp %edi,%ecx
jge 2f <func1+0x2f>
lea (%rcx,%rdi,1),%eax
mov %r8d,%r9d
sub %eax,%r9d
sub %edx,%r9d
jmp 36 <func1+0x36>
mov %esi,%r9d
imul %ecx,%r9d
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (v6 < a5)
        {
            v6 += a4 - a2;
        }
        else
        {
            v6 += a1 + a1;
        }
    }
    if (v7 < a1)
    {
        v8 = a2 * a2 * a4 * a2;
    }
    else
    {
        v8 = a1 + a1 - a5;
    }
    if (a4 < a1)
    {
        v9 = a5 - (a4 + a1) - a3;
    }
    else
    {
        v9 = a2 * a4;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a5)
    {
        if (v6 < a5)
        {
            v10 += (a4 * a3) * a5;
        }
        else
        {
            v10 += a3 - a3 * a4;
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 18
7 18
8 22
9 22
10 24
11 24
12 26
13 26
14 26
15 26
16 26
17 30
18 30
19 44
20 44
21 44
22 44
23 44
24 44
25 45
<<<sep_out_sample>>>
cmp %edx,%edi
jge b <func1+0xb>
mov %edi,%eax
imul %esi,%eax
jmp 16 <func1+0x16>
mov %r8d,%eax
sub %esi,%eax
imul %esi,%eax
add %r8d,%eax
add %edx,%edi
add %edi,%esi
add %r8d,%esi
add %esi,%ecx
lea 0x1(%rax,%rcx,1),%eax
add %edx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a1 < a3)
    {
        v6 = a1 * a2;
    }
    else
    {
        v6 = (a5 - a2) * a2 + a5;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        if (v8 < a1)
        {
            v7 += (a4 + a2) * a2;
        }
        else
        {
            v7 += a3 + a1 - a5;
        }
    }
    v9 = a5 + a3;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 10
10 25
11 25
12 25
13 25
14 25
15 24
16 25
17 26
<<<sep_out_sample>>>
lea (%rcx,%rcx,1),%eax
lea (%r8,%rcx,1),%r11d
cmp %esi,%edi
cmovl %eax,%r11d
mov %r8d,%eax
sub %ecx,%eax
mov %edx,%r10d
sub %edi,%r10d
test %edi,%edi
cmovg %eax,%r10d
mov %edx,%r9d
sub %esi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a1 < a2)
    {
        v6 = a4 + a4;
    }
    else
    {
        v6 = a5 + a4;
    }
    if (v7 < a1)
    {
        v7 = (a4 + a5) - a4 - a4;
    }
    else
    {
        v7 = a3 - a1;
    }
    v8 = a3 + (a3 - a2) - a3;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 14
6 14
7 14
8 14
9 14
10 14
11 20
12 20
13 21
14 21
15 21
16 21
17 21
18 21
19 21
20 22
<<<sep_out_sample>>>
push %rbx
mov %ecx,%r9d
imul %edi,%r9d
mov %r9d,%r10d
cmp %esi,%edi
jg 1f <func1+0x1f>
mov $0x1,%r10d
sub %r8d,%r10d
imul %ecx,%r10d
add %edx,%r10d
mov %edx,%ebx
imul %edx,%ebx
imul %r8d,%ebx
sub %edx,%ebx
cmp %r9d,%edi
jle 3d <func1+0x3d>
mov %ecx,%r11d
sub %edx,%r11d
sub %r8d,%r11d
sub %edi,%r11d
jmp 49 <func1+0x49>
lea (%r8,%rdi,1),%r11d
imul %esi,%r11d
imul %edx,%r11d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
add %r10d,%eax
add %ebx,%eax
add %r11d,%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a4 * a1;
    if (a2 < a1)
    {
        v7 = ((a1 * a4) - a5) + a5;
    }
    else
    {
        v7 = (a4 - a5 * a4) + a3;
    }
    v8 = (a3 * a3 * a5) - a3;
    if (v6 < a1)
    {
        v9 = a4 - a3 - a5 - a1;
    }
    else
    {
        v9 = ((a5 + a1) * a2) * a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 4
3 4
4 7
5 5
6 5
7 11
8 11
9 11
10 11
11 13
12 13
13 13
14 13
15 14
16 14
17 16
18 16
19 16
20 16
21 16
22 20
23 20
24 20
25 22
26 22
27 22
28 22
29 22
30 22
31 22
32 22
33 23
34 23
<<<sep_out_sample>>>
lea (%rsi,%r8,1),%eax
add %edi,%eax
cmp %edi,%edx
jge 16 <func1+0x16>
mov %r8d,%eax
imul %edi,%eax
imul %r8d,%eax
add %edx,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a3 < a1)
    {
        v6 = a3 + a5 * a1 * a5;
    }
    else
    {
        v6 = (a2 + a5) + a1;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += a4 + a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 4
4 4
5 6
6 6
7 6
8 6
9 17
10 17
11 17
12 17
13 17
14 18
<<<sep_out_sample>>>
mov $0x0,%eax
cmp %esi,%r8d
jl 1c <func1+0x1c>
mov %r8d,%eax
imul %edx,%eax
imul %ecx,%eax
mov %edx,%r9d
sub %eax,%r9d
mov %r9d,%eax
add %edi,%edx
add %esi,%edx
add %r8d,%edx
add %ecx,%edx
add %edx,%eax
lea -0x1(%rcx),%edx
imul %edi,%edx
add %edx,%eax
add %esi,%edi
imul %edi,%esi
add %r8d,%esi
add %esi,%eax
add %ecx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a5 < a2)
    {
        v6 = a1 - a1;
    }
    else
    {
        v6 = a3 - a5 * a3 * a4;
    }
    v7 = a1 * a4 - a1;
    v8 = (a1 + a2) * a2 + a5;
    v9 = a4 + a5;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 4
3 4
4 10
5 10
6 10
7 10
8 10
9 10
10 15
11 15
12 15
13 15
14 15
15 12
16 12
17 15
18 13
19 13
20 13
21 15
22 14
23 15
24 16
<<<sep_out_sample>>>
mov %r8d,%eax
imul %r8d,%eax
mov %ecx,%r9d
sub %eax,%r9d
cmp $0x1,%esi
jle 17 <func1+0x17>
lea (%rsi,%rsi,1),%eax
jmp 20 <func1+0x20>
lea 0x1(%rdx),%eax
imul %edi,%eax
imul %edi,%eax
add %r9d,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (v7 < a2)
        {
            v6 += (a2 - a4) - a5;
        }
        else
        {
            v6 += (a2 * a1) + a2;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += a2 + a3;
    }
    v10 = a4 - a5 * a5;
    if (v9 < a2)
    {
        v11 = a2 + a2;
    }
    else
    {
        v11 = a1 * (a1 + a1 * a3);
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 21
5 22
6 22
7 24
8 24
9 28
10 28
11 28
12 30
13 30
14 30
15 30
16 30
17 30
18 31
<<<sep_out_sample>>>
mov %ecx,%eax
imul %edi,%eax
lea (%rdi,%rdx,1),%r9d
add %esi,%r9d
add %r8d,%r9d
add %r9d,%ecx
sub %edx,%edi
imul %edi,%r8d
imul %r8d,%esi
add %esi,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a2 * ((a1 - a3) * a5);
    v7 = a2 + (a4 * a1 - a2);
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        if (v9 < a5)
        {
            v8 += a1 * a1;
        }
        else
        {
            v8 += (a5 * a2) * a3;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 5
2 5
3 18
4 18
5 18
6 18
7 4
8 4
9 4
10 18
11 18
12 19
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
lea 0x1(%rcx,%r8,1),%eax
imul %edi,%ecx
imul %esi,%ecx
imul %ecx,%edx
add %edx,%eax
sub %edi,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (v6 < a1)
        {
            v6 += a4 + a5;
        }
        else
        {
            v6 += (a3 * a2) - a5;
        }
    }
    v8 = ((a4 * a1) * a2) * a3;
    v9 = (a1 - a1) + a2 - a1;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 18
5 16
6 16
7 16
8 18
9 17
10 18
11 19
<<<sep_out_sample>>>
mov %edx,%eax
imul %edi,%eax
cmp %r8d,%eax
jge 1a <func1+0x1a>
lea (%r8,%r8,1),%r9d
mov %esi,%r10d
imul %esi,%r10d
sub %r10d,%r9d
jmp 2d <func1+0x2d>
mov %r8d,%r9d
imul %edx,%r9d
mov %ecx,%r11d
sub %r9d,%r11d
mov %r11d,%r9d
sub %edi,%r9d
lea 0x1(%r9,%rdi,1),%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = a3 * a1;
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += (a3 * a2) + a3;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        v9 += a5 * a1 - a2;
    }
    if (v6 < a5)
    {
        v11 = a5 + a5 - a2 * a2;
    }
    else
    {
        v11 = a4 - a5 * a3 - a1;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 15
4 15
5 17
6 17
7 17
8 17
9 17
10 21
11 21
12 21
13 21
14 21
15 21
16 23
17 23
18 23
19 23
20 23
21 23
22 24
<<<sep_out_sample>>>
cmp %edi,%ecx
jge e <func1+0xe>
lea (%rdi,%r8,1),%eax
sub %edx,%eax
sub %ecx,%eax
jmp 1a <func1+0x1a>
mov %r8d,%eax
imul %esi,%eax
imul %r8d,%eax
add %esi,%eax
mov %r8d,%r9d
not %r9d
imul %ecx,%r9d
lea (%rdi,%rdx,2),%r10d
lea (%r10,%r9,1),%r9d
add %esi,%r9d
add %r9d,%r8d
lea 0x1(%rcx,%r8,1),%r8d
add %r8d,%eax
imul %edx,%edi
imul %edi,%ecx
add %ecx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a4 + a2 * a5;
    }
    if (a4 < a1)
    {
        v8 = (a1 + a5 - a3) - a4;
    }
    else
    {
        v8 = a5 * a2 * a5 + a2;
    }
    v9 = (a1 * a3 * a4) + a2;
    v10 = a3 - (a4 + a5 * a4);
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 15
8 15
9 15
10 15
11 18
12 18
13 18
14 19
15 19
16 19
17 19
18 19
19 19
20 17
21 17
22 17
23 19
24 20
<<<sep_out_sample>>>
lea (%rsi,%r8,1),%eax
cmp %ecx,%esi
jl 10 <func1+0x10>
mov %edx,%eax
neg %eax
imul %r8d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
lea (%rax,%rdx,2),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a2 < a4)
    {
        v6 = a2 + a5;
    }
    else
    {
        v6 = a5 - (a5 * a3 + a5);
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a1 * a4;
    }
    v9 = a3 + a3 - a1 + a1;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 4
3 4
4 10
5 10
6 10
7 18
8 18
9 18
10 18
11 18
12 18
13 19
<<<sep_out_sample>>>
cmp %ecx,%esi
jge 10 <func1+0x10>
mov %r8d,%eax
imul %edx,%eax
add %esi,%eax
add %edx,%eax
jmp 15 <func1+0x15>
mov %ecx,%eax
imul %esi,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
imul %edi,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += (a1 - a3) - a3;
    }
    if (a2 < a4)
    {
        v8 = a3 + (a2 + a5 * a3);
    }
    else
    {
        v8 = a4 * a2;
    }
    v9 = a1 * a1;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 11
8 15
9 15
10 18
11 18
12 18
13 18
14 18
15 17
16 18
17 19
<<<sep_out_sample>>>
lea (%rdi,%rsi,1),%eax
cmp %r8d,%edi
jge 10 <func1+0x10>
mov %esi,%eax
imul %r8d,%eax
add %edx,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%eax
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a1 < a5)
    {
        v6 = a2 * a5 + a3;
    }
    else
    {
        v6 = (a2 - a4) + a4 + a1;
    }
    v7 = a3 + a1;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 6
7 12
8 13
9 13
10 13
11 13
12 13
13 14
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (v6 < a5)
        {
            v6 += a4 * a2 * a3;
        }
        else
        {
            v6 += a5 - a5 * a1;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += a1 - (a4 + a1);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 21
5 22
<<<sep_out_sample>>>
cmp %r8d,%esi
jge 13 <func1+0x13>
mov %r8d,%eax
imul %edx,%eax
imul %edx,%eax
imul %ecx,%eax
jmp 22 <func1+0x22>
mov %edi,%r9d
imul %esi,%r9d
mov %edx,%eax
imul %ecx,%eax
add %r9d,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a2 < a5)
    {
        v6 = ((a5 * a3) * a3) * a4;
    }
    else
    {
        v6 = a1 * a2 + a3 * a4;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        if (v6 < a1)
        {
            v7 += (a2 * a5) + a3;
        }
        else
        {
            v7 += a5 - a2 + a5;
        }
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        if (a5 < a1)
        {
            v9 += a3 + a5;
        }
        else
        {
            v9 += (a2 - a5) * a4;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 10
13 36
14 36
15 36
16 36
17 36
18 37
<<<sep_out_sample>>>
mov %ecx,%eax
imul %edi,%eax
mov %esi,%r9d
sub %eax,%r9d
add %edi,%r9d
lea (%rsi,%rdx,2),%r10d
cmp %r9d,%esi
jg 27 <func1+0x27>
mov %edx,%eax
imul %r8d,%eax
imul %r8d,%eax
mov %edx,%r10d
sub %eax,%r10d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
add %r10d,%eax
sub %r8d,%esi
lea (%rsi,%rcx,2),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a2 - a4 * a1 + a1;
    if (v6 < a2)
    {
        v7 = a3 + a2 + a3;
    }
    else
    {
        v7 = a3 - a3 * a5 * a5;
    }
    v8 = a4 + a4 - (a5 - a2);
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 4
6 7
7 5
8 5
9 11
10 11
11 11
12 11
13 11
14 14
15 14
16 14
17 14
18 14
19 14
20 13
21 13
22 14
23 15
<<<sep_out_sample>>>
cmp %edi,%edx
jle f <func1+0xf>
lea (%rdx,%rsi,1),%eax
imul %edi,%eax
imul %edi,%eax
jmp 1a <func1+0x1a>
mov %ecx,%eax
imul %edi,%eax
add %esi,%eax
imul %r8d,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (v6 < a3)
        {
            v6 += a2 - a2;
        }
        else
        {
            v6 += a2 * a5 * a1;
        }
    }
    if (a1 < a3)
    {
        v8 = a1 * (a1 * (a3 + a2));
    }
    else
    {
        v8 = a5 * (a2 + a4 * a1);
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a1)
    {
        v9 += a4 - a1;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 18
7 22
8 22
9 22
10 22
11 29
12 29
13 29
14 29
15 29
16 30
<<<sep_out_sample>>>
mov %esi,%eax
imul %r8d,%eax
cmp %edx,%eax
jge 17 <func1+0x17>
mov %ecx,%r9d
imul %r8d,%r9d
imul %r9d,%r9d
jmp 22 <func1+0x22>
lea -0x1(%rsi),%r9d
imul %ecx,%r9d
sub %esi,%r9d
add %edx,%edi
add %esi,%edi
add %edi,%r8d
add %r8d,%ecx
add %ecx,%eax
add %r9d,%eax
add %edx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a2 * a5;
    if (v6 < a3)
    {
        v7 = ((a4 * a4) * a5) * a5;
    }
    else
    {
        v7 = (a4 * a2 - a4) - a2;
    }
    if (a3 < a3)
    {
        v8 = a1 + a2;
    }
    else
    {
        v8 = a2 + a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 5
4 5
5 7
6 7
7 7
8 7
9 11
10 11
11 11
12 21
13 21
14 21
15 21
16 21
17 21
18 19
19 21
20 22
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%eax
imul %r8d,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a4 + a2 * a5;
    }
    v8 = a5 * a5;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 9
6 10
7 11
<<<sep_out_sample>>>
push %rbp
push %rbx
lea (%rdx,%rsi,1),%ebx
add %ecx,%ebx
lea (%rcx,%rcx,1),%r9d
mov %r9d,%r11d
sub %esi,%r11d
cmp %ecx,%edx
jge 1e <func1+0x1e>
lea (%rdx,%r9,1),%r10d
sub %esi,%r10d
jmp 28 <func1+0x28>
lea (%rsi,%r8,1),%r10d
lea (%rdx,%rdx,1),%ebp
sub %ebp,%r10d
mov %r8d,%eax
sub %ecx,%eax
add %edi,%eax
cmp %edi,%edx
jle 3b <func1+0x3b>
mov %r9d,%eax
imul %esi,%eax
sub %ecx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ebx,%ecx
add %r11d,%ecx
add %r10d,%ecx
add %ecx,%eax
pop %rbx
pop %rbp
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a3 + a2 + a4;
    v7 = a4 + a4 - a2;
    if (a3 < a4)
    {
        v8 = (a4 + a4 + a3) - a2;
    }
    else
    {
        v8 = (a2 + a5) - (a3 + a3);
    }
    if (a1 < a3)
    {
        v9 = ((a4 + a4) * a2) - a4;
    }
    else
    {
        v9 = a5 - a4 + a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 2
3 4
4 4
5 5
6 5
7 5
8 6
9 6
10 8
11 8
12 8
13 12
14 12
15 12
16 20
17 20
18 20
19 14
20 14
21 16
22 16
23 16
24 22
25 22
26 22
27 22
28 22
29 22
30 22
31 22
32 23
33 23
34 23
<<<sep_out_sample>>>
lea (%r8,%rdx,1),%eax
imul %esi,%eax
mov %edx,%r9d
sub %eax,%r9d
mov %edi,%eax
imul %esi,%eax
imul %edx,%eax
imul %esi,%eax
test %edi,%edi
jle 25 <func1+0x25>
mov %r8d,%r10d
imul %ecx,%r10d
jmp 2c <func1+0x2c>
mov %edx,%r10d
imul %edi,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a3 - (a5 + a3) * a2;
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += a4 * a3;
    }
    v9 = (a1 * a2) * a3 * a2;
    if (v10 < a1)
    {
        v10 = a5 * a4;
    }
    else
    {
        v10 = (a1 + a1 - a1) * a3;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 10
6 10
7 10
8 10
9 11
10 11
11 13
12 13
13 13
14 17
15 17
16 19
17 19
18 19
19 19
20 19
21 19
22 19
23 20
<<<sep_out_sample>>>
mov %esi,%r9d
sub %edx,%r9d
mov %r8d,%eax
sub %esi,%eax
sub %esi,%eax
cmp %edi,%r9d
jge 24 <func1+0x24>
mov %edi,%r10d
imul %r8d,%r10d
mov $0x1,%eax
sub %r10d,%eax
imul %ecx,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a2 - a3;
    if (v6 < a1)
    {
        v7 = a4 - a1 * a5 * a4;
    }
    else
    {
        v7 = (a5 - a2) - a2;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 11
4 11
5 11
6 5
7 5
8 7
9 7
10 7
11 7
12 7
13 13
14 13
15 13
16 13
17 13
18 13
19 14
<<<sep_out_sample>>>
test %edx,%edx
jle f <func1+0xf>
lea 0x1(%rsi),%eax
imul %r8d,%eax
add %esi,%eax
jmp 17 <func1+0x17>
lea (%rsi,%rdx,1),%eax
imul %ecx,%eax
sub %edi,%eax
lea (%rdi,%rdx,1),%r9d
add %esi,%r9d
add %r9d,%r8d
add %ecx,%r8d
add %r8d,%eax
sub %edx,%ecx
add %ecx,%esi
imul %edx,%esi
add %esi,%eax
sub %edx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (v6 < a3)
    {
        v6 = a2 + (a2 * a5 + a5);
    }
    else
    {
        v6 = (a2 + a3) * a4 - a1;
    }
    v7 = (a2 + (a4 - a3)) * a3;
    v8 = (a1 - (a5 + a3)) + a5;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 14
11 14
12 14
13 14
14 14
15 12
16 12
17 12
18 14
19 13
20 14
21 15
<<<sep_out_sample>>>
cmp %esi,%edx
jge 14 <func1+0x14>
mov %edx,%r9d
sub %edi,%r9d
sub $0x1,%r9d
imul %esi,%r9d
jmp 24 <func1+0x24>
mov $0x1,%r9d
sub %esi,%r9d
imul %edx,%r9d
add %esi,%r9d
test %ecx,%ecx
jle 3a <func1+0x3a>
mov %esi,%eax
imul %edi,%eax
mov %ecx,%r10d
sub %eax,%r10d
mov %r10d,%eax
add %esi,%eax
jmp 42 <func1+0x42>
lea (%rdx,%r8,1),%eax
sub %ecx,%eax
sub %edi,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a3 < a2)
    {
        v6 = (a3 - a1) * a2 - a2;
    }
    else
    {
        v6 = a3 - (a3 * a2) + a2;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        if (v7 < a2)
        {
            v7 += (a3 + a2) - a2;
        }
        else
        {
            v7 += a3 - a4;
        }
    }
    if (v9 < a4)
    {
        v9 = a2 + (a4 - a2 * a1);
    }
    else
    {
        v9 = a3 + a5 - a4 - a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 24
13 24
14 26
15 26
16 26
17 26
18 26
19 26
20 26
21 30
22 30
23 30
24 32
25 32
26 32
27 32
28 32
29 32
30 33
<<<sep_out_sample>>>
cmp %edi,%ecx
jge d <func1+0xd>
lea (%rdi,%rcx,2),%r9d
add %edi,%r9d
jmp 1b <func1+0x1b>
mov %edi,%r9d
imul %esi,%r9d
add %ecx,%r9d
imul %edx,%r9d
lea (%r8,%rsi,1),%r10d
cmp %esi,%r9d
jl 33 <func1+0x33>
mov %r8d,%r10d
imul %esi,%r10d
imul %ecx,%r10d
imul %edi,%r10d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
lea (%r9,%r10,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a4 < a1)
    {
        v6 = ((a1 + a4) + a4) + a1;
    }
    else
    {
        v6 = (a4 + a1 * a2) * a3;
    }
    if (v6 < a2)
    {
        v7 = a5 + a2;
    }
    else
    {
        v7 = a1 * ((a5 * a2) * a4);
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 10
10 14
11 12
12 12
13 18
14 18
15 18
16 18
17 20
18 20
19 20
20 20
21 20
22 20
23 21
<<<sep_out_sample>>>
cmp %edi,%ecx
jle d <func1+0xd>
lea 0x2(%r8),%eax
imul %edi,%eax
jmp 12 <func1+0x12>
mov %edi,%eax
imul %esi,%eax
mov %r8d,%r9d
imul %edi,%r9d
add %r9d,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (a3 < a5)
        {
            v6 += (a5 + a4) + a5;
        }
        else
        {
            v6 += (a4 - a1) + a3;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += a4 + a5 + a2;
    }
    if (a1 < a4)
    {
        v10 = ((a5 * a1) + a1) + a1;
    }
    else
    {
        v10 = a1 * a2;
    }
    v11 = a5 * a1;
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 23
4 23
5 23
6 27
7 27
8 29
9 29
10 30
11 30
12 30
13 30
14 30
15 30
16 31
<<<sep_out_sample>>>
push %rbx
cmp %r8d,%edx
jge 12 <func1+0x12>
mov %ecx,%r11d
imul %edx,%r11d
neg %r11d
jmp 22 <func1+0x22>
mov $0x1,%r11d
sub %edi,%r11d
imul %r8d,%r11d
sub %ecx,%r11d
lea 0x2(%rdx),%r10d
imul %esi,%r10d
lea (%r8,%rdi,1),%r9d
cmp %edi,%r8d
jg 3a <func1+0x3a>
mov %edi,%r9d
imul %edx,%r9d
test %edx,%edx
jle 49 <func1+0x49>
lea -0x1(%rdx),%ebx
imul %ecx,%ebx
imul %edx,%ebx
jmp 55 <func1+0x55>
mov %ecx,%ebx
imul %r8d,%ebx
mov %edx,%eax
sub %edi,%eax
add %eax,%ebx
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea (%rcx,%r11,1),%eax
add %r10d,%eax
add %r9d,%eax
add %ebx,%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a3 < a5)
    {
        v6 = (a3 - a3) - a4 * a3;
    }
    else
    {
        v6 = (a5 - a1 * a5) - a4;
    }
    if (a4 < a4)
    {
        v7 = a4 * a2 - a3 - a2;
    }
    else
    {
        v7 = a2 + a2 * a3 + a2;
    }
    if (a1 < a5)
    {
        v8 = a5 + a1;
    }
    else
    {
        v8 = a1 * a3;
    }
    if (v9 < a3)
    {
        v9 = ((a4 * a3) - a4) * a3;
    }
    else
    {
        v9 = a4 * a5 + (a3 - a1);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 4
3 4
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 18
13 18
14 22
15 20
16 20
17 26
18 26
19 28
20 28
21 30
22 30
23 30
24 30
25 34
26 34
27 34
28 34
29 34
30 36
31 36
32 36
33 36
34 36
35 36
36 36
37 36
38 37
39 37
<<<sep_out_sample>>>
push %rbx
mov %ecx,%ebx
imul %r8d,%ebx
add %esi,%ebx
mov %edi,%r9d
sub %ecx,%r9d
cmp %esi,%r8d
jle 22 <func1+0x22>
lea -0x1(%r8),%r11d
imul %esi,%r11d
imul %r8d,%r11d
jmp 2d <func1+0x2d>
lea 0x1(%rdi),%r11d
imul %ecx,%r11d
sub %edi,%r11d
cmp %r9d,%esi
jle 42 <func1+0x42>
mov %ecx,%r10d
imul %ecx,%r10d
imul %edx,%r10d
add %ecx,%r10d
jmp 4c <func1+0x4c>
lea (%rsi,%r8,1),%r10d
sub %ecx,%r10d
add %edx,%r10d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %ebx,%eax
add %r9d,%eax
add %r11d,%eax
add %r10d,%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a4 * a5 + a2;
    v7 = a1 - a4;
    if (a2 < a5)
    {
        v8 = ((a2 * a5) - a2) * a5;
    }
    else
    {
        v8 = a4 + (a4 * a1) - a1;
    }
    if (v7 < a2)
    {
        v9 = (a4 * a4 * a3) + a4;
    }
    else
    {
        v9 = a3 + ((a2 + a5) - a4);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 4
3 4
4 4
5 5
6 5
7 6
8 6
9 8
10 8
11 8
12 8
13 12
14 12
15 12
16 14
17 14
18 16
19 16
20 16
21 16
22 16
23 20
24 20
25 20
26 22
27 22
28 22
29 22
30 22
31 22
32 22
33 22
34 23
35 23
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %r8d,%edx
add %ecx,%edx
sub %esi,%ecx
sub %edi,%ecx
add %ecx,%r8d
lea 0x1(%rdx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = (a4 - a2 - a1) + a5;
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a1 - a2 - a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 4
6 4
7 4
8 10
9 11
<<<sep_out_sample>>>
lea (%rsi,%rsi,1),%r9d
lea (%r8,%rdi,2),%eax
sub %r9d,%eax
add %edx,%eax
add %eax,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%eax
mov %edi,%ecx
imul %edx,%ecx
imul %ecx,%edx
sub %r8d,%edx
add %eax,%edx
lea (%rdx,%rdi,2),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a2 + a4 + a2;
    }
    v8 = (a1 * a3 * a3) - a5;
    v9 = a3 + a1 - a3 + a1;
    v10 = a5 + (a1 - (a2 + a2));
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 12
4 12
5 12
6 12
7 12
8 9
9 9
10 9
11 9
12 12
13 12
14 13
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x1(%rdx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a3 - a4;
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += (a5 - a4) + a3;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        v9 += a2 - a2 + a4;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 15
2 15
3 15
4 15
5 16
<<<sep_out_sample>>>
mov %edx,%eax
sub %ecx,%eax
lea (%rdx,%rdi,1),%r9d
cmp %esi,%edi
cmovge %r9d,%eax
add %r9d,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (a5 < a4)
        {
            v6 += a4 - a3;
        }
        else
        {
            v6 += a3 * a1 - a5;
        }
    }
    if (a1 < a2)
    {
        v8 = a3 - a4;
    }
    else
    {
        v8 = a3 - a4 + a4 + a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 18
5 18
6 24
7 24
8 24
9 24
10 25
<<<sep_out_sample>>>
test %edx,%edx
jle b <func1+0xb>
mov %edx,%eax
sub %r8d,%eax
jmp 1c <func1+0x1c>
mov %edi,%eax
imul %r8d,%eax
add %esi,%eax
mov %ecx,%r9d
sub %eax,%r9d
mov %r9d,%eax
lea 0x1(%rax,%rdi,1),%eax
add %eax,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (a3 < a2)
        {
            v6 += a1 - a1;
        }
        else
        {
            v6 += a1 - a5 * a1;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        if (v7 < a2)
        {
            v8 += (a2 + a2) - a3;
        }
        else
        {
            v8 += a1 * a4;
        }
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a4)
    {
        v10 += a4 - a3 + a5;
    }
    if (v12 < a3)
    {
        v12 = a3 - a5;
    }
    else
    {
        v12 = a4 - (a2 + a1 * a5);
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 33
2 33
3 35
4 35
5 35
6 39
7 39
8 39
9 39
10 39
11 39
12 41
13 41
14 41
15 41
16 41
17 42
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a1 * a2 - a3;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += a1 * a3 + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 14
2 14
3 14
4 14
5 15
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
mov %edi,%r9d
sub %ecx,%r9d
add %r9d,%esi
add %edx,%esi
add %eax,%esi
sub %edi,%r8d
add %edx,%r8d
add %esi,%r8d
mov %edx,%eax
sub %ecx,%eax
add %eax,%edi
add %r8d,%edi
lea (%rdi,%rdx,2),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a3 + (a1 - a4 + a2);
    if (a1 < a1)
    {
        v7 = ((a2 * a5) + a5) * a4;
    }
    else
    {
        v7 = a3 + (a5 - a1);
    }
    v8 = a1 + (a3 - a4);
    v9 = a3 + a3;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 15
2 15
3 15
4 15
5 4
6 4
7 4
8 4
9 15
10 11
11 11
12 15
13 13
14 13
15 13
16 15
17 15
18 16
<<<sep_out_sample>>>
cmp %esi,%edx
jge 13 <func1+0x13>
lea (%r8,%rdi,2),%eax
mov %r8d,%r10d
sub %eax,%r10d
mov %r10d,%eax
jmp 19 <func1+0x19>
mov %edx,%eax
neg %eax
sub %edi,%eax
cmp %ecx,%r8d
jge 27 <func1+0x27>
mov %esi,%r9d
imul %esi,%r9d
jmp 31 <func1+0x31>
mov %r8d,%r9d
sub %edx,%r9d
imul %edi,%r9d
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a5 + (a3 - a2);
    }
    if (a3 < a2)
    {
        v8 = a5 - ((a5 + a1) + a1);
    }
    else
    {
        v8 = a2 - (a3 + a2) - a1;
    }
    if (a5 < a4)
    {
        v9 = a2 * a2;
    }
    else
    {
        v9 = a1 * (a5 - a3);
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a4)
    {
        if (a1 < a5)
        {
            v10 += (a3 * a4) - a1;
        }
        else
        {
            v10 += a1 + (a1 - a2);
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 11
8 15
9 15
10 15
11 17
12 17
13 19
14 19
15 19
16 23
17 23
18 23
19 37
20 37
21 37
22 37
23 37
24 37
25 38
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
add %ecx,%r8d
imul %ecx,%edx
imul %edx,%esi
sub %edi,%esi
lea (%r8,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = (a3 * a4 * a2) - a1;
    v7 = (a5 - (a5 + a2)) + a2;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 4
7 4
8 6
9 7
<<<sep_out_sample>>>
cmp %esi,%edi
jge 13 <func1+0x13>
lea (%r8,%rsi,1),%r9d
mov %r8d,%eax
imul %edi,%eax
add %eax,%r9d
jmp 1c <func1+0x1c>
lea 0x1(%rdi,%r8,1),%r9d
imul %edi,%r9d
lea (%rdi,%rcx,1),%eax
sub %r8d,%eax
cmp %ecx,%r8d
jl 31 <func1+0x31>
mov %esi,%eax
sub %edx,%eax
imul %ecx,%eax
imul %edi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a1 < a2)
    {
        v6 = a5 + a2 + a5 * a1;
    }
    else
    {
        v6 = (a5 + a1) * a1 + a1;
    }
    if (a5 < a4)
    {
        v7 = a1 + a4 - a5;
    }
    else
    {
        v7 = ((a2 - a3) * a4) * a1;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += a1 + a5 - a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 14
11 14
12 12
13 12
14 18
15 18
16 18
17 18
18 25
19 25
20 25
21 25
22 25
23 25
24 26
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (a5 < a3)
        {
            v6 += a5 - a5 * a2;
        }
        else
        {
            v6 += a4 + (a5 * a5);
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += a2 * a4 - a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 21
5 22
<<<sep_out_sample>>>
mov %ecx,%r9d
sub %edx,%r9d
add %r8d,%r9d
sub %edx,%r9d
lea (%rsi,%rdx,1),%eax
cmp %esi,%ecx
jl 1d <func1+0x1d>
mov %r8d,%eax
sub %ecx,%eax
imul %esi,%eax
add %ecx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a5 - (a3 - a4) - a3;
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        if (a3 < a2)
        {
            v7 += a1 - a5;
        }
        else
        {
            v7 += (a3 * a1) * a5;
        }
    }
    if (a4 < a2)
    {
        v9 = a2 + a3;
    }
    else
    {
        v9 = a4 + a2 * (a5 - a4);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 19
6 17
7 17
8 23
9 23
10 23
11 23
12 25
13 25
14 25
15 25
16 25
17 25
18 26
<<<sep_out_sample>>>
mov %edi,%eax
sub %esi,%eax
mov %edx,%r9d
imul %edi,%r9d
test %esi,%esi
cmovg %r9d,%eax
mov %ecx,%r9d
sub %edx,%r9d
cmp %r8d,%edx
jg 29 <func1+0x29>
mov %edx,%r9d
imul %edx,%r9d
add %r8d,%r9d
sub %ecx,%r9d
add %edx,%edi
add %esi,%edi
add %r8d,%edi
add %ecx,%edi
add %edi,%eax
add %r9d,%eax
sub %ecx,%esi
add %esi,%eax
imul %r8d,%ecx
add %ecx,%edx
add %edx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (v6 < a2)
    {
        v6 = a3 * a1;
    }
    else
    {
        v6 = a1 - a2;
    }
    if (a5 < a3)
    {
        v7 = a4 - a3;
    }
    else
    {
        v7 = (a3 * a3) + a5 - a4;
    }
    v8 = (a2 + a5) - a5 - a4;
    v9 = (a5 * a4) + a3 + a5;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 6
4 6
5 6
6 6
7 14
8 14
9 12
10 12
11 18
12 18
13 18
14 18
15 22
16 22
17 22
18 22
19 22
20 22
21 20
22 22
23 21
24 21
25 21
26 22
27 23
<<<sep_out_sample>>>
lea (%rdi,%rdi,1),%eax
cmp $0x1,%esi
jle 15 <func1+0x15>
mov $0x1,%eax
sub %esi,%eax
imul %edx,%eax
imul %esi,%eax
add %edi,%edx
add %esi,%edx
add %edx,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
imul %ecx,%ecx
imul %edi,%esi
add %esi,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (a3 < a1)
        {
            v6 += a1 - a3 * a3;
        }
        else
        {
            v6 += a2 + a4;
        }
    }
    if (v7 < a2)
    {
        v8 = a2 * (a3 - (a3 * a2));
    }
    else
    {
        v8 = a1 + a1;
    }
    v9 = a4 * a4 + a2 * a1;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 16
3 16
4 18
5 18
6 18
7 18
8 25
9 25
10 25
11 25
12 25
13 24
14 24
15 24
16 25
17 26
<<<sep_out_sample>>>
test %edi,%edi
jle a <func1+0xa>
mov %ecx,%eax
sub %esi,%eax
jmp 15 <func1+0x15>
lea (%rdi,%r8,1),%r9d
mov %edx,%eax
sub %esi,%eax
add %r9d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
lea -0x1(%rdi),%edx
imul %edx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a4 - (a1 + a2);
    }
    if (v6 < a1)
    {
        v8 = a4 - a2;
    }
    else
    {
        v8 = a1 + a5 - (a2 - a3);
    }
    v9 = a1 * a1 - a1;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 15
7 15
8 15
9 15
10 18
11 18
12 18
13 18
14 18
15 17
16 17
17 18
18 19
<<<sep_out_sample>>>
push %rbx
cmp %ecx,%edi
jge b <func1+0xb>
mov %edi,%ebx
sub %esi,%ebx
jmp 15 <func1+0x15>
mov %edx,%ebx
sub %r8d,%ebx
sub %esi,%ebx
imul %ecx,%ebx
cmp %edx,%edi
jge 27 <func1+0x27>
mov %edx,%r11d
sub %ecx,%r11d
add %edi,%r11d
sub %esi,%r11d
jmp 33 <func1+0x33>
mov %r8d,%r11d
sub %ecx,%r11d
sub %ecx,%r11d
add %esi,%r11d
lea 0x1(%r8),%r10d
imul %edi,%r10d
lea (%rdx,%r8,1),%r9d
mov %edi,%eax
imul %ecx,%eax
test %r8d,%r8d
cmovg %eax,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %ebx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a1 < a4)
    {
        v6 = a1 - a2;
    }
    else
    {
        v6 = ((a3 - a5) - a2) * a4;
    }
    if (a1 < a3)
    {
        v7 = ((a3 - a4) + a1) - a2;
    }
    else
    {
        v7 = ((a5 - a4) - a4) + a2;
    }
    v8 = a5 * a1 + a1;
    if (v9 < a5)
    {
        v9 = a1 * a4;
    }
    else
    {
        v9 = a5 + a4 - a4 + a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 4
3 4
4 6
5 6
6 6
7 10
8 10
9 10
10 10
11 12
12 12
13 14
14 14
15 14
16 14
17 14
18 18
19 18
20 18
21 18
22 20
23 20
24 27
25 23
26 23
27 23
28 23
29 29
30 29
31 29
32 29
33 29
34 29
35 29
36 29
37 30
38 30
<<<sep_out_sample>>>
lea (%rsi,%rcx,1),%eax
lea (%rax,%rdi,2),%eax
add %eax,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a5 * a2;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += a5 + a5;
    }
    v10 = a2 + a4 + a1 - a3;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 14
2 15
3 15
4 15
5 15
6 16
<<<sep_out_sample>>>
cmp $0x1,%edx
jle 17 <func1+0x17>
lea (%rdi,%rcx,1),%eax
imul %r8d,%eax
mov %esi,%r9d
sub %eax,%r9d
mov %r9d,%eax
jmp 21 <func1+0x21>
mov %esi,%eax
imul %edx,%eax
add %r8d,%eax
sub %edx,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a4 + a4 + a4;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += a2 * a1 - a3;
    }
    if (v7 < a3)
    {
        v10 = a2 - a5 * (a1 + a4);
    }
    else
    {
        v10 = (a2 * a3 + a5) - a3;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 14
2 14
3 16
4 16
5 16
6 16
7 16
8 16
9 20
10 20
11 20
12 20
13 22
14 22
15 22
16 22
17 22
18 23
<<<sep_out_sample>>>
lea (%r8,%rcx,1),%eax
cmp %ecx,%edi
jge 15 <func1+0x15>
lea (%rdi,%rdi,1),%eax
mov %esi,%r9d
imul %edi,%r9d
sub %r9d,%eax
lea (%r8,%rdi,1),%r9d
add %ecx,%r9d
cmp %edx,%eax
jge 2b <func1+0x2b>
lea (%rcx,%r8,1),%r9d
imul %ecx,%r9d
add %esi,%r9d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%eax
lea 0x1(%r9,%rax,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a1 < a4)
    {
        v6 = a1 + a1 - a2 * a1;
    }
    else
    {
        v6 = a5 + a4;
    }
    if (v6 < a3)
    {
        v7 = (a4 + a5) * a4 + a2;
    }
    else
    {
        v7 = (a5 + a1) + a4;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += a3 * a5 - a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 6
7 6
8 18
9 18
10 12
11 12
12 14
13 14
14 14
15 25
16 25
17 25
18 25
19 25
20 25
21 26
<<<sep_out_sample>>>
add %edx,%edi
add %esi,%edi
add %r8d,%edi
lea 0x1(%rcx,%rdi,1),%eax
imul %ecx,%edx
add %edx,%eax
sub %esi,%ecx
sub $0x1,%ecx
imul %ecx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a1 + (a4 * a1);
    }
    v8 = a3 * a4;
    v9 = a5 * (a4 - a2) - a5;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 11
5 9
6 11
7 10
8 10
9 10
10 11
11 12
<<<sep_out_sample>>>
mov %ecx,%r9d
sub %esi,%r9d
cmp %ecx,%esi
mov $0x0,%eax
cmovge %eax,%r9d
cmp %edx,%r8d
jge 1d <func1+0x1d>
mov %esi,%eax
imul %esi,%eax
jmp 2c <func1+0x2c>
mov %edi,%r10d
imul %r8d,%r10d
mov %ecx,%eax
sub %r8d,%eax
add %r10d,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    if (a2 < a4)
    {
        v6 = a4 - a2;
    }
    else
    {
        v6 = ((a4 - a4) * a5) * a4;
    }
    if (a5 < a3)
    {
        v7 = ((a3 + a2) - a3) * a2;
    }
    else
    {
        v7 = a1 * a5 - (a5 - a4);
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += a1 + (a3 * a2);
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a3)
    {
        if (a5 < a1)
        {
            v10 += a2 + a1;
        }
        else
        {
            v10 += a5 - a5;
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 6
6 12
7 12
8 14
9 14
10 14
11 18
12 18
13 18
14 18
15 18
16 37
17 37
18 37
19 37
20 37
21 37
22 38
<<<sep_out_sample>>>
cmp $0x1,%esi
jle 11 <func1+0x11>
mov %edx,%eax
imul %esi,%eax
add %edi,%eax
imul %edx,%eax
jmp 1b <func1+0x1b>
mov %edx,%eax
sub %esi,%eax
add %edx,%eax
imul %r8d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += (a1 * a4) * a5;
    }
    if (v7 < a2)
    {
        v8 = (a3 * a2 + a1) * a3;
    }
    else
    {
        v8 = a5 * (a3 - a2 + a3);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 11
8 15
9 15
10 15
11 15
12 17
13 17
14 17
15 17
16 17
17 18
<<<sep_out_sample>>>
imul %edi,%ecx
imul %edi,%ecx
sub %r8d,%ecx
lea 0x1(%rdi,%rcx,1),%eax
add %eax,%edx
add %esi,%edx
add %edx,%r8d
lea (%rsi,%rsi,2),%eax
lea 0x1(%r8,%rax,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a5 - a4 + a5;
    }
    v8 = (a2 + a2 - a4) + a2;
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        if (v9 < a3)
        {
            v9 += (a3 * a2) * a2;
        }
        else
        {
            v9 += (a4 - a5) - a4;
        }
    }
    v11 = a1 * (a4 * a1) - a5;
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 22
4 23
5 23
6 23
7 23
8 9
9 23
10 24
<<<sep_out_sample>>>
lea 0x2(%rsi),%r9d
imul %edi,%r9d
cmp %r8d,%edi
jge 1a <func1+0x1a>
lea 0x1(%rdx),%r11d
imul %r8d,%r11d
add %edx,%r11d
jmp 29 <func1+0x29>
mov %esi,%eax
imul %ecx,%eax
mov %edi,%r11d
sub %eax,%r11d
imul %ecx,%r11d
cmp %edx,%r9d
jge 3e <func1+0x3e>
mov %esi,%r10d
imul %ecx,%r10d
imul %edx,%r10d
sub %esi,%r10d
jmp 4c <func1+0x4c>
mov %ecx,%r10d
sub %edi,%r10d
mov %esi,%eax
imul %ecx,%eax
add %eax,%r10d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
add %r11d,%eax
add %r10d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a1 + a2 * a1 + a1;
    if (a1 < a5)
    {
        v7 = a3 * a5 + a5 + a3;
    }
    else
    {
        v7 = (a1 - (a2 * a4)) * a4;
    }
    if (v6 < a3)
    {
        v8 = a2 * a4 * a3 - a2;
    }
    else
    {
        v8 = a4 - a1 + a2 * a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 5
4 5
5 7
6 7
7 7
8 7
9 11
10 11
11 11
12 11
13 11
14 13
15 13
16 15
17 15
18 15
19 15
20 15
21 19
22 19
23 19
24 19
25 19
26 21
27 21
28 21
29 21
30 21
31 21
32 21
33 22
<<<sep_out_sample>>>
lea (%rdx,%rsi,1),%r10d
mov %esi,%r9d
sub %edx,%r9d
cmp %ecx,%r8d
jl 1c <func1+0x1c>
mov %edi,%r9d
sub %esi,%r9d
imul %r8d,%r9d
add %esi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a3 + a2;
    if (a5 < a4)
    {
        v7 = a2 - a3;
    }
    else
    {
        v7 = a2 + ((a1 - a2) * a5);
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 7
3 7
4 5
5 5
6 11
7 11
8 11
9 11
10 13
11 13
12 13
13 13
14 13
15 13
16 14
<<<sep_out_sample>>>
cmp %edx,%ecx
jge e <func1+0xe>
mov %r8d,%eax
neg %eax
imul %edi,%eax
jmp 15 <func1+0x15>
lea (%rcx,%rdx,1),%eax
sub %edi,%eax
add %ecx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a1 - a1;
    if (a4 < a3)
    {
        v7 = a1 * ((a3 - a5) - a3);
    }
    else
    {
        v7 = a4 - (a1 - (a4 + a3));
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 5
2 5
3 7
4 7
5 7
6 7
7 11
8 11
9 11
10 13
11 13
12 13
13 13
14 13
15 14
<<<sep_out_sample>>>
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
sub %edi,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a1 < a1)
    {
        v6 = a3 + ((a3 * a5) + a5);
    }
    else
    {
        v6 = a3 - a3;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        if (v7 < a4)
        {
            v7 += (a2 + a5) + a5;
        }
        else
        {
            v7 += a4 - a4 * a3;
        }
    }
    v9 = a4 - a1;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 25
2 25
3 25
4 25
5 24
6 25
7 26
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %edx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (v7 < a3)
        {
            v6 += a1 - a5;
        }
        else
        {
            v6 += a1 + a2 * a5;
        }
    }
    v8 = a2 + a3;
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        v9 += a3 - a3 * a4;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 22
4 22
5 16
6 22
7 23
<<<sep_out_sample>>>
mov %esi,%eax
imul %edx,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %esi,%edx
add %edx,%r8d
lea (%r8,%rcx,1),%edx
add %edi,%esi
imul %ecx,%edi
lea (%rsi,%rdi,1),%ecx
lea 0x1(%rdx,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = a1 + a2 + a1 * a4;
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += a1 - a2;
    }
    v9 = a2 * a3 - a1 + a1;
    v10 = 0;
    for (v11 = 0; v11++; v11<a1)
    {
        v10 += a4 * (a2 + a1);
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 16
4 16
5 16
6 16
7 4
8 4
9 4
10 16
11 16
12 17
<<<sep_out_sample>>>
add %edx,%edi
add %esi,%edi
add %edi,%r8d
lea (%r8,%rcx,1),%eax
imul %ecx,%ecx
imul %ecx,%esi
sub %esi,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a3 - a2 * (a4 * a4);
    v7 = (a2 - a2) * a5 * a4;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 4
7 4
8 6
9 7
<<<sep_out_sample>>>
cmp %ecx,%esi
jge 13 <func1+0x13>
mov %esi,%r9d
sub %edx,%r9d
lea (%rcx,%r8,1),%eax
add %eax,%r9d
jmp 1a <func1+0x1a>
lea (%r8,%rdi,2),%r9d
add %edx,%r9d
cmp %edx,%esi
jle 27 <func1+0x27>
mov %edx,%eax
sub %r8d,%eax
add %eax,%eax
jmp 2f <func1+0x2f>
lea 0x1(%rdx),%eax
imul %edi,%eax
add %ecx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a2 < a4)
    {
        v6 = (a2 - a3) + (a4 + a5);
    }
    else
    {
        v6 = a5 + a1 + a1 + a3;
    }
    if (a3 < a2)
    {
        v7 = ((a3 - a5) - a5) + a3;
    }
    else
    {
        v7 = (a1 * a3) + a1 + a4;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += a3 - a4 + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 12
11 12
12 14
13 14
14 14
15 14
16 18
17 18
18 18
19 25
20 25
21 25
22 25
23 25
24 25
25 26
<<<sep_out_sample>>>
mov %esi,%r9d
sub %ecx,%r9d
add %esi,%r9d
sub %edx,%r9d
mov %edx,%eax
sub %esi,%eax
lea (%rcx,%rsi,1),%r10d
cmp %r8d,%esi
jl 24 <func1+0x24>
mov %edx,%r10d
imul %ecx,%r10d
imul %ecx,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a1 < a1)
    {
        v6 = a2 + a3 * a2 * a1;
    }
    else
    {
        v6 = (a2 - a4) + a2 - a3;
    }
    v7 = a3 + ((a2 - a2) - a2);
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += a3 + a2 - a4;
    }
    if (a2 < a5)
    {
        v10 = a4 + a2;
    }
    else
    {
        v10 = a4 * (a3 * a4);
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 12
6 12
7 20
8 18
9 18
10 24
11 24
12 24
13 26
14 26
15 26
16 26
17 26
18 26
19 26
20 27
<<<sep_out_sample>>>
lea (%rsi,%r8,1),%eax
mov %ecx,%r9d
sub %eax,%r9d
add %edx,%r9d
mov %edx,%eax
imul %edi,%eax
mov %r8d,%r10d
sub %eax,%r10d
lea (%r9,%rdi,2),%edi
lea (%rdi,%r10,1),%eax
add %eax,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (a3 < a1)
        {
            v6 += a1 + (a3 + a3);
        }
        else
        {
            v6 += (a2 - a1) * a3;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        if (a3 < a1)
        {
            v8 += a5 + a2;
        }
        else
        {
            v8 += (a4 + a2) - a5;
        }
    }
    v10 = a4 - (a2 + a5) + a3;
    v11 = a5 - (a3 * a1) + a1;
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 28
2 28
3 28
4 28
5 29
6 29
7 29
8 29
9 30
10 30
11 30
12 30
13 30
14 30
15 31
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %edx,%r8d
lea 0x1(%rcx,%r8,1),%eax
sub %esi,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += (a1 + a1) + a5;
    }
    v8 = a4 - a2;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 9
6 10
7 11
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
imul %r8d,%esi
imul %esi,%ecx
sub %ecx,%edx
add %eax,%edx
lea 0x1(%rdx,%rdi,2),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a3 - a5 * a2 * a4;
    v7 = (a1 - (a4 - a4)) + a1;
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        if (v7 < a5)
        {
            v8 += a5 + a1;
        }
        else
        {
            v8 += (a5 - a4) + a2;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 18
5 4
6 4
7 4
8 18
9 18
10 19
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
add %ecx,%r8d
mov %edx,%eax
imul %edx,%eax
sub %edi,%eax
sub %esi,%eax
add %r8d,%eax
add %esi,%edx
imul %edx,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = (a3 * a3 - a1) - a2;
    v7 = (a4 * a2) + a3 * a4;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 4
7 4
8 4
9 6
10 5
11 5
12 6
13 7
<<<sep_out_sample>>>
cmp %edx,%esi
jge d <func1+0xd>
mov %edi,%r9d
imul %ecx,%r9d
jmp 14 <func1+0x14>
mov %edx,%r9d
imul %edi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
add %r8d,%esi
mov %ecx,%r10d
sub %esi,%r10d
mov %r10d,%esi
add %edi,%esi
add %esi,%eax
sub %edx,%ecx
imul %edi,%edx
add %edx,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a2 < a3)
    {
        v6 = a1 * a4;
    }
    else
    {
        v6 = a3 * a1 + a4 - a4;
    }
    v7 = a4 - (a5 + a2) + a1;
    if (a2 < a2)
    {
        v8 = (a2 * a3) + a3 * a4;
    }
    else
    {
        v8 = (a4 - a3) + a3 * a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 21
9 21
10 21
11 21
12 21
13 12
14 12
15 12
16 12
17 12
18 21
19 19
20 19
21 19
22 21
23 22
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
lea (%r8,%rcx,1),%eax
add %edx,%esi
mov %ecx,%r8d
imul %edx,%r8d
add %r8d,%esi
add %esi,%eax
sub %edx,%edi
sub $0x1,%edi
imul %edi,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a2 + a3 + a4 * a3;
    if (a1 < a1)
    {
        v7 = a4 + a1;
    }
    else
    {
        v7 = (a4 * (a1 - a3)) - a4;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += a5 * a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 18
5 4
6 4
7 4
8 4
9 18
10 11
11 11
12 11
13 18
14 19
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
add %ecx,%esi
imul %ecx,%edx
add %esi,%edx
add %ecx,%r8d
imul %edi,%ecx
add %r8d,%ecx
lea 0x1(%rdx,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a3 * a4;
    v7 = a5 + a4 + (a1 * a4);
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += a3 * a3 + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 11
5 4
6 11
7 5
8 5
9 5
10 11
11 12
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add $0x1,%edi
imul %edi,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (a2 < a3)
        {
            v6 += (a1 + a2) + a4;
        }
        else
        {
            v6 += a3 - a4 + a1;
        }
    }
    v8 = a3 + (a1 * a3);
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 16
6 16
7 17
8 18
<<<sep_out_sample>>>
test %edx,%edx
jle 10 <func1+0x10>
mov %esi,%eax
sub %edi,%eax
imul %edx,%eax
add %r8d,%eax
jmp 18 <func1+0x18>
lea (%rsi,%rcx,1),%eax
imul %esi,%eax
add %edi,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (v6 < a3)
    {
        v6 = a5 + ((a2 - a1) * a3);
    }
    else
    {
        v6 = (a2 + a4) * a2 + a1;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += a2 * (a5 - a2);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 17
12 17
13 17
14 17
15 17
16 18
<<<sep_out_sample>>>
lea (%rsi,%rsi,1),%r9d
cmp %r8d,%ecx
jge 13 <func1+0x13>
lea (%rdi,%rcx,1),%r9d
add %r8d,%r9d
sub %esi,%r9d
lea (%rcx,%rdi,1),%eax
cmp %esi,%ecx
jge 2b <func1+0x2b>
mov %esi,%r10d
imul %edi,%r10d
sub $0x1,%r10d
imul %edi,%r10d
jmp 32 <func1+0x32>
mov %eax,%r10d
imul %edx,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
lea 0x1(%rax,%r9,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a4 < a5)
    {
        v6 = ((a1 + a4) + a5) - a2;
    }
    else
    {
        v6 = a2 + (a2 + a5 - a5);
    }
    v7 = a4 + a1;
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += (a1 * a2) + a1;
    }
    if (a4 < a2)
    {
        v10 = (a2 * a1) * a1 - a1;
    }
    else
    {
        v10 = a3 * a1 + a3 * a4;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 6
7 12
8 18
9 18
10 20
11 20
12 20
13 20
14 20
15 24
16 24
17 26
18 26
19 26
20 26
21 26
22 26
23 26
24 27
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
add %r8d,%ecx
sub %edi,%edx
lea 0x1(%rcx,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a2 < a2)
    {
        v6 = a2 - a2;
    }
    else
    {
        v6 = (a4 - a1) - (a4 - a3);
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        if (v7 < a5)
        {
            v7 += a2 - a1 * a2;
        }
        else
        {
            v7 += a5 - a1 - a3;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 24
2 24
3 24
4 24
5 10
6 24
7 25
<<<sep_out_sample>>>
lea -0x1(%rsi),%eax
imul %edx,%eax
lea 0x1(%rdi,%rax,1),%eax
add %eax,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a5 * a2 + a3;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        if (v6 < a5)
        {
            v8 += a2 * a4;
        }
        else
        {
            v8 += a3 - a3 + a3;
        }
    }
    v10 = a2 * a3 - a3;
    v11 = 0;
    for (v12 = 0; v12++; v12<a5)
    {
        v11 += a5 + a3 * a4;
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 27
4 27
5 27
6 27
7 27
8 28
<<<sep_out_sample>>>
lea 0x1(%r8),%eax
imul %r8d,%eax
add %eax,%edi
add %edx,%edi
add %esi,%edi
add %r8d,%edi
add %edi,%ecx
lea (%rcx,%r8,2),%eax
mov %edx,%ecx
imul %esi,%ecx
imul %ecx,%edx
sub %edx,%esi
lea 0x1(%rax,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = (a5 - a3) + a3 + a5;
    v7 = a2 - (a3 * (a3 * a2));
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        if (v7 < a2)
        {
            v8 += a4 - a2 + a4;
        }
        else
        {
            v8 += (a4 - a3) - a4;
        }
    }
    v10 = (a5 * a5) + a5;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 19
4 19
5 19
6 19
7 19
8 19
9 5
10 5
11 5
12 5
13 19
14 20
<<<sep_out_sample>>>
lea (%rcx,%rcx,1),%eax
cmp %edx,%r8d
jge 11 <func1+0x11>
mov %edx,%eax
sub %esi,%eax
imul %esi,%eax
add %edx,%eax
add %edx,%edi
add %esi,%edi
add %edi,%r8d
add %r8d,%ecx
add %ecx,%eax
add %esi,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a5 < a3)
    {
        v6 = a2 * (a3 - a2) + a3;
    }
    else
    {
        v6 = a4 + a4;
    }
    v7 = a3 + a2;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 6
7 6
8 13
9 13
10 13
11 13
12 13
13 12
14 13
15 14
<<<sep_out_sample>>>
lea (%rsi,%rcx,1),%eax
cmp %esi,%r8d
jl d <func1+0xd>
lea (%rsi,%rcx,2),%eax
add %edi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a5 < a2)
    {
        v6 = a2 + a4;
    }
    else
    {
        v6 = a1 + (a4 + (a4 + a2));
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        if (a5 < a4)
        {
            v7 += a1 + a5;
        }
        else
        {
            v7 += (a5 + a5) + a5;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 6
2 4
3 4
4 10
5 10
6 24
7 24
8 24
9 24
10 24
11 25
<<<sep_out_sample>>>
test %ecx,%ecx
jle c <func1+0xc>
mov %edi,%r11d
sub %r8d,%r11d
jmp 17 <func1+0x17>
lea 0x1(%r8),%r11d
imul %ecx,%r11d
add %esi,%r11d
cmp %r8d,%ecx
jle 27 <func1+0x27>
mov %edx,%r10d
sub %ecx,%r10d
add %edi,%r10d
jmp 32 <func1+0x32>
lea -0x1(%r8),%r10d
imul %esi,%r10d
add %edx,%r10d
lea (%rcx,%r8,1),%r9d
cmp %edx,%esi
jle 45 <func1+0x45>
lea 0x1(%rcx),%r9d
imul %esi,%r9d
add %ecx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (v6 < a4)
    {
        v6 = a1 - a5;
    }
    else
    {
        v6 = a2 + (a5 * a4 + a4);
    }
    if (a5 < a4)
    {
        v7 = a3 - a4 + a1;
    }
    else
    {
        v7 = (a2 * a5) - a2 + a3;
    }
    if (a3 < a2)
    {
        v8 = (a2 + (a2 * a4)) + a4;
    }
    else
    {
        v8 = (a5 - a3) + a4 + a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 12
10 12
11 14
12 14
13 14
14 14
15 18
16 18
17 18
18 26
19 20
20 20
21 22
22 22
23 22
24 28
25 28
26 28
27 28
28 28
29 28
30 28
31 29
<<<sep_out_sample>>>
cmp %edx,%ecx
jge 10 <func1+0x10>
lea (%r8,%rdx,1),%eax
add %esi,%eax
imul %r8d,%eax
jmp 22 <func1+0x22>
mov %r8d,%eax
imul %ecx,%eax
imul %edx,%eax
mov %esi,%r9d
sub %eax,%r9d
mov %r9d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += (a5 * a1) + a2;
    }
    if (a4 < a3)
    {
        v8 = (a5 + a3 + a2) * a5;
    }
    else
    {
        v8 = a2 - (a5 * a4) * a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 15
8 15
9 15
10 15
11 15
12 15
13 17
14 17
15 17
16 17
17 17
18 18
<<<sep_out_sample>>>
lea (%rsi,%r8,1),%eax
mov %r8d,%r9d
sub %edi,%r9d
cmp %ecx,%r8d
cmovge %r9d,%eax
lea (%rsi,%rdi,1),%r9d
cmp %edi,%eax
jl 25 <func1+0x25>
mov %edi,%r9d
sub %edx,%r9d
add %r8d,%r9d
sub %ecx,%r9d
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%eax
lea 0x1(%r9,%rax,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    if (a5 < a4)
    {
        v6 = a2 + a5;
    }
    else
    {
        v6 = a5 - a1;
    }
    if (v6 < a1)
    {
        v7 = a2 + a1;
    }
    else
    {
        v7 = (a1 - a3) + a5 - a4;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += a2 * (a3 + a4);
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a2)
    {
        v10 += (a4 - a3) - a1;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 6
6 14
7 12
8 12
9 18
10 18
11 18
12 18
13 30
14 30
15 30
16 30
17 30
18 30
19 31
<<<sep_out_sample>>>
cmp %ecx,%esi
jge 20 <func1+0x20>
lea (%rdx,%r8,1),%r11d
lea 0x1(%r8,%r8,1),%r10d
imul %r8d,%r10d
mov %edx,%r9d
sub %esi,%r9d
imul %edi,%r9d
add %r8d,%r9d
jmp 3c <func1+0x3c>
mov %r8d,%r11d
sub %ecx,%r11d
lea 0x1(%r8,%r8,1),%r10d
imul %r8d,%r10d
mov %esi,%r9d
imul %r8d,%r9d
add %edi,%r9d
add %r8d,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a2 < a4)
    {
        v6 = a3 + a5;
    }
    else
    {
        v6 = a5 - a4;
    }
    v7 = a5 + (a5 + a5) * a5;
    if (a2 < a4)
    {
        v8 = a5 - a1 * (a2 - a3);
    }
    else
    {
        v8 = (a1 + (a2 * a5)) + a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 12
5 12
6 15
7 15
8 15
9 15
10 15
11 10
12 10
13 12
14 12
15 19
16 19
17 19
18 19
19 21
20 21
21 21
22 21
23 21
24 21
25 21
26 22
<<<sep_out_sample>>>
lea (%rsi,%rdx,1),%eax
cmp %edx,%ecx
cmovge %eax,%eax
mov %esi,%r10d
imul %esi,%r10d
add %edi,%r10d
imul %edx,%r10d
cmp %ecx,%eax
jge 29 <func1+0x29>
mov %edx,%r9d
imul %edi,%r9d
sub %esi,%r9d
add %r8d,%r9d
jmp 30 <func1+0x30>
mov %edi,%r9d
imul %r8d,%r9d
add %edx,%edi
add %edi,%esi
add %r8d,%esi
add %esi,%ecx
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
sub %r8d,%eax
sub %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a4 < a3)
    {
        v6 = a2 + a3;
    }
    else
    {
        v6 = a3 + a2;
    }
    v7 = a3 * (a2 * a2 + a1);
    if (v6 < a4)
    {
        v8 = a5 + (a3 * a1 - a2);
    }
    else
    {
        v8 = ((a5 + a2) - a2) * a1;
    }
    v9 = (a3 - a3 - a3) - a5;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 12
5 12
6 12
7 12
8 13
9 13
10 15
11 15
12 15
13 15
14 15
15 19
16 19
17 22
18 22
19 22
20 22
21 22
22 22
23 22
24 21
25 22
26 23
<<<sep_out_sample>>>
cmp %edx,%esi
jge 10 <func1+0x10>
mov %edx,%r10d
imul %ecx,%r10d
neg %r10d
jmp 1d <func1+0x1d>
mov %edx,%r10d
imul %edi,%r10d
add %ecx,%r10d
sub %edi,%r10d
cmp %edi,%edx
jge 2a <func1+0x2a>
mov %r8d,%r9d
imul %edi,%r9d
jmp 34 <func1+0x34>
mov %ecx,%r9d
imul %edx,%r9d
sub %r8d,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a2 < a3)
    {
        v6 = (a1 - (a3 * a4)) - a1;
    }
    else
    {
        v6 = (a4 + a3 * a1) - a1;
    }
    if (a3 < a1)
    {
        v7 = a5 * a1;
    }
    else
    {
        v7 = a4 * a3 - a5;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 10
11 12
12 12
13 14
14 14
15 14
16 18
17 18
18 18
19 20
20 20
21 20
22 20
23 20
24 20
25 21
<<<sep_out_sample>>>
cmp %r8d,%esi
jge 11 <func1+0x11>
mov %r8d,%eax
imul %edx,%eax
sub %esi,%eax
sub %edx,%eax
jmp 22 <func1+0x22>
mov %r8d,%eax
imul %esi,%eax
mov %ecx,%r9d
sub %eax,%r9d
mov %r9d,%eax
sub %edi,%eax
lea 0x1(%rsi),%edi
imul %esi,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a4 - a1 + a4;
    }
    if (a2 < a5)
    {
        v8 = a5 * a3 - a2 - a3;
    }
    else
    {
        v8 = a4 - a5 * a2 - a1;
    }
    v9 = (a1 - a1) * a1;
    v10 = a2 + a2 * a2 - a1;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 11
8 15
9 15
10 15
11 15
12 15
13 15
14 18
15 18
16 19
17 19
18 19
19 19
20 19
21 20
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a2 * a2 - a2;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        if (v6 < a3)
        {
            v8 += a2 + a2 + a4;
        }
        else
        {
            v8 += a2 * a5;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 21
5 22
<<<sep_out_sample>>>
lea (%rcx,%rdi,1),%eax
cmp %r8d,%ecx
jge 13 <func1+0x13>
mov %esi,%eax
sub %edx,%eax
imul %r8d,%eax
imul %edi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a4 < a5)
    {
        v6 = ((a2 - a3) * a5) * a1;
    }
    else
    {
        v6 = a4 + a1;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a2 + a5 + a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 6
7 6
8 17
9 17
10 17
11 17
12 17
13 18
<<<sep_out_sample>>>
cmp %esi,%ecx
jle c <func1+0xc>
mov %edi,%eax
sub %ecx,%eax
add %edx,%eax
jmp 16 <func1+0x16>
lea 0x1(%rsi),%eax
imul %edi,%eax
imul %r8d,%eax
lea (%rdi,%rdx,1),%r9d
add %esi,%r9d
add %r9d,%r8d
lea 0x1(%rcx,%r8,1),%r8d
add %r8d,%eax
add %edx,%esi
imul %esi,%edi
imul %edi,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (a5 < a5)
        {
            v6 += a3 * a2 - a1;
        }
        else
        {
            v6 += a4 - a3 + a5;
        }
    }
    if (a2 < a4)
    {
        v8 = a3 - (a4 - a1);
    }
    else
    {
        v8 = a5 * (a1 + a1 * a2);
    }
    v9 = (a3 + a2) * a1 * a4;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 18
7 22
8 22
9 22
10 25
11 25
12 25
13 25
14 25
15 24
16 24
17 24
18 25
19 26
<<<sep_out_sample>>>
cmp %edi,%edx
jge c <func1+0xc>
mov %esi,%r9d
sub %r8d,%r9d
jmp 13 <func1+0x13>
mov %esi,%r9d
imul %r8d,%r9d
mov $0x1,%eax
sub %edi,%eax
imul %ecx,%eax
lea (%rsi,%rdx,1),%r10d
test %esi,%esi
jg 32 <func1+0x32>
mov %edx,%r10d
sub %edi,%r10d
add %r8d,%r10d
imul %ecx,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a3 < a1)
    {
        v6 = a2 - a5;
    }
    else
    {
        v6 = a2 * a5;
    }
    v7 = a4 - a4 * a1;
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += a1 - (a4 * a3);
    }
    if (v10 < a2)
    {
        v10 = a2 + a3;
    }
    else
    {
        v10 = (a3 - a1 + a5) * a4;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 12
9 12
10 12
11 20
12 18
13 18
14 24
15 24
16 24
17 24
18 26
19 26
20 26
21 26
22 26
23 26
24 26
25 27
<<<sep_out_sample>>>
cmp %esi,%ecx
jge 15 <func1+0x15>
mov %r8d,%r9d
imul %r8d,%r9d
sub $0x1,%r9d
imul %edx,%r9d
jmp 1f <func1+0x1f>
lea (%rdi,%rdx,1),%r9d
add %esi,%r9d
add %ecx,%r9d
lea (%rdx,%rdx,1),%r10d
test %edi,%edi
jle 35 <func1+0x35>
mov %edi,%r10d
sub %esi,%r10d
mov %esi,%eax
imul %edx,%eax
add %eax,%r10d
cmp %edx,%r9d
jge 4a <func1+0x4a>
mov %edx,%r11d
imul %r8d,%r11d
imul %edi,%r11d
add %r8d,%r11d
jmp 55 <func1+0x55>
lea 0x1(%rdx),%r11d
imul %edi,%r11d
add %ecx,%r11d
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
add %r9d,%r10d
lea (%r10,%r11,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a4 < a2)
    {
        v6 = a5 * a5 * a3 - a3;
    }
    else
    {
        v6 = a2 + (a1 + a3) + a4;
    }
    if (v7 < a1)
    {
        v7 = a1 - a2 + a2 * a3;
    }
    else
    {
        v7 = a3 + a3;
    }
    if (v6 < a3)
    {
        v8 = a3 * a5 * a1 + a5;
    }
    else
    {
        v8 = a1 * a3 + a1 + a4;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        v9 += a3 - (a2 + a3);
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 18
12 12
13 12
14 14
15 14
16 14
17 14
18 14
19 20
20 20
21 22
22 22
23 22
24 22
25 22
26 26
27 26
28 26
29 33
30 33
31 33
32 33
33 33
34 33
35 33
36 34
<<<sep_out_sample>>>
add %edx,%edi
add %esi,%edi
add %r8d,%edi
add %edi,%ecx
sub %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a1 < a1)
    {
        v6 = a3 - (a5 * (a1 * a4));
    }
    else
    {
        v6 = a2 - a3 + a5;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        if (v6 < a4)
        {
            v7 += a2 - a1 + a4;
        }
        else
        {
            v7 += a4 * (a2 - a3);
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 24
2 24
3 24
4 24
5 10
6 10
7 24
8 25
<<<sep_out_sample>>>
lea (%rsi,%r8,1),%r9d
mov %r8d,%eax
imul %ecx,%eax
add %eax,%r9d
test %esi,%esi
jle 1a <func1+0x1a>
mov %r8d,%eax
sub %edi,%eax
sub %edx,%eax
jmp 23 <func1+0x23>
lea 0x1(%rdi),%eax
imul %edi,%eax
imul %edi,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
add %ecx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a2 < a2)
    {
        v6 = a5 + a2;
    }
    else
    {
        v6 = a2 + a5 + a5 * a4;
    }
    v7 = a4 * (a2 - a2) + a1;
    if (v8 < a2)
    {
        v8 = a5 - a1 - a3;
    }
    else
    {
        v8 = (a1 * a1 + a1) * a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 13
6 13
7 15
8 15
9 15
10 15
11 19
12 19
13 19
14 21
15 21
16 21
17 21
18 21
19 21
20 21
21 22
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %r8d,%esi
add %esi,%ecx
imul %r8d,%edx
lea 0x1(%rcx,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a5 * a3;
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += a1 * a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 4
6 10
7 11
<<<sep_out_sample>>>
mov %esi,%eax
imul %edi,%eax
imul %edi,%eax
mov %ecx,%r11d
sub %eax,%r11d
lea (%r8,%rdi,1),%r9d
mov %edx,%eax
imul %edi,%eax
cmp %ecx,%edi
cmovl %eax,%r9d
lea (%rcx,%rdi,1),%r10d
imul %esi,%r10d
imul %esi,%r10d
mov %edx,%eax
cmp %r10d,%edi
jg 3a <func1+0x3a>
lea (%rdx,%rdi,1),%eax
imul %esi,%eax
imul %r8d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r11d,%ecx
add %ecx,%r9d
add %r9d,%r10d
add %r10d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a4 - a2 * a1 * a1;
    if (a1 < a4)
    {
        v7 = (a4 - a4 + a3) * a1;
    }
    else
    {
        v7 = a5 + a1;
    }
    v8 = ((a4 + a1) * a2) * a2;
    if (v8 < a1)
    {
        v9 = (a2 + a3) - a2;
    }
    else
    {
        v9 = (a2 * (a3 + a1)) * a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 4
6 11
7 7
8 7
9 7
10 7
11 13
12 13
13 13
14 16
15 14
16 14
17 20
18 20
19 20
20 22
21 22
22 22
23 22
24 22
25 22
26 22
27 22
28 23
<<<sep_out_sample>>>
add %edx,%edi
add %esi,%edi
add %r8d,%edi
add %edi,%ecx
imul %r8d,%edx
imul %esi,%edx
imul %edx,%esi
lea 0x1(%rcx,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a3 * a5 * a2 * a2;
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        if (a4 < a1)
        {
            v7 += a1 * a3 * a2;
        }
        else
        {
            v7 += a3 * (a1 + a2);
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 4
6 4
7 4
8 17
9 18
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a4 - a2 - a4;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        if (a3 < a1)
        {
            v8 += a3 - a4 + a1;
        }
        else
        {
            v8 += (a2 + a5) + a1;
        }
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a5)
    {
        v10 += a4 - (a2 * a4);
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 26
2 26
3 26
4 26
5 27
<<<sep_out_sample>>>
cmp %ecx,%r8d
jge e <func1+0xe>
mov %edx,%r9d
imul %edx,%r9d
jmp 15 <func1+0x15>
mov %r8d,%r9d
imul %ecx,%r9d
add %edi,%edx
add %edx,%esi
add %r8d,%esi
add %esi,%ecx
add %r9d,%ecx
sub %r8d,%edi
sub %r8d,%edi
imul %edi,%r8d
lea (%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a5 < a4)
    {
        v6 = a4 - a4 + a3 * a3;
    }
    else
    {
        v6 = a5 * a4;
    }
    v7 = (a1 - a5 - a5) * a5;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 13
9 13
10 13
11 13
12 13
13 12
14 12
15 12
16 13
17 14
<<<sep_out_sample>>>
mov %esi,%r11d
imul %edi,%r11d
imul %esi,%r11d
add %edi,%r11d
cmp %r8d,%ecx
jge 1f <func1+0x1f>
mov %r8d,%r9d
imul %esi,%r9d
add %edi,%r9d
jmp 29 <func1+0x29>
mov %ecx,%r9d
sub %esi,%r9d
imul %edi,%r9d
cmp %esi,%r9d
jge 3c <func1+0x3c>
lea (%rdx,%rsi,1),%eax
mov %r8d,%r10d
sub %eax,%r10d
sub %ecx,%r10d
jmp 49 <func1+0x49>
mov %esi,%r10d
sub %r8d,%r10d
imul %edx,%r10d
add %r8d,%r10d
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
add %r8d,%ecx
add %r11d,%ecx
add %ecx,%r9d
lea (%r9,%r10,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a1 + (a2 * a1) * a2;
    if (a4 < a5)
    {
        v7 = a1 + (a5 * a2);
    }
    else
    {
        v7 = a4 * a1 - (a2 * a1);
    }
    if (v7 < a2)
    {
        v8 = (a5 - (a3 + a2)) - a4;
    }
    else
    {
        v8 = a5 - (a5 - a2) * a3;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        v9 += (a4 * a5) * a5;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 5
6 5
7 7
8 7
9 7
10 7
11 11
12 11
13 11
14 13
15 13
16 15
17 15
18 15
19 15
20 15
21 19
22 19
23 19
24 19
25 26
26 26
27 26
28 26
29 26
30 26
31 26
32 27
<<<sep_out_sample>>>
cmp %ecx,%edx
jge d <func1+0xd>
lea (%r8,%rsi,2),%r9d
add %esi,%r9d
jmp 19 <func1+0x19>
mov %r8d,%r9d
sub %edx,%r9d
add %esi,%r9d
add %ecx,%r9d
add %edx,%edi
add %edi,%esi
add %r8d,%esi
add %ecx,%esi
add %r9d,%esi
mov %r8d,%edi
sub %ecx,%edi
add %edi,%esi
imul %r8d,%edx
imul %edx,%ecx
sub %r8d,%ecx
lea (%rsi,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a3 < a4)
    {
        v6 = (a2 + a5 + a2) + a2;
    }
    else
    {
        v6 = a4 - ((a3 - a5) - a2);
    }
    v7 = a5 - a4;
    v8 = (a3 * a5 * a4) - a5;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 10
10 14
11 14
12 14
13 14
14 14
15 12
16 12
17 14
18 13
19 13
20 13
21 14
22 15
<<<sep_out_sample>>>
mov %esi,%eax
sub %r8d,%eax
lea (%rdi,%rdx,2),%edi
lea (%rdi,%rax,1),%eax
add %esi,%eax
lea 0x1(%rax,%r8,2),%eax
imul %ecx,%esi
add %esi,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = ((a5 - a4) - a2) + a2;
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += a1 * (a5 - a2);
    }
    v9 = a3 + (a4 * a2);
    v10 = a3 + (a2 - a5);
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 12
4 12
5 12
6 12
7 10
8 10
9 12
10 13
<<<sep_out_sample>>>
cmp %esi,%ecx
jge c <func1+0xc>
mov %edx,%eax
imul %r8d,%eax
jmp 12 <func1+0x12>
lea (%rdi,%rcx,1),%eax
sub %r8d,%eax
cmp %r8d,%eax
jge 20 <func1+0x20>
mov %edi,%r9d
imul %ecx,%r9d
jmp 29 <func1+0x29>
lea -0x1(%rsi,%rdx,1),%r9d
imul %r8d,%r9d
lea 0x1(%r9,%rdi,1),%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    if (a4 < a2)
    {
        v6 = a3 * a5;
    }
    else
    {
        v6 = (a1 + a4) - a5;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a2 * (a2 * a5);
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        if (v8 < a1)
        {
            v9 += (a4 * a4) * a4;
        }
        else
        {
            v9 += a2 + a5 + a1;
        }
    }
    if (v6 < a5)
    {
        v11 = a1 * a4;
    }
    else
    {
        v11 = ((a2 + a3) * a5) - a5;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 29
9 29
10 31
11 31
12 31
13 35
14 35
15 37
16 37
17 37
18 37
19 37
20 37
21 38
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %edx,%r8d
lea 0x1(%rcx,%r8,1),%eax
sub %esi,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += (a2 - a3) + a5;
    }
    v8 = ((a5 - a5) + a1) - a2;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 9
6 10
7 11
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
sub %edi,%esi
add %esi,%edx
add %r8d,%edx
add %edx,%eax
imul %r8d,%r8d
imul %r8d,%ecx
sub %ecx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a5 + (a3 + (a2 - a1));
    v7 = a1 - (a5 * a5) * a4;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 4
7 4
8 6
9 5
10 5
11 5
12 6
13 7
<<<sep_out_sample>>>
mov %esi,%eax
imul %ecx,%eax
sub %edx,%eax
add %r8d,%eax
add %edi,%eax
add %edx,%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
imul %edx,%edx
mov %ecx,%r9d
sub %edx,%r9d
add %r9d,%edi
add %eax,%edi
imul %r8d,%ecx
sub %ecx,%esi
add %esi,%r8d
lea 0x1(%rdi,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a4 - a3 * a3 + a1;
    v7 = (a2 - a5 * a4) + a5;
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += a3 * a1 - a2;
    }
    v10 = (a2 * a4 - a3) + a5;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 11
5 12
6 12
7 12
8 12
9 12
10 4
11 4
12 4
13 4
14 12
15 5
16 5
17 5
18 12
19 13
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %edx,%r8d
lea (%r8,%rcx,1),%edx
imul %ecx,%edi
sub %edi,%esi
lea 0x1(%rdx,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a2 - a4 * a1;
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        if (a5 < a1)
        {
            v7 += a2 + (a4 - a5);
        }
        else
        {
            v7 += a2 + a2 - a3;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 4
6 4
7 17
8 18
<<<sep_out_sample>>>
cmp %edx,%ecx
jge c <func1+0xc>
mov %r8d,%eax
imul %edx,%eax
jmp 12 <func1+0x12>
mov %edi,%eax
imul %r8d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a4 < a3)
    {
        v6 = a5 * a3;
    }
    else
    {
        v6 = a1 * a5;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        if (a4 < a4)
        {
            v7 += a5 * a2;
        }
        else
        {
            v7 += a2 * a1;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 24
9 24
10 24
11 24
12 24
13 25
<<<sep_out_sample>>>
add %edx,%edi
lea (%rsi,%rdi,1),%eax
add %eax,%r8d
add %r8d,%ecx
lea (%rsi,%rdx,1),%r9d
add %r9d,%ecx
add %edi,%edx
sub %esi,%edx
lea (%rcx,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a2 + a3;
    if (a5 < a5)
    {
        v7 = (a2 + a1) * a1 - a5;
    }
    else
    {
        v7 = a3 + a1 + a3 - a2;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 11
2 13
3 13
4 13
5 4
6 13
7 11
8 11
9 13
10 14
<<<sep_out_sample>>>
mov %r8d,%eax
imul %r8d,%eax
imul %edx,%eax
add %esi,%eax
cmp $0x1,%edi
jle 21 <func1+0x21>
mov %edx,%r9d
imul %edi,%r9d
imul %r8d,%r9d
sub %esi,%r9d
jmp 2c <func1+0x2c>
mov %esi,%r9d
imul %esi,%r9d
imul %r8d,%r9d
lea 0x1(%r9,%rdi,1),%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (a2 < a3)
        {
            v6 += a5 + a1 * a1;
        }
        else
        {
            v6 += (a3 - a4) - a2;
        }
    }
    if (a1 < a1)
    {
        v8 = a5 * a3 + a4;
    }
    else
    {
        v8 = a2 + a5 * a5 * a3;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        if (a1 < a1)
        {
            v9 += (a2 * a2) - a5;
        }
        else
        {
            v9 += a1 + a2 - a2;
        }
    }
    if (v7 < a1)
    {
        v11 = a3 * a1 * a5 - a2;
    }
    else
    {
        v11 = a2 * a2 * a5;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 22
4 22
5 36
6 36
7 38
8 38
9 38
10 38
11 38
12 42
13 42
14 42
15 44
16 44
17 44
18 44
19 44
20 44
21 45
<<<sep_out_sample>>>
lea (%rsi,%rcx,1),%eax
cmp %ecx,%r8d
jge 16 <func1+0x16>
mov %edi,%eax
imul %esi,%eax
mov %r8d,%r11d
sub %eax,%r11d
mov %r11d,%eax
cmp %edx,%r8d
jle 21 <func1+0x21>
lea (%rdx,%rdx,1),%r9d
jmp 34 <func1+0x34>
mov %ecx,%r9d
imul %edi,%r9d
mov %edx,%r10d
sub %r9d,%r10d
mov %r10d,%r9d
add %r8d,%r9d
lea (%rdi,%rdi,2),%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%eax
lea 0x1(%r9,%rax,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a5 < a4)
    {
        v6 = a5 - a1 * a2;
    }
    else
    {
        v6 = a4 + (a2 + a4) - a4;
    }
    if (a3 < a5)
    {
        v7 = a3 + a3;
    }
    else
    {
        v7 = a3 - a4 * a1 + a5;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += a1 + a5 + a3;
    }
    v10 = a1 + a1;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 6
7 6
8 6
9 12
10 12
11 14
12 14
13 18
14 18
15 18
16 18
17 18
18 18
19 26
20 26
21 26
22 26
23 26
24 26
25 26
26 27
<<<sep_out_sample>>>
lea (%r8,%rsi,1),%eax
cmp $0x1,%ecx
jg e <func1+0xe>
lea (%rsi,%rdi,1),%eax
sub %edx,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (a5 < a4)
        {
            v6 += a2 * a2 + a1;
        }
        else
        {
            v6 += a4 * a4 * a2;
        }
    }
    if (v7 < a4)
    {
        v8 = a5 + a2;
    }
    else
    {
        v8 = (a2 + a1) - a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 18
2 16
3 16
4 22
5 22
6 24
7 24
8 24
9 24
10 24
11 25
<<<sep_out_sample>>>
add %edx,%edi
add %esi,%edi
add %r8d,%edi
add %ecx,%edi
imul %r8d,%esi
lea (%rsi,%rdx,2),%eax
lea 0x1(%rdi,%rax,1),%eax
imul %ecx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a3 + (a5 * a2) + a3;
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        if (v7 < a4)
        {
            v7 += a5 + a4;
        }
        else
        {
            v7 += (a5 - a3) * a5;
        }
    }
    v9 = a4 * a5;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 18
5 4
6 4
7 18
8 17
9 18
10 19
<<<sep_out_sample>>>
lea (%r8,%rdx,1),%eax
lea (%r8,%rdi,1),%r9d
test %esi,%esi
cmovg %eax,%r9d
mov %edx,%eax
sub %edi,%eax
cmp %edi,%esi
jge 24 <func1+0x24>
mov $0x1,%eax
sub %r8d,%eax
imul %r8d,%eax
add %ecx,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (v6 < a2)
    {
        v6 = a1 - a1 + a5 + a3;
    }
    else
    {
        v6 = a1 + a5 - a5 + a5;
    }
    if (a2 < a1)
    {
        v7 = a4 - ((a5 * a5) - a5);
    }
    else
    {
        v7 = a2 - ((a2 + a1) - a3);
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 18
6 18
7 12
8 12
9 14
10 14
11 14
12 14
13 20
14 20
15 20
16 20
17 20
18 20
19 21
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
add %ecx,%r8d
mov %edx,%eax
imul %esi,%eax
add %ecx,%eax
sub %edi,%eax
add %r8d,%eax
sub %edx,%ecx
add %ecx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a4 + a3 * a2 - a1;
    if (a1 < a1)
    {
        v7 = (a4 * a5) - a2 * a3;
    }
    else
    {
        v7 = a2 + (a4 - a3);
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 13
2 13
3 13
4 13
5 4
6 4
7 4
8 4
9 13
10 11
11 11
12 13
13 14
<<<sep_out_sample>>>
mov %r8d,%r9d
imul %r8d,%r9d
add %esi,%r9d
imul %edi,%r9d
lea (%rdi,%r8,1),%eax
test %esi,%esi
jle 21 <func1+0x21>
mov %esi,%eax
sub %r8d,%eax
imul %ecx,%eax
add %r8d,%eax
test %edi,%edi
jle 2d <func1+0x2d>
mov %edi,%r10d
sub %esi,%r10d
jmp 34 <func1+0x34>
mov %esi,%r10d
imul %ecx,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %r9d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a3 - a2 - a5;
    }
    v8 = (a2 + (a5 * a5)) * a1;
    if (v6 < a2)
    {
        v9 = a5 - (a5 - a2) * a4;
    }
    else
    {
        v9 = a1 + a5;
    }
    if (v10 < a1)
    {
        v10 = a1 - a2;
    }
    else
    {
        v10 = a2 * a4;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 9
4 9
5 16
6 10
7 10
8 12
9 12
10 12
11 12
12 18
13 18
14 20
15 20
16 20
17 24
18 24
19 26
20 26
21 26
22 26
23 26
24 26
25 26
26 27
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
add %r8d,%ecx
imul %edx,%edi
lea 0x1(%rcx,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a1 * a3;
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        if (a1 < a2)
        {
            v7 += a1 + a5 + a5;
        }
        else
        {
            v7 += a2 + a1 + a2;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 4
6 17
7 18
<<<sep_out_sample>>>
cmp %r8d,%edi
jge 10 <func1+0x10>
lea (%rsi,%rdi,1),%eax
imul %edx,%eax
sub %r8d,%eax
jmp 15 <func1+0x15>
mov %edi,%eax
imul %edi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a1 < a5)
    {
        v6 = a3 * (a2 + a1) - a5;
    }
    else
    {
        v6 = a1 * a1;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += (a5 - a2) + a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 17
10 17
11 17
12 17
13 17
14 18
<<<sep_out_sample>>>
lea (%r8,%r8,1),%eax
lea (%rsi,%rdx,1),%r9d
cmp %edi,%esi
cmovge %r9d,%eax
lea (%rdi,%rdx,1),%r9d
add %r9d,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a2 < a1)
    {
        v6 = a5 + a5;
    }
    else
    {
        v6 = a2 + a3;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        if (a5 < a4)
        {
            v7 += a1 * a2;
        }
        else
        {
            v7 += a1 + a5 - a5;
        }
    }
    v9 = ((a3 - a2) + a1) + a2;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 25
6 25
7 25
8 25
9 25
10 25
11 26
<<<sep_out_sample>>>
mov %ecx,%r10d
sub %edx,%r10d
add %esi,%r10d
imul %ecx,%r10d
cmp %esi,%edx
jle 22 <func1+0x22>
mov %ecx,%r9d
imul %edi,%r9d
imul %esi,%r9d
imul %r8d,%r9d
jmp 2d <func1+0x2d>
mov %r8d,%r9d
imul %edx,%r9d
imul %r9d,%r9d
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
imul %r8d,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = (a2 - (a3 - a4)) * a4;
    if (a2 < a3)
    {
        v7 = a4 * a1 * a2 * a5;
    }
    else
    {
        v7 = a5 * (a5 * a3) * a3;
    }
    v8 = a2 * a5;
    v9 = 0;
    for (v10 = 0; v10++; v10<a1)
    {
        v9 += a2 - (a1 - a1);
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 5
6 5
7 7
8 7
9 7
10 7
11 7
12 11
13 11
14 11
15 19
16 19
17 19
18 19
19 19
20 19
21 13
22 19
23 20
<<<sep_out_sample>>>
mov %r8d,%eax
sub %edi,%eax
test %r8d,%r8d
cmovg %ecx,%eax
add %edx,%edi
add %esi,%edi
add %edi,%r8d
add %ecx,%r8d
add %eax,%r8d
imul %esi,%ecx
sub %ecx,%edx
add %edx,%esi
lea 0x1(%r8,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (v6 < a5)
    {
        v6 = (a4 - a2) + a2;
    }
    else
    {
        v6 = a5 - a1 - a2 + a2;
    }
    v7 = a3 - a2 * a4 + a2;
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        if (v8 < a4)
        {
            v8 += a5 - (a2 * a5);
        }
        else
        {
            v8 += (a3 * a1) * a2;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 25
6 25
7 25
8 25
9 25
10 12
11 12
12 12
13 25
14 26
<<<sep_out_sample>>>
test %edx,%edx
jle 16 <func1+0x16>
lea (%rcx,%rdx,1),%eax
imul %r8d,%eax
mov %ecx,%r9d
sub %eax,%r9d
mov %r9d,%eax
jmp 1b <func1+0x1b>
mov %ecx,%eax
imul %esi,%eax
lea 0x1(%rax,%rdi,1),%eax
add %eax,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a3 + a2;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += a5 * a2 + a1;
    }
    if (v10 < a3)
    {
        v10 = a4 - (a5 * (a4 + a3));
    }
    else
    {
        v10 = a4 * a2;
    }
    v11 = 0;
    for (v12 = 0; v12++; v12<a2)
    {
        v11 += a4 * a3 - a3;
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 14
2 14
3 16
4 16
5 16
6 16
7 16
8 16
9 20
10 20
11 27
12 27
13 27
14 27
15 27
16 28
<<<sep_out_sample>>>
cmp %ecx,%r8d
jge 13 <func1+0x13>
mov %r8d,%eax
imul %r8d,%eax
add %edi,%eax
add %r8d,%eax
jmp 1b <func1+0x1b>
lea (%rsi,%rdx,1),%eax
imul %ecx,%eax
sub %esi,%eax
mov %ecx,%r9d
sub %esi,%r9d
add %edi,%r9d
add %r9d,%edx
add %esi,%edx
add %r8d,%edx
add %edx,%ecx
add %eax,%ecx
sub %r8d,%edi
add %edi,%esi
lea 0x1(%rcx,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a5 < a4)
    {
        v6 = a1 + a5 * a5 + a5;
    }
    else
    {
        v6 = (a2 + a3) * a4 - a2;
    }
    if (a1 < a1)
    {
        v7 = a2 * a1;
    }
    else
    {
        v7 = (a1 - a5) + a2;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        if (v6 < a5)
        {
            v8 += a4 + a2 + a3;
        }
        else
        {
            v8 += (a4 * a1) + a1;
        }
    }
    v10 = a4 - a2;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 32
12 32
13 33
14 33
15 33
16 33
17 33
18 33
19 18
20 18
21 33
22 34
<<<sep_out_sample>>>
test %r8d,%r8d
jle a <func1+0xa>
lea (%rdi,%rdi,1),%eax
jmp 13 <func1+0x13>
lea -0x1(%rdx),%eax
imul %ecx,%eax
add %r8d,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a3 - a1 - a2;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += a3 * a4 * a4;
    }
    if (v8 < a5)
    {
        v10 = a1 + (a1 - a1 + a1);
    }
    else
    {
        v10 = ((a4 * a3) - a4) + a5;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 14
2 14
3 16
4 16
5 20
6 20
7 20
8 22
9 22
10 22
11 22
12 22
13 23
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%eax
imul %r8d,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (v7 < a5)
        {
            v6 += (a1 - a2) - a5;
        }
        else
        {
            v6 += a2 * a5 - a2;
        }
    }
    v8 = a5 * a5;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 16
6 17
7 18
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
add %ecx,%esi
sub %r8d,%edx
add %esi,%edx
add %ecx,%edi
lea 0x1(%rdx,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a3 - (a5 + a3) + a3;
    v7 = a1 + a4;
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += a1 * a2 + a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 11
5 4
6 11
7 5
8 11
9 12
<<<sep_out_sample>>>
test %edi,%edi
jle d <func1+0xd>
mov %edx,%eax
sub %esi,%eax
add %r8d,%eax
jmp 13 <func1+0x13>
mov %esi,%eax
imul %r8d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (v6 < a3)
        {
            v6 += a1 + a4;
        }
        else
        {
            v6 += a2 * a4;
        }
    }
    if (v8 < a1)
    {
        v8 = (a3 - a2) + a5;
    }
    else
    {
        v8 = a2 * a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 18
7 22
8 22
9 24
10 24
11 24
12 24
13 24
14 25
<<<sep_out_sample>>>
mov %edi,%r9d
imul %edi,%r9d
sub %r8d,%r9d
add %ecx,%r9d
cmp %edx,%r9d
jge 1c <func1+0x1c>
mov %esi,%edi
imul %edx,%edi
imul %edi,%edi
jmp 26 <func1+0x26>
imul %edx,%edi
add $0x1,%edi
imul %r8d,%edi
lea (%rsi,%rsi,1),%eax
mov %r8d,%r10d
sub %eax,%r10d
add %r10d,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %eax,%r9d
lea (%r9,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += (a2 * a1) * a5;
    }
    v8 = a1 * a1 - a5 + a4;
    if (v8 < a3)
    {
        v9 = (a2 * a3 * a3) * a2;
    }
    else
    {
        v9 = a5 + (a3 * a1) * a5;
    }
    v10 = a5 - (a2 + a2) - a1;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 9
4 9
5 10
6 10
7 12
8 12
9 12
10 12
11 16
12 16
13 16
14 18
15 18
16 18
17 19
18 19
19 19
20 19
21 19
22 19
23 20
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%esi
mov %ecx,%eax
sub %edi,%eax
add %eax,%esi
imul %ecx,%edi
add %edi,%edx
sub %ecx,%edx
lea (%rsi,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a3 - a1 * a1;
    }
    v8 = a4 - a1;
    v9 = a3 + a1 * a4 - a4;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 11
5 9
6 9
7 11
8 10
9 10
10 10
11 11
12 12
<<<sep_out_sample>>>
mov %ecx,%r9d
imul %edi,%r9d
imul %esi,%r9d
cmp %esi,%ecx
jge 18 <func1+0x18>
mov %r8d,%eax
sub %edi,%eax
add %edx,%eax
jmp 21 <func1+0x21>
mov %r8d,%eax
imul %esi,%eax
lea (%rax,%rdx,2),%eax
mov %ecx,%r10d
imul %ecx,%r10d
imul %ecx,%r10d
imul %r8d,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a4 < a4)
    {
        v6 = a4 + (a3 - a3) + a1;
    }
    else
    {
        v6 = a4 * a1 * a2;
    }
    if (a4 < a2)
    {
        v7 = a3 - (a1 - a5);
    }
    else
    {
        v7 = a3 + a5 * a2 + a3;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        if (v6 < a2)
        {
            v8 += a4 + (a3 * a1);
        }
        else
        {
            v8 += a1 * a4;
        }
    }
    v10 = a4 * a4 * a4 * a5;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 12
5 12
6 14
7 14
8 14
9 14
10 18
11 18
12 18
13 32
14 32
15 32
16 32
17 33
18 33
19 33
20 33
21 33
22 33
23 33
24 34
<<<sep_out_sample>>>
lea (%rcx,%rsi,2),%r9d
add %edx,%r9d
mov $0x0,%eax
cmp %edx,%esi
jl 1e <func1+0x1e>
mov %edi,%eax
imul %edi,%eax
mov %esi,%r10d
sub %eax,%r10d
mov %r10d,%eax
add %edi,%edx
add %esi,%edx
add %r8d,%edx
add %ecx,%edx
add %r9d,%edx
add %eax,%edx
mov %esi,%eax
sub %ecx,%eax
add %eax,%esi
sub %r8d,%esi
lea (%rdx,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a3 + ((a4 + a2) + a2);
    if (a2 < a3)
    {
        v7 = a4 - a4;
    }
    else
    {
        v7 = a2 - a1 * a1;
    }
    v8 = a2 - (a4 - a2) - a5;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 7
4 5
5 5
6 11
7 11
8 11
9 11
10 11
11 14
12 14
13 14
14 14
15 14
16 14
17 13
18 13
19 13
20 13
21 14
22 15
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r8d,%edx
add %edx,%eax
not %r8d
imul %r8d,%ecx
add %ecx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a5 + a3;
    v7 = a1 - (a4 + a4 * a5);
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 6
7 5
8 5
9 5
10 6
11 7
<<<sep_out_sample>>>
mov %edi,%eax
sub %r8d,%eax
mov %edi,%r9d
imul %edi,%r9d
cmp %ecx,%edx
cmovl %r9d,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a2 - a5 * a2;
    }
    if (a3 < a4)
    {
        v8 = a1 * a1;
    }
    else
    {
        v8 = a1 - a5 - a2 + a2;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        v9 += (a1 - a3) - a3;
    }
    v11 = a3 + (a2 - a2 - a3);
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 15
2 15
3 11
4 11
5 11
6 11
7 23
8 23
9 23
10 23
11 23
12 24
<<<sep_out_sample>>>
lea 0x2(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %eax,%ecx
sub %edx,%esi
sub %r8d,%esi
imul %esi,%edx
lea 0x1(%rcx,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = ((a2 - a3) - a5) * a3;
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        if (a5 < a5)
        {
            v7 += a2 - a4 * a2;
        }
        else
        {
            v7 += a4 * a5;
        }
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        if (v10 < a2)
        {
            v9 += (a5 + a3) - a4;
        }
        else
        {
            v9 += a4 - a5 + a3;
        }
    }
    v11 = 0;
    for (v12 = 0; v12++; v12<a4)
    {
        v11 += a3 + a2 - a3;
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 34
2 34
3 34
4 34
5 4
6 4
7 4
8 34
9 35
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %r8d,%edx
add %edx,%ecx
imul %r8d,%esi
sub %esi,%ecx
lea 0x1(%rcx),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a3 - a3 - (a2 * a5);
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        if (a2 < a5)
        {
            v7 += (a5 - a4) + a5;
        }
        else
        {
            v7 += (a2 * a1) - a3;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 4
6 17
7 17
8 18
<<<sep_out_sample>>>
mov %ecx,%r10d
imul %edi,%r10d
imul %r8d,%r10d
imul %r8d,%r10d
mov %ecx,%r9d
imul %r8d,%r9d
mov %r8d,%eax
sub %ecx,%eax
cmp %r9d,%edi
jle 29 <func1+0x29>
lea 0x1(%rdx),%eax
imul %r8d,%eax
sub %edi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r10d,%ecx
add %ecx,%r9d
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a5 * (a4 * a1 * a5);
    v7 = a4 * a5;
    if (v7 < a1)
    {
        v8 = (a5 * a3) + a5 - a1;
    }
    else
    {
        v8 = a5 - a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 5
6 5
7 12
8 12
9 6
10 6
11 8
12 8
13 8
14 14
15 14
16 14
17 14
18 14
19 14
20 14
21 15
<<<sep_out_sample>>>
cmp %r8d,%esi
jge 19 <func1+0x19>
mov %edi,%r9d
sub %r8d,%r9d
sub %esi,%r9d
sub %edx,%r9d
mov %ecx,%eax
imul %r8d,%eax
jmp 28 <func1+0x28>
lea (%rcx,%rdx,1),%r9d
sub %r8d,%r9d
add %edi,%r9d
mov %edx,%eax
sub %r8d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a2 < a5)
    {
        v6 = (a1 - a5 - a2) - a3;
    }
    else
    {
        v6 = (a4 + a3 - a5) + a1;
    }
    if (a2 < a5)
    {
        v7 = a4 * a5;
    }
    else
    {
        v7 = a3 + (a2 - a5) - a2;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        if (a2 < a5)
        {
            v8 += (a1 + a3) - a2;
        }
        else
        {
            v8 += a5 * a1 - a5;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 14
8 14
9 14
10 10
11 10
12 10
13 18
14 18
15 32
16 32
17 32
18 32
19 32
20 32
21 33
<<<sep_out_sample>>>
cmp %r8d,%ecx
jge c <func1+0xc>
mov %ecx,%eax
imul %esi,%eax
jmp 13 <func1+0x13>
lea 0x1(%rsi),%eax
imul %r8d,%eax
lea 0x2(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a1 + a4;
    }
    if (a4 < a5)
    {
        v8 = a4 * a2;
    }
    else
    {
        v8 = (a2 * a5) + a5;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        v9 += a5 * a3;
    }
    v11 = 0;
    for (v12 = 0; v12++; v12<a5)
    {
        v11 += a3 + (a2 * a4);
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 15
7 15
8 27
9 27
10 27
11 27
12 27
13 28
<<<sep_out_sample>>>
cmp %edi,%esi
jge d <func1+0xd>
mov %edx,%r9d
imul %ecx,%r9d
jmp 17 <func1+0x17>
lea (%rdx,%rcx,1),%r9d
sub %esi,%r9d
add %edx,%r9d
cmp %ecx,%edx
jge 27 <func1+0x27>
mov $0x2,%eax
sub %ecx,%eax
imul %edx,%eax
jmp 2f <func1+0x2f>
lea -0x1(%rcx),%eax
imul %esi,%eax
add %ecx,%eax
mov %edi,%r10d
sub %ecx,%r10d
add %edi,%r10d
sub %r8d,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a2 < a1)
    {
        v6 = a3 * a4;
    }
    else
    {
        v6 = (a3 + a4 - a2) + a3;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += a4 - a3;
    }
    if (a3 < a4)
    {
        v9 = a3 - (a4 * a3 - a3);
    }
    else
    {
        v9 = a4 * a2 - a2 + a4;
    }
    v10 = (a1 - a4 + a1) - a5;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 17
10 17
11 19
12 19
13 19
14 19
15 23
16 23
17 23
18 25
19 25
20 25
21 25
22 26
23 26
24 26
25 26
26 26
27 26
28 26
29 27
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a5 - a1;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += a1 - a4;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a1)
    {
        if (v6 < a3)
        {
            v10 += a1 + a4 * a1;
        }
        else
        {
            v10 += a4 * a2 + a4;
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 26
2 26
3 26
4 26
5 27
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a4 - a5;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        if (a5 < a3)
        {
            v8 += a4 * a4;
        }
        else
        {
            v8 += a5 + a1 * a4;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 21
5 22
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a1 * a1 - a5;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        if (a1 < a4)
        {
            v8 += a5 - a1 - a1;
        }
        else
        {
            v8 += (a4 - a2) + a1;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 21
5 22
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
lea (%r8,%rcx,2),%edx
lea (%rdx,%rax,1),%eax
mov %edi,%edx
sub %ecx,%edx
add %edx,%edi
imul %edi,%esi
lea 0x1(%rax,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = a5 + a4;
    v7 = (a1 + (a1 - a4)) * a2;
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += a5 + a3;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a2)
    {
        v10 += a3 - (a2 * a1);
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 16
4 4
5 16
6 5
7 5
8 5
9 5
10 16
11 17
<<<sep_out_sample>>>
mov %edx,%r9d
not %r9d
imul %r8d,%r9d
add %edx,%r9d
test %ecx,%ecx
jle 18 <func1+0x18>
mov %ecx,%eax
imul %edi,%eax
jmp 1d <func1+0x1d>
mov %esi,%eax
imul %ecx,%eax
test %esi,%esi
jle 33 <func1+0x33>
mov %esi,%r10d
sub %edi,%r10d
mov %esi,%r11d
imul %edx,%r11d
sub %r11d,%r10d
jmp 40 <func1+0x40>
mov $0x1,%r10d
sub %edi,%r10d
imul %r8d,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a3 - (a5 + a3 * a5);
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        if (a5 < a1)
        {
            v7 += (a2 * a2) + a3;
        }
        else
        {
            v7 += a3 * a2 * a4;
        }
    }
    if (v7 < a4)
    {
        v9 = a4 * a1;
    }
    else
    {
        v9 = a2 * a4;
    }
    if (v7 < a2)
    {
        v10 = a2 - a1 - a2 * a3;
    }
    else
    {
        v10 = a5 - a1 * a5;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 17
6 17
7 19
8 19
9 19
10 23
11 23
12 25
13 25
14 27
15 27
16 27
17 27
18 27
19 27
20 31
21 31
22 31
23 33
24 33
25 33
26 33
27 33
28 33
29 33
30 34
<<<sep_out_sample>>>
mov %r8d,%r10d
imul %esi,%r10d
add %ecx,%r10d
cmp %edi,%edx
jge 1f <func1+0x1f>
mov %edx,%r9d
imul %r8d,%r9d
imul %edi,%r9d
imul %esi,%r9d
jmp 2c <func1+0x2c>
mov %edx,%r9d
sub %r8d,%r9d
imul %esi,%r9d
sub %ecx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a5 * a2 + a4;
    if (a3 < a1)
    {
        v7 = ((a3 * a5) * a1) * a2;
    }
    else
    {
        v7 = a2 * (a3 - a5) - a4;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 5
5 5
6 7
7 7
8 7
9 7
10 7
11 11
12 11
13 11
14 11
15 13
16 13
17 13
18 13
19 13
20 13
21 14
<<<sep_out_sample>>>
lea (%rsi,%rdx,1),%r10d
cmp %esi,%edi
jl 16 <func1+0x16>
mov %edx,%eax
imul %edx,%eax
mov %ecx,%r10d
sub %eax,%r10d
add %edx,%r10d
mov $0x2,%r9d
sub %ecx,%r9d
imul %ecx,%r9d
test %edi,%edi
jle 2e <func1+0x2e>
mov %edi,%eax
sub %r8d,%eax
jmp 3a <func1+0x3a>
lea (%r8,%rcx,1),%r11d
mov %edi,%eax
imul %esi,%eax
add %r11d,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (a1 < a2)
        {
            v6 += a3 + a2 + a1;
        }
        else
        {
            v6 += (a1 - a2) * a5;
        }
    }
    if (a1 < a2)
    {
        v8 = (a2 - a2) + a2 + a3;
    }
    else
    {
        v8 = (a4 - a3 * a3) + a3;
    }
    v9 = a4 - a4 * a4 + a4;
    if (v6 < a1)
    {
        v10 = a5 + (a1 - a5 - a5);
    }
    else
    {
        v10 = (a5 + a4) + a1 * a2;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 16
3 16
4 22
5 22
6 22
7 22
8 22
9 24
10 24
11 24
12 25
13 25
14 27
15 27
16 27
17 31
18 31
19 31
20 31
21 33
22 33
23 33
24 33
25 33
26 33
27 33
28 34
<<<sep_out_sample>>>
mov %esi,%eax
sub %r8d,%eax
cmp %r8d,%edi
jge 11 <func1+0x11>
lea (%rdx,%rcx,2),%eax
lea (%rax,%r8,1),%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %ecx,%r8d
add %r8d,%eax
add %edx,%edx
imul %edx,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a1 < a5)
    {
        v6 = (a4 + a3 + a5) + a4;
    }
    else
    {
        v6 = a2 - a5;
    }
    v7 = (a3 + a3) * a4;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 10
2 10
3 4
4 4
5 6
6 6
7 13
8 13
9 13
10 13
11 13
12 12
13 12
14 13
15 14
<<<sep_out_sample>>>
mov %ecx,%r9d
sub %edi,%r9d
mov %ecx,%eax
imul %edi,%eax
test %r8d,%r8d
cmovg %eax,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %eax,%r9d
add $0x1,%esi
imul %esi,%edi
add %edi,%edx
lea (%r9,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a2 + a4;
    }
    if (v6 < a5)
    {
        v8 = a4 * a1;
    }
    else
    {
        v8 = a4 - a1;
    }
    v9 = a3 + ((a1 * a2) + a1);
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 15
2 15
3 11
4 11
5 11
6 11
7 18
8 18
9 18
10 18
11 18
12 17
13 17
14 17
15 18
16 19
<<<sep_out_sample>>>
cmp %edi,%r8d
jge c <func1+0xc>
mov %edx,%eax
imul %edx,%eax
jmp 14 <func1+0x14>
lea (%rdx,%rdi,1),%eax
sub %esi,%eax
add %r8d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a5 < a1)
    {
        v6 = a3 * a3 - a3 + a3;
    }
    else
    {
        v6 = a5 + ((a3 + a1) - a2);
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        if (v7 < a2)
        {
            v7 += (a5 * a3) * a3;
        }
        else
        {
            v7 += a1 - a3;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 24
10 24
11 24
12 24
13 24
14 25
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a1 - a5;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += a5 + a1 * a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 14
2 14
3 14
4 14
5 15
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (v6 < a4)
        {
            v6 += (a3 - a1) - a5;
        }
        else
        {
            v6 += (a4 * a3) + a2;
        }
    }
    v8 = a3 - a3;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 18
<<<sep_out_sample>>>
mov $0x1,%r9d
sub %edx,%r9d
imul %ecx,%r9d
cmp $0x1,%ecx
jle 23 <func1+0x23>
mov %edi,%eax
imul %r8d,%eax
mov %ecx,%r10d
sub %eax,%r10d
add %ecx,%r10d
jmp 30 <func1+0x30>
lea (%rcx,%r8,1),%r10d
mov %r8d,%eax
imul %edx,%eax
add %eax,%r10d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %r9d,%eax
add %r10d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (a5 < a1)
        {
            v6 += a3 - (a2 - a1);
        }
        else
        {
            v6 += a1 - a4 + a1;
        }
    }
    v8 = a4 - (a3 * a4);
    if (v7 < a4)
    {
        v9 = (a4 - (a1 * a5)) + a4;
    }
    else
    {
        v9 = a4 + a5 + a5 * a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 16
4 17
5 17
6 19
7 19
8 19
9 19
10 19
11 19
12 23
13 23
14 23
15 23
16 25
17 25
18 25
19 25
20 25
21 25
22 26
<<<sep_out_sample>>>
lea 0x1(%r8),%r9d
imul %edi,%r9d
add %edx,%r9d
mov %edi,%eax
sub %edx,%eax
test %edx,%edx
jle 1a <func1+0x1a>
lea (%rcx,%r8,1),%eax
imul %edx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a3 + (a1 + a1 * a5);
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        if (a1 < a4)
        {
            v7 += a1 - a4 - a2;
        }
        else
        {
            v7 += a2 + a4 - a5;
        }
    }
    if (v7 < a3)
    {
        v9 = a3 * (a4 + a5);
    }
    else
    {
        v9 = a1 + (a5 - (a5 + a3));
    }
    v10 = a4 - a4;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 23
5 23
6 17
7 17
8 19
9 19
10 26
11 26
12 26
13 26
14 26
15 26
16 27
<<<sep_out_sample>>>
mov $0x1,%r9d
sub %edx,%r9d
imul %r8d,%r9d
add %edi,%r9d
lea (%rcx,%rcx,1),%eax
test %r8d,%r8d
jle 21 <func1+0x21>
mov %esi,%eax
sub %r8d,%eax
add %edi,%eax
add %edx,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = (a5 - a3 * a5) + a1;
    if (v7 < a5)
    {
        v7 = a3 + (a1 + (a2 - a5));
    }
    else
    {
        v7 = a4 + a4;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        if (v7 < a2)
        {
            v8 += a3 * (a3 + a5);
        }
        else
        {
            v8 += a2 * a3 + a4;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 11
6 5
7 5
8 7
9 7
10 7
11 7
12 25
13 25
14 25
15 25
16 25
17 25
18 26
<<<sep_out_sample>>>
mov %edi,%eax
imul %r8d,%eax
mov %esi,%r9d
sub %eax,%r9d
add %esi,%r9d
mov %edx,%eax
imul %ecx,%eax
mov %edi,%r11d
sub %eax,%r11d
mov %r11d,%eax
add %edx,%eax
cmp $0x1,%esi
jle 2c <func1+0x2c>
mov %ecx,%r10d
sub %edi,%r10d
jmp 33 <func1+0x33>
mov %esi,%r10d
imul %ecx,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a2 + (a2 - a1 * a5);
    v7 = (a1 - a3 * a4) + a3;
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        if (a4 < a1)
        {
            v8 += a3 + a1 - a5;
        }
        else
        {
            v8 += a3 + (a1 - a4);
        }
    }
    if (v9 < a2)
    {
        v10 = a4 - a1;
    }
    else
    {
        v10 = a4 * (a2 + a1 - a1);
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 4
6 5
7 5
8 5
9 5
10 5
11 5
12 18
13 18
14 20
15 20
16 20
17 24
18 24
19 26
20 26
21 26
22 26
23 26
24 26
25 26
26 27
<<<sep_out_sample>>>
lea (%rdx,%rdi,1),%eax
lea (%rsi,%rax,1),%r9d
add %r9d,%r8d
lea (%r8,%rcx,1),%r9d
sub %edx,%esi
add %esi,%eax
add %r9d,%eax
imul %edi,%edi
lea (%rax,%rcx,2),%eax
sub %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a2 - a3 + (a3 + a1);
    if (a3 < a3)
    {
        v7 = ((a5 + a1) + a5) - a2;
    }
    else
    {
        v7 = a4 + a4 - a1 * a1;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 13
3 13
4 13
5 4
6 4
7 13
8 11
9 11
10 13
11 14
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %r8d,%edx
lea 0x1(%rcx,%rdx,1),%eax
add %r8d,%ecx
add %ecx,%esi
imul %esi,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (a1 < a3)
        {
            v6 += a2 * a1;
        }
        else
        {
            v6 += (a2 + a4) * a5;
        }
    }
    v8 = a5 * ((a4 + a5) + a2);
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 16
6 16
7 16
8 17
9 18
<<<sep_out_sample>>>
mov %ecx,%r10d
imul %ecx,%r10d
lea (%rsi,%r8,1),%r9d
mov %r9d,%eax
sub %ecx,%eax
lea (%rdi,%r8,1),%r11d
mov %eax,%r9d
cmp %ecx,%r8d
mov %r11d,%eax
cmovle %r9d,%eax
add %r10d,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (a1 < a5)
        {
            v6 += a1 + a5 * a5;
        }
        else
        {
            v6 += a3 + a1 - a2;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += a1 * a3 * a2;
    }
    v10 = (a5 - a5) + a4 * a4;
    if (a4 < a5)
    {
        v11 = (a5 + a3 + a1) - a3;
    }
    else
    {
        v11 = a2 + a5 - a4;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 28
4 28
5 28
6 24
7 24
8 24
9 24
10 24
11 30
12 30
13 30
14 30
15 30
16 30
17 31
<<<sep_out_sample>>>
lea (%rdi,%rsi,2),%eax
add %eax,%r8d
lea 0x1(%rdi,%r8,1),%eax
lea (%rcx,%rdi,2),%ecx
imul %ecx,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a1 - a4;
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += a5 + a1 * a4;
    }
    v9 = ((a1 + a4) + a1) * a3;
    v10 = a2 - a3;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 12
2 12
3 12
4 10
5 10
6 12
7 13
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a4 * a2 + a5;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += a3 * a4 + a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 14
2 14
3 14
4 14
5 15
<<<sep_out_sample>>>
mov %edx,%r10d
imul %esi,%r10d
add %r8d,%r10d
imul %r8d,%r10d
lea (%rsi,%rdx,1),%eax
cmp %ecx,%eax
jge 1f <func1+0x1f>
lea (%rdx,%rcx,2),%r9d
lea (%r9,%r8,1),%r9d
jmp 2d <func1+0x2d>
lea (%r8,%r8,1),%r9d
mov %edx,%r11d
imul %edx,%r11d
sub %r11d,%r9d
add %edi,%edx
add %esi,%edx
add %edx,%r8d
add %r8d,%ecx
add %r10d,%ecx
add %ecx,%eax
add %r9d,%eax
lea (%rax,%rsi,2),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = (a3 * a2 + a5) * a5;
    v7 = a2 + a3;
    if (v7 < a4)
    {
        v8 = a3 + (a4 + a5) + a4;
    }
    else
    {
        v8 = (a5 + a5) - a3 * a3;
    }
    v9 = a2 + a2;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 5
6 6
7 6
8 8
9 8
10 8
11 12
12 12
13 12
14 12
15 15
16 15
17 15
18 15
19 15
20 15
21 15
22 15
23 16
<<<sep_out_sample>>>
cmp %esi,%ecx
jge f <func1+0xf>
mov %edx,%eax
sub %ecx,%eax
add %r8d,%eax
sub %esi,%eax
jmp 1a <func1+0x1a>
mov %edx,%eax
imul %edx,%eax
imul %r8d,%eax
sub %esi,%eax
add %edx,%edi
add %esi,%edi
add %edi,%r8d
add %r8d,%ecx
add %eax,%ecx
sub %edx,%esi
imul %edx,%edx
add %edx,%esi
lea 0x1(%rcx,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a4 < a2)
    {
        v6 = (a5 + (a3 - a4)) - a2;
    }
    else
    {
        v6 = a5 * (a3 * a3) - a2;
    }
    v7 = a2 - a3 + a3 * a3;
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        if (v6 < a3)
        {
            v8 += a3 * a2 - a1;
        }
        else
        {
            v8 += a5 - a1 + a4;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 25
13 25
14 25
15 25
16 25
17 12
18 12
19 12
20 25
21 26
<<<sep_out_sample>>>
cmp %r8d,%ecx
jge e <func1+0xe>
mov %r8d,%eax
sub %edi,%eax
sub %edx,%eax
jmp 15 <func1+0x15>
mov %esi,%eax
imul %esi,%eax
add %edx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a4 < a5)
    {
        v6 = (a5 - a1) - a3;
    }
    else
    {
        v6 = a3 + a2 * a2;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += a5 + a1 + a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 17
11 17
12 17
13 17
14 17
15 18
<<<sep_out_sample>>>
mov %ecx,%eax
sub %edx,%eax
test %esi,%esi
jle 14 <func1+0x14>
mov %ecx,%eax
imul %esi,%eax
imul %r8d,%eax
imul %edx,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (a1 < a3)
        {
            v6 += (a3 + a5) * a5;
        }
        else
        {
            v6 += a3 * (a1 * a4);
        }
    }
    if (v8 < a2)
    {
        v8 = (a4 * a2 * a5) * a3;
    }
    else
    {
        v8 = (a4 + a3 - a3) - a3;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        if (a4 < a1)
        {
            v9 += a3 * a4 + a1;
        }
        else
        {
            v9 += a2 - a5 * a2;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 16
4 16
5 18
6 18
7 18
8 18
9 36
10 36
11 36
12 36
13 36
14 37
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
add %ecx,%esi
imul %edx,%edi
mov $0x1,%eax
sub %edi,%eax
imul %r8d,%eax
add %esi,%eax
lea (%r8,%rcx,1),%edx
imul %edx,%ecx
add %ecx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a5 - a5 * (a3 * a1);
    v7 = a5 + (a5 + a4) * a4;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 4
7 4
8 4
9 6
10 5
11 5
12 5
13 6
14 7
<<<sep_out_sample>>>
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea (%rdx,%rdi,2),%eax
lea 0x1(%rcx,%rax,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a1 + ((a1 + a3) + a1);
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        if (a1 < a1)
        {
            v7 += a5 - a4;
        }
        else
        {
            v7 += (a3 - a1) - a1;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 17
3 17
4 17
5 4
6 17
7 18
<<<sep_out_sample>>>
mov %edx,%eax
imul %edi,%eax
lea (%rax,%r8,2),%eax
add %eax,%edi
add %edx,%edi
add %esi,%edi
add %r8d,%edi
add %ecx,%edi
mov %edx,%eax
sub %r8d,%eax
imul %ecx,%eax
imul %ecx,%eax
add %eax,%edi
lea (%rdx,%rsi,2),%eax
lea (%rax,%rcx,1),%eax
lea 0x1(%rdi,%rax,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = ((a3 - a5) * a4) * a4;
    v7 = a3 + a2 + a4 + a2;
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += a3 - (a4 * a4);
    }
    v10 = a5 + a3 * a1 + a5;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 12
5 12
6 12
7 12
8 12
9 4
10 4
11 4
12 4
13 12
14 5
15 5
16 12
17 13
<<<sep_out_sample>>>
lea (%rdx,%rdx,1),%eax
mov %edx,%r9d
sub %edi,%r9d
cmp %ecx,%edx
cmovl %eax,%r9d
cmp $0x1,%edi
jle 1c <func1+0x1c>
lea (%rsi,%rdi,1),%eax
imul %ecx,%eax
jmp 2b <func1+0x2b>
mov %esi,%eax
sub %r8d,%eax
mov %edi,%r10d
imul %esi,%r10d
sub %r10d,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    if (a3 < a4)
    {
        v6 = a3 + a3;
    }
    else
    {
        v6 = a3 + (a3 - a3 - a1);
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        if (v7 < a5)
        {
            v7 += a4 - a4 - a4;
        }
        else
        {
            v7 += (a4 + a1) * a1;
        }
    }
    if (v8 < a1)
    {
        v9 = a4 * a2 + a4 * a1;
    }
    else
    {
        v9 = a2 - a5 - a1 * a2;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a3)
    {
        if (v10 < a5)
        {
            v10 += a3 * (a4 + a4);
        }
        else
        {
            v10 += a3 * a3;
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 6
6 24
7 24
8 26
9 26
10 26
11 30
12 30
13 30
14 30
15 30
16 44
17 44
18 44
19 44
20 44
21 44
22 45
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (a5 < a5)
        {
            v6 += a2 - a2;
        }
        else
        {
            v6 += a2 * (a4 * a1);
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += (a1 + a4) + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 21
5 22
<<<sep_out_sample>>>
cmp %r8d,%esi
jge 16 <func1+0x16>
mov %esi,%r9d
imul %edi,%r9d
imul %ecx,%r9d
imul %ecx,%r9d
jmp 25 <func1+0x25>
mov %r8d,%eax
imul %esi,%eax
imul %ecx,%eax
mov %esi,%r9d
sub %eax,%r9d
mov %r8d,%eax
sub %edi,%eax
add %esi,%eax
mov %r8d,%r10d
imul %edx,%r10d
cmp %edi,%esi
cmovg %r10d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a2 < a5)
    {
        v6 = ((a2 * a1) * a4) * a4;
    }
    else
    {
        v6 = a2 - ((a5 * a2) * a4);
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        if (v7 < a3)
        {
            v7 += (a2 - a1) + a3;
        }
        else
        {
            v7 += a1 + (a3 + a1);
        }
    }
    if (a1 < a2)
    {
        v9 = a5 * a3;
    }
    else
    {
        v9 = a5 - a1 + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 10
13 30
14 30
15 30
16 26
17 26
18 26
19 26
20 32
21 32
22 32
23 32
24 32
25 32
26 33
<<<sep_out_sample>>>
mov %edi,%eax
sub %esi,%eax
lea (%rcx,%rdi,2),%edi
lea (%rdi,%rax,1),%eax
add %edx,%eax
add %esi,%eax
add %r8d,%eax
lea 0x1(%rcx,%rax,1),%ecx
lea (%rdx,%rsi,2),%eax
lea (%rax,%r8,1),%eax
add %ecx,%eax
imul %esi,%r8d
imul %r8d,%edx
sub %edx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (a3 < a2)
        {
            v6 += a1 + a3 * a4;
        }
        else
        {
            v6 += a5 * (a2 - a1);
        }
    }
    v8 = a5 + (a3 + a2) + a2;
    v9 = a2 - a2 * a5 * a3;
    v10 = (a1 - a2) + a1 + a4;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 19
5 19
6 19
7 19
8 19
9 16
10 16
11 19
12 17
13 17
14 17
15 19
16 20
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (a3 < a4)
        {
            v6 += (a2 + a2) - a2;
        }
        else
        {
            v6 += (a4 * a2) - a1;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += (a2 * a3) * a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 21
5 22
<<<sep_out_sample>>>
mov %ecx,%r10d
sub %r8d,%r10d
cmp %edi,%r8d
jge 14 <func1+0x14>
mov %edi,%eax
neg %eax
sub %r8d,%eax
jmp 21 <func1+0x21>
mov %ecx,%eax
imul %r8d,%eax
imul %esi,%eax
imul %r8d,%eax
lea (%rdi,%r8,1),%r9d
cmp $0x1,%edi
jle 38 <func1+0x38>
mov %r8d,%r9d
imul %ecx,%r9d
imul %edx,%r9d
sub %r8d,%r9d
add %r9d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r10,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = (a1 - a1 - a5) + a4;
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += a3 + a1 + a5;
    }
    if (a5 < a1)
    {
        v9 = ((a3 - a1) - a3) - a5;
    }
    else
    {
        v9 = ((a4 * a5) * a2) * a5;
    }
    if (v8 < a1)
    {
        v10 = (a5 * a4 * a3) - a5;
    }
    else
    {
        v10 = a1 + a5;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 10
4 10
5 12
6 12
7 12
8 12
9 16
10 16
11 16
12 16
13 24
14 18
15 18
16 20
17 20
18 20
19 20
20 26
21 26
22 26
23 26
24 26
25 26
26 26
27 27
<<<sep_out_sample>>>
test %edx,%edx
jle 14 <func1+0x14>
mov %ecx,%r9d
imul %esi,%r9d
add %edi,%r9d
imul %edx,%r9d
jmp 21 <func1+0x21>
mov %esi,%r9d
imul %edi,%r9d
sub %r8d,%r9d
add %edx,%r9d
lea (%r8,%rdx,1),%eax
sub %esi,%eax
cmp %edi,%esi
jl 37 <func1+0x37>
mov %r8d,%eax
imul %esi,%eax
sub $0x1,%eax
imul %edi,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    if (v6 < a3)
    {
        v6 = (a1 + a4 * a2) * a3;
    }
    else
    {
        v6 = a3 - (a5 - (a2 * a1));
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        if (v8 < a2)
        {
            v7 += a4 + a3 - a4;
        }
        else
        {
            v7 += a5 - a3;
        }
    }
    if (a2 < a1)
    {
        v9 = (a5 + a3) - a2;
    }
    else
    {
        v9 = ((a5 * a2) * a1) - a1;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a4)
    {
        v10 += a1 * a2;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 26
13 26
14 24
15 24
16 30
17 30
18 30
19 30
20 37
21 37
22 37
23 37
24 37
25 37
26 38
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a4 * (a1 + a5);
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += a5 - a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 14
2 14
3 14
4 14
5 15
<<<sep_out_sample>>>
mov %esi,%eax
sub %r8d,%eax
lea 0x1(%rdi,%rax,1),%eax
add %eax,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (a2 < a4)
        {
            v6 += (a2 * a2) - a5;
        }
        else
        {
            v6 += a4 + a3 + a3;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += a5 * (a1 - a3);
    }
    v10 = a2 - a5;
    v11 = 0;
    for (v12 = 0; v12++; v12<a5)
    {
        v11 += a5 - a5 - a5;
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 27
4 27
5 27
6 27
7 27
8 28
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea (%r8,%rcx,1),%esi
lea 0x1(%rsi,%rcx,2),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a4 + a4;
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a3 + a1 * a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 10
6 11
<<<sep_out_sample>>>
mov %r8d,%r11d
imul %esi,%r11d
mov %r8d,%r10d
imul %edx,%r10d
add %ecx,%r10d
cmp %edi,%ecx
jge 1f <func1+0x1f>
lea (%rdx,%rdi,2),%r9d
imul %ecx,%r9d
jmp 26 <func1+0x26>
lea (%rcx,%rsi,1),%eax
lea (%rax,%rdi,2),%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a5 * a2;
    v7 = (a5 * a3) + a4;
    if (a4 < a1)
    {
        v8 = (a1 + a1 + a3) * a4;
    }
    else
    {
        v8 = ((a4 + a2) + a1) + a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 5
4 5
5 5
6 6
7 6
8 8
9 8
10 8
11 12
12 12
13 14
14 14
15 14
16 14
17 14
18 14
19 14
20 15
<<<sep_out_sample>>>
mov %esi,%eax
imul %r8d,%eax
imul %edi,%eax
add %ecx,%eax
cmp %eax,%r8d
jle 19 <func1+0x19>
mov %edi,%r9d
imul %edi,%r9d
jmp 26 <func1+0x26>
mov %esi,%r9d
imul %edx,%r9d
add %ecx,%r9d
sub %edx,%r9d
add %edi,%edx
add %esi,%edx
add %edx,%r8d
add %ecx,%r8d
add %r8d,%eax
add %r9d,%eax
add %ecx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a4 + a2 * a5 * a1;
    if (v6 < a5)
    {
        v7 = (a1 * a1) - a3 + a3;
    }
    else
    {
        v7 = a4 + a2 * a3 - a3;
    }
    v8 = a4 + a2;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 5
6 5
7 7
8 7
9 7
10 11
11 11
12 11
13 11
14 14
15 14
16 14
17 14
18 14
19 14
20 13
21 14
22 15
<<<sep_out_sample>>>
test %r8d,%r8d
jle 16 <func1+0x16>
mov %ecx,%r9d
sub %esi,%r9d
mov %ecx,%eax
imul %r8d,%eax
add %eax,%r9d
jmp 1d <func1+0x1d>
mov %r8d,%r9d
imul %edx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
imul %esi,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (v6 < a5)
    {
        v6 = a4 - a2 + a4 * a5;
    }
    else
    {
        v6 = a5 * a3;
    }
    v7 = a2 * a2;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 6
9 10
10 10
11 13
12 13
13 13
14 13
15 13
16 12
17 13
18 14
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
add %ecx,%esi
mov $0x1,%eax
sub %r8d,%eax
imul %eax,%ecx
lea 0x1(%rsi,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a4 < a4)
    {
        v6 = a3 + ((a1 * a4) * a2);
    }
    else
    {
        v6 = a4 - a4 * a5;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += a5 - a4 * a3;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        v9 += a2 + a5 + a2;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 22
4 22
5 10
6 10
7 10
8 22
9 23
<<<sep_out_sample>>>
cmp %edx,%edi
jge 11 <func1+0x11>
lea (%r8,%rdx,1),%r9d
imul %r8d,%r9d
sub %ecx,%r9d
jmp 18 <func1+0x18>
lea (%r8,%rcx,2),%r9d
add %esi,%r9d
mov %r8d,%eax
sub %esi,%eax
cmp %esi,%r8d
jle 28 <func1+0x28>
lea (%rdx,%rsi,1),%eax
imul %ecx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a1 < a3)
    {
        v6 = (a5 + a3) * a5 - a4;
    }
    else
    {
        v6 = a4 + a5 + a4 + a2;
    }
    if (a2 < a5)
    {
        v7 = a4 * a3 + a2 * a4;
    }
    else
    {
        v7 = a5 - a2;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += (a2 * a1) + a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 18
10 18
11 12
12 12
13 14
14 14
15 25
16 25
17 25
18 25
19 25
20 25
21 26
<<<sep_out_sample>>>
mov %esi,%r9d
imul %r8d,%r9d
lea (%rdx,%r8,1),%eax
cmp %edi,%ecx
jle 1a <func1+0x1a>
mov %esi,%eax
imul %edx,%eax
imul %r8d,%eax
add %esi,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = ((a2 * a5) + a4) - a4;
    if (a1 < a4)
    {
        v7 = a2 * a3 * a5 + a2;
    }
    else
    {
        v7 = a3 + a5;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 11
4 5
5 5
6 7
7 7
8 7
9 7
10 13
11 13
12 13
13 13
14 13
15 13
16 14
<<<sep_out_sample>>>
lea (%rdx,%r8,1),%eax
cmp %edi,%esi
jge f <func1+0xf>
mov %edx,%eax
sub %r8d,%eax
sub %ecx,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a2 < a1)
    {
        v6 = a3 - a5 - a4;
    }
    else
    {
        v6 = a3 + a5;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        if (a1 < a2)
        {
            v7 += a2 + a5;
        }
        else
        {
            v7 += a4 + a5 + a4;
        }
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        v9 += a1 - a4;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 6
7 29
8 29
9 29
10 29
11 29
12 30
<<<sep_out_sample>>>
mov $0x0,%r9d
cmp %edi,%ecx
jge 14 <func1+0x14>
mov %esi,%r9d
imul %edx,%r9d
add %edi,%r9d
cmp %edx,%edi
jle 29 <func1+0x29>
mov %edx,%eax
imul %r8d,%eax
mov %ecx,%r10d
sub %eax,%r10d
mov %r10d,%eax
jmp 2e <func1+0x2e>
mov %edx,%eax
imul %edi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a4 < a1)
    {
        v6 = a2 * a3 + a1;
    }
    else
    {
        v6 = a4 - a4;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += (a1 * a5) * a1;
    }
    if (a3 < a1)
    {
        v9 = a4 - (a3 * a5);
    }
    else
    {
        v9 = a3 * a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 6
7 17
8 17
9 19
10 19
11 19
12 19
13 19
14 19
15 23
16 23
17 25
18 25
19 25
20 25
21 25
22 25
23 26
<<<sep_out_sample>>>
mov %r8d,%eax
sub %edi,%eax
lea (%rsi,%rsi,1),%r9d
cmp %edi,%ecx
cmovl %eax,%r9d
mov %r8d,%eax
sub %edi,%eax
cmp %esi,%edi
jle 29 <func1+0x29>
mov %ecx,%eax
imul %r8d,%eax
mov %edi,%r10d
sub %eax,%r10d
mov %r10d,%eax
add %esi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a4 < a1)
    {
        v6 = a5 - a1;
    }
    else
    {
        v6 = a2 + a2;
    }
    if (a2 < a1)
    {
        v7 = a2 - (a4 * a5 - a1);
    }
    else
    {
        v7 = a5 - a1;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += a4 - a3 * a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 6
6 18
7 18
8 12
9 12
10 14
11 14
12 14
13 14
14 14
15 14
16 25
17 25
18 25
19 25
20 25
21 25
22 26
<<<sep_out_sample>>>
test %edx,%edx
jle d <func1+0xd>
mov %r8d,%eax
imul %r8d,%eax
jmp 17 <func1+0x17>
mov %esi,%eax
imul %edi,%eax
sub %r8d,%eax
add %ecx,%eax
lea 0x1(%rax,%rdi,1),%eax
add %eax,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += (a2 - a1) * a4;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += a2 - a3;
    }
    if (v6 < a3)
    {
        v10 = a5 * a5;
    }
    else
    {
        v10 = a4 + (a2 * a1 - a5);
    }
    v11 = 0;
    for (v12 = 0; v12++; v12<a5)
    {
        if (a5 < a1)
        {
            v11 += a4 + (a5 * a1);
        }
        else
        {
            v11 += a4 + a1 + a4;
        }
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 14
2 14
3 16
4 16
5 16
6 20
7 20
8 20
9 20
10 34
11 34
12 34
13 34
14 34
15 35
<<<sep_out_sample>>>
test %r8d,%r8d
jle 15 <func1+0x15>
mov %edx,%r10d
imul %edi,%r10d
imul %edx,%r10d
add %ecx,%r10d
jmp 26 <func1+0x26>
mov %edi,%r10d
imul %r8d,%r10d
mov %r8d,%eax
imul %edx,%eax
imul %eax,%r10d
cmp $0x1,%edx
jle 35 <func1+0x35>
lea (%rdx,%r8,1),%r9d
imul %edi,%r9d
jmp 3d <func1+0x3d>
lea (%rdi,%rdx,2),%r9d
imul %edx,%r9d
test %ecx,%ecx
jle 4f <func1+0x4f>
mov %ecx,%eax
imul %r8d,%eax
imul %esi,%eax
imul %esi,%eax
jmp 54 <func1+0x54>
mov %esi,%eax
imul %edx,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (a5 < a1)
        {
            v6 += a5 + a3 - a4;
        }
        else
        {
            v6 += (a4 * a4) - a5;
        }
    }
    if (v8 < a5)
    {
        v8 = (a3 * a1 * a3) + a4;
    }
    else
    {
        v8 = (a1 * a5) * (a5 * a3);
    }
    if (v7 < a3)
    {
        v9 = a1 * a3 + a5 * a1;
    }
    else
    {
        v9 = a3 * (a3 + (a1 + a3));
    }
    if (v6 < a4)
    {
        v10 = a2 * (a4 * a5) * a2;
    }
    else
    {
        v10 = a2 * a3;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 18
7 18
8 22
9 22
10 22
11 22
12 22
13 24
14 24
15 26
16 26
17 26
18 30
19 30
20 32
21 32
22 34
23 34
24 34
25 34
26 34
27 38
28 38
29 40
30 40
31 40
32 40
33 40
34 40
35 40
36 41
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %r8d,%esi
lea (%r8,%rcx,2),%eax
lea 0x1(%rax,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a2 * a4 + a2;
    }
    v8 = a5 + a4;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 9
5 10
6 11
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %eax,%ecx
sub %esi,%edx
add %edx,%r8d
lea 0x1(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a5 - (a2 - a3);
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        if (v8 < a2)
        {
            v7 += (a1 + a1) * a1;
        }
        else
        {
            v7 += a4 + a1 + a2;
        }
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        if (a5 < a2)
        {
            v9 += (a4 + a3) * a5;
        }
        else
        {
            v9 += a5 + (a4 * a3);
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 29
2 29
3 29
4 29
5 4
6 4
7 29
8 30
<<<sep_out_sample>>>
cmp %edx,%r8d
jge 13 <func1+0x13>
lea (%rdi,%rcx,1),%r11d
mov %edi,%eax
imul %edi,%eax
add %eax,%r11d
jmp 1e <func1+0x1e>
lea (%rdi,%rdx,1),%r11d
imul %edi,%r11d
add %r8d,%r11d
mov %edi,%r9d
sub %ecx,%r9d
imul %esi,%r9d
sub %r8d,%r9d
cmp %r9d,%r8d
jle 39 <func1+0x39>
mov %edx,%r10d
imul %edx,%r10d
jmp 46 <func1+0x46>
mov %edi,%r10d
imul %edx,%r10d
lea (%rdi,%rsi,1),%eax
add %eax,%r10d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r11d,%ecx
add %ecx,%r9d
lea (%r9,%r10,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a5 < a3)
    {
        v6 = a1 + a4 + a1 * a1;
    }
    else
    {
        v6 = a5 + (a1 * (a1 + a3));
    }
    if (a1 < a1)
    {
        v7 = a5 - a4;
    }
    else
    {
        v7 = (a1 - a4) * a2 - a5;
    }
    if (v7 < a5)
    {
        v8 = a3 * a3;
    }
    else
    {
        v8 = a1 * a3 + (a1 + a2);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 18
12 18
13 18
14 18
15 20
16 20
17 22
18 22
19 22
20 26
21 26
22 26
23 26
24 28
25 28
26 28
27 28
28 28
29 28
30 28
31 29
<<<sep_out_sample>>>
push %rbx
mov %edx,%r9d
sub %r8d,%r9d
cmp %ecx,%r8d
jle 18 <func1+0x18>
mov %ecx,%ebx
imul %edx,%ebx
add %r8d,%ebx
add %edi,%ebx
jmp 22 <func1+0x22>
mov %esi,%ebx
sub %ecx,%ebx
imul %esi,%ebx
add %r8d,%ebx
lea (%r9,%rsi,2),%r11d
cmp %esi,%edi
jge 3c <func1+0x3c>
mov %r8d,%eax
imul %r8d,%eax
mov %esi,%r10d
sub %eax,%r10d
sub %edi,%r10d
jmp 4a <func1+0x4a>
mov %edi,%r10d
imul %edi,%r10d
imul %edx,%r10d
add %esi,%r10d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
add %ebx,%eax
add %r11d,%eax
add %r10d,%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a3 - a5;
    if (a4 < a5)
    {
        v7 = (a4 * a3 + a5) + a1;
    }
    else
    {
        v7 = a5 - (a4 - a2) * a2;
    }
    v8 = a2 + (a3 - a5 + a2);
    if (a1 < a2)
    {
        v9 = (a2 - a5 * a5) - a1;
    }
    else
    {
        v9 = a2 + (a1 * a1 * a3);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 4
3 4
4 5
5 5
6 7
7 7
8 7
9 7
10 7
11 11
12 11
13 11
14 11
15 13
16 14
17 14
18 16
19 16
20 16
21 16
22 16
23 16
24 20
25 20
26 20
27 20
28 22
29 22
30 22
31 22
32 22
33 22
34 22
35 22
36 23
37 23
<<<sep_out_sample>>>
push %rbx
cmp %edx,%edi
jge 10 <func1+0x10>
lea 0x1(%rsi),%ebx
imul %r8d,%ebx
add %edx,%ebx
jmp 19 <func1+0x19>
mov %esi,%eax
imul %esi,%eax
mov %edx,%ebx
sub %eax,%ebx
lea (%rsi,%rdi,1),%r11d
cmp %ecx,%edx
jl 28 <func1+0x28>
mov %esi,%r11d
imul %ecx,%r11d
mov %ecx,%r10d
imul %edx,%r10d
add %esi,%r10d
add %edx,%r10d
cmp %esi,%edx
jle 4b <func1+0x4b>
mov %ecx,%eax
imul %r8d,%eax
imul %r8d,%eax
mov %edx,%r9d
sub %eax,%r9d
jmp 52 <func1+0x52>
mov %edi,%r9d
imul %edx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %ebx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a1 < a3)
    {
        v6 = ((a5 * a2) + a5) + a3;
    }
    else
    {
        v6 = a3 - a2 * a2;
    }
    if (a3 < a4)
    {
        v7 = a1 - a1 + a2 + a1;
    }
    else
    {
        v7 = (a4 + (a4 * a2)) - a4;
    }
    v8 = a4 * a3 + a2 + a3;
    if (a2 < a3)
    {
        v9 = a3 - a5 * (a4 * a5);
    }
    else
    {
        v9 = a1 * a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 4
3 4
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 14
13 12
14 12
15 18
16 18
17 20
18 20
19 20
20 20
21 21
22 21
23 23
24 23
25 23
26 23
27 23
28 23
29 27
30 27
31 29
32 29
33 29
34 29
35 29
36 29
37 29
38 29
39 30
40 30
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (v6 < a5)
        {
            v6 += a3 - a2 + a1;
        }
        else
        {
            v6 += a2 * a4;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += a2 - (a3 + a5);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 21
5 22
<<<sep_out_sample>>>
lea (%rdx,%r8,2),%r11d
test %ecx,%ecx
jg 11 <func1+0x11>
lea 0x1(%rdx,%r8,1),%r11d
imul %r8d,%r11d
cmp %esi,%ecx
jge 23 <func1+0x23>
mov %edi,%r10d
sub %r8d,%r10d
add %ecx,%r10d
mov %edi,%r9d
jmp 3c <func1+0x3c>
mov %ecx,%r10d
imul %esi,%r10d
imul %esi,%r10d
add %edi,%r10d
lea (%r8,%rdx,1),%r9d
sub %ecx,%r9d
imul %edx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
add %esi,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (v6 < a4)
    {
        v6 = a5 + a5 + a3;
    }
    else
    {
        v6 = a5 + ((a3 + a5) * a5);
    }
    if (a4 < a2)
    {
        v7 = a4 + (a1 - a5);
    }
    else
    {
        v7 = a1 + a4 * a2 * a2;
    }
    if (a4 < a2)
    {
        v8 = (a1 - a3) + a3;
    }
    else
    {
        v8 = a3 * ((a5 + a3) - a4);
    }
    v9 = a4 + a2;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 4
3 4
4 10
5 10
6 12
7 12
8 14
9 14
10 14
11 22
12 22
13 18
14 18
15 18
16 18
17 26
18 26
19 26
20 29
21 29
22 29
23 29
24 29
25 29
26 29
27 28
28 29
29 30
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
mov %ecx,%eax
imul %r8d,%eax
imul %edi,%eax
lea (%rsi,%rcx,2),%ecx
lea (%rcx,%rax,1),%eax
imul %edx,%edi
add %edi,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = (a4 * a5 * a1) + a4;
    v7 = a3 * a1 + a5;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 4
5 4
6 4
7 4
8 6
9 5
10 5
11 6
12 7
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r8d,%edi
add %edx,%esi
lea (%rdi,%rsi,1),%edx
lea 0x1(%rax,%rdx,1),%eax
add $0x1,%ecx
imul %ecx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a1 < a1)
    {
        v6 = a1 - (a3 * (a2 + a2));
    }
    else
    {
        v6 = a5 + a1 + (a2 + a3);
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += a4 - a5 + a3;
    }
    v9 = a4 * a5 + a5;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 18
5 10
6 10
7 10
8 18
9 17
10 17
11 18
12 19
<<<sep_out_sample>>>
test %esi,%esi
jle 15 <func1+0x15>
mov %r8d,%r10d
sub %edi,%r10d
mov %ecx,%eax
imul %r8d,%eax
add %eax,%r10d
jmp 23 <func1+0x23>
mov %r8d,%r10d
imul %edx,%r10d
imul %edx,%r10d
add %r8d,%r10d
cmp %edx,%r8d
jge 36 <func1+0x36>
mov %esi,%r9d
sub %ecx,%r9d
sub %r8d,%r9d
sub %r8d,%r9d
jmp 44 <func1+0x44>
mov %edx,%r9d
imul %r8d,%r9d
imul %edx,%r9d
add %r8d,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
imul %esi,%r8d
imul %r8d,%edi
add %edi,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (v6 < a2)
    {
        v6 = (a5 - a1) + (a4 * a5);
    }
    else
    {
        v6 = a3 * (a5 * a3) + a5;
    }
    if (a5 < a3)
    {
        v7 = ((a2 - a4) - a5) - a5;
    }
    else
    {
        v7 = ((a3 * a5) * a3) + a5;
    }
    v8 = ((a5 * a2) * a1) + a2;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 6
9 10
10 10
11 10
12 10
13 12
14 12
15 14
16 14
17 14
18 14
19 14
20 18
21 18
22 18
23 18
24 21
25 21
26 21
27 21
28 21
29 21
30 20
31 20
32 20
33 21
34 22
<<<sep_out_sample>>>
test %edx,%edx
jle 12 <func1+0x12>
mov %r8d,%r9d
sub %ecx,%r9d
sub %ecx,%r9d
sub %edx,%r9d
jmp 19 <func1+0x19>
lea (%rdi,%r8,2),%r9d
sub %esi,%r9d
cmp $0x1,%r8d
jle 2a <func1+0x2a>
mov %edi,%eax
sub %esi,%eax
sub %ecx,%eax
imul %esi,%eax
jmp 31 <func1+0x31>
lea 0x1(%rdi),%eax
imul %r8d,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    if (v6 < a3)
    {
        v6 = (a5 - a4 - a4) - a3;
    }
    else
    {
        v6 = a5 + a5 - a2 + a1;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += a4 * a2 + a5;
    }
    if (v8 < a5)
    {
        v9 = (a1 - a2 - a4) * a2;
    }
    else
    {
        v9 = (a5 * a1) + a5;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a5)
    {
        if (a1 < a2)
        {
            v10 += a4 + a4 - a4;
        }
        else
        {
            v10 += a5 - a4;
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 17
11 17
12 19
13 19
14 19
15 19
16 19
17 23
18 23
19 37
20 37
21 37
22 37
23 37
24 37
25 38
<<<sep_out_sample>>>
lea (%rcx,%rdi,1),%eax
imul %r8d,%eax
add %edi,%eax
add %edx,%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
mov %edi,%r9d
sub %esi,%r9d
imul %r9d,%edx
add %eax,%edx
add %r8d,%ecx
imul %ecx,%esi
sub %esi,%edi
lea 0x1(%rdx,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a3 * (a1 - a2);
    v7 = a1 - (a5 + a4) * a2;
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        if (a5 < a4)
        {
            v8 += a5 + a3 - a5;
        }
        else
        {
            v8 += (a5 + a1) * a5;
        }
    }
    v10 = a4 * a5 + a1 * a5;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 19
4 19
5 19
6 19
7 19
8 4
9 4
10 4
11 19
12 5
13 5
14 5
15 19
16 20
<<<sep_out_sample>>>
mov %esi,%r10d
sub %r8d,%r10d
mov %edi,%eax
sub %edx,%eax
test %edx,%edx
jle 17 <func1+0x17>
mov %edx,%r9d
imul %edx,%r9d
jmp 22 <func1+0x22>
lea (%rdi,%r8,1),%r9d
add %ecx,%r9d
imul %esi,%r9d
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r10d,%ecx
add %ecx,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a2 < a2)
    {
        v6 = a2 - a4 - a2 - a1;
    }
    else
    {
        v6 = a2 - a5;
    }
    v7 = ((a1 - a3) + a2) - a2;
    if (v8 < a3)
    {
        v8 = a3 * a3;
    }
    else
    {
        v8 = a2 * ((a1 + a5) + a4);
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        v9 += a3 * a4;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 12
4 12
5 13
6 13
7 15
8 15
9 15
10 19
11 19
12 19
13 26
14 26
15 26
16 26
17 26
18 26
19 26
20 27
<<<sep_out_sample>>>
lea (%rdi,%r8,1),%r9d
lea (%rdi,%rcx,1),%eax
cmp %ecx,%edi
jl 19 <func1+0x19>
mov %ecx,%eax
sub %esi,%eax
mov %ecx,%r10d
imul %ecx,%r10d
sub %r10d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a1 + a5;
    if (a1 < a4)
    {
        v7 = (a1 + a4 - a5) + a5;
    }
    else
    {
        v7 = (a4 - a2) - (a4 * a4);
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += (a2 + a5) * a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 7
3 5
4 5
5 11
6 11
7 11
8 11
9 11
10 18
11 18
12 18
13 18
14 18
15 18
16 19
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a3 * a2;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += a2 * a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 14
2 14
3 14
4 14
5 15
<<<sep_out_sample>>>
lea (%rdi,%rdx,2),%eax
lea (%rsi,%r8,2),%edx
lea (%rdx,%rax,1),%eax
lea 0x2(%rcx,%rax,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a4 - a1 + a1;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += a2 * a3 - a4;
    }
    v10 = a5 + a3;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 15
2 15
3 15
4 15
5 16
<<<sep_out_sample>>>
mov %esi,%r10d
imul %r8d,%r10d
add %ecx,%r10d
cmp %ecx,%esi
jle 1f <func1+0x1f>
mov %r8d,%r9d
imul %r8d,%r9d
sub $0x1,%r9d
imul %r8d,%r9d
jmp 2e <func1+0x2e>
mov %esi,%r9d
imul %edx,%r9d
imul %ecx,%r9d
imul %r8d,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a4 + a2 * a5;
    if (a4 < a2)
    {
        v7 = (a5 * a5 * a5) - a5;
    }
    else
    {
        v7 = (a2 * a3 * a4) * a5;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 5
5 5
6 7
7 7
8 7
9 7
10 7
11 11
12 11
13 11
14 11
15 13
16 13
17 13
18 13
19 13
20 13
21 14
<<<sep_out_sample>>>
mov %edx,%r9d
imul %esi,%r9d
add %r8d,%r9d
sub %ecx,%r9d
mov %ecx,%eax
sub %edx,%eax
mov %r8d,%r10d
sub %ecx,%r10d
cmp $0x2,%esi
cmovl %r10d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a4 < a4)
    {
        v6 = a5 * a1 + a5 - a2;
    }
    else
    {
        v6 = a5 + a3 * a2 - a4;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        if (v7 < a5)
        {
            v7 += a4 * a5;
        }
        else
        {
            v7 += (a3 - a3) * a1;
        }
    }
    if (v8 < a2)
    {
        v9 = a4 - a3;
    }
    else
    {
        v9 = (a5 - (a4 + a4)) + a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 26
6 26
7 26
8 26
9 26
10 26
11 32
12 32
13 32
14 32
15 32
16 32
17 33
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %r8d,%edx
lea 0x1(%rcx,%rdx,1),%eax
sub %edi,%esi
sub $0x1,%esi
imul %esi,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a3 - a2 - a1;
    }
    v8 = (a5 * (a2 - a1)) - a5;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 9
6 9
7 9
8 10
9 11
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %r8d,%edx
imul %r8d,%edi
add %edi,%esi
lea 0x1(%rdx,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a1 * a5 + a2 - a4;
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += (a5 * a4) + a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 4
5 4
6 10
7 11
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (a5 < a4)
        {
            v6 += a1 - a4;
        }
        else
        {
            v6 += (a3 + a1) - a5;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += a2 * a1 * a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 21
5 22
<<<sep_out_sample>>>
cmp %edi,%ecx
jge 12 <func1+0x12>
mov %edx,%r9d
sub %ecx,%r9d
add %esi,%r9d
add %r8d,%r9d
jmp 21 <func1+0x21>
mov %edi,%eax
imul %edi,%eax
mov %edx,%r9d
sub %eax,%r9d
imul %r8d,%r9d
add %edi,%edx
add %esi,%edx
add %r8d,%edx
add %ecx,%edx
add %r9d,%edx
lea (%rsi,%r8,2),%eax
sub %ecx,%eax
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a4 < a1)
    {
        v6 = (a2 - (a4 - a3)) + a5;
    }
    else
    {
        v6 = a5 * (a3 - a1 * a1);
    }
    v7 = a2 + a5 + (a5 - a4);
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 10
13 13
14 13
15 13
16 13
17 13
18 12
19 12
20 13
21 14
<<<sep_out_sample>>>
lea (%rsi,%rcx,1),%r9d
lea (%rdx,%rsi,1),%eax
cmp $0x1,%r8d
jle 16 <func1+0x16>
lea -0x1(%rdx),%eax
imul %r8d,%eax
add %esi,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a2 + a4;
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += (a4 - a5) + a1;
    }
    if (v8 < a5)
    {
        v9 = a2 + (a3 * a5 - a5);
    }
    else
    {
        v9 = a3 + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 16
3 10
4 10
5 12
6 12
7 12
8 18
9 18
10 18
11 18
12 18
13 18
14 19
<<<sep_out_sample>>>
mov %edi,%r9d
sub %r8d,%r9d
lea (%rsi,%r8,2),%eax
cmp %esi,%edx
jge 20 <func1+0x20>
mov %esi,%eax
imul %r8d,%eax
mov %ecx,%r10d
sub %eax,%r10d
mov %r10d,%eax
add %r8d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a1 < a1)
    {
        v6 = ((a1 * a5) * a2) + a1;
    }
    else
    {
        v6 = (a5 - a5) - a5 + a1;
    }
    if (a3 < a2)
    {
        v7 = a5 + (a4 - a2 * a5);
    }
    else
    {
        v7 = a5 + (a2 + a5);
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 10
2 10
3 18
4 12
5 12
6 14
7 14
8 14
9 14
10 14
11 14
12 20
13 20
14 20
15 20
16 20
17 20
18 21
<<<sep_out_sample>>>
lea (%rdx,%rdx,1),%eax
imul %r8d,%eax
add %edi,%eax
add %edx,%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
imul %edx,%r8d
sub %esi,%r8d
imul %edx,%r8d
add %eax,%r8d
add %ecx,%edx
imul %ecx,%edx
imul %edx,%ecx
lea 0x1(%r8,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a3 < a3)
    {
        v6 = a2 - a3;
    }
    else
    {
        v6 = (a3 * a5 - a2) * a3;
    }
    v7 = ((a4 + a3) * a4) * a4;
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        if (v8 < a4)
        {
            v8 += a5 * a4;
        }
        else
        {
            v8 += (a2 - a5) - a3;
        }
    }
    v10 = (a3 * a5) + (a3 * a5);
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 25
2 25
3 26
4 26
5 26
6 26
7 26
8 10
9 10
10 10
11 26
12 12
13 12
14 12
15 26
16 27
<<<sep_out_sample>>>
cmp %ecx,%edi
jge f <func1+0xf>
lea (%rcx,%r8,1),%eax
imul %edx,%eax
add %edi,%eax
jmp 15 <func1+0x15>
mov %edx,%eax
imul %r8d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %ecx,%r8d
lea 0x1(%rax,%r8,1),%eax
imul %ecx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a1 < a4)
    {
        v6 = a1 + ((a4 + a5) * a3);
    }
    else
    {
        v6 = a3 * a5;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        if (a4 < a5)
        {
            v7 += a4 * a5;
        }
        else
        {
            v7 += a1 - (a5 * a4);
        }
    }
    v9 = a4 * a1;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 25
10 25
11 25
12 25
13 25
14 24
15 25
16 26
<<<sep_out_sample>>>
cmp %edi,%ecx
jge 13 <func1+0x13>
mov %edx,%r10d
imul %r8d,%r10d
add %ecx,%r10d
sub %esi,%r10d
jmp 21 <func1+0x21>
mov %esi,%r10d
imul %r8d,%r10d
imul %esi,%r10d
add %edi,%r10d
cmp %esi,%edx
jle 33 <func1+0x33>
mov %r8d,%r9d
sub %edi,%r9d
sub %edx,%r9d
sub %esi,%r9d
jmp 3e <func1+0x3e>
lea (%rdx,%rcx,1),%r9d
add %edi,%r9d
imul %r8d,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
add %edx,%esi
sub %edi,%esi
imul %esi,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a4 < a1)
    {
        v6 = a3 * a5 + a4 - a2;
    }
    else
    {
        v6 = a1 + (a2 * a5 * a2);
    }
    if (a2 < a3)
    {
        v7 = (a5 - a1) - a3 - a2;
    }
    else
    {
        v7 = a5 * ((a3 + a4) + a1);
    }
    v8 = a4 * (a3 + a2 - a1);
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 12
13 12
14 14
15 14
16 14
17 14
18 14
19 18
20 18
21 18
22 21
23 21
24 21
25 21
26 21
27 21
28 20
29 20
30 20
31 21
32 22
<<<sep_out_sample>>>
mov %ecx,%r11d
sub %edi,%r11d
cmp %esi,%edx
jge 13 <func1+0x13>
lea (%rsi,%r8,1),%r10d
sub %ecx,%r10d
jmp 22 <func1+0x22>
mov %r8d,%eax
imul %edi,%eax
mov %ecx,%r10d
sub %eax,%r10d
sub %r8d,%r10d
cmp %r8d,%ecx
jle 34 <func1+0x34>
lea (%rcx,%rcx,1),%r9d
imul %esi,%r9d
sub %edx,%r9d
jmp 3b <func1+0x3b>
lea (%rdi,%rdx,2),%r9d
add %edi,%r9d
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a4 - a1;
    if (a3 < a2)
    {
        v7 = (a2 + a5) - a4;
    }
    else
    {
        v7 = a4 - a5 * a1 - a5;
    }
    if (a5 < a4)
    {
        v8 = a2 * (a4 + a4) - a3;
    }
    else
    {
        v8 = a1 + (a3 + a1 + a3);
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        if (a2 < a2)
        {
            v9 += (a3 - a2) + a3;
        }
        else
        {
            v9 += a1 * a5 + a2;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 5
4 5
5 7
6 7
7 7
8 11
9 11
10 11
11 11
12 11
13 13
14 13
15 15
16 15
17 15
18 15
19 19
20 19
21 33
22 33
23 33
24 33
25 33
26 33
27 33
28 34
<<<sep_out_sample>>>
push %rbx
lea 0x1(%rdi),%eax
imul %ecx,%eax
mov %eax,%r11d
sub %edx,%r11d
mov %edx,%r10d
imul %edx,%r10d
add $0x1,%r10d
imul %edx,%r10d
cmp %r8d,%edi
jge 36 <func1+0x36>
mov %r8d,%r9d
neg %r9d
imul %edi,%r9d
sub %ecx,%eax
mov %esi,%ebx
imul %edx,%ebx
sub %ebx,%eax
jmp 47 <func1+0x47>
mov %edx,%r9d
sub %ecx,%r9d
lea (%r9,%r8,2),%r9d
sub %ecx,%eax
imul %edx,%eax
sub %esi,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r11d,%ecx
add %r10d,%ecx
add %r9d,%ecx
add %ecx,%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a1 * a4 + a4 - a3;
    v7 = a3 + (a3 * a3) * a3;
    if (a1 < a5)
    {
        v8 = a1 - ((a1 * a5) + a1);
    }
    else
    {
        v8 = a3 - a4 + a5 + a5;
    }
    if (a1 < a5)
    {
        v9 = a4 * a1 - a2 * a3;
    }
    else
    {
        v9 = a4 * a1 * a3 - a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 4
3 4
4 4
5 4
6 5
7 5
8 5
9 5
10 6
11 6
12 8
13 8
14 8
15 16
16 16
17 16
18 16
19 16
20 12
21 12
22 12
23 20
24 20
25 20
26 22
27 22
28 22
29 22
30 22
31 22
32 22
33 22
34 23
35 23
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
lea 0x1(%rcx,%rax,1),%eax
sub %esi,%edi
add %edi,%eax
add %r8d,%edx
add %edx,%esi
add %esi,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a3 - a3 + a4;
    }
    if (a2 < a2)
    {
        v8 = a5 - (a1 - a2);
    }
    else
    {
        v8 = a1 - a2;
    }
    if (a3 < a3)
    {
        v9 = a5 - a4 - a5 - a4;
    }
    else
    {
        v9 = a2 + (a3 + a5) + a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 25
2 25
3 25
4 25
5 15
6 25
7 23
8 23
9 23
10 25
11 26
<<<sep_out_sample>>>
add %edx,%edi
add %esi,%edi
lea (%rdi,%r8,2),%ecx
imul %esi,%esi
add %esi,%r8d
sub %edx,%r8d
lea (%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a5 - a4;
    v7 = (a2 * a2 + a5) - a3;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 5
5 5
6 5
7 6
8 7
<<<sep_out_sample>>>
lea (%rdi,%rdx,2),%eax
lea (%rax,%rcx,1),%eax
add %eax,%esi
add %r8d,%esi
add %ecx,%esi
imul %edi,%r8d
imul %r8d,%ecx
imul %edi,%ecx
lea 0x1(%rsi,%rcx,1),%eax
sub %edx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = ((a5 * a1) * a4) * a1;
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        if (v6 < a4)
        {
            v7 += (a2 * a5) - a2;
        }
        else
        {
            v7 += a5 + a3;
        }
    }
    if (a4 < a4)
    {
        v9 = a5 - a4;
    }
    else
    {
        v9 = a1 - (a3 + a5 - a5);
    }
    if (a4 < a4)
    {
        v10 = ((a4 + a1) + a5) - a1;
    }
    else
    {
        v10 = a3 + a4;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 33
2 33
3 33
4 33
5 33
6 4
7 4
8 4
9 33
10 23
11 33
12 34
<<<sep_out_sample>>>
test %r8d,%r8d
jle e <func1+0xe>
mov %edi,%r9d
imul %esi,%r9d
jmp 15 <func1+0x15>
mov %r8d,%r9d
imul %edx,%r9d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (a2 < a4)
        {
            v6 += a5 + a4;
        }
        else
        {
            v6 += a2 * a3;
        }
    }
    if (v8 < a5)
    {
        v8 = a1 * a2;
    }
    else
    {
        v8 = a5 * a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 22
7 22
8 24
9 24
10 24
11 24
12 24
13 25
<<<sep_out_sample>>>
cmp %edi,%r8d
jge e <func1+0xe>
lea (%rcx,%rsi,1),%eax
add %edi,%eax
sub %edx,%eax
jmp 18 <func1+0x18>
mov %r8d,%eax
imul %edi,%eax
add %edx,%eax
sub %edi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a5 < a1)
    {
        v6 = ((a4 + a2) + a1) - a3;
    }
    else
    {
        v6 = a3 + a5 * a1 - a1;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a5 - (a3 + a4);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 10
11 17
12 17
13 17
14 17
15 17
16 18
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a2 - a5;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += a2 * (a5 + a2);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 14
2 14
3 14
4 14
5 15
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
add %esi,%ecx
mov $0x1,%eax
sub %edi,%eax
imul %eax,%edx
sub %r8d,%edx
lea 0x1(%rcx,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = (a3 - a3 * a1) - a5;
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += a5 * a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 4
6 4
7 4
8 4
9 10
10 11
<<<sep_out_sample>>>
lea (%r8,%rsi,1),%eax
cmp %edx,%edi
jl d <func1+0xd>
mov %ecx,%eax
imul %edx,%eax
lea 0x1(%rax,%rdi,1),%eax
add %eax,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a2 * a1 + a5;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += a3 + a1 - a3;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a4)
    {
        v10 += a4 * a4;
    }
    if (a1 < a3)
    {
        v12 = a5 + a2;
    }
    else
    {
        v12 = a4 * a3;
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 19
3 19
4 25
5 25
6 27
7 27
8 27
9 27
10 27
11 28
<<<sep_out_sample>>>
lea (%rcx,%r8,1),%eax
cmp %esi,%r8d
jl 10 <func1+0x10>
mov %esi,%eax
imul %esi,%eax
sub %ecx,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %esi,%edx
add %r8d,%edx
add %edx,%ecx
add %eax,%ecx
add $0x1,%esi
imul %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    if (a5 < a2)
    {
        v6 = a4 + a5;
    }
    else
    {
        v6 = a2 * a2 - a4;
    }
    v7 = a2 * a5 + a5;
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += a5 * a1 * a4;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a2)
    {
        v10 += a3 - (a2 - a2);
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 4
3 4
4 10
5 10
6 10
7 23
8 23
9 23
10 23
11 23
12 12
13 12
14 23
15 24
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %eax,%ecx
imul %r8d,%edx
add %edx,%esi
add %edi,%esi
add %esi,%ecx
imul %r8d,%edi
lea 0x1(%rcx,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = (a2 + a3 * a5) + a1;
    v7 = a1 * a5;
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += a5 - a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 11
5 4
6 4
7 4
8 11
9 5
10 11
11 12
<<<sep_out_sample>>>
cmp %esi,%r8d
jge 10 <func1+0x10>
mov %edi,%r9d
neg %r9d
sub %esi,%r9d
jmp 1d <func1+0x1d>
mov %esi,%r9d
not %r9d
imul %r8d,%r9d
add %edi,%r9d
cmp %edx,%r8d
jge 2a <func1+0x2a>
mov %edx,%eax
imul %r8d,%eax
jmp 34 <func1+0x34>
lea 0x1(%rdi),%eax
imul %r8d,%eax
imul %ecx,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a5 < a2)
    {
        v6 = (a4 - a4) - a1 - a2;
    }
    else
    {
        v6 = a1 - (a5 + (a5 * a2));
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += a1 - a4;
    }
    if (a5 < a3)
    {
        v9 = a3 * a5;
    }
    else
    {
        v9 = (a5 + a5 * a1) * a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 10
11 17
12 17
13 19
14 19
15 19
16 23
17 23
18 23
19 25
20 25
21 25
22 25
23 25
24 25
25 26
<<<sep_out_sample>>>
mov $0x0,%r9d
cmp %r8d,%esi
jge 18 <func1+0x18>
mov %esi,%r9d
sub %ecx,%r9d
add %r8d,%r9d
imul %r8d,%r9d
cmp %esi,%r9d
jge 2c <func1+0x2c>
lea (%rdi,%rcx,1),%r10d
mov %edi,%eax
imul %r8d,%eax
add %eax,%r10d
jmp 3a <func1+0x3a>
mov %esi,%r10d
sub %edi,%r10d
imul %r8d,%r10d
imul %edx,%r10d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
lea (%r9,%r10,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a2 < a5)
    {
        v6 = a5 * ((a2 - a4) + a5);
    }
    else
    {
        v6 = a4 * (a3 - a3);
    }
    if (v6 < a2)
    {
        v7 = (a1 + a4) + a1 * a5;
    }
    else
    {
        v7 = ((a2 - a1) * a5) * a3;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 6
7 6
8 12
9 12
10 14
11 14
12 14
13 14
14 14
15 18
16 18
17 18
18 18
19 20
20 20
21 20
22 20
23 20
24 20
25 21
<<<sep_out_sample>>>
test %esi,%esi
jle c <func1+0xc>
mov %ecx,%eax
neg %eax
sub %esi,%eax
jmp 14 <func1+0x14>
mov %esi,%eax
sub %r8d,%eax
lea (%rax,%rcx,2),%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
sub %ecx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a1 - a3 * a4;
    }
    if (v6 < a2)
    {
        v8 = ((a1 - a1) - a4) - a2;
    }
    else
    {
        v8 = a2 - a5 + (a4 + a4);
    }
    v9 = a1 - a4;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 15
8 15
9 15
10 18
11 18
12 18
13 18
14 18
15 17
16 18
17 19
<<<sep_out_sample>>>
lea (%rdx,%rsi,1),%r9d
cmp %r8d,%ecx
jl 11 <func1+0x11>
lea (%rcx,%r8,2),%r9d
imul %edx,%r9d
mov %r8d,%eax
sub %ecx,%eax
cmp %edi,%ecx
jle 22 <func1+0x22>
lea (%r8,%rdi,1),%eax
sub %ecx,%eax
add %edi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a4 < a5)
    {
        v6 = a3 + a2;
    }
    else
    {
        v6 = ((a5 + a4) + a5) * a3;
    }
    if (a1 < a4)
    {
        v7 = ((a5 + a1) - a4) + a1;
    }
    else
    {
        v7 = a5 - a4;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 4
3 4
4 10
5 10
6 18
7 18
8 12
9 12
10 14
11 14
12 14
13 20
14 20
15 20
16 20
17 20
18 20
19 21
<<<sep_out_sample>>>
push %rbx
mov $0x0,%r10d
cmp %r8d,%edx
jge 18 <func1+0x18>
lea (%rcx,%rdi,1),%eax
mov %edx,%r10d
sub %eax,%r10d
add %edx,%r10d
lea (%rcx,%rsi,1),%ebx
mov %ecx,%r9d
imul %r8d,%r9d
imul %r8d,%r9d
sub %esi,%r9d
cmp %r9d,%esi
jle 3e <func1+0x3e>
mov %edi,%r11d
sub %r8d,%r11d
add $0x1,%r11d
imul %r8d,%r11d
jmp 4f <func1+0x4f>
mov %edx,%r11d
imul %ecx,%r11d
mov %r8d,%eax
imul %r8d,%eax
add %eax,%r11d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r10d
add %ebx,%r10d
add %r10d,%r9d
lea (%r9,%r11,1),%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a3 < a5)
    {
        v6 = a3 + (a3 - (a4 + a1));
    }
    else
    {
        v6 = (a4 - a5) * (a1 - a1);
    }
    v7 = a4 + a2;
    v8 = (a5 * (a4 * a5)) - a2;
    if (v8 < a2)
    {
        v9 = a5 - (a5 - a1) * a5;
    }
    else
    {
        v9 = (a3 * a4) + a5 * a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 10
3 4
4 4
5 6
6 6
7 6
8 6
9 12
10 13
11 13
12 13
13 13
14 14
15 14
16 16
17 16
18 16
19 16
20 16
21 20
22 20
23 20
24 20
25 20
26 22
27 22
28 22
29 22
30 22
31 22
32 22
33 22
34 23
35 23
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += (a3 * a5) * a5;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += a5 - a2 - a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 14
2 14
3 14
4 14
5 15
<<<sep_out_sample>>>
test %edi,%edi
jle f <func1+0xf>
lea (%rdi,%rdi,1),%eax
imul %edi,%eax
sub %r8d,%eax
jmp 16 <func1+0x16>
mov %edx,%eax
imul %esi,%eax
add %ecx,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (v6 < a1)
    {
        v6 = (a1 + a1) * a1 - a5;
    }
    else
    {
        v6 = a4 + a3 * a2;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += a4 + a5 + a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 17
11 17
12 17
13 17
14 17
15 18
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %edx,%r8d
lea (%r8,%rcx,1),%edx
imul %esi,%ecx
imul %edi,%ecx
add %esi,%ecx
add %ecx,%edx
imul %edi,%esi
imul %esi,%esi
lea 0x1(%rdx,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a2 + a2 * a4 * a1;
    if (a2 < a2)
    {
        v7 = a4 + (a3 - a3) + a5;
    }
    else
    {
        v7 = (a1 * (a2 * a1)) * a2;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += (a3 * a2) + a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 18
5 4
6 4
7 4
8 18
9 11
10 11
11 18
12 19
<<<sep_out_sample>>>
test %edx,%edx
jle 11 <func1+0x11>
mov %r8d,%eax
sub %ecx,%eax
sub %edx,%eax
imul %r8d,%eax
jmp 16 <func1+0x16>
mov %edx,%eax
imul %ecx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (v6 < a3)
    {
        v6 = ((a5 - a4) - a3) * a5;
    }
    else
    {
        v6 = a3 * a4;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += a3 - a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 17
11 17
12 17
13 17
14 17
15 18
<<<sep_out_sample>>>
push %rbx
cmp %ecx,%edx
jge 14 <func1+0x14>
mov %edi,%ebx
sub %esi,%ebx
mov %esi,%r11d
neg %r11d
sub %edx,%r11d
jmp 26 <func1+0x26>
mov %r8d,%ebx
sub %edx,%ebx
mov %esi,%r11d
imul %r8d,%r11d
add %ecx,%r11d
add %edi,%r11d
cmp %edi,%ecx
jge 33 <func1+0x33>
mov %r8d,%r10d
imul %ecx,%r10d
jmp 3e <func1+0x3e>
lea -0x1(%rdx),%r10d
imul %r8d,%r10d
sub %esi,%r10d
cmp %edi,%ecx
jle 50 <func1+0x50>
mov %edi,%r9d
sub %edx,%r9d
add %r8d,%r9d
sub %esi,%r9d
jmp 5d <func1+0x5d>
mov %ecx,%r9d
imul %esi,%r9d
add %edx,%r9d
add %esi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %ebx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a3 < a4)
    {
        v6 = a1 - a2;
    }
    else
    {
        v6 = a5 - a3;
    }
    if (a3 < a4)
    {
        v7 = a5 - a2 - a5 - a3;
    }
    else
    {
        v7 = (a4 + a2 * a5) + a1;
    }
    if (a4 < a1)
    {
        v8 = a5 * a4;
    }
    else
    {
        v8 = (a5 * a3 - a5) - a2;
    }
    if (a1 < a4)
    {
        v9 = (a5 - (a3 - a1)) - a2;
    }
    else
    {
        v9 = a4 * a2 + a3 + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 4
3 4
4 6
5 6
6 14
7 14
8 14
9 14
10 10
11 10
12 18
13 18
14 18
15 18
16 20
17 20
18 22
19 22
20 22
21 26
22 26
23 26
24 28
25 28
26 30
27 30
28 30
29 30
30 30
31 34
32 34
33 34
34 34
35 36
36 36
37 36
38 36
39 36
40 36
41 36
42 36
43 37
44 37
<<<sep_out_sample>>>
cmp %edx,%ecx
jge 13 <func1+0x13>
mov %r8d,%r11d
imul %edi,%r11d
add %esi,%r11d
sub %ecx,%r11d
jmp 1f <func1+0x1f>
lea (%rsi,%rcx,1),%r11d
imul %r8d,%r11d
imul %edi,%r11d
mov %edx,%r10d
imul %r8d,%r10d
cmp %r8d,%edx
jge 3c <func1+0x3c>
mov %esi,%r9d
imul %edx,%r9d
imul %edi,%r9d
imul %edx,%r9d
jmp 49 <func1+0x49>
mov %esi,%r9d
sub %edx,%r9d
imul %edx,%r9d
add %r8d,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a4 < a3)
    {
        v6 = a2 + a5 * a1 - a4;
    }
    else
    {
        v6 = ((a2 + a4) * a5) * a1;
    }
    v7 = a3 * a5;
    if (a3 < a5)
    {
        v8 = ((a2 * a3) * a1) * a3;
    }
    else
    {
        v8 = ((a2 - a3) * a3) + a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 12
12 12
13 13
14 13
15 15
16 15
17 15
18 15
19 15
20 19
21 19
22 19
23 19
24 21
25 21
26 21
27 21
28 21
29 21
30 21
31 22
<<<sep_out_sample>>>
test %ecx,%ecx
jle 15 <func1+0x15>
lea (%rsi,%rsi,1),%eax
imul %esi,%eax
mov %edx,%r9d
sub %eax,%r9d
mov %r9d,%eax
jmp 1d <func1+0x1d>
lea 0x1(%rsi),%eax
imul %ecx,%eax
add %edx,%eax
add %edi,%edx
add %edx,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a5 + a5;
    }
    if (v8 < a4)
    {
        v8 = a3 - ((a2 + a2) * a2);
    }
    else
    {
        v8 = a4 + a2 * a4 + a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 11
8 11
9 15
10 15
11 15
12 17
13 17
14 17
15 17
16 17
17 18
<<<sep_out_sample>>>
mov %esi,%r11d
imul %ecx,%r11d
mov %edi,%r9d
sub %r8d,%r9d
cmp %edi,%ecx
jge 1c <func1+0x1c>
lea 0x1(%rdx),%r9d
imul %edi,%r9d
sub %esi,%r9d
cmp %edx,%edi
jge 2b <func1+0x2b>
mov %edi,%r10d
neg %r10d
sub %edx,%r10d
jmp 38 <func1+0x38>
mov %ecx,%r10d
imul %r8d,%r10d
sub %esi,%r10d
add %edi,%r10d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r11d,%ecx
add %ecx,%r9d
lea (%r9,%r10,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a2 * a4;
    if (a4 < a1)
    {
        v7 = a1 + a1 * a3 - a2;
    }
    else
    {
        v7 = a1 - a5;
    }
    if (a1 < a3)
    {
        v8 = a4 - a4 - a1 - a3;
    }
    else
    {
        v8 = (a4 * a5) - a2 + a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 11
4 11
5 5
6 5
7 7
8 7
9 7
10 13
11 13
12 15
13 15
14 15
15 15
16 19
17 19
18 19
19 19
20 21
21 21
22 21
23 21
24 21
25 21
26 21
27 22
<<<sep_out_sample>>>
mov %edi,%r10d
neg %r10d
sub %edi,%r10d
test %ecx,%ecx
jle 1d <func1+0x1d>
mov %esi,%eax
sub %ecx,%eax
mov %r8d,%r9d
imul %r8d,%r9d
sub %r9d,%eax
jmp 25 <func1+0x25>
mov %esi,%eax
imul %edx,%eax
add %r8d,%eax
mov %ecx,%r9d
sub %edi,%r9d
cmp $0x1,%ecx
jle 3d <func1+0x3d>
mov %esi,%r9d
sub %ecx,%r9d
imul %ecx,%r9d
sub %edx,%r9d
add %r9d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r10,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a2 - a1 - a2 - a1;
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += a4 * a2;
    }
    if (v7 < a4)
    {
        v9 = a2 - a4 - a5 * a5;
    }
    else
    {
        v9 = a2 * a3 + a5;
    }
    if (v8 < a4)
    {
        v10 = ((a2 - a4) * a4) - a3;
    }
    else
    {
        v10 = a4 - a1 - a3 + a3;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 10
5 10
6 12
7 12
8 12
9 12
10 12
11 12
12 16
13 16
14 16
15 24
16 24
17 18
18 18
19 20
20 20
21 20
22 20
23 26
24 26
25 26
26 26
27 26
28 26
29 26
30 27
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
lea (%rdx,%rdx,1),%r9d
imul %edi,%edx
imul %r9d,%edx
add %eax,%edx
lea (%r8,%rsi,2),%eax
sub %ecx,%eax
add %edx,%eax
imul %r8d,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = (a3 + a3) * (a1 * a3);
    v7 = (a2 + a5) + a2 - a4;
    v8 = a5 * a5;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 7
2 7
3 7
4 7
5 4
6 4
7 4
8 7
9 5
10 5
11 7
12 6
13 7
14 8
<<<sep_out_sample>>>
mov %edx,%r9d
neg %r9d
imul %edi,%r9d
cmp %edi,%esi
jle 18 <func1+0x18>
lea (%rcx,%rdi,1),%eax
imul %edi,%eax
add %ecx,%eax
jmp 1e <func1+0x1e>
lea 0x2(%rcx),%eax
imul %esi,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %r8d,%esi
add %esi,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = ((a2 - a3) - a2) * a1;
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        if (v6 < a1)
        {
            v7 += a1 + a2 * a2;
        }
        else
        {
            v7 += a2 + (a4 + a3);
        }
    }
    if (a1 < a2)
    {
        v9 = a1 * (a4 + a1) + a4;
    }
    else
    {
        v9 = ((a2 * a4) + a2) + a2;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a2)
    {
        if (a2 < a2)
        {
            v10 += a1 - a1;
        }
        else
        {
            v10 += a4 + a5;
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 17
5 17
6 19
7 19
8 19
9 19
10 23
11 23
12 37
13 37
14 37
15 37
16 37
17 37
18 38
<<<sep_out_sample>>>
lea (%rdi,%rdi,1),%r9d
test %r8d,%r8d
jle 10 <func1+0x10>
mov %esi,%eax
imul %edx,%eax
jmp 18 <func1+0x18>
mov %esi,%eax
imul %r8d,%eax
add %edx,%eax
lea (%r8,%r8,1),%r10d
sub %esi,%r10d
imul %ecx,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a1 + a1 - a3 + a3;
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += a2 - (a1 * a4);
    }
    if (v7 < a5)
    {
        v9 = (a2 * a3 + a3) - a3;
    }
    else
    {
        v9 = a2 * a5 + a3;
    }
    v10 = (a5 + a5 - a2) * a4;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 10
3 10
4 12
5 12
6 12
7 16
8 16
9 16
10 18
11 18
12 18
13 19
14 19
15 19
16 19
17 19
18 19
19 19
20 20
<<<sep_out_sample>>>
lea (%rdi,%rdi,1),%r9d
cmp %r8d,%ecx
jge 12 <func1+0x12>
mov %r8d,%eax
sub %edx,%eax
add %esi,%eax
jmp 1c <func1+0x1c>
mov %ecx,%eax
imul %edi,%eax
add %r8d,%eax
sub %ecx,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a1 + a1;
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += (a3 * a4) * a5;
    }
    if (a4 < a5)
    {
        v9 = (a5 - a3) + a2;
    }
    else
    {
        v9 = a4 * a1 + a5 - a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 10
3 10
4 12
5 12
6 12
7 12
8 16
9 16
10 16
11 16
12 18
13 18
14 18
15 18
16 18
17 18
18 19
<<<sep_out_sample>>>
mov %ecx,%r9d
sub %r8d,%r9d
add $0x1,%r9d
imul %edi,%r9d
mov %r8d,%r10d
imul %edx,%r10d
mov %edi,%eax
sub %esi,%eax
imul %eax,%r10d
mov %ecx,%eax
cmp %r9d,%edi
jg 33 <func1+0x33>
mov %edi,%r11d
imul %esi,%r11d
lea (%r8,%rsi,1),%eax
imul %r11d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
add %r10d,%r9d
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a1 + (a4 - a5) * a1;
    v7 = a5 * a3 * (a1 - a2);
    if (v6 < a1)
    {
        v8 = a4 - (a2 - a2) * a4;
    }
    else
    {
        v8 = (a1 * a2) * (a5 + a2);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 5
6 5
7 5
8 5
9 5
10 8
11 6
12 6
13 12
14 12
15 12
16 12
17 14
18 14
19 14
20 14
21 14
22 14
23 14
24 15
<<<sep_out_sample>>>
cmp %esi,%edx
jle 12 <func1+0x12>
mov %edx,%eax
imul %r8d,%eax
imul %edx,%eax
imul %edi,%eax
jmp 1f <func1+0x1f>
lea (%rdi,%rsi,1),%eax
mov %ecx,%r9d
imul %r8d,%r9d
sub %r9d,%eax
lea 0x1(%rdi,%rdx,1),%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%esi
add %esi,%eax
imul %ecx,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += (a4 - a5) * a3;
    }
    if (a2 < a3)
    {
        v8 = a3 * (a3 * a5) * a1;
    }
    else
    {
        v8 = a1 + a2 - a4 * a5;
    }
    v9 = a3 * a4;
    v10 = 0;
    for (v11 = 0; v11++; v11<a1)
    {
        v10 += a2 * a3 * a5;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 11
8 15
9 15
10 15
11 15
12 23
13 23
14 23
15 23
16 23
17 17
18 23
19 24
<<<sep_out_sample>>>
lea (%rdi,%rsi,2),%eax
lea (%r8,%rcx,1),%r9d
test %ecx,%ecx
cmovle %r9d,%eax
lea -0x2(%rcx),%r9d
imul %edi,%r9d
lea 0x1(%rdi,%r9,1),%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a1 * a4 * a2;
    }
    if (v6 < a4)
    {
        v8 = (a1 + a2) + a2;
    }
    else
    {
        v8 = (a5 - a5) + a5 + a4;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a1)
    {
        v9 += a2 * a5;
    }
    v11 = (a1 * a4) - a1 - a1;
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 11
5 22
6 22
7 23
8 23
9 23
10 23
11 23
12 23
13 24
<<<sep_out_sample>>>
push %rbx
mov %esi,%r9d
sub %r8d,%r9d
cmp %edx,%edi
jge 17 <func1+0x17>
lea (%rcx,%rsi,1),%ebx
mov %ecx,%eax
imul %edi,%eax
add %eax,%ebx
jmp 1d <func1+0x1d>
lea (%r8,%rdx,2),%ebx
add %edx,%ebx
mov %edi,%r11d
imul %esi,%r11d
imul %r8d,%r11d
add %edx,%r11d
mov %r8d,%r10d
neg %r10d
sub %r8d,%r10d
cmp %edx,%r9d
jge 48 <func1+0x48>
mov %r8d,%eax
imul %ecx,%eax
mov %edx,%r10d
sub %eax,%r10d
add %edx,%r10d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
add %ebx,%eax
add %r11d,%eax
add %r10d,%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a2 - a5;
    if (a1 < a3)
    {
        v7 = a4 + a2 + (a4 * a1);
    }
    else
    {
        v7 = a3 + a3 + a5 + a3;
    }
    v8 = (a1 * a2 * a5) + a3;
    if (v6 < a3)
    {
        v9 = a3 - (a5 * a4) + a3;
    }
    else
    {
        v9 = a3 - a5 - a3 - a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 4
3 4
4 5
5 5
6 7
7 7
8 7
9 7
10 7
11 11
12 11
13 13
14 13
15 13
16 13
17 20
18 20
19 20
20 14
21 14
22 16
23 16
24 16
25 16
26 16
27 22
28 22
29 22
30 22
31 22
32 22
33 22
34 22
35 23
36 23
<<<sep_out_sample>>>
add %edi,%edx
lea (%rdx,%rsi,1),%eax
add %eax,%r8d
lea (%r8,%rcx,1),%eax
sub %esi,%edx
add %eax,%edx
lea (%rsi,%rdi,2),%eax
sub %ecx,%eax
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a1 + a3 - a2;
    v7 = (a1 + a2 + a1) - a4;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 6
3 6
4 6
5 4
6 6
7 5
8 5
9 6
10 7
<<<sep_out_sample>>>
cmp %esi,%r8d
jge 11 <func1+0x11>
mov %ecx,%eax
imul %esi,%eax
imul %esi,%eax
add %edi,%eax
jmp 1d <func1+0x1d>
mov %r8d,%eax
imul %ecx,%eax
imul %ecx,%eax
imul %esi,%eax
add %edi,%edx
add %esi,%edx
add %edx,%r8d
add %ecx,%r8d
lea 0x1(%rax,%r8,1),%edx
add $0x1,%edi
imul %edi,%ecx
sub %esi,%ecx
lea (%rdx,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a5 < a2)
    {
        v6 = a2 * (a4 * a2) + a1;
    }
    else
    {
        v6 = a2 * (a5 * a4 * a4);
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += a4 * (a5 * a4);
    }
    v9 = a4 + a1 * a4 - a2;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 18
13 18
14 18
15 18
16 18
17 17
18 17
19 17
20 18
21 19
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
sub %edi,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = (a5 - a5) + a4 - a4;
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a5 - a2;
    }
    v9 = a4 - a1;
    v10 = 0;
    for (v11 = 0; v11++; v11<a5)
    {
        v10 += a2 + a4 - a3;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 16
4 16
5 10
6 16
7 17
<<<sep_out_sample>>>
mov %ecx,%eax
imul %edx,%eax
mov %r8d,%r9d
imul %eax,%r9d
lea (%rdi,%rdx,2),%edi
lea (%rdi,%r9,1),%edi
add %esi,%edi
add %edi,%r8d
lea 0x1(%rcx,%r8,1),%edi
add %edi,%eax
lea (%rdx,%rsi,2),%edx
sub %ecx,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (v7 < a4)
        {
            v6 += a2 + a5 * a3;
        }
        else
        {
            v6 += a3 - a1 * a5;
        }
    }
    v8 = ((a4 + a3) - a4) * a4;
    if (a4 < a4)
    {
        v9 = ((a1 + a5) * a3) - a3;
    }
    else
    {
        v9 = ((a2 - a4) + a2) + a3;
    }
    v10 = ((a4 * a3) * a5) + a3;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 25
4 25
5 26
6 26
7 26
8 26
9 26
10 26
11 23
12 23
13 26
14 27
<<<sep_out_sample>>>
cmp $0x1,%r8d
jle 10 <func1+0x10>
lea 0x1(%rcx),%r9d
imul %r8d,%r9d
jmp 17 <func1+0x17>
lea (%r8,%r8,1),%r9d
neg %r9d
lea (%rsi,%rdi,1),%r10d
cmp %r8d,%r9d
jl 2d <func1+0x2d>
mov %edx,%r10d
imul %r8d,%r10d
add %esi,%r10d
add %edi,%r10d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %eax,%r9d
lea (%r9,%r10,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a2 + a4 + a2;
    }
    if (v7 < a5)
    {
        v8 = a5 + a4 * a5;
    }
    else
    {
        v8 = a3 - (a5 + a5 + a3);
    }
    if (v8 < a5)
    {
        v9 = a2 + a1;
    }
    else
    {
        v9 = a1 + (a3 * a5 + a2);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 15
7 15
8 19
9 17
10 17
11 23
12 23
13 23
14 23
15 25
16 25
17 25
18 25
19 25
20 25
21 26
<<<sep_out_sample>>>
lea (%rsi,%r8,1),%eax
sub %edx,%eax
cmp %edx,%r8d
jge 13 <func1+0x13>
mov %edi,%eax
imul %esi,%eax
lea (%rax,%rcx,2),%eax
add %edx,%edi
add %esi,%edi
add %r8d,%edi
add %edi,%ecx
lea 0x1(%rax,%rcx,1),%ecx
add %r8d,%esi
imul %esi,%edx
sub %r8d,%edx
lea (%rcx,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a5 < a3)
    {
        v6 = (a1 * a2) + a4 + a4;
    }
    else
    {
        v6 = a2 + a5 - a3;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        if (a2 < a2)
        {
            v7 += (a2 - a2) + a2;
        }
        else
        {
            v7 += a2 - a3 + a4;
        }
    }
    v9 = ((a5 + a2) * a3) - a5;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 4
4 4
5 6
6 6
7 6
8 25
9 25
10 25
11 25
12 25
13 24
14 24
15 24
16 25
17 26
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
sub %esi,%edi
add %edi,%eax
add %r8d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a1 - a2;
    v7 = a5 + a3;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 6
7 5
8 6
9 7
<<<sep_out_sample>>>
mov %edx,%r11d
imul %r8d,%r11d
lea (%rdi,%rcx,1),%r10d
cmp %esi,%r8d
jle 19 <func1+0x19>
mov %r8d,%r9d
imul %ecx,%r9d
jmp 23 <func1+0x23>
lea (%rcx,%rdx,1),%r9d
sub %edi,%r9d
sub %edi,%r9d
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a3 * a5;
    v7 = a4 + (a1 + a4 - a4);
    if (a2 < a5)
    {
        v8 = a5 * a4;
    }
    else
    {
        v8 = a4 + a3 - a1 - a1;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        if (a2 < a5)
        {
            v9 += a1 - a3 - a2;
        }
        else
        {
            v9 += a3 * a5 * a2;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 5
4 6
5 6
6 8
7 8
8 8
9 12
10 12
11 12
12 26
13 26
14 26
15 26
16 26
17 26
18 26
19 27
<<<sep_out_sample>>>
mov %edi,%r9d
sub %r8d,%r9d
cmp %r8d,%edx
jle 18 <func1+0x18>
lea (%r8,%rdx,1),%r9d
mov %r8d,%eax
imul %esi,%eax
add %eax,%r9d
cmp %esi,%r8d
jle 2c <func1+0x2c>
mov %edi,%r10d
imul %ecx,%r10d
sub %edx,%r10d
add %esi,%r10d
jmp 38 <func1+0x38>
mov %edx,%r10d
sub %ecx,%r10d
sub %esi,%r10d
add %edi,%r10d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %eax,%r9d
lea (%r9,%r10,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a3 - (a1 + a1);
    }
    if (a5 < a3)
    {
        v8 = (a5 + a3) + a5 * a2;
    }
    else
    {
        v8 = a1 - a5;
    }
    if (a2 < a5)
    {
        v9 = a1 * a4 - a3 + a2;
    }
    else
    {
        v9 = ((a3 - a4) - a2) + a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 15
2 15
3 9
4 9
5 11
6 11
7 11
8 11
9 17
10 17
11 19
12 19
13 19
14 19
15 19
16 23
17 23
18 23
19 23
20 25
21 25
22 25
23 25
24 25
25 25
26 26
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %eax,%ecx
imul %r8d,%edx
sub %edx,%ecx
sub %edi,%esi
lea 0x1(%rcx,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = ((a1 - a1) - a3) * a5;
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += a4 * a1;
    }
    v9 = a2 - a1;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 11
5 4
6 11
7 10
8 11
9 12
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
add %r8d,%ecx
imul %edi,%edx
sub %esi,%edi
add %edx,%edi
lea 0x1(%rcx,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a3 * a1 + (a1 - a2);
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += a3 + a2 - a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 4
6 4
7 4
8 10
9 11
<<<sep_out_sample>>>
cmp %r8d,%esi
jle f <func1+0xf>
mov %edx,%eax
imul %r8d,%eax
add %edi,%eax
jmp 1d <func1+0x1d>
mov %r8d,%r9d
imul %edx,%r9d
mov %ecx,%eax
sub %esi,%eax
add %r9d,%eax
cmp %edx,%eax
jge 31 <func1+0x31>
mov %r8d,%r9d
imul %edi,%r9d
imul %esi,%r9d
add %ecx,%r9d
jmp 3f <func1+0x3f>
mov %r8d,%r9d
imul %ecx,%r9d
imul %edi,%r9d
sub %ecx,%r9d
add %r9d,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a1 + a3;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        if (v9 < a2)
        {
            v8 += a4 - a2 - a2;
        }
        else
        {
            v8 += a1 - a1 + a1;
        }
    }
    if (a5 < a2)
    {
        v10 = a3 * a5 + a1;
    }
    else
    {
        v10 = a5 * a3 + (a4 - a2);
    }
    if (v10 < a3)
    {
        v11 = a4 + a5 * a1 * a2;
    }
    else
    {
        v11 = a5 * a4 * a1 - a4;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 23
4 23
5 23
6 23
7 27
8 27
9 27
10 27
11 27
12 29
13 29
14 31
15 31
16 31
17 31
18 31
19 35
20 35
21 35
22 35
23 37
24 37
25 37
26 37
27 37
28 37
29 38
<<<sep_out_sample>>>
lea (%rcx,%rdi,1),%r9d
cmp %edi,%edx
jge 15 <func1+0x15>
mov %esi,%r9d
sub %r8d,%r9d
sub %ecx,%r9d
imul %edi,%r9d
mov %edx,%eax
sub %edi,%eax
cmp %r8d,%esi
jg 28 <func1+0x28>
mov %edx,%eax
imul %esi,%eax
add %r8d,%eax
sub %edx,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a3 < a1)
    {
        v6 = a1 * ((a2 - a5) - a4);
    }
    else
    {
        v6 = a4 + a1;
    }
    if (a5 < a2)
    {
        v7 = a3 - a1;
    }
    else
    {
        v7 = a3 * a2 + a5 - a3;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 6
7 6
8 14
9 14
10 12
11 12
12 18
13 18
14 18
15 18
16 20
17 20
18 20
19 20
20 20
21 20
22 21
<<<sep_out_sample>>>
mov %esi,%eax
cmp %r8d,%esi
jl 10 <func1+0x10>
lea -0x1(%rsi),%eax
imul %edi,%eax
imul %edx,%eax
lea (%rdi,%rdx,1),%r9d
add %esi,%r9d
add %r8d,%r9d
add %ecx,%r9d
add %r9d,%eax
lea (%rcx,%rdx,1),%r9d
imul %r9d,%edi
sub %edi,%esi
add %esi,%eax
imul %ecx,%r8d
sub %r8d,%edx
imul %edx,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a2 < a5)
    {
        v6 = (a2 - a2) * a3 + a2;
    }
    else
    {
        v6 = (a1 * a2 - a1) * a3;
    }
    v7 = a2 - ((a4 + a3) * a1);
    v8 = a4 * (a3 - a4 * a5);
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 6
2 4
3 4
4 10
5 10
6 10
7 14
8 14
9 14
10 14
11 14
12 12
13 12
14 12
15 14
16 13
17 13
18 13
19 14
20 15
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a5 < a5)
    {
        v6 = a4 + (a1 * (a5 - a3));
    }
    else
    {
        v6 = a4 - a4;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += a4 * a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 18
<<<sep_out_sample>>>
push %rbx
lea (%rdi,%rcx,1),%r10d
cmp %esi,%edi
jge 16 <func1+0x16>
mov %edi,%r10d
sub %edx,%r10d
sub %esi,%r10d
imul %esi,%r10d
mov %r8d,%eax
imul %ecx,%eax
mov %edi,%r9d
sub %eax,%r9d
add %ecx,%r9d
mov %edi,%ebx
imul %edi,%ebx
cmp %r9d,%edx
jle 38 <func1+0x38>
mov %edx,%r11d
imul %esi,%r11d
jmp 40 <func1+0x40>
lea (%rcx,%rdx,1),%r11d
imul %esi,%r11d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
add %ebx,%eax
add %r11d,%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a1 < a2)
    {
        v6 = a2 * (a1 - a3 - a2);
    }
    else
    {
        v6 = a1 + a4;
    }
    v7 = a4 - ((a5 * a4) - a1);
    v8 = a1 * a1;
    if (v7 < a3)
    {
        v9 = a3 * a2;
    }
    else
    {
        v9 = (a4 + a3) * a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 10
3 4
4 4
5 6
6 6
7 6
8 6
9 12
10 12
11 12
12 12
13 12
14 13
15 13
16 14
17 14
18 16
19 16
20 16
21 20
22 20
23 22
24 22
25 22
26 22
27 22
28 22
29 22
30 22
31 23
32 23
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (a4 < a3)
        {
            v6 += (a3 + a3) * a2;
        }
        else
        {
            v6 += (a4 * a2) * a4;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += a1 * a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 21
5 22
<<<sep_out_sample>>>
cmp %edi,%esi
jge c <func1+0xc>
mov %esi,%r10d
neg %r10d
jmp 1c <func1+0x1c>
mov $0x1,%r10d
sub %esi,%r10d
imul %esi,%r10d
add %edx,%r10d
cmp %edx,%ecx
jle 29 <func1+0x29>
mov %edi,%r9d
imul %r8d,%r9d
jmp 34 <func1+0x34>
mov %esi,%r9d
imul %edi,%r9d
imul %r8d,%r9d
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
mov %ecx,%edi
sub %edx,%edi
mov %edi,%edx
imul %ecx,%edx
imul %edx,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a2 < a1)
    {
        v6 = a4 - a2 - a4;
    }
    else
    {
        v6 = a2 - (a2 * a2) + a3;
    }
    if (a3 < a4)
    {
        v7 = a1 * a5;
    }
    else
    {
        v7 = a5 * (a2 * a1);
    }
    v8 = ((a4 - a3) * a4) * a4;
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        if (v10 < a2)
        {
            v9 += a2 * a2 * a2;
        }
        else
        {
            v9 += a1 * a5;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 10
10 12
11 12
12 14
13 14
14 14
15 18
16 18
17 18
18 33
19 33
20 33
21 33
22 33
23 33
24 20
25 20
26 20
27 20
28 20
29 33
30 34
<<<sep_out_sample>>>
cmp %edi,%ecx
jge 16 <func1+0x16>
lea (%rdx,%rcx,1),%r11d
lea (%rsi,%rdi,1),%r10d
lea (%rdx,%r8,1),%r9d
imul %ecx,%r9d
jmp 2e <func1+0x2e>
mov $0x1,%r11d
sub %r8d,%r11d
imul %esi,%r11d
lea (%rsi,%rdi,1),%r10d
mov %esi,%r9d
imul %edx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a4 < a1)
    {
        v6 = a3 + a4;
    }
    else
    {
        v6 = a2 - a2 * a5;
    }
    v7 = a2 + a1;
    if (a4 < a1)
    {
        v8 = (a3 + a5) * a4;
    }
    else
    {
        v8 = a2 * a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 12
5 15
6 15
7 15
8 10
9 10
10 10
11 12
12 19
13 19
14 21
15 21
16 21
17 21
18 21
19 21
20 21
21 22
<<<sep_out_sample>>>
mov %edi,%eax
neg %eax
cmp %edx,%esi
jge d <func1+0xd>
lea (%rdx,%rdi,1),%eax
sub %esi,%eax
cmp %ecx,%edi
jle 22 <func1+0x22>
mov %r8d,%r9d
imul %r8d,%r9d
imul %esi,%r9d
imul %r8d,%r9d
jmp 29 <func1+0x29>
lea (%rsi,%r8,2),%r9d
add %esi,%r9d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%eax
lea 0x1(%r9,%rax,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a2 < a3)
    {
        v6 = a3 + a1 - a2;
    }
    else
    {
        v6 = (a4 * (a3 - a3)) - a1;
    }
    if (a4 < a1)
    {
        v7 = a5 * a5 * a2 * a5;
    }
    else
    {
        v7 = (a5 + a5) + a2 + a2;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += (a2 - a4) + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 4
4 4
5 6
6 6
7 12
8 12
9 14
10 14
11 14
12 14
13 14
14 18
15 18
16 25
17 25
18 25
19 25
20 25
21 25
22 26
<<<sep_out_sample>>>
mov %esi,%r9d
imul %edx,%r9d
mov $0x0,%eax
cmp %ecx,%edx
jle 1f <func1+0x1f>
mov %edx,%eax
imul %edx,%eax
mov %esi,%r10d
imul %edi,%r10d
sub %r10d,%eax
add %edi,%edx
add %edx,%esi
add %r8d,%esi
add %esi,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a2 * a3;
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        if (a5 < a5)
        {
            v7 += a1 + (a4 - a5);
        }
        else
        {
            v7 += (a4 + a3) - a4;
        }
    }
    if (a4 < a3)
    {
        v9 = a3 * a3 - a2 * a1;
    }
    else
    {
        v9 = ((a2 - a2) * a2) * a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 23
4 17
5 17
6 19
7 19
8 19
9 19
10 19
11 25
12 25
13 25
14 25
15 25
16 25
17 26
<<<sep_out_sample>>>
mov %edi,%r9d
sub %edx,%r9d
cmp %edx,%edi
jge 14 <func1+0x14>
mov %ecx,%r9d
imul %r8d,%r9d
add %edi,%r9d
lea (%rsi,%rdx,1),%eax
mov %r8d,%r11d
sub %esi,%r11d
cmp %r8d,%edi
cmovl %eax,%r11d
cmp %edi,%r9d
jge 39 <func1+0x39>
mov %ecx,%r10d
imul %ecx,%r10d
imul %esi,%r10d
add %edx,%r10d
jmp 42 <func1+0x42>
lea -0x1(%rsi,%rdx,1),%r10d
imul %edi,%r10d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
add %r11d,%eax
add %r10d,%eax
sub %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a1 < a3)
    {
        v6 = a1 + (a4 * a5);
    }
    else
    {
        v6 = a1 - a3;
    }
    if (a1 < a5)
    {
        v7 = a2 + a3;
    }
    else
    {
        v7 = a5 - a2;
    }
    if (v6 < a1)
    {
        v8 = a3 + (a4 * a4 * a2);
    }
    else
    {
        v8 = a1 * (a2 + a3) - a1;
    }
    v9 = (a5 - a5) * a3 - a5;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 4
4 4
5 6
6 6
7 6
8 14
9 14
10 14
11 14
12 14
13 20
14 20
15 22
16 22
17 22
18 22
19 22
20 26
21 26
22 29
23 29
24 29
25 29
26 29
27 29
28 29
29 29
30 30
<<<sep_out_sample>>>
lea (%rdx,%rdi,1),%r9d
cmp %edx,%esi
jl f <func1+0xf>
lea (%r8,%rcx,2),%r9d
add %esi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
sub %edi,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a2 < a3)
    {
        v6 = ((a5 + a3) - a5) + a1;
    }
    else
    {
        v6 = ((a5 + a4) + a4) + a2;
    }
    v7 = a2 - a1;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 4
3 4
4 10
5 10
6 13
7 13
8 13
9 13
10 13
11 12
12 13
13 14
<<<sep_out_sample>>>
mov %r8d,%r11d
imul %r8d,%r11d
lea (%rdi,%r8,1),%r10d
mov %ecx,%r9d
neg %r9d
cmp %ecx,%edx
jl 23 <func1+0x23>
mov %edx,%r9d
sub %edi,%r9d
imul %r8d,%r9d
imul %esi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a5 * (a5 - a5 + a5);
    v7 = a1 + a5;
    if (a3 < a4)
    {
        v8 = (a4 * (a5 - a5)) - a4;
    }
    else
    {
        v8 = (a3 - a1) * a5 * a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 5
4 8
5 8
6 6
7 6
8 12
9 12
10 12
11 12
12 14
13 14
14 14
15 14
16 14
17 14
18 14
19 15
<<<sep_out_sample>>>
lea (%r8,%rdi,1),%eax
lea (%rax,%rcx,2),%r9d
cmp %r9d,%r8d
jle 16 <func1+0x16>
lea (%rsi,%rcx,2),%r10d
add %edx,%r10d
jmp 1d <func1+0x1d>
mov %ecx,%r10d
imul %esi,%r10d
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %eax,%r9d
lea (%r9,%r10,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (v7 < a5)
        {
            v6 += (a4 * a5) * a3;
        }
        else
        {
            v6 += (a1 + a2) - a5;
        }
    }
    v8 = (a5 + a1) + a4 + a4;
    if (v8 < a5)
    {
        v9 = (a4 + a2) + a4 + a3;
    }
    else
    {
        v9 = a4 * a2;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a5)
    {
        v10 += (a3 + a3) - a5;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 17
4 17
5 19
6 19
7 19
8 23
9 23
10 30
11 30
12 30
13 30
14 30
15 30
16 31
<<<sep_out_sample>>>
cmp %edx,%ecx
jge f <func1+0xf>
mov %ecx,%eax
not %eax
imul %esi,%eax
add %edx,%eax
jmp 19 <func1+0x19>
mov %r8d,%eax
imul %r8d,%eax
lea (%rax,%rsi,2),%eax
mov %r8d,%r9d
imul %edx,%r9d
lea 0x1(%rdi,%r9,1),%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a2 * a1 + a1;
    }
    if (a4 < a3)
    {
        v8 = a3 - ((a2 * a4) + a2);
    }
    else
    {
        v8 = a2 + (a5 * a5) + a2;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        if (v8 < a5)
        {
            v9 += (a1 + a5) * a2;
        }
        else
        {
            v9 += (a3 + a5) - a2;
        }
    }
    v11 = a5 * a3;
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 11
8 15
9 15
10 15
11 29
12 29
13 30
14 30
15 30
16 30
17 30
18 30
19 31
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %edx,%r8d
lea (%rcx,%rsi,1),%eax
imul %eax,%esi
lea (%r8,%rcx,2),%eax
lea 0x1(%rsi,%rax,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a3 < a3)
    {
        v6 = (a1 * a4) - (a3 - a4);
    }
    else
    {
        v6 = a4 + a2 * (a4 + a2);
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += (a4 * a3) + a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 10
5 10
6 10
7 17
8 18
<<<sep_out_sample>>>
cmp %edi,%esi
jge a <func1+0xa>
lea (%r8,%r8,1),%r9d
jmp 18 <func1+0x18>
mov %edi,%r9d
sub %esi,%r9d
imul %r8d,%r9d
imul %esi,%r9d
test %r8d,%r8d
jle 24 <func1+0x24>
mov %ecx,%eax
sub %r8d,%eax
jmp 2a <func1+0x2a>
lea -0x1(%rdx),%eax
imul %esi,%eax
lea (%r8,%rsi,1),%r10d
test %edi,%edi
jg 3b <func1+0x3b>
mov %edx,%r10d
sub %r8d,%r10d
add %ecx,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a2 < a1)
    {
        v6 = a5 + (a5 - a4 + a4);
    }
    else
    {
        v6 = a5 * (a1 - a2) * a2;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += a3 - (a4 - a2);
    }
    if (v7 < a5)
    {
        v9 = a4 + (a1 - a5) - a1;
    }
    else
    {
        v9 = a3 * a2 - a2;
    }
    if (v10 < a1)
    {
        v10 = a5 + a2;
    }
    else
    {
        v10 = (a3 - a5) + a4;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 10
6 10
7 10
8 10
9 17
10 17
11 19
12 19
13 19
14 23
15 23
16 27
17 25
18 25
19 31
20 31
21 31
22 33
23 33
24 33
25 33
26 33
27 33
28 33
29 34
<<<sep_out_sample>>>
cmp %esi,%edi
jge d <func1+0xd>
lea (%r8,%rdx,2),%eax
imul %ecx,%eax
jmp 1b <func1+0x1b>
mov %edx,%r9d
imul %ecx,%r9d
mov %esi,%eax
sub %edi,%eax
add %r9d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a1 < a2)
    {
        v6 = a4 * ((a5 + a3) + a3);
    }
    else
    {
        v6 = (a3 * a4) + (a2 - a1);
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += a5 * a4 + a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 10
10 10
11 17
12 17
13 17
14 17
15 17
16 18
<<<sep_out_sample>>>
mov %ecx,%r9d
imul %edx,%r9d
imul %r8d,%r9d
sub %esi,%r9d
mov %r8d,%eax
sub %edx,%eax
cmp %r8d,%ecx
jge 22 <func1+0x22>
mov %edi,%eax
sub %edx,%eax
add $0x1,%eax
imul %ecx,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
add %ecx,%eax
lea (%rax,%rdx,2),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = ((a4 * a3) * a5) - a2;
    if (a4 < a5)
    {
        v7 = a4 + (a1 - a3) * a4;
    }
    else
    {
        v7 = a5 - a3;
    }
    v8 = a3 + a3;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 11
6 11
7 5
8 5
9 7
10 7
11 7
12 7
13 14
14 14
15 14
16 14
17 14
18 14
19 14
20 15
<<<sep_out_sample>>>
mov %edi,%r10d
sub %edx,%r10d
cmp %r8d,%edx
jle 11 <func1+0x11>
lea (%r8,%r8,1),%r9d
jmp 1f <func1+0x1f>
mov %r8d,%r9d
imul %esi,%r9d
imul %ecx,%r9d
add %edi,%r9d
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
add %ecx,%esi
sub %esi,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a1 - a3;
    if (a5 < a3)
    {
        v7 = a5 + a5;
    }
    else
    {
        v7 = (a4 * (a5 * a2)) + a1;
    }
    v8 = a1 - (a2 + a4);
    v9 = 0;
    for (v10 = 0; v10++; v10<a1)
    {
        if (v10 < a1)
        {
            v9 += a5 - a1 + a4;
        }
        else
        {
            v9 += (a2 * a2) + a5;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 5
4 5
5 7
6 7
7 11
8 11
9 11
10 11
11 26
12 26
13 26
14 26
15 26
16 26
17 13
18 13
19 26
20 27
<<<sep_out_sample>>>
lea (%r8,%rcx,1),%eax
cmp %edi,%edx
jl d <func1+0xd>
lea (%rsi,%rdx,2),%eax
sub %ecx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a3 < a1)
    {
        v6 = ((a5 - a3) + a3) + a4;
    }
    else
    {
        v6 = (a3 - (a4 - a3)) + a2;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += (a2 * a4) + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 6
2 4
3 4
4 10
5 10
6 17
7 17
8 17
9 17
10 17
11 18
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %eax,%esi
sub %edi,%edx
lea (%rsi,%r8,2),%eax
lea 0x1(%rax,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (a2 < a3)
        {
            v6 += a5 * a3;
        }
        else
        {
            v6 += a5 - a1 * a1;
        }
    }
    v8 = (a3 - a1 + a5) - a4;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 16
4 16
5 17
6 18
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
sub %edi,%esi
sub %edx,%esi
lea 0x1(%r8,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (a2 < a5)
        {
            v6 += (a4 - a4) * a2;
        }
        else
        {
            v6 += a4 * (a3 * a3);
        }
    }
    v8 = (a2 - a1) - a3 - a4;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 16
5 16
6 17
7 18
<<<sep_out_sample>>>
mov %esi,%r9d
sub %r8d,%r9d
add %edx,%r9d
sub %edi,%r9d
mov %edx,%eax
cmp %ecx,%r8d
jg 21 <func1+0x21>
mov %edx,%r10d
imul %r8d,%r10d
mov %esi,%eax
sub %ecx,%eax
add %r10d,%eax
add %edx,%edi
add %edi,%esi
add %r8d,%esi
add %esi,%ecx
add %r9d,%ecx
add %ecx,%eax
add %r8d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a3 - (a5 - a2) - a1;
    if (a4 < a5)
    {
        v7 = (a3 + a1) - a1;
    }
    else
    {
        v7 = a3 * a5 + (a2 - a4);
    }
    v8 = a3 + a5;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 7
6 5
7 5
8 11
9 11
10 11
11 11
12 11
13 14
14 14
15 14
16 14
17 14
18 14
19 13
20 14
21 15
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
lea 0x1(%rcx,%rax,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += (a2 - a1) + a5;
    }
    v8 = (a1 - a1 - a5) - a2;
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        v9 += a2 - (a2 + a4);
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 15
2 15
3 16
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
sub %edi,%esi
add %esi,%eax
mov %edx,%esi
imul %edx,%esi
add %edx,%r8d
imul %esi,%r8d
add %r8d,%eax
imul %edx,%edi
imul %edi,%ecx
imul %ecx,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = ((a2 - a4) + a4) - a1;
    v7 = (a3 * a3) * (a3 + a5);
    v8 = (a3 * a1 * a4) * a3;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 7
2 7
3 7
4 7
5 4
6 7
7 5
8 5
9 5
10 5
11 7
12 6
13 6
14 6
15 7
16 8
<<<sep_out_sample>>>
cmp %edx,%r8d
jge a <func1+0xa>
lea (%rcx,%rcx,1),%eax
jmp 12 <func1+0x12>
mov %r8d,%eax
sub %esi,%eax
imul %ecx,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a5 < a3)
    {
        v6 = a4 + a4;
    }
    else
    {
        v6 = (a5 - a2) * a4;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += a2 - a4;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a1)
    {
        v9 += a2 * a5;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 10
6 10
7 10
8 22
9 22
10 22
11 22
12 22
13 23
<<<sep_out_sample>>>
cmp %ecx,%esi
jge 12 <func1+0x12>
mov %r8d,%eax
sub %edi,%eax
lea (%rdx,%rdx,1),%r9d
sub %r9d,%eax
jmp 1a <func1+0x1a>
mov %edx,%eax
imul %ecx,%eax
imul %eax,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a2 < a4)
    {
        v6 = a5 - a1 - (a3 + a3);
    }
    else
    {
        v6 = a3 * a4 * (a3 * a4);
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        if (a1 < a1)
        {
            v7 += (a3 + a3) + a1;
        }
        else
        {
            v7 += a4 - a5 + a5;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 24
12 24
13 24
14 24
15 24
16 25
<<<sep_out_sample>>>
cmp %edi,%edx
jge d <func1+0xd>
mov %r8d,%r9d
imul %edi,%r9d
jmp 14 <func1+0x14>
mov %edi,%r9d
imul %edx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
imul %r8d,%esi
mov %edx,%edi
sub %esi,%edi
mov %edi,%esi
add %r8d,%esi
add %esi,%eax
imul %edx,%ecx
sub %ecx,%r8d
add %r8d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a3 < a1)
    {
        v6 = a5 * a1;
    }
    else
    {
        v6 = a1 * a3;
    }
    v7 = (a3 - a5 * a2) + a5;
    v8 = a5 - (a3 * a4) + a3;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 14
9 14
10 14
11 14
12 14
13 12
14 12
15 12
16 12
17 12
18 14
19 13
20 13
21 13
22 14
23 15
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (a2 < a4)
        {
            v6 += (a5 * a3) * a2;
        }
        else
        {
            v6 += a5 - a3 + a3;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        if (v7 < a4)
        {
            v8 += a4 * a4;
        }
        else
        {
            v8 += a5 * (a1 - a4);
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 28
2 28
3 28
4 28
5 29
<<<sep_out_sample>>>
mov %esi,%eax
sub %ecx,%eax
test %ecx,%ecx
jle 14 <func1+0x14>
mov %ecx,%eax
imul %r8d,%eax
imul %esi,%eax
add %r8d,%eax
lea 0x1(%rdi,%rdx,1),%r9d
add %r9d,%esi
add %r8d,%esi
add %ecx,%esi
add %esi,%eax
sub %ecx,%r8d
add %r8d,%edx
sub %edi,%edx
lea 0x1(%rax,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    if (v6 < a4)
    {
        v6 = a4 * a5 * a2 + a5;
    }
    else
    {
        v6 = a2 - a4;
    }
    if (a2 < a2)
    {
        v7 = a3 - ((a1 + a4) - a5);
    }
    else
    {
        v7 = ((a5 - a4) + a3) - a1;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += a2 * a4 + a4;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a1)
    {
        v10 += a5 + (a4 + a2);
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 4
4 4
5 6
6 6
7 6
8 6
9 30
10 30
11 30
12 30
13 30
14 18
15 18
16 18
17 30
18 31
<<<sep_out_sample>>>
lea (%rdx,%rdx,1),%eax
cmp $0x1,%edi
jle f <func1+0xf>
mov %edx,%eax
imul %edx,%eax
sub %ecx,%eax
lea 0x2(%rdi,%rdx,1),%edx
add %edx,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += (a3 + a5) * a3;
    }
    if (v7 < a1)
    {
        v8 = a3 * a3 - a4;
    }
    else
    {
        v8 = a3 + a3;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        v9 += a5 - a1 * a3;
    }
    v11 = 0;
    for (v12 = 0; v12++; v12<a1)
    {
        v11 += a4 + a5;
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 15
2 9
3 9
4 11
5 11
6 11
7 27
8 27
9 27
10 27
11 27
12 28
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %esi,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (v6 < a3)
        {
            v6 += (a5 - a1) - a5;
        }
        else
        {
            v6 += (a4 + a1) + a2;
        }
    }
    v8 = a1 + a2;
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        v9 += a2 + a5;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 22
4 22
5 16
6 22
7 23
<<<sep_out_sample>>>
mov %edx,%r9d
sub %esi,%r9d
lea (%rdx,%rcx,1),%eax
add %eax,%r9d
cmp %edi,%esi
jle 1e <func1+0x1e>
mov %edx,%r11d
sub %r8d,%r11d
sub %ecx,%r11d
add %edx,%r11d
jmp 2c <func1+0x2c>
mov %edi,%eax
imul %edi,%eax
mov %esi,%r11d
sub %eax,%r11d
sub %edi,%r11d
cmp %r9d,%esi
jle 41 <func1+0x41>
mov %edi,%r10d
imul %edx,%r10d
imul %edx,%r10d
add %esi,%r10d
jmp 4e <func1+0x4e>
mov %r8d,%r10d
imul %edx,%r10d
sub %ecx,%r10d
sub %r8d,%r10d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
add %r11d,%eax
add %r10d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a3 - a2 + (a3 + a4);
    if (a1 < a2)
    {
        v7 = a3 - (a5 - a3 + a4);
    }
    else
    {
        v7 = a2 - (a1 * a1) - a1;
    }
    if (v6 < a2)
    {
        v8 = a2 + (a1 * a3 * a3);
    }
    else
    {
        v8 = (a5 * a3) - a4 - a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 5
6 5
7 7
8 7
9 7
10 7
11 7
12 11
13 11
14 11
15 11
16 11
17 13
18 13
19 15
20 15
21 15
22 15
23 15
24 19
25 19
26 19
27 19
28 21
29 21
30 21
31 21
32 21
33 21
34 21
35 22
<<<sep_out_sample>>>
test %edx,%edx
jle c <func1+0xc>
lea (%rsi,%rdx,2),%eax
sub %r8d,%eax
jmp 15 <func1+0x15>
mov %edx,%eax
imul %edi,%eax
add %esi,%eax
add %edx,%eax
lea (%rsi,%rcx,1),%r9d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (v6 < a3)
    {
        v6 = (a3 + a3 - a5) + a2;
    }
    else
    {
        v6 = a3 * a1 + a2 + a3;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += a5 * (a2 * a4);
    }
    v9 = ((a2 + a4) + a1) - a1;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 10
10 17
11 18
12 18
13 18
14 18
15 18
16 18
17 19
<<<sep_out_sample>>>
mov %edx,%r10d
imul %r8d,%r10d
cmp %r8d,%edx
jge 19 <func1+0x19>
mov %edx,%r9d
imul %edx,%r9d
imul %ecx,%r9d
jmp 20 <func1+0x20>
mov %edi,%r9d
imul %ecx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
imul %ecx,%edx
sub %edi,%edx
imul %edx,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a3 * a5;
    if (a3 < a5)
    {
        v7 = a3 * a3 * a4;
    }
    else
    {
        v7 = a4 - a4 + a1 * a4;
    }
    v8 = (a4 * a3 - a1) * a4;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 5
4 5
5 7
6 7
7 7
8 7
9 11
10 11
11 14
12 14
13 14
14 14
15 14
16 14
17 13
18 13
19 13
20 14
21 15
<<<sep_out_sample>>>
add %esi,%edx
imul %ecx,%edx
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (a3 < a4)
        {
            v6 += a2 + a5;
        }
        else
        {
            v6 += (a2 - a4) * a2;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += a4 * a4 - a3;
    }
    v10 = ((a3 + a2) * a4) - a3;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 22
4 22
5 22
6 22
7 23
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
mov %r8d,%edi
imul %esi,%edi
imul %edi,%edx
imul %r8d,%edx
add %edx,%eax
add %ecx,%r8d
imul %r8d,%ecx
imul %ecx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a5 * a2 * a3 * a5;
    v7 = (a4 * (a4 + a5)) * a2;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 4
7 4
8 4
9 6
10 5
11 5
12 5
13 6
14 7
<<<sep_out_sample>>>
push %rbx
lea (%rdx,%r8,2),%ebx
imul %ecx,%ebx
mov %edx,%eax
imul %esi,%eax
mov %r8d,%r11d
sub %eax,%r11d
sub %edx,%r11d
mov %esi,%r10d
imul %edi,%r10d
imul %edi,%r10d
cmp %edi,%esi
jle 32 <func1+0x32>
lea (%r8,%rdi,1),%r9d
add %ecx,%r9d
imul %edx,%r9d
jmp 3c <func1+0x3c>
mov %r8d,%r9d
imul %edi,%r9d
add %ecx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %ebx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = (a5 + (a5 + a3)) * a4;
    if (a4 < a4)
    {
        v7 = a3 + a4;
    }
    else
    {
        v7 = (a5 - (a3 * a2)) - a3;
    }
    v8 = a2 * a1 * a1;
    if (a1 < a2)
    {
        v9 = (a5 + a1 + a4) * a3;
    }
    else
    {
        v9 = a4 + (a5 * a1);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 4
3 4
4 11
5 11
6 11
7 11
8 11
9 13
10 13
11 13
12 14
13 14
14 16
15 16
16 16
17 16
18 20
19 20
20 20
21 22
22 22
23 22
24 22
25 22
26 22
27 22
28 22
29 23
30 23
<<<sep_out_sample>>>
lea (%rdx,%rdi,2),%r9d
sub %ecx,%r9d
mov %edi,%r10d
sub %edx,%r10d
cmp %r9d,%edx
jg 1d <func1+0x1d>
lea (%rsi,%rdx,1),%r10d
sub %ecx,%r10d
imul %r8d,%r10d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %eax,%r9d
lea (%r9,%r10,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (v7 < a5)
        {
            v6 += a5 - a2 + a5;
        }
        else
        {
            v6 += a2 - a5 + a4;
        }
    }
    v8 = ((a1 - a4) + a1) + a3;
    if (v8 < a3)
    {
        v9 = a1 - a3;
    }
    else
    {
        v9 = (a2 + a3 - a4) * a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 19
4 19
5 17
6 17
7 23
8 23
9 23
10 25
11 25
12 25
13 25
14 25
15 25
16 26
<<<sep_out_sample>>>
cmp %r8d,%ecx
jge 15 <func1+0x15>
mov %edx,%r9d
imul %edx,%r9d
imul %edx,%r9d
add %esi,%r9d
jmp 1c <func1+0x1c>
mov %ecx,%r9d
imul %esi,%r9d
mov %r8d,%eax
neg %eax
cmp %esi,%r8d
jge 33 <func1+0x33>
lea (%rdi,%rdi,1),%eax
mov %edx,%r10d
imul %edi,%r10d
sub %r10d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a4 < a5)
    {
        v6 = (a3 * a3) * a3 + a2;
    }
    else
    {
        v6 = a4 - a4 + a4 * a2;
    }
    if (a5 < a2)
    {
        v7 = a1 + a1 - a3 * a1;
    }
    else
    {
        v7 = (a1 - a1) - a5;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 18
11 18
12 12
13 12
14 14
15 14
16 14
17 14
18 20
19 20
20 20
21 20
22 20
23 20
24 21
<<<sep_out_sample>>>
cmp %edx,%esi
jge e <func1+0xe>
lea (%rdx,%rcx,1),%r9d
imul %r8d,%r9d
jmp 1c <func1+0x1c>
mov %r8d,%r9d
imul %esi,%r9d
add %edx,%r9d
imul %edx,%r9d
cmp %r8d,%r9d
jge 31 <func1+0x31>
mov %ecx,%r10d
imul %r8d,%r10d
add %edi,%r10d
imul %ecx,%r10d
jmp 40 <func1+0x40>
mov %edx,%r10d
sub %edi,%r10d
mov %r8d,%eax
imul %edx,%eax
add %eax,%r10d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
lea (%r9,%r10,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a2 < a3)
    {
        v6 = a5 * a3 + a5 * a4;
    }
    else
    {
        v6 = (a5 * a2 + a3) * a3;
    }
    if (v6 < a5)
    {
        v7 = a4 * ((a4 * a5) + a1);
    }
    else
    {
        v7 = (a3 - a1) + (a5 * a3);
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 10
10 12
11 12
12 14
13 14
14 14
15 14
16 14
17 18
18 18
19 18
20 18
21 18
22 20
23 20
24 20
25 20
26 20
27 20
28 21
<<<sep_out_sample>>>
test %r8d,%r8d
jle 17 <func1+0x17>
mov $0x1,%r9d
sub %edx,%r9d
imul %edx,%r9d
add %r8d,%r9d
jmp 22 <func1+0x22>
lea (%rsi,%rdi,1),%eax
add %edx,%eax
mov %ecx,%r9d
sub %eax,%r9d
cmp %edx,%r8d
jle 3a <func1+0x3a>
mov %ecx,%eax
imul %edx,%eax
mov %esi,%r11d
sub %eax,%r11d
mov %r11d,%eax
imul %edi,%eax
jmp 41 <func1+0x41>
lea (%rdi,%rcx,1),%eax
add %edx,%eax
add %esi,%eax
lea 0x1(%rdx),%r10d
imul %edi,%r10d
imul %edx,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (v6 < a5)
    {
        v6 = (a3 - a3 * a3) + a5;
    }
    else
    {
        v6 = a4 - (a2 + a1 + a3);
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        if (v8 < a1)
        {
            v7 += a1 - (a5 + a3);
        }
        else
        {
            v7 += a5 - a1 + a4;
        }
    }
    if (a3 < a5)
    {
        v9 = (a2 - (a4 * a3)) * a1;
    }
    else
    {
        v9 = a3 + (a1 + a4) + a2;
    }
    v10 = (a1 + a1 * a3) * a3;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 24
13 24
14 26
15 26
16 26
17 26
18 26
19 26
20 26
21 30
22 30
23 30
24 32
25 32
26 32
27 33
28 33
29 33
30 33
31 33
32 33
33 33
34 34
<<<sep_out_sample>>>
lea (%rsi,%rdi,1),%r9d
cmp %ecx,%r9d
jge 12 <func1+0x12>
mov %r8d,%r10d
imul %r8d,%r10d
jmp 20 <func1+0x20>
mov %ecx,%r10d
imul %ecx,%r10d
imul %ecx,%r10d
add %r8d,%r10d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
lea (%r9,%r10,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a2 + a1;
    if (v6 < a4)
    {
        v7 = a4 + ((a5 * a5) - a4);
    }
    else
    {
        v7 = a5 + a4 * a4 * a4;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 5
3 5
4 7
5 7
6 7
7 11
8 11
9 11
10 11
11 13
12 13
13 13
14 13
15 13
16 13
17 14
<<<sep_out_sample>>>
mov %ecx,%eax
sub %edi,%eax
sub $0x1,%eax
imul %ecx,%eax
lea 0x1(%rdi,%rax,1),%eax
add %eax,%edx
add %esi,%edx
add %r8d,%edx
add %edx,%ecx
sub $0x1,%r8d
imul %r8d,%esi
lea 0x1(%rcx,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = a2 * a5 - a2;
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        if (a3 < a1)
        {
            v7 += (a1 - a1) - a5;
        }
        else
        {
            v7 += (a3 + a5) - a4;
        }
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        if (a1 < a2)
        {
            v9 += a4 - (a3 - a5);
        }
        else
        {
            v9 += a1 + a4;
        }
    }
    v11 = a4 * (a4 - a1) - a4;
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 29
2 29
3 29
4 29
5 30
6 30
7 30
8 30
9 30
10 4
11 4
12 30
13 31
<<<sep_out_sample>>>
push %rbx
mov %edi,%r9d
sub %r8d,%r9d
sub %ecx,%r9d
mov %esi,%ebx
sub %r8d,%ebx
add %ecx,%ebx
add %edx,%ebx
mov %esi,%eax
imul %esi,%eax
lea (%rax,%rdx,1),%r11d
imul %r8d,%r11d
cmp %r9d,%r8d
jle 36 <func1+0x36>
mov %ecx,%r10d
imul %edx,%r10d
imul %edx,%r10d
imul %edi,%r10d
jmp 41 <func1+0x41>
imul %r8d,%eax
imul %r8d,%eax
mov %eax,%r10d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
add %ebx,%eax
add %r11d,%eax
add %r10d,%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a1 - a5 - a4;
    v7 = (a4 - (a5 - a2)) + a3;
    v8 = a5 * (a3 + a2 * a2);
    if (v6 < a5)
    {
        v9 = a4 * a3 * a3 * a1;
    }
    else
    {
        v9 = a2 * a2 * a5 * a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 4
3 4
4 4
5 5
6 5
7 5
8 5
9 6
10 6
11 6
12 6
13 7
14 7
15 9
16 9
17 9
18 9
19 9
20 13
21 13
22 13
23 15
24 15
25 15
26 15
27 15
28 15
29 15
30 15
31 16
32 16
<<<sep_out_sample>>>
mov %r8d,%r10d
sub %esi,%r10d
mov %ecx,%eax
imul %esi,%eax
add %eax,%r10d
cmp %edx,%ecx
jle 22 <func1+0x22>
mov %ecx,%eax
imul %edi,%eax
mov %r8d,%r9d
sub %eax,%r9d
add %edx,%r9d
jmp 2f <func1+0x2f>
mov %esi,%r9d
imul %r8d,%r9d
add %edi,%r9d
sub %ecx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
add %ecx,%r8d
add %r10d,%r8d
add %r9d,%r8d
add %esi,%ecx
add %ecx,%edx
sub %edi,%edx
lea (%r8,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a5 - a2 + a4 * a2;
    if (a3 < a4)
    {
        v7 = a5 - (a4 * a1) + a3;
    }
    else
    {
        v7 = ((a2 * a5) + a1) - a4;
    }
    v8 = ((a4 + a2) + a3) - a1;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 4
6 5
7 5
8 7
9 7
10 7
11 7
12 7
13 7
14 11
15 11
16 11
17 11
18 14
19 14
20 14
21 14
22 14
23 14
24 13
25 13
26 13
27 14
28 15
<<<sep_out_sample>>>
lea (%rcx,%rdx,1),%eax
lea (%rdx,%rsi,1),%r9d
cmp %r8d,%ecx
cmovge %r9d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a4 < a5)
    {
        v6 = a4 + a3;
    }
    else
    {
        v6 = a4 + (a2 - a4) + a3;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += a1 * a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 17
6 17
7 17
8 17
9 17
10 18
<<<sep_out_sample>>>
cmp %r8d,%esi
jge f <func1+0xf>
mov %edi,%eax
sub %esi,%eax
sub %edx,%eax
add %ecx,%eax
jmp 1d <func1+0x1d>
mov $0x1,%eax
sub %edx,%eax
imul %esi,%eax
imul %r8d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a4 + a4;
    }
    if (a2 < a5)
    {
        v8 = a1 - a2 - a3 + a4;
    }
    else
    {
        v8 = (a2 - a3 * a2) * a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 11
8 15
9 15
10 15
11 15
12 17
13 17
14 17
15 17
16 17
17 18
<<<sep_out_sample>>>
lea (%rdi,%rcx,1),%r10d
mov %edi,%eax
imul %edi,%eax
add %eax,%r10d
lea (%r8,%rsi,1),%r9d
add %edx,%r9d
cmp %edx,%edi
jl 22 <func1+0x22>
lea 0x1(%rdi),%r9d
imul %ecx,%r9d
sub %r8d,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a2 < a2)
    {
        v6 = ((a1 + a4) * a2) - a1;
    }
    else
    {
        v6 = a1 + a4 + a1 * a1;
    }
    if (a1 < a3)
    {
        v7 = a5 + a2 + a3;
    }
    else
    {
        v7 = a4 + a4 * a1 - a5;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 14
6 14
7 12
8 12
9 18
10 18
11 18
12 20
13 20
14 20
15 20
16 20
17 20
18 21
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
lea 0x1(%rcx,%rax,1),%eax
imul %ecx,%esi
sub $0x1,%esi
imul %esi,%ecx
add %ecx,%eax
imul %r8d,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a2 - a5 - a5;
    }
    if (a5 < a5)
    {
        v8 = a3 - a5 - a3 * a2;
    }
    else
    {
        v8 = a4 * (a4 * a2) - a4;
    }
    v9 = a1 * a5;
    v10 = 0;
    for (v11 = 0; v11++; v11<a4)
    {
        if (a5 < a4)
        {
            v10 += a4 - a4;
        }
        else
        {
            v10 += a3 + (a4 * a3);
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 30
2 30
3 30
4 30
5 15
6 15
7 15
8 30
9 17
10 30
11 31
<<<sep_out_sample>>>
mov %r8d,%r10d
sub %esi,%r10d
cmp %edi,%ecx
mov $0x0,%eax
cmovl %eax,%r10d
mov %r8d,%eax
imul %esi,%eax
mov %esi,%r9d
neg %r9d
test %r8d,%r8d
jle 33 <func1+0x33>
mov %ecx,%r11d
imul %ecx,%r11d
mov %esi,%r9d
sub %r8d,%r9d
imul %r11d,%r9d
add %r9d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r10,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a4 < a1)
    {
        v6 = a1 * ((a4 - a4) * a2);
    }
    else
    {
        v6 = a5 - a2;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        if (v7 < a1)
        {
            v7 += a1 * (a1 + a1);
        }
        else
        {
            v7 += a5 + (a2 - a3);
        }
    }
    v9 = a5 * a2;
    if (v7 < a5)
    {
        v10 = a4 * a4 * (a2 - a5);
    }
    else
    {
        v10 = a3 - (a2 + a3);
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 10
6 24
7 24
8 31
9 31
10 25
11 25
12 27
13 27
14 27
15 27
16 27
17 33
18 33
19 33
20 33
21 33
22 33
23 33
24 34
<<<sep_out_sample>>>
lea -0x1(%rdi,%r8,1),%r10d
imul %esi,%r10d
test %r8d,%r8d
jle 1d <func1+0x1d>
mov %edi,%r9d
imul %ecx,%r9d
lea (%rsi,%rdi,1),%eax
add %eax,%r9d
jmp 28 <func1+0x28>
lea (%rsi,%r8,1),%r9d
imul %esi,%r9d
sub %ecx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
add %edx,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a1 < a1)
    {
        v6 = a3 * (a5 * (a5 * a3));
    }
    else
    {
        v6 = a2 * (a1 + a5) - a2;
    }
    if (v7 < a5)
    {
        v7 = (a1 * a4) + (a2 + a1);
    }
    else
    {
        v7 = ((a2 + a5) * a2) - a4;
    }
    v8 = a4 + a3;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 12
4 12
5 14
6 14
7 14
8 14
9 14
10 18
11 18
12 18
13 21
14 21
15 21
16 21
17 21
18 21
19 20
20 21
21 22
<<<sep_out_sample>>>
mov %edx,%r9d
imul %esi,%r9d
add %r8d,%r9d
test %esi,%esi
jle 1b <func1+0x1b>
lea (%rdx,%rdx,1),%r10d
sub %r8d,%r10d
imul %r8d,%r10d
jmp 2a <func1+0x2a>
mov %ecx,%r10d
sub %edx,%r10d
mov %r8d,%eax
imul %esi,%eax
add %eax,%r10d
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %r9d,%eax
add %r10d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (a2 < a4)
        {
            v6 += a5 - a4 * a1;
        }
        else
        {
            v6 += a3 * a5;
        }
    }
    if (a3 < a3)
    {
        v8 = a1 + a4 * a5 - a2;
    }
    else
    {
        v8 = a3 * a2 + a5;
    }
    if (v6 < a2)
    {
        v9 = (a3 + a3 - a5) * a5;
    }
    else
    {
        v9 = (a4 - a3) + a5 * a2;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a1)
    {
        if (a1 < a4)
        {
            v10 += a4 - a2;
        }
        else
        {
            v10 += a5 + a2 * a4;
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 22
4 24
5 24
6 26
7 26
8 26
9 26
10 30
11 30
12 30
13 30
14 30
15 44
16 44
17 44
18 44
19 44
20 44
21 45
<<<sep_out_sample>>>
cmp $0x1,%edx
jle 10 <func1+0x10>
lea -0x1(%r8),%eax
imul %edx,%eax
sub %esi,%eax
jmp 22 <func1+0x22>
mov %edx,%eax
imul %edi,%eax
mov %ecx,%r9d
sub %eax,%r9d
mov %r9d,%eax
imul %r8d,%eax
add %edi,%edx
add %esi,%edx
add %edx,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
sub %esi,%edi
add %edi,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (v6 < a4)
        {
            v6 += (a2 + a1) - a4;
        }
        else
        {
            v6 += (a1 - a1) + a2;
        }
    }
    if (v7 < a3)
    {
        v8 = a3 * a5 - a3 - a2;
    }
    else
    {
        v8 = (a4 - (a3 * a1)) * a5;
    }
    v9 = a1 - a2 + a4;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 18
7 22
8 22
9 22
10 22
11 22
12 22
13 25
14 25
15 25
16 25
17 25
18 24
19 24
20 25
21 26
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %r8d,%edx
add %edx,%ecx
lea 0x1(%rsi),%eax
imul %r8d,%eax
add %eax,%esi
lea 0x1(%rcx,%rsi,1),%eax
lea (%rax,%r8,2),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a5 + a2 * a5 + a2;
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += a2 + a2 * a1;
    }
    v9 = a5 + a5;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 11
5 4
6 4
7 4
8 11
9 11
10 12
<<<sep_out_sample>>>
mov %ecx,%r10d
imul %ecx,%r10d
add %edx,%r10d
sub %esi,%r10d
cmp %esi,%ecx
jge 1e <func1+0x1e>
lea -0x1(%rdi),%r9d
imul %r8d,%r9d
sub %edx,%r9d
jmp 2b <func1+0x2b>
mov %ecx,%r9d
imul %edi,%r9d
sub %edx,%r9d
sub %edx,%r9d
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
sub %edi,%esi
sub %edi,%edx
add %esi,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a4 * a4 + a3 - a2;
    if (a4 < a2)
    {
        v7 = ((a5 * a1) - a5) - a3;
    }
    else
    {
        v7 = (a4 * a1 - a3) - a3;
    }
    if (a1 < a1)
    {
        v8 = a4 - (a4 - a3);
    }
    else
    {
        v8 = a2 - a1 - (a1 - a3);
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        v9 += (a5 - a1) - a5;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 5
6 5
7 7
8 7
9 7
10 7
11 11
12 11
13 11
14 11
15 26
16 26
17 26
18 26
19 26
20 26
21 19
22 19
23 19
24 26
25 27
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a4 - a5 + a1;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += a1 + a2 + a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 14
2 14
3 14
4 14
5 15
<<<sep_out_sample>>>
test %ecx,%ecx
jle 10 <func1+0x10>
lea (%rdi,%rdi,1),%r11d
sub %ecx,%r11d
sub %edx,%r11d
jmp 17 <func1+0x17>
lea (%rdi,%rdi,1),%r11d
sub %esi,%r11d
test %edi,%edi
jle 26 <func1+0x26>
mov %ecx,%r10d
neg %r10d
sub %r8d,%r10d
jmp 34 <func1+0x34>
mov %ecx,%r10d
imul %edx,%r10d
imul %esi,%r10d
add %r8d,%r10d
cmp %edx,%edi
jle 42 <func1+0x42>
lea 0x1(%rdi),%r9d
imul %edx,%r9d
jmp 4c <func1+0x4c>
lea (%r8,%r8,1),%r9d
sub %edi,%r9d
sub %edx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (v6 < a4)
    {
        v6 = (a1 + a1) - a4 - a3;
    }
    else
    {
        v6 = (a1 + a1) - a2;
    }
    if (v7 < a1)
    {
        v7 = (a5 - a4) - a5 - a5;
    }
    else
    {
        v7 = a5 + a4 * a3 * a2;
    }
    if (a3 < a1)
    {
        v8 = a3 + a3 * a1;
    }
    else
    {
        v8 = (a5 + a5 - a1) - a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 12
10 12
11 14
12 14
13 14
14 14
15 18
16 18
17 18
18 18
19 20
20 20
21 22
22 22
23 22
24 26
25 26
26 26
27 28
28 28
29 28
30 28
31 28
32 28
33 28
34 29
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %r8d,%esi
add %ecx,%esi
lea 0x1(%r8),%eax
imul %eax,%r8d
add %esi,%r8d
imul %ecx,%edx
lea 0x1(%r8,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = (a5 * a5) + a5;
    v7 = a3 * a4;
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        if (v9 < a2)
        {
            v8 += a2 - a2 - a4;
        }
        else
        {
            v8 += a1 * a3;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 18
5 4
6 4
7 18
8 5
9 18
10 19
<<<sep_out_sample>>>
cmp %edi,%edx
jle 12 <func1+0x12>
mov %r8d,%eax
imul %esi,%eax
sub $0x1,%eax
imul %esi,%eax
jmp 17 <func1+0x17>
mov %ecx,%eax
imul %ecx,%eax
cmp %ecx,%edx
jge 24 <func1+0x24>
lea (%rdi,%rdx,2),%r9d
add %r8d,%r9d
jmp 2e <func1+0x2e>
mov %r8d,%r9d
imul %edx,%r9d
sub %edi,%r9d
add %r9d,%edi
add %edi,%edx
add %edx,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%edx
add %edx,%eax
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (v7 < a3)
        {
            v6 += a3 - a2;
        }
        else
        {
            v6 += a3 + a1;
        }
    }
    if (a1 < a3)
    {
        v8 = ((a5 * a2) * a2) - a2;
    }
    else
    {
        v8 = a4 * a4;
    }
    v9 = a5 + a3 - a3;
    if (a3 < a4)
    {
        v10 = (a3 + (a1 + a3)) + a5;
    }
    else
    {
        v10 = (a5 * a3) - a1;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 18
7 18
8 22
9 22
10 25
11 25
12 27
13 27
14 27
15 31
16 31
17 31
18 33
19 33
20 33
21 33
22 33
23 33
24 33
25 34
<<<sep_out_sample>>>
mov %ecx,%eax
sub %edi,%eax
imul %edx,%eax
imul %edi,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (v7 < a2)
        {
            v6 += a2 - a4;
        }
        else
        {
            v6 += a5 - a1;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        if (a1 < a3)
        {
            v8 += a5 + a2 * a4;
        }
        else
        {
            v8 += a2 - a4 - a4;
        }
    }
    v10 = ((a4 - a1) * a3) * a1;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 28
2 28
3 28
4 28
5 29
6 29
7 29
8 29
9 29
10 30
<<<sep_out_sample>>>
mov %esi,%eax
sub %edi,%eax
mov %esi,%r9d
imul %esi,%r9d
test %esi,%esi
cmovg %r9d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%eax
mov %edi,%edx
imul %edi,%edx
imul %edx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (v6 < a2)
    {
        v6 = a2 * a2;
    }
    else
    {
        v6 = a2 + ((a4 - a4) - a1);
    }
    v7 = (a1 * a1) * a1;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 10
2 10
3 6
4 6
5 6
6 6
7 13
8 13
9 13
10 13
11 13
12 12
13 12
14 12
15 13
16 14
<<<sep_out_sample>>>
lea (%rdx,%rdi,1),%r9d
cmp %esi,%r8d
jge 15 <func1+0x15>
lea (%r8,%rcx,1),%r9d
mov %esi,%eax
imul %edi,%eax
add %eax,%r9d
mov %ecx,%eax
imul %esi,%eax
lea (%rax,%rsi,1),%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %r8d,%esi
add %esi,%ecx
add %ecx,%r9d
imul %r8d,%r8d
add %r8d,%eax
lea 0x1(%r9,%rax,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a5 < a2)
    {
        v6 = a5 + a4 + a2 * a1;
    }
    else
    {
        v6 = a3 + (a3 - a3 + a1);
    }
    v7 = (a5 * a5) + a4 * a2;
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += a4 + a4;
    }
    v10 = a4 * a2 + a2;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 6
7 6
8 12
9 12
10 18
11 19
12 19
13 19
14 19
15 19
16 19
17 12
18 12
19 19
20 20
<<<sep_out_sample>>>
cmp %edi,%ecx
jge c <func1+0xc>
mov %r8d,%r9d
sub %ecx,%r9d
jmp 13 <func1+0x13>
mov %r8d,%r9d
imul %esi,%r9d
lea 0x1(%rsi),%r11d
imul %r8d,%r11d
imul %ecx,%r11d
lea (%rsi,%rcx,1),%eax
sub %r8d,%eax
lea (%rcx,%r8,1),%r10d
cmp %r8d,%r9d
jge 3c <func1+0x3c>
mov %edx,%r10d
sub %esi,%r10d
imul %ecx,%r10d
imul %r8d,%r10d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
add %r11d,%r9d
add %r9d,%eax
add %r10d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a4 < a1)
    {
        v6 = a5 - a4;
    }
    else
    {
        v6 = a5 * a2;
    }
    v7 = (a5 * a2 + a5) * a4;
    v8 = a2 + a4 - a5;
    if (v6 < a5)
    {
        v9 = ((a3 - a2) * a4) * a5;
    }
    else
    {
        v9 = a5 - a1 + a1 + a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 12
9 12
10 12
11 13
12 13
13 20
14 14
15 14
16 16
17 16
18 16
19 16
20 22
21 22
22 22
23 22
24 22
25 22
26 22
27 22
28 23
<<<sep_out_sample>>>
add %edi,%edx
add %edx,%esi
add %r8d,%esi
add %ecx,%esi
imul %r8d,%r8d
add %r8d,%ecx
sub %edi,%ecx
lea 0x1(%rsi,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a2 < a2)
    {
        v6 = (a4 - a5 * a3) - a1;
    }
    else
    {
        v6 = a4 + a5 * a5 - a1;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += (a1 + a1) - a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 10
6 10
7 10
8 17
9 18
<<<sep_out_sample>>>
test %r8d,%r8d
jle 10 <func1+0x10>
lea 0x1(%rdx),%eax
imul %edi,%eax
add %r8d,%eax
jmp 16 <func1+0x16>
mov %r8d,%eax
imul %edx,%eax
lea (%rdi,%rdx,1),%r9d
add %r9d,%esi
add %esi,%r8d
add %r8d,%ecx
add %eax,%ecx
lea (%rdx,%rdx,1),%eax
imul %eax,%edi
sub %edx,%edi
lea 0x1(%rcx,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (v6 < a5)
    {
        v6 = ((a3 * a1) + a1) + a5;
    }
    else
    {
        v6 = a5 * a3;
    }
    v7 = (a3 + a3) * a1 - a3;
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += a4 + a4 * a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 18
10 18
11 18
12 18
13 18
14 12
15 12
16 12
17 18
18 19
<<<sep_out_sample>>>
lea (%rsi,%rcx,1),%r10d
add %edx,%r10d
add %edi,%r10d
mov %edi,%r9d
sub %esi,%r9d
cmp %ecx,%esi
jg 1d <func1+0x1d>
mov %r8d,%eax
sub %esi,%eax
lea (%rax,%r8,2),%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = (a2 + a4 + a3) + a1;
    if (a4 < a2)
    {
        v7 = a1 - a2;
    }
    else
    {
        v7 = (a5 - (a2 - a5)) + a5;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 7
5 7
6 5
7 5
8 11
9 11
10 11
11 13
12 13
13 13
14 13
15 13
16 13
17 14
<<<sep_out_sample>>>
add %edx,%edi
mov %ecx,%eax
imul %ecx,%eax
mov %edi,%r10d
sub %eax,%r10d
mov %edx,%r9d
sub %esi,%r9d
test %ecx,%ecx
jle 25 <func1+0x25>
mov %esi,%edx
imul %r8d,%edx
imul %r8d,%edx
add %esi,%edx
jmp 2f <func1+0x2f>
lea (%rdx,%r8,1),%eax
imul %r8d,%eax
sub %eax,%edx
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea (%rcx,%r10,1),%eax
add %r9d,%eax
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = (a3 + a1) - a4 * a4;
    v7 = a3 - a2;
    if (v8 < a4)
    {
        v8 = a2 * a5 * a5 + a2;
    }
    else
    {
        v8 = a3 - ((a3 + a5) * a5);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 4
6 5
7 5
8 6
9 6
10 8
11 8
12 8
13 8
14 8
15 12
16 12
17 12
18 14
19 14
20 14
21 14
22 14
23 14
24 15
<<<sep_out_sample>>>
add %edi,%edx
add %edx,%esi
add %r8d,%esi
lea (%r8,%rdi,2),%edi
lea (%rsi,%rcx,2),%eax
lea 0x1(%rdi,%rax,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a1 + a5 + a1 + a4;
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += a3 + a4 - a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 4
5 4
6 10
7 11
<<<sep_out_sample>>>
lea (%rsi,%rdi,2),%eax
lea (%rax,%rcx,1),%r9d
lea (%rcx,%r8,2),%eax
mov %esi,%r11d
sub %eax,%r11d
cmp %r9d,%ecx
jle 25 <func1+0x25>
mov %edi,%r10d
sub %ecx,%r10d
imul %ecx,%r10d
add %esi,%r10d
jmp 2d <func1+0x2d>
lea (%r8,%rdx,1),%r10d
imul %ecx,%r10d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
add %r11d,%eax
add %r10d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a4 < a4)
    {
        v6 = a1 * a5 * a1 + a5;
    }
    else
    {
        v6 = a1 + (a1 + a2 + a4);
    }
    v7 = a2 - ((a5 + a4) + a5);
    if (v6 < a4)
    {
        v8 = ((a1 - a4) * a4) + a2;
    }
    else
    {
        v8 = a4 * a5 + a4 * a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 12
4 12
5 12
6 13
7 13
8 15
9 15
10 15
11 15
12 15
13 19
14 19
15 21
16 21
17 21
18 21
19 21
20 21
21 21
22 22
<<<sep_out_sample>>>
lea (%rdi,%r8,2),%r9d
sub %edx,%r9d
cmp $0x1,%edi
jle 15 <func1+0x15>
mov %esi,%eax
imul %ecx,%eax
sub %edi,%eax
jmp 22 <func1+0x22>
lea (%rdx,%rdi,1),%eax
mov %r8d,%r10d
imul %ecx,%r10d
sub %r10d,%eax
add %r9d,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a5 + a2 - a3;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += a5 + a5;
    }
    v10 = a5 + a1 + a5 - a3;
    if (v9 < a1)
    {
        v11 = a2 * a4 - a1;
    }
    else
    {
        v11 = a3 + a1 - a5 * a4;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 14
2 14
3 15
4 15
5 17
6 17
7 17
8 17
9 21
10 21
11 21
12 21
13 23
14 23
15 23
16 23
17 23
18 23
19 24
<<<sep_out_sample>>>
mov %edx,%r10d
imul %edx,%r10d
sub %esi,%r10d
add %r8d,%r10d
mov %ecx,%r9d
imul %edx,%r9d
add %r8d,%r9d
add %edx,%r9d
mov $0x0,%eax
cmp %r8d,%edx
jg 2f <func1+0x2f>
mov %ecx,%eax
imul %ecx,%eax
imul %esi,%eax
imul %edi,%eax
add %edi,%edx
add %edx,%esi
add %r8d,%esi
add %esi,%ecx
add %r10d,%ecx
add %r9d,%ecx
add %ecx,%eax
mov %r8d,%edx
imul %r8d,%edx
add %edx,%edi
add %edi,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a5 - (a2 - (a3 * a3));
    v7 = (a5 + a4 * a3) + a3;
    if (a5 < a3)
    {
        v8 = (a2 - (a2 + a4)) + a4;
    }
    else
    {
        v8 = a4 * a4 * a2 * a1;
    }
    v9 = a1 + (a5 * a5) + a5;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 5
6 5
7 5
8 5
9 8
10 6
11 6
12 12
13 12
14 12
15 12
16 15
17 15
18 15
19 15
20 15
21 15
22 15
23 14
24 14
25 14
26 14
27 15
28 16
<<<sep_out_sample>>>
test %r8d,%r8d
jle b <func1+0xb>
lea (%r8,%r8,1),%eax
jmp 13 <func1+0x13>
mov %esi,%eax
sub %edi,%eax
imul %r8d,%eax
mov %edi,%r10d
sub %esi,%r10d
cmp %ecx,%eax
mov $0x0,%r9d
cmovge %r10d,%r9d
lea 0x1(%r9,%rdi,1),%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (a1 < a5)
        {
            v6 += a2 + a5 + a3;
        }
        else
        {
            v6 += a3 * a3;
        }
    }
    if (v6 < a5)
    {
        v8 = a5 + a5;
    }
    else
    {
        v8 = a5 * a2 - a5 * a1;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        v9 += (a2 + a1) + a1;
    }
    if (v8 < a4)
    {
        v11 = a1 - a1;
    }
    else
    {
        v11 = a1 - a2;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 22
6 22
7 22
8 35
9 35
10 35
11 35
12 35
13 37
14 37
15 37
16 37
17 37
18 37
19 38
<<<sep_out_sample>>>
add %edx,%edi
add %esi,%edi
add %r8d,%edi
lea 0x1(%rcx,%rdi,1),%eax
imul %edx,%esi
mov %r8d,%edx
sub %esi,%edx
imul %edx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (a4 < a5)
        {
            v6 += a4 + (a1 - a5);
        }
        else
        {
            v6 += (a5 - a3) + a1;
        }
    }
    v8 = a5 * (a5 - (a2 * a3));
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 16
6 16
7 16
8 16
9 17
10 18
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
sub %r8d,%esi
add %esi,%eax
add $0x1,%ecx
imul %ecx,%edi
add %edi,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = (a2 + a1) - a1 - a5;
    if (a5 < a5)
    {
        v7 = (a2 - a4) - a3 + a1;
    }
    else
    {
        v7 = a3 + (a1 * a4 + a1);
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 13
2 13
3 13
4 13
5 4
6 13
7 11
8 11
9 11
10 13
11 14
<<<sep_out_sample>>>
mov $0x0,%eax
cmp %ecx,%edx
jl 15 <func1+0x15>
mov %edi,%eax
imul %edx,%eax
imul %r8d,%eax
imul %ecx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (a5 < a3)
        {
            v6 += a4 - a2 * a1;
        }
        else
        {
            v6 += a2 + a1;
        }
    }
    if (a3 < a4)
    {
        v8 = a1 - ((a1 + a5) - a5);
    }
    else
    {
        v8 = a1 * a3 * a5 * a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 18
2 16
3 16
4 22
5 22
6 22
7 22
8 24
9 24
10 24
11 24
12 24
13 25
<<<sep_out_sample>>>
mov %edi,%r9d
sub %r8d,%r9d
imul %edx,%r9d
lea (%r9,%r8,1),%r9d
mov %ecx,%eax
sub %r8d,%eax
lea (%rsi,%rsi,1),%r10d
cmp %ecx,%r9d
cmovl %eax,%r10d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
lea (%r9,%r10,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a5 - a3 * (a5 - a1);
    if (v6 < a4)
    {
        v7 = a4 - a5;
    }
    else
    {
        v7 = a2 + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 5
5 7
6 7
7 7
8 7
9 7
10 13
11 13
12 13
13 13
14 13
15 13
16 14
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a3 - (a3 - a2);
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += a1 - a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 14
2 14
3 14
4 14
5 15
<<<sep_out_sample>>>
mov $0x0,%eax
cmp %ecx,%r8d
jl 10 <func1+0x10>
lea (%rdx,%rdi,2),%eax
lea (%rax,%rcx,1),%eax
lea 0x1(%rdi,%rdx,1),%edi
add %esi,%edi
add %r8d,%edi
add %ecx,%edi
add %edi,%eax
add %esi,%ecx
imul %ecx,%edx
mov %r8d,%ecx
sub %edx,%ecx
add %ecx,%eax
imul %esi,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a5 < a4)
    {
        v6 = a1 - a1;
    }
    else
    {
        v6 = a1 + a4 + (a1 + a3);
    }
    v7 = a5 - ((a2 + a4) * a3);
    v8 = a5 * a2;
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        v9 += a5 + a5 - a5;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 4
3 4
4 10
5 10
6 19
7 19
8 19
9 19
10 19
11 12
12 12
13 12
14 12
15 19
16 13
17 19
18 20
<<<sep_out_sample>>>
cmp %edi,%edx
jge d <func1+0xd>
mov %edx,%r9d
imul %r8d,%r9d
jmp 1b <func1+0x1b>
mov %r8d,%eax
imul %edi,%eax
add %edx,%eax
mov %edi,%r9d
sub %eax,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
mov %esi,%edx
sub %r8d,%edx
imul %edx,%esi
imul %esi,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a3 < a1)
    {
        v6 = a3 * a5;
    }
    else
    {
        v6 = a1 - ((a5 * a1) + a3);
    }
    v7 = ((a2 - a5) * a2) * a4;
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        if (v6 < a2)
        {
            v8 += a5 * a3 - a1;
        }
        else
        {
            v8 += a2 - a5 - a2;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 10
10 10
11 25
12 25
13 25
14 25
15 25
16 12
17 12
18 12
19 12
20 25
21 26
<<<sep_out_sample>>>
cmp %r8d,%esi
jge c <func1+0xc>
mov %esi,%eax
imul %edx,%eax
jmp 14 <func1+0x14>
mov %edi,%eax
sub %edx,%eax
add %esi,%eax
sub %ecx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += (a1 + a4) * a2;
    }
    if (a2 < a5)
    {
        v8 = a2 * a3;
    }
    else
    {
        v8 = ((a1 - a3) + a2) - a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 15
7 15
8 15
9 15
10 17
11 17
12 17
13 17
14 17
15 18
<<<sep_out_sample>>>
test %edi,%edi
jle d <func1+0xd>
mov %edi,%r9d
imul %edx,%r9d
jmp 14 <func1+0x14>
mov %edx,%r9d
imul %r8d,%r9d
cmp %edi,%r9d
jge 25 <func1+0x25>
mov %ecx,%r10d
imul %r8d,%r10d
sub %esi,%r10d
jmp 30 <func1+0x30>
lea (%rsi,%rcx,1),%r10d
imul %esi,%r10d
add %ecx,%r10d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %ecx,%r8d
add %r8d,%r9d
add %r10d,%r9d
mov %ecx,%eax
sub %edx,%eax
imul %edx,%ecx
sub %ecx,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a2 - a2;
    if (v7 < a1)
    {
        v7 = a1 * a3;
    }
    else
    {
        v7 = a2 + a3 * a5 - a2;
    }
    if (v7 < a1)
    {
        v8 = (a4 * a5) - a2;
    }
    else
    {
        v8 = a4 + ((a2 + a4) * a2);
    }
    v9 = a4 - a3 - a3 * a4;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 5
2 5
3 7
4 7
5 7
6 11
7 11
8 13
9 13
10 15
11 15
12 15
13 15
14 19
15 19
16 19
17 22
18 22
19 22
20 22
21 22
22 22
23 21
24 21
25 21
26 21
27 22
28 23
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %esi,%edx
add %eax,%edx
add %r8d,%esi
imul %ecx,%r8d
sub %r8d,%esi
lea (%rdx,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a2 + a3;
    v7 = (a2 + a5) - a5 * a4;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 6
7 5
8 5
9 5
10 6
11 7
<<<sep_out_sample>>>
cmp %edi,%edx
jge a <func1+0xa>
mov %esi,%eax
sub %edx,%eax
jmp 11 <func1+0x11>
lea (%rcx,%rdx,2),%eax
imul %r8d,%eax
cmp %esi,%eax
jge 25 <func1+0x25>
mov %edx,%r9d
sub %esi,%r9d
imul %ecx,%r9d
imul %ecx,%r9d
jmp 31 <func1+0x31>
lea 0x1(%rcx),%r9d
imul %ecx,%r9d
imul %ecx,%r9d
lea (%rcx,%r8,1),%r10d
cmp %edx,%eax
jl 49 <func1+0x49>
mov $0x1,%r10d
sub %ecx,%r10d
imul %esi,%r10d
add %edx,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%eax
lea 0x1(%r9,%rax,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a3 < a1)
    {
        v6 = a2 - a3;
    }
    else
    {
        v6 = ((a3 + a4) + a3) * a5;
    }
    if (v6 < a2)
    {
        v7 = a4 * ((a3 - a2) * a4);
    }
    else
    {
        v7 = (a4 + a4 * a4) * a4;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        if (a4 < a3)
        {
            v8 += a4 + a2 * a4;
        }
        else
        {
            v8 += a2 + a1;
        }
    }
    if (v6 < a3)
    {
        v10 = a5 + a3 + a4 - a3;
    }
    else
    {
        v10 = a2 - a4 * a2 + a3;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 12
9 12
10 14
11 14
12 14
13 14
14 14
15 18
16 18
17 18
18 34
19 32
20 32
21 38
22 38
23 38
24 38
25 40
26 40
27 40
28 40
29 40
30 40
31 40
32 41
<<<sep_out_sample>>>
cmp %edi,%ecx
jge b <func1+0xb>
mov %ecx,%eax
imul %edx,%eax
jmp 1a <func1+0x1a>
mov %edx,%r9d
sub %esi,%r9d
mov %ecx,%eax
imul %r8d,%eax
add %r9d,%eax
lea (%rdi,%rdx,1),%r9d
add %esi,%r9d
add %r8d,%r9d
lea 0x1(%rcx,%r9,1),%ecx
add %eax,%ecx
sub %r8d,%edi
add %edi,%edx
sub %esi,%edx
lea (%rcx,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (v7 < a3)
        {
            v6 += a5 - a3;
        }
        else
        {
            v6 += a4 * a1 * a3;
        }
    }
    if (a4 < a1)
    {
        v8 = a4 * a3;
    }
    else
    {
        v8 = (a3 - a2) + a4 * a5;
    }
    v9 = (a1 - a5) + a3 - a2;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 22
7 22
8 22
9 22
10 22
11 25
12 25
13 25
14 25
15 25
16 24
17 24
18 24
19 25
20 26
<<<sep_out_sample>>>
mov %esi,%eax
sub %ecx,%eax
cmp %edx,%ecx
jge 11 <func1+0x11>
mov %ecx,%eax
imul %edi,%eax
sub %esi,%eax
sub %edi,%eax
test %esi,%esi
jle 26 <func1+0x26>
mov %r8d,%r9d
imul %r8d,%r9d
sub $0x1,%r9d
imul %esi,%r9d
jmp 30 <func1+0x30>
mov %r8d,%r9d
neg %r9d
imul %r8d,%r9d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %ecx,%r8d
add %r8d,%eax
add %r9d,%eax
imul %edi,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a4 < a3)
    {
        v6 = a4 * a1 - a2 - a1;
    }
    else
    {
        v6 = a2 - a4;
    }
    if (v7 < a2)
    {
        v7 = a5 * a5 * a2 - a2;
    }
    else
    {
        v7 = (a2 - a2 - a5) * a5;
    }
    if (a5 < a5)
    {
        v8 = a2 * a2;
    }
    else
    {
        v8 = a4 * a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 4
4 4
5 6
6 6
7 6
8 6
9 12
10 12
11 14
12 14
13 14
14 14
15 14
16 18
17 18
18 18
19 28
20 28
21 28
22 28
23 28
24 28
25 26
26 28
27 29
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
imul %esi,%edi
lea (%rdi,%rdx,2),%edi
add %edi,%eax
imul %esi,%esi
imul %esi,%edx
sub %edx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a3 + a3 + a2 * a1;
    v7 = a5 - a2 * a2 * a3;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 4
7 6
8 5
9 5
10 5
11 6
12 7
<<<sep_out_sample>>>
mov $0x1,%r11d
sub %esi,%r11d
imul %edi,%r11d
add %edx,%r11d
lea (%r8,%rdi,1),%r9d
sub %ecx,%r9d
sub %esi,%r9d
cmp %r9d,%r8d
jle 2f <func1+0x2f>
mov %edi,%r10d
imul %esi,%r10d
imul %edi,%r10d
sub %esi,%r10d
jmp 3c <func1+0x3c>
mov %esi,%r10d
imul %ecx,%r10d
add %edi,%r10d
sub %edx,%r10d
test %ecx,%ecx
jle 4a <func1+0x4a>
mov %edi,%eax
sub %ecx,%eax
add %edx,%eax
add %esi,%eax
jmp 53 <func1+0x53>
lea (%rcx,%rsi,1),%eax
imul %ecx,%eax
imul %ecx,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r11d,%ecx
add %ecx,%r9d
add %r10d,%r9d
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a1 < a1)
    {
        v6 = a3 * ((a5 + a3) + a5);
    }
    else
    {
        v6 = (a1 - a1 * a2) + a3;
    }
    v7 = a5 + a1 - a4 - a2;
    if (v7 < a5)
    {
        v8 = (a1 * (a1 * a2)) - a2;
    }
    else
    {
        v8 = a1 + a2 * a4 - a3;
    }
    if (v9 < a4)
    {
        v9 = (a1 - a4) + a3 + a2;
    }
    else
    {
        v9 = (a4 + a2) * a4 * a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 12
6 12
7 12
8 13
9 13
10 15
11 15
12 15
13 15
14 15
15 19
16 19
17 19
18 19
19 21
20 21
21 23
22 23
23 23
24 23
25 23
26 27
27 27
28 27
29 29
30 29
31 29
32 29
33 29
34 29
35 29
36 29
37 30
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (a5 < a1)
        {
            v6 += a3 * a2 * a4;
        }
        else
        {
            v6 += a2 + a1;
        }
    }
    v8 = (a1 + a4) - a4;
    v9 = 0;
    for (v10 = 0; v10++; v10<a1)
    {
        v9 += (a1 - a1) - a2;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 22
4 22
5 22
6 23
<<<sep_out_sample>>>
lea (%r8,%rdi,2),%r9d
cmp %esi,%edi
jl f <func1+0xf>
mov %edx,%r9d
imul %esi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
sub %ecx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a1 < a2)
    {
        v6 = a1 + (a1 + a5);
    }
    else
    {
        v6 = a3 * a2;
    }
    v7 = a1 - a1 - (a4 - a2);
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 4
3 4
4 10
5 10
6 13
7 13
8 13
9 13
10 13
11 12
12 13
13 14
<<<sep_out_sample>>>
test %esi,%esi
jle 11 <func1+0x11>
mov %ecx,%r11d
imul %edi,%r11d
imul %edx,%r11d
jmp 1e <func1+0x1e>
mov %esi,%r11d
imul %edx,%r11d
sub %edi,%r11d
add %esi,%r11d
mov %ecx,%r10d
sub %edx,%r10d
imul %edx,%r10d
cmp %ecx,%esi
jge 35 <func1+0x35>
lea (%rdx,%rsi,1),%eax
lea (%rax,%rcx,2),%r9d
jmp 3c <func1+0x3c>
mov %ecx,%r9d
imul %ecx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
sub %esi,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (v6 < a2)
    {
        v6 = a4 * a1 * a3;
    }
    else
    {
        v6 = a2 * a3 - a1 + a2;
    }
    v7 = a3 * (a4 - a3);
    if (a2 < a4)
    {
        v8 = a3 + a2 + a4 + a4;
    }
    else
    {
        v8 = a4 * a4;
    }
    v9 = a5 - a2;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 10
11 12
12 12
13 12
14 13
15 13
16 15
17 15
18 15
19 19
20 19
21 22
22 22
23 22
24 22
25 22
26 22
27 22
28 21
29 22
30 23
<<<sep_out_sample>>>
push %rbx
mov %esi,%r11d
neg %r11d
sub %esi,%r11d
mov %ecx,%r9d
sub %edi,%r9d
cmp %edx,%esi
jle 23 <func1+0x23>
mov %edx,%eax
imul %r8d,%eax
imul %edi,%eax
mov %r8d,%r9d
sub %eax,%r9d
mov %r8d,%r10d
imul %ecx,%r10d
imul %esi,%r10d
mov %edx,%eax
neg %eax
cmp %edi,%r8d
jle 45 <func1+0x45>
lea (%r8,%rdx,1),%ebx
mov $0x1,%eax
sub %ebx,%eax
imul %esi,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r11d,%ecx
add %ecx,%r9d
add %r10d,%r9d
add %r9d,%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = ((a1 - a1) - a2) - a2;
    if (a3 < a2)
    {
        v7 = a5 - a3 * a5 * a1;
    }
    else
    {
        v7 = a4 - a1;
    }
    v8 = a5 * a4 * a2;
    if (a1 < a5)
    {
        v9 = a2 - (a2 * (a5 + a3));
    }
    else
    {
        v9 = a1 - a1 - a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 4
3 4
4 4
5 11
6 11
7 5
8 5
9 7
10 7
11 7
12 7
13 7
14 13
15 13
16 13
17 20
18 20
19 14
20 14
21 16
22 16
23 16
24 16
25 22
26 22
27 22
28 22
29 22
30 22
31 22
32 22
33 23
34 23
<<<sep_out_sample>>>
lea 0x2(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12, v13 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a5 + a4 * a1;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += a5 + (a4 * a5);
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a2)
    {
        v10 += a3 + a3;
    }
    v12 = 0;
    for (v13 = 0; v13++; v13<a4)
    {
        v12 += a2 + a2 + a4;
    }
    return v12+v13+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 24
2 24
3 24
4 24
5 25
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %r8d,%esi
add %ecx,%esi
imul %r8d,%ecx
lea 0x1(%rsi,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a5 * a4;
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += a4 + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 4
6 10
7 11
<<<sep_out_sample>>>
cmp %ecx,%r8d
jge 1c <func1+0x1c>
mov %edx,%r10d
imul %r8d,%r10d
mov %esi,%eax
imul %esi,%eax
mov %edx,%r9d
sub %eax,%r9d
add %ecx,%r9d
jmp 37 <func1+0x37>
mov %esi,%eax
imul %esi,%eax
mov %edi,%r10d
sub %eax,%r10d
imul %esi,%r10d
mov %esi,%r9d
sub %r8d,%r9d
add %edi,%r9d
add %edx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
sub %r8d,%esi
imul %esi,%ecx
add %ecx,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a5 < a4)
    {
        v6 = a3 * a5;
    }
    else
    {
        v6 = (a1 - a2 * a2) * a2;
    }
    if (a5 < a4)
    {
        v7 = a3 - a2 * a2 + a4;
    }
    else
    {
        v7 = ((a2 - a5) + a1) + a3;
    }
    v8 = a4 * (a2 - a5) + a3;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 14
6 14
7 14
8 14
9 14
10 14
11 10
12 10
13 10
14 10
15 10
16 18
17 18
18 18
19 18
20 21
21 21
22 21
23 21
24 21
25 21
26 20
27 20
28 20
29 21
30 22
<<<sep_out_sample>>>
lea (%rcx,%rdx,1),%eax
mov %esi,%r9d
sub %eax,%r9d
add %edi,%r9d
cmp %r9d,%edx
jle 17 <func1+0x17>
lea (%r8,%r8,1),%r10d
jmp 25 <func1+0x25>
mov %edi,%r10d
imul %esi,%r10d
mov %edi,%eax
sub %ecx,%eax
add %eax,%r10d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
lea (%r9,%r10,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a1 - (a4 + a3 - a2);
    if (v6 < a3)
    {
        v7 = a5 + a5;
    }
    else
    {
        v7 = a1 * a2 + (a1 - a4);
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 5
6 5
7 7
8 7
9 11
10 11
11 11
12 11
13 11
14 13
15 13
16 13
17 13
18 13
19 13
20 14
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%eax
lea (%rdx,%r8,1),%ecx
imul %ecx,%r8d
add %r8d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (a1 < a4)
        {
            v6 += a1 * (a1 + a1);
        }
        else
        {
            v6 += a3 - a4;
        }
    }
    if (a5 < a5)
    {
        v8 = a2 * a5;
    }
    else
    {
        v8 = a3 + (a3 + a5) * a5;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a1)
    {
        if (v8 < a4)
        {
            v9 += (a4 - a4) * a5;
        }
        else
        {
            v9 += (a1 + a5) + a4;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 36
2 36
3 36
4 36
5 22
6 22
7 22
8 36
9 37
<<<sep_out_sample>>>
lea 0x1(%rdi),%eax
imul %esi,%eax
add %edi,%edx
add %esi,%edx
add %r8d,%edx
add %ecx,%edx
mov %eax,%r9d
sub %edi,%r9d
lea (%rdx,%r9,1),%edi
sub %esi,%eax
mov %eax,%edx
lea (%rdi,%rcx,2),%eax
sub %edx,%eax
imul %r8d,%ecx
add %ecx,%esi
add %esi,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a1 * a2 + a2 - a1;
    v7 = a4 - (a2 * a1 - a4);
    v8 = (a5 * a4 + a2) + a5;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 7
4 7
5 7
6 7
7 4
8 4
9 7
10 5
11 5
12 5
13 7
14 6
15 6
16 6
17 7
18 8
<<<sep_out_sample>>>
test %edx,%edx
jle 11 <func1+0x11>
lea 0x1(%rsi),%r9d
imul %edi,%r9d
add %ecx,%r9d
jmp 19 <func1+0x19>
lea (%rsi,%rsi,1),%r9d
imul %edx,%r9d
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
lea 0x1(%r9,%rax,1),%edi
sub %edx,%r8d
add %r8d,%ecx
sub %esi,%ecx
lea (%rdi,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    if (v6 < a3)
    {
        v6 = a1 + a1 * a2 + a4;
    }
    else
    {
        v6 = a3 * a2 + a2 * a3;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        if (v7 < a3)
        {
            v7 += a1 * a2;
        }
        else
        {
            v7 += a5 + a2 * a3;
        }
    }
    v9 = a5 - a3 + a4 - a2;
    v10 = 0;
    for (v11 = 0; v11++; v11<a2)
    {
        v10 += (a5 + a1) * a4;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 30
10 30
11 30
12 30
13 30
14 24
15 24
16 24
17 30
18 31
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (v7 < a2)
        {
            v6 += (a2 + a1) * a1;
        }
        else
        {
            v6 += a2 - a1 * a4;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += a1 + a3 + a1;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a2)
    {
        v10 += a1 - a4;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 26
2 26
3 26
4 26
5 27
<<<sep_out_sample>>>
mov %esi,%r10d
sub %edi,%r10d
sub %r8d,%r10d
imul %esi,%r10d
mov $0x1,%r9d
sub %r8d,%r9d
imul %edx,%r9d
add %esi,%r9d
lea (%rsi,%rdx,1),%eax
cmp %r9d,%r8d
jle 2d <func1+0x2d>
lea (%rdx,%rcx,1),%eax
imul %edx,%eax
sub %esi,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r10d,%ecx
add %ecx,%r9d
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = (a2 - a1 - a5) * a2;
    v7 = a2 + (a3 - (a3 * a5));
    if (v7 < a5)
    {
        v8 = ((a3 + a4) * a3) - a2;
    }
    else
    {
        v8 = (a2 + (a5 - a5)) + a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 5
6 5
7 5
8 5
9 12
10 6
11 6
12 8
13 8
14 8
15 14
16 14
17 14
18 14
19 14
20 14
21 14
22 15
<<<sep_out_sample>>>
lea (%rsi,%rcx,1),%r9d
mov %edx,%eax
sub %esi,%eax
test %esi,%esi
jle 11 <func1+0x11>
lea (%rcx,%rdi,2),%eax
sub %esi,%eax
add %edi,%edx
add %edx,%esi
add %r8d,%esi
add %esi,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a2 + a4;
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a2 * (a1 + a5);
    }
    if (v9 < a2)
    {
        v9 = (a1 + a1) + a4 - a2;
    }
    else
    {
        v9 = a3 - a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 16
3 16
4 10
5 10
6 12
7 12
8 18
9 18
10 18
11 18
12 18
13 18
14 19
<<<sep_out_sample>>>
cmp %esi,%edx
jge c <func1+0xc>
mov %ecx,%r9d
sub %r8d,%r9d
jmp 16 <func1+0x16>
mov %ecx,%r9d
imul %esi,%r9d
neg %r9d
mov %ecx,%eax
imul %edi,%eax
imul %esi,%eax
add %ecx,%eax
mov %ecx,%r10d
imul %esi,%r10d
cmp $0x1,%edi
cmovg %edx,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a3 < a2)
    {
        v6 = (a4 - a4 + a4) - a5;
    }
    else
    {
        v6 = (a3 - (a4 * a2)) - a3;
    }
    v7 = a4 + a4 * a1 * a2;
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        if (v8 < a4)
        {
            v8 += a5 * a2 + a4;
        }
        else
        {
            v8 += (a4 - a4) + a3;
        }
    }
    if (v9 < a1)
    {
        v10 = (a5 + a3) - a5;
    }
    else
    {
        v10 = a4 * a2;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 12
10 12
11 12
12 12
13 31
14 31
15 31
16 31
17 33
18 33
19 33
20 33
21 33
22 33
23 33
24 34
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a1 * a5 - a1;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        if (a3 < a1)
        {
            v8 += a4 + a2 + a5;
        }
        else
        {
            v8 += a4 * (a4 + a1);
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 21
5 22
<<<sep_out_sample>>>
cmp %esi,%ecx
jge 14 <func1+0x14>
mov %edx,%r9d
sub %r8d,%r9d
mov %edx,%eax
imul %edi,%eax
sub %eax,%r9d
jmp 1d <func1+0x1d>
mov %esi,%r9d
sub %edi,%r9d
add %ecx,%r9d
mov %ecx,%eax
imul %esi,%eax
add %edx,%eax
sub %esi,%eax
lea (%rcx,%rdx,1),%r10d
cmp %edi,%r9d
jge 3d <func1+0x3d>
mov %edi,%r10d
sub %ecx,%r10d
sub $0x1,%r10d
imul %ecx,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%r9d
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a1 + a1 * a5;
    }
    if (a4 < a2)
    {
        v8 = a3 - a5 - a3 * a1;
    }
    else
    {
        v8 = a4 + (a2 - a1);
    }
    v9 = ((a4 * a2) + a3) - a2;
    if (v8 < a1)
    {
        v10 = (a4 * (a1 - a4)) - a4;
    }
    else
    {
        v10 = a4 + a3;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 11
8 11
9 15
10 15
11 15
12 17
13 17
14 17
15 17
16 24
17 18
18 18
19 20
20 20
21 20
22 20
23 26
24 26
25 26
26 26
27 26
28 26
29 26
30 27
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
add %esi,%ecx
sub %edi,%r8d
lea 0x1(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a5 - a1;
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        if (a1 < a1)
        {
            v7 += a3 - a3 * a2;
        }
        else
        {
            v7 += a3 - a4 - a2;
        }
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        v9 += a2 - a4 - a1;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 22
4 22
5 4
6 22
7 23
<<<sep_out_sample>>>
mov %esi,%r9d
imul %edi,%r9d
lea (%rsi,%rdi,1),%eax
lea (%rsi,%rdi,2),%r11d
cmp %r9d,%esi
cmovg %eax,%r11d
lea (%rdx,%rdi,1),%r10d
lea (%rdx,%rcx,1),%eax
cmp %r9d,%edi
cmovg %eax,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%eax
add %eax,%r9d
lea (%r9,%r11,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a2 + (a1 + a5);
    }
    v8 = a2 * a1;
    if (v8 < a2)
    {
        v9 = a2 + a1;
    }
    else
    {
        v9 = a2 + a1 + a1;
    }
    if (v8 < a1)
    {
        v10 = a1 + (a4 - a1 + a3);
    }
    else
    {
        v10 = a3 + a1;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 12
4 12
5 12
6 12
7 24
8 20
9 20
10 20
11 26
12 26
13 26
14 26
15 26
16 26
17 26
18 27
<<<sep_out_sample>>>
cmp %edx,%r8d
jge a <func1+0xa>
lea (%rsi,%rsi,1),%eax
jmp f <func1+0xf>
mov %ecx,%eax
imul %ecx,%eax
add %edx,%edi
add %edi,%esi
add %r8d,%esi
add %ecx,%esi
add %eax,%esi
sub %ecx,%edx
imul %edx,%r8d
lea 0x1(%rsi,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a5 < a3)
    {
        v6 = a2 + a2;
    }
    else
    {
        v6 = a2 - a2 + (a4 * a4);
    }
    v7 = (a5 * a3) - (a4 * a5);
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += a1 + a4 * a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 10
6 10
7 18
8 18
9 18
10 18
11 18
12 12
13 12
14 18
15 19
<<<sep_out_sample>>>
lea (%r8,%rdx,1),%r9d
test %esi,%esi
jg 16 <func1+0x16>
mov %ecx,%r9d
sub %esi,%r9d
mov %esi,%eax
imul %esi,%eax
sub %eax,%r9d
cmp %edi,%r9d
jge 2b <func1+0x2b>
mov %ecx,%r10d
imul %edx,%r10d
add %r8d,%r10d
imul %esi,%r10d
jmp 33 <func1+0x33>
lea (%rdx,%rcx,1),%r10d
imul %esi,%r10d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
lea (%r9,%r10,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (v6 < a2)
    {
        v6 = a5 + a3;
    }
    else
    {
        v6 = a4 - a2 - a2 * a2;
    }
    if (v6 < a1)
    {
        v7 = (a4 * a3 + a5) * a2;
    }
    else
    {
        v7 = a3 * a2 + a4 * a2;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 4
3 4
4 10
5 10
6 10
7 10
8 10
9 12
10 12
11 14
12 14
13 14
14 14
15 14
16 18
17 18
18 20
19 20
20 20
21 20
22 20
23 20
24 21
<<<sep_out_sample>>>
lea (%rsi,%rcx,1),%r9d
cmp %esi,%r8d
jl 12 <func1+0x12>
lea (%rdx,%rcx,2),%eax
mov %edi,%r9d
sub %eax,%r9d
add %edx,%edi
add %esi,%edi
add %edi,%r8d
add %ecx,%r8d
add %r9d,%r8d
mov %edx,%eax
sub %esi,%eax
imul %esi,%esi
sub %esi,%eax
add %r8d,%eax
imul %ecx,%edx
sub %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a5 < a2)
    {
        v6 = a2 + a4;
    }
    else
    {
        v6 = a1 - ((a3 + a4) + a4);
    }
    v7 = (a3 - a2) - a2 * a2;
    v8 = a3 * ((a3 - a3) - a4);
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 6
2 4
3 4
4 10
5 10
6 10
7 14
8 14
9 14
10 14
11 14
12 12
13 12
14 12
15 12
16 14
17 13
18 14
19 15
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
add %ecx,%esi
imul %r8d,%edi
add %edi,%ecx
sub %ecx,%edx
lea 0x1(%rsi,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a3 - ((a5 * a1) + a4);
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += a2 - a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 4
6 4
7 4
8 10
9 11
<<<sep_out_sample>>>
lea 0x1(%rsi,%rdi,2),%eax
add %eax,%edx
add %edx,%esi
lea (%r8,%r8,2),%eax
lea 0x1(%rsi,%rax,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = a5 + a5 - a4;
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += (a1 + a3) * a1;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        v9 += a5 - a4 + a1;
    }
    v11 = a2 + a2 - a2 + a1;
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 16
4 16
5 16
6 17
<<<sep_out_sample>>>
mov %esi,%eax
imul %ecx,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += (a4 * a3) + a3;
    }
    if (a2 < a2)
    {
        v8 = (a4 - a1 * a1) + a1;
    }
    else
    {
        v8 = a5 + a2 * a4 - a5;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a1)
    {
        v9 += a4 + a2 + a5;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 15
2 15
3 22
4 22
5 22
6 22
7 22
8 23
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
sub %edi,%edx
add %eax,%edx
lea (%r8,%rcx,1),%eax
imul %r8d,%r8d
sub %r8d,%eax
add %edx,%eax
add %ecx,%edi
imul %esi,%ecx
add %edi,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = ((a5 - a5) - a1) + a3;
    if (a1 < a1)
    {
        v7 = a5 * ((a3 + a3) - a1);
    }
    else
    {
        v7 = a5 + a4 - a5 * a5;
    }
    v8 = (a1 + a4) + a4 * a2;
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        v9 += (a2 - a1) - a2;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 19
2 19
3 19
4 19
5 4
6 19
7 11
8 11
9 11
10 19
11 13
12 13
13 13
14 19
15 20
<<<sep_out_sample>>>
mov %edi,%eax
sub %esi,%eax
cmp %ecx,%edi
jge d <func1+0xd>
lea (%rdx,%rcx,2),%eax
add %edx,%eax
add %edx,%edi
add %edi,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (a1 < a5)
        {
            v6 += a5 + a5 - a4;
        }
        else
        {
            v6 += a3 * a3 * a1;
        }
    }
    if (a1 < a4)
    {
        v8 = a4 + a4 + a3 + a3;
    }
    else
    {
        v8 = a4 + ((a1 - a4) - a2);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 22
2 22
3 16
4 16
5 18
6 18
7 24
8 24
9 24
10 24
11 24
12 25
<<<sep_out_sample>>>
test %edi,%edi
jle 13 <func1+0x13>
mov %r8d,%r9d
imul %edx,%r9d
sub %ecx,%r9d
add %r8d,%r9d
jmp 1e <func1+0x1e>
mov %r8d,%eax
imul %r8d,%eax
lea (%rax,%rcx,2),%r9d
test %edx,%edx
jle 2b <func1+0x2b>
mov %esi,%r10d
imul %edi,%r10d
jmp 38 <func1+0x38>
mov %edx,%r10d
sub %ecx,%r10d
sub %edi,%r10d
imul %edx,%r10d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %r9d,%eax
add %r10d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (a5 < a3)
        {
            v6 += a3 + a1 - a4;
        }
        else
        {
            v6 += a1 * a3;
        }
    }
    if (v6 < a1)
    {
        v8 = (a5 * a3) - a4 + a5;
    }
    else
    {
        v8 = a4 + (a5 * a5) + a4;
    }
    if (v9 < a3)
    {
        v9 = a2 * a1;
    }
    else
    {
        v9 = a3 * ((a3 - a4) - a1);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 18
7 18
8 22
9 22
10 22
11 24
12 24
13 26
14 26
15 26
16 30
17 30
18 30
19 30
20 32
21 32
22 32
23 32
24 32
25 32
26 33
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea (%r8,%rcx,1),%esi
lea 0x1(%rsi,%rcx,2),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = (a4 - a5 + a5) + a4;
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        if (a4 < a2)
        {
            v7 += a5 - a5;
        }
        else
        {
            v7 += a3 + a1 + a3;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 17
6 18
<<<sep_out_sample>>>
mov %esi,%eax
sub %edx,%eax
lea (%rax,%rdi,2),%r10d
test %r8d,%r8d
jle 1a <func1+0x1a>
lea 0x1(%rdx),%r9d
imul %r8d,%r9d
add %ecx,%r9d
jmp 27 <func1+0x27>
mov $0x2,%r9d
sub %edi,%r9d
imul %ecx,%r9d
add %edx,%edi
add %esi,%edi
add %r8d,%edi
add %ecx,%edi
add %r10d,%edi
add %r9d,%edi
lea (%rcx,%rdx,1),%r9d
add %r9d,%edi
add %r8d,%edx
add %edx,%esi
sub %ecx,%esi
lea (%rdi,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a1 < a1)
    {
        v6 = a5 * (a5 + a5) - a4;
    }
    else
    {
        v6 = a2 - a3 + a1 + a1;
    }
    if (v7 < a5)
    {
        v7 = a5 + a3 * a5 + a4;
    }
    else
    {
        v7 = a4 - a1 * a4 + a4;
    }
    v8 = a4 + a3;
    v9 = a5 + a3 + a2 - a4;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 12
5 12
6 14
7 14
8 14
9 14
10 18
11 18
12 18
13 22
14 22
15 22
16 22
17 22
18 22
19 20
20 22
21 21
22 21
23 21
24 22
25 23
<<<sep_out_sample>>>
mov %edi,%eax
sub %ecx,%eax
imul %edi,%eax
add %edi,%eax
add %edx,%eax
add %esi,%eax
add %r8d,%eax
lea 0x1(%rcx,%rax,1),%eax
mov %esi,%ecx
imul %edx,%ecx
imul %ecx,%edi
imul %edi,%esi
add %eax,%esi
add %r8d,%r8d
sub %edx,%r8d
lea (%rsi,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += (a1 - a5) * a5;
    }
    v8 = ((a2 * a3) * a1) * a2;
    v9 = a5 + a5 - a3;
    v10 = a1 * (a1 - a4);
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 12
5 12
6 12
7 12
8 12
9 9
10 9
11 9
12 9
13 12
14 10
15 10
16 12
17 13
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %eax,%ecx
add %esi,%r8d
add %r8d,%edi
imul %edi,%esi
lea 0x1(%rcx,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a4 < a4)
    {
        v6 = a2 + a2;
    }
    else
    {
        v6 = (a1 + (a2 + a5)) * a2;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += (a5 + a2) + a3;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a1)
    {
        v9 += a2 * a1;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 22
4 22
5 10
6 10
7 10
8 22
9 23
<<<sep_out_sample>>>
cmp %edx,%r8d
jge f <func1+0xf>
lea (%rdx,%r8,2),%r9d
imul %ecx,%r9d
jmp 1a <func1+0x1a>
lea (%r8,%rcx,1),%r9d
sub %edx,%r9d
imul %edx,%r9d
lea (%r8,%rdx,1),%eax
mov %edx,%r10d
imul %r8d,%r10d
cmp %edi,%r9d
cmovl %r10d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a5 < a3)
    {
        v6 = ((a5 + a5) + a3) * a4;
    }
    else
    {
        v6 = ((a5 + a4) - a3) * a3;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        if (v6 < a3)
        {
            v7 += (a1 + a5) + a2;
        }
        else
        {
            v7 += a4 * a2 + a5;
        }
    }
    if (v6 < a1)
    {
        v9 = a3 * a5;
    }
    else
    {
        v9 = (a2 + a3 - a2) + a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 30
10 26
11 26
12 26
13 26
14 32
15 32
16 32
17 32
18 32
19 32
20 33
<<<sep_out_sample>>>
cmp %edx,%ecx
jle 10 <func1+0x10>
mov %ecx,%eax
sub %edx,%eax
imul %edx,%eax
imul %esi,%eax
jmp 19 <func1+0x19>
mov %r8d,%eax
imul %r8d,%eax
add %edi,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += (a4 * a5) - a5;
    }
    if (a3 < a4)
    {
        v8 = ((a4 - a3) * a3) * a2;
    }
    else
    {
        v8 = a1 + a5 * a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 11
8 15
9 15
10 15
11 17
12 17
13 17
14 17
15 17
16 18
<<<sep_out_sample>>>
lea (%rcx,%r8,1),%eax
mov %esi,%r9d
imul %eax,%r9d
add %edi,%r9d
add %r9d,%edx
add %esi,%edx
add %edx,%r8d
lea 0x1(%rcx,%r8,1),%edx
imul %edi,%esi
add $0x1,%esi
imul %esi,%ecx
add %edx,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += (a3 + a4) * a1;
    }
    v8 = (a2 * a1) * a4 + a4;
    v9 = a4 + a5;
    v10 = (a5 + a4) * a2;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 11
3 11
4 12
5 12
6 12
7 12
8 12
9 9
10 9
11 9
12 12
13 12
14 13
<<<sep_out_sample>>>
mov %r8d,%eax
imul %edx,%eax
imul %ecx,%eax
sub %edx,%eax
cmp %edi,%r8d
jle 20 <func1+0x20>
mov %esi,%r9d
imul %edx,%r9d
add %edi,%r9d
imul %r8d,%r9d
jmp 2e <func1+0x2e>
mov %edx,%r9d
sub %ecx,%r9d
imul %edi,%r9d
imul %esi,%r9d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = (a5 * a3) * a4 - a3;
    if (a1 < a5)
    {
        v7 = a5 * (a1 + a2 * a3);
    }
    else
    {
        v7 = ((a3 - a4) * a1) * a2;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 5
6 5
7 7
8 7
9 7
10 7
11 7
12 11
13 11
14 11
15 11
16 13
17 13
18 13
19 13
20 13
21 13
22 14
<<<sep_out_sample>>>
cmp %edx,%edi
jle 17 <func1+0x17>
mov %r8d,%eax
imul %ecx,%eax
mov %edx,%r9d
sub %eax,%r9d
mov %r9d,%eax
add %edx,%eax
jmp 1f <func1+0x1f>
mov %r8d,%eax
sub %edx,%eax
lea (%rax,%rdi,2),%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (a4 < a4)
        {
            v6 += a4 * a2;
        }
        else
        {
            v6 += (a1 - a3) + a5;
        }
    }
    if (a3 < a1)
    {
        v8 = (a3 - a5 * a4) + a3;
    }
    else
    {
        v8 = a1 + a1 - (a3 - a5);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 18
7 18
8 18
9 18
10 22
11 22
12 22
13 24
14 24
15 24
16 24
17 24
18 25
<<<sep_out_sample>>>
lea (%rdi,%r8,1),%eax
cmp %edx,%ecx
jge e <func1+0xe>
lea (%r8,%rsi,2),%eax
sub %ecx,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += (a2 - a1) + a2;
    }
    if (a4 < a3)
    {
        v8 = ((a2 + a5) + a2) - a4;
    }
    else
    {
        v8 = a1 + a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 15
2 9
3 9
4 11
5 11
6 17
7 17
8 17
9 17
10 17
11 18
<<<sep_out_sample>>>
lea (%rcx,%rdx,2),%r9d
cmp %edx,%edi
jl 12 <func1+0x12>
mov %esi,%r9d
imul %ecx,%r9d
add %r8d,%r9d
test %r8d,%r8d
jle 20 <func1+0x20>
mov %edi,%r10d
imul %edi,%r10d
jmp 27 <func1+0x27>
mov %esi,%r10d
imul %esi,%r10d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %r9d,%eax
add %r10d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a4 + a5;
    }
    if (a1 < a3)
    {
        v8 = a3 + (a4 + a3);
    }
    else
    {
        v8 = a5 + (a2 * a4);
    }
    if (v6 < a5)
    {
        v9 = a1 * a1;
    }
    else
    {
        v9 = a2 * a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 9
3 9
4 15
5 15
6 15
7 17
8 17
9 19
10 19
11 19
12 23
13 23
14 25
15 25
16 25
17 25
18 25
19 25
20 26
<<<sep_out_sample>>>
mov %edx,%r9d
sub %edi,%r9d
imul %edi,%r9d
sub %esi,%r9d
mov %ecx,%eax
sub %esi,%eax
test %edx,%edx
jle 20 <func1+0x20>
mov %r8d,%eax
imul %r8d,%eax
sub %esi,%eax
add %edx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = (a3 - a1) * a1 - a2;
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a4 - a3;
    }
    if (v9 < a3)
    {
        v9 = a5 * a5 - a2 + a3;
    }
    else
    {
        v9 = a4 - a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 16
6 16
7 10
8 10
9 12
10 12
11 12
12 12
13 18
14 18
15 18
16 18
17 18
18 18
19 19
<<<sep_out_sample>>>
mov %edx,%r10d
imul %ecx,%r10d
cmp %edi,%r8d
jge 1d <func1+0x1d>
mov %esi,%r9d
imul %esi,%r9d
add $0x1,%r9d
imul %edx,%r9d
jmp 2a <func1+0x2a>
mov %r8d,%r9d
not %r9d
imul %edx,%r9d
add %esi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
imul %edx,%r8d
imul %r8d,%edx
imul %ecx,%edx
add %edx,%eax
imul %edi,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a3 * a4;
    if (a5 < a1)
    {
        v7 = a2 * a2 * a3 + a3;
    }
    else
    {
        v7 = a2 - (a5 * a3 + a3);
    }
    v8 = ((a5 * a3) * a3) * a4;
    if (a2 < a2)
    {
        v9 = a2 * ((a2 - a4) * a5);
    }
    else
    {
        v9 = a4 * a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 5
4 5
5 7
6 7
7 7
8 7
9 7
10 11
11 11
12 11
13 11
14 22
15 22
16 22
17 22
18 22
19 22
20 13
21 13
22 13
23 22
24 20
25 22
26 23
<<<sep_out_sample>>>
mov %edx,%r9d
sub %esi,%r9d
cmp %edi,%edx
mov $0x0,%eax
cmovge %eax,%r9d
cmp %r8d,%ecx
jge 28 <func1+0x28>
mov %ecx,%r10d
imul %esi,%r10d
mov %edi,%eax
imul %edx,%eax
imul %r10d,%eax
jmp 2d <func1+0x2d>
mov %edx,%eax
imul %edx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a3 < a1)
    {
        v6 = a3 - a2;
    }
    else
    {
        v6 = (a4 * (a2 - a2)) * a5;
    }
    if (a4 < a5)
    {
        v7 = a4 * a2 * (a1 * a3);
    }
    else
    {
        v7 = a3 * a3;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        if (a2 < a5)
        {
            v8 += a2 + a4;
        }
        else
        {
            v8 += (a1 - a3) - a1;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 6
6 12
7 12
8 14
9 14
10 14
11 14
12 14
13 14
14 18
15 18
16 32
17 32
18 32
19 32
20 32
21 32
22 33
<<<sep_out_sample>>>
mov %edi,%eax
imul %edx,%eax
sub %ecx,%eax
imul %edx,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (a4 < a3)
        {
            v6 += a4 * a2;
        }
        else
        {
            v6 += a1 * a4;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += a4 - a5;
    }
    v10 = a3 * ((a1 * a3) - a4);
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 21
5 22
6 22
7 22
8 22
9 22
10 23
<<<sep_out_sample>>>
mov %r8d,%r10d
sub %esi,%r10d
cmp %r8d,%esi
jle 17 <func1+0x17>
mov %edx,%r9d
imul %edx,%r9d
add %esi,%r9d
jmp 25 <func1+0x25>
mov %edx,%r9d
imul %edi,%r9d
imul %edx,%r9d
sub %r8d,%r9d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (v6 < a2)
        {
            v6 += (a2 * a1) * a4;
        }
        else
        {
            v6 += (a4 + a1) + a4;
        }
    }
    v8 = a5 - a2;
    if (a5 < a2)
    {
        v9 = a2 + a3 * a3;
    }
    else
    {
        v9 = (a3 * a1) * a3 - a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 17
4 17
5 19
6 19
7 19
8 19
9 23
10 23
11 23
12 23
13 25
14 25
15 25
16 25
17 25
18 25
19 26
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a3 * a2 - a5;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += a3 - a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 14
2 14
3 14
4 14
5 15
<<<sep_out_sample>>>
cmp %edx,%esi
jge c <func1+0xc>
mov %r8d,%r9d
sub %edx,%r9d
jmp 19 <func1+0x19>
mov %edi,%r9d
sub %r8d,%r9d
imul %esi,%r9d
add %edi,%r9d
mov %ecx,%eax
sub %edx,%eax
cmp $0x1,%edx
jle 2d <func1+0x2d>
mov %r8d,%eax
imul %edx,%eax
imul %esi,%eax
add %edx,%eax
lea 0x1(%rax,%rdi,1),%eax
add %eax,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    if (a2 < a3)
    {
        v6 = a5 - a3;
    }
    else
    {
        v6 = a1 - a2 * (a5 - a1);
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a4 + (a1 * a4);
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        v9 += (a4 - a4) - a4;
    }
    if (v8 < a3)
    {
        v11 = a5 * a3 * a2 + a3;
    }
    else
    {
        v11 = a2 - a3 + a4 - a2;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 10
10 28
11 28
12 22
13 22
14 24
15 24
16 24
17 24
18 30
19 30
20 30
21 30
22 30
23 30
24 31
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
lea (%rax,%rsi,1),%r9d
add %r8d,%r9d
add %ecx,%r9d
sub %r8d,%eax
sub %esi,%eax
add %r9d,%eax
mov %r8d,%r9d
imul %edx,%r9d
add %r9d,%edi
imul %r8d,%edi
add %edi,%eax
add %ecx,%edx
add %edx,%eax
imul %ecx,%esi
imul %esi,%ecx
imul %ecx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a1 < a1)
    {
        v6 = (a2 - a5 * a2) * a2;
    }
    else
    {
        v6 = ((a1 + a3) - a5) - a2;
    }
    v7 = (a5 * a3 + a1) * a5;
    v8 = a4 + a3;
    v9 = a4 * (a2 * a4) * a5;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 15
3 15
4 15
5 10
6 10
7 15
8 12
9 12
10 12
11 12
12 15
13 13
14 15
15 14
16 14
17 14
18 15
19 16
<<<sep_out_sample>>>
lea (%r8,%rcx,1),%eax
cmp %ecx,%edx
jge 11 <func1+0x11>
mov %edi,%eax
imul %r8d,%eax
lea (%rax,%rcx,2),%eax
cmp %r8d,%ecx
jge 25 <func1+0x25>
mov %edi,%r9d
imul %edi,%r9d
sub %ecx,%r9d
add %esi,%r9d
jmp 2c <func1+0x2c>
mov %esi,%r9d
imul %edi,%r9d
mov %ecx,%r10d
imul %edx,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%eax
lea 0x1(%r9,%rax,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a3 < a4)
    {
        v6 = a4 + (a1 * a5 + a4);
    }
    else
    {
        v6 = a5 + (a1 - a1) + a4;
    }
    if (a4 < a5)
    {
        v7 = (a1 * a1 - a4) + a2;
    }
    else
    {
        v7 = a2 * a1;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += (a4 - a5) - a4;
    }
    v10 = a4 * a3;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 6
7 12
8 12
9 14
10 14
11 14
12 14
13 14
14 18
15 18
16 25
17 25
18 26
19 26
20 26
21 26
22 26
23 26
24 26
25 27
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%eax
mov %edx,%esi
sub %edi,%esi
imul %esi,%edi
add %edi,%r8d
add %r8d,%eax
imul %ecx,%edx
imul %edx,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a5 - a1;
    }
    v8 = ((a3 - a1) * a1) + a5;
    v9 = a4 * (a3 * a4);
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 11
5 9
6 9
7 9
8 9
9 11
10 10
11 10
12 11
13 12
<<<sep_out_sample>>>
cmp %esi,%ecx
jle b <func1+0xb>
mov %esi,%eax
imul %esi,%eax
jmp 17 <func1+0x17>
mov $0x1,%eax
sub %ecx,%eax
imul %esi,%eax
add %ecx,%eax
add %edx,%edi
add %edi,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a1 * a4 + a2;
    }
    if (a2 < a4)
    {
        v8 = a2 * a2;
    }
    else
    {
        v8 = a2 - (a2 * a4) + a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 15
7 15
8 15
9 15
10 17
11 17
12 17
13 17
14 17
15 18
<<<sep_out_sample>>>
cmp %edx,%esi
jge 14 <func1+0x14>
mov %esi,%r9d
imul %r8d,%r9d
add %edx,%r9d
imul %ecx,%r9d
jmp 23 <func1+0x23>
mov %edi,%r9d
sub %esi,%r9d
mov %ecx,%eax
imul %r8d,%eax
add %eax,%r9d
mov %edi,%eax
imul %esi,%eax
mov %edx,%r11d
sub %eax,%r11d
mov %edi,%r10d
sub %edx,%r10d
cmp %ecx,%r9d
jl 40 <func1+0x40>
mov %esi,%r10d
imul %r8d,%r10d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
add %r11d,%eax
add %r10d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a2 < a3)
    {
        v6 = a4 * (a3 + a2 * a5);
    }
    else
    {
        v6 = (a1 - a2) + a4 * a5;
    }
    v7 = a3 - a1 * a2;
    if (v6 < a4)
    {
        v8 = a1 - a2 + (a2 - a3);
    }
    else
    {
        v8 = a2 * a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 10
13 12
14 12
15 12
16 12
17 15
18 15
19 13
20 13
21 19
22 19
23 21
24 21
25 21
26 21
27 21
28 21
29 21
30 22
<<<sep_out_sample>>>
mov %edx,%eax
imul %edx,%eax
lea (%rdi,%rdx,1),%r9d
add %esi,%r9d
add %r8d,%r9d
add %ecx,%r9d
imul %edi,%r8d
imul %esi,%r8d
imul %edi,%r8d
add %r9d,%r8d
sub %esi,%edi
add %ecx,%edi
imul %edi,%esi
add %r8d,%esi
sub %ecx,%edx
add %esi,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a4 < a4)
    {
        v6 = (a4 - a4) - a3 * a2;
    }
    else
    {
        v6 = (a1 * a5 * a2) * a1;
    }
    v7 = a2 * (a4 - (a2 - a1));
    v8 = a5 - a5 - a4 + a3;
    v9 = a3 * a3 - a2 + a2;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 14
2 14
3 15
4 15
5 15
6 15
7 10
8 10
9 10
10 15
11 12
12 12
13 12
14 15
15 13
16 15
17 15
18 16
<<<sep_out_sample>>>
mov %ecx,%eax
imul %r8d,%eax
add %edi,%eax
mov %ecx,%r9d
sub %eax,%r9d
lea (%rdx,%rcx,1),%eax
test %ecx,%ecx
jle 1b <func1+0x1b>
mov %edx,%eax
neg %eax
sub %edx,%eax
lea 0x1(%rdx,%r8,1),%r10d
imul %ecx,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %r9d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a4 * a3;
    }
    v8 = a4 - (a1 + a4 * a5);
    if (v6 < a4)
    {
        v9 = ((a5 - a5) - a3) - a3;
    }
    else
    {
        v9 = a3 + a4;
    }
    v10 = (a5 + a3) * a4 + a4;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 9
4 9
5 9
6 16
7 10
8 10
9 12
10 12
11 12
12 18
13 18
14 19
15 19
16 19
17 19
18 19
19 19
20 19
21 20
<<<sep_out_sample>>>
mov $0x1,%r10d
sub %edi,%r10d
imul %r8d,%r10d
add %esi,%r10d
cmp %ecx,%edx
jge 24 <func1+0x24>
mov %ecx,%eax
imul %edx,%eax
mov %edi,%r9d
sub %eax,%r9d
add %edx,%r9d
jmp 2e <func1+0x2e>
mov %r8d,%r9d
imul %r8d,%r9d
add %edx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
sub %edi,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a5 - (a5 * a1) + a2;
    if (a3 < a4)
    {
        v7 = a1 - a4 * a3 + a3;
    }
    else
    {
        v7 = a5 * a5 + a3;
    }
    v8 = a4 - a1;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 5
6 5
7 7
8 7
9 7
10 7
11 7
12 7
13 11
14 11
15 11
16 14
17 14
18 14
19 14
20 14
21 14
22 13
23 14
24 15
<<<sep_out_sample>>>
cmp %r8d,%edi
jge 10 <func1+0x10>
mov %esi,%eax
imul %edi,%eax
add %ecx,%eax
sub %edi,%eax
jmp 16 <func1+0x16>
lea -0x1(%rdx),%eax
imul %ecx,%eax
lea (%rdi,%rdx,1),%r9d
cmp %esi,%edi
jl 32 <func1+0x32>
mov %esi,%r9d
imul %ecx,%r9d
imul %ecx,%r9d
mov %esi,%r10d
sub %r9d,%r10d
mov %r10d,%r9d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (a1 < a2)
        {
            v6 += a4 - a3;
        }
        else
        {
            v6 += (a5 * a5) + a1;
        }
    }
    if (a1 < a5)
    {
        v8 = a4 + (a2 * a1) - a1;
    }
    else
    {
        v8 = a3 * a4 - a4;
    }
    if (a1 < a2)
    {
        v9 = a1 + a3;
    }
    else
    {
        v9 = a2 - a2 * a4 * a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 18
7 18
8 22
9 22
10 26
11 24
12 24
13 30
14 30
15 30
16 30
17 30
18 30
19 32
20 32
21 32
22 32
23 32
24 32
25 33
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += (a4 + a1) * a4;
    }
    if (v6 < a4)
    {
        v8 = (a4 - (a1 + a4)) + a1;
    }
    else
    {
        v8 = a5 - a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 18
<<<sep_out_sample>>>
mov %esi,%r10d
imul %edx,%r10d
imul %edi,%r10d
mov %esi,%r9d
sub %edx,%r9d
cmp %r8d,%edi
jg 1e <func1+0x1e>
lea (%r8,%rdx,1),%r9d
imul %edi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a5 < a5)
    {
        v6 = a2 + a4;
    }
    else
    {
        v6 = a2 * a3 * a1;
    }
    if (a5 < a1)
    {
        v7 = a5 + ((a2 - a3) - a5);
    }
    else
    {
        v7 = a1 * a5 + a3 * a1;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 14
5 14
6 12
7 12
8 18
9 18
10 20
11 20
12 20
13 20
14 20
15 20
16 21
<<<sep_out_sample>>>
cmp %edx,%r8d
jge 11 <func1+0x11>
lea (%rdi,%r8,1),%r9d
add %edx,%r9d
add %esi,%r9d
jmp 1f <func1+0x1f>
mov %r8d,%r9d
sub %edi,%r9d
mov %edi,%eax
imul %edx,%eax
add %eax,%r9d
cmp %edi,%r9d
jge 35 <func1+0x35>
mov %edx,%r10d
imul %edx,%r10d
imul %edi,%r10d
imul %esi,%r10d
jmp 43 <func1+0x43>
mov %ecx,%r10d
imul %ecx,%r10d
imul %edi,%r10d
add %esi,%r10d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
lea (%r9,%r10,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a5 < a3)
    {
        v6 = a2 + ((a1 + a5) + a3);
    }
    else
    {
        v6 = a5 - a1 + a1 * a3;
    }
    if (v6 < a1)
    {
        v7 = (a3 * a3 * a1) * a2;
    }
    else
    {
        v7 = (a4 * a4 * a1) + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 10
11 10
12 12
13 12
14 14
15 14
16 14
17 14
18 14
19 18
20 18
21 18
22 18
23 20
24 20
25 20
26 20
27 20
28 20
29 21
<<<sep_out_sample>>>
mov %esi,%r9d
imul %edi,%r9d
imul %edx,%r9d
add %edx,%edi
add %esi,%edi
add %r8d,%edi
add %ecx,%edi
mov %r8d,%eax
imul %edx,%eax
sub %esi,%eax
sub %r8d,%eax
lea (%rdi,%rax,1),%ecx
lea (%r9,%rcx,1),%eax
imul %edx,%edx
lea (%rdx,%rsi,2),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = (a5 * a3) - a2 - a5;
    v7 = a4 - a4;
    v8 = a2 * a1 * a3;
    v9 = (a2 + a3 * a3) + a2;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 8
5 8
6 8
7 8
8 4
9 4
10 4
11 4
12 8
13 8
14 7
15 7
16 8
17 9
<<<sep_out_sample>>>
mov %edx,%eax
imul %edi,%eax
mov %r8d,%r10d
sub %eax,%r10d
imul %r8d,%r10d
cmp %ecx,%edi
jle 1c <func1+0x1c>
mov %edi,%r9d
imul %r8d,%r9d
jmp 2a <func1+0x2a>
mov %r8d,%r9d
imul %edi,%r9d
imul %r8d,%r9d
add %esi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = (a5 - (a3 * a1)) * a5;
    if (a4 < a1)
    {
        v7 = a1 * a5;
    }
    else
    {
        v7 = (a5 * a1 * a5) + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 4
6 5
7 5
8 7
9 7
10 7
11 11
12 11
13 11
14 11
15 13
16 13
17 13
18 13
19 13
20 13
21 14
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
lea (%r8,%rcx,1),%eax
imul %ecx,%edx
imul %esi,%edi
add %edi,%edx
lea 0x1(%rax,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a4 * a3 + (a2 * a1);
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        if (a3 < a1)
        {
            v7 += a2 - a1 - a1;
        }
        else
        {
            v7 += (a3 - a1) * a2;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 4
6 4
7 4
8 17
9 18
<<<sep_out_sample>>>
test %edx,%edx
jle 17 <func1+0x17>
mov %r8d,%eax
imul %edx,%eax
add %ecx,%eax
mov %edi,%r9d
sub %eax,%r9d
mov %r9d,%eax
jmp 23 <func1+0x23>
mov %esi,%eax
imul %ecx,%eax
imul %esi,%eax
imul %r8d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a1 * (a5 * a5);
    }
    if (v6 < a3)
    {
        v8 = a1 - (a5 * a3 + a4);
    }
    else
    {
        v8 = a5 * (a2 * (a2 * a4));
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 11
8 11
9 11
10 15
11 15
12 15
13 15
14 17
15 17
16 17
17 17
18 17
19 18
<<<sep_out_sample>>>
mov %ecx,%r10d
sub %r8d,%r10d
lea (%rdi,%rdi,1),%eax
lea (%rdx,%rcx,1),%r9d
cmp %r8d,%esi
cmovg %eax,%r9d
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (v7 < a2)
        {
            v6 += a4 + a3 * a4;
        }
        else
        {
            v6 += a3 - a2 + a4;
        }
    }
    v8 = a4 - a5;
    if (a5 < a2)
    {
        v9 = a1 + (a5 + a1 - a5);
    }
    else
    {
        v9 = a3 + a4;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a1)
    {
        if (a1 < a2)
        {
            v10 += (a3 * a2) + a3;
        }
        else
        {
            v10 += (a2 + a3) * a4;
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 19
4 19
5 19
6 19
7 37
8 37
9 37
10 37
11 37
12 37
13 38
<<<sep_out_sample>>>
lea 0x1(%rcx),%eax
imul %edi,%eax
imul %edi,%eax
mov %edx,%r9d
sub %r8d,%r9d
cmp %esi,%r8d
jl 23 <func1+0x23>
mov %edx,%r9d
imul %edi,%r9d
imul %r8d,%r9d
imul %edx,%r9d
lea 0x1(%r9,%rdi,1),%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (a1 < a3)
        {
            v6 += (a1 - a1) + a5;
        }
        else
        {
            v6 += (a3 * a5) + a5;
        }
    }
    v8 = ((a1 * a4) + a1) * a1;
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        if (v10 < a4)
        {
            v9 += (a5 - a5) - a5;
        }
        else
        {
            v9 += (a4 * a5) * a5;
        }
    }
    if (a5 < a2)
    {
        v11 = a5 + (a3 - a5) - a5;
    }
    else
    {
        v11 = a3 * a1 * a5 * a3;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 16
4 31
5 31
6 29
7 29
8 35
9 35
10 35
11 35
12 37
13 37
14 37
15 37
16 37
17 37
18 38
<<<sep_out_sample>>>
mov %r8d,%eax
imul %edi,%eax
add %eax,%edi
add %edx,%edi
add %esi,%edi
add %r8d,%edi
lea (%rdx,%rsi,2),%eax
lea (%rdi,%rcx,2),%edx
lea (%rdx,%rax,1),%eax
imul %ecx,%r8d
imul %r8d,%esi
imul %esi,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a4 + a2 + a3 + a2;
    if (a5 < a5)
    {
        v7 = a5 + a2 - (a1 + a4);
    }
    else
    {
        v7 = a5 * a4 * a2 * a4;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        if (a3 < a5)
        {
            v8 += a5 + a2;
        }
        else
        {
            v8 += a3 + a1 - a5;
        }
    }
    v10 = a5 * a1;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 25
2 25
3 26
4 26
5 26
6 26
7 4
8 4
9 26
10 11
11 11
12 11
13 26
14 27
<<<sep_out_sample>>>
mov %esi,%r9d
sub %ecx,%r9d
test %esi,%esi
jle 19 <func1+0x19>
lea (%rcx,%rdx,1),%eax
mov %r8d,%r10d
imul %edi,%r10d
sub %r10d,%eax
jmp 1e <func1+0x1e>
mov %edi,%eax
imul %ecx,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a2 - a4;
    if (v7 < a2)
    {
        v7 = a4 + a3 - a5 * a1;
    }
    else
    {
        v7 = a1 * a4;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 5
4 5
5 7
6 7
7 7
8 7
9 7
10 11
11 11
12 13
13 13
14 13
15 13
16 13
17 13
18 14
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
imul %ecx,%esi
add %esi,%eax
imul %r8d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a4 < a4)
    {
        v6 = a2 - a4;
    }
    else
    {
        v6 = a2 * a4;
    }
    v7 = a5 * a4;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 13
2 13
3 13
4 13
5 10
6 13
7 12
8 13
9 14
<<<sep_out_sample>>>
lea (%rsi,%rdx,2),%eax
lea (%rsi,%r8,2),%edx
lea 0x1(%rdx,%rax,1),%eax
lea 0x2(%rcx,%rax,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (a4 < a2)
        {
            v6 += a1 + (a3 * a1);
        }
        else
        {
            v6 += a1 * a1 * a4;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += a2 - a3;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a1)
    {
        v10 += a4 * (a5 - a5);
    }
    v12 = a5 + (a2 + a3 - a1);
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 27
2 27
3 27
4 27
5 28
<<<sep_out_sample>>>
cmp %ecx,%edx
jge 11 <func1+0x11>
mov %ecx,%eax
imul %edi,%eax
sub %r8d,%eax
imul %edi,%eax
jmp 16 <func1+0x16>
mov %esi,%eax
imul %edx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a3 < a4)
    {
        v6 = ((a4 * a1) - a5) * a1;
    }
    else
    {
        v6 = (a2 - (a1 - a1)) * a3;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += (a4 * a2) - a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 17
11 17
12 17
13 17
14 17
15 18
<<<sep_out_sample>>>
cmp %edi,%edx
jge 15 <func1+0x15>
mov %ecx,%r10d
imul %r8d,%r10d
sub $0x1,%r10d
imul %edi,%r10d
jmp 24 <func1+0x24>
mov %edi,%r10d
imul %r8d,%r10d
mov %esi,%eax
imul %esi,%eax
add %eax,%r10d
cmp %r8d,%ecx
jge 36 <func1+0x36>
mov %edi,%r9d
imul %esi,%r9d
imul %edi,%r9d
jmp 43 <func1+0x43>
mov %esi,%r9d
imul %ecx,%r9d
add %edi,%r9d
add %r8d,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a3 < a1)
    {
        v6 = a4 * a5 * a1 - a1;
    }
    else
    {
        v6 = (a1 * a5) + a2 * a2;
    }
    if (a4 < a5)
    {
        v7 = (a1 * a2) * a1;
    }
    else
    {
        v7 = (a2 * a4 + a1) + a5;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 10
13 12
14 12
15 14
16 14
17 14
18 14
19 18
20 18
21 18
22 18
23 20
24 20
25 20
26 20
27 20
28 20
29 21
<<<sep_out_sample>>>
cmp %esi,%edx
jge 13 <func1+0x13>
mov %edi,%r9d
sub %esi,%r9d
add %r8d,%r9d
imul %r8d,%r9d
jmp 1d <func1+0x1d>
mov %ecx,%r9d
neg %r9d
imul %ecx,%r9d
lea (%r8,%rcx,1),%eax
test %edi,%edi
jg 30 <func1+0x30>
mov %edi,%eax
imul %edx,%eax
imul %edx,%eax
sub %r8d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a3 < a2)
    {
        v6 = (a5 + (a1 - a2)) * a5;
    }
    else
    {
        v6 = a4 * (a5 - a5 - a4);
    }
    if (v7 < a1)
    {
        v7 = a5 + a4;
    }
    else
    {
        v7 = a1 * a3 * a3 - a5;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 14
12 12
13 12
14 18
15 18
16 18
17 18
18 20
19 20
20 20
21 20
22 20
23 20
24 21
<<<sep_out_sample>>>
lea (%rsi,%r8,1),%r11d
lea (%rsi,%rsi,1),%r10d
cmp %edi,%r8d
jge 17 <func1+0x17>
lea (%r8,%r8,1),%r9d
imul %edx,%r9d
jmp 22 <func1+0x22>
lea (%rdx,%r8,1),%r9d
imul %r8d,%r9d
add %esi,%r9d
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a2 + a5;
    v7 = a2 + a2;
    if (a5 < a1)
    {
        v8 = a3 * (a5 + a5);
    }
    else
    {
        v8 = a2 + (a3 + a5) * a5;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        if (v7 < a1)
        {
            v9 += a5 * a5 * a1;
        }
        else
        {
            v9 += a3 - (a5 * a1);
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 5
3 6
4 6
5 8
6 8
7 8
8 12
9 12
10 12
11 26
12 26
13 26
14 26
15 26
16 26
17 26
18 27
<<<sep_out_sample>>>
cmp %esi,%ecx
jge d <func1+0xd>
lea (%rsi,%rcx,1),%eax
imul %r8d,%eax
jmp 17 <func1+0x17>
mov %edi,%eax
imul %esi,%eax
sub %r8d,%eax
sub %edx,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a4 < a2)
    {
        v6 = a2 * a5 + (a4 * a5);
    }
    else
    {
        v6 = ((a1 * a2) - a5) - a3;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += (a3 + a3) + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 10
10 17
11 17
12 17
13 17
14 17
15 18
<<<sep_out_sample>>>
test %r8d,%r8d
jle f <func1+0xf>
mov %edx,%eax
sub %esi,%eax
add %ecx,%eax
sub %esi,%eax
jmp 16 <func1+0x16>
lea (%rdi,%rsi,2),%eax
lea (%rax,%r8,1),%eax
lea 0x1(%rdi,%rdx,1),%edx
add %esi,%edx
add %r8d,%edx
add %edx,%ecx
add %eax,%ecx
mov %esi,%eax
sub %r8d,%eax
sub %r8d,%eax
imul %eax,%esi
lea 0x1(%rcx,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    if (v6 < a5)
    {
        v6 = ((a3 - a2) + a4) - a2;
    }
    else
    {
        v6 = a1 + a2 + a5 + a2;
    }
    v7 = a2 * ((a2 - a5) - a5);
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += a5 - a3;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a5)
    {
        v10 += a3 + a1 + a4;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 23
11 23
12 23
13 23
14 23
15 12
16 12
17 12
18 12
19 23
20 24
<<<sep_out_sample>>>
add %edx,%edi
add %esi,%edi
add %r8d,%edi
add %ecx,%edi
sub $0x1,%edx
imul %edx,%esi
sub %r8d,%esi
lea (%rdi,%rsi,1),%eax
mov %r8d,%edx
imul %r8d,%edx
add %edx,%ecx
sub %ecx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = ((a3 * a2) - a2) - a5;
    v7 = a5 - (a4 + a5 * a5);
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 4
7 4
8 6
9 5
10 5
11 5
12 5
13 6
14 7
<<<sep_out_sample>>>
test %ecx,%ecx
jle 10 <func1+0x10>
mov %edi,%eax
imul %edx,%eax
imul %ecx,%eax
sub %esi,%eax
jmp 19 <func1+0x19>
mov %r8d,%eax
imul %ecx,%eax
imul %eax,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (v6 < a4)
    {
        v6 = a4 * (a1 * a3) - a2;
    }
    else
    {
        v6 = a5 * a4 * a4 * a5;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += (a2 * a5) + a1;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a1)
    {
        v9 += (a2 - a5) - a2;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 22
12 22
13 22
14 22
15 22
16 23
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a4 * a4 - a4;
    }
    v8 = a4 - a4;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 11
<<<sep_out_sample>>>
cmp %esi,%ecx
jge f <func1+0xf>
mov %ecx,%eax
imul %edx,%eax
add %esi,%eax
add %edx,%eax
jmp 17 <func1+0x17>
lea 0x1(%rdi),%eax
imul %ecx,%eax
add %edx,%eax
add %edi,%edx
add %edx,%esi
add %r8d,%esi
add %esi,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a4 < a2)
    {
        v6 = (a2 + (a4 * a3)) + a3;
    }
    else
    {
        v6 = a4 + a4 * a1 + a3;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        if (v7 < a2)
        {
            v7 += a3 + a4;
        }
        else
        {
            v7 += a3 - a2 * a1;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 24
12 24
13 24
14 24
15 24
16 25
<<<sep_out_sample>>>
lea (%rcx,%rcx,1),%r9d
cmp %r8d,%edi
jge 15 <func1+0x15>
mov %edx,%eax
imul %r8d,%eax
add %esi,%eax
sub %ecx,%eax
jmp 1f <func1+0x1f>
mov %edx,%eax
sub %esi,%eax
imul %edx,%eax
sub %r8d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = (a3 - a3) * (a3 - a1);
    v7 = a4 + a4;
    if (a1 < a5)
    {
        v8 = a3 * a5 + a2 - a4;
    }
    else
    {
        v8 = (a3 - a2) * a3 - a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 5
2 6
3 6
4 8
5 8
6 8
7 8
8 8
9 12
10 12
11 12
12 12
13 14
14 14
15 14
16 14
17 14
18 14
19 15
<<<sep_out_sample>>>
mov %r8d,%r11d
imul %edx,%r11d
imul %ecx,%r11d
add %edx,%r11d
lea (%rdi,%rdi,1),%r10d
imul %edi,%r10d
imul %edx,%r10d
cmp %edi,%ecx
jle 2e <func1+0x2e>
mov %edi,%eax
imul %edi,%eax
mov %ecx,%r9d
sub %eax,%r9d
add %edi,%r9d
jmp 3b <func1+0x3b>
mov %ecx,%r9d
sub %r8d,%r9d
imul %esi,%r9d
add %edi,%r9d
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a5 * a3 * a4 + a3;
    v7 = a3 * ((a1 + a1) * a1);
    if (a1 < a4)
    {
        v8 = a4 - a1 * a1 + a1;
    }
    else
    {
        v8 = (a4 - a5) * a2 + a1;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        v9 += a3 - a3 * a2;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 5
6 5
7 5
8 6
9 6
10 8
11 8
12 8
13 8
14 8
15 8
16 12
17 12
18 12
19 12
20 19
21 19
22 19
23 19
24 19
25 19
26 19
27 20
<<<sep_out_sample>>>
cmp %ecx,%edi
jge d <func1+0xd>
mov %ecx,%r9d
imul %r8d,%r9d
jmp 1b <func1+0x1b>
mov %ecx,%eax
imul %ecx,%eax
mov %r8d,%r9d
sub %eax,%r9d
sub %edx,%r9d
cmp $0x1,%esi
jle 2b <func1+0x2b>
lea (%rsi,%rdi,1),%eax
imul %r8d,%eax
sub %esi,%eax
jmp 33 <func1+0x33>
lea (%rsi,%rdx,1),%eax
sub %r8d,%eax
add %ecx,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a1 < a4)
    {
        v6 = a4 * a5;
    }
    else
    {
        v6 = a5 - a4 * a4 - a3;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += (a1 * a5) - a5;
    }
    if (v8 < a2)
    {
        v9 = ((a2 + a1) * a5) - a2;
    }
    else
    {
        v9 = (a2 + a3 - a5) + a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 10
10 10
11 17
12 17
13 19
14 19
15 19
16 19
17 23
18 23
19 23
20 25
21 25
22 25
23 25
24 25
25 25
26 26
<<<sep_out_sample>>>
lea 0x1(%r8),%eax
imul %edx,%eax
sub %ecx,%eax
cmp %ecx,%edx
jle 16 <func1+0x16>
lea (%rsi,%rcx,2),%r9d
sub %r8d,%r9d
jmp 1d <func1+0x1d>
mov %ecx,%r9d
imul %esi,%r9d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (a1 < a1)
        {
            v6 += a1 + a3;
        }
        else
        {
            v6 += a2 + a1;
        }
    }
    v8 = a3 + (a5 * a3) - a4;
    if (a4 < a3)
    {
        v9 = a4 - a5 + a4 + a2;
    }
    else
    {
        v9 = a4 * a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 16
4 17
5 17
6 19
7 19
8 19
9 23
10 23
11 25
12 25
13 25
14 25
15 25
16 25
17 26
<<<sep_out_sample>>>
mov $0x0,%eax
test %edi,%edi
jg 13 <func1+0x13>
lea 0x1(%rdi),%eax
imul %esi,%eax
imul %r8d,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rdi,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = (a1 + a2) - a2;
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a3 + a1 * a1;
    }
    if (v7 < a1)
    {
        v9 = a5 - a5;
    }
    else
    {
        v9 = a5 * (a2 + a1 * a2);
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a3)
    {
        v10 += a2 * a4 + a1;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 12
2 10
3 10
4 16
5 16
6 16
7 23
8 23
9 23
10 23
11 23
12 23
13 24
<<<sep_out_sample>>>
cmp $0x1,%edx
jle 11 <func1+0x11>
mov %r8d,%eax
sub %esi,%eax
add %r8d,%eax
add %edx,%eax
jmp 17 <func1+0x17>
lea (%r8,%rdx,2),%eax
add %ecx,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a2 + a1 + a4;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        if (a2 < a4)
        {
            v8 += a2 + a3 - a1;
        }
        else
        {
            v8 += a2 + a4;
        }
    }
    if (v7 < a3)
    {
        v10 = a5 - a2 + a5 + a3;
    }
    else
    {
        v10 = a4 + ((a3 + a5) + a3);
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 23
4 23
5 23
6 23
7 23
8 27
9 27
10 29
11 29
12 29
13 29
14 29
15 30
<<<sep_out_sample>>>
test %r8d,%r8d
jle d <func1+0xd>
lea (%rsi,%rcx,1),%eax
imul %edi,%eax
jmp 13 <func1+0x13>
mov %esi,%eax
sub %edi,%eax
add %esi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a4 - a3 * a4;
    }
    if (v8 < a5)
    {
        v8 = a2 * a1 + a1 * a4;
    }
    else
    {
        v8 = a2 - (a1 - a2);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 15
7 15
8 15
9 17
10 17
11 17
12 17
13 17
14 18
<<<sep_out_sample>>>
mov %edi,%eax
imul %edx,%eax
imul %r8d,%eax
mov %ecx,%r9d
sub %eax,%r9d
mov $0x0,%eax
test %r8d,%r8d
jg 21 <func1+0x21>
lea 0x1(%rdi),%eax
imul %ecx,%eax
add %edi,%eax
mov %edi,%r10d
imul %esi,%r10d
add %edx,%r10d
sub %r8d,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %r9d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a4 - a2 + a1;
    }
    v8 = a4 - a1 * a3 * a5;
    if (v9 < a5)
    {
        v9 = a1 - a1;
    }
    else
    {
        v9 = a4 + (a4 * a1) + a1;
    }
    v10 = a1 * a2 + a3 - a5;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 9
4 9
5 9
6 12
7 10
8 10
9 16
10 16
11 16
12 18
13 18
14 18
15 18
16 19
17 19
18 19
19 19
20 19
21 19
22 19
23 20
<<<sep_out_sample>>>
mov %ecx,%r9d
imul %esi,%r9d
mov %edx,%r10d
sub %edi,%r10d
add %r9d,%r10d
lea (%r8,%rdi,1),%eax
cmp %ecx,%edx
jge 21 <func1+0x21>
mov %edi,%eax
imul %ecx,%eax
imul %r9d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r10d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a3 - a1 + a4 * a2;
    if (a3 < a4)
    {
        v7 = a1 * a4 * (a4 * a2);
    }
    else
    {
        v7 = a5 + a1;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        if (a5 < a4)
        {
            v8 += a4 * (a1 + a4);
        }
        else
        {
            v8 += (a1 + a4) + a1;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 4
6 11
7 5
8 5
9 7
10 7
11 7
12 25
13 25
14 25
15 25
16 25
17 25
18 26
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %r8d,%edx
add %edx,%ecx
mov %r8d,%eax
sub %esi,%eax
add %eax,%r8d
lea 0x1(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a5 - a2 + a5;
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        if (a2 < a5)
        {
            v7 += a2 - (a5 + a3);
        }
        else
        {
            v7 += a4 * a5 + a3;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 4
6 4
7 4
8 17
9 18
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
add %ecx,%esi
mov %r8d,%eax
imul %r8d,%eax
sub %eax,%edx
add %edx,%r8d
add %esi,%r8d
mov %edi,%eax
imul %edi,%eax
add %eax,%ecx
add %ecx,%edi
lea 0x1(%r8,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = a5 + (a3 - a5 * a5);
    v7 = a4 + (a1 * a1) + a1;
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        if (a2 < a4)
        {
            v8 += a1 * a1;
        }
        else
        {
            v8 += a5 - (a5 + a3);
        }
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a4)
    {
        v10 += a1 + (a1 + a4);
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 23
2 23
3 23
4 23
5 4
6 4
7 4
8 4
9 23
10 5
11 5
12 5
13 5
14 23
15 24
<<<sep_out_sample>>>
lea (%rdx,%rsi,2),%eax
sub %r8d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a4 - a4;
    v7 = (a2 + (a2 + a3)) - a5;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 5
2 5
3 6
4 6
5 6
6 6
7 6
8 7
<<<sep_out_sample>>>
cmp %esi,%r8d
jge 11 <func1+0x11>
lea 0x1(%r8),%eax
imul %esi,%eax
imul %edi,%eax
jmp 1b <func1+0x1b>
lea 0x1(%r8),%eax
imul %edx,%eax
imul %ecx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += (a3 + a4) * a3;
    }
    if (a5 < a2)
    {
        v8 = (a5 * a2 + a2) * a1;
    }
    else
    {
        v8 = (a3 + a3 * a5) * a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 15
8 15
9 15
10 17
11 17
12 17
13 17
14 17
15 18
<<<sep_out_sample>>>
mov %esi,%r9d
sub %r8d,%r9d
mov %esi,%eax
imul %ecx,%eax
cmp %r8d,%edx
cmovl %eax,%r9d
cmp %edi,%esi
jge 1f <func1+0x1f>
mov %edi,%r10d
imul %ecx,%r10d
jmp 2b <func1+0x2b>
lea (%r8,%r8,1),%r10d
imul %edx,%r10d
imul %r8d,%r10d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
lea (%r9,%r10,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a3 < a5)
    {
        v6 = a4 * ((a2 + a5) - a5);
    }
    else
    {
        v6 = a2 - a5;
    }
    if (a2 < a1)
    {
        v7 = a1 * a4;
    }
    else
    {
        v7 = (a3 * (a5 + a5)) * a5;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 10
2 10
3 6
4 6
5 6
6 6
7 12
8 12
9 14
10 14
11 14
12 18
13 18
14 18
15 20
16 20
17 20
18 20
19 20
20 20
21 21
<<<sep_out_sample>>>
mov %r8d,%r9d
sub %edi,%r9d
cmp %ecx,%esi
jle 13 <func1+0x13>
lea (%rdi,%rcx,2),%eax
lea (%rax,%rsi,1),%r10d
jmp 1d <func1+0x1d>
mov %ecx,%r10d
imul %edi,%r10d
add %edx,%r10d
lea (%rcx,%rdi,1),%eax
lea 0x0(,%rsi,4),%r11d

cmp %r9d,%ecx
cmovle %r11d,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %eax,%r9d
lea (%r9,%r10,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (v6 < a5)
        {
            v6 += (a3 - a2) + a2;
        }
        else
        {
            v6 += a2 + a3 - a4;
        }
    }
    v8 = a5 - a1;
    if (a4 < a2)
    {
        v9 = (a4 + a2 + a1) + a4;
    }
    else
    {
        v9 = a3 + (a4 * a1);
    }
    if (v8 < a4)
    {
        v10 = a4 + a1;
    }
    else
    {
        v10 = a2 + a2 + a2 + a2;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 17
4 17
5 19
6 19
7 19
8 23
9 23
10 23
11 27
12 27
13 27
14 27
15 27
16 33
17 33
18 33
19 33
20 33
21 33
22 33
23 34
<<<sep_out_sample>>>
cmp %esi,%edx
jge 14 <func1+0x14>
mov %edi,%r9d
sub %r8d,%r9d
imul %edi,%r9d
imul %ecx,%r9d
jmp 22 <func1+0x22>
mov %edx,%r9d
imul %esi,%r9d
imul %edx,%r9d
add %esi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
imul %edi,%esi
imul %esi,%ecx
imul %ecx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a3 < a2)
    {
        v6 = ((a1 - a5) * a1) * a4;
    }
    else
    {
        v6 = a2 + (a3 * a2 * a3);
    }
    v7 = (a1 * a2 * a4) * a1;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 13
13 13
14 13
15 13
16 13
17 12
18 12
19 12
20 13
21 14
<<<sep_out_sample>>>
mov %edi,%eax
sub %ecx,%eax
cmp %edx,%edi
jl 14 <func1+0x14>
lea (%rdx,%rsi,1),%r9d
mov %edi,%eax
imul %ecx,%eax
add %r9d,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %r8d,%esi
lea 0x2(%rcx,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a1 + a1 - a5;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += a4 * a4 - a3;
    }
    if (a1 < a3)
    {
        v10 = a3 + a1 - a3 - a4;
    }
    else
    {
        v10 = a3 + a2 + a1 * a4;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 14
4 14
5 20
6 20
7 20
8 20
9 22
10 22
11 22
12 22
13 22
14 23
<<<sep_out_sample>>>
test %ecx,%ecx
jle d <func1+0xd>
mov %edx,%eax
neg %eax
imul %edi,%eax
jmp 1b <func1+0x1b>
mov %ecx,%r9d
sub %edx,%r9d
mov %r8d,%eax
sub %esi,%eax
add %r9d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
sub %edx,%ecx
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = (a5 - a5) - a3;
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        if (v8 < a1)
        {
            v7 += a3 + a4;
        }
        else
        {
            v7 += a2 - (a3 + a1);
        }
    }
    if (v7 < a4)
    {
        v9 = a1 - a1 * a3 - a1;
    }
    else
    {
        v9 = a4 - a3 + (a5 - a2);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 17
2 17
3 19
4 19
5 19
6 19
7 23
8 23
9 23
10 23
11 23
12 25
13 25
14 25
15 25
16 25
17 25
18 26
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
lea 0x1(%rcx,%r8,1),%r8d
sub %edi,%ecx
sub %esi,%ecx
sub %edx,%ecx
lea (%r8,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a4 * a5;
    }
    v8 = a4 - a1 - a2 - a3;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 9
6 9
7 9
8 10
9 11
<<<sep_out_sample>>>
test %edi,%edi
jle e <func1+0xe>
lea (%rdx,%r8,1),%eax
lea (%rax,%rsi,2),%r9d
jmp 1b <func1+0x1b>
mov %esi,%r9d
imul %edx,%r9d
add %ecx,%r9d
add %esi,%r9d
lea (%rdi,%rdx,1),%eax
sub %esi,%eax
imul %r8d,%eax
lea (%rsi,%r8,1),%r10d
cmp %eax,%esi
jg 37 <func1+0x37>
lea 0x1(%rdx),%r10d
imul %esi,%r10d
add %r8d,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %r9d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += (a4 - a2) - a4;
    }
    if (v6 < a1)
    {
        v8 = a3 + a5 + a2 + a2;
    }
    else
    {
        v8 = (a2 * a3 + a4) + a2;
    }
    v9 = (a1 + a3 - a2) * a5;
    if (v9 < a2)
    {
        v10 = a2 + a5;
    }
    else
    {
        v10 = a2 + a2 * a3 + a5;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 15
7 15
8 15
9 15
10 17
11 17
12 17
13 20
14 18
15 18
16 24
17 24
18 24
19 26
20 26
21 26
22 26
23 26
24 26
25 26
26 27
<<<sep_out_sample>>>
mov %ecx,%r11d
imul %ecx,%r11d
mov %esi,%r10d
sub %edi,%r10d
lea (%r8,%rdi,1),%r9d
add %edx,%r9d
cmp %r8d,%esi
jle 24 <func1+0x24>
mov %edi,%r9d
imul %r8d,%r9d
imul %esi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a4 * a4;
    v7 = a5 - a5 - a1 + a2;
    if (a5 < a2)
    {
        v8 = a1 * a5 * a2;
    }
    else
    {
        v8 = a5 + a1 + a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 5
4 5
5 12
6 12
7 6
8 6
9 8
10 8
11 8
12 14
13 14
14 14
15 14
16 14
17 14
18 14
19 15
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
mov $0x1,%edx
sub %ecx,%edx
imul %edi,%edx
imul %edx,%r8d
add %r8d,%eax
add %ecx,%edi
sub %edi,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = (a1 - (a1 * a4)) * a5;
    v7 = a2 - (a4 + a1);
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 4
7 4
8 4
9 6
10 5
11 5
12 6
13 7
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
lea 0x1(%rcx,%r8,1),%eax
lea (%rsi,%rcx,2),%edx
add %edx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += (a3 - a2) - a1;
    }
    v8 = (a2 + a4) + a4 + a1;
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        if (v10 < a4)
        {
            v9 += a3 * (a3 + a3);
        }
        else
        {
            v9 += a2 - (a2 - a5);
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 22
4 22
5 9
6 9
7 22
8 23
<<<sep_out_sample>>>
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea (%r8,%rcx,1),%esi
lea -0x1(%rdi,%rcx,1),%eax
imul %eax,%edi
lea 0x1(%rsi,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = (a1 + a4) * a1 - a1;
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += a4 - a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 4
6 4
7 10
8 11
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (v6 < a2)
        {
            v6 += a2 - a4 - a2;
        }
        else
        {
            v6 += a3 + a1;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        if (a3 < a1)
        {
            v8 += a3 * a4;
        }
        else
        {
            v8 += a3 + (a3 + a4);
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 28
2 28
3 28
4 28
5 29
<<<sep_out_sample>>>
push %rbx
cmp %edi,%r8d
jge 13 <func1+0x13>
lea -0x1(%r8),%eax
imul %ecx,%eax
imul %r8d,%eax
jmp 1d <func1+0x1d>
lea (%rcx,%rcx,1),%eax
lea (%rsi,%r8,1),%r10d
sub %r10d,%eax
lea (%r8,%rsi,1),%r11d
lea (%rcx,%rsi,1),%r10d
lea (%r10,%rdx,1),%r9d
lea (%rsi,%rdx,1),%ebx
cmp %esi,%edi
cmovl %ebx,%r9d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%eax
add %r11d,%eax
add %r9d,%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a5 < a1)
    {
        v6 = (a4 * a5 - a4) * a5;
    }
    else
    {
        v6 = a4 + a4 - (a2 + a5);
    }
    if (a5 < a5)
    {
        v7 = a3 * a4 * a4 + a1;
    }
    else
    {
        v7 = a5 + a2;
    }
    if (a1 < a2)
    {
        v8 = (a2 - (a1 - a3)) + a1;
    }
    else
    {
        v8 = a4 + a2 + a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 2
2 4
3 4
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 18
12 26
13 26
14 22
15 22
16 22
17 28
18 28
19 28
20 28
21 28
22 28
23 28
24 29
25 29
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
lea 0x1(%rsi,%r8,2),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (v7 < a1)
        {
            v6 += a5 - a3 - a3;
        }
        else
        {
            v6 += a5 + a2 + a1;
        }
    }
    v8 = (a5 - a2) + (a2 - a4);
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 18
<<<sep_out_sample>>>
add %edi,%edx
add %edx,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%eax
imul %edi,%ecx
sub $0x1,%ecx
imul %ecx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a2 - a3 + a5;
    }
    v8 = (a1 * a4 * a5) - a5;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 9
6 9
7 9
8 10
9 11
<<<sep_out_sample>>>
mov %ecx,%eax
sub %esi,%eax
mov %esi,%r9d
sub %ecx,%r9d
cmp %esi,%edi
cmovle %r9d,%eax
test %ecx,%ecx
jle 1a <func1+0x1a>
lea (%rdi,%rdi,1),%r10d
jmp 27 <func1+0x27>
mov %esi,%r10d
sub %r8d,%r10d
imul %edx,%r10d
add %r8d,%r10d
mov $0x0,%r9d
mov %ecx,%r11d
imul %r8d,%r11d
cmp %edx,%edi
cmovle %r11d,%r9d
add %r9d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
add %r10d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a3 - a3 + a1;
    }
    if (a2 < a1)
    {
        v8 = a5 - a5 + a4 - a2;
    }
    else
    {
        v8 = a1 + (a2 - a1) - a4;
    }
    if (v6 < a4)
    {
        v9 = a1 + a4 - a4 + a1;
    }
    else
    {
        v9 = (a2 - a5) * a3 + a5;
    }
    if (a3 < a1)
    {
        v10 = a5 - a5;
    }
    else
    {
        v10 = a4 * a5;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 11
5 11
6 11
7 17
8 17
9 19
10 19
11 23
12 23
13 23
14 23
15 27
16 31
17 31
18 31
19 31
20 33
21 33
22 33
23 33
24 33
25 33
26 33
27 34
<<<sep_out_sample>>>
mov %esi,%r10d
imul %esi,%r10d
lea (%r8,%r8,1),%r9d
sub %r9d,%r10d
lea (%rdi,%r8,1),%r9d
cmp %edi,%esi
mov $0x0,%eax
cmovl %eax,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = (a2 * a2) - (a5 + a5);
    if (a2 < a1)
    {
        v7 = a4 - a4;
    }
    else
    {
        v7 = a1 + a5;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 11
6 11
7 11
8 11
9 13
10 13
11 13
12 13
13 13
14 13
15 14
<<<sep_out_sample>>>
lea 0x1(%rsi),%r10d
imul %edi,%r10d
add %r8d,%r10d
cmp %edx,%ecx
jge 21 <func1+0x21>
mov $0x1,%r9d
sub %esi,%r9d
imul %edi,%r9d
add %r8d,%r9d
jmp 2e <func1+0x2e>
mov %ecx,%r9d
imul %edx,%r9d
sub %edi,%r9d
sub %edx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a5 + ((a1 * a2) + a1);
    if (a4 < a3)
    {
        v7 = a1 - a1 * a2 + a5;
    }
    else
    {
        v7 = a4 * a3 - a1 - a3;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 5
5 5
6 7
7 7
8 7
9 7
10 7
11 11
12 11
13 11
14 11
15 13
16 13
17 13
18 13
19 13
20 13
21 14
<<<sep_out_sample>>>
mov %r8d,%eax
sub %esi,%eax
sub %ecx,%eax
lea 0x1(%r8,%rax,1),%eax
add %eax,%edi
add %edx,%edi
add %esi,%edi
add %edi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %edx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (a5 < a1)
        {
            v6 += a3 - a3 * a2;
        }
        else
        {
            v6 += (a1 + a5) + a5;
        }
    }
    v8 = a2 + a3;
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        v9 += a2 - (a5 * a4);
    }
    v11 = (a5 - a2) - a4 + a5;
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 22
4 23
5 23
6 23
7 23
8 23
9 23
10 16
11 23
12 24
<<<sep_out_sample>>>
lea (%rdi,%rcx,1),%r9d
imul %esi,%r9d
add %edi,%r9d
mov %esi,%eax
sub %edi,%eax
mov %edi,%r10d
imul %r8d,%r10d
sub %r10d,%eax
cmp %esi,%edi
jle 2d <func1+0x2d>
mov %esi,%r11d
imul %edx,%r11d
lea (%rdx,%rsi,1),%r10d
add %r11d,%r10d
jmp 34 <func1+0x34>
mov %r8d,%r10d
imul %r8d,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %r9d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (a4 < a5)
        {
            v6 += (a1 * a2) - a4;
        }
        else
        {
            v6 += (a4 - a3) * a4;
        }
    }
    v8 = a2 * (a1 + a4) + a1;
    if (a4 < a4)
    {
        v9 = a3 * (a1 + a3) - a3;
    }
    else
    {
        v9 = (a2 - a1) - a1 * a5;
    }
    if (a2 < a1)
    {
        v10 = a2 * a3 + (a3 + a2);
    }
    else
    {
        v10 = a2 - a2 + a5 * a5;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 16
4 23
5 23
6 23
7 23
8 23
9 25
10 25
11 27
12 27
13 27
14 27
15 27
16 31
17 31
18 33
19 33
20 33
21 33
22 33
23 33
24 33
25 34
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %r8d,%esi
add %ecx,%esi
imul %edx,%ecx
imul %ecx,%r8d
add %r8d,%edx
lea 0x1(%rsi,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = (a3 * a4) * a5 + a3;
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a3 + a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 4
6 4
7 4
8 10
9 11
<<<sep_out_sample>>>
mov %edx,%r10d
sub %esi,%r10d
imul %r8d,%r10d
test %ecx,%ecx
jle 17 <func1+0x17>
mov %r8d,%r9d
imul %edi,%r9d
jmp 27 <func1+0x27>
mov %ecx,%r9d
sub %edx,%r9d
mov %edi,%r11d
imul %ecx,%r11d
sub %r11d,%r9d
cmp %edx,%r8d
jle 3f <func1+0x3f>
mov %r8d,%eax
imul %ecx,%eax
mov %edx,%r11d
sub %eax,%r11d
mov %r11d,%eax
add %edi,%eax
jmp 44 <func1+0x44>
lea (%rdi,%rsi,2),%eax
sub %edx,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (v6 < a5)
        {
            v6 += (a1 + a5) - a3;
        }
        else
        {
            v6 += a5 - (a1 - a2);
        }
    }
    if (a2 < a2)
    {
        v8 = (a3 + a3 + a1) * a4;
    }
    else
    {
        v8 = a5 * (a3 - a2);
    }
    if (v9 < a4)
    {
        v9 = a5 * a1;
    }
    else
    {
        v9 = (a4 - a3) - a1 * a4;
    }
    if (a3 < a5)
    {
        v10 = a1 + (a3 - (a5 * a4));
    }
    else
    {
        v10 = a1 - ((a3 - a2) - a2);
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 22
4 24
5 24
6 26
7 26
8 26
9 30
10 30
11 30
12 30
13 30
14 32
15 32
16 34
17 34
18 34
19 34
20 34
21 34
22 34
23 38
24 38
25 40
26 40
27 40
28 40
29 40
30 40
31 40
32 41
<<<sep_out_sample>>>
cmp %edi,%esi
jge e <func1+0xe>
mov %ecx,%eax
sub %r8d,%eax
sub %r8d,%eax
jmp 19 <func1+0x19>
mov %edx,%eax
imul %r8d,%eax
imul %edi,%eax
add %ecx,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a2 < a1)
    {
        v6 = (a4 - a5) - a5;
    }
    else
    {
        v6 = (a3 * a5) * a1 + a4;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        if (v6 < a2)
        {
            v7 += a4 - a4 * a3;
        }
        else
        {
            v7 += a5 * (a4 + a4);
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 10
11 24
12 24
13 24
14 24
15 24
16 25
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
lea (%rcx,%r8,2),%eax
lea 0x1(%rax,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a2 * a1 * a1;
    }
    v8 = a5 - (a3 * a2);
    v9 = (a3 - a3) + a3 * a2;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 11
5 12
<<<sep_out_sample>>>
mov %esi,%r9d
imul %ecx,%r9d
imul %edx,%r9d
imul %edx,%r9d
mov %esi,%eax
imul %r8d,%eax
sub %edi,%eax
sub %ecx,%eax
add %r9d,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += (a2 - a4) + a2;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += a3 - a5 * a5;
    }
    v10 = a2 * a4 * a3 * a3;
    v11 = a2 * a5 - a1 - a4;
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 14
2 14
3 14
4 14
5 15
6 15
7 15
8 15
9 16
10 16
11 16
12 16
13 16
14 16
15 17
<<<sep_out_sample>>>
mov %r8d,%r9d
sub %edi,%r9d
cmp %edx,%ecx
cmovl %esi,%r9d
lea (%rdx,%rsi,1),%eax
mov %esi,%r10d
imul %r8d,%r10d
test %r8d,%r8d
cmovg %r10d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a4 < a3)
    {
        v6 = (a2 - a2) + a2;
    }
    else
    {
        v6 = (a4 - a4) - a1 + a5;
    }
    if (v7 < a5)
    {
        v7 = a2 * a5;
    }
    else
    {
        v7 = a3 + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 18
6 14
7 14
8 14
9 14
10 20
11 20
12 20
13 20
14 20
15 20
16 21
<<<sep_out_sample>>>
mov %ecx,%eax
sub %r8d,%eax
cmp %edi,%edx
jl f <func1+0xf>
mov %edi,%eax
imul %r8d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a3 < a1)
    {
        v6 = (a3 + a4) - a3 - a5;
    }
    else
    {
        v6 = a1 * a5;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += a4 + a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 6
2 6
3 4
4 4
5 10
6 10
7 17
8 17
9 17
10 17
11 17
12 18
<<<sep_out_sample>>>
mov %edi,%r9d
sub %esi,%r9d
cmp %esi,%ecx
jl 17 <func1+0x17>
mov %edi,%eax
imul %esi,%eax
add %ecx,%eax
mov %edx,%r9d
sub %eax,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
imul %edx,%ecx
imul %ecx,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a4 < a2)
    {
        v6 = a1 - a2;
    }
    else
    {
        v6 = a3 - (a4 + (a1 * a2));
    }
    v7 = ((a3 * a3) * a4) * a4;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 4
4 4
5 10
6 10
7 10
8 10
9 10
10 13
11 13
12 13
13 13
14 13
15 12
16 12
17 13
18 14
<<<sep_out_sample>>>
lea (%rcx,%rsi,1),%eax
cmp %ecx,%r8d
jle 11 <func1+0x11>
mov %ecx,%eax
sub %edx,%eax
sub %esi,%eax
add %r8d,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %esi,%edx
add %r8d,%edx
lea 0x1(%rcx,%rdx,1),%edx
add %edx,%eax
add %r8d,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (a1 < a2)
        {
            v6 += a5 + (a2 + a3);
        }
        else
        {
            v6 += (a5 * a2) - a1;
        }
    }
    if (a4 < a5)
    {
        v8 = (a4 - a3) - a2 + a5;
    }
    else
    {
        v8 = a4 + a2;
    }
    v9 = a4 + (a5 - a4) + a2;
    v10 = 0;
    for (v11 = 0; v11++; v11<a2)
    {
        if (a2 < a5)
        {
            v10 += a2 + a4 + a1;
        }
        else
        {
            v10 += (a2 * a4) - a2;
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 16
3 16
4 18
5 18
6 18
7 18
8 37
9 37
10 37
11 37
12 37
13 24
14 37
15 38
<<<sep_out_sample>>>
mov %r8d,%r9d
imul %edi,%r9d
add %ecx,%r9d
imul %esi,%r9d
mov %esi,%eax
sub %edx,%eax
mov %edi,%r10d
sub %esi,%r10d
cmp %r9d,%r8d
cmovg %eax,%r10d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
lea (%r9,%r10,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = ((a5 * a1) + a4) * a2;
    if (v6 < a5)
    {
        v7 = a2 - a3;
    }
    else
    {
        v7 = a1 + a2 - a2 - a2;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 7
6 7
7 7
8 7
9 7
10 7
11 13
12 13
13 13
14 13
15 13
16 13
17 14
<<<sep_out_sample>>>
mov $0x0,%eax
mov %esi,%r9d
sub %r8d,%r9d
cmp %esi,%r8d
cmovl %r9d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a1 < a1)
    {
        v6 = (a3 * a3) + a1 + a2;
    }
    else
    {
        v6 = a3 - a3;
    }
    if (a5 < a2)
    {
        v7 = (a2 + a1) - (a1 + a5);
    }
    else
    {
        v7 = a2 - a2;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 18
2 14
3 14
4 14
5 14
6 20
7 20
8 20
9 20
10 20
11 21
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
add %ecx,%esi
mov $0x1,%eax
sub %edi,%eax
imul %r8d,%eax
sub %edx,%eax
lea (%rsi,%rax,1),%ecx
sub %edi,%r8d
lea 0x1(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = (a5 - a5 * a1) - a3;
    v7 = a5 - a1;
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += (a3 - a1) * a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 11
5 4
6 4
7 4
8 4
9 11
10 5
11 11
12 12
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
lea 0x1(%rcx,%r8,1),%ecx
mov %esi,%eax
sub %edi,%eax
add %ecx,%eax
imul %edx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (v6 < a5)
        {
            v6 += a4 - a4;
        }
        else
        {
            v6 += a5 + a1;
        }
    }
    v8 = a2 - a1;
    v9 = a3 * a2;
    v10 = 0;
    for (v11 = 0; v11++; v11<a1)
    {
        if (v11 < a4)
        {
            v10 += (a1 - a2) + a5;
        }
        else
        {
            v10 += (a1 + a4) - a4;
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 30
2 30
3 30
4 30
5 16
6 16
7 30
8 17
9 30
10 31
<<<sep_out_sample>>>
cmp %edx,%r8d
jge 14 <func1+0x14>
mov %edi,%r9d
sub %r8d,%r9d
mov %edi,%eax
sub %ecx,%eax
add %r9d,%eax
jmp 1c <func1+0x1c>
mov %r8d,%eax
imul %ecx,%eax
sub %edx,%eax
mov %edx,%r9d
sub %esi,%r9d
imul %esi,%r9d
lea 0x1(%r8,%r9,1),%r9d
add %r9d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    if (a5 < a3)
    {
        v6 = (a1 - a5) + (a1 - a4);
    }
    else
    {
        v6 = (a5 * a4) - a3;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        if (a1 < a4)
        {
            v7 += a4 * a3 * a5;
        }
        else
        {
            v7 += a5 - a3;
        }
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        if (v9 < a4)
        {
            v9 += a3 - a1;
        }
        else
        {
            v9 += a4 * a3 + a2;
        }
    }
    v11 = (a3 - a2) * a2 + a5;
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 6
9 10
10 10
11 10
12 36
13 36
14 36
15 37
16 37
17 37
18 37
19 37
20 37
21 37
22 38
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %edx,%ecx
add %edi,%ecx
add %ecx,%eax
sub %edx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a4 < a4)
    {
        v6 = a5 - a2 - a2 - a1;
    }
    else
    {
        v6 = a1 + (a4 + a3);
    }
    v7 = ((a5 + a1) - a3) - a5;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 13
2 13
3 13
4 13
5 10
6 10
7 13
8 12
9 13
10 14
<<<sep_out_sample>>>
mov %r8d,%r9d
imul %edi,%r9d
add %edx,%r9d
lea (%rcx,%r8,1),%eax
test %r8d,%r8d
jg 23 <func1+0x23>
mov %esi,%eax
imul %ecx,%eax
mov %r8d,%r11d
sub %eax,%r11d
mov %r11d,%eax
add %esi,%eax
cmp %r9d,%edx
jle 35 <func1+0x35>
mov %r8d,%r10d
imul %esi,%r10d
imul %edx,%r10d
jmp 3c <func1+0x3c>
mov %edx,%r10d
imul %ecx,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a5 < a5)
    {
        v6 = a5 - a3;
    }
    else
    {
        v6 = a3 + a5 * a1;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        if (v6 < a4)
        {
            v7 += a3 + a3;
        }
        else
        {
            v7 += a1 * a1 - a3;
        }
    }
    if (v7 < a5)
    {
        v9 = a4 + a5;
    }
    else
    {
        v9 = a5 - a2 * a4 + a2;
    }
    if (v6 < a3)
    {
        v10 = a3 * (a5 * a2);
    }
    else
    {
        v10 = (a4 + a4 - a4) * a3;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 26
5 24
6 24
7 30
8 30
9 30
10 30
11 30
12 30
13 32
14 32
15 34
16 34
17 34
18 34
19 38
20 38
21 40
22 40
23 40
24 40
25 40
26 40
27 40
28 41
<<<sep_out_sample>>>
cmp %edi,%r8d
jge f <func1+0xf>
lea (%rsi,%r8,2),%eax
lea (%rax,%rcx,1),%r10d
jmp 1a <func1+0x1a>
lea (%rcx,%rdx,1),%r10d
add %edi,%r10d
imul %r8d,%r10d
lea (%rsi,%rcx,1),%r9d
sub %r8d,%r9d
cmp %edx,%ecx
jl 2d <func1+0x2d>
lea (%rcx,%rdi,2),%r9d
imul %esi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a5 < a1)
    {
        v6 = a2 + (a4 + a5) + a5;
    }
    else
    {
        v6 = a5 * ((a4 + a3) + a1);
    }
    if (a4 < a3)
    {
        v7 = (a2 + a4) - a5;
    }
    else
    {
        v7 = (a4 + a1 + a1) * a2;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 14
10 14
11 12
12 12
13 18
14 18
15 20
16 20
17 20
18 20
19 20
20 20
21 21
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%r10d
cmp %ecx,%edx
jge 13 <func1+0x13>
lea (%rsi,%rdx,1),%r10d
imul %esi,%r10d
sub %edi,%r10d
cmp %ecx,%edx
jle 20 <func1+0x20>
lea (%rdi,%rsi,1),%r11d
sub %r8d,%r11d
jmp 27 <func1+0x27>
mov %esi,%r11d
imul %esi,%r11d
lea (%rdi,%r8,1),%r9d
mov %edx,%eax
imul %edi,%eax
cmp %edi,%edx
cmovl %eax,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r11d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a3 < a4)
    {
        v6 = (a2 + a3) * a2 - a1;
    }
    else
    {
        v6 = a1 + a3;
    }
    if (a4 < a3)
    {
        v7 = a1 + a2 - a5;
    }
    else
    {
        v7 = a2 * a2;
    }
    if (a3 < a1)
    {
        v8 = a3 * a1;
    }
    else
    {
        v8 = a1 + a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 6
7 12
8 12
9 14
10 14
11 14
12 18
13 18
14 26
15 22
16 22
17 22
18 22
19 28
20 28
21 28
22 28
23 28
24 28
25 28
26 29
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %edx,%r8d
lea (%rsi,%rcx,2),%eax
lea 0x1(%rax,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a1 * a3;
    }
    v8 = a2 + a4;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 9
5 10
6 11
<<<sep_out_sample>>>
cmp %edi,%edx
jge 11 <func1+0x11>
lea (%rdi,%rdx,1),%r9d
imul %esi,%r9d
sub %edx,%r9d
jmp 1d <func1+0x1d>
lea (%r8,%rdi,1),%r9d
mov %edi,%eax
sub %esi,%eax
imul %eax,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
add $0x1,%edi
imul %edi,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a3 < a1)
    {
        v6 = (a1 + a3) * a2 - a3;
    }
    else
    {
        v6 = (a5 + a1) * (a1 - a2);
    }
    v7 = a2 * a1 + a2;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 10
11 13
12 13
13 13
14 13
15 13
16 12
17 12
18 13
19 14
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %r8d,%edx
sub %r8d,%esi
lea (%rdx,%rcx,2),%eax
lea (%rax,%rsi,1),%eax
mov %edi,%edx
imul %edi,%edx
imul %edx,%ecx
add %ecx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a4 - (a5 - a2);
    v7 = (a1 * a1) * a4 + a1;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 4
5 4
6 6
7 5
8 5
9 5
10 5
11 6
12 7
<<<sep_out_sample>>>
mov %esi,%eax
test %edx,%edx
jle c <func1+0xc>
lea (%rdx,%rsi,2),%eax
imul %esi,%eax
lea 0x1(%rax,%rdi,1),%eax
add %eax,%edx
add %edx,%esi
add %r8d,%esi
lea 0x2(%rcx,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a3 - a5 + a4;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += a1 - a4 + a1;
    }
    if (v10 < a3)
    {
        v10 = (a3 + a2 + a2) * a2;
    }
    else
    {
        v10 = a2 - (a5 - a5);
    }
    v11 = 0;
    for (v12 = 0; v12++; v12<a2)
    {
        v11 += (a2 * a1) + a4;
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 20
2 14
3 14
4 16
5 16
6 27
7 27
8 27
9 27
10 27
11 28
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%eax
sub %r8d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (a3 < a4)
        {
            v6 += (a2 - a4) - a5;
        }
        else
        {
            v6 += (a5 * a3) - a4;
        }
    }
    v8 = a3 - a5;
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        if (v9 < a5)
        {
            v9 += a4 + a1 + a3;
        }
        else
        {
            v9 += a1 * a2 + a3;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 29
2 29
3 29
4 29
5 16
6 29
7 30
<<<sep_out_sample>>>
mov %r8d,%r9d
sub %ecx,%r9d
cmp %ecx,%edi
jge 11 <func1+0x11>
lea (%rdx,%rsi,2),%r9d
sub %r8d,%r9d
mov %esi,%eax
neg %eax
sub %edi,%eax
cmp %esi,%r8d
jle 2b <func1+0x2b>
mov %esi,%r10d
imul %esi,%r10d
add %r8d,%r10d
sub %edx,%r10d
jmp 39 <func1+0x39>
mov %esi,%r10d
sub %ecx,%r10d
imul %edi,%r10d
imul %edi,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%r9d
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (a1 < a4)
        {
            v6 += a4 + a1 * a1;
        }
        else
        {
            v6 += (a5 * a1) + a1;
        }
    }
    if (a1 < a4)
    {
        v8 = a3 + a2 - a5 + a2;
    }
    else
    {
        v8 = a5 - a4;
    }
    v9 = ((a4 - a2) - a4) - a1;
    if (a2 < a5)
    {
        v10 = a2 * a2 + a5 - a3;
    }
    else
    {
        v10 = a1 * ((a2 - a4) * a1);
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 16
4 16
5 18
6 18
7 24
8 24
9 24
10 25
11 25
12 27
13 27
14 27
15 27
16 27
17 31
18 31
19 31
20 31
21 33
22 33
23 33
24 33
25 33
26 33
27 33
28 34
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %esi,%eax
sub %edx,%r8d
add %r8d,%ecx
add %ecx,%eax
sub %edi,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a2 - ((a2 - a2) * a5);
    v7 = a5 - a3 + a4;
    v8 = a2 - a1;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 7
2 7
3 7
4 7
5 7
6 5
7 5
8 7
9 6
10 7
11 8
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
add %ecx,%esi
sub %edi,%r8d
mov %ecx,%eax
imul %ecx,%eax
sub %eax,%r8d
add %esi,%r8d
lea (%r8,%rdx,2),%eax
imul %edi,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a5 - a1 - a4 * a4;
    v7 = a3 + a3;
    v8 = a4 * a1;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 7
2 7
3 7
4 7
5 4
6 4
7 4
8 4
9 7
10 7
11 6
12 7
13 8
<<<sep_out_sample>>>
lea (%rsi,%rdi,2),%eax
lea (%rdi,%rdx,2),%ecx
lea (%rcx,%rax,1),%eax
add %esi,%eax
lea (%rax,%r8,2),%eax
imul %esi,%esi
sub %esi,%edx
lea 0x1(%rax,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a5 - a4;
    v7 = a3 - a2 * a2;
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        if (a3 < a3)
        {
            v8 += a4 * (a1 + a4);
        }
        else
        {
            v8 += a4 - a3;
        }
    }
    v10 = (a2 + a1) + a1 + a3;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 19
3 19
4 19
5 19
6 5
7 5
8 19
9 20
<<<sep_out_sample>>>
mov %esi,%r9d
sub %edx,%r9d
cmp %edx,%ecx
jl 15 <func1+0x15>
lea (%rdi,%rsi,1),%r9d
imul %r8d,%r9d
add %ecx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
lea -0x1(%r8),%edx
imul %edx,%esi
add %esi,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a4 < a3)
    {
        v6 = a2 - a3;
    }
    else
    {
        v6 = a4 + (a1 + a2) * a5;
    }
    v7 = a5 * a2 - a2 + a5;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 4
4 4
5 10
6 10
7 10
8 13
9 13
10 13
11 13
12 13
13 12
14 12
15 12
16 13
17 14
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea (%r8,%rcx,1),%eax
imul %ecx,%edx
sub %edx,%eax
imul %edi,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a3 * ((a2 - a4) - a2);
    if (a2 < a2)
    {
        v7 = a3 * a5 * a3 - a4;
    }
    else
    {
        v7 = a3 * a4 + a4 * a1;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 11
2 13
3 13
4 13
5 4
6 13
7 11
8 13
9 14
<<<sep_out_sample>>>
mov %esi,%r9d
imul %edx,%r9d
mov %ecx,%eax
sub %esi,%eax
add %eax,%r9d
cmp %ecx,%esi
jge 1c <func1+0x1c>
lea (%r8,%rdx,1),%eax
add %ecx,%eax
add %esi,%eax
jmp 22 <func1+0x22>
mov %r8d,%eax
imul %esi,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a2 * a3 + (a4 - a2);
    if (a2 < a4)
    {
        v7 = ((a5 + a3) + a4) + a2;
    }
    else
    {
        v7 = a2 + (a2 * a5) - a2;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += a5 * (a1 - a3);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 4
6 5
7 5
8 7
9 7
10 7
11 7
12 11
13 11
14 18
15 18
16 18
17 18
18 18
19 18
20 19
<<<sep_out_sample>>>
mov %esi,%eax
sub %ecx,%eax
cmp %edi,%ecx
jl 11 <func1+0x11>
mov %ecx,%eax
sub %edi,%eax
add %esi,%eax
imul %edi,%eax
mov %esi,%r9d
imul %r8d,%r9d
lea 0x1(%rdi,%r9,1),%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    if (a4 < a1)
    {
        v6 = a2 - a4;
    }
    else
    {
        v6 = a1 * (a2 + (a4 - a1));
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        if (v7 < a5)
        {
            v7 += (a5 - a5) * a4;
        }
        else
        {
            v7 += a3 * a3 - a5;
        }
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        v9 += a3 * a2 - a1;
    }
    v11 = a2 * a5;
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 6
3 4
4 4
5 10
6 10
7 10
8 10
9 29
10 29
11 30
12 30
13 30
14 30
15 30
16 30
17 31
<<<sep_out_sample>>>
mov %edi,%eax
sub %ecx,%eax
sub %r8d,%eax
imul %edx,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a5 - a5;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += (a2 * a2) + a1;
    }
    v10 = a3 * (a1 - a4 - a5);
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 14
2 14
3 14
4 14
5 15
6 15
7 15
8 15
9 15
10 16
<<<sep_out_sample>>>
mov %r8d,%eax
sub %ecx,%eax
lea 0x1(%rdi,%rax,1),%eax
add %edx,%eax
add %esi,%eax
add %eax,%r8d
add %ecx,%r8d
sub %edx,%edi
add %edi,%esi
imul %esi,%ecx
lea 0x1(%r8,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = a4 * ((a1 - a3) + a2);
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a1 * (a3 - a5);
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        v9 += a1 + a3 + a2;
    }
    v11 = a5 - a4;
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 15
2 15
3 16
4 16
5 16
6 16
7 16
8 4
9 4
10 4
11 16
12 17
<<<sep_out_sample>>>
add %edx,%edi
add %esi,%edi
add %edi,%r8d
lea 0x1(%rcx,%r8,1),%eax
lea (%rsi,%rdx,1),%ecx
imul %ecx,%edx
imul %edx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a4 + a1;
    }
    v8 = (a3 * (a2 + a3)) * a2;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 9
6 9
7 9
8 10
9 11
<<<sep_out_sample>>>
lea (%r8,%rcx,2),%r9d
add %r8d,%r9d
lea 0x1(%rcx),%eax
imul %r8d,%eax
add %edi,%eax
cmp $0x1,%r8d
jle 27 <func1+0x27>
mov %ecx,%r10d
imul %ecx,%r10d
add $0x1,%r10d
imul %ecx,%r10d
jmp 34 <func1+0x34>
mov %ecx,%r10d
imul %esi,%r10d
add %r8d,%r10d
sub %edx,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = ((a4 + a5) + a4) + a5;
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        if (v7 < a4)
        {
            v7 += a4 * a4 * a5;
        }
        else
        {
            v7 += a2 * a5 + a3;
        }
    }
    v9 = a5 + a5 * a4 + a1;
    if (v8 < a5)
    {
        v10 = (a4 * a4 * a4) + a4;
    }
    else
    {
        v10 = a4 * a2 + a5 - a3;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 17
4 17
5 17
6 18
7 18
8 20
9 20
10 20
11 20
12 20
13 24
14 24
15 24
16 24
17 26
18 26
19 26
20 26
21 26
22 26
23 26
24 27
<<<sep_out_sample>>>
mov %edi,%r10d
sub %edx,%r10d
test %r8d,%r8d
jle 1a <func1+0x1a>
mov %edx,%r9d
sub %ecx,%r9d
imul %r8d,%r9d
sub %edi,%r9d
jmp 21 <func1+0x21>
mov %esi,%r9d
imul %edi,%r9d
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
imul %r8d,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a5 < a5)
    {
        v6 = (a2 + a4) - a5 * a4;
    }
    else
    {
        v6 = (a2 - a3 + a1) - a2;
    }
    if (v7 < a5)
    {
        v7 = a5 * (a3 - a4) - a1;
    }
    else
    {
        v7 = a2 * a1;
    }
    v8 = a5 * a5;
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        v9 += a5 * a3 + a4;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 12
4 12
5 14
6 14
7 14
8 14
9 14
10 18
11 18
12 26
13 26
14 26
15 26
16 26
17 26
18 20
19 26
20 27
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a2 - a5;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += a4 + a4 * a5;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a5)
    {
        if (v9 < a1)
        {
            v10 += (a3 - a4) - a2;
        }
        else
        {
            v10 += (a1 + a1) + a2;
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 26
2 26
3 26
4 26
5 27
<<<sep_out_sample>>>
lea (%rdx,%r8,2),%r9d
cmp %esi,%ecx
jge 13 <func1+0x13>
lea (%rdx,%rsi,1),%r9d
imul %ecx,%r9d
add %edi,%r9d
cmp %r8d,%ecx
jle 1d <func1+0x1d>
lea (%rcx,%rcx,1),%eax
jmp 2c <func1+0x2c>
mov %r8d,%eax
imul %ecx,%eax
mov %esi,%r10d
sub %eax,%r10d
mov %r10d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a4 < a2)
    {
        v6 = ((a3 + a2) * a4) + a1;
    }
    else
    {
        v6 = a5 + (a3 + a5);
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += (a4 - a2) - a3;
    }
    if (a5 < a4)
    {
        v9 = a4 + a4;
    }
    else
    {
        v9 = a2 - a5 * a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 6
7 17
8 17
9 19
10 19
11 23
12 23
13 23
14 23
15 23
16 25
17 25
18 25
19 25
20 25
21 25
22 26
<<<sep_out_sample>>>
add %edx,%edi
add %esi,%edi
add %edi,%r8d
lea (%r8,%rcx,1),%edi
add %ecx,%edx
imul %edx,%ecx
add %ecx,%esi
lea 0x1(%rdi,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a4 * (a3 + a4) + a2;
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        if (a4 < a3)
        {
            v7 += (a3 - a5) - a5;
        }
        else
        {
            v7 += (a3 - a3) + a4;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 4
6 4
7 4
8 17
9 18
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
cmp %edx,%edi
jge 14 <func1+0x14>
imul %ecx,%edx
mov %edx,%edi
imul %r8d,%edi
sub %ecx,%edi
jmp 1c <func1+0x1c>
add %r8d,%edx
imul %ecx,%edx
add %edx,%edi
add %eax,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%eax
lea 0x1(%rdi,%rax,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a5 + ((a1 + a3) - a5);
    if (a1 < a3)
    {
        v7 = (a4 * a3) * a5 - a4;
    }
    else
    {
        v7 = a4 * (a5 + a3) + a1;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += a2 - a3 * a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 5
3 5
4 7
5 7
6 7
7 7
8 7
9 11
10 11
11 11
12 18
13 18
14 18
15 18
16 18
17 19
<<<sep_out_sample>>>
mov %edx,%eax
sub %edi,%eax
lea (%rcx,%rcx,1),%r9d
cmp %esi,%edx
cmovge %r9d,%eax
lea 0x1(%rdi,%rdx,1),%r9d
add %r9d,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%ecx
add %ecx,%eax
add %edi,%edi
imul %edi,%edx
add %edx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a5 + a3 * a1;
    }
    if (a3 < a2)
    {
        v8 = a3 - a1;
    }
    else
    {
        v8 = a4 + a4;
    }
    v9 = (a1 + a1) * a3 + a5;
    v10 = 0;
    for (v11 = 0; v11++; v11<a5)
    {
        v10 += a3 + a1 * a3;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 11
5 11
6 23
7 23
8 23
9 23
10 23
11 17
12 17
13 17
14 23
15 24
<<<sep_out_sample>>>
cmp %esi,%edx
jge c <func1+0xc>
mov %edi,%r10d
sub %r8d,%r10d
jmp 16 <func1+0x16>
lea (%rdi,%r8,1),%r10d
add %esi,%r10d
sub %ecx,%r10d
cmp %edi,%esi
jle 29 <func1+0x29>
mov %ecx,%r9d
sub %esi,%r9d
add %edi,%r9d
imul %esi,%r9d
jmp 33 <func1+0x33>
mov %edi,%r9d
sub %edx,%r9d
imul %ecx,%r9d
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
mov %edi,%ecx
imul %edx,%ecx
imul %ecx,%edx
add %edx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a3 < a2)
    {
        v6 = ((a3 - a5) + a1) - a3;
    }
    else
    {
        v6 = a2 + (a1 + a5) - a4;
    }
    if (a1 < a2)
    {
        v7 = a2 * ((a4 - a2) + a1);
    }
    else
    {
        v7 = (a1 - a3) * a4;
    }
    v8 = a1 * a3 * a3 + a1;
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        if (a5 < a4)
        {
            v9 += a5 - (a1 + a4);
        }
        else
        {
            v9 += a2 + a5;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 12
10 12
11 14
12 14
13 14
14 14
15 14
16 18
17 18
18 18
19 33
20 33
21 33
22 33
23 33
24 33
25 20
26 20
27 20
28 20
29 33
30 34
<<<sep_out_sample>>>
test %r8d,%r8d
jle 12 <func1+0x12>
mov %edx,%eax
sub %r8d,%eax
add $0x1,%eax
imul %ecx,%eax
jmp 1b <func1+0x1b>
mov %esi,%eax
imul %esi,%eax
add %edi,%eax
sub %ecx,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (a2 < a4)
        {
            v6 += a1 * (a4 * a2);
        }
        else
        {
            v6 += a4 - a5 + a4;
        }
    }
    if (v6 < a5)
    {
        v8 = a4 + (a3 - a5) * a4;
    }
    else
    {
        v8 = (a2 * a2 + a1) - a4;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        v9 += (a3 - a2) - a1;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 18
7 18
8 22
9 22
10 22
11 22
12 29
13 29
14 29
15 29
16 29
17 30
<<<sep_out_sample>>>
lea (%rsi,%r8,2),%eax
add %eax,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (a3 < a2)
        {
            v6 += a2 - (a2 + a5);
        }
        else
        {
            v6 += a5 * a3 * a4;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        if (v6 < a2)
        {
            v8 += a3 + a4 + a4;
        }
        else
        {
            v8 += a5 - (a4 - a1);
        }
    }
    v10 = a2 + (a5 - (a3 - a5));
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 28
2 29
3 29
4 29
5 29
6 30
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
lea (%rdi,%rcx,2),%edi
lea 0x1(%rdi,%r8,1),%eax
sub %esi,%edx
sub %ecx,%edx
imul %edx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a5 - a3 + a4;
    }
    v8 = a1 + a4;
    v9 = a2 * (a3 - a2 - a4);
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 9
5 11
6 10
7 10
8 10
9 11
10 12
<<<sep_out_sample>>>
mov %edi,%eax
sub %esi,%eax
add %edx,%eax
cmp %ecx,%r8d
jge 14 <func1+0x14>
lea 0x1(%rdx),%eax
imul %edi,%eax
sub %r8d,%eax
add %edx,%edi
add %esi,%edi
add %r8d,%edi
add %edi,%ecx
add %ecx,%eax
imul %esi,%edx
add %edx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a5 < a4)
    {
        v6 = (a3 * a1 + a1) - a5;
    }
    else
    {
        v6 = (a1 - a2) + a3;
    }
    v7 = a2 * a3 + a5;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 4
5 4
6 6
7 6
8 6
9 13
10 13
11 13
12 13
13 13
14 12
15 12
16 13
17 14
<<<sep_out_sample>>>
mov %esi,%r9d
neg %r9d
sub %r8d,%r9d
mov $0x0,%r10d
cmp %edi,%r9d
jge 1e <func1+0x1e>
mov %edi,%r10d
sub %ecx,%r10d
imul %edx,%r10d
mov %ecx,%r11d
sub %esi,%r11d
cmp %r9d,%r8d
mov $0x0,%eax
cmovg %eax,%r11d
mov %esi,%eax
imul %esi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
add %r9d,%r10d
add %r11d,%r10d
add %r10d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a3 - ((a3 + a5) + a2);
    if (v6 < a1)
    {
        v7 = a1 * a3 - a3 * a4;
    }
    else
    {
        v7 = a4 - (a4 + a5 - a5);
    }
    if (v6 < a5)
    {
        v8 = a4 - a4;
    }
    else
    {
        v8 = a4 - a2;
    }
    v9 = a2 * a2 - a1 + a1;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 11
5 5
6 5
7 7
8 7
9 7
10 19
11 19
12 19
13 19
14 19
15 21
16 21
17 22
18 22
19 22
20 22
21 22
22 22
23 22
24 22
25 23
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
imul %r8d,%edx
add %edx,%eax
imul %r8d,%ecx
imul %ecx,%r8d
add %r8d,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a2 < a2)
    {
        v6 = a2 + (a3 * (a5 + a2));
    }
    else
    {
        v6 = a3 * a5;
    }
    v7 = (a4 * a5) * a5 + a2;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 13
2 13
3 13
4 13
5 10
6 13
7 12
8 12
9 12
10 13
11 14
<<<sep_out_sample>>>
test %ecx,%ecx
jle d <func1+0xd>
mov %r8d,%eax
imul %r8d,%eax
jmp 16 <func1+0x16>
mov %edi,%eax
imul %edi,%eax
add %esi,%eax
sub %ecx,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (a2 < a2)
        {
            v6 += a5 - a2;
        }
        else
        {
            v6 += (a1 * a4) + a2;
        }
    }
    if (v8 < a4)
    {
        v8 = a5 * a5;
    }
    else
    {
        v8 = (a1 * a1 + a2) - a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 22
7 22
8 22
9 22
10 24
11 24
12 24
13 24
14 24
15 25
<<<sep_out_sample>>>
lea (%rdx,%rdi,1),%eax
test %esi,%esi
jle 12 <func1+0x12>
mov %ecx,%eax
sub %r8d,%eax
imul %edx,%eax
add %r8d,%eax
cmp %r8d,%esi
jge 1d <func1+0x1d>
lea (%r8,%r8,1),%r10d
jmp 2a <func1+0x2a>
mov %edi,%r10d
sub %esi,%r10d
add %edi,%r10d
imul %ecx,%r10d
lea (%rdx,%rdi,1),%r9d
cmp %edi,%r8d
jle 46 <func1+0x46>
mov %ecx,%r9d
imul %edx,%r9d
mov %r8d,%r11d
sub %r9d,%r11d
mov %r11d,%r9d
add %r8d,%r9d
add %edi,%edx
add %esi,%edx
add %r8d,%edx
add %edx,%ecx
add %ecx,%eax
add %r10d,%eax
add %eax,%r9d
sub %esi,%r8d
add $0x1,%r8d
imul %r8d,%esi
lea (%r9,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (v6 < a2)
    {
        v6 = a5 + ((a4 - a5) * a3);
    }
    else
    {
        v6 = a3 + a1;
    }
    if (a2 < a5)
    {
        v7 = a5 + a5;
    }
    else
    {
        v7 = (a1 - a2 + a1) * a4;
    }
    if (a1 < a5)
    {
        v8 = (a5 - (a4 * a3)) + a5;
    }
    else
    {
        v8 = a3 + a4 - a4 + a1;
    }
    v9 = a2 + (a5 - a2) * a2;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 6
7 6
8 12
9 12
10 14
11 14
12 18
13 18
14 18
15 18
16 26
17 20
18 20
19 22
20 22
21 22
22 22
23 22
24 22
25 29
26 29
27 29
28 29
29 29
30 29
31 29
32 28
33 28
34 28
35 29
36 30
<<<sep_out_sample>>>
lea (%rdi,%rcx,1),%eax
mov %edx,%r9d
imul %r8d,%r9d
sub %r9d,%eax
lea 0x1(%rdi,%rax,1),%eax
add %eax,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a1 + a1;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        if (a4 < a4)
        {
            v8 += a1 * a4 - a4;
        }
        else
        {
            v8 += a1 + a4;
        }
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a1)
    {
        v10 += a3 * a5 + a1;
    }
    v12 = (a1 + a4) - a3 * a5;
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 26
2 26
3 26
4 26
5 27
6 27
7 27
8 27
9 27
10 28
<<<sep_out_sample>>>
add %edx,%edi
add %esi,%edi
add %edi,%r8d
lea (%rdx,%r8,1),%edi
add %esi,%edx
sub %edx,%ecx
sub %esi,%ecx
lea (%rdi,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a5 < a5)
    {
        v6 = (a2 + a5) + (a5 - a2);
    }
    else
    {
        v6 = a3 - (a1 - a1 + a4);
    }
    v7 = (a4 - (a3 + a2)) - a2;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 13
2 13
3 13
4 13
5 12
6 12
7 12
8 13
9 14
<<<sep_out_sample>>>
lea (%rcx,%rcx,1),%r9d
mov %edx,%eax
sub %edi,%eax
cmp %edi,%edx
jle 15 <func1+0x15>
mov %ecx,%eax
sub %edx,%eax
sub %r8d,%eax
sub %edx,%eax
mov %esi,%r10d
imul %esi,%r10d
add %r8d,%r10d
imul %r8d,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = ((a4 + a3) + a4) - a3;
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += a4 - a5;
    }
    if (a1 < a3)
    {
        v9 = a4 - a3 - a5 - a3;
    }
    else
    {
        v9 = a3 - a1;
    }
    if (a2 < a2)
    {
        v10 = a1 + (a5 + a2) + a5;
    }
    else
    {
        v10 = (a5 + a2 * a2) * a5;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 16
3 16
4 10
5 10
6 12
7 12
8 12
9 12
10 24
11 24
12 24
13 24
14 26
15 26
16 26
17 26
18 26
19 26
20 26
21 27
<<<sep_out_sample>>>
cmp %r8d,%esi
jge 12 <func1+0x12>
mov %ecx,%eax
sub %edx,%eax
imul %r8d,%eax
imul %esi,%eax
jmp 18 <func1+0x18>
mov %r8d,%eax
imul %edx,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a4 + (a1 - a1);
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += a1 - a2 + a2;
    }
    if (a2 < a5)
    {
        v10 = a5 * (a4 - a3) * a2;
    }
    else
    {
        v10 = a5 * a3;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 14
2 14
3 16
4 16
5 16
6 16
7 16
8 20
9 20
10 22
11 22
12 22
13 22
14 22
15 23
<<<sep_out_sample>>>
lea (%r8,%rcx,1),%eax
sub %eax,%edi
lea 0x1(%rdx,%rdi,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a1 - a5 - a2;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += a1 * a5 - a1;
    }
    v10 = a1 - (a5 + a4) - a1;
    v11 = 0;
    for (v12 = 0; v12++; v12<a2)
    {
        if (v8 < a3)
        {
            v11 += a2 * a1 - a3;
        }
        else
        {
            v11 += a3 * a1;
        }
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 14
2 27
3 27
4 27
5 27
6 27
7 28
<<<sep_out_sample>>>
lea (%r8,%rdi,2),%r9d
sub %edx,%r9d
cmp %edi,%r8d
jle 16 <func1+0x16>
lea (%rdi,%rdx,1),%eax
imul %edi,%eax
add %ecx,%eax
jmp 1b <func1+0x1b>
mov %esi,%eax
imul %edx,%eax
mov %ecx,%r10d
imul %edx,%r10d
lea (%r10,%rdi,2),%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a5 + a1 + a1 - a3;
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += a2 - (a5 + a3);
    }
    if (a1 < a5)
    {
        v9 = a4 + ((a1 + a3) * a1);
    }
    else
    {
        v9 = a2 * a3;
    }
    v10 = a1 + (a4 * a3);
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 10
4 10
5 12
6 12
7 12
8 12
9 16
10 16
11 18
12 18
13 19
14 19
15 19
16 19
17 19
18 19
19 19
20 20
<<<sep_out_sample>>>
mov %esi,%eax
sub %edi,%eax
lea (%rcx,%rsi,1),%r9d
cmp %ecx,%eax
jge 1a <func1+0x1a>
lea (%rdi,%rsi,1),%r9d
mov %edi,%r10d
imul %esi,%r10d
sub %r10d,%r9d
lea 0x1(%rdi,%rdx,1),%edx
add %esi,%edx
add %edx,%r8d
add %ecx,%r8d
add %r8d,%eax
add %r9d,%eax
imul %ecx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a2 - a1;
    if (v6 < a4)
    {
        v7 = (a1 + a2) - a1 * a2;
    }
    else
    {
        v7 = a4 - a4 + a4 + a2;
    }
    v8 = a4 * a2;
    v9 = 0;
    for (v10 = 0; v10++; v10<a1)
    {
        v9 += a4 * a5;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 11
4 5
5 5
6 7
7 7
8 7
9 7
10 19
11 19
12 19
13 19
14 19
15 19
16 13
17 19
18 20
<<<sep_out_sample>>>
mov %edi,%eax
imul %r8d,%eax
mov %eax,%r9d
neg %r9d
cmp %r9d,%edi
jle 1e <func1+0x1e>
lea 0x1(%rcx),%r9d
imul %ecx,%r9d
add %edx,%r9d
jmp 2a <func1+0x2a>
mov %edi,%r9d
sub %esi,%r9d
add %edx,%r9d
add %ecx,%r9d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
sub %eax,%ecx
lea 0x1(%r9,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = (a2 - a1 * a5) - a2;
    if (v6 < a1)
    {
        v7 = a4 * a4 + a4 + a3;
    }
    else
    {
        v7 = (a3 - (a2 - a1)) + a4;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += a5 * a1 + a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 5
6 5
7 7
8 7
9 7
10 7
11 11
12 11
13 11
14 11
15 18
16 18
17 18
18 18
19 18
20 18
21 19
<<<sep_out_sample>>>
mov %edi,%eax
neg %eax
sub %r8d,%eax
cmp %edi,%r8d
jge 15 <func1+0x15>
mov %ecx,%eax
imul %esi,%eax
add %edi,%eax
add %ecx,%eax
add %edi,%edx
add %edx,%esi
add %r8d,%esi
add %esi,%ecx
lea 0x1(%rax,%rcx,1),%eax
sub %edi,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a5 < a1)
    {
        v6 = (a4 * a2) + a1 + a4;
    }
    else
    {
        v6 = a4 - a1 - a4 - a5;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        if (a3 < a5)
        {
            v7 += a5 - a5 * a3;
        }
        else
        {
            v7 += a2 + a1 - a3;
        }
    }
    v9 = a5 - a1;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 4
5 4
6 6
7 6
8 6
9 6
10 25
11 25
12 25
13 25
14 25
15 24
16 25
17 26
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %edx,%r8d
lea (%r8,%rcx,1),%edx
add %ecx,%edi
add %edi,%esi
lea 0x1(%rdx,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = (a1 + a4) + a2;
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += a3 - a2 + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 4
6 4
7 10
8 11
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %eax,%ecx
mov %r8d,%eax
imul %edi,%eax
add %edx,%eax
imul %edi,%eax
add %eax,%ecx
mov %esi,%eax
imul %edx,%eax
sub %edi,%eax
sub %r8d,%eax
add %ecx,%eax
sub %edx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a4 < a4)
    {
        v6 = a2 - a4 + a1;
    }
    else
    {
        v6 = (a5 * a1 + a3) * a1;
    }
    v7 = (a2 * a3 - a1) - a5;
    if (a2 < a2)
    {
        v8 = a3 + a3 - a3 - a5;
    }
    else
    {
        v8 = a2 - a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 21
5 10
6 10
7 10
8 10
9 21
10 12
11 12
12 12
13 12
14 21
15 19
16 21
17 22
<<<sep_out_sample>>>
lea (%r8,%rdx,1),%eax
lea (%rsi,%rsi,1),%r10d
cmp %edi,%ecx
cmovl %eax,%r10d
cmp %r8d,%edi
jle 20 <func1+0x20>
mov %edi,%r9d
imul %esi,%r9d
imul %ecx,%r9d
jmp 2d <func1+0x2d>
mov %ecx,%r9d
sub %edx,%r9d
imul %esi,%r9d
sub %edx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
add %r8d,%ecx
add %r10d,%ecx
add %r9d,%ecx
sub %edx,%edi
imul %edi,%esi
sub %edx,%esi
lea (%rcx,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a4 < a1)
    {
        v6 = a5 + a3 + (a5 - a5);
    }
    else
    {
        v6 = (a2 + a3) + a2 - a3;
    }
    if (a5 < a1)
    {
        v7 = (a1 * a2) * a4;
    }
    else
    {
        v7 = a2 * (a4 - a3) - a3;
    }
    v8 = ((a1 - a3) * a2) - a3;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 12
6 12
7 14
8 14
9 14
10 14
11 18
12 18
13 18
14 18
15 21
16 21
17 21
18 21
19 21
20 21
21 20
22 20
23 20
24 21
25 22
<<<sep_out_sample>>>
lea (%rcx,%rcx,1),%eax
cmp %esi,%edx
jge e <func1+0xe>
lea (%rdi,%rcx,1),%eax
sub %esi,%eax
add %edi,%eax
cmp %edx,%r8d
jle 1d <func1+0x1d>
lea -0x2(%rcx),%r9d
imul %esi,%r9d
jmp 24 <func1+0x24>
mov %edi,%r9d
imul %r8d,%r9d
lea 0x1(%r9,%rdi,1),%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a5 + (a4 * a4);
    }
    if (a3 < a2)
    {
        v8 = (a1 + a4) - a2 + a1;
    }
    else
    {
        v8 = (a3 - a3 + a4) + a4;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        if (v6 < a4)
        {
            v9 += a3 * a5;
        }
        else
        {
            v9 += a5 * a5 * a5;
        }
    }
    if (a3 < a5)
    {
        v11 = (a2 * a4) - a2 - a2;
    }
    else
    {
        v11 = a1 * a5;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 15
2 9
3 9
4 11
5 11
6 11
7 29
8 29
9 31
10 31
11 31
12 35
13 35
14 37
15 37
16 37
17 37
18 37
19 37
20 38
<<<sep_out_sample>>>
mov %edi,%eax
neg %eax
cmp %r8d,%edx
jge 12 <func1+0x12>
lea (%r8,%rsi,1),%eax
imul %edi,%eax
add %edx,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a3 < a5)
    {
        v6 = a3 + (a5 + a2) * a1;
    }
    else
    {
        v6 = a5 - a1 - a5;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        if (a5 < a1)
        {
            v7 += (a4 + a4) * a2;
        }
        else
        {
            v7 += a1 - a4 - a4;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 4
4 4
5 6
6 6
7 6
8 24
9 24
10 24
11 24
12 24
13 25
<<<sep_out_sample>>>
lea 0x1(%r8),%eax
imul %edx,%eax
sub %edi,%eax
lea (%rdi,%rcx,2),%r9d
mov %esi,%r10d
imul %edx,%r10d
cmp %edi,%edx
cmovl %r10d,%r9d
mov %r8d,%r11d
sub %ecx,%r11d
add %r8d,%r11d
mov %edx,%r10d
sub %r8d,%r10d
cmp %ecx,%edx
jg 34 <func1+0x34>
mov %edi,%r10d
imul %edi,%r10d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%eax
add %r9d,%eax
add %r11d,%eax
add %r10d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a5 * a3 + a3 - a1;
    if (a3 < a1)
    {
        v7 = a2 * a3;
    }
    else
    {
        v7 = a4 + (a4 + a1);
    }
    v8 = a5 - a4 + a5;
    if (a4 < a3)
    {
        v9 = a3 - a5;
    }
    else
    {
        v9 = a1 * a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 11
5 7
6 7
7 7
8 7
9 13
10 13
11 13
12 16
13 16
14 14
15 14
16 20
17 20
18 22
19 22
20 22
21 22
22 22
23 22
24 22
25 22
26 23
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a4 + a1 + a2;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += a5 - a3 + a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 14
2 14
3 14
4 14
5 15
<<<sep_out_sample>>>
cmp %edx,%ecx
jge 1a <func1+0x1a>
mov %edi,%r9d
imul %esi,%r9d
sub %r8d,%r9d
sub %edi,%r9d
mov %esi,%r10d
imul %esi,%r10d
jmp 2a <func1+0x2a>
mov %edx,%r9d
imul %edi,%r9d
mov %r9d,%r10d
sub %edx,%r10d
sub %r8d,%r10d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
lea (%r9,%r10,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a4 < a3)
    {
        v6 = a1 * a2 - a5 - a1;
    }
    else
    {
        v6 = a3 * a1;
    }
    if (a4 < a3)
    {
        v7 = a2 * a2;
    }
    else
    {
        v7 = ((a1 * a3) - a3) - a5;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 14
8 14
9 14
10 10
11 10
12 18
13 18
14 18
15 20
16 20
17 20
18 20
19 20
20 20
21 21
<<<sep_out_sample>>>
mov $0x0,%eax
cmp %edi,%edx
jge 10 <func1+0x10>
lea (%rsi,%rdx,1),%eax
add %ecx,%eax
add %edi,%eax
add %edx,%edi
add %edi,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a3 + a5;
    }
    if (a3 < a1)
    {
        v8 = ((a2 + a3) + a4) + a1;
    }
    else
    {
        v8 = a3 - a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 15
2 9
3 9
4 11
5 11
6 11
7 17
8 17
9 17
10 17
11 17
12 18
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
add %ecx,%esi
sub %edi,%esi
lea (%r8,%rcx,2),%eax
lea (%rax,%rsi,1),%esi
lea (%rcx,%rcx,2),%eax
add %eax,%esi
sub %ecx,%edx
sub %ecx,%edx
lea (%rsi,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a5 < a5)
    {
        v6 = ((a1 + a3) * a2) + a4;
    }
    else
    {
        v6 = (a4 + a2 - a1) + a4;
    }
    v7 = (a4 + a4) + a4;
    v8 = a3 - a4 - a4;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 14
2 14
3 14
4 10
5 10
6 10
7 14
8 12
9 14
10 13
11 13
12 14
13 15
<<<sep_out_sample>>>
mov %edi,%eax
sub %r8d,%eax
add %esi,%eax
sub %ecx,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (a5 < a1)
        {
            v6 += a4 + a2 * a5;
        }
        else
        {
            v6 += (a4 + a2) - a1;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += (a1 - a3) - a1;
    }
    v10 = (a1 - a5 + a2) - a4;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 21
5 22
6 22
7 22
8 22
9 22
10 23
<<<sep_out_sample>>>
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea (%rdi,%rcx,2),%eax
lea 0x1(%r8,%rax,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a1 + a4;
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        if (a3 < a4)
        {
            v7 += (a4 - a1) + a1;
        }
        else
        {
            v7 += (a5 + a3) - a4;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 4
5 17
6 18
<<<sep_out_sample>>>
mov %edx,%eax
sub %ecx,%eax
add %eax,%eax
cmp %esi,%ecx
jle 10 <func1+0x10>
lea (%rcx,%rsi,2),%eax
imul %edi,%eax
lea 0x1(%rdi,%rdx,1),%edi
add %esi,%edi
add %r8d,%edi
lea 0x1(%rcx,%rdi,1),%ecx
add %ecx,%eax
add %esi,%esi
sub %esi,%edx
add %edx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (a4 < a1)
        {
            v6 += a3 + a2 + a4;
        }
        else
        {
            v6 += a1 - a5 - a3;
        }
    }
    if (a2 < a4)
    {
        v8 = ((a2 + a4) + a2) * a1;
    }
    else
    {
        v8 = a3 + (a3 - a4) - a4;
    }
    v9 = a3 - (a2 + a2) + a5;
    v10 = 0;
    for (v11 = 0; v11++; v11<a1)
    {
        if (v11 < a2)
        {
            v10 += (a4 + a4) - a3;
        }
        else
        {
            v10 += (a2 - a1) - a4;
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 22
4 16
5 16
6 18
7 18
8 37
9 37
10 37
11 37
12 37
13 24
14 24
15 24
16 37
17 38
<<<sep_out_sample>>>
lea (%rdi,%rsi,1),%eax
cmp %esi,%r8d
jl 11 <func1+0x11>
mov %esi,%eax
imul %ecx,%eax
sub %edi,%eax
add %ecx,%eax
lea (%rcx,%rdi,2),%r9d
lea (%r9,%r8,1),%r9d
add %r9d,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a3 + a5 - a2;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += (a2 - a5) - a2;
    }
    if (a5 < a2)
    {
        v10 = a1 + a2;
    }
    else
    {
        v10 = (a2 * a4) - a1 + a4;
    }
    v11 = (a1 + a5 + a4) + a1;
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 14
3 14
4 20
5 20
6 20
7 20
8 22
9 22
10 23
11 23
12 23
13 23
14 23
15 23
16 24
<<<sep_out_sample>>>
mov $0x1,%eax
sub %r8d,%eax
imul %edi,%eax
sub %edx,%eax
mov %r8d,%r9d
sub %esi,%r9d
cmp %esi,%ecx
jl 2b <func1+0x2b>
mov %ecx,%r10d
imul %r8d,%r10d
mov $0x1,%r9d
sub %r10d,%r9d
imul %edx,%r9d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (a4 < a1)
        {
            v6 += (a4 - a3) - a4;
        }
        else
        {
            v6 += a4 + a4;
        }
    }
    v8 = a1 - a1 * a5 - a3;
    if (a4 < a2)
    {
        v9 = a5 - a2;
    }
    else
    {
        v9 = a3 - a4 * a5 * a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 16
4 16
5 19
6 19
7 17
8 17
9 23
10 23
11 23
12 23
13 23
14 25
15 25
16 25
17 25
18 25
19 25
20 26
<<<sep_out_sample>>>
lea (%rsi,%rdi,1),%r9d
mov %edi,%eax
imul %r8d,%eax
cmp %r8d,%edx
cmovl %eax,%r9d
cmp %edi,%r9d
jge 25 <func1+0x25>
mov %ecx,%r10d
imul %ecx,%r10d
add %r8d,%r10d
sub %ecx,%r10d
jmp 33 <func1+0x33>
mov %edi,%r10d
imul %ecx,%r10d
add %r8d,%r10d
imul %r8d,%r10d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
lea (%r9,%r10,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a3 < a5)
    {
        v6 = a1 * a5;
    }
    else
    {
        v6 = a2 + a1;
    }
    if (v6 < a1)
    {
        v7 = a4 * a4 + a5 - a4;
    }
    else
    {
        v7 = (a5 + (a1 * a4)) * a5;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 10
2 6
3 6
4 6
5 6
6 12
7 12
8 14
9 14
10 14
11 14
12 14
13 18
14 18
15 18
16 18
17 20
18 20
19 20
20 20
21 20
22 20
23 21
<<<sep_out_sample>>>
mov %edx,%r9d
imul %edi,%r9d
lea (%rsi,%rdx,1),%r10d
cmp %esi,%r9d
jl 1d <func1+0x1d>
mov $0x1,%r10d
sub %r8d,%r10d
imul %ecx,%r10d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
lea (%r9,%r10,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a3 * a1 + a5 - a5;
    if (v6 < a2)
    {
        v7 = a2 + a3;
    }
    else
    {
        v7 = a4 - a4 * a5;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 7
4 5
5 5
6 11
7 11
8 11
9 13
10 13
11 13
12 13
13 13
14 13
15 14
<<<sep_out_sample>>>
push %rbx
lea 0x1(%r8),%r9d
imul %esi,%r9d
cmp %edx,%r9d
jge 1c <func1+0x1c>
mov %ecx,%eax
imul %edx,%eax
imul %ecx,%eax
mov %edx,%ebx
sub %eax,%ebx
jmp 21 <func1+0x21>
mov %ecx,%ebx
imul %ecx,%ebx
cmp %edi,%edx
jge 35 <func1+0x35>
lea (%rcx,%rdi,1),%r11d
mov %r8d,%r10d
imul %edx,%r10d
sub %r10d,%r11d
jmp 44 <func1+0x44>
mov %edx,%r11d
sub %esi,%r11d
mov %ecx,%eax
imul %ecx,%eax
imul %eax,%r11d
cmp %edx,%r9d
jge 59 <func1+0x59>
mov %edi,%r10d
imul %esi,%r10d
imul %esi,%r10d
sub %edi,%r10d
jmp 64 <func1+0x64>
lea -0x1(%rdx),%r10d
imul %edi,%r10d
sub %esi,%r10d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
add %ebx,%eax
add %r11d,%eax
add %r10d,%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a2 + a5 * a2;
    if (v6 < a3)
    {
        v7 = a3 - (a4 * a3 * a4);
    }
    else
    {
        v7 = a4 * a4;
    }
    if (a3 < a1)
    {
        v8 = a4 + a1 - a5 * a3;
    }
    else
    {
        v8 = (a3 - a2) * (a4 * a4);
    }
    if (v6 < a3)
    {
        v9 = a1 * a2 * a2 - a1;
    }
    else
    {
        v9 = (a3 * a1 - a1) - a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 4
3 4
4 5
5 5
6 7
7 7
8 7
9 7
10 7
11 7
12 11
13 11
14 13
15 13
16 15
17 15
18 15
19 15
20 15
21 19
22 19
23 19
24 19
25 19
26 21
27 21
28 23
29 23
30 23
31 23
32 23
33 27
34 27
35 27
36 29
37 29
38 29
39 29
40 29
41 29
42 29
43 29
44 30
45 30
<<<sep_out_sample>>>
add %edx,%edi
lea (%rdi,%rsi,1),%eax
add %eax,%r8d
lea (%r8,%rcx,1),%eax
add %edi,%edx
add %edx,%eax
sub %esi,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a5 < a5)
    {
        v6 = a1 - a4;
    }
    else
    {
        v6 = (a3 + a1) + a3;
    }
    v7 = a2 + (a4 - a2) - a2;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 10
2 13
3 13
4 13
5 10
6 13
7 12
8 13
9 14
<<<sep_out_sample>>>
lea -0x1(%rcx),%eax
imul %esi,%eax
add %edx,%eax
lea (%rcx,%rdx,1),%r9d
cmp %ecx,%esi
jge 1f <func1+0x1f>
mov $0x1,%r10d
sub %edi,%r10d
imul %r8d,%r10d
jmp 2f <func1+0x2f>
mov $0x1,%r10d
sub %r8d,%r10d
imul %esi,%r10d
add %r8d,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (v6 < a2)
        {
            v6 += a4 - a3 + a1;
        }
        else
        {
            v6 += (a2 + a5) * a5;
        }
    }
    if (a4 < a4)
    {
        v8 = (a1 + a1) * a2;
    }
    else
    {
        v8 = (a2 * a4 - a2) + a3;
    }
    v9 = a4 + a3 + a3 - a3;
    if (a2 < a4)
    {
        v10 = a5 - a5 * a1;
    }
    else
    {
        v10 = (a2 - (a5 * a2)) + a5;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 22
4 24
5 25
6 25
7 27
8 27
9 27
10 27
11 31
12 31
13 31
14 31
15 33
16 33
17 33
18 33
19 33
20 33
21 33
22 34
<<<sep_out_sample>>>
cmp %edi,%r8d
jge 10 <func1+0x10>
lea -0x1(%rdi,%rdx,1),%r9d
imul %edi,%r9d
jmp 1a <func1+0x1a>
mov %edi,%r9d
imul %esi,%r9d
add %edx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
imul %edx,%esi
lea (%rax,%rsi,1),%edx
mov %r8d,%eax
sub %ecx,%eax
imul %eax,%edi
sub %r8d,%edi
lea (%rdx,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a5 < a1)
    {
        v6 = a1 * (a1 + a3) - a1;
    }
    else
    {
        v6 = a3 + (a1 * a2);
    }
    if (a5 < a5)
    {
        v7 = a3 * (a5 - (a5 - a3));
    }
    else
    {
        v7 = a2 * a3;
    }
    v8 = (a5 - a4) * a1 - a5;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 21
10 21
11 21
12 21
13 21
14 18
15 21
16 20
17 20
18 20
19 20
20 21
21 22
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (a2 < a4)
        {
            v6 += a3 + a5;
        }
        else
        {
            v6 += a2 - (a2 - a5);
        }
    }
    v8 = a5 * ((a1 - a1) * a5);
    v9 = 0;
    for (v10 = 0; v10++; v10<a1)
    {
        v9 += a3 + (a1 - a4);
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 22
4 22
5 23
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += (a3 + a4) - a1;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += a4 + (a3 + a1);
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a5)
    {
        v10 += a1 + (a4 + a5);
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 19
2 19
3 19
4 19
5 20
<<<sep_out_sample>>>
mov %esi,%r10d
sub %edx,%r10d
mov %ecx,%r9d
imul %ecx,%r9d
sub %r9d,%r10d
lea 0x1(%rdi),%r9d
imul %ecx,%r9d
sub %esi,%r9d
test %r8d,%r8d
jle 33 <func1+0x33>
mov $0x1,%r11d
sub %ecx,%r11d
imul %r8d,%r11d
imul %edi,%r11d
jmp 3d <func1+0x3d>
lea (%rdi,%rdx,1),%r11d
add %ecx,%r11d
add %r8d,%r11d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea (%rcx,%r10,1),%eax
add %r9d,%eax
add %r11d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = (a2 - a3) - a4 * a4;
    v7 = a4 + (a4 * a1) - a2;
    if (v8 < a5)
    {
        v8 = (a5 - (a5 * a4)) * a1;
    }
    else
    {
        v8 = a1 + a3 + a4 + a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 4
6 5
7 5
8 5
9 6
10 6
11 8
12 8
13 8
14 8
15 8
16 12
17 12
18 12
19 14
20 14
21 14
22 14
23 14
24 14
25 14
26 15
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %r8d,%esi
add %esi,%ecx
imul %r8d,%r8d
lea 0x1(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a5 * a5;
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a4 - a5 - a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 4
6 10
7 11
<<<sep_out_sample>>>
lea 0x2(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12, v13 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a5 - a2;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += (a4 * a3) * a3;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a1)
    {
        if (a3 < a1)
        {
            v10 += (a5 * a1) - a4;
        }
        else
        {
            v10 += a5 * a2;
        }
    }
    v12 = 0;
    for (v13 = 0; v13++; v13<a1)
    {
        if (v13 < a2)
        {
            v12 += a4 * a1 - a4;
        }
        else
        {
            v12 += a5 + a4 - a1;
        }
    }
    return v12+v13+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 38
2 38
3 38
4 38
5 39
<<<sep_out_sample>>>
mov %r8d,%r9d
sub %esi,%r9d
add %edi,%r9d
add %ecx,%r9d
lea (%rdi,%rcx,1),%eax
sub %r8d,%eax
mov %edi,%r10d
imul %r8d,%r10d
cmp %edx,%edi
cmovg %r10d,%eax
add %r9d,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (a3 < a3)
        {
            v6 += a1 - a4;
        }
        else
        {
            v6 += a1 * a3 - a2;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += a5 * a5 * a5;
    }
    v10 = a5 - a2 + a1 + a4;
    if (a3 < a1)
    {
        v11 = a1 * a5;
    }
    else
    {
        v11 = a1 + a4 - a5;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 21
5 28
6 28
7 24
8 24
9 24
10 24
11 30
12 30
13 30
14 30
15 30
16 30
17 31
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%r9d
mov %ecx,%r10d
sub %edi,%r10d
imul %r9d,%r10d
add %ecx,%edx
lea (%rdx,%r8,1),%edi
add %esi,%edx
mov %ecx,%eax
imul %esi,%eax
cmp %r8d,%ecx
cmovg %eax,%edx
lea (%r9,%rsi,1),%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %esi,%eax
add %edi,%eax
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = (a1 + a3) * (a4 - a1);
    v7 = a2 + a1 - a1;
    v8 = (a4 + a3) + a5;
    if (a5 < a4)
    {
        v9 = a4 * a2;
    }
    else
    {
        v9 = (a4 + a3) + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 6
6 6
7 13
8 9
9 9
10 9
11 9
12 15
13 15
14 15
15 15
16 15
17 15
18 15
19 16
<<<sep_out_sample>>>
mov %r8d,%eax
sub %edx,%eax
cmp %edi,%r8d
jl 1b <func1+0x1b>
mov %ecx,%eax
imul %esi,%eax
mov %edi,%r9d
sub %eax,%r9d
mov %r9d,%eax
sub %r8d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a5 < a1)
    {
        v6 = (a3 + a5) - (a3 + a3);
    }
    else
    {
        v6 = (a1 - (a4 * a2)) - a5;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        if (a3 < a5)
        {
            v7 += a5 * (a1 * a4);
        }
        else
        {
            v7 += a2 - a4 * a1;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 6
2 6
3 4
4 4
5 10
6 10
7 10
8 10
9 10
10 10
11 24
12 24
13 24
14 24
15 24
16 25
<<<sep_out_sample>>>
mov %ecx,%r9d
imul %ecx,%r9d
lea (%r9,%rdi,1),%r11d
lea (%rcx,%rsi,1),%r10d
add %r8d,%r10d
cmp $0x1,%r8d
jle 25 <func1+0x25>
mov %esi,%r9d
imul %edi,%r9d
add %edx,%r9d
sub %r8d,%r9d
add %r9d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %r11d,%eax
add %r10d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a5 - (a5 * a2);
    }
    v8 = a1 + a4 * a4;
    v9 = a4 + a2 + a5;
    if (v7 < a5)
    {
        v10 = a3 + a2 * a1 - a5;
    }
    else
    {
        v10 = a4 * a4;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 9
4 10
5 10
6 11
7 11
8 13
9 13
10 13
11 13
12 19
13 19
14 19
15 19
16 19
17 19
18 19
19 20
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%r9d
add %esi,%r9d
add %r8d,%r9d
add %ecx,%r9d
lea (%rdi,%rcx,1),%eax
imul %esi,%eax
sub %r8d,%eax
add %r9d,%eax
mov %esi,%r10d
sub %edx,%r10d
mov %r10d,%edx
imul %ecx,%edx
add %edi,%edx
add %edx,%eax
mov %esi,%edx
sub %edi,%edx
add %edx,%eax
add %esi,%ecx
imul %r8d,%esi
add %esi,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a2 * (a1 + a4) - a5;
    v7 = a1 + (a2 - a3) * a4;
    v8 = a2 - a1;
    v9 = (a4 + a2) + a2 * a5;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 8
2 8
3 8
4 8
5 4
6 4
7 4
8 8
9 5
10 5
11 5
12 5
13 5
14 8
15 6
16 6
17 8
18 7
19 7
20 7
21 8
22 9
<<<sep_out_sample>>>
test %edi,%edi
jle d <func1+0xd>
mov %esi,%eax
sub %r8d,%eax
add %esi,%eax
jmp 17 <func1+0x17>
lea (%r8,%r8,1),%eax
imul %esi,%eax
imul %edi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (v6 < a1)
    {
        v6 = a2 - a5 + a2;
    }
    else
    {
        v6 = a1 * ((a5 + a5) * a2);
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += (a3 * a5) * a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 17
11 17
12 17
13 17
14 17
15 18
<<<sep_out_sample>>>
cmp %esi,%edi
jge 1c <func1+0x1c>
mov %r8d,%r9d
imul %edx,%r9d
imul %ecx,%r9d
imul %edi,%r9d
mov %esi,%r10d
imul %esi,%r10d
jmp 29 <func1+0x29>
mov %edi,%r10d
imul %r8d,%r10d
mov $0x0,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
add %r10d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a1 < a2)
    {
        v6 = (a5 * a3 * a4) * a1;
    }
    else
    {
        v6 = a4 * (a2 - a2) * a1;
    }
    if (a1 < a2)
    {
        v7 = a2 * a2;
    }
    else
    {
        v7 = a1 * a5;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 14
8 14
9 14
10 18
11 18
12 10
13 20
14 20
15 20
16 20
17 20
18 20
19 21
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
add %ecx,%esi
sub %r8d,%edi
lea 0x1(%rsi,%rdi,1),%eax
add %ecx,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = (a3 - a3 - a5) + a1;
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += (a4 + a5) + a2;
    }
    if (a2 < a2)
    {
        v9 = a1 * a5 - a4;
    }
    else
    {
        v9 = a3 + a4;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a5)
    {
        if (a4 < a4)
        {
            v10 += a3 + a3;
        }
        else
        {
            v10 += a4 - a2;
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 30
2 30
3 30
4 30
5 4
6 30
7 16
8 30
9 31
<<<sep_out_sample>>>
push %rbx
cmp %ecx,%esi
jge c <func1+0xc>
mov %esi,%ebx
imul %ecx,%ebx
jmp 15 <func1+0x15>
mov %edi,%ebx
imul %ecx,%ebx
sub %edx,%ebx
sub %edi,%ebx
cmp %r8d,%esi
jle 2b <func1+0x2b>
mov %edi,%r11d
imul %edx,%r11d
sub $0x1,%r11d
imul %r8d,%r11d
jmp 38 <func1+0x38>
mov %edx,%r11d
imul %ecx,%r11d
add %r8d,%r11d
sub %ecx,%r11d
lea (%rsi,%r8,1),%r10d
imul %r8d,%r10d
imul %ecx,%r10d
cmp %r8d,%edi
jle 58 <func1+0x58>
mov %edx,%r9d
imul %esi,%r9d
add %r8d,%r9d
sub %ecx,%r9d
jmp 65 <func1+0x65>
mov %edi,%r9d
imul %ecx,%r9d
add %r8d,%r9d
add %edi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %ebx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a2 < a4)
    {
        v6 = a2 * a4;
    }
    else
    {
        v6 = (a1 * a4 - a3) - a1;
    }
    if (a5 < a2)
    {
        v7 = (a5 * (a1 * a3)) - a5;
    }
    else
    {
        v7 = a5 + a3 * a4 - a4;
    }
    v8 = a5 * (a2 + a5) * a4;
    if (a5 < a1)
    {
        v9 = a5 + a3 * a2 - a4;
    }
    else
    {
        v9 = a5 + (a1 * a4) + a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 4
3 4
4 6
5 6
6 6
7 10
8 10
9 10
10 10
11 12
12 12
13 14
14 14
15 14
16 14
17 14
18 18
19 18
20 18
21 18
22 20
23 20
24 20
25 21
26 21
27 23
28 23
29 23
30 23
31 23
32 27
33 27
34 27
35 27
36 29
37 29
38 29
39 29
40 29
41 29
42 29
43 29
44 30
45 30
<<<sep_out_sample>>>
mov %esi,%r10d
imul %esi,%r10d
add %edi,%r10d
imul %r8d,%r10d
cmp %ecx,%edi
jle 1d <func1+0x1d>
mov %edi,%r9d
sub %esi,%r9d
add %edx,%r9d
jmp 28 <func1+0x28>
lea 0x1(%rdx),%r9d
imul %ecx,%r9d
sub %r8d,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = ((a2 * a2) + a1) * a5;
    if (a4 < a1)
    {
        v7 = a1 - a2 + a3;
    }
    else
    {
        v7 = a3 * a4 + a4 - a5;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 5
6 5
7 7
8 7
9 7
10 7
11 11
12 11
13 11
14 13
15 13
16 13
17 13
18 13
19 13
20 14
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %r8d,%edx
add %ecx,%edx
lea (%rsi,%r8,1),%eax
imul %ecx,%eax
imul %ecx,%eax
add %edx,%eax
sub %r8d,%esi
add %esi,%ecx
imul %ecx,%r8d
lea 0x1(%rax,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a4 * ((a2 + a5) * a4);
    v7 = (a4 + (a2 - a5)) * a5;
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        if (v7 < a3)
        {
            v8 += a5 * a5 * a1;
        }
        else
        {
            v8 += a2 + a3;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 18
5 4
6 4
7 4
8 18
9 5
10 5
11 5
12 18
13 19
<<<sep_out_sample>>>
mov %edx,%eax
sub %edi,%eax
cmp %edx,%ecx
jge 10 <func1+0x10>
lea -0x1(%rdi),%eax
imul %ecx,%eax
add %esi,%eax
add %edi,%edx
add %edx,%esi
add %r8d,%esi
add %ecx,%esi
add %esi,%eax
add %edi,%edi
sub %edi,%ecx
add %ecx,%r8d
lea 0x1(%rax,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a4 < a3)
    {
        v6 = ((a4 * a1) - a4) + a2;
    }
    else
    {
        v6 = a3 - a1;
    }
    v7 = a5 - (a1 + a1 - a4);
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        if (v8 < a3)
        {
            v8 += a2 + a5;
        }
        else
        {
            v8 += (a2 - a3) - a4;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 4
4 4
5 6
6 6
7 6
8 25
9 25
10 25
11 25
12 25
13 12
14 12
15 12
16 25
17 26
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea (%r8,%rcx,1),%eax
add %edx,%eax
imul %edi,%edi
sub %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a3 - a2 + a2;
    v7 = (a5 - a5) - a1 * a1;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 6
6 5
7 6
8 7
<<<sep_out_sample>>>
cmp %edx,%r8d
jge f <func1+0xf>
mov %edi,%eax
sub %ecx,%eax
imul %r8d,%eax
jmp 18 <func1+0x18>
lea 0x1(%r8),%eax
imul %ecx,%eax
sub %esi,%eax
lea (%rdx,%rdx,1),%r9d
mov %edi,%r10d
imul %ecx,%r10d
test %ecx,%ecx
cmovg %r10d,%r9d
lea 0x1(%rdi,%rdx,1),%edx
add %esi,%edx
add %edx,%r8d
add %r8d,%ecx
add %eax,%ecx
add %ecx,%r9d
sub $0x1,%esi
imul %esi,%edi
lea (%r9,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a5 < a3)
    {
        v6 = a5 * (a1 - a4);
    }
    else
    {
        v6 = a4 + a4 * a5 - a2;
    }
    if (v7 < a4)
    {
        v7 = a1 * a4;
    }
    else
    {
        v7 = a3 + a3;
    }
    v8 = (a2 * a1) - a1;
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        if (v6 < a4)
        {
            v9 += a4 - a2 - a4;
        }
        else
        {
            v9 += a5 + a5 * a2;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 18
11 14
12 14
13 14
14 14
15 33
16 33
17 33
18 33
19 33
20 33
21 20
22 20
23 33
24 34
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
add %ecx,%esi
lea (%rdi,%rcx,2),%eax
add %r8d,%eax
lea 0x1(%rsi,%rax,1),%eax
imul %r8d,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = ((a4 + a4) + a1) + a5;
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += a4 - a2 + a5;
    }
    v9 = a5 * a5;
    v10 = 0;
    for (v11 = 0; v11++; v11<a3)
    {
        v10 += a4 - a3;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 16
4 16
5 4
6 4
7 16
8 10
9 16
10 17
<<<sep_out_sample>>>
cmp $0x1,%r8d
jle f <func1+0xf>
lea (%rdx,%r8,2),%eax
imul %esi,%eax
jmp 1e <func1+0x1e>
mov %ecx,%eax
sub %r8d,%eax
mov %ecx,%r9d
imul %esi,%r9d
sub %r9d,%eax
lea (%rdi,%rdx,1),%r9d
cmp $0x1,%edx
jg 2e <func1+0x2e>
mov %edx,%r9d
imul %edx,%r9d
lea (%rdx,%rdi,1),%r10d
cmp %edx,%edi
jg 46 <func1+0x46>
mov %edx,%r10d
imul %edx,%r10d
mov %edi,%r11d
sub %r10d,%r11d
mov %r11d,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += (a4 + a2) - a1;
    }
    if (v7 < a5)
    {
        v8 = ((a3 + a5) + a5) * a2;
    }
    else
    {
        v8 = (a4 - a5) - a4 * a2;
    }
    if (v7 < a3)
    {
        v9 = a1 + a3;
    }
    else
    {
        v9 = a3 * a3;
    }
    if (a3 < a1)
    {
        v10 = a3 + a1;
    }
    else
    {
        v10 = a1 - a3 * a3;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 15
7 15
8 15
9 15
10 15
11 19
12 17
13 17
14 23
15 23
16 27
17 25
18 25
19 31
20 31
21 31
22 31
23 31
24 33
25 33
26 33
27 33
28 33
29 33
30 33
31 34
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
lea (%rdi,%rcx,2),%edx
add %edx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += (a5 + a2) * a4;
    }
    v8 = (a1 + a4) + a4 + a1;
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        if (a2 < a5)
        {
            v9 += a4 - (a2 - a1);
        }
        else
        {
            v9 += a3 - a5;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 22
4 22
5 9
6 9
7 22
8 23
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
lea 0x1(%rcx,%r8,1),%eax
mov %edi,%r8d
imul %edi,%r8d
sub %r8d,%ecx
add %ecx,%edi
add %edi,%eax
imul %edx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a4 + (a4 + a1);
    }
    v8 = a1 - ((a1 * a1) - a4);
    v9 = a3 * a2;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 11
5 9
6 9
7 9
8 9
9 11
10 10
11 11
12 12
<<<sep_out_sample>>>
mov %r8d,%r9d
sub %esi,%r9d
sub %ecx,%r9d
sub %edi,%r9d
cmp %edx,%r8d
jle 21 <func1+0x21>
mov %ecx,%r10d
sub %edx,%r10d
mov %esi,%eax
imul %esi,%eax
add %r10d,%eax
jmp 2b <func1+0x2b>
mov %ecx,%eax
imul %r8d,%eax
sub %edi,%eax
sub %edi,%eax
cmp %edi,%eax
jge 44 <func1+0x44>
mov %edi,%r10d
imul %ecx,%r10d
mov %edx,%r11d
sub %r10d,%r11d
mov %r11d,%r10d
add %ecx,%r10d
jmp 4b <func1+0x4b>
lea (%rdx,%rdx,2),%r10d
add %edi,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = (a5 - a2) - a4 - a1;
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += a3 - a4 - a1;
    }
    if (a3 < a5)
    {
        v9 = a4 - a3 + (a2 * a2);
    }
    else
    {
        v9 = (a4 * a5) - a1 - a1;
    }
    if (v9 < a1)
    {
        v10 = (a3 - (a1 * a4)) + a4;
    }
    else
    {
        v10 = ((a3 + a3) + a3) + a1;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 10
6 10
7 12
8 12
9 12
10 12
11 12
12 12
13 16
14 16
15 16
16 16
17 18
18 18
19 20
20 20
21 20
22 20
23 20
24 20
25 20
26 24
27 24
28 26
29 26
30 26
31 26
32 26
33 26
34 26
35 27
<<<sep_out_sample>>>
push %rbx
cmp %edi,%edx
jge e <func1+0xe>
mov %ecx,%r9d
imul %edx,%r9d
jmp 18 <func1+0x18>
mov %esi,%r9d
imul %edx,%r9d
add %r8d,%r9d
mov %r8d,%ebx
imul %ecx,%ebx
lea (%rdi,%r8,2),%r10d
test %edi,%edi
jle 31 <func1+0x31>
mov %r8d,%eax
imul %r8d,%eax
lea (%rax,%rcx,2),%r10d
lea (%rcx,%r8,1),%r11d
add %edx,%r11d
cmp %esi,%r9d
jl 4a <func1+0x4a>
mov %esi,%r11d
imul %ecx,%r11d
add %edi,%r11d
add %edx,%r11d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
add %ebx,%r9d
add %r9d,%r10d
lea (%r10,%r11,1),%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a3 < a1)
    {
        v6 = a4 * a3;
    }
    else
    {
        v6 = (a2 * a3) + a5;
    }
    v7 = a5 * a4;
    if (v8 < a1)
    {
        v8 = a4 + a5 * a5 + a4;
    }
    else
    {
        v8 = a5 + a5 + a1;
    }
    if (v6 < a2)
    {
        v9 = a4 + a5 + a3;
    }
    else
    {
        v9 = (a1 + (a2 * a4)) + a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 4
3 4
4 6
5 6
6 6
7 10
8 10
9 10
10 12
11 12
12 19
13 13
14 13
15 15
16 15
17 15
18 23
19 23
20 21
21 21
22 27
23 27
24 27
25 27
26 29
27 29
28 29
29 29
30 29
31 29
32 29
33 29
34 30
35 30
<<<sep_out_sample>>>
mov %esi,%r9d
sub %edi,%r9d
lea (%rcx,%rcx,1),%r10d
cmp %r9d,%edi
jle 1e <func1+0x1e>
mov %r8d,%r10d
imul %r8d,%r10d
add $0x1,%r10d
imul %esi,%r10d
cmp %ecx,%r8d
jge 30 <func1+0x30>
lea 0x1(%rdx),%r11d
imul %edi,%r11d
sub %esi,%r11d
jmp 3c <func1+0x3c>
mov %edx,%eax
imul %r8d,%eax
mov %edi,%r11d
sub %eax,%r11d
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
add %r9d,%r10d
lea (%r10,%r11,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a2 - a1;
    if (v6 < a1)
    {
        v7 = (a2 * (a5 * a5)) + a2;
    }
    else
    {
        v7 = a4 + a4;
    }
    if (a5 < a4)
    {
        v8 = a1 + a1 * a3 - a2;
    }
    else
    {
        v8 = a1 - a3 * a5;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        v9 += a2 - a4 + a4;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 11
4 5
5 5
6 7
7 7
8 7
9 7
10 13
11 13
12 15
13 15
14 15
15 15
16 19
17 19
18 19
19 19
20 26
21 26
22 26
23 26
24 26
25 26
26 26
27 27
<<<sep_out_sample>>>
mov $0x1,%r10d
sub %edi,%r10d
imul %ecx,%r10d
imul %edx,%r10d
mov %r8d,%eax
sub %edi,%eax
lea (%rdx,%rcx,1),%r9d
cmp %r8d,%esi
cmovl %eax,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a2 < a2)
    {
        v6 = a3 - a5;
    }
    else
    {
        v6 = a3 * (a4 - a1 * a4);
    }
    if (a2 < a5)
    {
        v7 = a5 - a1;
    }
    else
    {
        v7 = a3 + a4;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 14
6 14
7 14
8 14
9 14
10 20
11 20
12 20
13 20
14 20
15 20
16 21
<<<sep_out_sample>>>
cmp $0x1,%edi
jle c <func1+0xc>
lea (%rdx,%rcx,2),%eax
sub %edi,%eax
jmp 14 <func1+0x14>
mov %edx,%eax
sub %esi,%eax
sub %edi,%eax
sub %esi,%eax
mov %edx,%r9d
sub %edi,%r9d
cmp %ecx,%edx
jl 25 <func1+0x25>
mov %r8d,%r9d
imul %r8d,%r9d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a3 * a3;
    }
    if (v7 < a1)
    {
        v8 = (a4 + a4) + a3 - a1;
    }
    else
    {
        v8 = (a3 - a2) - a1 - a2;
    }
    if (a3 < a4)
    {
        v9 = a3 + a1 - a1 - a1;
    }
    else
    {
        v9 = a5 * a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 15
7 15
8 15
9 15
10 19
11 19
12 17
13 17
14 23
15 23
16 25
17 25
18 25
19 25
20 25
21 25
22 26
<<<sep_out_sample>>>
test %edx,%edx
jle b <func1+0xb>
mov %esi,%eax
sub %r8d,%eax
jmp 18 <func1+0x18>
lea (%rcx,%rdx,1),%r9d
mov %r8d,%eax
imul %ecx,%eax
add %r9d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += (a1 + a2) + a3;
    }
    if (v6 < a3)
    {
        v8 = a2 - a5;
    }
    else
    {
        v8 = (a4 + a3) + a5 * a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 15
7 15
8 15
9 15
10 17
11 17
12 17
13 17
14 17
15 18
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%r9d
add %esi,%r9d
add %r8d,%r9d
add %ecx,%r9d
mov %r8d,%eax
sub %edx,%eax
add %ecx,%eax
imul %ecx,%eax
add %r9d,%eax
imul %esi,%edi
imul %edx,%edi
imul %r8d,%edi
add %eax,%edi
add %esi,%r8d
imul %ecx,%edx
sub %edx,%r8d
lea (%rdi,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = (a5 - a3 + a4) * a4;
    v7 = ((a1 * a2) * a3) * a5;
    v8 = a2 + a5 - a3 * a4;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 7
2 7
3 7
4 7
5 4
6 4
7 4
8 4
9 7
10 5
11 5
12 5
13 7
14 6
15 6
16 6
17 7
18 8
<<<sep_out_sample>>>
lea (%rdx,%rcx,1),%eax
mov %edi,%r9d
imul %r8d,%r9d
sub %r9d,%eax
cmp $0x1,%r8d
jle 20 <func1+0x20>
lea (%r8,%rsi,1),%r9d
imul %r8d,%r9d
sub %ecx,%r9d
jmp 2d <func1+0x2d>
mov %esi,%r9d
imul %esi,%r9d
add %r8d,%r9d
add %edi,%r9d
lea 0x1(%r9,%rdi,1),%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += (a4 - a1) * a2;
    }
    v8 = (a3 + a4) - a1 * a5;
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        if (a2 < a4)
        {
            v9 += (a3 + a4) + a4;
        }
        else
        {
            v9 += a2 * a5;
        }
    }
    if (v10 < a5)
    {
        v11 = ((a5 + a2) * a5) - a4;
    }
    else
    {
        v11 = a1 + (a2 * a2 + a5);
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 9
4 9
5 22
6 22
7 24
8 24
9 24
10 24
11 28
12 28
13 28
14 28
15 30
16 30
17 30
18 30
19 30
20 30
21 31
<<<sep_out_sample>>>
push %rbx
mov %edx,%r10d
imul %r8d,%r10d
lea (%rdx,%rsi,1),%ebx
cmp %esi,%r8d
jle 1c <func1+0x1c>
mov %esi,%r11d
imul %edi,%r11d
add %r10d,%r11d
jmp 23 <func1+0x23>
mov %ecx,%r11d
imul %ecx,%r11d
lea (%rsi,%rdx,1),%r9d
test %r8d,%r8d
jle 36 <func1+0x36>
mov %esi,%r9d
imul %edx,%r9d
neg %r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %ebx,%eax
add %r11d,%eax
add %r9d,%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a3 * a5;
    if (a4 < a4)
    {
        v7 = a3 * a1;
    }
    else
    {
        v7 = (a2 - a2) + a3 + a2;
    }
    if (a2 < a5)
    {
        v8 = a3 * a5 + (a2 * a1);
    }
    else
    {
        v8 = a4 * a4;
    }
    if (v9 < a5)
    {
        v9 = (a5 - a2 * a3) - a5;
    }
    else
    {
        v9 = a1 + (a2 - (a1 - a3));
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 4
3 4
4 11
5 13
6 13
7 15
8 15
9 15
10 15
11 19
12 19
13 27
14 21
15 21
16 23
17 23
18 23
19 29
20 29
21 29
22 29
23 29
24 29
25 29
26 29
27 30
28 30
<<<sep_out_sample>>>
add %edx,%edi
add %esi,%edi
add %r8d,%edi
add %edi,%ecx
lea -0x1(%rdx),%eax
imul %eax,%r8d
sub %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
imul %edx,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = ((a3 * a5) - a5) - a2;
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        if (v8 < a1)
        {
            v7 += a2 - a2 - a3;
        }
        else
        {
            v7 += a1 - a1 * a5;
        }
    }
    v9 = a3 * a3;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 18
5 4
6 4
7 4
8 18
9 17
10 18
11 19
<<<sep_out_sample>>>
cmp %esi,%r8d
jge f <func1+0xf>
lea (%rdi,%rsi,2),%r9d
imul %edx,%r9d
jmp 1c <func1+0x1c>
mov %ecx,%r9d
imul %esi,%r9d
add %edi,%r9d
add %ecx,%r9d
mov %ecx,%eax
sub %esi,%eax
cmp %ecx,%r9d
jge 2f <func1+0x2f>
mov %ecx,%eax
imul %r8d,%eax
add %edx,%eax
sub %ecx,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a5 < a2)
    {
        v6 = (a1 + (a2 + a2)) * a3;
    }
    else
    {
        v6 = (a1 + a4 * a2) + a4;
    }
    if (v6 < a4)
    {
        v7 = a3 + a4 * a5 - a4;
    }
    else
    {
        v7 = (a3 + (a4 - a3)) - a2;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 10
10 18
11 18
12 12
13 12
14 14
15 14
16 14
17 14
18 20
19 20
20 20
21 20
22 20
23 20
24 21
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %esi,%esi
imul %r8d,%esi
lea (%rax,%rcx,2),%eax
lea 0x1(%rsi,%rax,1),%eax
imul %r8d,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = a4 + (a2 + a2) * a5;
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        if (v6 < a1)
        {
            v7 += a1 - a2 * a1;
        }
        else
        {
            v7 += (a3 - a3) + a1;
        }
    }
    v9 = a5 * a5;
    v10 = 0;
    for (v11 = 0; v11++; v11<a1)
    {
        if (v10 < a3)
        {
            v10 += a1 - a3 + a1;
        }
        else
        {
            v10 += a4 * a2 + a5;
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 30
2 30
3 30
4 4
5 4
6 4
7 30
8 17
9 30
10 31
<<<sep_out_sample>>>
mov %edi,%r9d
imul %esi,%r9d
cmp %edx,%ecx
jge 16 <func1+0x16>
mov %ecx,%eax
imul %edx,%eax
add %esi,%eax
sub %edx,%eax
jmp 21 <func1+0x21>
mov %r8d,%eax
sub %edi,%eax
add $0x1,%eax
imul %edi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a1 * a2;
    if (a4 < a3)
    {
        v7 = (a4 * a3) + a2 - a3;
    }
    else
    {
        v7 = a1 + a1 * (a5 - a1);
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += a3 * a2 - a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 5
4 5
5 7
6 7
7 7
8 7
9 7
10 11
11 11
12 11
13 11
14 18
15 18
16 18
17 18
18 18
19 18
20 19
<<<sep_out_sample>>>
lea 0x1(%rsi,%rsi,1),%r9d
imul %esi,%r9d
lea (%rsi,%rdx,1),%eax
cmp %edi,%r8d
jle 19 <func1+0x19>
lea (%r8,%rdi,1),%eax
add %esi,%eax
sub %edx,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = (a2 + a2) * a2 + a2;
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        if (a3 < a5)
        {
            v7 += (a4 * a3) + a1;
        }
        else
        {
            v7 += (a4 + a5) - a5;
        }
    }
    if (a1 < a5)
    {
        v9 = a5 + a1 + a2 - a3;
    }
    else
    {
        v9 = a2 + a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 23
4 17
5 17
6 19
7 19
8 19
9 25
10 25
11 25
12 25
13 25
14 25
15 26
<<<sep_out_sample>>>
add %edx,%edi
add %esi,%edi
add %r8d,%edi
add %ecx,%edi
sub %esi,%ecx
sub %edx,%ecx
add %ecx,%r8d
lea 0x1(%rdi,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a4 - a2 - a3 + a5;
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        if (v8 < a1)
        {
            v7 += a2 * a2;
        }
        else
        {
            v7 += (a5 + a3) + a3;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 4
6 4
7 4
8 17
9 18
<<<sep_out_sample>>>
lea 0x1(%rsi,%rcx,1),%eax
add %eax,%edi
add %edx,%edi
add %edi,%esi
add %r8d,%esi
add %esi,%ecx
imul %r8d,%edx
lea 0x1(%rcx,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = a5 + (a5 * a3 - a5);
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        if (v8 < a2)
        {
            v7 += (a4 + a2) * a4;
        }
        else
        {
            v7 += (a5 - a1) + a4;
        }
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        if (v10 < a2)
        {
            v9 += a3 - a5 * a4;
        }
        else
        {
            v9 += a1 + (a2 * a5);
        }
    }
    v11 = a2 + a4;
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 30
2 30
3 30
4 30
5 30
6 30
7 4
8 30
9 31
<<<sep_out_sample>>>
add %edx,%edi
add %esi,%edi
add %r8d,%edi
lea (%rdx,%rcx,2),%eax
lea (%rax,%rdi,1),%eax
add %edx,%r8d
add %r8d,%eax
mov %edx,%ecx
sub %esi,%ecx
imul %edx,%ecx
add %ecx,%eax
imul %edx,%edx
sub %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a4 + a3;
    v7 = a5 + a3;
    v8 = a3 * (a3 - a2);
    v9 = (a5 - a3 - a5) * a3;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 8
2 8
3 8
4 4
5 8
6 5
7 8
8 6
9 6
10 6
11 8
12 7
13 8
14 9
<<<sep_out_sample>>>
mov %esi,%r11d
imul %esi,%r11d
add %edx,%r11d
imul %edi,%r11d
mov %ecx,%r10d
imul %r8d,%r10d
lea (%rsi,%rdi,1),%r9d
cmp %r8d,%edi
cmovle %r8d,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
sub %ecx,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = (a3 + a2 * a2) * a1;
    v7 = (a4 - a5 + a5) * a5;
    if (a5 < a1)
    {
        v8 = a2 + a1;
    }
    else
    {
        v8 = a5 - (a3 * (a2 - a2));
    }
    v9 = a3 - a4 + (a5 - a5);
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 5
6 5
7 8
8 8
9 8
10 15
11 15
12 15
13 15
14 15
15 15
16 15
17 14
18 15
19 16
<<<sep_out_sample>>>
lea (%rdi,%r8,2),%r10d
sub %esi,%r10d
mov %ecx,%r9d
sub %esi,%r9d
lea (%rdx,%rdi,1),%eax
sub %eax,%r9d
lea (%r8,%rsi,1),%eax
test %esi,%esi
jle 20 <func1+0x20>
imul %ecx,%eax
add %edi,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r10d,%ecx
lea 0x1(%r9,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = ((a5 + a1) - a2) + a5;
    v7 = (a4 - a2) - (a3 + a1);
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        if (v6 < a1)
        {
            v8 += a5 - a5 - a5;
        }
        else
        {
            v8 += a2 + a2 + a5;
        }
    }
    if (v10 < a2)
    {
        v10 = a4 * (a5 + a2) + a1;
    }
    else
    {
        v10 = a5 + a2;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 5
4 5
5 5
6 5
7 24
8 18
9 18
10 20
11 20
12 26
13 26
14 26
15 26
16 26
17 26
18 26
19 27
<<<sep_out_sample>>>
cmp %ecx,%r8d
jge 18 <func1+0x18>
mov %ecx,%r9d
imul %ecx,%r9d
mov %r8d,%eax
imul %r8d,%eax
add %r9d,%eax
jmp 1d <func1+0x1d>
mov %edx,%eax
imul %esi,%eax
mov %edi,%r9d
imul %r8d,%r9d
imul %edi,%r9d
sub %esi,%r9d
lea 0x1(%rdi,%r9,1),%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    if (a5 < a4)
    {
        v6 = a4 * a4 + a5 * a5;
    }
    else
    {
        v6 = a3 * a2 - a2 + a2;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += (a2 * a1) + a3;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        v9 += a1 - (a5 * a5);
    }
    v11 = (a1 * a5 * a1) - a2;
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 6
9 10
10 10
11 22
12 22
13 22
14 22
15 23
16 23
17 23
18 23
19 23
20 23
21 24
<<<sep_out_sample>>>
test %edi,%edi
jle 10 <func1+0x10>
mov %ecx,%eax
imul %edi,%eax
sub %r8d,%eax
add %edx,%eax
jmp 1e <func1+0x1e>
lea (%rcx,%r8,1),%eax
mov %esi,%r9d
imul %ecx,%r9d
sub %r9d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a3 - a1 + a2;
    }
    if (v8 < a1)
    {
        v8 = a3 - (a5 - a4 * a1);
    }
    else
    {
        v8 = a4 + a5 - a2 * a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 11
8 15
9 15
10 15
11 15
12 17
13 17
14 17
15 17
16 17
17 18
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
mov %edi,%r9d
imul %ecx,%r9d
add %r9d,%edx
add %eax,%edx
add %ecx,%esi
imul %ecx,%esi
add %esi,%edx
sub %r8d,%edi
sub %ecx,%edi
lea (%rdx,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a1 < a1)
    {
        v6 = (a5 * a4) + a2 * a5;
    }
    else
    {
        v6 = (a1 * a4) + a3 - a4;
    }
    if (a3 < a3)
    {
        v7 = a5 - a5 + a3 * a3;
    }
    else
    {
        v7 = (a2 * a4) + a4 * a4;
    }
    v8 = (a1 - a5) - a4;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 10
5 10
6 10
7 21
8 18
9 18
10 21
11 20
12 20
13 21
14 22
<<<sep_out_sample>>>
lea (%rdx,%r8,1),%eax
cmp %ecx,%r8d
jge 13 <func1+0x13>
mov %ecx,%eax
imul %edi,%eax
add %r8d,%eax
sub %edi,%eax
add $0x1,%edi
lea (%rdx,%rdi,1),%r9d
add %esi,%r9d
add %r9d,%r8d
add %ecx,%r8d
add %r8d,%eax
imul %esi,%edi
imul %edx,%edi
add %eax,%edi
imul %ecx,%edx
sub %edx,%esi
sub %ecx,%esi
lea (%rdi,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a5 < a4)
    {
        v6 = a5 + a4 * a1 - a1;
    }
    else
    {
        v6 = a3 + a5;
    }
    v7 = (a2 * a1 + a2) * a3;
    v8 = (a2 - (a3 * a4)) - a4;
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        v9 += (a3 - a1) - a3;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 6
7 6
8 12
9 19
10 19
11 19
12 19
13 19
14 12
15 12
16 19
17 13
18 13
19 13
20 19
21 20
<<<sep_out_sample>>>
lea 0x1(%rcx),%eax
imul %r8d,%eax
mov %eax,%r11d
sub %esi,%r11d
mov %r8d,%r10d
sub %edx,%r10d
sub %esi,%r10d
mov %edx,%r9d
sub %edi,%r9d
cmp %edi,%r8d
jl 2a <func1+0x2a>
sub %r8d,%eax
imul %ecx,%eax
mov %eax,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = ((a4 * a5) + a5) - a2;
    v7 = a5 - a3 - a2;
    if (a5 < a1)
    {
        v8 = a3 - a1;
    }
    else
    {
        v8 = a4 * a5 * a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 5
6 5
7 5
8 8
9 8
10 6
11 6
12 12
13 12
14 12
15 14
16 14
17 14
18 14
19 14
20 14
21 14
22 15
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
lea 0x1(%rcx,%r8,1),%eax
sub %esi,%ecx
add %ecx,%eax
sub %edx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a1 - a2;
    }
    v8 = a4 - a2;
    v9 = a1 - a3;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 11
5 9
6 11
7 10
8 11
9 12
<<<sep_out_sample>>>
lea (%r8,%rsi,1),%eax
cmp %r8d,%edx
jge 12 <func1+0x12>
mov %esi,%eax
sub %edi,%eax
add %ecx,%eax
sub %r8d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a3 < a5)
    {
        v6 = a2 - a1 + a4 - a5;
    }
    else
    {
        v6 = a5 + a2;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += (a4 * a1) * a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 6
7 6
8 17
9 17
10 17
11 17
12 17
13 18
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
add %ecx,%esi
mov %edi,%eax
sub %edx,%eax
sub %ecx,%eax
imul %ecx,%eax
add %eax,%esi
sub %r8d,%edi
imul %edi,%r8d
sub %ecx,%r8d
lea (%rsi,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = (a1 - a3 - a4) * a4;
    if (a2 < a2)
    {
        v7 = a3 - a5 + a3 + a1;
    }
    else
    {
        v7 = (a1 - a5) * a5 - a4;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 13
2 13
3 13
4 13
5 4
6 4
7 4
8 4
9 13
10 11
11 11
12 11
13 13
14 14
<<<sep_out_sample>>>
mov $0x1,%r9d
sub %edx,%r9d
imul %esi,%r9d
test %edi,%edi
jle 17 <func1+0x17>
lea (%rsi,%rsi,1),%r10d
jmp 1e <func1+0x1e>
mov %edx,%r10d
imul %edi,%r10d
mov %ecx,%eax
sub %edi,%eax
cmp %r9d,%edx
jg 2c <func1+0x2c>
mov %edi,%eax
imul %esi,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%eax
add %eax,%r9d
lea (%r9,%r10,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += (a3 * a3) + a4;
    }
    v8 = a2 - a2 * a3;
    if (v6 < a1)
    {
        v9 = (a4 - a4 + a2) + a2;
    }
    else
    {
        v9 = a3 * a1;
    }
    if (v8 < a3)
    {
        v10 = a1 - (a1 + a1 - a4);
    }
    else
    {
        v10 = a1 * a2;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 9
4 10
5 10
6 12
7 12
8 16
9 16
10 20
11 20
12 18
13 18
14 24
15 24
16 26
17 26
18 26
19 26
20 26
21 26
22 26
23 27
<<<sep_out_sample>>>
add %edi,%edx
add %edx,%esi
add %r8d,%esi
add %ecx,%esi
lea 0x2(%r8),%eax
imul %eax,%ecx
add %esi,%ecx
sub %r8d,%edi
lea 0x1(%rcx,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = (a5 * a4 + a4) + a4;
    v7 = (a3 - a3 - a5) + a1;
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += (a3 * a4) + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 11
5 4
6 4
7 11
8 5
9 11
10 12
<<<sep_out_sample>>>
cmp %edx,%edi
jle d <func1+0xd>
mov %esi,%edx
sub %r8d,%edx
sub %ecx,%edx
jmp 10 <func1+0x10>
imul %esi,%edx
lea (%rdi,%rcx,1),%eax
add %esi,%eax
add %r8d,%eax
lea 0x1(%rcx,%rax,1),%eax
add %eax,%edx
sub %r8d,%edi
add %edi,%esi
sub %ecx,%esi
lea (%rdx,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (a4 < a1)
        {
            v6 += a1 - (a2 - a4);
        }
        else
        {
            v6 += a5 - a5 * a2;
        }
    }
    if (a3 < a1)
    {
        v8 = (a2 - a5) - a4;
    }
    else
    {
        v8 = a3 * a2;
    }
    if (a2 < a2)
    {
        v9 = a2 - a1 - a4 + a1;
    }
    else
    {
        v9 = a1 - a5 + a2 - a4;
    }
    v10 = a4 - a3;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 18
7 22
8 33
9 33
10 33
11 33
12 33
13 30
14 30
15 30
16 33
17 34
<<<sep_out_sample>>>
mov %r8d,%eax
sub %esi,%eax
cmp %r8d,%ecx
jge 12 <func1+0x12>
mov %edx,%eax
sub %edi,%eax
imul %r8d,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %esi,%edx
add %edx,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a1 * (a4 + a5);
    }
    if (a4 < a5)
    {
        v8 = a5 * (a3 - a1);
    }
    else
    {
        v8 = a2 - a2 - (a2 - a5);
    }
    v9 = a4 * (a1 - a1) + a2;
    v10 = 0;
    for (v11 = 0; v11++; v11<a2)
    {
        v10 += a1 * a4 - a3;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 15
2 15
3 9
4 9
5 11
6 11
7 11
8 23
9 23
10 23
11 23
12 23
13 23
14 24
<<<sep_out_sample>>>
test %edx,%edx
jle 15 <func1+0x15>
mov %esi,%eax
sub %r8d,%eax
mov %ecx,%r9d
imul %r8d,%r9d
sub %r9d,%eax
jmp 1d <func1+0x1d>
mov %r8d,%eax
imul %edx,%eax
sub %ecx,%eax
mov %esi,%r10d
imul %esi,%r10d
imul %edx,%r10d
lea (%rdx,%rdi,2),%r9d
sub %r10d,%r9d
add %esi,%r9d
add %r9d,%r8d
add %ecx,%r8d
lea 0x1(%rax,%r8,1),%eax
imul %esi,%edx
imul %edx,%ecx
imul %ecx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (v6 < a3)
    {
        v6 = a2 - a5 - a4 * a5;
    }
    else
    {
        v6 = (a5 * a3) - a4;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        if (a3 < a3)
        {
            v7 += a5 * a5 * a1;
        }
        else
        {
            v7 += a3 * a2 + a1;
        }
    }
    v9 = a2 * a3 * a4 * a1;
    v10 = a1 - a2 * a2 * a3;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 6
9 10
10 10
11 10
12 25
13 25
14 25
15 26
16 26
17 26
18 26
19 26
20 26
21 24
22 24
23 24
24 26
25 27
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
sub %edx,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a2 - a1 + a4;
    }
    v8 = a4 - a3;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 9
6 10
7 11
<<<sep_out_sample>>>
mov %esi,%eax
sub %r8d,%eax
mov %r8d,%r9d
sub %ecx,%r9d
cmp %ecx,%esi
cmovl %eax,%r9d
add %edi,%edx
add %esi,%edx
add %r8d,%edx
add %ecx,%edx
add %r9d,%edx
mov %r8d,%r9d
imul %esi,%r9d
sub %r9d,%edx
add %edi,%ecx
imul %ecx,%r8d
sub %esi,%r8d
lea (%rdx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a2 < a4)
    {
        v6 = (a1 - a1) - a5 + a2;
    }
    else
    {
        v6 = a5 - a4;
    }
    v7 = a4 - a4 - a5 * a2;
    v8 = ((a4 + a1) * a5) - a2;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 6
6 6
7 14
8 14
9 14
10 14
11 14
12 12
13 12
14 14
15 13
16 13
17 13
18 14
19 15
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
mov %r8d,%r9d
sub %edi,%r9d
test %edx,%edx
cmovg %eax,%r9d
test %ecx,%ecx
jle 1f <func1+0x1f>
lea (%rdi,%rdi,1),%eax
lea (%rcx,%r8,1),%r10d
sub %r10d,%eax
jmp 26 <func1+0x26>
lea (%rdi,%rsi,1),%eax
imul %r8d,%eax
add %r9d,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a3 - (a5 * a3);
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += a1 - a4;
    }
    if (v6 < a3)
    {
        v10 = a1 + a3;
    }
    else
    {
        v10 = a5 - a1;
    }
    if (v6 < a4)
    {
        v11 = (a1 + a1) - (a4 + a5);
    }
    else
    {
        v11 = a5 * (a1 + a2);
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 16
4 16
5 16
6 22
7 22
8 24
9 24
10 24
11 24
12 28
13 28
14 30
15 30
16 30
17 30
18 30
19 30
20 31
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a2 * a4;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += a2 * a2 * a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 14
2 14
3 14
4 14
5 15
<<<sep_out_sample>>>
lea (%rdx,%rcx,2),%r9d
lea (%rdi,%rdx,1),%eax
cmp %eax,%ecx
jle 1b <func1+0x1b>
mov %r8d,%r10d
imul %edi,%r10d
add %ecx,%r10d
imul %edi,%r10d
jmp 2f <func1+0x2f>
mov %ecx,%r11d
imul %r8d,%r11d
mov $0x1,%r10d
sub %r11d,%r10d
imul %ecx,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a1 < a1)
    {
        v6 = a4 + a4;
    }
    else
    {
        v6 = a4 + a3 + a4;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        if (v7 < a4)
        {
            v7 += a3 * a2 + a1;
        }
        else
        {
            v7 += a1 - a3;
        }
    }
    v9 = a3 - a2 + a1 + a2;
    if (v9 < a4)
    {
        v10 = (a5 * a1 + a4) * a1;
    }
    else
    {
        v10 = a4 - (a4 * a5) * a4;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 24
3 25
4 25
5 27
6 27
7 27
8 27
9 27
10 31
11 31
12 31
13 31
14 31
15 33
16 33
17 33
18 33
19 33
20 33
21 33
22 34
<<<sep_out_sample>>>
mov %edi,%eax
sub %edx,%eax
cmp %esi,%ecx
jge 11 <func1+0x11>
mov %ecx,%eax
sub %edi,%eax
sub %esi,%eax
imul %ecx,%eax
mov %edx,%edi
imul %ecx,%edi
lea 0x1(%rcx,%rdi,1),%edi
add %edi,%edx
add %edx,%esi
add %r8d,%esi
add %esi,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    if (a4 < a2)
    {
        v6 = (a4 - a1 - a2) * a4;
    }
    else
    {
        v6 = a1 - a3 - a3 + a3;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        if (v7 < a3)
        {
            v7 += a1 - (a2 + a2);
        }
        else
        {
            v7 += (a4 - a1) + a5;
        }
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        if (a3 < a5)
        {
            v9 += a1 * a4 + a4;
        }
        else
        {
            v9 += a4 - a5;
        }
    }
    v11 = a3 * a4 - a1 + a4;
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 4
4 4
5 6
6 6
7 6
8 6
9 36
10 36
11 37
12 37
13 37
14 37
15 37
16 37
17 38
<<<sep_out_sample>>>
mov %ecx,%eax
neg %eax
cmp %r8d,%edi
jle 17 <func1+0x17>
mov %ecx,%r9d
sub %r8d,%r9d
mov %ecx,%eax
imul %edi,%eax
add %r9d,%eax
add %edi,%edx
add %esi,%edx
add %edx,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
sub $0x2,%esi
imul %esi,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a4 - a1 * a2;
    }
    if (a5 < a1)
    {
        v8 = a4 - a5 + (a4 * a1);
    }
    else
    {
        v8 = (a1 - a4) - a1;
    }
    v9 = a4 * a2 - a4 - a4;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 15
2 15
3 9
4 9
5 11
6 11
7 11
8 11
9 11
10 18
11 18
12 18
13 18
14 18
15 17
16 17
17 18
18 19
<<<sep_out_sample>>>
lea (%r8,%rdi,1),%eax
lea (%rdi,%rcx,1),%r9d
test %esi,%esi
cmovg %eax,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
lea 0x1(%rdi),%esi
imul %esi,%ecx
add %ecx,%eax
mov %edi,%esi
sub %edx,%esi
lea (%rsi,%r8,2),%edx
add %edx,%eax
imul %r8d,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (v6 < a2)
    {
        v6 = a1 + ((a5 - a1) + a1);
    }
    else
    {
        v6 = a5 + (a4 - a5) + a1;
    }
    v7 = a4 + a4 * a1;
    v8 = a1 - a3 + a5 + a5;
    v9 = a1 * a5;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 15
6 15
7 15
8 15
9 15
10 12
11 12
12 15
13 13
14 13
15 13
16 15
17 14
18 15
19 16
<<<sep_out_sample>>>
mov %esi,%r9d
imul %edx,%r9d
sub %ecx,%r9d
sub %edi,%r9d
mov $0x0,%eax
mov %esi,%r10d
imul %edi,%r10d
cmp %r9d,%edi
cmovg %r10d,%eax
mov %edx,%r10d
sub %esi,%r10d
cmp %ecx,%edx
jle 39 <func1+0x39>
mov %edi,%r10d
imul %esi,%r10d
imul %r8d,%r10d
imul %edi,%r10d
add %edx,%edi
add %edi,%esi
add %r8d,%esi
add %ecx,%esi
add %esi,%r9d
add %r9d,%eax
add %eax,%r10d
sub %r8d,%ecx
lea (%r10,%rcx,2),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = ((a2 * a3) - a4) - a1;
    if (v6 < a1)
    {
        v7 = a2 * a1;
    }
    else
    {
        v7 = a1 - a1;
    }
    if (a4 < a3)
    {
        v8 = (a1 * a2 * a5) * a1;
    }
    else
    {
        v8 = a3 - a2;
    }
    v9 = a4 - a5 - a5 + a4;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 11
6 7
7 7
8 7
9 7
10 19
11 19
12 13
13 13
14 15
15 15
16 15
17 15
18 22
19 22
20 22
21 22
22 22
23 22
24 22
25 21
26 22
27 23
<<<sep_out_sample>>>
lea (%rdx,%rsi,1),%eax
test %ecx,%ecx
jg f <func1+0xf>
lea 0x1(%rcx),%eax
imul %ecx,%eax
add %edx,%eax
add %edi,%edx
add %edx,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += (a5 - a5) + a2;
    }
    if (v6 < a4)
    {
        v8 = a3 + a2;
    }
    else
    {
        v8 = a4 * a4 + a4 + a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 11
2 9
3 9
4 15
5 15
6 15
7 17
8 17
9 17
10 17
11 17
12 18
<<<sep_out_sample>>>
mov %ecx,%r9d
neg %r9d
cmp %ecx,%r8d
jge 19 <func1+0x19>
mov %edi,%r9d
imul %r8d,%r9d
add %ecx,%r9d
imul %ecx,%r9d
lea (%r8,%rcx,1),%eax
lea (%rdi,%rsi,1),%r10d
cmp %edi,%r9d
cmovl %eax,%r10d
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
add %r10d,%eax
add %r8d,%r8d
imul %r8d,%edi
imul %edi,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a5 < a4)
    {
        v6 = (a1 * a5 + a4) * a4;
    }
    else
    {
        v6 = a1 - a1 - a4;
    }
    if (v6 < a1)
    {
        v7 = a5 + a4;
    }
    else
    {
        v7 = a1 + a2;
    }
    v8 = a1 * (a5 + a5) * a3;
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        v9 += a3 * a2 * a3;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 4
4 4
5 6
6 6
7 6
8 6
9 14
10 14
11 14
12 14
13 26
14 26
15 26
16 26
17 26
18 26
19 20
20 20
21 20
22 26
23 27
<<<sep_out_sample>>>
mov %r8d,%r11d
sub %edx,%r11d
add %r8d,%r11d
mov %edi,%r10d
imul %ecx,%r10d
cmp %edi,%edx
jle 1f <func1+0x1f>
lea (%rcx,%rdi,1),%eax
mov %edx,%r9d
sub %eax,%r9d
jmp 2d <func1+0x2d>
mov %edi,%r9d
imul %esi,%r9d
imul %ecx,%r9d
add %r8d,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = (a5 - a3) + a5;
    v7 = a1 * a4;
    if (a1 < a3)
    {
        v8 = a3 - (a4 + a1);
    }
    else
    {
        v8 = a1 * a2 * a4 + a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 5
5 5
6 6
7 6
8 8
9 8
10 8
11 8
12 12
13 12
14 12
15 12
16 14
17 14
18 14
19 14
20 14
21 14
22 14
23 15
<<<sep_out_sample>>>
mov %edx,%r9d
sub %esi,%r9d
imul %ecx,%r9d
test %esi,%esi
jle 1a <func1+0x1a>
mov %r8d,%eax
sub %edi,%eax
add %edx,%eax
add %r8d,%eax
jmp 1f <func1+0x1f>
mov %ecx,%eax
imul %esi,%eax
lea (%rdx,%rsi,2),%edx
lea (%r8,%rcx,2),%ecx
lea (%rcx,%rdx,1),%edx
lea 0x1(%r9,%rdx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a4 * a3 - (a2 * a4);
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += a1 + (a3 - a1);
    }
    if (v7 < a2)
    {
        v9 = a5 - a1 + a3 + a5;
    }
    else
    {
        v9 = a4 * a2;
    }
    if (a2 < a2)
    {
        v10 = a5 * ((a5 - a4) - a1);
    }
    else
    {
        v10 = (a4 - a1) + a2;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 10
5 10
6 12
7 12
8 12
9 12
10 12
11 16
12 16
13 26
14 26
15 26
16 26
17 26
18 27
<<<sep_out_sample>>>
lea (%rsi,%rdi,1),%r10d
mov %edx,%r9d
imul %edx,%r9d
add %esi,%r9d
sub %ecx,%r9d
cmp %r9d,%ecx
jle 1f <func1+0x1f>
lea (%rdi,%r8,1),%eax
imul %edi,%eax
jmp 29 <func1+0x29>
mov %r8d,%eax
imul %esi,%eax
sub %edx,%eax
sub %esi,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r10d,%ecx
add %ecx,%r9d
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a2 + a1;
    v7 = a3 * a3 + a2 - a4;
    if (v7 < a4)
    {
        v8 = a1 * a1 + a5 * a1;
    }
    else
    {
        v8 = a5 * a2 - a3 - a2;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        v9 += a5 + a2 * a2;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 5
3 5
4 5
5 5
6 6
7 6
8 8
9 8
10 8
11 12
12 12
13 12
14 12
15 19
16 19
17 19
18 19
19 19
20 19
21 19
22 20
<<<sep_out_sample>>>
add %edx,%edi
add %esi,%edi
add %edi,%r8d
lea 0x1(%rcx,%r8,1),%edi
sub $0x1,%ecx
imul %ecx,%esi
sub %edx,%esi
lea (%rdi,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a3 - a3;
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a1 * a3 - a5;
    }
    v9 = ((a2 * a4) - a2) - a3;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 11
5 10
6 10
7 10
8 11
9 12
<<<sep_out_sample>>>
mov %ecx,%r10d
sub %esi,%r10d
test %r8d,%r8d
jle 1a <func1+0x1a>
mov %edx,%r9d
imul %edi,%r9d
add %esi,%r9d
add %edi,%r9d
jmp 27 <func1+0x27>
mov %ecx,%r9d
imul %ecx,%r9d
sub %edi,%r9d
sub %esi,%r9d
add %edx,%edi
lea (%rsi,%rdi,1),%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
lea (%rsi,%rdx,2),%edx
add %esi,%edx
add %edx,%eax
imul %esi,%edi
sub %edi,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a4 - a2;
    if (v7 < a5)
    {
        v7 = (a2 + a3 * a1) + a1;
    }
    else
    {
        v7 = ((a4 * a4) - a1) - a2;
    }
    v8 = (a2 + a3) + a3 + a2;
    v9 = a5 - a2 * (a3 + a1);
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 5
4 5
5 7
6 7
7 7
8 7
9 7
10 11
11 11
12 11
13 11
14 14
15 15
16 15
17 15
18 15
19 15
20 13
21 13
22 15
23 14
24 14
25 15
26 16
<<<sep_out_sample>>>
mov %ecx,%r9d
sub %edx,%r9d
cmp $0x1,%r8d
jle 15 <func1+0x15>
mov %edi,%r10d
imul %r8d,%r10d
jmp 1c <func1+0x1c>
mov %esi,%r10d
imul %esi,%r10d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %r9d,%eax
add %r10d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += (a3 - a5) + a3;
    }
    v8 = a4 - a2 - a3 + a2;
    if (v7 < a5)
    {
        v9 = a1 * a5;
    }
    else
    {
        v9 = a3 + (a2 * a2) - a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 10
4 10
5 12
6 12
7 12
8 16
9 16
10 18
11 18
12 18
13 18
14 18
15 18
16 19
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a1 * a2 + a1;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        if (a1 < a1)
        {
            v8 += (a4 + a5) * a3;
        }
        else
        {
            v8 += a5 * a4 * a4;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 21
5 22
<<<sep_out_sample>>>
mov %edi,%eax
sub %ecx,%eax
cmp %r8d,%ecx
jl 11 <func1+0x11>
mov %esi,%eax
imul %edx,%eax
lea (%rax,%rsi,2),%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (v6 < a2)
        {
            v6 += (a4 + a3) - a1;
        }
        else
        {
            v6 += a2 * a3 - a4;
        }
    }
    if (a4 < a5)
    {
        v8 = a1 - a4;
    }
    else
    {
        v8 = a2 + a2 + a2 * a3;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        if (v10 < a3)
        {
            v9 += a3 + a2;
        }
        else
        {
            v9 += a2 * a2;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 16
4 16
5 22
6 22
7 22
8 36
9 36
10 36
11 36
12 36
13 37
<<<sep_out_sample>>>
mov %esi,%eax
imul %esi,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += (a2 + a3) - a5;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        if (a5 < a2)
        {
            v8 += a3 - a5;
        }
        else
        {
            v8 += (a4 * a2) - a1;
        }
    }
    if (a2 < a2)
    {
        v10 = (a5 + a3) - a4 + a5;
    }
    else
    {
        v10 = a2 * a2;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 27
2 27
3 29
4 29
5 29
6 29
7 29
8 30
<<<sep_out_sample>>>
mov %edi,%eax
sub %edx,%eax
imul %esi,%eax
imul %ecx,%eax
lea 0x1(%rdi,%rax,1),%eax
add %eax,%edx
add %edx,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%eax
imul %edi,%r8d
imul %r8d,%ecx
add %ecx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (a5 < a2)
        {
            v6 += a2 - a1 + a1;
        }
        else
        {
            v6 += a4 * a2;
        }
    }
    v8 = a5 * a1 * a4 + a1;
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        v9 += a3 - a2;
    }
    v11 = (a1 - a3) * a2 * a4;
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 22
4 22
5 23
6 23
7 23
8 23
9 23
10 16
11 16
12 16
13 23
14 24
<<<sep_out_sample>>>
lea 0x2(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12, v13 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += (a3 + a1) * a4;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += a3 - (a3 * a1);
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a5)
    {
        v10 += a3 * (a1 + a4);
    }
    v12 = 0;
    for (v13 = 0; v13++; v13<a5)
    {
        if (v12 < a2)
        {
            v12 += (a2 + a3) * a5;
        }
        else
        {
            v12 += a1 * a2 + a3;
        }
    }
    return v12+v13+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 31
2 31
3 31
4 31
5 32
<<<sep_out_sample>>>
mov %r8d,%r9d
imul %ecx,%r9d
mov %esi,%r10d
sub %r8d,%r10d
cmp %r9d,%edi
jg 1d <func1+0x1d>
lea -0x1(%rcx),%r10d
imul %edx,%r10d
add %edi,%r10d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %eax,%r9d
lea (%r9,%r10,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a3 - a5 + a1;
    }
    v8 = a5 * a4;
    if (v8 < a1)
    {
        v9 = a2 - a5;
    }
    else
    {
        v9 = a1 + (a3 * a4 - a3);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 12
4 12
5 10
6 10
7 16
8 16
9 16
10 18
11 18
12 18
13 18
14 18
15 18
16 19
<<<sep_out_sample>>>
mov %ecx,%eax
sub %edx,%eax
cmp %r8d,%ecx
jl 10 <func1+0x10>
mov %edi,%eax
neg %eax
imul %esi,%eax
mov %esi,%r9d
imul %r8d,%r9d
add %edi,%r9d
imul %esi,%r9d
add %r9d,%edi
add %edi,%edx
add %esi,%edx
add %edx,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
lea (%rax,%rsi,2),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (a2 < a4)
        {
            v6 += a1 * (a3 * a1);
        }
        else
        {
            v6 += a3 - (a2 + a1);
        }
    }
    if (a4 < a5)
    {
        v8 = (a4 + (a1 - a3)) - a1;
    }
    else
    {
        v8 = (a5 - a1 - a5) * a2;
    }
    v9 = a2 + a2;
    v10 = a2 * (a1 + a2 * a5);
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 16
4 16
5 22
6 22
7 22
8 25
9 25
10 25
11 25
12 26
13 26
14 26
15 26
16 26
17 26
18 26
19 27
<<<sep_out_sample>>>
mov %edx,%eax
imul %esi,%eax
lea (%rax,%rcx,2),%r10d
cmp %edi,%edx
jge 16 <func1+0x16>
lea (%rcx,%rsi,2),%eax
lea (%rax,%r8,1),%r9d
jmp 23 <func1+0x23>
mov %edx,%r9d
imul %edx,%r9d
add %ecx,%r9d
add %r8d,%r9d
test %esi,%esi
jle 35 <func1+0x35>
mov %r8d,%eax
imul %r8d,%eax
add %esi,%eax
sub %r8d,%eax
jmp 41 <func1+0x41>
mov %ecx,%eax
imul %ecx,%eax
imul %r8d,%eax
imul %ecx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r10d,%ecx
add %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = (a3 * a2 + a4) + a4;
    if (a3 < a1)
    {
        v7 = a2 + a5 + a4 + a2;
    }
    else
    {
        v7 = (a3 * a3) + a4 + a5;
    }
    if (v8 < a2)
    {
        v8 = (a5 * a5) + a2 - a5;
    }
    else
    {
        v8 = a4 * a4 * a5 * a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 5
5 5
6 7
7 7
8 7
9 11
10 11
11 11
12 11
13 13
14 13
15 15
16 15
17 15
18 15
19 15
20 19
21 19
22 19
23 19
24 21
25 21
26 21
27 21
28 21
29 21
30 21
31 22
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a5 - a2;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        if (v9 < a5)
        {
            v8 += a1 + a5;
        }
        else
        {
            v8 += a1 - a4 * a2;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 21
5 22
<<<sep_out_sample>>>
mov %ecx,%r10d
sub %edi,%r10d
imul %edx,%r10d
sub %ecx,%r10d
cmp %r8d,%edi
jle 1f <func1+0x1f>
lea (%r8,%rcx,1),%r9d
imul %ecx,%r9d
sub %r8d,%r9d
jmp 2e <func1+0x2e>
mov %edi,%r9d
imul %r8d,%r9d
imul %edx,%r9d
imul %r8d,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = ((a4 - a1) * a3) - a4;
    if (a5 < a1)
    {
        v7 = (a4 * (a5 + a4)) - a5;
    }
    else
    {
        v7 = ((a1 * a5) * a3) * a5;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 5
6 5
7 7
8 7
9 7
10 7
11 11
12 11
13 11
14 11
15 13
16 13
17 13
18 13
19 13
20 13
21 14
<<<sep_out_sample>>>
mov %esi,%eax
sub %edx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea (%r8,%rcx,1),%esi
add %esi,%eax
lea 0x1(%rax,%rcx,2),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = ((a2 - a3) - a5) + a5;
    v7 = (a4 + a4 + a5) - a5;
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += a1 + a4 - a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 11
4 11
5 11
6 11
7 11
8 11
9 12
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
mov %r8d,%eax
sub %edx,%eax
imul %eax,%edi
lea (%rsi,%rcx,2),%eax
lea (%rax,%rdi,1),%edx
imul %r8d,%r8d
sub %ecx,%r8d
sub %ecx,%r8d
lea (%rdx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a1 * (a5 - a3) + a4;
    v7 = a5 * a5 - a4 - a4;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 4
5 4
6 4
7 4
8 6
9 5
10 5
11 5
12 6
13 7
<<<sep_out_sample>>>
cmp %r8d,%edx
jge 13 <func1+0x13>
lea -0x1(%rcx),%r9d
imul %edx,%r9d
imul %edx,%r9d
jmp 1f <func1+0x1f>
lea (%r8,%rdi,1),%r9d
imul %ecx,%r9d
imul %esi,%r9d
lea (%rcx,%rsi,1),%eax
cmp %ecx,%r9d
jge 2d <func1+0x2d>
lea (%rcx,%rsi,2),%eax
imul %edi,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a3 < a5)
    {
        v6 = a3 * (a4 * a3 - a3);
    }
    else
    {
        v6 = (a5 + a1) * a4 * a2;
    }
    if (v6 < a4)
    {
        v7 = (a2 + a2 + a4) * a1;
    }
    else
    {
        v7 = a4 + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 18
11 12
12 12
13 14
14 14
15 20
16 20
17 20
18 20
19 20
20 20
21 21
<<<sep_out_sample>>>
lea (%rdx,%rsi,2),%r9d
sub %r8d,%r9d
test %edx,%edx
jle 18 <func1+0x18>
mov %r8d,%eax
imul %edx,%eax
imul %esi,%eax
add %edi,%eax
jmp 27 <func1+0x27>
lea (%rsi,%rdi,1),%eax
imul %ecx,%eax
mov %edx,%r10d
sub %eax,%r10d
mov %r10d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = (a3 + a2 - a5) + a2;
    if (v7 < a3)
    {
        v7 = (a5 * a3) * a2 + a1;
    }
    else
    {
        v7 = a3 - (a2 + a1) * a4;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += a1 - (a5 + a5);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 5
4 5
5 7
6 7
7 7
8 7
9 7
10 11
11 11
12 11
13 11
14 11
15 18
16 18
17 18
18 18
19 18
20 18
21 19
<<<sep_out_sample>>>
mov $0x0,%r9d
cmp $0x1,%esi
jg 19 <func1+0x19>
mov %r8d,%r9d
imul %r8d,%r9d
imul %edx,%r9d
add %edi,%r9d
cmp %edx,%esi
jge 26 <func1+0x26>
mov %r8d,%eax
sub %esi,%eax
add %eax,%edx
jmp 29 <func1+0x29>
imul %ecx,%edx
mov %r8d,%eax
imul %ecx,%eax
add %eax,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %eax,%r9d
lea (%r9,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a4 + a1 - a5;
    }
    if (v7 < a2)
    {
        v8 = a3 - a3;
    }
    else
    {
        v8 = (a5 * a5) * a3 + a1;
    }
    if (a2 < a3)
    {
        v9 = a3 - (a2 - a5);
    }
    else
    {
        v9 = a3 * a4;
    }
    v10 = (a5 * a4) - a3;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 9
3 9
4 15
5 15
6 15
7 15
8 17
9 17
10 19
11 19
12 19
13 19
14 23
15 25
16 25
17 26
18 26
19 26
20 26
21 26
22 26
23 27
<<<sep_out_sample>>>
lea (%r8,%rcx,1),%r9d
mov %esi,%eax
imul %ecx,%eax
test %edi,%edi
cmovg %eax,%r9d
cmp %r8d,%esi
jle 21 <func1+0x21>
mov %ecx,%eax
imul %r8d,%eax
sub %edi,%eax
imul %ecx,%eax
jmp 2d <func1+0x2d>
mov %edx,%eax
imul %r8d,%eax
imul %r8d,%eax
sub %edi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (v6 < a1)
    {
        v6 = a2 * a4;
    }
    else
    {
        v6 = a5 + a4;
    }
    if (a5 < a2)
    {
        v7 = a4 * (a4 * a5 - a1);
    }
    else
    {
        v7 = a3 * a5 * a5 - a1;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 10
2 6
3 6
4 6
5 6
6 12
7 12
8 14
9 14
10 14
11 14
12 14
13 18
14 18
15 18
16 18
17 20
18 20
19 20
20 20
21 20
22 20
23 21
<<<sep_out_sample>>>
mov %r8d,%eax
sub %ecx,%eax
lea 0x1(%rax,%r8,2),%eax
add %edi,%eax
add %eax,%edx
add %edx,%esi
add %esi,%r8d
lea (%rdi,%rcx,2),%eax
lea 0x1(%r8,%rax,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = a1 + a4;
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += (a1 - a4) * a4;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        if (v10 < a3)
        {
            v9 += (a3 * a3) * a3;
        }
        else
        {
            v9 += a4 - a3 + a1;
        }
    }
    if (a1 < a1)
    {
        v11 = a5 - (a4 * a3 * a1);
    }
    else
    {
        v11 = a5 + (a5 - a4) + a5;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 28
2 28
3 30
4 30
5 30
6 30
7 30
8 4
9 30
10 31
<<<sep_out_sample>>>
lea (%rsi,%rsi,1),%r9d
sub %edi,%r9d
imul %ecx,%r9d
cmp %r9d,%edi
jle 27 <func1+0x27>
mov %ecx,%r11d
sub %edx,%r11d
mov %edi,%r10d
imul %ecx,%r10d
add $0x1,%r10d
imul %ecx,%r10d
jmp 3e <func1+0x3e>
mov %esi,%r11d
imul %r8d,%r11d
add %edx,%r11d
sub %r8d,%r11d
mov %r8d,%r10d
sub %edi,%r10d
imul %edx,%r10d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
add %r11d,%eax
add %r10d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a4 < a4)
    {
        v6 = a4 - a4 + (a5 - a5);
    }
    else
    {
        v6 = (a2 + a2 - a1) * a4;
    }
    if (v6 < a1)
    {
        v7 = a4 - a3;
    }
    else
    {
        v7 = a3 + (a2 * a5) - a5;
    }
    if (v6 < a1)
    {
        v8 = a4 + a1 * a4 * a4;
    }
    else
    {
        v8 = (a5 - a1) * a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 12
5 12
6 14
7 14
8 22
9 22
10 22
11 22
12 22
13 18
14 18
15 18
16 18
17 26
18 26
19 26
20 28
21 28
22 28
23 28
24 28
25 28
26 28
27 29
<<<sep_out_sample>>>
mov %edx,%eax
sub %esi,%eax
lea (%rcx,%rdi,1),%r9d
cmp %esi,%edi
cmovge %r9d,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a1 < a2)
    {
        v6 = a3 - a2;
    }
    else
    {
        v6 = a4 + a1;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        if (v6 < a3)
        {
            v7 += a5 * a1 + a5;
        }
        else
        {
            v7 += (a1 - a2) - a2;
        }
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        v9 += a5 + a1 + a1;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 6
6 29
7 29
8 29
9 29
10 29
11 30
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %r8d,%edx
add %ecx,%edx
mov %r8d,%eax
sub %ecx,%eax
mov %edi,%r9d
imul %r8d,%r9d
sub %r9d,%eax
add %edx,%eax
add %esi,%edi
imul %ecx,%r8d
lea (%rdi,%r8,1),%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = (a5 - a4) - a1 * a5;
    v7 = (a2 + a1) + (a4 * a5);
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 4
7 4
8 4
9 4
10 6
11 5
12 5
13 5
14 6
15 7
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %r8d,%edx
sub %r8d,%esi
imul %edi,%esi
lea (%rdx,%rcx,2),%eax
lea (%rax,%rsi,1),%edx
mov %r8d,%eax
imul %r8d,%eax
sub %edi,%eax
add %edx,%eax
imul %edi,%r8d
imul %r8d,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a3 < a3)
    {
        v6 = a3 - a2;
    }
    else
    {
        v6 = a4 - (a5 - a2) * a1;
    }
    v7 = a5 * a5 - a1;
    if (a1 < a1)
    {
        v8 = a2 * a4 + a4 - a2;
    }
    else
    {
        v8 = a5 * (a5 * a1 * a1);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 10
5 10
6 10
7 21
8 12
9 12
10 12
11 21
12 19
13 19
14 21
15 22
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
lea (%r8,%rcx,1),%eax
imul %edx,%ecx
lea 0x1(%rax,%rcx,1),%eax
sub %edx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = a3 * a4;
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        if (v8 < a1)
        {
            v7 += a5 + (a1 + a3);
        }
        else
        {
            v7 += a2 * a2 * a1;
        }
    }
    v9 = a2 - a3;
    v10 = 0;
    for (v11 = 0; v11++; v11<a1)
    {
        v10 += a1 * a4 * a5;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 23
2 23
3 23
4 23
5 4
6 23
7 17
8 23
9 24
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %r8d,%edx
lea 0x1(%rcx,%rdx,1),%eax
imul %r8d,%edi
add %edi,%ecx
add %ecx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a1 * a1;
    }
    v8 = a4 + a1 * a5 + a2;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 9
6 9
7 9
8 10
9 11
<<<sep_out_sample>>>
cmp %r8d,%edx
jge 18 <func1+0x18>
mov %edx,%eax
imul %edx,%eax
imul %ecx,%eax
mov %edx,%r9d
sub %eax,%r9d
mov %r9d,%eax
jmp 24 <func1+0x24>
mov %edx,%eax
imul %ecx,%eax
imul %r8d,%eax
imul %esi,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (a2 < a2)
        {
            v6 += a1 * a4;
        }
        else
        {
            v6 += a4 * a1 * a3;
        }
    }
    if (a3 < a5)
    {
        v8 = a3 - a4 * (a3 * a3);
    }
    else
    {
        v8 = (a3 * a4) * a5 * a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 18
7 18
8 18
9 18
10 22
11 22
12 22
13 22
14 24
15 24
16 24
17 24
18 24
19 25
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
imul %edx,%edx
lea 0x1(%rcx,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a3 * a3;
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += (a1 - a2) + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 4
6 10
7 11
<<<sep_out_sample>>>
mov $0x0,%r9d
test %esi,%esi
jg 19 <func1+0x19>
mov %r8d,%eax
imul %esi,%eax
mov %edx,%r9d
sub %eax,%r9d
add %edx,%r9d
lea (%rdi,%rcx,2),%r10d
add %esi,%r10d
lea (%rdx,%rsi,2),%eax
cmp %edi,%r9d
jl 31 <func1+0x31>
lea -0x1(%r8),%eax
imul %edi,%eax
add %edx,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %eax,%r9d
lea (%r9,%r10,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a5 + a4 * a2;
    }
    if (v8 < a2)
    {
        v8 = a5 - a5;
    }
    else
    {
        v8 = a3 - a5 * a2 + a3;
    }
    v9 = (a4 + a4) + a1 + a2;
    if (v8 < a1)
    {
        v10 = a3 + (a2 + a2);
    }
    else
    {
        v10 = a1 * a5 - a1 + a3;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 9
3 9
4 15
5 15
6 15
7 15
8 15
9 17
10 17
11 20
12 18
13 18
14 24
15 24
16 24
17 26
18 26
19 26
20 26
21 26
22 26
23 26
24 27
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %edx,%r8d
add %r8d,%ecx
add %esi,%edi
lea 0x1(%rcx,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a2 < a2)
    {
        v6 = a5 * a3 * (a3 - a4);
    }
    else
    {
        v6 = a2 + a1;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += a3 + a3 - a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 10
6 17
7 18
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %r8d,%edx
add %ecx,%edx
lea (%rsi,%rsi,1),%eax
imul %eax,%edi
imul %esi,%edi
lea 0x1(%rdx,%rdi,1),%eax
sub $0x1,%ecx
imul %ecx,%r8d
add %r8d,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a2 * ((a2 + a2) * a1);
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        if (a2 < a4)
        {
            v7 += a1 * a2;
        }
        else
        {
            v7 += a1 - a2;
        }
    }
    v9 = a5 * a4 - a5 + a2;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 18
5 4
6 4
7 4
8 18
9 17
10 17
11 17
12 18
13 19
<<<sep_out_sample>>>
add %edx,%edi
add %esi,%edi
add %r8d,%edi
add %edi,%ecx
lea (%rdx,%r8,2),%eax
sub %eax,%esi
lea 0x1(%rcx,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a2 - (a5 + a3 + a5);
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        if (a4 < a5)
        {
            v7 += a5 * a1;
        }
        else
        {
            v7 += (a2 + a5) * a4;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 4
6 4
7 17
8 18
<<<sep_out_sample>>>
cmp %r8d,%edx
jge 13 <func1+0x13>
lea (%rcx,%rdi,1),%r9d
imul %edi,%r9d
imul %r8d,%r9d
jmp 22 <func1+0x22>
mov %r8d,%eax
imul %edi,%eax
imul %edi,%eax
mov %r8d,%r9d
sub %eax,%r9d
mov %ecx,%eax
cmp %edi,%r8d
jle 2f <func1+0x2f>
lea (%rsi,%rdi,1),%eax
imul %ecx,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %r9d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += (a2 - a3) - a4;
    }
    if (a3 < a5)
    {
        v8 = (a4 + a1) * a1 * a5;
    }
    else
    {
        v8 = a5 - (a5 * a1) * a1;
    }
    if (a1 < a5)
    {
        v9 = a2 * a4 + a1 * a4;
    }
    else
    {
        v9 = a4 - (a5 - a5);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 15
8 15
9 15
10 15
11 15
12 23
13 17
14 17
15 19
16 19
17 25
18 25
19 25
20 25
21 25
22 25
23 26
<<<sep_out_sample>>>
push %rbx
lea 0x1(%rcx),%r9d
imul %edi,%r9d
lea (%r9,%rsi,1),%ebx
sub %esi,%r9d
mov %edi,%eax
imul %edx,%eax
test %ecx,%ecx
cmovg %eax,%r9d
mov %edi,%r11d
sub %edx,%r11d
imul %ecx,%r11d
add %r8d,%r11d
cmp %edx,%edi
jge 39 <func1+0x39>
mov %edx,%r10d
imul %r8d,%r10d
imul %ecx,%r10d
jmp 48 <func1+0x48>
mov %edi,%r10d
imul %edx,%r10d
imul %edx,%r10d
imul %r8d,%r10d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %ebx,%eax
add %r9d,%eax
add %r11d,%eax
add %r10d,%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = (a1 + (a1 * a4)) + a2;
    if (v7 < a4)
    {
        v7 = a1 * a3;
    }
    else
    {
        v7 = (a1 - a2) + a1 * a4;
    }
    v8 = a5 + (a1 - a3) * a4;
    if (a1 < a3)
    {
        v9 = a4 * (a3 * a5);
    }
    else
    {
        v9 = a1 * a3 * a3 * a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 4
3 4
4 4
5 11
6 7
7 7
8 7
9 7
10 13
11 13
12 13
13 13
14 14
15 14
16 16
17 16
18 16
19 16
20 20
21 20
22 20
23 20
24 22
25 22
26 22
27 22
28 22
29 22
30 22
31 22
32 23
33 23
<<<sep_out_sample>>>
mov %edi,%eax
sub %esi,%eax
cmp %ecx,%edx
jg d <func1+0xd>
mov %ecx,%eax
imul %esi,%eax
add %edi,%edx
add %esi,%edx
add %edx,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %eax,%edx
add %edi,%ecx
imul %esi,%esi
sub %esi,%ecx
lea (%rdx,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (a2 < a1)
        {
            v6 += a2 - (a5 - a3);
        }
        else
        {
            v6 += (a4 + a3) * a3;
        }
    }
    if (a4 < a3)
    {
        v8 = a1 - a2;
    }
    else
    {
        v8 = a4 * a2;
    }
    v9 = (a4 + a1) - a2 * a2;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 16
4 16
5 22
6 22
7 25
8 25
9 25
10 25
11 25
12 24
13 24
14 24
15 25
16 26
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%esi
add $0x1,%ecx
imul %ecx,%r8d
sub %edx,%r8d
lea (%rsi,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += (a4 - a1) + a2;
    }
    if (a2 < a2)
    {
        v8 = a5 - a5 + a1;
    }
    else
    {
        v8 = a5 + a4 * a5 - a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 15
6 15
7 15
8 17
9 18
<<<sep_out_sample>>>
cmp %ecx,%esi
jge c <func1+0xc>
mov %r8d,%eax
imul %edi,%eax
jmp 14 <func1+0x14>
mov %esi,%eax
imul %edx,%eax
add %r8d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a2 < a4)
    {
        v6 = a5 * a1;
    }
    else
    {
        v6 = a2 * a3 + a5;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        if (a4 < a2)
        {
            v7 += a5 + a3;
        }
        else
        {
            v7 += a1 - a3;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 24
10 24
11 24
12 24
13 24
14 25
<<<sep_out_sample>>>
test %ecx,%ecx
jle 15 <func1+0x15>
mov %edi,%r9d
sub %r8d,%r9d
mov %edx,%eax
imul %r8d,%eax
add %r9d,%eax
jmp 1f <func1+0x1f>
mov %r8d,%eax
not %eax
imul %ecx,%eax
add %esi,%eax
test %r8d,%r8d
jle 2d <func1+0x2d>
mov %edi,%r9d
imul %r8d,%r9d
jmp 3b <func1+0x3b>
mov %edi,%r9d
imul %r8d,%r9d
add %edx,%r9d
imul %esi,%r9d
lea 0x1(%r9,%rdi,1),%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a2 * a1 + a4;
    }
    if (v6 < a4)
    {
        v8 = (a1 - a5) + a3 * a5;
    }
    else
    {
        v8 = a2 - (a4 + a5 * a4);
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        v9 += a4 + a5 * a2;
    }
    if (v9 < a5)
    {
        v11 = a1 * a5;
    }
    else
    {
        v11 = (a1 * a5 + a3) * a2;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 11
8 11
9 15
10 15
11 15
12 15
13 22
14 22
15 24
16 24
17 24
18 28
19 28
20 28
21 28
22 30
23 30
24 30
25 30
26 30
27 30
28 31
<<<sep_out_sample>>>
test %r8d,%r8d
jle e <func1+0xe>
mov %r8d,%r9d
imul %r8d,%r9d
jmp 15 <func1+0x15>
mov %ecx,%r9d
imul %edi,%r9d
mov %ecx,%eax
sub %edi,%eax
cmp %edi,%ecx
jle 24 <func1+0x24>
mov %esi,%eax
sub %edx,%eax
sub %r8d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (v6 < a5)
    {
        v6 = a5 * a5;
    }
    else
    {
        v6 = a1 * a4 + a1 - a1;
    }
    if (a1 < a4)
    {
        v7 = a2 - a3 - a5;
    }
    else
    {
        v7 = a4 - a1;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 18
9 18
10 12
11 12
12 14
13 14
14 14
15 20
16 20
17 20
18 20
19 20
20 20
21 21
<<<sep_out_sample>>>
lea (%rsi,%rsi,1),%eax
cmp %r8d,%esi
jle 12 <func1+0x12>
lea (%r8,%rsi,1),%eax
imul %ecx,%eax
imul %edi,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%ecx
add %ecx,%eax
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a1 - a2;
    }
    if (a5 < a2)
    {
        v8 = a4 * (a5 + a2) * a1;
    }
    else
    {
        v8 = a2 + a2;
    }
    v9 = a1 + a3;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 15
2 9
3 9
4 11
5 11
6 11
7 17
8 18
9 18
10 18
11 18
12 18
13 19
<<<sep_out_sample>>>
mov %edi,%eax
sub %esi,%eax
cmp %r8d,%esi
jge 10 <func1+0x10>
lea (%rdi,%rcx,1),%eax
imul %r8d,%eax
cmp %edx,%eax
jge 1f <func1+0x1f>
lea 0x1(%rsi,%rdx,1),%r9d
imul %edi,%r9d
jmp 26 <func1+0x26>
mov %edi,%r9d
imul %ecx,%r9d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%eax
lea 0x1(%r9,%rax,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a2 < a5)
    {
        v6 = a5 * (a1 + a4);
    }
    else
    {
        v6 = a1 - a2;
    }
    if (v6 < a3)
    {
        v7 = a1 * (a3 + a2) + a1;
    }
    else
    {
        v7 = (a1 - (a4 - a4)) * a4;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += (a1 + a3) + a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 4
4 4
5 6
6 6
7 12
8 12
9 14
10 14
11 14
12 18
13 18
14 25
15 25
16 25
17 25
18 25
19 25
20 26
<<<sep_out_sample>>>
mov %edi,%r10d
imul %ecx,%r10d
add %edx,%r10d
cmp %esi,%r8d
jge 1e <func1+0x1e>
mov %ecx,%r9d
sub %edx,%r9d
imul %ecx,%r9d
add %esi,%r9d
jmp 2c <func1+0x2c>
mov %edi,%r9d
imul %edi,%r9d
sub %edx,%r9d
imul %edi,%r9d
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
add %esi,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a3 + (a1 * a4);
    if (a5 < a2)
    {
        v7 = a2 + (a4 - a3) * a4;
    }
    else
    {
        v7 = a1 * ((a1 * a1) - a3);
    }
    v8 = a4 + a2 - a4 + a4;
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        if (a2 < a5)
        {
            v9 += a5 * (a4 - a4);
        }
        else
        {
            v9 += a4 - a3 * a5;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 5
5 5
6 7
7 7
8 7
9 7
10 7
11 11
12 11
13 11
14 11
15 26
16 26
17 26
18 26
19 26
20 26
21 13
22 26
23 27
<<<sep_out_sample>>>
lea (%rsi,%rdx,1),%r10d
mov %ecx,%r9d
sub %esi,%r9d
cmp %ecx,%esi
jg 15 <func1+0x15>
mov %edx,%r9d
imul %r8d,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a2 + a3;
    if (a4 < a2)
    {
        v7 = a4 - a2;
    }
    else
    {
        v7 = a3 * a5;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 7
3 7
4 5
5 5
6 11
7 11
8 13
9 13
10 13
11 13
12 13
13 13
14 14
<<<sep_out_sample>>>
mov %edi,%r10d
sub %r8d,%r10d
cmp %ecx,%edi
jge 17 <func1+0x17>
lea (%rcx,%rcx,1),%r9d
imul %esi,%r9d
add %ecx,%r9d
jmp 21 <func1+0x21>
mov %r8d,%r9d
imul %esi,%r9d
add %edi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a1 - a5;
    if (a1 < a4)
    {
        v7 = ((a4 + a4) * a2) + a4;
    }
    else
    {
        v7 = a1 + (a5 * a2);
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 5
4 5
5 7
6 7
7 7
8 7
9 11
10 11
11 11
12 13
13 13
14 13
15 13
16 13
17 13
18 14
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%eax
imul %r8d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (v6 < a4)
        {
            v6 += a3 + (a5 - a4);
        }
        else
        {
            v6 += a5 + (a1 + a2);
        }
    }
    v8 = a4 * a5;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 16
6 17
7 18
<<<sep_out_sample>>>
cmp %esi,%edx
jge 12 <func1+0x12>
mov %ecx,%eax
imul %r8d,%eax
imul %esi,%eax
imul %edx,%eax
jmp 17 <func1+0x17>
mov %edi,%eax
imul %esi,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (a4 < a4)
        {
            v6 += a4 + a2 * a2;
        }
        else
        {
            v6 += (a5 - a1) - a1;
        }
    }
    if (a3 < a2)
    {
        v8 = ((a4 * a5) * a2) * a3;
    }
    else
    {
        v8 = a1 * a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 18
7 18
8 22
9 22
10 24
11 24
12 24
13 24
14 24
15 25
<<<sep_out_sample>>>
lea (%rcx,%rdi,1),%r9d
lea (%rdi,%rdx,2),%eax
lea (%r9,%rsi,2),%edx
lea (%rdx,%rax,1),%eax
add %eax,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (a1 < a4)
        {
            v6 += a5 + a2;
        }
        else
        {
            v6 += a3 * a5 * a5;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        if (a2 < a1)
        {
            v8 += a4 - a5 * a4;
        }
        else
        {
            v8 += a2 - a3;
        }
    }
    v10 = a3 + (a4 + a1 + a2);
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 28
2 29
3 29
4 29
5 29
6 29
7 30
<<<sep_out_sample>>>
mov %ecx,%r9d
sub %r8d,%r9d
test %edx,%edx
jle 12 <func1+0x12>
lea (%rdi,%rcx,1),%r9d
imul %esi,%r9d
lea (%rsi,%rsi,1),%r10d
lea (%rsi,%r8,1),%eax
cmp %r8d,%esi
jge 29 <func1+0x29>
mov $0x2,%eax
sub %edi,%eax
imul %ecx,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
add %r10d,%r9d
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (v6 < a3)
    {
        v6 = (a1 + a4) * a2;
    }
    else
    {
        v6 = a4 - a5;
    }
    v7 = a5 - (a5 - a2 - a2);
    if (a2 < a5)
    {
        v8 = a4 - a4 * a1 + a4;
    }
    else
    {
        v8 = (a2 - a4 + a4) + a5;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        if (v10 < a3)
        {
            v9 += a1 + a5 * a1;
        }
        else
        {
            v9 += a3 + a1 + a3;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 4
4 4
5 6
6 6
7 12
8 19
9 13
10 13
11 15
12 15
13 15
14 33
15 33
16 33
17 33
18 33
19 33
20 33
21 34
<<<sep_out_sample>>>
cmp %edi,%r8d
jge 10 <func1+0x10>
mov %r8d,%eax
imul %r8d,%eax
sub %edx,%eax
jmp 16 <func1+0x16>
lea (%rsi,%r8,2),%eax
sub %edi,%eax
lea (%rdi,%rdx,1),%r9d
add %r9d,%esi
add %esi,%r8d
add %ecx,%r8d
add %eax,%r8d
sub $0x1,%ecx
imul %ecx,%edi
sub %edx,%edi
lea (%r8,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a5 < a1)
    {
        v6 = a5 * a5 - a3;
    }
    else
    {
        v6 = (a2 + a5 + a5) - a1;
    }
    v7 = (a4 * a1) - a1 - a3;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 13
10 13
11 13
12 13
13 13
14 12
15 12
16 12
17 13
18 14
<<<sep_out_sample>>>
lea (%rdx,%r8,1),%r9d
sub %ecx,%r9d
imul %edx,%r9d
mov %edx,%eax
sub %ecx,%eax
cmp %esi,%edi
jge 1c <func1+0x1c>
mov %edi,%eax
sub %ecx,%eax
imul %edi,%eax
add %esi,%eax
cmp $0x1,%edi
jle 2d <func1+0x2d>
mov %ecx,%r10d
imul %ecx,%r10d
add %r8d,%r10d
jmp 34 <func1+0x34>
mov %ecx,%r10d
imul %esi,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a3 * (a3 + a5 - a4);
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += (a5 * a5) - a3;
    }
    if (a1 < a2)
    {
        v9 = a2 - (a1 * (a4 - a1));
    }
    else
    {
        v9 = a3 - a4;
    }
    if (v8 < a1)
    {
        v10 = (a4 * a4) + a5;
    }
    else
    {
        v10 = a4 * a2;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 16
5 16
6 10
7 10
8 12
9 12
10 12
11 12
12 18
13 18
14 20
15 20
16 20
17 20
18 24
19 24
20 26
21 26
22 26
23 26
24 26
25 26
26 26
27 27
<<<sep_out_sample>>>
cmp %edi,%esi
jge e <func1+0xe>
lea (%rdx,%rsi,1),%eax
imul %ecx,%eax
add %esi,%eax
jmp 19 <func1+0x19>
mov %ecx,%eax
imul %edi,%eax
imul %edx,%eax
imul %edx,%eax
lea 0x1(%rdi,%rdx,1),%r9d
add %esi,%r9d
add %r9d,%r8d
add %r8d,%ecx
add %eax,%ecx
imul %esi,%esi
imul %esi,%edx
sub %edi,%edx
lea 0x1(%rcx,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    if (a2 < a1)
    {
        v6 = a4 * (a3 + a2) + a2;
    }
    else
    {
        v6 = ((a4 * a1) * a3) * a3;
    }
    v7 = a2 * a2 * a3 - a1;
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += a3 + a1 * a4;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a2)
    {
        v10 += (a5 - a2) * a4;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 10
11 23
12 23
13 23
14 23
15 23
16 12
17 12
18 12
19 23
20 24
<<<sep_out_sample>>>
mov %r8d,%r11d
sub %edi,%r11d
mov %edx,%eax
imul %r8d,%eax
add %eax,%r11d
cmp %esi,%r8d
jge 22 <func1+0x22>
mov %ecx,%r10d
sub %esi,%r10d
add %edi,%r10d
sub %edx,%r10d
jmp 32 <func1+0x32>
mov $0x1,%r10d
sub %edx,%r10d
imul %edx,%r10d
add %edi,%r10d
lea (%rsi,%rdi,1),%r9d
cmp %esi,%r8d
jle 4a <func1+0x4a>
mov %r8d,%r9d
imul %r8d,%r9d
add $0x1,%r9d
imul %edi,%r9d
add %r9d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %r11d,%eax
add %r10d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (a3 < a5)
        {
            v6 += (a2 - a4) - a1;
        }
        else
        {
            v6 += a3 - a4;
        }
    }
    v8 = a5 - a1 + a3 * a5;
    if (a5 < a2)
    {
        v9 = (a4 - a2) + a1 - a3;
    }
    else
    {
        v9 = a1 - ((a3 * a3) - a3);
    }
    if (a2 < a5)
    {
        v10 = ((a5 * a5) * a1) + a1;
    }
    else
    {
        v10 = (a5 + a2 - a5) + a1;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 16
4 16
5 16
6 17
7 17
8 19
9 19
10 19
11 19
12 19
13 23
14 23
15 23
16 23
17 31
18 25
19 25
20 27
21 27
22 27
23 27
24 33
25 33
26 33
27 33
28 33
29 33
30 33
31 34
<<<sep_out_sample>>>
mov %esi,%r11d
sub %edi,%r11d
mov %esi,%r10d
sub %edx,%r10d
cmp %edx,%esi
jge 1c <func1+0x1c>
mov %r8d,%r9d
sub %esi,%r9d
imul %edi,%r9d
jmp 27 <func1+0x27>
lea 0x1(%rdx),%r9d
imul %r8d,%r9d
add %edi,%r9d
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a2 - a1;
    v7 = ((a2 - a5) + a5) - a3;
    if (a2 < a3)
    {
        v8 = a5 * a1 - a2 * a1;
    }
    else
    {
        v8 = a5 + (a5 * a3) + a1;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        v9 += a5 + a1;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 5
4 5
5 6
6 6
7 8
8 8
9 8
10 8
11 12
12 12
13 12
14 19
15 19
16 19
17 19
18 19
19 19
20 19
21 20
<<<sep_out_sample>>>
cmp %edi,%r8d
jle d <func1+0xd>
lea 0x1(%rdx),%eax
imul %esi,%eax
jmp 12 <func1+0x12>
mov %edi,%eax
imul %edx,%eax
cmp %ecx,%r8d
jge 27 <func1+0x27>
mov %ecx,%r9d
imul %r8d,%r9d
imul %edx,%r9d
add %esi,%r9d
jmp 33 <func1+0x33>
mov %edx,%r9d
sub %edi,%r9d
sub %ecx,%r9d
sub %ecx,%r9d
lea 0x1(%r9,%rdi,1),%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (v6 < a2)
        {
            v6 += a3 + a5 + a3;
        }
        else
        {
            v6 += (a1 + a4) + a3;
        }
    }
    if (a1 < a5)
    {
        v8 = a3 * a2 + a2;
    }
    else
    {
        v8 = a1 * a3;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        if (a3 < a2)
        {
            v9 += a1 * a2 - a3;
        }
        else
        {
            v9 += (a1 + a1) * a4;
        }
    }
    if (a5 < a4)
    {
        v11 = ((a4 * a5) * a3) + a2;
    }
    else
    {
        v11 = (a3 - a1 - a4) - a4;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 22
7 22
8 36
9 36
10 38
11 38
12 38
13 38
14 38
15 42
16 42
17 42
18 42
19 44
20 44
21 44
22 44
23 44
24 44
25 45
<<<sep_out_sample>>>
cmp %edi,%r8d
jge 16 <func1+0x16>
lea (%r8,%rcx,1),%r9d
mov $0x1,%eax
sub %r9d,%eax
imul %edi,%eax
jmp 1e <func1+0x1e>
lea (%rsi,%rcx,1),%eax
imul %edi,%eax
add %ecx,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a5 < a1)
    {
        v6 = a1 - (a5 + a4) * a1;
    }
    else
    {
        v6 = a4 + (a2 + a4) * a1;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        if (a2 < a2)
        {
            v7 += a2 - a1 + a3;
        }
        else
        {
            v7 += a1 + a5 - a4;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 24
12 24
13 24
14 24
15 24
16 25
<<<sep_out_sample>>>
cmp %ecx,%edx
jge 15 <func1+0x15>
mov %r8d,%r11d
imul %edx,%r11d
imul %esi,%r11d
imul %edx,%r11d
jmp 23 <func1+0x23>
mov %esi,%r11d
imul %edx,%r11d
imul %edi,%r11d
add %ecx,%r11d
mov %ecx,%r9d
sub %edi,%r9d
lea (%r8,%rcx,1),%r10d
add %edi,%r10d
cmp %r9d,%edi
jg 42 <func1+0x42>
mov %edx,%r10d
imul %edi,%r10d
add %r8d,%r10d
add %ecx,%r10d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r11d,%ecx
add %ecx,%r9d
lea (%r9,%r10,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a3 < a4)
    {
        v6 = (a5 * a3 * a2) * a3;
    }
    else
    {
        v6 = a4 + ((a2 * a3) * a1);
    }
    v7 = (a2 - a1) - a2 + a4;
    if (v7 < a1)
    {
        v8 = a5 + a4 + a1;
    }
    else
    {
        v8 = a4 + (a3 * a1 + a5);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 12
13 12
14 15
15 15
16 13
17 13
18 19
19 19
20 19
21 19
22 21
23 21
24 21
25 21
26 21
27 21
28 21
29 22
<<<sep_out_sample>>>
cmp $0x1,%ecx
jle f <func1+0xf>
lea 0x2(%rsi),%r10d
imul %edx,%r10d
jmp 17 <func1+0x17>
lea 0x1(%rdx),%r10d
imul %edx,%r10d
lea (%rdi,%rdx,1),%r9d
test %ecx,%ecx
jg 2f <func1+0x2f>
mov %edi,%r9d
sub %ecx,%r9d
mov %r8d,%r11d
imul %ecx,%r11d
sub %r11d,%r9d
add %r8d,%edi
add %ecx,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (a4 < a2)
        {
            v6 += a2 + a3 + a2;
        }
        else
        {
            v6 += (a2 - a5) + a5;
        }
    }
    if (v7 < a4)
    {
        v8 = a3 + (a3 + (a3 * a2));
    }
    else
    {
        v8 = a3 + a3 * a3;
    }
    if (v9 < a4)
    {
        v9 = a1 + a3;
    }
    else
    {
        v9 = (a1 - a4) - (a5 * a4);
    }
    if (a2 < a2)
    {
        v10 = (a1 - a3) + a4 * a4;
    }
    else
    {
        v10 = (a5 + a1 + a4) - a1;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 22
7 22
8 26
9 24
10 24
11 30
12 30
13 30
14 30
15 30
16 38
17 38
18 40
19 40
20 40
21 40
22 40
23 40
24 41
<<<sep_out_sample>>>
cmp %edi,%r8d
jge c <func1+0xc>
mov %edx,%eax
imul %edx,%eax
jmp 13 <func1+0x13>
lea (%rcx,%r8,1),%eax
imul %edx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a5 < a1)
    {
        v6 = a3 * a3;
    }
    else
    {
        v6 = a4 * a3 + a3 * a5;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += a2 + (a2 + a4);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 17
9 17
10 17
11 17
12 17
13 18
<<<sep_out_sample>>>
mov %r8d,%r9d
sub %edi,%r9d
cmp %edx,%esi
mov $0x0,%eax
cmovl %r9d,%eax
mov %ecx,%r9d
sub %edx,%r9d
cmp %r8d,%eax
cmovl %edi,%r9d
lea (%rcx,%rdx,2),%r10d
imul %esi,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%eax
lea 0x1(%r9,%rax,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a2 < a3)
    {
        v6 = a5 - a1;
    }
    else
    {
        v6 = (a4 - a4) * a3;
    }
    if (v6 < a5)
    {
        v7 = a4 - (a4 - a1);
    }
    else
    {
        v7 = a4 - a3;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        if (v9 < a2)
        {
            v8 += a5 * a4 - a4;
        }
        else
        {
            v8 += a2 - (a4 * a2);
        }
    }
    v10 = (a3 + a4 + a3) * a2;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 6
6 18
7 18
8 18
9 18
10 32
11 32
12 33
13 33
14 33
15 33
16 33
17 33
18 33
19 34
<<<sep_out_sample>>>
mov %ecx,%eax
sub %edi,%eax
mov %edi,%r9d
sub %esi,%r9d
cmp %ecx,%r8d
cmovge %r9d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %ecx,%r8d
lea 0x1(%rax,%r8,1),%eax
imul %edx,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a5 < a4)
    {
        v6 = a4 - a1;
    }
    else
    {
        v6 = a1 + a5 - a5 - a2;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a5 + a5 - a3;
    }
    v9 = a1 - a1 + a3 * a4;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 6
6 6
7 18
8 18
9 18
10 18
11 18
12 17
13 18
14 19
<<<sep_out_sample>>>
mov $0x0,%r9d
cmp %esi,%r8d
jge 19 <func1+0x19>
mov %edx,%r9d
imul %r8d,%r9d
imul %edx,%r9d
add %ecx,%r9d
cmp %edi,%r8d
jge 2d <func1+0x2d>
mov %edi,%r10d
sub %r8d,%r10d
imul %esi,%r10d
add %ecx,%r10d
jmp 3c <func1+0x3c>
mov %edx,%r10d
imul %edi,%r10d
add $0x1,%r10d
imul %edx,%r10d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
lea (%r9,%r10,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a5 < a2)
    {
        v6 = a4 + a3 * a5 * a3;
    }
    else
    {
        v6 = a4 - a4;
    }
    if (a5 < a1)
    {
        v7 = a4 + (a1 - a5) * a2;
    }
    else
    {
        v7 = (a3 * a1 * a3) + a3;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 6
7 6
8 12
9 12
10 14
11 14
12 14
13 14
14 14
15 18
16 18
17 18
18 18
19 20
20 20
21 20
22 20
23 20
24 20
25 21
<<<sep_out_sample>>>
cmp %esi,%edx
jge 18 <func1+0x18>
mov %edx,%eax
imul %edi,%eax
imul %r8d,%eax
mov %edx,%r9d
sub %eax,%r9d
mov %r9d,%eax
jmp 20 <func1+0x20>
lea (%rsi,%rdi,1),%eax
sub %ecx,%eax
sub %r8d,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %ecx,%r8d
lea 0x1(%rax,%r8,1),%eax
imul %ecx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    if (a3 < a2)
    {
        v6 = a3 - (a3 * a1 * a5);
    }
    else
    {
        v6 = a2 + a1 - a4 - a5;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        if (a1 < a1)
        {
            v7 += a5 * a5 - a5;
        }
        else
        {
            v7 += a3 + a3 + a3;
        }
    }
    v9 = ((a5 + a1) - a5) * a4;
    v10 = 0;
    for (v11 = 0; v11++; v11<a3)
    {
        v10 += (a2 * a3) * a5;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 6
9 6
10 10
11 10
12 10
13 30
14 30
15 30
16 30
17 30
18 24
19 30
20 31
<<<sep_out_sample>>>
push %rbx
test %edi,%edi
jle d <func1+0xd>
lea (%r8,%rdi,1),%ebx
add %esi,%ebx
jmp 18 <func1+0x18>
mov %r8d,%ebx
imul %ecx,%ebx
imul %esi,%ebx
sub %ecx,%ebx
lea (%rcx,%rdx,1),%r11d
mov %esi,%r10d
sub %edi,%r10d
sub %edx,%r10d
imul %esi,%r10d
mov %edi,%r9d
sub %esi,%r9d
cmp %esi,%edi
cmovl %ecx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %ebx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (v6 < a1)
    {
        v6 = a2 + (a5 + a1);
    }
    else
    {
        v6 = ((a5 * a4) * a2) - a4;
    }
    v7 = a4 + a3;
    v8 = ((a2 - a1) - a3) * a2;
    if (a1 < a2)
    {
        v9 = ((a1 - a1) * a2) + a4;
    }
    else
    {
        v9 = a3 - a3 + a1 - a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 2
2 4
3 4
4 6
5 6
6 6
7 10
8 10
9 10
10 10
11 12
12 13
13 13
14 13
15 13
16 20
17 20
18 20
19 20
20 22
21 22
22 22
23 22
24 22
25 22
26 22
27 22
28 23
29 23
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %r8d,%edx
lea 0x1(%rcx,%rdx,1),%edx
lea -0x1(%rsi,%rsi,1),%eax
imul %esi,%eax
add %edx,%eax
imul %esi,%esi
add %r8d,%ecx
imul %ecx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a3 * (a2 * a1);
    }
    v8 = ((a2 + a2) * a2) - a2;
    v9 = a2 * a2 * (a4 + a5);
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 11
3 11
4 11
5 9
6 9
7 11
8 10
9 10
10 10
11 11
12 12
<<<sep_out_sample>>>
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rcx,%rdi,4),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a1 + (a1 + a1) + a1;
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a3 - a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 10
6 11
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
lea 0x1(%rcx,%r8,1),%eax
imul %edx,%esi
sub %edi,%ecx
add %esi,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a4 + a1;
    }
    v8 = a3 * a2 - (a1 - a4);
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 9
6 9
7 9
8 10
9 11
<<<sep_out_sample>>>
mov %r8d,%r9d
sub %edx,%r9d
test %edx,%edx
jle 19 <func1+0x19>
mov %r8d,%r9d
imul %edx,%r9d
sub $0x1,%r9d
imul %ecx,%r9d
cmp %r8d,%edx
jge 2d <func1+0x2d>
mov %ecx,%eax
sub %r8d,%eax
imul %r8d,%eax
imul %r8d,%eax
jmp 38 <func1+0x38>
mov $0x2,%eax
sub %ecx,%eax
imul %r8d,%eax
cmp %r8d,%eax
jge 4d <func1+0x4d>
mov %r8d,%r10d
imul %r8d,%r10d
imul %r8d,%r10d
add %ecx,%r10d
jmp 60 <func1+0x60>
mov %ecx,%r10d
imul %ecx,%r10d
mov %esi,%r11d
sub %r10d,%r11d
mov %r11d,%r10d
add %edi,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%r9d
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += (a3 * a5) - a5;
    }
    if (v6 < a3)
    {
        v8 = (a5 * a3) * a4 - a4;
    }
    else
    {
        v8 = a5 - a3;
    }
    if (a3 < a5)
    {
        v9 = ((a4 - a5) * a5) * a5;
    }
    else
    {
        v9 = a5 + (a5 - a5 * a4);
    }
    if (v9 < a5)
    {
        v10 = a4 + (a5 * a5) * a5;
    }
    else
    {
        v10 = a1 + (a2 - a4 * a4);
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 15
2 15
3 9
4 9
5 11
6 11
7 11
8 11
9 17
10 17
11 19
12 19
13 19
14 19
15 19
16 23
17 23
18 23
19 25
20 25
21 27
22 27
23 27
24 27
25 27
26 31
27 31
28 31
29 31
30 31
31 31
32 33
33 33
34 33
35 33
36 33
37 33
38 33
39 34
<<<sep_out_sample>>>
cmp %esi,%ecx
jge 15 <func1+0x15>
mov %esi,%eax
imul %r8d,%eax
imul %edx,%eax
mov %edi,%r11d
sub %eax,%r11d
jmp 24 <func1+0x24>
mov %edi,%r11d
imul %ecx,%r11d
imul %edx,%r11d
imul %ecx,%r11d
lea (%rdx,%rcx,1),%r9d
test %esi,%esi
jle 39 <func1+0x39>
mov %r8d,%r9d
imul %esi,%r9d
sub %edi,%r9d
add %edx,%r9d
lea (%rdi,%rcx,1),%eax
mov %edx,%r10d
sub %ecx,%r10d
cmp %edi,%esi
cmovg %eax,%r10d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r11d,%ecx
add %ecx,%r9d
lea (%r9,%r10,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a4 < a2)
    {
        v6 = a1 - a2 * a5 * a3;
    }
    else
    {
        v6 = (a1 * a4) * a3 * a4;
    }
    if (v7 < a2)
    {
        v7 = a3 - (a1 - a5 * a2);
    }
    else
    {
        v7 = (a4 - a4 + a3) + a4;
    }
    if (a1 < a2)
    {
        v8 = a5 - a5 + a1 + a4;
    }
    else
    {
        v8 = a3 - a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 6
9 10
10 10
11 10
12 10
13 18
14 12
15 12
16 14
17 14
18 14
19 14
20 22
21 22
22 22
23 22
24 22
25 28
26 28
27 28
28 28
29 28
30 28
31 28
32 29
<<<sep_out_sample>>>
lea 0x1(%rsi),%eax
imul %edx,%eax
lea 0x1(%rdi,%rax,1),%eax
add %eax,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (a3 < a1)
        {
            v6 += a1 * a4 + a3;
        }
        else
        {
            v6 += a5 * a5;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += (a2 - a2) + a1;
    }
    v10 = a3 * a2 + a3;
    v11 = 0;
    for (v12 = 0; v12++; v12<a1)
    {
        v11 += a2 * a1 + a4;
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 27
4 27
5 27
6 27
7 27
8 28
<<<sep_out_sample>>>
cmp %esi,%ecx
jge d <func1+0xd>
mov %edi,%r10d
imul %r8d,%r10d
jmp 15 <func1+0x15>
lea 0x1(%rdx),%r10d
imul %r8d,%r10d
cmp %edx,%esi
jle 26 <func1+0x26>
lea (%rsi,%r8,1),%r9d
imul %ecx,%r9d
add %esi,%r9d
jmp 33 <func1+0x33>
mov %r8d,%r9d
sub %edi,%r9d
imul %edx,%r9d
sub %esi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
imul %ecx,%edx
add %edx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a4 < a2)
    {
        v6 = (a1 * a5 - a2) + a2;
    }
    else
    {
        v6 = a5 + a3 * a5;
    }
    if (a3 < a2)
    {
        v7 = (a4 * (a2 + a5)) + a2;
    }
    else
    {
        v7 = (a3 * (a5 - a1)) - a2;
    }
    if (a3 < a3)
    {
        v8 = a1 - (a3 + (a1 * a2));
    }
    else
    {
        v8 = a2 + a3 * a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 12
9 12
10 14
11 14
12 14
13 14
14 18
15 18
16 18
17 18
18 28
19 28
20 28
21 28
22 28
23 28
24 26
25 26
26 28
27 29
<<<sep_out_sample>>>
lea (%rdi,%r8,1),%r9d
cmp %edx,%edi
jge 10 <func1+0x10>
lea 0x1(%rcx),%eax
imul %edi,%eax
jmp 1b <func1+0x1b>
mov %edi,%eax
imul %esi,%eax
add %edx,%eax
imul %r8d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a1 + a5;
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a5 + a3;
    }
    if (a1 < a3)
    {
        v9 = a1 + a4 * a1;
    }
    else
    {
        v9 = ((a1 * a2) + a3) * a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 10
3 10
4 12
5 12
6 12
7 16
8 16
9 16
10 16
11 18
12 18
13 18
14 18
15 18
16 18
17 19
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %r8d,%esi
lea -0x1(%rcx),%eax
imul %eax,%r8d
lea (%rsi,%rcx,2),%eax
lea 0x1(%r8,%rax,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a5 < a5)
    {
        v6 = (a4 * a1 - a5) * a5;
    }
    else
    {
        v6 = (a5 * a4 - a5) + a4;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a1)
    {
        v7 += a4 * a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 10
5 10
6 10
7 17
8 18
<<<sep_out_sample>>>
mov %esi,%r9d
imul %edx,%r9d
mov %esi,%eax
cmp %ecx,%esi
jl 15 <func1+0x15>
imul %esi,%eax
imul %esi,%eax
add %edi,%eax
add %edi,%edx
add %edx,%esi
add %r8d,%esi
add %esi,%ecx
add %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a2 * a3 - a3 + a3;
    if (a2 < a4)
    {
        v7 = (a2 + a1) - a1;
    }
    else
    {
        v7 = a1 + (a2 * a2) * a2;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 7
4 5
5 5
6 11
7 11
8 11
9 13
10 13
11 13
12 13
13 13
14 13
15 14
<<<sep_out_sample>>>
mov %edi,%eax
sub %ecx,%eax
mov %edi,%r9d
sub %r8d,%r9d
cmp %ecx,%edx
cmovle %r9d,%eax
mov %r8d,%r9d
sub %ecx,%r9d
cmp %r8d,%esi
jg 29 <func1+0x29>
mov %r8d,%r9d
sub %ecx,%r9d
add $0x1,%r9d
imul %edi,%r9d
add %r9d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a2 * a3 * a1;
    }
    v8 = a2 - a2;
    if (a4 < a3)
    {
        v9 = a1 - a4;
    }
    else
    {
        v9 = a1 - a5;
    }
    if (a5 < a2)
    {
        v10 = a5 - a4;
    }
    else
    {
        v10 = a1 + (a5 - a4) * a1;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 12
2 12
3 12
4 12
5 12
6 12
7 20
8 20
9 18
10 18
11 24
12 24
13 24
14 24
15 26
16 26
17 26
18 26
19 26
20 26
21 27
<<<sep_out_sample>>>
cmp %ecx,%edx
jge d <func1+0xd>
mov %edx,%eax
sub %ecx,%eax
lea (%rax,%rsi,2),%eax
jmp 13 <func1+0x13>
lea (%rdx,%rdi,2),%eax
sub %r8d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %eax,%ecx
lea 0x1(%rdx,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a3 < a4)
    {
        v6 = a2 - (a4 - a3) + a2;
    }
    else
    {
        v6 = (a3 - (a5 - a1)) + a1;
    }
    v7 = a2 + a1 - a2 + a3;
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        if (v7 < a3)
        {
            v8 += (a1 * a2) + a2;
        }
        else
        {
            v8 += a4 - a5 + a2;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 12
10 25
11 25
12 25
13 25
14 25
15 26
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %r8d,%edx
lea 0x1(%rcx,%rdx,1),%edx
add %r8d,%ecx
lea (%rcx,%rsi,2),%eax
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += (a2 * a1) * a3;
    }
    v8 = a4 + a5 + a2 + a2;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 9
6 9
7 10
8 11
<<<sep_out_sample>>>
lea (%r8,%rdi,2),%eax
lea (%rsi,%r8,1),%r9d
cmp %edx,%esi
cmovge %r9d,%eax
lea 0x1(%rsi),%r9d
imul %esi,%r9d
lea 0x1(%rdi,%r9,1),%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    if (a2 < a3)
    {
        v6 = (a5 + a1) + a1;
    }
    else
    {
        v6 = ((a2 - a4) + a4) + a5;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += a4 * a2;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        v9 += (a5 - a2) - a2;
    }
    v11 = a2 + a2 * a2;
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 22
6 22
7 23
8 23
9 23
10 23
11 23
12 23
13 24
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (a4 < a2)
        {
            v6 += (a3 + a1) + a1;
        }
        else
        {
            v6 += (a3 - a3) - a1;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += a3 + a2 + a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 21
5 22
<<<sep_out_sample>>>
mov %edi,%eax
sub %ecx,%eax
lea (%rsi,%r8,1),%r9d
test %esi,%esi
jle 20 <func1+0x20>
mov %r8d,%r9d
imul %r8d,%r9d
mov %edi,%r10d
sub %r9d,%r10d
mov %r10d,%r9d
imul %esi,%r9d
lea 0x1(%r9,%rdi,1),%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a1 - (a5 + a4);
    }
    v8 = a2 - a4 + a1 - a2;
    v9 = 0;
    for (v10 = 0; v10++; v10<a1)
    {
        v9 += a1 * a4 * a2;
    }
    if (v6 < a2)
    {
        v11 = (a1 - a5 * a5) * a2;
    }
    else
    {
        v11 = a2 + a5;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 21
4 15
5 15
6 17
7 17
8 17
9 17
10 17
11 17
12 23
13 23
14 23
15 23
16 23
17 23
18 24
<<<sep_out_sample>>>
lea (%rsi,%r8,1),%r9d
add %edx,%r9d
mov $0x0,%eax
cmp %edx,%r8d
jle 19 <func1+0x19>
lea (%rsi,%rcx,1),%eax
sub %edi,%eax
sub %r8d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a2 + a5 + a3;
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += a3 + a4 - a5;
    }
    if (a3 < a5)
    {
        v9 = (a2 + a4) - a1 - a5;
    }
    else
    {
        v9 = a4 + a3 - a3 - a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 16
4 10
5 10
6 12
7 12
8 12
9 18
10 18
11 18
12 18
13 18
14 18
15 19
<<<sep_out_sample>>>
lea (%rsi,%rdx,1),%r9d
cmp %edi,%edx
jl 13 <func1+0x13>
lea (%rsi,%r8,1),%r9d
imul %edx,%r9d
sub %ecx,%r9d
lea (%rdx,%rsi,1),%eax
cmp $0x1,%edx
jle 23 <func1+0x23>
mov %r8d,%eax
sub %edi,%eax
lea (%rax,%rcx,2),%eax
lea (%rdi,%rdx,2),%edx
lea (%rsi,%r8,2),%esi
lea (%rsi,%rdx,1),%edx
add %edx,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a3 < a1)
    {
        v6 = a2 + a3;
    }
    else
    {
        v6 = (a2 + a5) * a3 - a4;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a5 * a4 * a1;
    }
    if (v8 < a3)
    {
        v9 = (a5 - a1) + a4 + a4;
    }
    else
    {
        v9 = a3 + a2;
    }
    v10 = a3 + a5;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 4
3 4
4 10
5 10
6 10
7 23
8 17
9 17
10 19
11 19
12 19
13 26
14 26
15 26
16 26
17 26
18 26
19 27
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
add %r8d,%ecx
imul %edi,%edi
lea 0x1(%rcx,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a2 < a2)
    {
        v6 = a4 + (a1 + a1) * a4;
    }
    else
    {
        v6 = a1 * a1;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += a5 * a2 * a2;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a1)
    {
        if (v10 < a3)
        {
            v9 += a1 * a2;
        }
        else
        {
            v9 += a5 - (a3 + a2);
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 29
2 29
3 29
4 29
5 10
6 29
7 30
<<<sep_out_sample>>>
lea (%r8,%rdx,1),%eax
cmp $0x1,%r8d
jg 19 <func1+0x19>
mov %esi,%r9d
sub %edx,%r9d
mov %edx,%eax
imul %r8d,%eax
add %r9d,%eax
lea 0x1(%rax,%rdi,1),%eax
add %eax,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a3 - a1 + a1;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += a3 - a2 - a4;
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a1)
    {
        if (a1 < a5)
        {
            v10 += a4 + a4;
        }
        else
        {
            v10 += a2 + a4 - a3;
        }
    }
    if (v7 < a5)
    {
        v12 = a5 + a3;
    }
    else
    {
        v12 = a2 - a3 + a3 * a5;
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 28
2 26
3 26
4 32
5 32
6 32
7 32
8 32
9 34
10 34
11 34
12 34
13 34
14 35
<<<sep_out_sample>>>
cmp %edx,%r8d
jle 11 <func1+0x11>
mov %edi,%eax
imul %edx,%eax
sub %ecx,%eax
sub %r8d,%eax
jmp 18 <func1+0x18>
mov %ecx,%eax
imul %edi,%eax
neg %eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a5 * a1;
    }
    if (a3 < a5)
    {
        v8 = (a1 * a3 - a4) - a5;
    }
    else
    {
        v8 = a3 - a3 - a4 * a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 11
8 15
9 15
10 15
11 17
12 17
13 17
14 17
15 17
16 18
<<<sep_out_sample>>>
cmp %ecx,%r8d
jge a <func1+0xa>
lea (%rsi,%rsi,1),%eax
jmp 12 <func1+0x12>
mov %esi,%eax
imul %edx,%eax
imul %esi,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a5 < a4)
    {
        v6 = a2 + a2;
    }
    else
    {
        v6 = a2 * a3 * a2;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += (a1 - a2) - a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 10
6 10
7 10
8 17
9 17
10 17
11 17
12 17
13 18
<<<sep_out_sample>>>
mov %r8d,%r9d
sub %edi,%r9d
cmp %ecx,%edx
mov $0x0,%eax
cmovge %eax,%r9d
cmp %edi,%r9d
jge 25 <func1+0x25>
mov %edi,%r10d
sub %esi,%r10d
imul %esi,%r10d
add %edx,%r10d
jmp 31 <func1+0x31>
mov %edx,%r10d
sub %edi,%r10d
add %edx,%r10d
add %esi,%r10d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
lea (%r9,%r10,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a3 < a4)
    {
        v6 = a5 - a1;
    }
    else
    {
        v6 = a5 - a5;
    }
    if (v6 < a1)
    {
        v7 = (a2 * (a1 - a2)) + a3;
    }
    else
    {
        v7 = a3 - a1 + a3 + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 6
6 12
7 12
8 14
9 14
10 14
11 14
12 14
13 18
14 18
15 18
16 18
17 20
18 20
19 20
20 20
21 20
22 20
23 21
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (a4 < a4)
        {
            v6 += (a3 + a4) - a3;
        }
        else
        {
            v6 += a4 * a5 * a1;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += a1 * a1 + a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 21
5 22
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
imul %esi,%r8d
lea (%rax,%r8,1),%esi
imul %edx,%edi
imul %edi,%ecx
sub %ecx,%edx
lea 0x1(%rsi,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a2 * a5;
    v7 = a3 - a1 * a3 * a4;
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        if (v8 < a5)
        {
            v8 += a4 + a5;
        }
        else
        {
            v8 += (a1 * a4) + a2;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 18
5 4
6 18
7 5
8 5
9 5
10 18
11 19
<<<sep_out_sample>>>
test %ecx,%ecx
jle 13 <func1+0x13>
mov %ecx,%r11d
sub %edx,%r11d
sub %edi,%r11d
imul %esi,%r11d
jmp 1d <func1+0x1d>
mov %edx,%r11d
imul %edi,%r11d
add %ecx,%r11d
lea (%rsi,%rdi,1),%r10d
cmp %r8d,%ecx
jge 34 <func1+0x34>
mov %edx,%r9d
sub %ecx,%r9d
add %r8d,%r9d
add %esi,%r9d
jmp 43 <func1+0x43>
mov %ecx,%r9d
imul %edx,%r9d
add $0x1,%r9d
imul %edx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (v6 < a4)
    {
        v6 = ((a4 - a3) - a1) * a2;
    }
    else
    {
        v6 = a3 * a1 + a4;
    }
    v7 = a2 + a1;
    if (a4 < a5)
    {
        v8 = a5 + (a3 - a4) + a2;
    }
    else
    {
        v8 = a3 + a3 * (a4 * a3);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 12
12 13
13 13
14 15
15 15
16 15
17 15
18 15
19 19
20 19
21 19
22 19
23 21
24 21
25 21
26 21
27 21
28 21
29 21
30 22
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a2 * (a5 * a3);
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += a1 - a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 14
2 14
3 14
4 14
5 15
<<<sep_out_sample>>>
test %esi,%esi
jle 10 <func1+0x10>
lea (%rdx,%r8,1),%r9d
sub %esi,%r9d
add %edi,%r9d
jmp 17 <func1+0x17>
mov %edx,%r9d
imul %esi,%r9d
mov %esi,%eax
neg %eax
sub %r8d,%eax
test %ecx,%ecx
jle 2d <func1+0x2d>
mov %r8d,%eax
imul %ecx,%eax
imul %ecx,%eax
sub %edx,%eax
add %edi,%edx
add %esi,%edx
add %r8d,%edx
add %ecx,%edx
add %r9d,%edx
add %edx,%eax
imul %r8d,%esi
add %esi,%eax
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (v6 < a2)
    {
        v6 = a3 + a5 - a2 + a1;
    }
    else
    {
        v6 = a3 * a2;
    }
    if (v7 < a4)
    {
        v7 = (a5 * a4) * a4 - a3;
    }
    else
    {
        v7 = ((a3 - a2) - a3) - a5;
    }
    v8 = a2 * a5;
    v9 = a4 + a4 - a4;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 18
10 18
11 18
12 12
13 12
14 14
15 14
16 14
17 14
18 22
19 22
20 22
21 22
22 22
23 22
24 20
25 22
26 22
27 23
<<<sep_out_sample>>>
push %rbx
cmp %edx,%ecx
jge 10 <func1+0x10>
mov %edx,%r9d
sub %ecx,%r9d
sub %ecx,%r9d
jmp 1f <func1+0x1f>
mov %r8d,%r9d
imul %r8d,%r9d
lea (%r8,%rdi,1),%eax
imul %eax,%r9d
lea (%rsi,%r8,1),%r11d
cmp %esi,%ecx
jg 33 <func1+0x33>
mov %ecx,%r11d
sub %edi,%r11d
sub %r8d,%r11d
sub %esi,%r11d
cmp %ecx,%r9d
jge 46 <func1+0x46>
lea (%r8,%rdi,1),%r10d
mov %ecx,%ebx
imul %esi,%ebx
sub %ebx,%r10d
jmp 50 <func1+0x50>
lea (%rdi,%rsi,1),%r10d
sub %r8d,%r10d
add %edx,%r10d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
add %r11d,%eax
add %r10d,%eax
pop %rbx
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a4 < a3)
    {
        v6 = a3 - a4 - a4;
    }
    else
    {
        v6 = a5 * a5 * (a5 + a1);
    }
    if (a2 < a4)
    {
        v7 = a2 + a5;
    }
    else
    {
        v7 = a4 - a1 - a5 - a2;
    }
    if (v6 < a4)
    {
        v8 = a5 + a1 - a4 * a2;
    }
    else
    {
        v8 = a1 + a2 - a5 + a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 2
2 4
3 4
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 14
13 12
14 12
15 18
16 18
17 18
18 18
19 20
20 20
21 22
22 22
23 22
24 22
25 22
26 26
27 26
28 26
29 28
30 28
31 28
32 28
33 28
34 28
35 28
36 29
37 29
<<<sep_out_sample>>>
add %edx,%edi
add %esi,%edi
add %edi,%r8d
lea (%r8,%rcx,1),%edi
sub %ecx,%esi
sub %edx,%esi
lea 0x1(%rdi,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = (a2 - a4) - a3;
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        if (a1 < a4)
        {
            v7 += a4 + a3;
        }
        else
        {
            v7 += (a1 + a1) * a3;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 17
2 17
3 17
4 17
5 4
6 4
7 17
8 18
<<<sep_out_sample>>>
mov %edx,%eax
imul %edi,%eax
imul %esi,%eax
imul %r8d,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        if (v6 < a5)
        {
            v6 += a1 - a1 - a1;
        }
        else
        {
            v6 += a3 + a1 + a5;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        if (v8 < a5)
        {
            v8 += a5 * a2;
        }
        else
        {
            v8 += a4 * a5 - a4;
        }
    }
    v10 = a3 * a1 * a2 * a5;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 28
2 28
3 28
4 28
5 29
6 29
7 29
8 29
9 29
10 30
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
sub %ecx,%edx
imul %edx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (a5 < a5)
        {
            v6 += a3 - (a5 - a1);
        }
        else
        {
            v6 += a2 + a1;
        }
    }
    v8 = (a3 * a1) - a1 * a4;
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        v9 += a2 * a3 - a2;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 22
4 22
5 16
6 16
7 22
8 23
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %edx,%r8d
imul %ecx,%r8d
imul %r8d,%edx
add %edx,%eax
imul %esi,%edi
add %edi,%eax
sub %ecx,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = (a4 * (a3 + a5)) * a3;
    v7 = a2 * a1;
    if (a4 < a4)
    {
        v8 = (a5 * a2) - a3 - a3;
    }
    else
    {
        v8 = a2 - a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 14
2 14
3 14
4 14
5 4
6 4
7 4
8 14
9 5
10 14
11 12
12 14
13 15
<<<sep_out_sample>>>
mov %r8d,%eax
sub %edi,%eax
add %edx,%eax
imul %r8d,%eax
lea 0x1(%rdi,%rax,1),%eax
add %eax,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (a3 < a4)
        {
            v6 += a3 * a3 + a5;
        }
        else
        {
            v6 += a4 + (a1 + a3);
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        if (a4 < a2)
        {
            v8 += a4 - (a1 * a3);
        }
        else
        {
            v8 += a1 + a5;
        }
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a5)
    {
        v10 += a1 + a4 - a3;
    }
    v12 = ((a5 - a1) + a3) * a5;
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 33
2 33
3 33
4 33
5 34
6 34
7 34
8 34
9 34
10 35
<<<sep_out_sample>>>
test %edx,%edx
jle b <func1+0xb>
mov %esi,%eax
imul %edi,%eax
jmp 1a <func1+0x1a>
mov %ecx,%eax
imul %esi,%eax
mov %edi,%r9d
imul %edi,%r9d
sub %r9d,%eax
add %edx,%edi
add %edi,%esi
add %r8d,%esi
add %ecx,%esi
lea 0x1(%rax,%rsi,1),%eax
imul %r8d,%edx
sub %edx,%ecx
imul %ecx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (v6 < a3)
    {
        v6 = a2 * a1;
    }
    else
    {
        v6 = (a4 * a2) - a1 * a1;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        if (v6 < a4)
        {
            v7 += (a3 * a4) - a4;
        }
        else
        {
            v7 += a3 * a1 + a1;
        }
    }
    v9 = (a4 - a3 * a5) * a5;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 10
10 10
11 25
12 25
13 25
14 25
15 25
16 24
17 24
18 24
19 25
20 26
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
imul %ecx,%ecx
add %ecx,%eax
not %edi
imul %edi,%r8d
add %r8d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a4 * a4;
    v7 = a3 - ((a1 * a5) + a5);
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 6
7 5
8 5
9 5
10 6
11 7
<<<sep_out_sample>>>
cmp %edi,%esi
jge 16 <func1+0x16>
mov %ecx,%eax
imul %r8d,%eax
mov %edi,%r9d
imul %edi,%r9d
sub %r9d,%eax
jmp 1d <func1+0x1d>
mov %esi,%eax
sub %edx,%eax
imul %esi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (a4 < a5)
        {
            v6 += a4 + a4 * a2;
        }
        else
        {
            v6 += (a2 + a4) * a2;
        }
    }
    if (a2 < a1)
    {
        v8 = a4 * a5 - a1 * a1;
    }
    else
    {
        v8 = (a2 - a3) * a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 18
7 18
8 18
9 22
10 22
11 22
12 24
13 24
14 24
15 24
16 24
17 25
<<<sep_out_sample>>>
lea (%rdx,%rdi,1),%r9d
mov %esi,%r10d
imul %r8d,%r10d
add %r9d,%r10d
cmp %esi,%ecx
jge 1b <func1+0x1b>
mov %r8d,%edx
sub %esi,%edx
add %ecx,%edx
jmp 25 <func1+0x25>
mov %ecx,%eax
sub %edi,%eax
add %esi,%eax
sub %edx,%eax
mov %eax,%edx
add %r9d,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
add %r10d,%eax
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (a3 < a1)
        {
            v6 += a4 * a2;
        }
        else
        {
            v6 += a4 * a1;
        }
    }
    v8 = (a3 + a1) + a2 * a5;
    if (a4 < a2)
    {
        v9 = a5 - a2 + a4;
    }
    else
    {
        v9 = a4 - a1 + a2 - a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 16
4 16
5 17
6 17
7 19
8 19
9 19
10 19
11 23
12 23
13 23
14 23
15 23
16 25
17 25
18 25
19 25
20 25
21 26
<<<sep_out_sample>>>
lea (%rdx,%rdi,1),%r11d
lea -0x1(%rdx),%r9d
imul %edi,%r9d
lea (%rsi,%rsi,1),%r10d
lea (%r9,%rcx,1),%r9d
imul %ecx,%edx
cmp %r9d,%ecx
cmovg %edx,%r10d
mov $0x0,%eax
cmp %ecx,%edi
jle 2e <func1+0x2e>
mov %r8d,%eax
neg %eax
sub %edi,%eax
add %r11d,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r11d
add %r11d,%r9d
add %r9d,%r10d
add %r10d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a2 < a2)
    {
        v6 = (a1 - a1) - a4 + a4;
    }
    else
    {
        v6 = a3 + a1;
    }
    if (a4 < a4)
    {
        v7 = a5 - a2 * a1 * a2;
    }
    else
    {
        v7 = (a1 * a3) - a1 + a4;
    }
    if (v7 < a4)
    {
        v8 = a4 * a3;
    }
    else
    {
        v8 = a2 + a2;
    }
    if (a4 < a1)
    {
        v9 = a3 - a5 - a1 - a3;
    }
    else
    {
        v9 = (a4 * (a5 - a5)) * a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 18
3 18
4 26
5 20
6 22
7 22
8 22
9 34
10 28
11 28
12 30
13 30
14 30
15 36
16 36
17 36
18 36
19 36
20 36
21 36
22 37
<<<sep_out_sample>>>
lea (%rdx,%rdi,1),%r9d
mov %r8d,%r10d
imul %edx,%r10d
add %r9d,%r10d
mov $0x0,%eax
imul %edi,%edx
cmp %r8d,%edi
cmovle %edx,%eax
add %r9d,%esi
add %r8d,%esi
add %ecx,%esi
add %r10d,%esi
add %esi,%eax
add %ecx,%ecx
add %r8d,%edi
imul %edi,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = (a3 + a1) + (a5 * a3);
    if (a5 < a1)
    {
        v7 = (a2 - a2) * a2;
    }
    else
    {
        v7 = a1 * a3;
    }
    v8 = (a4 + a4) * (a5 + a1);
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 7
6 11
7 11
8 11
9 14
10 14
11 14
12 14
13 14
14 13
15 13
16 13
17 14
18 15
<<<sep_out_sample>>>
lea 0x2(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += (a2 * a1) + a3;
    }
    v8 = a2 - a2;
    v9 = 0;
    for (v10 = 0; v10++; v10<a3)
    {
        v9 += a5 + a3 * a5;
    }
    v11 = 0;
    for (v12 = 0; v12++; v12<a1)
    {
        if (a5 < a2)
        {
            v11 += a1 + a1 - a4;
        }
        else
        {
            v11 += (a2 * a4) + a3;
        }
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 27
2 27
3 27
4 27
5 28
<<<sep_out_sample>>>
cmp %ecx,%edx
jge d <func1+0xd>
mov %ecx,%r9d
imul %r8d,%r9d
jmp 1a <func1+0x1a>
mov %edi,%r9d
sub %esi,%r9d
imul %esi,%r9d
add %ecx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
lea (%r8,%rdi,2),%edx
add %edx,%eax
add %r8d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a3 < a4)
    {
        v6 = a4 * a5;
    }
    else
    {
        v6 = (a1 - a2) * a2 + a4;
    }
    v7 = a1 + (a5 + a1);
    v8 = a5 + a4;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 10
10 14
11 14
12 14
13 14
14 14
15 12
16 14
17 13
18 14
19 15
<<<sep_out_sample>>>
lea (%r8,%rcx,1),%eax
cmp %edx,%r8d
jge 12 <func1+0x12>
mov %edi,%eax
sub %ecx,%eax
sub %r8d,%eax
add %edi,%eax
add %edi,%edx
add %edx,%esi
add %r8d,%esi
add %ecx,%esi
add %esi,%eax
imul %ecx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a5 < a3)
    {
        v6 = a1 - (a4 - a1 + a5);
    }
    else
    {
        v6 = a5 + a4;
    }
    v7 = a5 * a4;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 6
7 6
8 13
9 13
10 13
11 13
12 13
13 12
14 13
15 14
<<<sep_out_sample>>>
mov %esi,%eax
sub %edi,%eax
test %ecx,%ecx
jg 12 <func1+0x12>
mov %edi,%eax
imul %edi,%eax
imul %esi,%eax
sub %edi,%eax
lea (%rdi,%rdx,1),%r9d
add %esi,%r9d
add %r8d,%r9d
add %ecx,%r9d
add %r9d,%eax
add %ecx,%r8d
add %edx,%r8d
add %esi,%r8d
add %r8d,%eax
imul %edi,%edx
imul %ecx,%esi
add %esi,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (v6 < a4)
    {
        v6 = a2 - a1;
    }
    else
    {
        v6 = a1 * a1 * a2 - a1;
    }
    v7 = a2 + (a3 + (a4 + a5));
    v8 = a1 * a3 + a4 * a2;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 6
2 6
3 4
4 4
5 10
6 10
7 10
8 10
9 14
10 14
11 14
12 14
13 14
14 12
15 12
16 12
17 14
18 13
19 13
20 13
21 14
22 15
<<<sep_out_sample>>>
add %edi,%edx
add %edx,%esi
add %r8d,%esi
add %r8d,%edi
imul %edi,%r8d
lea 0x1(%rsi,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += (a4 + a3) + a1;
    }
    v8 = a5 * (a5 + a1) - a4;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 9
5 9
6 10
7 11
<<<sep_out_sample>>>
mov %edx,%r9d
sub %r8d,%r9d
sub %esi,%r9d
add %ecx,%r9d
cmp %esi,%edx
jle 18 <func1+0x18>
mov %r8d,%eax
imul %edx,%eax
jmp 24 <func1+0x24>
lea (%rdx,%r8,1),%eax
imul %r8d,%eax
imul %r8d,%eax
lea (%rdi,%r8,1),%r10d
cmp %ecx,%r8d
jg 3b <func1+0x3b>
mov %edx,%r10d
imul %edi,%r10d
imul %edi,%r10d
add %r8d,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a3 - a5 - a2 + a4;
    if (a2 < a3)
    {
        v7 = a5 * a3;
    }
    else
    {
        v7 = a5 * ((a3 + a5) * a5);
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        if (a4 < a5)
        {
            v8 += a4 * a1;
        }
        else
        {
            v8 += a1 * a2 * a5;
        }
    }
    if (a4 < a5)
    {
        v10 = a1 + a5;
    }
    else
    {
        v10 = (a3 * a1) * a1 + a5;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 5
6 5
7 7
8 7
9 7
10 11
11 11
12 11
13 27
14 25
15 25
16 31
17 31
18 31
19 31
20 33
21 33
22 33
23 33
24 33
25 33
26 33
27 34
<<<sep_out_sample>>>
mov %esi,%eax
imul %ecx,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += (a3 + a2) * a5;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += a5 + a3 - a1;
    }
    v10 = a2 * a4;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 14
2 14
3 15
4 15
5 15
6 15
7 15
8 16
<<<sep_out_sample>>>
cmp %ecx,%r8d
jge e <func1+0xe>
mov %esi,%r9d
imul %edi,%r9d
jmp 1a <func1+0x1a>
mov %edi,%r9d
sub %edx,%r9d
add %esi,%r9d
add %r8d,%r9d
lea (%rsi,%r8,1),%eax
cmp %edi,%r9d
jl 31 <func1+0x31>
mov %edi,%eax
sub %ecx,%eax
mov %r8d,%r10d
imul %esi,%r10d
sub %r10d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a5 < a4)
    {
        v6 = a2 * a1;
    }
    else
    {
        v6 = a5 + (a2 + (a1 - a3));
    }
    if (v6 < a1)
    {
        v7 = a2 + a5;
    }
    else
    {
        v7 = a1 - a4 - a5 * a2;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 10
10 14
11 12
12 12
13 18
14 18
15 18
16 18
17 18
18 20
19 20
20 20
21 20
22 20
23 20
24 21
<<<sep_out_sample>>>
cmp $0x1,%r8d
jle 17 <func1+0x17>
lea (%rdx,%r8,1),%eax
mov %edi,%r9d
sub %eax,%r9d
mov %r9d,%eax
add %ecx,%eax
jmp 21 <func1+0x21>
lea 0x1(%rsi),%eax
imul %edx,%eax
imul %r8d,%eax
lea 0x2(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (a3 < a3)
        {
            v6 += a5 * a3 + a1;
        }
        else
        {
            v6 += (a2 - a1) - a1;
        }
    }
    if (v7 < a5)
    {
        v8 = a4 + (a1 - (a3 + a5));
    }
    else
    {
        v8 = ((a2 * a3) + a3) * a5;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        v9 += a4 - a5;
    }
    v11 = 0;
    for (v12 = 0; v12++; v12<a2)
    {
        v11 += a3 - a2 - a4;
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 18
7 18
8 18
9 22
10 22
11 22
12 34
13 34
14 34
15 34
16 34
17 35
<<<sep_out_sample>>>
mov %esi,%r9d
imul %r8d,%r9d
test %r8d,%r8d
jle 14 <func1+0x14>
lea (%rdx,%r8,2),%eax
add %esi,%eax
jmp 1c <func1+0x1c>
mov %ecx,%eax
sub %r8d,%eax
lea (%rax,%rdi,2),%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a2 * a5;
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        if (a2 < a3)
        {
            v7 += a4 * a5;
        }
        else
        {
            v7 += a2 - (a2 - a2);
        }
    }
    if (v7 < a5)
    {
        v9 = ((a3 + a5) + a5) + a2;
    }
    else
    {
        v9 = (a4 - a5 + a1) + a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 17
4 17
5 19
6 19
7 19
8 23
9 23
10 23
11 25
12 25
13 25
14 25
15 25
16 25
17 26
<<<sep_out_sample>>>
mov %ecx,%r9d
sub %esi,%r9d
sub %esi,%r9d
add %r8d,%r9d
cmp %edx,%ecx
jge 19 <func1+0x19>
mov %edx,%eax
neg %eax
imul %edx,%eax
jmp 26 <func1+0x26>
lea (%rsi,%rdi,1),%eax
mov %ecx,%r10d
imul %esi,%r10d
sub %r10d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a4 - a2 - a2 + a5;
    if (a4 < a3)
    {
        v7 = ((a3 - a3) - a3) * a3;
    }
    else
    {
        v7 = a2 + a1 - a4 * a2;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        if (v9 < a5)
        {
            v8 += a1 + (a5 * a4);
        }
        else
        {
            v8 += a1 * a2 + a3;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 5
6 5
7 7
8 7
9 7
10 7
11 11
12 11
13 11
14 11
15 25
16 25
17 25
18 25
19 25
20 25
21 26
<<<sep_out_sample>>>
cmp %edi,%edx
jge e <func1+0xe>
lea (%rdi,%rdi,1),%eax
sub %r8d,%eax
sub %ecx,%eax
jmp 14 <func1+0x14>
mov %esi,%eax
imul %r8d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (v6 < a3)
        {
            v6 += a1 * a1;
        }
        else
        {
            v6 += a5 + a5 * a2;
        }
    }
    if (a3 < a1)
    {
        v8 = (a1 + a1) - a5 - a4;
    }
    else
    {
        v8 = a2 * a5;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 18
7 22
8 22
9 24
10 24
11 24
12 24
13 24
14 25
<<<sep_out_sample>>>
mov %r8d,%r9d
sub %ecx,%r9d
imul %edx,%r9d
lea (%r8,%rdi,1),%r10d
cmp %edi,%edx
mov $0x0,%eax
cmovle %r10d,%eax
lea (%rdx,%rdi,1),%r10d
imul %r8d,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a5 * a3 - a3 * a4;
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += a4 * (a2 + a5);
    }
    if (a1 < a3)
    {
        v9 = a4 - a4;
    }
    else
    {
        v9 = a5 + a1;
    }
    v10 = (a3 + a1) * a5;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 16
5 16
6 16
7 16
8 18
9 18
10 19
11 19
12 19
13 19
14 19
15 19
16 19
17 20
<<<sep_out_sample>>>
cmp %esi,%edi
jge 11 <func1+0x11>
lea (%rcx,%rdx,1),%r9d
add %edi,%r9d
imul %edx,%r9d
jmp 1f <func1+0x1f>
mov %esi,%r9d
imul %edx,%r9d
imul %esi,%r9d
add %edi,%r9d
cmp %r8d,%esi
jle 2b <func1+0x2b>
mov %edi,%eax
imul %edx,%eax
jmp 3b <func1+0x3b>
lea (%rdx,%rcx,1),%eax
mov %r8d,%r10d
sub %eax,%r10d
mov %r10d,%eax
imul %r8d,%eax
add %edx,%edi
add %esi,%edi
add %r8d,%edi
add %edi,%ecx
add %r9d,%ecx
add %eax,%ecx
sub %r8d,%ecx
sub %esi,%ecx
imul %edx,%edx
sub %esi,%edx
lea (%rcx,%rdx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a1 < a2)
    {
        v6 = (a4 + a3 + a1) * a3;
    }
    else
    {
        v6 = a1 + (a2 * a3) * a2;
    }
    if (a5 < a2)
    {
        v7 = a1 * a3;
    }
    else
    {
        v7 = (a5 - (a3 + a4)) * a5;
    }
    v8 = a1 - a1 - a5 - a2;
    v9 = (a3 * a3) - a2;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 10
11 12
12 12
13 14
14 14
15 14
16 18
17 18
18 18
19 18
20 18
21 22
22 22
23 22
24 22
25 22
26 22
27 20
28 22
29 21
30 21
31 22
32 23
<<<sep_out_sample>>>
mov %edi,%eax
imul %esi,%eax
imul %r8d,%eax
sub %esi,%eax
lea (%rdi,%r8,1),%r9d
mov %esi,%r10d
sub %ecx,%r10d
cmp %r8d,%edi
cmovle %r10d,%r9d
add %r9d,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        if (v6 < a1)
        {
            v6 += a5 - a2 * a1;
        }
        else
        {
            v6 += a2 * a2;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        v8 += a1 - a5;
    }
    v10 = (a1 * a2) * a5 - a2;
    if (a5 < a1)
    {
        v11 = (a1 + a5 - a1) + a1;
    }
    else
    {
        v11 = a2 - a4;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 21
5 24
6 24
7 24
8 24
9 24
10 30
11 30
12 30
13 30
14 30
15 30
16 31
<<<sep_out_sample>>>
mov %r8d,%eax
neg %eax
cmp %edi,%esi
jge 11 <func1+0x11>
lea (%rcx,%r8,1),%eax
sub %edi,%eax
add %esi,%eax
cmp %esi,%eax
jge 22 <func1+0x22>
lea 0x1(%r8),%r9d
imul %ecx,%r9d
add %edi,%r9d
jmp 35 <func1+0x35>
mov %r8d,%r9d
imul %esi,%r9d
mov %edx,%r10d
sub %r9d,%r10d
mov %r10d,%r9d
sub %ecx,%r9d
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%eax
lea 0x1(%r9,%rax,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a2 < a1)
    {
        v6 = (a4 + a5) - a1 + a2;
    }
    else
    {
        v6 = a3 - (a3 + a5);
    }
    if (v6 < a2)
    {
        v7 = (a4 + a4 * a5) + a1;
    }
    else
    {
        v7 = a3 - a5 * a2 - a4;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        if (a4 < a1)
        {
            v8 += a1 * a4;
        }
        else
        {
            v8 += a4 + a5 * a4;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 10
2 10
3 4
4 4
5 6
6 6
7 6
8 12
9 12
10 14
11 14
12 14
13 14
14 18
15 18
16 18
17 18
18 18
19 18
20 32
21 32
22 32
23 32
24 32
25 32
26 33
<<<sep_out_sample>>>
test %edi,%edi
jle d <func1+0xd>
mov %esi,%r9d
imul %r8d,%r9d
jmp 1c <func1+0x1c>
mov %r8d,%r9d
imul %esi,%r9d
imul %edx,%r9d
imul %r8d,%r9d
add %edi,%edx
add %esi,%edx
add %edx,%r8d
add %ecx,%r8d
add %r9d,%r8d
mov %esi,%edx
imul %esi,%edx
add %edx,%r8d
add %ecx,%edi
sub %esi,%edi
lea (%r8,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (v6 < a1)
    {
        v6 = (a1 + a2 - a1) * a5;
    }
    else
    {
        v6 = (a5 * a2) * a3 * a5;
    }
    v7 = a2 * a2;
    v8 = a1 + a4 - a2;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 10
7 10
8 10
9 10
10 14
11 14
12 14
13 14
14 14
15 12
16 12
17 14
18 13
19 13
20 14
21 15
<<<sep_out_sample>>>
lea (%rsi,%r8,1),%eax
cmp %ecx,%r8d
jg 1c <func1+0x1c>
mov %r8d,%eax
imul %r8d,%eax
imul %edx,%eax
mov %edi,%r9d
sub %eax,%r9d
mov %r9d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (a2 < a5)
        {
            v6 += a4 * a4 + a2;
        }
        else
        {
            v6 += (a1 * a2) * a2;
        }
    }
    if (a4 < a5)
    {
        v8 = a2 + a5;
    }
    else
    {
        v8 = a1 - ((a5 * a5) * a3);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 18
2 16
3 16
4 22
5 22
6 22
7 22
8 22
9 22
10 24
11 24
12 24
13 24
14 24
15 25
<<<sep_out_sample>>>
test %edx,%edx
jle 13 <func1+0x13>
mov %ecx,%r11d
sub %esi,%r11d
add %edx,%r11d
imul %r8d,%r11d
jmp 1e <func1+0x1e>
lea (%rdi,%rcx,1),%r11d
add %r8d,%r11d
imul %esi,%r11d
lea (%rcx,%rsi,1),%r10d
lea (%r8,%r8,1),%r9d
neg %r9d
cmp %esi,%edx
jle 3b <func1+0x3b>
mov %edi,%r9d
sub %r8d,%r9d
imul %esi,%r9d
imul %edi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (v6 < a3)
    {
        v6 = (a4 - a2 + a3) * a5;
    }
    else
    {
        v6 = (a1 + a4 + a5) * a2;
    }
    v7 = a4 + a2;
    if (a2 < a3)
    {
        v8 = (a2 * (a1 - a5)) * a1;
    }
    else
    {
        v8 = ((a2 - a5) - a5) - a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 12
12 19
13 19
14 13
15 13
16 15
17 15
18 15
19 15
20 21
21 21
22 21
23 21
24 21
25 21
26 21
27 22
<<<sep_out_sample>>>
lea (%rdx,%rcx,1),%eax
cmp %r8d,%esi
jl 10 <func1+0x10>
mov %ecx,%eax
sub %esi,%eax
sub %esi,%eax
sub %edx,%eax
lea (%rdi,%rdx,1),%r9d
add %r9d,%esi
add %r8d,%esi
add %esi,%ecx
lea 0x1(%rax,%rcx,1),%eax
imul %edi,%r8d
imul %r8d,%edx
sub %edx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a2 < a5)
    {
        v6 = a3 + a5 - a5 + a4;
    }
    else
    {
        v6 = (a4 - a2 - a2) - a3;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        if (a5 < a5)
        {
            v7 += a3 - a2;
        }
        else
        {
            v7 += (a3 * a5) * a4;
        }
    }
    if (a5 < a5)
    {
        v9 = a4 + a4 + a4 * a4;
    }
    else
    {
        v9 = a1 - a3 * (a1 * a5);
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 6
2 4
3 4
4 10
5 10
6 10
7 10
8 32
9 32
10 32
11 32
12 32
13 30
14 30
15 30
16 32
17 33
<<<sep_out_sample>>>
test %ecx,%ecx
jle 11 <func1+0x11>
mov %edi,%eax
imul %ecx,%eax
imul %r8d,%eax
add %esi,%eax
jmp 20 <func1+0x20>
mov %r8d,%r9d
sub %edi,%r9d
mov %r8d,%eax
imul %edi,%eax
add %r9d,%eax
cmp %r8d,%eax
jge 30 <func1+0x30>
mov %r8d,%r9d
sub %esi,%r9d
add %edi,%r9d
jmp 41 <func1+0x41>
mov %r8d,%r10d
imul %edx,%r10d
mov %ecx,%r9d
imul %ecx,%r9d
add %r10d,%r9d
add %r9d,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += (a5 - a1) + a1;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        if (v7 < a5)
        {
            v8 += (a3 + a5) + a3;
        }
        else
        {
            v8 += a5 - a4;
        }
    }
    if (v8 < a4)
    {
        v10 = (a1 * a4 * a5) + a2;
    }
    else
    {
        v10 = a5 - a1 + a5 * a1;
    }
    if (v10 < a5)
    {
        v11 = (a5 - a2) + a1;
    }
    else
    {
        v11 = a5 * a3 + a4 * a4;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 23
4 23
5 23
6 23
7 23
8 27
9 27
10 27
11 27
12 27
13 29
14 29
15 31
16 31
17 31
18 31
19 35
20 35
21 35
22 35
23 35
24 37
25 37
26 37
27 37
28 37
29 37
30 38
<<<sep_out_sample>>>
mov %esi,%r9d
imul %edx,%r9d
add %ecx,%r9d
test %esi,%esi
jle 14 <func1+0x14>
mov %edx,%eax
sub %ecx,%eax
jmp 1e <func1+0x1e>
mov %edx,%eax
imul %r8d,%eax
sub %esi,%eax
add %edx,%eax
test %esi,%esi
jle 30 <func1+0x30>
mov %r8d,%r10d
sub %edi,%r10d
add %r8d,%r10d
sub %esi,%r10d
jmp 3c <func1+0x3c>
mov %edx,%r10d
sub %r8d,%r10d
add %edx,%r10d
sub %edi,%r10d
add %r10d,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a2 * a3 + a4;
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        if (v7 < a2)
        {
            v7 += a1 + a5;
        }
        else
        {
            v7 += a3 * a5 * a2;
        }
    }
    if (v9 < a2)
    {
        v9 = a3 - a4;
    }
    else
    {
        v9 = (a3 * a5) - a2 + a3;
    }
    if (v7 < a2)
    {
        v10 = (a5 - a1) + a5 - a2;
    }
    else
    {
        v10 = a3 + (a3 - a5) - a1;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 17
5 17
6 19
7 19
8 19
9 23
10 23
11 23
12 23
13 25
14 25
15 27
16 27
17 27
18 27
19 27
20 31
21 31
22 31
23 31
24 33
25 33
26 33
27 33
28 33
29 33
30 33
31 34
<<<sep_out_sample>>>
cmp %esi,%ecx
jge 10 <func1+0x10>
mov %edi,%eax
imul %edi,%eax
sub %esi,%eax
sub %r8d,%eax
jmp 16 <func1+0x16>
lea (%rsi,%rdi,1),%eax
imul %edi,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (a4 < a2)
        {
            v6 += a3 * a5;
        }
        else
        {
            v6 += a2 - a3 + a5;
        }
    }
    if (a4 < a2)
    {
        v8 = a1 * a1 - a2 - a5;
    }
    else
    {
        v8 = (a2 + a1) * a1;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        if (a2 < a1)
        {
            v9 += a1 * a5 + a5;
        }
        else
        {
            v9 += a5 - a3 - a3;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 18
7 18
8 22
9 22
10 36
11 36
12 36
13 36
14 36
15 37
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %edx,%r8d
add %r8d,%ecx
imul %esi,%esi
lea 0x1(%rcx,%rsi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a2 * a2;
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        v7 += a5 + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 4
6 10
7 11
<<<sep_out_sample>>>
cmp %r8d,%edi
jge 17 <func1+0x17>
mov %edi,%r9d
imul %r8d,%r9d
mov %edi,%eax
imul %edi,%eax
imul %eax,%r9d
jmp 1f <func1+0x1f>
lea (%rcx,%rdi,2),%r9d
imul %ecx,%r9d
add %edi,%edx
add %edx,%esi
add %r8d,%esi
add %ecx,%esi
add %r9d,%esi
mov $0x1,%eax
sub %ecx,%eax
imul %eax,%edi
sub %r8d,%edi
lea (%rsi,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a1 < a5)
    {
        v6 = a1 * a5 * (a1 * a1);
    }
    else
    {
        v6 = (a4 + a1 + a1) * a4;
    }
    v7 = a1 - a4 * a1 - a5;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 6
9 10
10 10
11 13
12 13
13 13
14 13
15 13
16 12
17 12
18 12
19 12
20 13
21 14
<<<sep_out_sample>>>
test %edi,%edi
jle e <func1+0xe>
lea (%rdi,%rdi,1),%eax
imul %ecx,%eax
add %edi,%eax
jmp 13 <func1+0x13>
mov %edx,%eax
imul %edx,%eax
add %edx,%edi
add %edi,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%edx
add %edx,%eax
add %r8d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += a3 - a3;
    }
    if (v8 < a1)
    {
        v8 = ((a1 + a1) * a4) + a1;
    }
    else
    {
        v8 = a3 * a3;
    }
    v9 = ((a5 - a3) + a3) + a4;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 11
7 15
8 15
9 18
10 18
11 18
12 18
13 18
14 17
15 18
16 19
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%r9d
add %esi,%r9d
add %r8d,%r9d
add %ecx,%r9d
add $0x1,%ecx
imul %ecx,%edi
sub %esi,%edi
lea (%r9,%rdi,1),%eax
imul %edx,%r8d
imul %r8d,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = ((a1 * a4) + a1) - a2;
    v7 = a5 * a3 * a3;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 4
7 4
8 6
9 5
10 5
11 6
12 7
<<<sep_out_sample>>>
mov %edi,%eax
sub %r8d,%eax
cmp %ecx,%edx
jg f <func1+0xf>
mov %r8d,%eax
imul %esi,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        if (v6 < a1)
        {
            v6 += a2 + a3;
        }
        else
        {
            v6 += a2 - a3 + a4;
        }
    }
    if (a4 < a3)
    {
        v8 = a1 - a5;
    }
    else
    {
        v8 = a5 * a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 18
2 18
3 16
4 16
5 22
6 22
7 24
8 24
9 24
10 24
11 24
12 25
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea (%rdi,%rcx,2),%eax
lea (%rax,%r8,1),%eax
add $0x1,%ecx
imul %ecx,%edi
add %edi,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a4 + a1;
    v7 = a1 + a1 * a4 + a3;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 4
5 6
6 5
7 5
8 5
9 6
10 7
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
lea 0x1(%rcx,%rax,1),%eax
imul %r8d,%esi
add %edi,%esi
imul %edx,%esi
add %eax,%esi
add %ecx,%r8d
imul %edx,%edi
sub %edi,%r8d
lea (%rsi,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (v6 < a4)
        {
            v6 += a2 + (a4 + a3);
        }
        else
        {
            v6 += a1 + (a4 * a1);
        }
    }
    v8 = (a1 + a5 * a2) * a3;
    v9 = a4 + a5 - a1 * a3;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 18
5 16
6 16
7 16
8 18
9 17
10 17
11 17
12 18
13 19
<<<sep_out_sample>>>
mov %edi,%eax
imul %edx,%eax
mov %ecx,%r9d
sub %r8d,%r9d
lea 0x1(%r9,%rax,1),%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += a3 + (a5 * a5);
    }
    if (a2 < a2)
    {
        v8 = a4 * (a2 - a3) * a2;
    }
    else
    {
        v8 = a1 - a1;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a5)
    {
        v9 += a2 * a4 + a1;
    }
    v11 = a1 * a3 + a4 - a5;
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 22
2 22
3 22
4 22
5 23
6 23
7 23
8 23
9 23
10 23
11 24
<<<sep_out_sample>>>
lea (%rsi,%rdx,1),%eax
cmp %edx,%edi
jge 14 <func1+0x14>
mov %r8d,%r9d
sub %edi,%r9d
lea (%rcx,%rsi,1),%eax
imul %r9d,%eax
lea (%rdi,%rdx,1),%r9d
add %r9d,%esi
add %esi,%r8d
add %ecx,%r8d
add %r8d,%eax
add %ecx,%edi
imul %edx,%edx
sub %edx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a1 < a3)
    {
        v6 = (a5 - a1) * (a4 + a2);
    }
    else
    {
        v6 = a2 + a3;
    }
    v7 = a4 + a1 - a3 * a3;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 6
7 6
8 13
9 13
10 13
11 13
12 13
13 12
14 12
15 12
16 13
17 14
<<<sep_out_sample>>>
mov %edi,%r10d
imul %r8d,%r10d
imul %edi,%r10d
add %ecx,%r10d
mov %edi,%eax
cmp %edx,%r8d
jge 1d <func1+0x1d>
lea (%rsi,%rdx,1),%eax
imul %esi,%eax
add %edi,%eax
lea (%rcx,%r8,1),%r9d
mov %edi,%r11d
neg %r11d
cmp %esi,%ecx
cmovle %r11d,%r9d
add %edi,%edx
add %esi,%edx
add %r8d,%edx
add %edx,%ecx
add %r10d,%ecx
add %ecx,%eax
add %r9d,%eax
sub %r8d,%esi
add %esi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = (a1 * a5) * a1 + a4;
    if (a5 < a3)
    {
        v7 = (a2 + a3) * a2 + a1;
    }
    else
    {
        v7 = a3 + a1 - a3;
    }
    if (a2 < a4)
    {
        v8 = (a4 + a5) + (a1 - a1);
    }
    else
    {
        v8 = (a3 - a3) - a1;
    }
    v9 = a2 - a5;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 11
6 5
7 5
8 7
9 7
10 7
11 15
12 15
13 15
14 15
15 15
16 22
17 22
18 22
19 22
20 22
21 22
22 22
23 21
24 22
25 23
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
add %r8d,%ecx
imul %esi,%edi
lea 0x1(%rcx,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a2 * a1;
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += a1 - a2 + a1;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        v9 += a1 + a4;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 15
2 15
3 15
4 15
5 4
6 15
7 16
<<<sep_out_sample>>>
lea (%rdi,%rdi,1),%r9d
cmp %esi,%ecx
jge 14 <func1+0x14>
lea (%r8,%r8,1),%r9d
mov %ecx,%eax
imul %esi,%eax
sub %eax,%r9d
lea (%rsi,%rcx,1),%r11d
cmp %r8d,%esi
jle 2c <func1+0x2c>
mov %r8d,%r10d
imul %ecx,%r10d
add %esi,%r10d
sub %edi,%r10d
jmp 35 <func1+0x35>
lea 0x1(%rdx,%rcx,1),%r10d
imul %ecx,%r10d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
add %r11d,%eax
add %r10d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a4 < a2)
    {
        v6 = a5 + a5 - (a4 * a2);
    }
    else
    {
        v6 = (a1 - a5 + a1) + a5;
    }
    v7 = a2 + a4;
    if (a5 < a2)
    {
        v8 = a2 + a5 * a4 - a1;
    }
    else
    {
        v8 = (a4 * (a3 + a4)) + a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 6
7 6
8 12
9 13
10 13
11 15
12 15
13 15
14 15
15 15
16 19
17 19
18 21
19 21
20 21
21 21
22 21
23 21
24 21
25 22
<<<sep_out_sample>>>
lea 0x2(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12, v13 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += (a5 * a2) - a4;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        if (a4 < a2)
        {
            v8 += (a4 - a3) - a5;
        }
        else
        {
            v8 += a2 - a2 - a5;
        }
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a3)
    {
        if (v11 < a5)
        {
            v10 += (a1 * a2) * a4;
        }
        else
        {
            v10 += (a3 + a2) * a3;
        }
    }
    v12 = 0;
    for (v13 = 0; v13++; v13<a5)
    {
        if (a1 < a5)
        {
            v12 += a4 * a5 - a2;
        }
        else
        {
            v12 += a1 + a1;
        }
    }
    return v12+v13+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 45
2 45
3 45
4 45
5 46
<<<sep_out_sample>>>
cmp %r8d,%edi
jge 19 <func1+0x19>
lea (%rdi,%rcx,1),%r11d
lea (%rdx,%r8,2),%r10d
add %edx,%r10d
mov %edx,%r9d
imul %r8d,%r9d
jmp 33 <func1+0x33>
lea (%rsi,%rsi,1),%r11d
lea (%rdx,%r8,2),%r10d
add %edx,%r10d
mov %edx,%r9d
imul %ecx,%r9d
add $0x1,%r9d
imul %edx,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a1 < a5)
    {
        v6 = a1 + a4;
    }
    else
    {
        v6 = a2 + a2;
    }
    v7 = a3 + (a5 + (a5 + a3));
    if (a1 < a5)
    {
        v8 = a3 * a5;
    }
    else
    {
        v8 = a3 + a3 * a4 * a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 12
5 12
6 15
7 15
8 15
9 10
10 12
11 12
12 19
13 19
14 19
15 19
16 21
17 21
18 21
19 21
20 21
21 21
22 21
23 22
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %eax,%r8d
lea (%r8,%rcx,1),%eax
imul %edx,%esi
add %esi,%eax
sub %edx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a2 * a3;
    v7 = a1 - a3;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 4
6 6
7 5
8 6
9 7
<<<sep_out_sample>>>
add %edi,%edx
add %edx,%esi
add %r8d,%esi
lea (%rsi,%rcx,2),%eax
add %r8d,%edi
lea 0x1(%rax,%rdi,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a5 < a5)
    {
        v6 = (a2 + a5) * a4 + a5;
    }
    else
    {
        v6 = a4 + (a5 * (a1 - a1));
    }
    v7 = a5 + a1;
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += a4 * a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 18
5 12
6 18
7 19
<<<sep_out_sample>>>
cmp %ecx,%esi
jge 13 <func1+0x13>
mov %esi,%r11d
sub %ecx,%r11d
imul %esi,%r11d
add %ecx,%r11d
jmp 27 <func1+0x27>
mov %edx,%r9d
imul %ecx,%r9d
mov $0x1,%r11d
sub %r9d,%r11d
imul %r8d,%r11d
mov %edx,%eax
imul %edi,%eax
mov %r8d,%r10d
sub %eax,%r10d
add %ecx,%r10d
lea (%r8,%rdx,1),%r9d
add %ecx,%r9d
cmp %edx,%esi
jg 4b <func1+0x4b>
lea (%r8,%rdx,1),%r9d
imul %r8d,%r9d
sub %esi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r11d,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a2 < a4)
    {
        v6 = (a2 - a4) * a2 + a4;
    }
    else
    {
        v6 = a5 - (a3 * a4) * a5;
    }
    v7 = a4 - (a3 * a1 - a5);
    if (a3 < a2)
    {
        v8 = a5 + a3 + a4;
    }
    else
    {
        v8 = a5 * (a5 + a3) - a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 10
13 12
14 12
15 12
16 12
17 12
18 15
19 15
20 13
21 13
22 19
23 19
24 19
25 21
26 21
27 21
28 21
29 21
30 21
31 21
32 22
<<<sep_out_sample>>>
mov %edi,%r9d
sub %edx,%r9d
mov %r8d,%eax
imul %edi,%eax
lea 0x1(%r9,%rax,1),%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11, v12 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (v7 < a1)
        {
            v6 += a5 * a1 + a1;
        }
        else
        {
            v6 += a5 - a5;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        v8 += a2 * a4;
    }
    v10 = a1 - a3 + a5 * a1;
    v11 = 0;
    for (v12 = 0; v12++; v12<a4)
    {
        v11 += (a4 - a1) - a3;
    }
    return v12+v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 21
4 21
5 27
6 27
7 27
8 27
9 27
10 27
11 28
<<<sep_out_sample>>>
lea (%rdi,%rcx,1),%r10d
test %esi,%esi
jle 11 <func1+0x11>
lea (%rsi,%rcx,2),%r9d
sub %r8d,%r9d
jmp 20 <func1+0x20>
mov %ecx,%r9d
imul %r8d,%r9d
add $0x1,%r9d
imul %edx,%r9d
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
sub %ecx,%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a1 + a4;
    if (v7 < a2)
    {
        v7 = a4 - a5 + a2 + a4;
    }
    else
    {
        v7 = a3 + a4 * a5 * a3;
    }
    v8 = a3 - a4;
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        v9 += a3 + (a3 + a1);
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 5
3 5
4 7
5 7
6 7
7 11
8 11
9 11
10 11
11 19
12 19
13 19
14 19
15 19
16 19
17 13
18 19
19 20
<<<sep_out_sample>>>
cmp %edx,%edi
jge 11 <func1+0x11>
mov %ecx,%eax
imul %r8d,%eax
sub %esi,%eax
sub %r8d,%eax
jmp 17 <func1+0x17>
lea (%rdi,%rcx,2),%eax
lea (%rax,%rsi,1),%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a1 < a3)
    {
        v6 = ((a4 * a5) - a2) - a5;
    }
    else
    {
        v6 = (a2 + a4) + a1 + a4;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        if (a5 < a1)
        {
            v7 += a5 + a1 * a4;
        }
        else
        {
            v7 += a5 + a3 * a5;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 24
11 24
12 24
13 24
14 24
15 25
<<<sep_out_sample>>>
cmp %ecx,%edx
jge a <func1+0xa>
lea (%rdx,%rdx,1),%r9d
jmp 18 <func1+0x18>
mov %edi,%r9d
imul %ecx,%r9d
imul %esi,%r9d
add %ecx,%r9d
add %edi,%edx
add %edx,%esi
add %r8d,%esi
add %esi,%ecx
lea (%rcx,%r9,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a3 < a4)
    {
        v6 = a3 + a3;
    }
    else
    {
        v6 = a1 * a4 * a2 + a4;
    }
    v7 = a3 - a3;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 10
6 10
7 10
8 10
9 13
10 13
11 13
12 13
13 13
14 14
<<<sep_out_sample>>>
mov %esi,%r9d
sub %edx,%r9d
lea (%rcx,%rdx,1),%eax
lea (%r8,%r8,2),%r11d
cmp %ecx,%esi
cmovl %eax,%r11d
cmp %r8d,%r9d
jge 1e <func1+0x1e>
lea (%rsi,%rsi,1),%r10d
jmp 2c <func1+0x2c>
mov %esi,%eax
imul %esi,%eax
imul %esi,%eax
mov %edx,%r10d
sub %eax,%r10d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
add %r11d,%eax
add %r10d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a2 - (a3 - a3 + a3);
    if (a2 < a4)
    {
        v7 = a4 + a3;
    }
    else
    {
        v7 = a5 + a5 + a5;
    }
    if (v6 < a5)
    {
        v8 = a2 - a5 + a2 + a5;
    }
    else
    {
        v8 = a3 - a2 * a2 * a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 4
2 4
3 7
4 7
5 7
6 7
7 13
8 13
9 15
10 15
11 19
12 19
13 19
14 19
15 19
16 21
17 21
18 21
19 21
20 21
21 21
22 21
23 22
<<<sep_out_sample>>>
mov $0x0,%eax
mov %ecx,%r9d
imul %ecx,%r9d
cmp %edi,%esi
cmovge %r9d,%eax
add %edx,%edi
add %edi,%esi
add %r8d,%esi
lea (%r8,%rcx,2),%edx
lea (%rdx,%rsi,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a4 + a5;
    if (a2 < a1)
    {
        v7 = a4 - (a4 - a5 + a5);
    }
    else
    {
        v7 = a4 * a4;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 7
2 11
3 11
4 11
5 11
6 13
7 13
8 13
9 13
10 13
11 13
12 14
<<<sep_out_sample>>>
lea (%rdi,%rcx,1),%eax
lea (%rdx,%rcx,1),%r9d
cmp %esi,%edx
cmovge %r9d,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a3 < a2)
    {
        v6 = a1 + a4;
    }
    else
    {
        v6 = a3 + a4;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a5)
    {
        v7 += a2 * a5 * a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 17
6 17
7 17
8 17
9 17
10 18
<<<sep_out_sample>>>
lea (%rcx,%rdx,1),%r10d
cmp %edx,%edi
jge 13 <func1+0x13>
lea (%rdx,%rdx,1),%eax
mov %r8d,%r9d
sub %eax,%r9d
jmp 22 <func1+0x22>
mov %r8d,%r9d
imul %r8d,%r9d
sub $0x1,%r9d
imul %edx,%r9d
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
imul %r8d,%ecx
add $0x1,%ecx
imul %ecx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = a4 + a1 - a1 + a3;
    if (a1 < a3)
    {
        v7 = a5 - (a3 + a3);
    }
    else
    {
        v7 = (a5 * a5 * a3) - a3;
    }
    v8 = a1 + a4 * a5 * a1;
    v9 = 0;
    for (v10 = 0; v10++; v10<a4)
    {
        if (v6 < a5)
        {
            v9 += a4 - a4;
        }
        else
        {
            v9 += (a5 + a4) * a5;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 5
3 5
4 7
5 7
6 7
7 7
8 11
9 11
10 11
11 11
12 26
13 26
14 26
15 26
16 26
17 26
18 13
19 13
20 13
21 26
22 27
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%r9d
add %esi,%r9d
add %r8d,%r9d
add %ecx,%r9d
add %esi,%r8d
imul %edx,%edi
sub %edi,%r8d
lea (%r9,%r8,1),%eax
imul %ecx,%esi
sub %esi,%eax
add $0x1,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = a5 + a2 - a3 * a1;
    v7 = a4 - a2 * a4 - a4;
    v8 = 0;
    for (v9 = 0; v9++; v9<a4)
    {
        if (a3 < a1)
        {
            v8 += (a4 - a5) * a3;
        }
        else
        {
            v8 += (a1 * a3) + a5;
        }
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a5)
    {
        v10 += (a5 + a5) * a4;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 23
2 23
3 23
4 23
5 4
6 4
7 4
8 23
9 5
10 23
11 23
12 24
<<<sep_out_sample>>>
cmp %r8d,%edi
jge 12 <func1+0x12>
lea 0x1(%rsi),%r9d
imul %ecx,%r9d
add %edi,%r9d
jmp 20 <func1+0x20>
mov %r8d,%r9d
imul %r8d,%r9d
sub %esi,%r9d
imul %esi,%r9d
lea (%rdi,%rdx,1),%eax
add %eax,%esi
add %r8d,%esi
add %ecx,%esi
add %r9d,%esi
lea (%r8,%r8,1),%eax
mov %edi,%r9d
sub %eax,%r9d
add %edx,%r9d
add %r9d,%esi
imul %ecx,%edx
add %edx,%r8d
sub %edi,%r8d
lea (%rsi,%r8,1),%eax
imul %ecx,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    if (a1 < a5)
    {
        v6 = a2 * a4 + a4 + a1;
    }
    else
    {
        v6 = a2 * ((a5 * a5) - a2);
    }
    v7 = a3 + (a1 - (a5 + a5));
    v8 = a3 * a4 + a5 - a1;
    v9 = a4 * a1;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 10
10 10
11 15
12 15
13 15
14 15
15 15
16 12
17 12
18 12
19 12
20 15
21 13
22 13
23 13
24 15
25 14
26 15
27 16
<<<sep_out_sample>>>
cmp %r8d,%ecx
jle f <func1+0xf>
mov %edi,%eax
neg %eax
imul %r8d,%eax
jmp 1f <func1+0x1f>
mov %edx,%eax
imul %edx,%eax
add %edi,%eax
mov %esi,%r9d
sub %eax,%r9d
mov %r9d,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (a2 < a1)
        {
            v6 += a3 - a2 * a4;
        }
        else
        {
            v6 += a3 - a1;
        }
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += (a2 + a3) - a5;
    }
    if (a5 < a4)
    {
        v10 = (a2 - a2 - a1) * a5;
    }
    else
    {
        v10 = a2 - ((a3 * a3) + a1);
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 21
2 21
3 23
4 23
5 23
6 23
7 27
8 27
9 27
10 27
11 27
12 27
13 29
14 29
15 29
16 29
17 29
18 30
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a1 + a5 - a1;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a2)
    {
        v8 += (a1 * a5) + a1;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 14
2 14
3 14
4 14
5 15
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%r9d
add %esi,%r9d
add %r8d,%r9d
add %ecx,%r9d
mov %ecx,%eax
imul %ecx,%eax
imul %edx,%eax
add %esi,%eax
add %r9d,%eax
add %esi,%r8d
sub %edi,%r8d
imul %r8d,%esi
add %esi,%eax
imul %edi,%edx
imul %ecx,%edx
imul %edx,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a2 + a4 * a4 * a3;
    v7 = (a5 + a2 - a1) * a2;
    v8 = a4 * (a3 * a1) * a4;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 7
2 7
3 7
4 7
5 4
6 4
7 4
8 4
9 7
10 5
11 5
12 5
13 7
14 6
15 6
16 6
17 7
18 8
<<<sep_out_sample>>>
mov %ecx,%r10d
imul %ecx,%r10d
lea (%rdx,%rcx,1),%r9d
sub %edi,%r9d
add %r8d,%r9d
lea (%rdi,%rsi,1),%eax
cmp %r8d,%ecx
jle 25 <func1+0x25>
mov %esi,%eax
imul %r8d,%eax
imul %ecx,%eax
imul %esi,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r10d,%ecx
lea 0x1(%r9,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = ((a4 * a4) - a5) + a5;
    v7 = a3 + a4 - a1 + a5;
    v8 = 0;
    for (v9 = 0; v9++; v9<a3)
    {
        v8 += a1 + (a1 - a1);
    }
    if (a5 < a4)
    {
        v10 = ((a2 * a5) * a4) * a2;
    }
    else
    {
        v10 = a1 + a2;
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 5
4 5
5 5
6 17
7 11
8 11
9 13
10 13
11 13
12 13
13 19
14 19
15 19
16 19
17 19
18 19
19 19
20 20
<<<sep_out_sample>>>
lea (%rcx,%r8,1),%eax
lea (%rax,%rsi,1),%r9d
add %edx,%r9d
add %edi,%eax
lea (%rax,%r8,1),%r10d
cmp %r9d,%esi
jg 1d <func1+0x1d>
mov %ecx,%r10d
imul %ecx,%r10d
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
lea (%r9,%r10,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a4 + a5 + a2 + a3;
    if (v6 < a2)
    {
        v7 = ((a5 + a4) + a1) + a5;
    }
    else
    {
        v7 = a4 * a4;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 7
5 7
6 5
7 5
8 11
9 11
10 13
11 13
12 13
13 13
14 13
15 13
16 14
<<<sep_out_sample>>>
cmp %r8d,%edi
jge 13 <func1+0x13>
lea (%rdi,%rsi,1),%r10d
mov %ecx,%eax
imul %ecx,%eax
add %eax,%r10d
jmp 1a <func1+0x1a>
lea (%rdi,%rsi,2),%r10d
sub %ecx,%r10d
cmp %edx,%r8d
jle 29 <func1+0x29>
lea (%rdx,%r8,1),%r9d
imul %esi,%r9d
jmp 33 <func1+0x33>
lea (%rcx,%rdx,1),%r9d
add %esi,%r9d
add %edi,%r9d
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r10d,%eax
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a1 < a5)
    {
        v6 = (a1 + a2) + (a4 * a4);
    }
    else
    {
        v6 = a2 + a1 + a2 - a4;
    }
    if (a3 < a5)
    {
        v7 = (a3 + a5) * a2;
    }
    else
    {
        v7 = a4 + a3 + a2 + a1;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 12
11 12
12 14
13 14
14 14
15 18
16 18
17 18
18 20
19 20
20 20
21 20
22 20
23 20
24 21
<<<sep_out_sample>>>
lea (%rsi,%rdi,1),%r9d
test %r8d,%r8d
jg 15 <func1+0x15>
mov %edx,%r9d
sub %edi,%r9d
add %esi,%r9d
add %r8d,%r9d
cmp %edx,%esi
jge 21 <func1+0x21>
mov %r8d,%eax
imul %edx,%eax
jmp 2f <func1+0x2f>
lea (%rdi,%rcx,1),%eax
mov %edx,%r10d
sub %eax,%r10d
mov %r10d,%eax
add %edx,%eax
add %r9d,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a1 + a2 - a3;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += a3 + a5;
    }
    if (v10 < a5)
    {
        v10 = a2 + a1;
    }
    else
    {
        v10 = (a3 - a1) + a2 + a5;
    }
    if (a2 < a3)
    {
        v11 = a5 * a3;
    }
    else
    {
        v11 = a3 + (a3 - (a1 + a4));
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 16
2 14
3 14
4 20
5 20
6 20
7 20
8 22
9 22
10 24
11 24
12 24
13 28
14 28
15 28
16 28
17 28
18 30
19 30
20 30
21 30
22 30
23 30
24 31
<<<sep_out_sample>>>
mov %r8d,%r9d
sub %ecx,%r9d
imul %esi,%r9d
test %esi,%esi
jle 16 <func1+0x16>
mov %r8d,%eax
imul %edi,%eax
jmp 1b <func1+0x1b>
mov $0x0,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a5 * a2 - a4 * a2;
    if (v7 < a2)
    {
        v7 = a5 * a1;
    }
    else
    {
        v7 = a3 - a3;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 5
5 5
6 7
7 7
8 7
9 11
10 13
11 13
12 13
13 13
14 13
15 13
16 14
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %r8d,%edx
add %ecx,%edx
sub %ecx,%esi
sub %edi,%esi
add %esi,%r8d
lea 0x1(%rdx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = a5 - (a1 + (a4 - a2));
    v7 = 0;
    for (v8 = 0; v8++; v8<a4)
    {
        v7 += (a4 * a3) * a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 10
3 10
4 10
5 4
6 4
7 4
8 10
9 11
<<<sep_out_sample>>>
lea (%rdx,%r8,1),%eax
lea (%rdi,%rcx,1),%r9d
cmp %edi,%ecx
cmovle %r9d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        if (v6 < a4)
        {
            v6 += a1 + (a5 + a5);
        }
        else
        {
            v6 += a3 - a2 * a5;
        }
    }
    if (a1 < a4)
    {
        v8 = a3 + a5;
    }
    else
    {
        v8 = (a1 + a4 - a2) + a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 18
2 18
3 18
4 18
5 24
6 24
7 24
8 24
9 24
10 25
<<<sep_out_sample>>>
lea (%r8,%rdx,1),%r9d
add %esi,%r9d
imul %esi,%r9d
test %edx,%edx
jle 16 <func1+0x16>
mov %ecx,%eax
imul %edx,%eax
jmp 22 <func1+0x22>
mov %r8d,%eax
imul %ecx,%eax
imul %ecx,%eax
imul %ecx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = (a5 + a3 + a2) * a2;
    if (v7 < a3)
    {
        v7 = a5 + (a4 * a3 - a5);
    }
    else
    {
        v7 = a4 * (a5 * a4) * a4;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 5
5 5
6 7
7 7
8 7
9 11
10 11
11 11
12 11
13 13
14 13
15 13
16 13
17 13
18 13
19 14
<<<sep_out_sample>>>
cmp %esi,%r8d
jge 13 <func1+0x13>
mov %edx,%r9d
sub %ecx,%r9d
sub %r8d,%r9d
add %esi,%r9d
jmp 21 <func1+0x21>
mov %edx,%r9d
sub %ecx,%r9d
mov %esi,%eax
imul %esi,%eax
add %eax,%r9d
lea (%rdi,%r8,1),%eax
cmp %edi,%ecx
jge 2f <func1+0x2f>
lea (%r8,%r8,2),%eax
sub %edi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %r9d,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a5 < a2)
    {
        v6 = (a3 - a4) - a5 + a2;
    }
    else
    {
        v6 = a3 - a4 + a2 * a2;
    }
    if (a4 < a1)
    {
        v7 = (a5 + a5) + a5 - a1;
    }
    else
    {
        v7 = a1 + a5;
    }
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 10
13 18
14 12
15 12
16 14
17 14
18 20
19 20
20 20
21 20
22 20
23 20
24 21
<<<sep_out_sample>>>
cmp %ecx,%r8d
jge 11 <func1+0x11>
mov %r8d,%eax
sub %edi,%eax
add %r8d,%eax
add %edx,%eax
jmp 1f <func1+0x1f>
lea (%rsi,%rcx,1),%eax
mov %edx,%r9d
sub %eax,%r9d
mov %r9d,%eax
sub %edi,%eax
lea 0x1(%rdi,%rdx,1),%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    if (a5 < a4)
    {
        v6 = a3 - (a1 - a5 - a5);
    }
    else
    {
        v6 = a3 - (a2 + a4) - a1;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        if (a3 < a2)
        {
            v7 += a5 * (a3 + a1);
        }
        else
        {
            v7 += a5 - a3;
        }
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        if (v9 < a1)
        {
            v9 += a5 * a1;
        }
        else
        {
            v9 += a2 * a2 - a2;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 6
8 10
9 10
10 10
11 10
12 10
13 36
14 36
15 36
16 36
17 36
18 37
<<<sep_out_sample>>>
lea 0x1(%rdi,%rdx,1),%eax
add %eax,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a4 - a3 + a4;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a5)
    {
        if (v6 < a2)
        {
            v8 += (a5 + a1) * a5;
        }
        else
        {
            v8 += (a5 * a3) + a5;
        }
    }
    v10 = 0;
    for (v11 = 0; v11++; v11<a4)
    {
        if (v7 < a3)
        {
            v10 += a4 * a3 - a1;
        }
        else
        {
            v10 += a4 * a1 - a5;
        }
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 33
2 33
3 33
4 33
5 34
<<<sep_out_sample>>>
mov %esi,%eax
sub %edx,%eax
mov %edi,%r9d
imul %edx,%r9d
cmp %r8d,%esi
cmovl %r9d,%eax
add %edi,%edx
add %edx,%esi
add %r8d,%esi
add %esi,%ecx
add %ecx,%eax
imul %edi,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a2 < a5)
    {
        v6 = a1 * a3;
    }
    else
    {
        v6 = a2 - a3;
    }
    v7 = a5 * a1;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 10
2 10
3 6
4 6
5 6
6 6
7 13
8 13
9 13
10 13
11 13
12 12
13 13
14 14
<<<sep_out_sample>>>
cmp %edi,%esi
jge c <func1+0xc>
lea (%r8,%r8,2),%eax
add %ecx,%eax
jmp 15 <func1+0x15>
lea (%rcx,%rdx,1),%eax
imul %ecx,%eax
imul %edx,%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a1)
    {
        v6 += (a2 - a5) * a4;
    }
    if (a2 < a1)
    {
        v8 = (a5 + a5 + a5) + a4;
    }
    else
    {
        v8 = (a4 + a3) * a4 * a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 9
2 9
3 11
4 11
5 11
6 15
7 15
8 15
9 17
10 17
11 17
12 17
13 17
14 18
<<<sep_out_sample>>>
mov %ecx,%eax
sub %edx,%eax
mov %esi,%r10d
sub %r8d,%r10d
cmp %edx,%r8d
cmovl %eax,%r10d
lea (%rdi,%rsi,1),%r9d
cmp %edi,%edx
jge 27 <func1+0x27>
mov %edx,%r9d
imul %edx,%r9d
add %r8d,%r9d
imul %edi,%r9d
lea (%rsi,%r8,1),%eax
add %edi,%edx
add %edx,%esi
add %esi,%r8d
add %r8d,%ecx
add %r10d,%ecx
add %ecx,%r9d
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a5 < a3)
    {
        v6 = (a2 + (a4 - a3)) - a2;
    }
    else
    {
        v6 = a2 - a5;
    }
    if (a3 < a1)
    {
        v7 = (a5 + a3 * a3) * a1;
    }
    else
    {
        v7 = a1 + a2;
    }
    v8 = a2 + a5 + a3 - a3;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 6
5 6
6 6
7 18
8 12
9 12
10 14
11 14
12 14
13 14
14 20
15 21
16 21
17 21
18 21
19 21
20 21
21 21
22 22
<<<sep_out_sample>>>
add %edi,%edx
add %esi,%edx
add %r8d,%edx
imul %ecx,%edi
sub %esi,%edi
lea (%rdx,%rcx,2),%eax
lea (%rax,%rdi,1),%edx
lea (%rsi,%r8,2),%eax
lea (%rax,%rcx,1),%eax
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    v6 = a1 * a4 - a2 + a4;
    v7 = a5 + a4 + a2 + a5;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 6
3 6
4 4
5 4
6 4
7 6
8 5
9 5
10 6
11 7
<<<sep_out_sample>>>
test %edx,%edx
jle 10 <func1+0x10>
mov %edx,%r9d
sub %r8d,%r9d
imul %edx,%r9d
jmp 1e <func1+0x1e>
mov %ecx,%r9d
imul %esi,%r9d
add %r8d,%r9d
imul %r8d,%r9d
cmp $0x1,%edx
jle 31 <func1+0x31>
mov %edx,%eax
imul %ecx,%eax
lea (%rdx,%rdi,1),%r10d
sub %r10d,%eax
jmp 39 <func1+0x39>
mov %ecx,%eax
imul %ecx,%eax
imul %eax,%eax
add %r9d,%eax
add %eax,%edi
add %edi,%edx
add %edx,%esi
add %esi,%r8d
lea 0x2(%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        v6 += (a4 - a4) + a3;
    }
    v8 = 0;
    for (v9 = 0; v9++; v9<a1)
    {
        v8 += (a5 + a5) - a2;
    }
    if (v6 < a3)
    {
        v10 = (a3 - a5) * a3;
    }
    else
    {
        v10 = (a5 + a4 * a2) * a5;
    }
    if (v7 < a3)
    {
        v11 = (a3 * a4) - (a3 + a1);
    }
    else
    {
        v11 = a4 * ((a4 * a4) * a4);
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 14
2 14
3 16
4 16
5 16
6 16
7 20
8 20
9 20
10 20
11 22
12 22
13 24
14 24
15 24
16 24
17 24
18 28
19 28
20 28
21 30
22 30
23 30
24 30
25 30
26 30
27 31
<<<sep_out_sample>>>
lea (%r8,%r8,1),%eax
cmp %edi,%esi
jge 12 <func1+0x12>
mov %edi,%eax
imul %ecx,%eax
imul %edx,%eax
sub %esi,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%rax,%rcx,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (a2 < a1)
    {
        v6 = (a1 * a4 * a3) - a2;
    }
    else
    {
        v6 = a5 + (a5 + a2) - a2;
    }
    v7 = 0;
    for (v8 = 0; v8++; v8<a2)
    {
        if (a4 < a3)
        {
            v7 += a5 - a3 * a2;
        }
        else
        {
            v7 += a4 - a3;
        }
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 4
3 4
4 6
5 6
6 6
7 6
8 24
9 24
10 24
11 24
12 24
13 25
<<<sep_out_sample>>>
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%esi
imul %edx,%edx
sub %edi,%edx
lea (%rsi,%rdx,1),%eax
lea -0x2(%rcx),%edx
imul %edx,%ecx
add %ecx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a4)
    {
        v6 += a4 + a1 * a4;
    }
    v8 = (a3 * a3) - (a3 + a1);
    v9 = a4 * a4 - a4 - a4;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 9
2 11
3 11
4 11
5 9
6 9
7 11
8 10
9 10
10 11
11 12
<<<sep_out_sample>>>
lea (%rcx,%rcx,1),%r9d
mov %esi,%eax
imul %r8d,%eax
test %edi,%edi
cmovg %eax,%r9d
mov %edx,%eax
imul %r8d,%eax
lea (%rax,%rdi,2),%r10d
mov %edi,%eax
neg %eax
sub %ecx,%eax
cmp %edx,%edi
jle 31 <func1+0x31>
mov %esi,%r11d
sub %ecx,%r11d
mov %edi,%eax
sub %edx,%eax
add %r11d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
add %ecx,%r9d
add %r10d,%r9d
add %r9d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    if (v6 < a1)
    {
        v6 = a2 * a5;
    }
    else
    {
        v6 = a4 + a4;
    }
    if (a5 < a5)
    {
        v7 = (a2 - a3) + a3 + a4;
    }
    else
    {
        v7 = ((a3 * a5) + a1) + a1;
    }
    if (a3 < a1)
    {
        v8 = a2 - a4 - (a3 - a1);
    }
    else
    {
        v8 = (a5 - a5 - a1) - a4;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 10
2 6
3 6
4 6
5 6
6 18
7 18
8 18
9 26
10 26
11 26
12 20
13 20
14 22
15 22
16 22
17 22
18 22
19 28
20 28
21 28
22 28
23 28
24 28
25 28
26 29
<<<sep_out_sample>>>
lea (%rdi,%rsi,1),%r9d
cmp %edx,%esi
jl 10 <func1+0x10>
lea (%r8,%rsi,1),%r9d
imul %r8d,%r9d
add %edi,%edx
add %esi,%edx
add %r8d,%edx
add %edx,%ecx
add %r9d,%ecx
imul %esi,%edi
sub %edi,%r8d
sub %esi,%r8d
lea (%rcx,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a2 < a3)
    {
        v6 = a1 + a2;
    }
    else
    {
        v6 = (a5 + a2) * a5;
    }
    v7 = (a5 - a1 * a2) - a2;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 6
2 4
3 4
4 10
5 10
6 13
7 13
8 13
9 13
10 13
11 12
12 12
13 12
14 13
15 14
<<<sep_out_sample>>>
cmp $0x1,%esi
jle 10 <func1+0x10>
mov %esi,%eax
sub %edi,%eax
add %r8d,%eax
add %esi,%eax
jmp 1f <func1+0x1f>
mov %esi,%r9d
imul %esi,%r9d
mov %edi,%eax
imul %edx,%eax
add %r9d,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
lea 0x1(%rcx,%r8,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a3)
    {
        if (v6 < a2)
        {
            v6 += (a4 - a4) + a1;
        }
        else
        {
            v6 += a3 - a2;
        }
    }
    if (v7 < a2)
    {
        v8 = a2 + (a2 - a1 + a5);
    }
    else
    {
        v8 = a2 * a2 + a1 * a3;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 16
2 16
3 18
4 18
5 18
6 18
7 18
8 22
9 22
10 22
11 22
12 22
13 24
14 24
15 24
16 24
17 24
18 25
<<<sep_out_sample>>>
cmp %esi,%ecx
jge 10 <func1+0x10>
mov %edi,%r9d
imul %edi,%r9d
add %ecx,%r9d
jmp 19 <func1+0x19>
lea 0x1(%r8,%r8,1),%r9d
imul %edi,%r9d
add %edx,%edi
add %edi,%esi
add %r8d,%esi
add %ecx,%esi
add %r9d,%esi
mov %ecx,%eax
imul %r8d,%eax
imul %eax,%r8d
sub %ecx,%r8d
lea (%rsi,%r8,1),%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7 = 0;
    if (a4 < a2)
    {
        v6 = a4 + a1 * a1;
    }
    else
    {
        v6 = (a5 + a5) * a1 + a1;
    }
    v7 = (a5 * (a4 * a5)) - a4;
    return a1+a3+a2+a5+a4+v6+v7;
}
<<<sep_in_sample>>>
1 4
2 4
3 6
4 6
5 6
6 6
7 10
8 10
9 13
10 13
11 13
12 13
13 13
14 12
15 12
16 12
17 12
18 13
19 14
<<<sep_out_sample>>>
lea (%rdx,%r8,1),%eax
mov %eax,%r10d
sub %esi,%r10d
test %edi,%edi
jle 1b <func1+0x1b>
mov %r8d,%r9d
imul %edi,%r9d
imul %ecx,%r9d
jmp 27 <func1+0x27>
mov %r8d,%r9d
sub %edi,%r9d
sub %ecx,%r9d
add %edx,%r9d
sub %ecx,%eax
sub %esi,%eax
cmp %esi,%edx
jl 39 <func1+0x39>
mov %edi,%eax
sub %edx,%eax
imul %r8d,%eax
add %edx,%eax
add %edx,%edi
add %esi,%edi
add %r8d,%edi
add %edi,%ecx
add %r10d,%ecx
add %r9d,%ecx
add %ecx,%eax
imul %r8d,%edx
imul %edx,%esi
add %esi,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = (a3 + a5) - a2;
    if (v7 < a1)
    {
        v7 = a5 * a1 * a4;
    }
    else
    {
        v7 = ((a5 - a1) - a4) + a3;
    }
    if (a3 < a2)
    {
        v8 = ((a3 + a5) - a4) - a2;
    }
    else
    {
        v8 = a3 + a5 * (a1 - a3);
    }
    v9 = (a2 * (a3 * a5)) + a5;
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 5
5 5
6 7
7 7
8 7
9 7
10 11
11 11
12 11
13 11
14 15
15 15
16 13
17 13
18 19
19 19
20 19
21 19
22 22
23 22
24 22
25 22
26 22
27 22
28 22
29 21
30 21
31 21
32 22
33 23
<<<sep_out_sample>>>
lea (%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
mov %r8d,%ecx
sub %edx,%ecx
lea (%rcx,%rdi,2),%r9d
add %r9d,%eax
imul %edi,%edx
add %edx,%eax
sub %r8d,%edi
add %edi,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8 = 0;
    v6 = (a1 + a1) + (a5 - a3);
    if (a5 < a5)
    {
        v7 = a1 * a3;
    }
    else
    {
        v7 = a1 * a3;
    }
    v8 = a1 - a5;
    return a1+a3+a2+a5+a4+v6+v7+v8;
}
<<<sep_in_sample>>>
1 14
2 14
3 14
4 14
5 4
6 4
7 4
8 14
9 11
10 14
11 13
12 14
13 15
<<<sep_out_sample>>>
lea (%rdx,%rdx,1),%eax
mov %edi,%r9d
sub %eax,%r9d
imul %edi,%r9d
mov %ecx,%r11d
sub %esi,%r11d
sub %edx,%r11d
add %r8d,%r11d
mov %ecx,%r10d
sub %r8d,%r10d
cmp %ecx,%r9d
jl 2e <func1+0x2e>
mov %esi,%r10d
neg %r10d
imul %edx,%r10d
lea 0x1(%rdi,%rdx,1),%eax
add %esi,%eax
add %r8d,%eax
add %ecx,%eax
add %r9d,%eax
add %r11d,%eax
add %r10d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = (a1 - (a3 + a3)) * a1;
    v7 = (a4 - a2 - a3) + a5;
    if (v6 < a4)
    {
        v8 = ((a1 - a1) + a4) - a5;
    }
    else
    {
        v8 = a3 - (a3 * a2) - a3;
    }
    v9 = 0;
    for (v10 = 0; v10++; v10<a2)
    {
        if (v7 < a3)
        {
            v9 += (a4 * a1) + a2;
        }
        else
        {
            v9 += a5 - a5 + a3;
        }
    }
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 4
4 4
5 5
6 5
7 5
8 5
9 8
10 8
11 6
12 6
13 12
14 12
15 12
16 26
17 26
18 26
19 26
20 26
21 26
22 26
23 27
<<<sep_out_sample>>>
lea (%rcx,%rsi,1),%eax
test %edx,%edx
jg d <func1+0xd>
lea (%rdx,%r8,1),%eax
add %ecx,%eax
lea 0x1(%rdi,%rdx,1),%edi
add %edi,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%esi
add %esi,%eax
imul %r8d,%ecx
add %ecx,%edx
imul %edx,%r8d
add %r8d,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10, v11 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a2)
    {
        v6 += a5 - a5;
    }
    if (v6 < a3)
    {
        v8 = a5 + (a4 + a2 - a5);
    }
    else
    {
        v8 = a3 + a5 + a4;
    }
    v9 = (a4 * a5 + a3) * a5;
    v10 = 0;
    for (v11 = 0; v11++; v11<a5)
    {
        v10 += (a2 * a2) + a3;
    }
    return v10+v11+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 9
3 9
4 15
5 15
6 23
7 23
8 23
9 23
10 23
11 17
12 17
13 17
14 23
15 24
<<<sep_out_sample>>>
lea (%rsi,%rcx,1),%eax
cmp %ecx,%edx
jl 19 <func1+0x19>
mov %r8d,%r9d
imul %edx,%r9d
mov $0x1,%eax
sub %r9d,%eax
imul %edx,%eax
mov %edi,%r9d
imul %edi,%r9d
add %r9d,%edi
add %edx,%edi
add %edi,%esi
add %r8d,%esi
lea 0x1(%rcx,%rsi,1),%ecx
add %ecx,%eax
lea (%r8,%rdx,2),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9, v10 = 0;
    v6 = 0;
    for (v7 = 0; v7++; v7<a5)
    {
        v6 += a2 + a2 + a5;
    }
    if (a3 < a4)
    {
        v8 = a2 + a4;
    }
    else
    {
        v8 = a3 - a3 * (a5 * a3);
    }
    v9 = a5 + a3 + a3;
    v10 = a1 * a1;
    return v10+a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 11
2 9
3 9
4 15
5 15
6 15
7 15
8 15
9 18
10 18
11 19
12 19
13 19
14 19
15 19
16 19
17 17
18 19
19 20
<<<sep_out_sample>>>
mov %esi,%r9d
imul %ecx,%r9d
cmp %r9d,%esi
jle 1d <func1+0x1d>
lea (%rcx,%r8,1),%eax
add %edi,%eax
mov %esi,%r10d
sub %eax,%r10d
mov %r10d,%eax
jmp 29 <func1+0x29>
mov %r8d,%eax
imul %r8d,%eax
imul %esi,%eax
add %ecx,%eax
add %edx,%edi
add %edi,%esi
add %esi,%r8d
add %r8d,%ecx
lea 0x1(%r9,%rcx,1),%edx
add %edx,%eax
retq
<<<sep_in_sample>>>
int func1(int a1, int a2, int a3, int a4, int a5)
{
    int v6, v7, v8, v9 = 0;
    v6 = a2 * a4;
    v7 = 0;
    for (v8 = 0; v8++; v8<a3)
    {
        v7 += a3 - a5 * a1;
    }
    if (v6 < a2)
    {
        v9 = a2 - (a4 + a5 + a1);
    }
    else
    {
        v9 = a4 + a5 * a5 * a2;
    }
    return a1+a3+a2+a5+a4+v6+v7+v8+v9;
}
<<<sep_in_sample>>>
1 4
2 4
3 10
4 10
5 12
6 12
7 12
8 12
9 12
10 12
11 16
12 16
13 16
14 16
15 18
16 18
17 18
18 18
19 18
20 18
21 19